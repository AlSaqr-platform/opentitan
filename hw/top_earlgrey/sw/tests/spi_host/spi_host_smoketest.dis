
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/device/tests/spi_host_smoketest_prog_fpga_cw310.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/device/tests/spi_host_smoketest_prog_fpga_cw310.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xf0000480

Program Header:
    LOAD off    0x00000000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00000000 memsz 0x00001fc4 flags rw-
    LOAD off    0x00001000 vaddr 0xf0000000 paddr 0xf0000000 align 2**12
         filesz 0x000039e0 memsz 0x000039e0 flags rwx
    LOAD off    0x00004fc4 vaddr 0xe0001fc4 paddr 0xf00039e0 align 2**12
         filesz 0x00000084 memsz 0x000001c0 flags rw-
    LOAD off    0x00000184 vaddr 0xe0002184 paddr 0xf0003a64 align 2**12
         filesz 0x00000000 memsz 0x00008000 flags rw-
    LOAD off    0x00000000 vaddr 0xf0079000 paddr 0xf0079000 align 2**12
         filesz 0x00000000 memsz 0x00007000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name                    Size      VMA       LMA       File off  Algn  Flags
  0 .manifest               00000400  f0000000  f0000000  00001000  2**3  CONTENTS, ALLOC, LOAD, DATA
  1 .vectors                00000080  f0000400  f0000400  00001400  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .crt                    000000c6  f0000480  f0000480  00001480  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array             00000000  f0000548  f0000548  00005048  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .text                   00002498  f0000548  f0000548  00001548  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .shutdown               00000000  f00029e0  f00029e0  00005048  2**2  CONTENTS
  6 .rodata                 00001000  f00029e0  f00029e0  000039e0  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .static_critical        00001fc4  e0000000  e0000000  00001000  2**2  ALLOC
  8 .data                   00000084  e0001fc4  f00039e0  00004fc4  2**2  CONTENTS, ALLOC, LOAD, DATA
  9 .bss                    0000013c  e0002048  f0003a64  00005048  2**2  ALLOC
 10 .freertos.heap          00008000  e0002184  f0003a64  00005184  2**2  ALLOC
 11 .non_volatile_scratch   00005000  f007b000  f007b000  00006000  2**11  ALLOC
 12 .non_volatile_counter_0 00000800  f007a800  f007a800  00006000  2**11  ALLOC
 13 .non_volatile_counter_1 00000800  f007a000  f007a000  00006000  2**11  ALLOC
 14 .non_volatile_counter_2 00000800  f0079800  f0079800  00006000  2**11  ALLOC
 15 .non_volatile_counter_3 00000800  f0079000  f0079000  00006000  2**11  ALLOC
 16 .logs.fields            000001cc  00010000  00010000  00005048  2**2  CONTENTS, READONLY
 17 .riscv.attributes       00000026  00000000  00000000  00005214  2**0  CONTENTS, READONLY
 18 .debug_info             0000c27c  00000000  00000000  0000523a  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev           00002b12  00000000  00000000  000114b6  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges          00000088  00000000  00000000  00013fc8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line             00008d2e  00000000  00000000  00014050  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc              000078a8  00000000  00000000  0001cd7e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges           00000b88  00000000  00000000  00024626  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str              000048b9  00000000  00000000  000251ae  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame            00001120  00000000  00000000  00029a68  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
f0000000 l    d  .manifest      00000000 .manifest
f0000400 l    d  .vectors       00000000 .vectors
f0000480 l    d  .crt   00000000 .crt
f0000548 l    d  .init_array    00000000 .init_array
f0000548 l    d  .text  00000000 .text
f00029e0 l    d  .shutdown      00000000 .shutdown
f00029e0 l    d  .rodata        00000000 .rodata
e0000000 l    d  .static_critical       00000000 .static_critical
e0001fc4 l    d  .data  00000000 .data
e0002048 l    d  .bss   00000000 .bss
e0002184 l    d  .freertos.heap 00000000 .freertos.heap
f007b000 l    d  .non_volatile_scratch  00000000 .non_volatile_scratch
f007a800 l    d  .non_volatile_counter_0        00000000 .non_volatile_counter_0
f007a000 l    d  .non_volatile_counter_1        00000000 .non_volatile_counter_1
f0079800 l    d  .non_volatile_counter_2        00000000 .non_volatile_counter_2
f0079000 l    d  .non_volatile_counter_3        00000000 .non_volatile_counter_3
00010000 l    d  .logs.fields   00000000 .logs.fields
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    df *ABS*  00000000 manifest_def.c
f0000000 l     O .manifest      00000380 kManifest_
00000000 l       .debug_str     00000000 
00001adf l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00001b0c l       .debug_str     00000000 
00001cb7 l       .debug_str     00000000 
00001cae l       .debug_str     00000000 
00001b17 l       .debug_str     00000000 
00001bc5 l       .debug_str     00000000 
00001bf4 l       .debug_str     00000000 
00001bfc l       .debug_str     00000000 
00001c10 l       .debug_str     00000000 
000004ae l       .debug_str     00000000 
00001c1b l       .debug_str     00000000 
00001c29 l       .debug_str     00000000 
00001c37 l       .debug_str     00000000 
00001c48 l       .debug_str     00000000 
00001c59 l       .debug_str     00000000 
00001c7e l       .debug_str     00000000 
00001c8e l       .debug_str     00000000 
00001c99 l       .debug_str     00000000 
00001ca2 l       .debug_str     00000000 
00001b36 l       .debug_str     00000000 
00001b21 l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00001bd7 l       .debug_str     00000000 
00001bbc l       .debug_str     00000000 
00001b4d l       .debug_str     00000000 
00001b65 l       .debug_str     00000000 
00001b85 l       .debug_str     00000000 
00001b99 l       .debug_str     00000000 
00001bab l       .debug_str     00000000 
00001b6f l       .debug_str     00000000 
00001b5b l       .debug_str     00000000 
00000ba7 l       .debug_str     00000000 
00000b90 l       .debug_str     00000000 
00001c67 l       .debug_str     00000000 
00001c52 l       .debug_str     00000000 
00001cc2 l       .debug_str     00000000 
00000488 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_start.o
f0000400 l       .vectors       00000000 
f0000400 l       .vectors       00000000 
f0000480 l       .crt   00000000 
f0000480 l       .crt   00000000 
f00004e4 l       .crt   00000000 init_array_loop_end
f00004d8 l       .crt   00000000 init_array_loop
f00004d8 l       .crt   00000000 
f00004e4 l       .crt   00000000 
0000406b l       .debug_info    00000000 
00000d34 l       .debug_abbrev  00000000 
f0000480 l       .vectors       00000000 
f00004e8 l       .crt   00000000 
00000318 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 crt.o
f00004e8 l       .crt   00000000 
f00004e8 l       .crt   00000000 
f000050a l       .crt   00000000 
f000050c l       .crt   00000000 
f000050c l       .crt   00000000 
000045b1 l       .debug_info    00000000 
00000e2a l       .debug_abbrev  00000000 
f0000546 l       .crt   00000000 
00000000 l    df *ABS*  00000000 freertos_port.o
f0000548 l       .text  00000000 
f0000548 l       .text  00000000 
f0000598 l       .text  00000000 
f000059c l       .text  00000000 
f000059c l       .text  00000000 
000035f5 l       .debug_info    00000000 
000009ee l       .debug_abbrev  00000000 
f00005c0 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.o
f00005c0 l     F .text  00000026 compute_mepc_on_synchronous_irq
f00005c0 l       .text  00000000 
f00005c0 l       .text  00000000 
f00005e4 l       .text  00000000 
f00005e8 l     F .text  0000001e save_current_sp_to_tcb
f00005e8 l       .text  00000000 
f00005e8 l       .text  00000000 
f0000604 l       .text  00000000 
f0000608 l       .text  00000000 
f0000608 l       .text  00000000 
f000064a l       .text  00000000 
f000064c l       .text  00000000 
f000064e l       .text  00000000 
f0000650 l       .text  00000000 
f0000654 l       .text  00000000 
f0000658 l       .text  00000000 
f0000658 l       .text  00000000 
f00006a0 l       .text  00000000 
f00006a2 l       .text  00000000 
f00006a6 l       .text  00000000 
f00006ac l       .text  00000000 
f00006ac l       .text  00000000 
f00006f4 l       .text  00000000 
f00006f6 l       .text  00000000 
f00006fa l       .text  00000000 
f0000700 l       .text  00000000 
f0000700 l       .text  00000000 
f0000748 l       .text  00000000 
f000074a l       .text  00000000 
f000074e l       .text  00000000 
f0000754 l       .text  00000000 
f0000754 l       .text  00000000 
f000079c l       .text  00000000 
f000079e l       .text  00000000 
f00007a2 l       .text  00000000 
f00007a8 l       .text  00000000 
f00007a8 l       .text  00000000 
000041b0 l       .debug_info    00000000 
00000d53 l       .debug_abbrev  00000000 
f0000810 l       .text  00000000 
00000000 l    df *ABS*  00000000 spi_host_smoketest.c
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000812 l       .text  00000000 
f0000812 l       .text  00000000 
f000081e l       .text  00000000 
f0000826 l       .text  00000000 
f000082c l       .text  00000000 
f0000832 l       .text  00000000 
f0000834 l       .text  00000000 
f000083c l       .text  00000000 
f000083e l       .text  00000000 
f0000846 l       .text  00000000 
f0000848 l       .text  00000000 
f0000854 l       .text  00000000 
f0000854 l       .text  00000000 
f000085c l       .text  00000000 
f000085c l       .text  00000000 
f0000866 l       .text  00000000 
f0000866 l       .text  00000000 
f0000868 l       .text  00000000 
f000086a l       .text  00000000 
f000086a l       .text  00000000 
f000086c l       .text  00000000 
00010000 l     O .logs.fields   00000014 read_sfdp.kLogFields
f000086c l       .text  00000000 
f000087c l       .text  00000000 
f000087c l       .text  00000000 
f000087e l       .text  00000000 
f000087e l       .text  00000000 
f0000896 l       .text  00000000 
f0000896 l       .text  00000000 
f000089c l       .text  00000000 
f00008a0 l       .text  00000000 
f00008a0 l       .text  00000000 
f00008a2 l       .text  00000000 
f00008a2 l       .text  00000000 
f00008a4 l       .text  00000000 
00010014 l     O .logs.fields   00000014 read_sfdp.kLogFields.2
f00008a4 l       .text  00000000 
f00008b4 l       .text  00000000 
f00008b4 l       .text  00000000 
f00008bc l       .text  00000000 
00010028 l     O .logs.fields   00000014 read_sfdp.kLogFields.5
f00008c0 l       .text  00000000 
f00008ce l       .text  00000000 
f00008ce l       .text  00000000 
f00008d0 l       .text  00000000 
f00008d0 l       .text  00000000 
f00008e8 l       .text  00000000 
f00008e8 l       .text  00000000 
f00008f0 l       .text  00000000 
f00008f0 l       .text  00000000 
f00008f4 l       .text  00000000 
f00008f4 l       .text  00000000 
f000090a l       .text  00000000 
f000090a l       .text  00000000 
f0000910 l       .text  00000000 
f0000914 l       .text  00000000 
f0000914 l       .text  00000000 
f000091c l       .text  00000000 
f0000924 l       .text  00000000 
f0000924 l       .text  00000000 
f0000924 l       .text  00000000 
f0000924 l       .text  00000000 
f0000924 l       .text  00000000 
f0000926 l       .text  00000000 
f0000926 l       .text  00000000 
f0000926 l       .text  00000000 
f000092c l       .text  00000000 
f0000934 l       .text  00000000 
f0000934 l       .text  00000000 
f000093c l       .text  00000000 
f000093e l       .text  00000000 
f000093e l       .text  00000000 
f0000940 l       .text  00000000 
f0000940 l       .text  00000000 
f0000942 l       .text  00000000 
f0000944 l       .text  00000000 
0001003c l     O .logs.fields   00000014 test_main.kLogFields
f0000944 l       .text  00000000 
f0000954 l       .text  00000000 
f0000954 l       .text  00000000 
f0000956 l       .text  00000000 
f0000956 l       .text  00000000 
f000096e l       .text  00000000 
f000096e l       .text  00000000 
f0000974 l       .text  00000000 
f0000978 l       .text  00000000 
f0000978 l       .text  00000000 
f00009a2 l       .text  00000000 
f00009a4 l       .text  00000000 
f00009a6 l       .text  00000000 
f00009a6 l       .text  00000000 
00010050 l     O .logs.fields   00000014 test_main.kLogFields.9
f00009a8 l       .text  00000000 
f00009b6 l       .text  00000000 
f00009b6 l       .text  00000000 
f00009b8 l       .text  00000000 
f00009b8 l       .text  00000000 
f00009ce l       .text  00000000 
f00009ce l       .text  00000000 
f00009d4 l       .text  00000000 
f00009d8 l       .text  00000000 
f00009d8 l       .text  00000000 
f00009de l       .text  00000000 
f00009e0 l       .text  00000000 
f00009e2 l       .text  00000000 
f00009e2 l       .text  00000000 
f00009e4 l       .text  00000000 
f00009e6 l       .text  00000000 
00010064 l     O .logs.fields   00000014 test_main.kLogFields.12
f00009e6 l       .text  00000000 
f00009f6 l       .text  00000000 
f00009f6 l       .text  00000000 
f00009f8 l       .text  00000000 
f00009f8 l       .text  00000000 
f0000a10 l       .text  00000000 
f0000a10 l       .text  00000000 
f0000a16 l       .text  00000000 
f0000a1a l       .text  00000000 
f0000a1a l       .text  00000000 
f0000a1e l       .text  00000000 
f0000a1e l       .text  00000000 
f0000a2a l       .text  00000000 
f0000a2a l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000001b l       .debug_loc     00000000 
0000004c l       .debug_loc     00000000 
00000072 l       .debug_loc     00000000 
000000a3 l       .debug_loc     00000000 
000000be l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000018 l       .debug_ranges  00000000 
000000a8 l       .debug_str     00000000 
000000f8 l       .debug_str     00000000 
000000e7 l       .debug_str     00000000 
000000b8 l       .debug_str     00000000 
000000d1 l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
000005d0 l       .debug_str     00000000 
0000010b l       .debug_str     00000000 
00000445 l       .debug_str     00000000 
000004cf l       .debug_str     00000000 
000005f8 l       .debug_str     00000000 
000005d5 l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
00000373 l       .debug_str     00000000 
00000198 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
000024a1 l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
00000191 l       .debug_str     00000000 
00000169 l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000116 l       .debug_str     00000000 
00000127 l       .debug_str     00000000 
00000138 l       .debug_str     00000000 
0000014a l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
000005da l       .debug_str     00000000 
0000025d l       .debug_str     00000000 
000001b0 l       .debug_str     00000000 
000001cd l       .debug_str     00000000 
000001eb l       .debug_str     00000000 
00000207 l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000239 l       .debug_str     00000000 
000002ba l       .debug_str     00000000 
00000277 l       .debug_str     00000000 
00000290 l       .debug_str     00000000 
000002a5 l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
000002cd l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
00000310 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000321 l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000347 l       .debug_str     00000000 
00000356 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00001026 l       .debug_str     00000000 
0000037e l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
000003ac l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003cf l       .debug_str     00000000 
000003e1 l       .debug_str     00000000 
000003f3 l       .debug_str     00000000 
000003fb l       .debug_str     00000000 
00001aae l       .debug_str     00000000 
000003ff l       .debug_str     00000000 
00000441 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
000004d3 l       .debug_str     00000000 
00000e66 l       .debug_str     00000000 
00000c1b l       .debug_str     00000000 
00000c7e l       .debug_str     00000000 
00002f1b l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
000004ae l       .debug_str     00000000 
00000d79 l       .debug_str     00000000 
000004be l       .debug_str     00000000 
000004c1 l       .debug_str     00000000 
000004c7 l       .debug_str     00000000 
000004cd l       .debug_str     00000000 
0000044e l       .debug_str     00000000 
00000478 l       .debug_str     00000000 
0000046a l       .debug_str     00000000 
00000480 l       .debug_str     00000000 
00000495 l       .debug_str     00000000 
000004b7 l       .debug_str     00000000 
000004b5 l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
000004fd l       .debug_str     00000000 
00000514 l       .debug_str     00000000 
00000524 l       .debug_str     00000000 
00000536 l       .debug_str     00000000 
0000059c l       .debug_str     00000000 
0000054d l       .debug_str     00000000 
00000557 l       .debug_str     00000000 
00000570 l       .debug_str     00000000 
00002dd8 l       .debug_str     00000000 
0000057c l       .debug_str     00000000 
00000582 l       .debug_str     00000000 
00000587 l       .debug_str     00000000 
00000592 l       .debug_str     00000000 
00000597 l       .debug_str     00000000 
000005b0 l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00000601 l       .debug_str     00000000 
00000618 l       .debug_str     00000000 
00000627 l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
f0000924 l       .text  00000000 
f0000a2a l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_spi_host_autogen.c
f0000a2a l       .text  00000000 
f0000a2a l       .text  00000000 
f0000a2a l       .text  00000000 
f0000a2a l       .text  00000000 
f0000a2c l       .text  00000000 
f0000a2e l       .text  00000000 
f0000a32 l       .text  00000000 
f0000a34 l       .text  00000000 
f0000a36 l       .text  00000000 
f0000a38 l       .text  00000000 
f0000a38 l       .text  00000000 
000000ef l       .debug_loc     00000000 
0000010a l       .debug_loc     00000000 
00000125 l       .debug_loc     00000000 
00000140 l       .debug_loc     00000000 
0000015c l       .debug_loc     00000000 
00000178 l       .debug_loc     00000000 
00000193 l       .debug_loc     00000000 
000001ae l       .debug_loc     00000000 
000001c9 l       .debug_loc     00000000 
000001e4 l       .debug_loc     00000000 
000001ff l       .debug_loc     00000000 
0000021a l       .debug_loc     00000000 
00000235 l       .debug_loc     00000000 
00000250 l       .debug_loc     00000000 
00000276 l       .debug_loc     00000000 
00000291 l       .debug_loc     00000000 
000002ac l       .debug_loc     00000000 
000002ca l       .debug_loc     00000000 
000002f1 l       .debug_loc     00000000 
0000030c l       .debug_loc     00000000 
00000327 l       .debug_loc     00000000 
00000342 l       .debug_loc     00000000 
00000360 l       .debug_loc     00000000 
00000387 l       .debug_loc     00000000 
000003a2 l       .debug_loc     00000000 
000003bd l       .debug_loc     00000000 
000003d8 l       .debug_loc     00000000 
000003f3 l       .debug_loc     00000000 
00000419 l       .debug_loc     00000000 
00000434 l       .debug_loc     00000000 
0000044f l       .debug_loc     00000000 
00000475 l       .debug_loc     00000000 
00000495 l       .debug_loc     00000000 
000004bb l       .debug_loc     00000000 
000004d9 l       .debug_loc     00000000 
000004f4 l       .debug_loc     00000000 
0000050f l       .debug_loc     00000000 
0000052f l       .debug_loc     00000000 
00000555 l       .debug_loc     00000000 
0000057b l       .debug_loc     00000000 
00000596 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000634 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000030 l       .debug_ranges  00000000 
00000665 l       .debug_str     00000000 
0000069f l       .debug_str     00000000 
00000692 l       .debug_str     00000000 
0000066f l       .debug_str     00000000 
00000680 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000310 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000321 l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000347 l       .debug_str     00000000 
00000356 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
000006c9 l       .debug_str     00000000 
000006ae l       .debug_str     00000000 
00000707 l       .debug_str     00000000 
000006dc l       .debug_str     00000000 
000006f0 l       .debug_str     00000000 
0000073d l       .debug_str     00000000 
00000718 l       .debug_str     00000000 
0000072b l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000524 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000445 l       .debug_str     00000000 
00000748 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
00001ed4 l       .debug_str     00000000 
00001c61 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
0000075c l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
0000083a l       .debug_str     00000000 
000029ee l       .debug_str     00000000 
00000982 l       .debug_str     00000000 
0000098c l       .debug_str     00000000 
00000853 l       .debug_str     00000000 
00001941 l       .debug_str     00000000 
00000e66 l       .debug_str     00000000 
00000766 l       .debug_str     00000000 
0000086d l       .debug_str     00000000 
0000099b l       .debug_str     00000000 
00000779 l       .debug_str     00000000 
000007a7 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00000794 l       .debug_str     00000000 
000007b1 l       .debug_str     00000000 
000007c8 l       .debug_str     00000000 
000007dc l       .debug_str     00000000 
0000078a l       .debug_str     00000000 
00000888 l       .debug_str     00000000 
00001e42 l       .debug_str     00000000 
000009c6 l       .debug_str     00000000 
00001d8a l       .debug_str     00000000 
000008a4 l       .debug_str     00000000 
000007e5 l       .debug_str     00000000 
000007df l       .debug_str     00000000 
00000812 l       .debug_str     00000000 
00000801 l       .debug_str     00000000 
000007fc l       .debug_str     00000000 
00000825 l       .debug_str     00000000 
000008c5 l       .debug_str     00000000 
000008e2 l       .debug_str     00000000 
00001aae l       .debug_str     00000000 
000009d5 l       .debug_str     00000000 
000008f9 l       .debug_str     00000000 
00001bb6 l       .debug_str     00000000 
000009f0 l       .debug_str     00000000 
00000a00 l       .debug_str     00000000 
00000916 l       .debug_str     00000000 
00000a0b l       .debug_str     00000000 
00000933 l       .debug_str     00000000 
00000950 l       .debug_str     00000000 
00000627 l       .debug_str     00000000 
00000618 l       .debug_str     00000000 
00000441 l       .debug_str     00000000 
0000096d l       .debug_str     00000000 
000009a4 l       .debug_str     00000000 
000009e3 l       .debug_str     00000000 
00000a16 l       .debug_str     00000000 
0000004c l       .debug_frame   00000000 
f0000a38 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_spi_host.c
f0000a38 l       .text  00000000 
f0000a38 l       .text  00000000 
f0000a38 l       .text  00000000 
f0000a3a l       .text  00000000 
f0000a3c l       .text  00000000 
f0000a44 l       .text  00000000 
f0000a48 l       .text  00000000 
f0000a48 l       .text  00000000 
f0000a4c l       .text  00000000 
f0000a4c l       .text  00000000 
f0000a50 l       .text  00000000 
f0000a56 l       .text  00000000 
f0000a58 l       .text  00000000 
f0000a58 l       .text  00000000 
f0000a62 l       .text  00000000 
f0000a64 l       .text  00000000 
f0000a64 l       .text  00000000 
f0000a66 l       .text  00000000 
f0000a66 l       .text  00000000 
f0000a6a l       .text  00000000 
f0000a6a l       .text  00000000 
f0000a6e l       .text  00000000 
f0000a6e l       .text  00000000 
f0000a72 l       .text  00000000 
f0000a72 l       .text  00000000 
f0000a74 l       .text  00000000 
f0000a74 l       .text  00000000 
f0000a7a l       .text  00000000 
f0000a7a l       .text  00000000 
f0000a7e l       .text  00000000 
f0000a7e l       .text  00000000 
f0000a82 l       .text  00000000 
f0000a8a l       .text  00000000 
f0000a8a l       .text  00000000 
f0000a8e l       .text  00000000 
f0000a8e l       .text  00000000 
f0000a90 l       .text  00000000 
f0000a90 l       .text  00000000 
f0000a96 l       .text  00000000 
f0000a9c l       .text  00000000 
f0000aa0 l       .text  00000000 
f0000aa8 l       .text  00000000 
f0000aa8 l       .text  00000000 
f0000aaa l       .text  00000000 
f0000aaa l       .text  00000000 
f0000aae l       .text  00000000 
f0000aae l       .text  00000000 
f0000ab2 l       .text  00000000 
f0000ab2 l       .text  00000000 
f0000ab4 l       .text  00000000 
f0000ab4 l       .text  00000000 
f0000ab6 l       .text  00000000 
f0000ab6 l       .text  00000000 
f0000abc l       .text  00000000 
f0000abc l       .text  00000000 
f0000abe l       .text  00000000 
f0000ac2 l       .text  00000000 
f0000ac6 l       .text  00000000 
f0000ac8 l       .text  00000000 
f0000ad4 l       .text  00000000 
f0000ad4 l       .text  00000000 
f0000ad6 l       .text  00000000 
f0000ad6 l       .text  00000000 
f0000ada l       .text  00000000 
f0000ada l       .text  00000000 
f0000ade l       .text  00000000 
f0000ade l       .text  00000000 
f0000ae2 l       .text  00000000 
f0000ae2 l       .text  00000000 
f0000ae6 l       .text  00000000 
f0000ae6 l       .text  00000000 
f0000aec l       .text  00000000 
f0000aee l       .text  00000000 
f0000af0 l       .text  00000000 
f0000af2 l       .text  00000000 
f0000af4 l       .text  00000000 
f0000af6 l       .text  00000000 
f0000af6 l       .text  00000000 
f0000af6 l       .text  00000000 
f0000af6 l       .text  00000000 
f0000af6 l       .text  00000000 
f0000af8 l       .text  00000000 
f0000b06 l       .text  00000000 
f0000b08 l       .text  00000000 
f0000b0a l       .text  00000000 
f0000b0e l       .text  00000000 
f0000b10 l       .text  00000000 
f0000b12 l       .text  00000000 
f0000b12 l       .text  00000000 
f0000b1a l       .text  00000000 
f0000b20 l       .text  00000000 
f0000b20 l       .text  00000000 
f0000b28 l       .text  00000000 
f0000b38 l       .text  00000000 
f0000b38 l       .text  00000000 
f0000b3c l       .text  00000000 
f0000b3c l       .text  00000000 
f0000b40 l       .text  00000000 
f0000b4a l       .text  00000000 
f0000b4a l       .text  00000000 
f0000b4c l       .text  00000000 
f0000b4e l       .text  00000000 
f0000b4e l       .text  00000000 
f0000b58 l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b5e l       .text  00000000 
f0000b5e l       .text  00000000 
f0000b60 l       .text  00000000 
f0000b60 l       .text  00000000 
f0000b62 l       .text  00000000 
f0000b62 l       .text  00000000 
f0000b64 l       .text  00000000 
f0000b64 l       .text  00000000 
f0000cec l     F .text  00000038 enqueue_word
f0000b68 l       .text  00000000 
f0000b68 l       .text  00000000 
f0000b6a l       .text  00000000 
f0000b6a l       .text  00000000 
f0000b6c l       .text  00000000 
f0000b6e l       .text  00000000 
f0000b6e l       .text  00000000 
f0000b72 l       .text  00000000 
f0000b72 l       .text  00000000 
f0000b78 l       .text  00000000 
f0000b7c l       .text  00000000 
f0000b7c l       .text  00000000 
f0000b80 l       .text  00000000 
f0000b80 l       .text  00000000 
f0000b84 l       .text  00000000 
f0000b84 l       .text  00000000 
f0000b88 l       .text  00000000 
f0000b8a l       .text  00000000 
f0000b8a l       .text  00000000 
f0000b90 l       .text  00000000 
f0000b90 l       .text  00000000 
f0000b94 l       .text  00000000 
f0000b94 l       .text  00000000 
f0000b98 l       .text  00000000 
f0000ba0 l       .text  00000000 
f0000ba0 l       .text  00000000 
f0000ba8 l       .text  00000000 
f0000ba8 l       .text  00000000 
f0000bac l       .text  00000000 
f0000bb2 l       .text  00000000 
f0000bb6 l       .text  00000000 
f0000bbe l       .text  00000000 
f0000bc4 l       .text  00000000 
f0000bc8 l       .text  00000000 
f0000bc8 l       .text  00000000 
f0000bca l       .text  00000000 
f0000bca l       .text  00000000 
f0000bcc l       .text  00000000 
f0000bcc l       .text  00000000 
f0000bce l       .text  00000000 
f0000bce l       .text  00000000 
f0000bd0 l       .text  00000000 
f0000bd0 l       .text  00000000 
f0000bd4 l       .text  00000000 
f0000bd4 l       .text  00000000 
f0000bd6 l       .text  00000000 
f0000bd6 l       .text  00000000 
f0000bd8 l       .text  00000000 
f0000bd8 l       .text  00000000 
f0000bda l       .text  00000000 
f0000bda l       .text  00000000 
f0000bdc l       .text  00000000 
f0000bdc l       .text  00000000 
f0000be0 l       .text  00000000 
f0000be0 l       .text  00000000 
f0000be2 l       .text  00000000 
f0000be2 l       .text  00000000 
f0000be8 l       .text  00000000 
f0000bea l       .text  00000000 
f0000bee l       .text  00000000 
f0000bee l       .text  00000000 
f0000bf4 l       .text  00000000 
f0000bf8 l       .text  00000000 
f0000bfa l       .text  00000000 
f0000bfa l       .text  00000000 
f0000c00 l       .text  00000000 
f0000c04 l       .text  00000000 
f0000c04 l       .text  00000000 
f0000c06 l       .text  00000000 
f0000c06 l       .text  00000000 
f0000c08 l       .text  00000000 
f0000c08 l       .text  00000000 
f0000c0a l       .text  00000000 
f0000c0a l       .text  00000000 
f0000c0c l       .text  00000000 
f0000c0c l       .text  00000000 
f0000c10 l       .text  00000000 
f0000c10 l       .text  00000000 
f0000c12 l       .text  00000000 
f0000c12 l       .text  00000000 
f0000c14 l       .text  00000000 
f0000c16 l       .text  00000000 
f0000c16 l       .text  00000000 
f0000c1a l       .text  00000000 
f0000c1a l       .text  00000000 
f0000c20 l       .text  00000000 
f0000c24 l       .text  00000000 
f0000c24 l       .text  00000000 
f0000c28 l       .text  00000000 
f0000c28 l       .text  00000000 
f0000c2c l       .text  00000000 
f0000c2c l       .text  00000000 
f0000c30 l       .text  00000000 
f0000c36 l       .text  00000000 
f0000c38 l       .text  00000000 
f0000c38 l       .text  00000000 
f0000c3a l       .text  00000000 
f0000c3a l       .text  00000000 
f0000c3c l       .text  00000000 
f0000c3c l       .text  00000000 
f0000c44 l       .text  00000000 
f0000c4e l       .text  00000000 
f0000c4e l       .text  00000000 
f0000c4e l       .text  00000000 
f0000c4e l       .text  00000000 
f0000c4e l       .text  00000000 
f0000c50 l       .text  00000000 
f0000c52 l       .text  00000000 
f0000c54 l       .text  00000000 
f0000c56 l       .text  00000000 
f0000c58 l       .text  00000000 
f0000c5a l       .text  00000000 
f0000c5e l       .text  00000000 
f0000c60 l       .text  00000000 
f0000c62 l       .text  00000000 
f0000c62 l       .text  00000000 
f0000c66 l       .text  00000000 
f0000c68 l       .text  00000000 
f0000c68 l       .text  00000000 
f0000c6e l       .text  00000000 
f0000c6e l       .text  00000000 
f0000c72 l       .text  00000000 
f0000c72 l       .text  00000000 
f0000c74 l       .text  00000000 
f0000c74 l       .text  00000000 
f0000c76 l       .text  00000000 
f0000c76 l       .text  00000000 
f0000c78 l       .text  00000000 
f0000c78 l       .text  00000000 
f0000c7c l       .text  00000000 
f0000c7c l       .text  00000000 
f0000c7e l       .text  00000000 
f0000c7e l       .text  00000000 
f0000c80 l       .text  00000000 
f0000c80 l       .text  00000000 
f0000c82 l       .text  00000000 
f0000c82 l       .text  00000000 
f0000c86 l       .text  00000000 
f0000c86 l       .text  00000000 
f0000c8a l       .text  00000000 
f0000c8a l       .text  00000000 
f0000c8c l       .text  00000000 
f0000c8c l       .text  00000000 
f0000c8e l       .text  00000000 
f0000c92 l       .text  00000000 
f0000c92 l       .text  00000000 
f0000c96 l       .text  00000000 
f0000c96 l       .text  00000000 
f0000c9a l       .text  00000000 
f0000c9a l       .text  00000000 
f0000ca0 l       .text  00000000 
f0000ca0 l       .text  00000000 
f0000ca2 l       .text  00000000 
f0000ca2 l       .text  00000000 
f0000ca6 l       .text  00000000 
f0000ca6 l       .text  00000000 
f0000ca8 l       .text  00000000 
f0000caa l       .text  00000000 
f0000caa l       .text  00000000 
f0000cae l       .text  00000000 
f0000cae l       .text  00000000 
f0000cb0 l       .text  00000000 
f0000cb0 l       .text  00000000 
f0000cb2 l       .text  00000000 
f0000cb2 l       .text  00000000 
f0000cb6 l       .text  00000000 
f0000cb6 l       .text  00000000 
f0000cb8 l       .text  00000000 
f0000cb8 l       .text  00000000 
f0000cba l       .text  00000000 
f0000cba l       .text  00000000 
f0000cbc l       .text  00000000 
f0000cbc l       .text  00000000 
f0000cbe l       .text  00000000 
f0000cbe l       .text  00000000 
f0000cc0 l       .text  00000000 
f0000cc0 l       .text  00000000 
f0000cc2 l       .text  00000000 
f0000cc2 l       .text  00000000 
f0000cc4 l       .text  00000000 
f0000cc4 l       .text  00000000 
f0000cca l       .text  00000000 
f0000cca l       .text  00000000 
f0000ccc l       .text  00000000 
f0000ccc l       .text  00000000 
f0000cd0 l       .text  00000000 
f0000cd0 l       .text  00000000 
f0000cd0 l       .text  00000000 
f0000cd0 l       .text  00000000 
f0000cd0 l       .text  00000000 
f0000cd0 l       .text  00000000 
f0000cd2 l       .text  00000000 
f0000cd4 l       .text  00000000 
f0000cd4 l       .text  00000000 
f0000cd6 l       .text  00000000 
f0000cd6 l       .text  00000000 
f0000cd8 l       .text  00000000 
f0000cde l       .text  00000000 
f0000cde l       .text  00000000 
f0000ce0 l       .text  00000000 
f0000ce0 l       .text  00000000 
f0000ce2 l       .text  00000000 
f0000ce2 l       .text  00000000 
f0000ce4 l       .text  00000000 
f0000ce4 l       .text  00000000 
f0000ce6 l       .text  00000000 
f0000ce6 l       .text  00000000 
f0000ce8 l       .text  00000000 
f0000ce8 l       .text  00000000 
f0000cea l       .text  00000000 
f0000cea l       .text  00000000 
f0000cec l       .text  00000000 
f0000cec l       .text  00000000 
f0000cec l       .text  00000000 
f0000cec l       .text  00000000 
f0000cec l       .text  00000000 
f0000cec l       .text  00000000 
f0000cee l       .text  00000000 
f0000cf2 l       .text  00000000 
f0000cf4 l       .text  00000000 
f0000cf4 l       .text  00000000 
f0000cfa l       .text  00000000 
f0000cfc l       .text  00000000 
f0000d02 l       .text  00000000 
f0000d02 l       .text  00000000 
f0000d04 l       .text  00000000 
f0000d04 l       .text  00000000 
f0000d06 l       .text  00000000 
f0000d06 l       .text  00000000 
f0000d0c l       .text  00000000 
f0000d0e l       .text  00000000 
f0000d0e l       .text  00000000 
f0000d10 l       .text  00000000 
f0000d10 l       .text  00000000 
f0000d14 l       .text  00000000 
f0000d14 l       .text  00000000 
f0000d16 l       .text  00000000 
f0000d16 l       .text  00000000 
f0000d18 l       .text  00000000 
f0000d18 l       .text  00000000 
f0000d1a l       .text  00000000 
f0000d1a l       .text  00000000 
f0000d1c l       .text  00000000 
f0000d1c l       .text  00000000 
f0000d1e l       .text  00000000 
f0000d22 l       .text  00000000 
f0000d24 l       .text  00000000 
f0000d24 l       .text  00000000 
f0000d24 l       .text  00000000 
f0000d24 l       .text  00000000 
f0000d24 l       .text  00000000 
f0000d26 l       .text  00000000 
f0000d40 l       .text  00000000 
f0000d42 l       .text  00000000 
f0000d42 l       .text  00000000 
f0000d44 l       .text  00000000 
f0000d44 l       .text  00000000 
f0000d46 l       .text  00000000 
f0000d46 l       .text  00000000 
f0000d4a l       .text  00000000 
f0000d4c l       .text  00000000 
f0000d4e l       .text  00000000 
f0000d64 l       .text  00000000 
f0000d7a l       .text  00000000 
f0000d7c l       .text  00000000 
f0000d7c l       .text  00000000 
f0000d80 l       .text  00000000 
f0000d80 l       .text  00000000 
f0000d82 l       .text  00000000 
f0000d82 l       .text  00000000 
f0000d86 l       .text  00000000 
f0000d86 l       .text  00000000 
f0000d8e l       .text  00000000 
f0000d92 l       .text  00000000 
f0000da0 l       .text  00000000 
f0000da2 l       .text  00000000 
f0000da2 l       .text  00000000 
f0000da4 l       .text  00000000 
f0000da4 l       .text  00000000 
f0000da8 l       .text  00000000 
f0000da8 l       .text  00000000 
f0000dac l       .text  00000000 
f0000dac l       .text  00000000 
f0000db0 l       .text  00000000 
f0000db0 l       .text  00000000 
f0000db6 l       .text  00000000 
f0000db6 l       .text  00000000 
f0000dba l       .text  00000000 
f0000dba l       .text  00000000 
f0000dbe l       .text  00000000 
f0000dbe l       .text  00000000 
f0000dc2 l       .text  00000000 
f0000dc4 l       .text  00000000 
f0000dc4 l       .text  00000000 
f0000dc6 l       .text  00000000 
f0000dc6 l       .text  00000000 
f0000dca l       .text  00000000 
f0000dca l       .text  00000000 
f0000dce l       .text  00000000 
f0000dce l       .text  00000000 
f0000dd0 l       .text  00000000 
f0000dd0 l       .text  00000000 
f0000de2 l       .text  00000000 
f0000de2 l       .text  00000000 
f0000de6 l       .text  00000000 
f0000de6 l       .text  00000000 
f0000dee l       .text  00000000 
f0000df2 l       .text  00000000 
f0000df2 l       .text  00000000 
f0000df8 l       .text  00000000 
f0000dfa l       .text  00000000 
f0000dfc l       .text  00000000 
f0000dfc l       .text  00000000 
f0000e00 l       .text  00000000 
f0000e00 l       .text  00000000 
f0000e04 l       .text  00000000 
f0000e06 l       .text  00000000 
f0000e08 l       .text  00000000 
f0000e10 l       .text  00000000 
f0000e12 l       .text  00000000 
f0000e12 l       .text  00000000 
f0000e16 l       .text  00000000 
f0000e16 l       .text  00000000 
f0000e1a l       .text  00000000 
f0000e1a l       .text  00000000 
f0000e1e l       .text  00000000 
f0000e1e l       .text  00000000 
f0000e24 l       .text  00000000 
f0000e24 l       .text  00000000 
f0000e26 l       .text  00000000 
f0000e26 l       .text  00000000 
f0000e28 l       .text  00000000 
f0000e28 l       .text  00000000 
f0000e2a l       .text  00000000 
f0000e2e l       .text  00000000 
f0000e2e l       .text  00000000 
f0000e32 l       .text  00000000 
f0000e32 l       .text  00000000 
f0000e36 l       .text  00000000 
f0000e38 l       .text  00000000 
f0000e3a l       .text  00000000 
f0000e3e l       .text  00000000 
f0000e3e l       .text  00000000 
f0000e40 l       .text  00000000 
f0000e40 l       .text  00000000 
f0000e42 l       .text  00000000 
f0000e42 l       .text  00000000 
f0000e46 l       .text  00000000 
f0000e46 l       .text  00000000 
f0000e4a l       .text  00000000 
f0000e4a l       .text  00000000 
f0000e4c l       .text  00000000 
f0000e56 l       .text  00000000 
f0000e5a l       .text  00000000 
f0000e5a l       .text  00000000 
f0000e5e l       .text  00000000 
f0000e5e l       .text  00000000 
f0000e62 l       .text  00000000 
f0000e62 l       .text  00000000 
f0000e64 l       .text  00000000 
f0000e66 l       .text  00000000 
f0000e66 l       .text  00000000 
f0000e6a l       .text  00000000 
f0000e6a l       .text  00000000 
f0000e6e l       .text  00000000 
f0000e6e l       .text  00000000 
f0000e70 l       .text  00000000 
f0000e7a l       .text  00000000 
f0000e7c l       .text  00000000 
f0000e7c l       .text  00000000 
f0000e84 l       .text  00000000 
f0000e84 l       .text  00000000 
f0000e88 l       .text  00000000 
f0000e88 l       .text  00000000 
f0000e8c l       .text  00000000 
f0000e92 l       .text  00000000 
f0000e96 l       .text  00000000 
f0000e96 l       .text  00000000 
f0000e9a l       .text  00000000 
f0000e9a l       .text  00000000 
f0000e9c l       .text  00000000 
f0000e9c l       .text  00000000 
f0000e9e l       .text  00000000 
f0000e9e l       .text  00000000 
f0000ea0 l       .text  00000000 
f0000ea0 l       .text  00000000 
f0000ea2 l       .text  00000000 
f0000ea2 l       .text  00000000 
f0000ea6 l       .text  00000000 
f0000ea6 l       .text  00000000 
f0000eaa l       .text  00000000 
f0000eac l       .text  00000000 
f0000eb6 l       .text  00000000 
f0000eb6 l       .text  00000000 
f0000ebe l       .text  00000000 
f0000ec2 l       .text  00000000 
f0000ecc l       .text  00000000 
f0000ed0 l       .text  00000000 
f0000ed6 l       .text  00000000 
f0000ee0 l       .text  00000000 
f0000ee0 l       .text  00000000 
f0000ee2 l       .text  00000000 
f0000ee6 l       .text  00000000 
f0000eea l       .text  00000000 
f0000eea l       .text  00000000 
f0000eec l       .text  00000000 
f0000efc l       .text  00000000 
f0000f0a l       .text  00000000 
f0000f0a l       .text  00000000 
f0000f0e l       .text  00000000 
f0000f0e l       .text  00000000 
000005b1 l       .debug_loc     00000000 
000005cc l       .debug_loc     00000000 
000005e7 l       .debug_loc     00000000 
0000060d l       .debug_loc     00000000 
00000628 l       .debug_loc     00000000 
00000643 l       .debug_loc     00000000 
00000667 l       .debug_loc     00000000 
00000682 l       .debug_loc     00000000 
0000069d l       .debug_loc     00000000 
000006b8 l       .debug_loc     00000000 
000006dc l       .debug_loc     00000000 
000006f7 l       .debug_loc     00000000 
00000712 l       .debug_loc     00000000 
0000072d l       .debug_loc     00000000 
00000748 l       .debug_loc     00000000 
0000076c l       .debug_loc     00000000 
00000787 l       .debug_loc     00000000 
000007a2 l       .debug_loc     00000000 
000007d3 l       .debug_loc     00000000 
00000804 l       .debug_loc     00000000 
00000835 l       .debug_loc     00000000 
00000850 l       .debug_loc     00000000 
0000086b l       .debug_loc     00000000 
0000088e l       .debug_loc     00000000 
000008a9 l       .debug_loc     00000000 
000008c4 l       .debug_loc     00000000 
00000902 l       .debug_loc     00000000 
00000921 l       .debug_loc     00000000 
0000093c l       .debug_loc     00000000 
00000969 l       .debug_loc     00000000 
0000098c l       .debug_loc     00000000 
000009a7 l       .debug_loc     00000000 
000009c2 l       .debug_loc     00000000 
000009e5 l       .debug_loc     00000000 
00000a00 l       .debug_loc     00000000 
00000a1b l       .debug_loc     00000000 
00000a59 l       .debug_loc     00000000 
00000a78 l       .debug_loc     00000000 
00000a93 l       .debug_loc     00000000 
00000ab3 l       .debug_loc     00000000 
00000ace l       .debug_loc     00000000 
00000aea l       .debug_loc     00000000 
00000b05 l       .debug_loc     00000000 
00000b20 l       .debug_loc     00000000 
00000b43 l       .debug_loc     00000000 
00000b64 l       .debug_loc     00000000 
00000bb1 l       .debug_loc     00000000 
00000bcc l       .debug_loc     00000000 
00000bf3 l       .debug_loc     00000000 
00000c18 l       .debug_loc     00000000 
00000c3a l       .debug_loc     00000000 
00000c55 l       .debug_loc     00000000 
00000c77 l       .debug_loc     00000000 
00000c98 l       .debug_loc     00000000 
00000cb3 l       .debug_loc     00000000 
00000cd3 l       .debug_loc     00000000 
00000cef l       .debug_loc     00000000 
00000d0a l       .debug_loc     00000000 
00000d2c l       .debug_loc     00000000 
00000d47 l       .debug_loc     00000000 
00000d6d l       .debug_loc     00000000 
00000d89 l       .debug_loc     00000000 
00000da4 l       .debug_loc     00000000 
00000dc6 l       .debug_loc     00000000 
00000de2 l       .debug_loc     00000000 
00000e02 l       .debug_loc     00000000 
00000e24 l       .debug_loc     00000000 
00000e3f l       .debug_loc     00000000 
00000e5a l       .debug_loc     00000000 
00000e80 l       .debug_loc     00000000 
00000eb0 l       .debug_loc     00000000 
00000ecb l       .debug_loc     00000000 
00000eeb l       .debug_loc     00000000 
00000f0d l       .debug_loc     00000000 
00000f2d l       .debug_loc     00000000 
00000f53 l       .debug_loc     00000000 
00000f6e l       .debug_loc     00000000 
00000fa3 l       .debug_loc     00000000 
00000feb l       .debug_loc     00000000 
00001027 l       .debug_loc     00000000 
00001042 l       .debug_loc     00000000 
0000107e l       .debug_loc     00000000 
000010ba l       .debug_loc     00000000 
000010e1 l       .debug_loc     00000000 
000010fc l       .debug_loc     00000000 
0000111c l       .debug_loc     00000000 
0000113e l       .debug_loc     00000000 
00001162 l       .debug_loc     00000000 
0000117d l       .debug_loc     00000000 
00001198 l       .debug_loc     00000000 
000011ba l       .debug_loc     00000000 
000011e3 l       .debug_loc     00000000 
00001207 l       .debug_loc     00000000 
00001222 l       .debug_loc     00000000 
0000123d l       .debug_loc     00000000 
00001258 l       .debug_loc     00000000 
00001273 l       .debug_loc     00000000 
0000128e l       .debug_loc     00000000 
000012b0 l       .debug_loc     00000000 
000012cb l       .debug_loc     00000000 
000012ed l       .debug_loc     00000000 
00001309 l       .debug_loc     00000000 
00001324 l       .debug_loc     00000000 
0000133f l       .debug_loc     00000000 
0000135a l       .debug_loc     00000000 
00001381 l       .debug_loc     00000000 
000013a6 l       .debug_loc     00000000 
000013ca l       .debug_loc     00000000 
000013f1 l       .debug_loc     00000000 
00001421 l       .debug_loc     00000000 
00001449 l       .debug_loc     00000000 
00001466 l       .debug_loc     00000000 
0000148c l       .debug_loc     00000000 
000014a7 l       .debug_loc     00000000 
000014c2 l       .debug_loc     00000000 
000014e4 l       .debug_loc     00000000 
00001506 l       .debug_loc     00000000 
00001537 l       .debug_loc     00000000 
00001576 l       .debug_loc     00000000 
000015a7 l       .debug_loc     00000000 
000015c2 l       .debug_loc     00000000 
000015de l       .debug_loc     00000000 
00001602 l       .debug_loc     00000000 
00001629 l       .debug_loc     00000000 
0000164b l       .debug_loc     00000000 
0000166d l       .debug_loc     00000000 
0000168f l       .debug_loc     00000000 
000016ab l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000a39 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
000001f8 l       .debug_ranges  00000000 
00000373 l       .debug_str     00000000 
00000310 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000321 l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000347 l       .debug_str     00000000 
00000356 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
0000025d l       .debug_str     00000000 
000001b0 l       .debug_str     00000000 
000001cd l       .debug_str     00000000 
000001eb l       .debug_str     00000000 
00000207 l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
00000239 l       .debug_str     00000000 
000002ba l       .debug_str     00000000 
00000277 l       .debug_str     00000000 
00000290 l       .debug_str     00000000 
000002a5 l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
000002cd l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
00000ac4 l       .debug_str     00000000 
00000a5a l       .debug_str     00000000 
00000a74 l       .debug_str     00000000 
00000a8b l       .debug_str     00000000 
00000aa2 l       .debug_str     00000000 
00000adb l       .debug_str     00000000 
00000478 l       .debug_str     00000000 
0000046a l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000ae5 l       .debug_str     00000000 
0000232b l       .debug_str     00000000 
0000075c l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
00000766 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
00001ed4 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
00000af7 l       .debug_str     00000000 
00000445 l       .debug_str     00000000 
00000b04 l       .debug_str     00000000 
00000c3d l       .debug_str     00000000 
00000618 l       .debug_str     00000000 
00000441 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000b09 l       .debug_str     00000000 
00000b18 l       .debug_str     00000000 
00000b20 l       .debug_str     00000000 
00000b24 l       .debug_str     00000000 
000007dc l       .debug_str     00000000 
000007df l       .debug_str     00000000 
00000812 l       .debug_str     00000000 
00000801 l       .debug_str     00000000 
000007fc l       .debug_str     00000000 
00001d8a l       .debug_str     00000000 
00000b3a l       .debug_str     00000000 
00001c61 l       .debug_str     00000000 
00000b4d l       .debug_str     00000000 
00001aae l       .debug_str     00000000 
000003f3 l       .debug_str     00000000 
000003fb l       .debug_str     00000000 
00000748 l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00002643 l       .debug_str     00000000 
00000098 l       .debug_ranges  00000000 
000000b0 l       .debug_ranges  00000000 
00000b5d l       .debug_str     00000000 
00000b6a l       .debug_str     00000000 
00000b6f l       .debug_str     00000000 
00000b7c l       .debug_str     00000000 
00000b8a l       .debug_str     00000000 
00000b82 l       .debug_str     00000000 
000004ae l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00000ba7 l       .debug_str     00000000 
00000b90 l       .debug_str     00000000 
00000bb0 l       .debug_str     00000000 
00000bb8 l       .debug_str     00000000 
00000bc1 l       .debug_str     00000000 
00000bce l       .debug_str     00000000 
00000ccf l       .debug_str     00000000 
00000cf3 l       .debug_str     00000000 
000000c8 l       .debug_ranges  00000000 
000000e0 l       .debug_ranges  00000000 
000038ae l       .debug_str     00000000 
00000ce6 l       .debug_str     00000000 
000003cd l       .debug_str     00000000 
00000158 l       .debug_ranges  00000000 
00000bd7 l       .debug_str     00000000 
00000be6 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
000007c8 l       .debug_str     00000000 
0000078a l       .debug_str     00000000 
000007b1 l       .debug_str     00000000 
000007e5 l       .debug_str     00000000 
00000825 l       .debug_str     00000000 
00000bed l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
00000536 l       .debug_str     00000000 
00001007 l       .debug_str     00000000 
00000d0d l       .debug_str     00000000 
000000f8 l       .debug_ranges  00000000 
00000110 l       .debug_ranges  00000000 
00000128 l       .debug_ranges  00000000 
00000140 l       .debug_ranges  00000000 
000005b0 l       .debug_str     00000000 
00000a03 l       .debug_str     00000000 
00000bfd l       .debug_str     00000000 
00000c0a l       .debug_str     00000000 
00000c0f l       .debug_str     00000000 
00000c15 l       .debug_str     00000000 
00000c27 l       .debug_str     00000000 
00000c22 l       .debug_str     00000000 
00000601 l       .debug_str     00000000 
000004d3 l       .debug_str     00000000 
00000e66 l       .debug_str     00000000 
00000c1b l       .debug_str     00000000 
00000c7e l       .debug_str     00000000 
00002f1b l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00000d79 l       .debug_str     00000000 
000004cf l       .debug_str     00000000 
000004be l       .debug_str     00000000 
000004c1 l       .debug_str     00000000 
000004c7 l       .debug_str     00000000 
000004cd l       .debug_str     00000000 
0000044e l       .debug_str     00000000 
00000480 l       .debug_str     00000000 
00000495 l       .debug_str     00000000 
000004b7 l       .debug_str     00000000 
00000c2f l       .debug_str     00000000 
00000c59 l       .debug_str     00000000 
00000ad1 l       .debug_str     00000000 
00000c50 l       .debug_str     00000000 
00000c41 l       .debug_str     00000000 
00000c5f l       .debug_str     00000000 
00000c78 l       .debug_str     00000000 
00000c86 l       .debug_str     00000000 
00000c9a l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000627 l       .debug_str     00000000 
000003ff l       .debug_str     00000000 
00000d15 l       .debug_str     00000000 
000005f8 l       .debug_str     00000000 
000001e0 l       .debug_ranges  00000000 
00000178 l       .debug_ranges  00000000 
00000190 l       .debug_ranges  00000000 
000001a8 l       .debug_ranges  00000000 
000001c8 l       .debug_ranges  00000000 
00003f9e l       .debug_str     00000000 
00000cf7 l       .debug_str     00000000 
0000059c l       .debug_str     00000000 
0000054d l       .debug_str     00000000 
00000557 l       .debug_str     00000000 
00000570 l       .debug_str     00000000 
00002dd8 l       .debug_str     00000000 
0000057c l       .debug_str     00000000 
00000582 l       .debug_str     00000000 
00000587 l       .debug_str     00000000 
00000592 l       .debug_str     00000000 
00000597 l       .debug_str     00000000 
00000120 l       .debug_frame   00000000 
f0000af6 l       .text  00000000 
f0000c4e l       .text  00000000 
f0000cd0 l       .text  00000000 
f0000cec l       .text  00000000 
f0000d24 l       .text  00000000 
f0000f0e l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_main.c
f0000f0e l       .text  00000000 
f0000f0e l       .text  00000000 
f0000f0e l       .text  00000000 
f0000f10 l       .text  00000000 
f0000f10 l       .text  00000000 
f0000f12 l       .text  00000000 
f0000f1c l       .text  00000000 
f0000f1e l       .text  00000000 
f0000f26 l       .text  00000000 
f0000f26 l       .text  00000000 
f0000f30 l       .text  00000000 
00010078 l     O .logs.fields   00000014 ottf_machine_ecall_handler.kLogFields
f0000f32 l       .text  00000000 
f0000f44 l       .text  00000000 
f0000f44 l       .text  00000000 
f0000f5a l       .text  00000000 
f0000f5a l       .text  00000000 
f0000f60 l       .text  00000000 
f0000f60 l       .text  00000000 
e0002048 l     O .bss   00000004 uart0
f0000f60 l       .text  00000000 
f0000f60 l       .text  00000000 
f0000f60 l       .text  00000000 
f0000f62 l       .text  00000000 
f0000f6a l       .text  00000000 
f0000f70 l       .text  00000000 
f0000f74 l       .text  00000000 
f0000f74 l       .text  00000000 
f0000f7e l       .text  00000000 
f0000f8e l       .text  00000000 
f000108e l     F .text  000000d2 init_uart
f0000f90 l       .text  00000000 
f0000f92 l       .text  00000000 
f0000f92 l       .text  00000000 
f0000f96 l       .text  00000000 
f0000f98 l       .text  00000000 
0001008c l     O .logs.fields   00000014 _ottf_main.kLogFields
f0000f9a l       .text  00000000 
f0000faa l       .text  00000000 
f0000faa l       .text  00000000 
f0000fac l       .text  00000000 
f0000fac l       .text  00000000 
f0000fc4 l       .text  00000000 
f0000fc4 l       .text  00000000 
f0000fce l       .text  00000000 
f0000fd0 l       .text  00000000 
f0000fd2 l       .text  00000000 
f0000fd2 l       .text  00000000 
f0000fd6 l       .text  00000000 
f0000fd8 l       .text  00000000 
000100a0 l     O .logs.fields   00000014 _ottf_main.kLogFields.3
f0000fd8 l       .text  00000000 
f0000fe8 l       .text  00000000 
f0000fe8 l       .text  00000000 
f0000fea l       .text  00000000 
f0000fea l       .text  00000000 
f0001002 l       .text  00000000 
f0001002 l       .text  00000000 
f0001008 l       .text  00000000 
f000100a l       .text  00000000 
f000100a l       .text  00000000 
f0001010 l       .text  00000000 
f0001020 l       .text  00000000 
f0001024 l       .text  00000000 
f0001026 l       .text  00000000 
f0001160 l     F .text  0000008e test_wrapper
f0001026 l       .text  00000000 
f0001036 l       .text  00000000 
f0001044 l       .text  00000000 
f0001044 l       .text  00000000 
f0001048 l       .text  00000000 
f0001048 l       .text  00000000 
f000104a l       .text  00000000 
f000104e l       .text  00000000 
f000104e l       .text  00000000 
f0001052 l       .text  00000000 
000100b4 l     O .logs.fields   00000014 _ottf_main.kLogFields.7
f0001054 l       .text  00000000 
f0001062 l       .text  00000000 
f0001062 l       .text  00000000 
f0001064 l       .text  00000000 
f0001064 l       .text  00000000 
f000107a l       .text  00000000 
f000107a l       .text  00000000 
f0001080 l       .text  00000000 
f0001082 l       .text  00000000 
f0001082 l       .text  00000000 
f000108e l       .text  00000000 
f000108e l       .text  00000000 
f000108e l       .text  00000000 
f000108e l       .text  00000000 
f000108e l       .text  00000000 
f0001090 l       .text  00000000 
f0001090 l       .text  00000000 
f0001090 l       .text  00000000 
f0001096 l       .text  00000000 
f00010a6 l       .text  00000000 
f00010a6 l       .text  00000000 
f00010ae l       .text  00000000 
f00010b0 l       .text  00000000 
f00010b0 l       .text  00000000 
f00010b2 l       .text  00000000 
f00010b2 l       .text  00000000 
f00010b4 l       .text  00000000 
f00010b6 l       .text  00000000 
000100c8 l     O .logs.fields   00000014 init_uart.kLogFields
f00010b6 l       .text  00000000 
f00010c6 l       .text  00000000 
f00010c6 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010de l       .text  00000000 
f00010de l       .text  00000000 
f00010e4 l       .text  00000000 
f00010e6 l       .text  00000000 
f00010e6 l       .text  00000000 
f0001112 l       .text  00000000 
f0001114 l       .text  00000000 
f0001116 l       .text  00000000 
f0001116 l       .text  00000000 
f0001118 l       .text  00000000 
f000111a l       .text  00000000 
000100dc l     O .logs.fields   00000014 init_uart.kLogFields.11
f000111a l       .text  00000000 
f000112a l       .text  00000000 
f000112a l       .text  00000000 
f000112c l       .text  00000000 
f000112c l       .text  00000000 
f0001142 l       .text  00000000 
f0001142 l       .text  00000000 
f0001148 l       .text  00000000 
f000114a l       .text  00000000 
f000114a l       .text  00000000 
f0001156 l       .text  00000000 
f0001156 l       .text  00000000 
f0001160 l       .text  00000000 
f0001160 l       .text  00000000 
f0001160 l       .text  00000000 
f0001160 l       .text  00000000 
f0001160 l       .text  00000000 
f0001162 l       .text  00000000 
f0001168 l       .text  00000000 
f000116a l       .text  00000000 
f000116e l       .text  00000000 
f0001172 l       .text  00000000 
f0001172 l       .text  00000000 
f0001174 l       .text  00000000 
f0001178 l       .text  00000000 
f0001178 l       .text  00000000 
f000117a l       .text  00000000 
f000117e l       .text  00000000 
f000117e l       .text  00000000 
f000118e l       .text  00000000 
f000118e l       .text  00000000 
f0001198 l       .text  00000000 
f000119a l       .text  00000000 
f00011a2 l       .text  00000000 
f00011a6 l       .text  00000000 
f00011a8 l       .text  00000000 
f00011aa l       .text  00000000 
f00011aa l       .text  00000000 
f00011b4 l       .text  00000000 
f00011b6 l       .text  00000000 
000100f0 l     O .logs.fields   00000014 report_test_status.kLogFields
f00011b8 l       .text  00000000 
f00011c6 l       .text  00000000 
f00011c6 l       .text  00000000 
f00011c8 l       .text  00000000 
f00011de l       .text  00000000 
f00011de l       .text  00000000 
f00011e0 l       .text  00000000 
f00011e0 l       .text  00000000 
f00011e4 l       .text  00000000 
f00011e4 l       .text  00000000 
f00011ee l       .text  00000000 
f00011ee l       .text  00000000 
000016d2 l       .debug_loc     00000000 
000016ed l       .debug_loc     00000000 
00001708 l       .debug_loc     00000000 
00001723 l       .debug_loc     00000000 
0000173e l       .debug_loc     00000000 
0000176f l       .debug_loc     00000000 
0000178a l       .debug_loc     00000000 
000017bb l       .debug_loc     00000000 
000017ec l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000d1a l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000230 l       .debug_ranges  00000000 
00001083 l       .debug_str     00000000 
0000010b l       .debug_str     00000000 
00000198 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
000024a1 l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
00000191 l       .debug_str     00000000 
00000169 l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000116 l       .debug_str     00000000 
00000127 l       .debug_str     00000000 
00000138 l       .debug_str     00000000 
0000014a l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
000010e9 l       .debug_str     00000000 
00000d80 l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000d4b l       .debug_str     00000000 
00000d5a l       .debug_str     00000000 
00000d51 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
00000d65 l       .debug_str     00000000 
00000e02 l       .debug_str     00000000 
00000def l       .debug_str     00000000 
00000da0 l       .debug_str     00000000 
0000210f l       .debug_str     00000000 
00000dbb l       .debug_str     00000000 
00000dd3 l       .debug_str     00000000 
00000de4 l       .debug_str     00000000 
00000d8d l       .debug_str     00000000 
00000d7c l       .debug_str     00000000 
000010f4 l       .debug_str     00000000 
00001026 l       .debug_str     00000000 
0000037e l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
000003ac l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003cf l       .debug_str     00000000 
000003e1 l       .debug_str     00000000 
00000e5f l       .debug_str     00000000 
00000e17 l       .debug_str     00000000 
00000e24 l       .debug_str     00000000 
00000e38 l       .debug_str     00000000 
00000e49 l       .debug_str     00000000 
00000310 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000321 l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000347 l       .debug_str     00000000 
00000356 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00000e6b l       .debug_str     00000000 
0000073d l       .debug_str     00000000 
00000718 l       .debug_str     00000000 
0000072b l       .debug_str     00000000 
00000eaa l       .debug_str     00000000 
00000e85 l       .debug_str     00000000 
00000e97 l       .debug_str     00000000 
00000eba l       .debug_str     00000000 
00000ebb l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
00000ec6 l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
000004fd l       .debug_str     00000000 
00000ed9 l       .debug_str     00000000 
00000c41 l       .debug_str     00000000 
00000ee5 l       .debug_str     00000000 
0000109e l       .debug_str     00000000 
000010ae l       .debug_str     00000000 
00000ef9 l       .debug_str     00000000 
000010c4 l       .debug_str     00000000 
00000f05 l       .debug_str     00000000 
000010dc l       .debug_str     00000000 
00000f13 l       .debug_str     00000000 
00000f24 l       .debug_str     00000000 
00000f41 l       .debug_str     00000000 
00000f4b l       .debug_str     00000000 
00000f5c l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00000f32 l       .debug_str     00000000 
00000c50 l       .debug_str     00000000 
00000514 l       .debug_str     00000000 
00000f6a l       .debug_str     00000000 
00000f80 l       .debug_str     00000000 
00000f94 l       .debug_str     00000000 
000010fe l       .debug_str     00000000 
0000110b l       .debug_str     00000000 
00000377 l       .debug_str     00000000 
00000fa8 l       .debug_str     00000000 
00000fb6 l       .debug_str     00000000 
00000ffe l       .debug_str     00000000 
00000fc9 l       .debug_str     00000000 
00000fd2 l       .debug_str     00000000 
00000fde l       .debug_str     00000000 
00000eb3 l       .debug_str     00000000 
000009e3 l       .debug_str     00000000 
00000fec l       .debug_str     00000000 
0000100e l       .debug_str     00000000 
0000101f l       .debug_str     00000000 
00001032 l       .debug_str     00000000 
000005da l       .debug_str     00000000 
0000104d l       .debug_str     00000000 
00001069 l       .debug_str     00000000 
00000627 l       .debug_str     00000000 
000001c8 l       .debug_frame   00000000 
f0000f60 l       .text  00000000 
f000108e l       .text  00000000 
f0001160 l       .text  00000000 
f00011ee l       .text  00000000 
00000000 l    df *ABS*  00000000 coverage_none.c
f00011ee l       .text  00000000 
f00011ee l       .text  00000000 
f00011ee l       .text  00000000 
f00011ee l       .text  00000000 
f00011f0 l       .text  00000000 
f00011f0 l       .text  00000000 
00000000 l       .debug_str     00000000 
0000111b l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00001069 l       .debug_str     00000000 
000002a0 l       .debug_frame   00000000 
f00011f0 l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_hooks.c
f00011f0 l       .text  00000000 
f00011f0 l       .text  00000000 
f00011f0 l       .text  00000000 
f00011f2 l       .text  00000000 
f00011f2 l       .text  00000000 
f00011f4 l       .text  00000000 
f00011fe l       .text  00000000 
f0001200 l       .text  00000000 
f0001200 l       .text  00000000 
f0001214 l       .text  00000000 
f0001214 l       .text  00000000 
f0001216 l       .text  00000000 
00010104 l     O .logs.fields   00000014 vApplicationMallocFailedHook.kLogFields
f0001216 l       .text  00000000 
f0001222 l       .text  00000000 
f0001222 l       .text  00000000 
f0001226 l       .text  00000000 
f0001226 l       .text  00000000 
f000122a l       .text  00000000 
f000122a l       .text  00000000 
f000122a l       .text  00000000 
f000122a l       .text  00000000 
f000122a l       .text  00000000 
f000122a l       .text  00000000 
f000122c l       .text  00000000 
f000122c l       .text  00000000 
f000122e l       .text  00000000 
f000122e l       .text  00000000 
f0001238 l       .text  00000000 
f000123a l       .text  00000000 
f000123a l       .text  00000000 
f000124e l       .text  00000000 
f000124e l       .text  00000000 
f0001250 l       .text  00000000 
00010118 l     O .logs.fields   00000014 vApplicationStackOverflowHook.kLogFields
f0001250 l       .text  00000000 
f000125c l       .text  00000000 
f000125c l       .text  00000000 
f0001260 l       .text  00000000 
f0001260 l       .text  00000000 
f0001264 l       .text  00000000 
f0001264 l       .text  00000000 
f0001264 l       .text  00000000 
00001807 l       .debug_loc     00000000 
00001822 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001150 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000280 l       .debug_ranges  00000000 
0000119c l       .debug_str     00000000 
0000010b l       .debug_str     00000000 
00000198 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
000024a1 l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
00000191 l       .debug_str     00000000 
00000169 l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000116 l       .debug_str     00000000 
00000127 l       .debug_str     00000000 
00000138 l       .debug_str     00000000 
0000014a l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
000011b9 l       .debug_str     00000000 
000011d7 l       .debug_str     00000000 
000011ea l       .debug_str     00000000 
000004fd l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
00001186 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00001196 l       .debug_str     00000000 
000011dd l       .debug_str     00000000 
00000ee5 l       .debug_str     00000000 
000002c4 l       .debug_frame   00000000 
f000122a l       .text  00000000 
f0001264 l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_port.c
f0001264 l       .text  00000000 
f0001264 l       .text  00000000 
f0001264 l       .text  00000000 
f0001266 l       .text  00000000 
f0001266 l       .text  00000000 
f0001268 l       .text  00000000 
f000126c l       .text  00000000 
f000126c l       .text  00000000 
f0001270 l       .text  00000000 
f0001270 l       .text  00000000 
f0001274 l       .text  00000000 
f0001274 l       .text  00000000 
f0001278 l       .text  00000000 
f0001278 l       .text  00000000 
f0001280 l       .text  00000000 
f0001280 l       .text  00000000 
00000000 l       .debug_str     00000000 
000011f5 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
0000122a l       .debug_str     00000000 
00000478 l       .debug_str     00000000 
0000046a l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00000ebb l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
00001278 l       .debug_str     00000000 
00001231 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00001240 l       .debug_str     00000000 
00001252 l       .debug_str     00000000 
00001264 l       .debug_str     00000000 
00000308 l       .debug_frame   00000000 
f0001280 l       .text  00000000 
00000000 l    df *ABS*  00000000 irq.c
f0001280 l       .text  00000000 
f0001280 l       .text  00000000 
f0001280 l       .text  00000000 
f0001280 l       .text  00000000 
f0001282 l       .text  00000000 
f0001284 l       .text  00000000 
f0001284 l       .text  00000000 
f0001288 l       .text  00000000 
f000128a l       .text  00000000 
f000128a l       .text  00000000 
f000128c l       .text  00000000 
f000128c l       .text  00000000 
f0001290 l       .text  00000000 
f0001292 l       .text  00000000 
f0001292 l       .text  00000000 
f0001292 l       .text  00000000 
f0001292 l       .text  00000000 
f0001292 l       .text  00000000 
f0001292 l       .text  00000000 
f0001294 l       .text  00000000 
f0001296 l       .text  00000000 
f000129a l       .text  00000000 
f000129e l       .text  00000000 
f00012a0 l       .text  00000000 
f00012a0 l       .text  00000000 
f00012a2 l       .text  00000000 
f00012a6 l       .text  00000000 
f00012aa l       .text  00000000 
f00012ac l       .text  00000000 
f00012ac l       .text  00000000 
f00012ac l       .text  00000000 
f00012ac l       .text  00000000 
f00012ac l       .text  00000000 
f00012ac l       .text  00000000 
f00012ae l       .text  00000000 
f00012b2 l       .text  00000000 
f00012b2 l       .text  00000000 
f00012b6 l       .text  00000000 
f00012b8 l       .text  00000000 
f00012b8 l       .text  00000000 
f00012bc l       .text  00000000 
f00012bc l       .text  00000000 
f00012c0 l       .text  00000000 
f00012c2 l       .text  00000000 
f00012c2 l       .text  00000000 
f00012c2 l       .text  00000000 
f00012c2 l       .text  00000000 
f00012c2 l       .text  00000000 
f00012c2 l       .text  00000000 
f00012c4 l       .text  00000000 
f00012c6 l       .text  00000000 
f00012c6 l       .text  00000000 
f00012ca l       .text  00000000 
f00012cc l       .text  00000000 
f00012cc l       .text  00000000 
f00012ce l       .text  00000000 
f00012ce l       .text  00000000 
f00012d2 l       .text  00000000 
f00012d4 l       .text  00000000 
f00012d4 l       .text  00000000 
0000183d l       .debug_loc     00000000 
0000186d l       .debug_loc     00000000 
0000189d l       .debug_loc     00000000 
000018cd l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000128c l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000298 l       .debug_ranges  00000000 
000012a8 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
000012be l       .debug_str     00000000 
000012d6 l       .debug_str     00000000 
000012eb l       .debug_str     00000000 
00000c7e l       .debug_str     00000000 
00001186 l       .debug_str     00000000 
00003d0c l       .debug_str     00000000 
00001240 l       .debug_str     00000000 
000007fc l       .debug_str     00000000 
00001231 l       .debug_str     00000000 
00001252 l       .debug_str     00000000 
00000adb l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00000334 l       .debug_frame   00000000 
f0001292 l       .text  00000000 
f00012ac l       .text  00000000 
f00012c2 l       .text  00000000 
f00012d4 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.c
f00012d4 l       .text  00000000 
f00012d4 l       .text  00000000 
f00012d4 l       .text  00000000 
f00012d6 l       .text  00000000 
f00012e0 l       .text  00000000 
f00012e2 l       .text  00000000 
f00012e4 l       .text  00000000 
f00012e4 l       .text  00000000 
f00012e8 l       .text  00000000 
f00012ea l       .text  00000000 
f00012ea l       .text  00000000 
f00012ee l       .text  00000000 
f00012ee l       .text  00000000 
f00012f8 l       .text  00000000 
f00012fa l       .text  00000000 
f00012fa l       .text  00000000 
f00012fc l       .text  00000000 
0001012c l     O .logs.fields   00000014 ottf_generic_fault_print.kLogFields
f00012fc l       .text  00000000 
f000131c l       .text  00000000 
f000131c l       .text  00000000 
f0001338 l       .text  00000000 
f0001338 l       .text  00000000 
f0001346 l       .text  00000000 
f0001346 l       .text  00000000 
f0001346 l       .text  00000000 
f0001346 l       .text  00000000 
f0001346 l       .text  00000000 
f0001348 l       .text  00000000 
f0001348 l       .text  00000000 
f000134a l       .text  00000000 
f000134e l       .text  00000000 
f000134e l       .text  00000000 
f0001350 l       .text  00000000 
f0001350 l       .text  00000000 
f0001352 l       .text  00000000 
f0001356 l       .text  00000000 
f000136c l       .text  00000000 
f0001372 l       .text  00000000 
f0001378 l       .text  00000000 
f000137e l       .text  00000000 
f0001384 l       .text  00000000 
f000138a l       .text  00000000 
f0001392 l     F .text  00000020 generic_fault_handler
f0001390 l       .text  00000000 
f0001392 l       .text  00000000 
f0001392 l       .text  00000000 
f0001392 l       .text  00000000 
f0001392 l       .text  00000000 
f0001392 l       .text  00000000 
f0001392 l       .text  00000000 
f0001394 l       .text  00000000 
f0001394 l       .text  00000000 
f0001396 l       .text  00000000 
f000139a l       .text  00000000 
f000139c l       .text  00000000 
f000139c l       .text  00000000 
f000139e l       .text  00000000 
f00013a0 l       .text  00000000 
f0003298 l     O .rodata        00000080 exception_reason
f00013ac l       .text  00000000 
f00013ae l       .text  00000000 
f00013ae l       .text  00000000 
f00013b2 l       .text  00000000 
f00013b2 l       .text  00000000 
f00013b2 l       .text  00000000 
f00013b2 l       .text  00000000 
f00013b2 l       .text  00000000 
f00013b2 l       .text  00000000 
f00013b4 l       .text  00000000 
f00013b4 l       .text  00000000 
f00013b6 l       .text  00000000 
f00013ba l       .text  00000000 
f00013bc l       .text  00000000 
f00013c6 l       .text  00000000 
f00013c6 l       .text  00000000 
f00013ca l       .text  00000000 
f00013ca l       .text  00000000 
f00013ca l       .text  00000000 
f00013ca l       .text  00000000 
f00013ca l       .text  00000000 
f00013ca l       .text  00000000 
f00013cc l       .text  00000000 
f00013cc l       .text  00000000 
f00013ce l       .text  00000000 
f00013d2 l       .text  00000000 
f00013d4 l       .text  00000000 
f00013de l       .text  00000000 
f00013de l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e6 l       .text  00000000 
f00013e6 l       .text  00000000 
f00013e6 l       .text  00000000 
f00013e6 l       .text  00000000 
f00013e6 l       .text  00000000 
f00013e8 l       .text  00000000 
f00013e8 l       .text  00000000 
f00013ee l       .text  00000000 
f00013ee l       .text  00000000 
f00013ee l       .text  00000000 
f00013fc l       .text  00000000 
f00013fc l       .text  00000000 
f0001404 l       .text  00000000 
f0001406 l       .text  00000000 
f0001406 l       .text  00000000 
f0001408 l       .text  00000000 
f0001408 l       .text  00000000 
f000140a l       .text  00000000 
f000140c l       .text  00000000 
00010140 l     O .logs.fields   00000014 ottf_external_isr.kLogFields
f000140c l       .text  00000000 
f000141a l       .text  00000000 
f000141a l       .text  00000000 
f000141c l       .text  00000000 
f000141c l       .text  00000000 
f0001432 l       .text  00000000 
f0001432 l       .text  00000000 
f0001438 l       .text  00000000 
f000143a l       .text  00000000 
f000143a l       .text  00000000 
f000143c l       .text  00000000 
f000143c l       .text  00000000 
f000143e l       .text  00000000 
f000144a l       .text  00000000 
f000144a l       .text  00000000 
f000144c l       .text  00000000 
f0001450 l       .text  00000000 
f0001450 l       .text  00000000 
f0001452 l       .text  00000000 
f0001452 l       .text  00000000 
f0001454 l       .text  00000000 
f0001454 l       .text  00000000 
f0001456 l       .text  00000000 
f0001462 l       .text  00000000 
f0001464 l       .text  00000000 
f0001464 l       .text  00000000 
f0001466 l       .text  00000000 
f0001466 l       .text  00000000 
f0001468 l       .text  00000000 
f000146a l       .text  00000000 
00010154 l     O .logs.fields   00000014 ottf_external_isr.kLogFields.5
f000146a l       .text  00000000 
f0001478 l       .text  00000000 
f0001478 l       .text  00000000 
f000147a l       .text  00000000 
f000147a l       .text  00000000 
f0001490 l       .text  00000000 
f0001490 l       .text  00000000 
f0001496 l       .text  00000000 
f0001498 l       .text  00000000 
f0001498 l       .text  00000000 
f00014a2 l       .text  00000000 
f00014a6 l       .text  00000000 
f00014a8 l       .text  00000000 
f00014a8 l       .text  00000000 
f00014b2 l       .text  00000000 
f00014b2 l       .text  00000000 
f00014b6 l       .text  00000000 
f00014b6 l       .text  00000000 
f00014b6 l       .text  00000000 
f00014b6 l     F .text  00000018 generic_internal_irq_handler
f00014b6 l       .text  00000000 
f00014b6 l       .text  00000000 
f00014b6 l       .text  00000000 
f00014b8 l       .text  00000000 
f00014b8 l       .text  00000000 
f00014ba l       .text  00000000 
f00014be l       .text  00000000 
f00014c0 l       .text  00000000 
f00014ca l       .text  00000000 
f00014ca l       .text  00000000 
f00014ce l       .text  00000000 
f00014ce l       .text  00000000 
f00014ce l       .text  00000000 
f00014ce l       .text  00000000 
f00014ce l       .text  00000000 
f00014ce l       .text  00000000 
f00014d0 l       .text  00000000 
f00014d0 l       .text  00000000 
f00014d2 l       .text  00000000 
f00014d6 l       .text  00000000 
f00014d6 l       .text  00000000 
f00014dc l       .text  00000000 
f00014dc l       .text  00000000 
f00014e0 l       .text  00000000 
f00014e2 l       .text  00000000 
f00014e6 l       .text  00000000 
f00014ec l       .text  00000000 
f00014f2 l       .text  00000000 
f00014f2 l       .text  00000000 
f00014f6 l       .text  00000000 
f00014f8 l       .text  00000000 
f0001502 l       .text  00000000 
f0001502 l       .text  00000000 
f0001506 l       .text  00000000 
f0001506 l       .text  00000000 
f0001506 l       .text  00000000 
000018fd l       .debug_loc     00000000 
00001923 l       .debug_loc     00000000 
00001949 l       .debug_loc     00000000 
00001964 l       .debug_loc     00000000 
0000197f l       .debug_loc     00000000 
0000199a l       .debug_loc     00000000 
000019b5 l       .debug_loc     00000000 
00001a01 l       .debug_loc     00000000 
00001a34 l       .debug_loc     00000000 
00001a65 l       .debug_loc     00000000 
00001a80 l       .debug_loc     00000000 
00001ab1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001301 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
000002c8 l       .debug_ranges  00000000 
000019ff l       .debug_str     00000000 
0000010b l       .debug_str     00000000 
0000136d l       .debug_str     00000000 
00001aa0 l       .debug_str     00000000 
00001aa7 l       .debug_str     00000000 
00001aac l       .debug_str     00000000 
00000198 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
000024a1 l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
00000191 l       .debug_str     00000000 
00000169 l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000116 l       .debug_str     00000000 
00000127 l       .debug_str     00000000 
00000138 l       .debug_str     00000000 
0000014a l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00001332 l       .debug_str     00000000 
00001a7c l       .debug_str     00000000 
00001ab2 l       .debug_str     00000000 
00001abe l       .debug_str     00000000 
000018fa l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
0000133f l       .debug_str     00000000 
00001355 l       .debug_str     00000000 
00001349 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
00001363 l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00001436 l       .debug_str     00000000 
00001374 l       .debug_str     00000000 
0000138c l       .debug_str     00000000 
000013a5 l       .debug_str     00000000 
000013bf l       .debug_str     00000000 
000013d2 l       .debug_str     00000000 
000013ea l       .debug_str     00000000 
00001403 l       .debug_str     00000000 
00001415 l       .debug_str     00000000 
0000142a l       .debug_str     00000000 
00001476 l       .debug_str     00000000 
0000143f l       .debug_str     00000000 
0000145b l       .debug_str     00000000 
00000310 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000321 l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000347 l       .debug_str     00000000 
00000356 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00001026 l       .debug_str     00000000 
0000037e l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
000003ac l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003cf l       .debug_str     00000000 
000003e1 l       .debug_str     00000000 
000018e8 l       .debug_str     00000000 
0000148f l       .debug_str     00000000 
000014b1 l       .debug_str     00000000 
000014d1 l       .debug_str     00000000 
000014f1 l       .debug_str     00000000 
00001511 l       .debug_str     00000000 
00001531 l       .debug_str     00000000 
00001550 l       .debug_str     00000000 
00001574 l       .debug_str     00000000 
00001593 l       .debug_str     00000000 
000015b2 l       .debug_str     00000000 
000015d1 l       .debug_str     00000000 
000015f3 l       .debug_str     00000000 
00001615 l       .debug_str     00000000 
00001637 l       .debug_str     00000000 
0000165e l       .debug_str     00000000 
00001681 l       .debug_str     00000000 
000016a4 l       .debug_str     00000000 
000016c5 l       .debug_str     00000000 
000016e9 l       .debug_str     00000000 
00001711 l       .debug_str     00000000 
00001736 l       .debug_str     00000000 
0000175c l       .debug_str     00000000 
00001781 l       .debug_str     00000000 
000017a4 l       .debug_str     00000000 
000017c8 l       .debug_str     00000000 
000017e7 l       .debug_str     00000000 
00001806 l       .debug_str     00000000 
00001825 l       .debug_str     00000000 
00001846 l       .debug_str     00000000 
00001866 l       .debug_str     00000000 
0000188b l       .debug_str     00000000 
000018aa l       .debug_str     00000000 
000018c9 l       .debug_str     00000000 
00001933 l       .debug_str     00000000 
00001905 l       .debug_str     00000000 
0000191f l       .debug_str     00000000 
00001945 l       .debug_str     00000000 
00001950 l       .debug_str     00000000 
0000196f l       .debug_str     00000000 
00001983 l       .debug_str     00000000 
00001992 l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
000004fd l       .debug_str     00000000 
00001a18 l       .debug_str     00000000 
000019a2 l       .debug_str     00000000 
00001a2f l       .debug_str     00000000 
00001196 l       .debug_str     00000000 
00001a45 l       .debug_str     00000000 
00001a57 l       .debug_str     00000000 
00001a66 l       .debug_str     00000000 
000019b3 l       .debug_str     00000000 
00000514 l       .debug_str     00000000 
000019c9 l       .debug_str     00000000 
000019e2 l       .debug_str     00000000 
00001a8e l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00001aca l       .debug_str     00000000 
00000627 l       .debug_str     00000000 
00000398 l       .debug_frame   00000000 
f0001346 l       .text  00000000 
f0001392 l       .text  00000000 
f00013b2 l       .text  00000000 
f00013ca l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e6 l       .text  00000000 
f00014b6 l       .text  00000000 
f00014ce l       .text  00000000 
f0001506 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic.c
f0001506 l       .text  00000000 
f0001506 l       .text  00000000 
f0001506 l       .text  00000000 
f0001506 l       .text  00000000 
f000150e l       .text  00000000 
f000150e l       .text  00000000 
f000151a l       .text  00000000 
f000151a l       .text  00000000 
f000151c l       .text  00000000 
f000151c l       .text  00000000 
f0001522 l       .text  00000000 
f0001522 l       .text  00000000 
f0001524 l       .text  00000000 
f0001528 l       .text  00000000 
f0001528 l       .text  00000000 
f000152a l       .text  00000000 
f000152a l       .text  00000000 
f000152e l       .text  00000000 
f000152e l       .text  00000000 
f000152e l       .text  00000000 
f000152e l       .text  00000000 
f000152e l       .text  00000000 
f000152e l       .text  00000000 
f0001536 l       .text  00000000 
f0001536 l       .text  00000000 
f000153c l       .text  00000000 
f000153c l       .text  00000000 
f000153e l       .text  00000000 
f000153e l       .text  00000000 
f0001546 l       .text  00000000 
f0001546 l       .text  00000000 
f0001548 l       .text  00000000 
f0001548 l       .text  00000000 
f000154a l       .text  00000000 
f000154a l       .text  00000000 
f000154e l       .text  00000000 
f000154e l       .text  00000000 
00001acc l       .debug_loc     00000000 
00001af2 l       .debug_loc     00000000 
00001b25 l       .debug_loc     00000000 
00001b47 l       .debug_loc     00000000 
00001b62 l       .debug_loc     00000000 
00001b84 l       .debug_loc     00000000 
00001bb7 l       .debug_loc     00000000 
00001bdf l       .debug_loc     00000000 
00001c07 l       .debug_loc     00000000 
00001c22 l       .debug_loc     00000000 
00001c52 l       .debug_loc     00000000 
00001c6d l       .debug_loc     00000000 
00001c88 l       .debug_loc     00000000 
00001ca3 l       .debug_loc     00000000 
00001cbe l       .debug_loc     00000000 
00001cd9 l       .debug_loc     00000000 
00001cf4 l       .debug_loc     00000000 
00001d0f l       .debug_loc     00000000 
00001d2a l       .debug_loc     00000000 
00001d45 l       .debug_loc     00000000 
00001d60 l       .debug_loc     00000000 
00001d7c l       .debug_loc     00000000 
00001d97 l       .debug_loc     00000000 
00001db5 l       .debug_loc     00000000 
00001ddb l       .debug_loc     00000000 
00001e0c l       .debug_loc     00000000 
00001e27 l       .debug_loc     00000000 
00001e42 l       .debug_loc     00000000 
00001e61 l       .debug_loc     00000000 
00001e80 l       .debug_loc     00000000 
00001e9b l       .debug_loc     00000000 
00001eb6 l       .debug_loc     00000000 
00001ed1 l       .debug_loc     00000000 
00001ef1 l       .debug_loc     00000000 
00001f0c l       .debug_loc     00000000 
00001f27 l       .debug_loc     00000000 
00001f42 l       .debug_loc     00000000 
00001f5f l       .debug_loc     00000000 
00001f7a l       .debug_loc     00000000 
00001f95 l       .debug_loc     00000000 
00001fb0 l       .debug_loc     00000000 
00001fcb l       .debug_loc     00000000 
00001fe6 l       .debug_loc     00000000 
00002006 l       .debug_loc     00000000 
00002021 l       .debug_loc     00000000 
0000203c l       .debug_loc     00000000 
00002057 l       .debug_loc     00000000 
00002077 l       .debug_loc     00000000 
00002092 l       .debug_loc     00000000 
000020ad l       .debug_loc     00000000 
000020c8 l       .debug_loc     00000000 
000020e8 l       .debug_loc     00000000 
00002103 l       .debug_loc     00000000 
0000211e l       .debug_loc     00000000 
00002139 l       .debug_loc     00000000 
00002159 l       .debug_loc     00000000 
00002174 l       .debug_loc     00000000 
0000218f l       .debug_loc     00000000 
000021aa l       .debug_loc     00000000 
000021ca l       .debug_loc     00000000 
000021e5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001cd3 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
000003d0 l       .debug_ranges  00000000 
00001cf3 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00001d09 l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000310 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000321 l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000347 l       .debug_str     00000000 
00000356 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
0000073d l       .debug_str     00000000 
00000718 l       .debug_str     00000000 
0000072b l       .debug_str     00000000 
00000748 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
00001ed4 l       .debug_str     00000000 
00001c61 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
0000075c l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
00001daa l       .debug_str     00000000 
00001344 l       .debug_str     00000000 
000003cd l       .debug_str     00000000 
00000358 l       .debug_ranges  00000000 
00000340 l       .debug_ranges  00000000 
00001488 l       .debug_str     00000000 
00000388 l       .debug_ranges  00000000 
00001eb5 l       .debug_str     00000000 
00000370 l       .debug_ranges  00000000 
00001d1f l       .debug_str     00000000 
00001941 l       .debug_str     00000000 
00001d46 l       .debug_str     00000000 
00001d38 l       .debug_str     00000000 
0000078a l       .debug_str     00000000 
000007b1 l       .debug_str     00000000 
00001aca l       .debug_str     00000000 
00001d56 l       .debug_str     00000000 
00001d6b l       .debug_str     00000000 
00001d81 l       .debug_str     00000000 
00000478 l       .debug_str     00000000 
0000046a l       .debug_str     00000000 
00000766 l       .debug_str     00000000 
00001dbc l       .debug_str     00000000 
00001bb6 l       .debug_str     00000000 
00000c3d l       .debug_str     00000000 
00001d3d l       .debug_str     00000000 
00000a00 l       .debug_str     00000000 
000003a0 l       .debug_ranges  00000000 
000007e5 l       .debug_str     00000000 
000007dc l       .debug_str     00000000 
000007df l       .debug_str     00000000 
00000812 l       .debug_str     00000000 
00000801 l       .debug_str     00000000 
000007fc l       .debug_str     00000000 
00001d8a l       .debug_str     00000000 
00000825 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00001dd8 l       .debug_str     00000000 
00001ec5 l       .debug_str     00000000 
000003b8 l       .debug_ranges  00000000 
00001df4 l       .debug_str     00000000 
00000f61 l       .debug_str     00000000 
00001e11 l       .debug_str     00000000 
00001e28 l       .debug_str     00000000 
00001eca l       .debug_str     00000000 
00001d90 l       .debug_str     00000000 
000007c8 l       .debug_str     00000000 
00001e32 l       .debug_str     00000000 
00001e42 l       .debug_str     00000000 
000019b3 l       .debug_str     00000000 
00001edb l       .debug_str     00000000 
00001ee6 l       .debug_str     00000000 
000019c9 l       .debug_str     00000000 
00001ef9 l       .debug_str     00000000 
00001e4d l       .debug_str     00000000 
00001f07 l       .debug_str     00000000 
00001e6c l       .debug_str     00000000 
00001e91 l       .debug_str     00000000 
00001f13 l       .debug_str     00000000 
00000627 l       .debug_str     00000000 
00001355 l       .debug_str     00000000 
00001349 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
000009e3 l       .debug_str     00000000 
000004ac l       .debug_frame   00000000 
f000152e l       .text  00000000 
f000154e l       .text  00000000 
00000000 l    df *ABS*  00000000 rand_testutils.c
f000154e l       .text  00000000 
f000154e l       .text  00000000 
f000154e l       .text  00000000 
f0001550 l       .text  00000000 
f0001556 l       .text  00000000 
f0001558 l       .text  00000000 
f000155a l       .text  00000000 
f000155c l       .text  00000000 
f000155c l       .text  00000000 
f0001566 l       .text  00000000 
00010168 l     O .logs.fields   00000014 rand_testutils_init.kLogFields
f0001568 l       .text  00000000 
f0001574 l       .text  00000000 
f0001574 l       .text  00000000 
f0001576 l       .text  00000000 
f0001576 l       .text  00000000 
f000158a l       .text  00000000 
f000158a l       .text  00000000 
f0001590 l       .text  00000000 
f0001592 l       .text  00000000 
f0001592 l       .text  00000000 
f00015b4 l       .text  00000000 
f00015b4 l       .text  00000000 
f00015be l       .text  00000000 
f00015c6 l       .text  00000000 
f00015ca l       .text  00000000 
f00015ca l       .text  00000000 
f00015ce l       .text  00000000 
f00015d0 l       .text  00000000 
f00015d8 l       .text  00000000 
f00015d8 l       .text  00000000 
0001017c l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields
00010190 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields.3
00002200 l       .debug_loc     00000000 
0000223c l       .debug_loc     00000000 
0000226d l       .debug_loc     00000000 
000022a9 l       .debug_loc     00000000 
000022cf l       .debug_loc     00000000 
000022f5 l       .debug_loc     00000000 
00002326 l       .debug_loc     00000000 
00002357 l       .debug_loc     00000000 
0000237d l       .debug_loc     00000000 
000023a5 l       .debug_loc     00000000 
000023c0 l       .debug_loc     00000000 
000023db l       .debug_loc     00000000 
000023f6 l       .debug_loc     00000000 
00002411 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002099 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000448 l       .debug_ranges  00000000 
00000f80 l       .debug_str     00000000 
0000010b l       .debug_str     00000000 
00000d80 l       .debug_str     00000000 
00000d78 l       .debug_str     00000000 
00000198 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
000024a1 l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
00000191 l       .debug_str     00000000 
00000169 l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000116 l       .debug_str     00000000 
00000127 l       .debug_str     00000000 
00000138 l       .debug_str     00000000 
0000014a l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
000020c0 l       .debug_str     00000000 
000020db l       .debug_str     00000000 
0000216a l       .debug_str     00000000 
0000219c l       .debug_str     00000000 
000021a0 l       .debug_str     00000000 
0000217f l       .debug_str     00000000 
00000377 l       .debug_str     00000000 
00001026 l       .debug_str     00000000 
0000037e l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
000003ac l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003cf l       .debug_str     00000000 
000003e1 l       .debug_str     00000000 
00000e5f l       .debug_str     00000000 
00000e17 l       .debug_str     00000000 
00000e24 l       .debug_str     00000000 
00000e38 l       .debug_str     00000000 
00000e49 l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
000004fd l       .debug_str     00000000 
00000514 l       .debug_str     00000000 
0000213f l       .debug_str     00000000 
000020f7 l       .debug_str     00000000 
00002104 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00002108 l       .debug_str     00000000 
00002155 l       .debug_str     00000000 
00002114 l       .debug_str     00000000 
00000d7c l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
00002185 l       .debug_str     00000000 
000021a4 l       .debug_str     00000000 
000021aa l       .debug_str     00000000 
000004ae l       .debug_str     00000000 
000021bb l       .debug_str     00000000 
000021af l       .debug_str     00000000 
000021b4 l       .debug_str     00000000 
00000dd3 l       .debug_str     00000000 
00000430 l       .debug_ranges  00000000 
000003cd l       .debug_str     00000000 
000021c7 l       .debug_str     00000000 
00002138 l       .debug_str     00000000 
00000e02 l       .debug_str     00000000 
00000def l       .debug_str     00000000 
00000da0 l       .debug_str     00000000 
0000210f l       .debug_str     00000000 
00000dbb l       .debug_str     00000000 
00000de4 l       .debug_str     00000000 
00000d8d l       .debug_str     00000000 
000004b7 l       .debug_str     00000000 
0000046a l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00000570 l       .debug_frame   00000000 
f00015d8 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_core_ibex_autogen.c
f00015d8 l       .text  00000000 
f00015d8 l       .text  00000000 
f00015d8 l       .text  00000000 
f00015d8 l       .text  00000000 
f00015da l       .text  00000000 
f00015dc l       .text  00000000 
f00015e0 l       .text  00000000 
f00015e2 l       .text  00000000 
f00015e4 l       .text  00000000 
f00015e6 l       .text  00000000 
f00015e6 l       .text  00000000 
0000242c l       .debug_loc     00000000 
00002447 l       .debug_loc     00000000 
00002462 l       .debug_loc     00000000 
0000247d l       .debug_loc     00000000 
00002498 l       .debug_loc     00000000 
000024c7 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000021c9 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000478 l       .debug_ranges  00000000 
00000373 l       .debug_str     00000000 
00000310 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000321 l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000347 l       .debug_str     00000000 
00000356 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00002276 l       .debug_str     00000000 
000021fe l       .debug_str     00000000 
0000221c l       .debug_str     00000000 
0000223a l       .debug_str     00000000 
00002258 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000f6a l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000d80 l       .debug_str     00000000 
000007e5 l       .debug_str     00000000 
000007dc l       .debug_str     00000000 
000007df l       .debug_str     00000000 
00001c61 l       .debug_str     00000000 
00000812 l       .debug_str     00000000 
00000801 l       .debug_str     00000000 
000007fc l       .debug_str     00000000 
00001d8a l       .debug_str     00000000 
00000825 l       .debug_str     00000000 
0000078a l       .debug_str     00000000 
000007b1 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00000748 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
00001ed4 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
0000075c l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
0000228d l       .debug_str     00000000 
000029ee l       .debug_str     00000000 
00000982 l       .debug_str     00000000 
0000098c l       .debug_str     00000000 
00000627 l       .debug_str     00000000 
00000d8d l       .debug_str     00000000 
00000d7c l       .debug_str     00000000 
000022aa l       .debug_str     00000000 
00000618 l       .debug_frame   00000000 
f00015e6 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f00015e6 l       .text  00000000 
f00015e6 l       .text  00000000 
f00015e6 l       .text  00000000 
f00015e8 l       .text  00000000 
f00015ea l       .text  00000000 
f00015f0 l       .text  00000000 
f00015f4 l       .text  00000000 
f00015f8 l       .text  00000000 
f00015fc l       .text  00000000 
f00015fc l       .text  00000000 
f0001606 l       .text  00000000 
f0001608 l       .text  00000000 
f0001608 l       .text  00000000 
f000160a l       .text  00000000 
f000160a l       .text  00000000 
f0001610 l       .text  00000000 
f0001610 l       .text  00000000 
f000161a l       .text  00000000 
f000161c l       .text  00000000 
f000161c l       .text  00000000 
f0001630 l       .text  00000000 
f0001630 l       .text  00000000 
f0001632 l       .text  00000000 
f0001632 l       .text  00000000 
f000163c l       .text  00000000 
f000163e l       .text  00000000 
f000163e l       .text  00000000 
f0001652 l       .text  00000000 
f0001652 l       .text  00000000 
f0001654 l       .text  00000000 
000101b8 l     O .logs.fields   00000014 test_status_set.kLogFields.2
f0001654 l       .text  00000000 
f0001660 l       .text  00000000 
f0001660 l       .text  00000000 
f000166a l       .text  00000000 
f000166c l       .text  00000000 
f000166c l       .text  00000000 
000101a4 l     O .logs.fields   00000014 test_status_set.kLogFields
f0001674 l       .text  00000000 
f0001680 l       .text  00000000 
f0001680 l       .text  00000000 
f000168a l       .text  00000000 
f000168c l       .text  00000000 
f000168c l       .text  00000000 
f0001696 l       .text  00000000 
f0001696 l       .text  00000000 
f0001696 l       .text  00000000 
000024e2 l       .debug_loc     00000000 
00002500 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000022c3 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000514 l       .debug_str     00000000 
0000010b l       .debug_str     00000000 
00001026 l       .debug_str     00000000 
00000198 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
000024a1 l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
00000191 l       .debug_str     00000000 
00000169 l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000116 l       .debug_str     00000000 
00000127 l       .debug_str     00000000 
00000138 l       .debug_str     00000000 
0000014a l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
0000037e l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
000003ac l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003cf l       .debug_str     00000000 
000003e1 l       .debug_str     00000000 
000022f1 l       .debug_str     00000000 
00002318 l       .debug_str     00000000 
0000230a l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
00000748 l       .debug_str     00000000 
00001ed4 l       .debug_str     00000000 
00001c61 l       .debug_str     00000000 
0000075c l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
000004fd l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
00001196 l       .debug_str     00000000 
0000064c l       .debug_frame   00000000 
f0001696 l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
f0001696 l       .text  00000000 
f0001696 l       .text  00000000 
f0001696 l       .text  00000000 
f0001698 l       .text  00000000 
f000169e l       .text  00000000 
f00016a0 l       .text  00000000 
f00016ae l       .text  00000000 
f00016b8 l       .text  00000000 
f00016be l       .text  00000000 
f00016be l       .text  00000000 
f00016c0 l       .text  00000000 
f00016c4 l       .text  00000000 
f00016c4 l       .text  00000000 
f00016ce l       .text  00000000 
f00016ce l       .text  00000000 
f00016d0 l       .text  00000000 
f00016d4 l       .text  00000000 
f00016d4 l       .text  00000000 
f00016d6 l       .text  00000000 
f00016d6 l       .text  00000000 
f00016d8 l       .text  00000000 
f00016d8 l       .text  00000000 
f00016dc l       .text  00000000 
f00016dc l       .text  00000000 
f00016e2 l       .text  00000000 
f00016f0 l       .text  00000000 
f00016f0 l       .text  00000000 
e0002054 l     O .bss   00000002 base_log_internal_core.global_log_counter
f00016f8 l       .text  00000000 
f0001704 l       .text  00000000 
f0001706 l       .text  00000000 
f0001710 l       .text  00000000 
f0001710 l       .text  00000000 
f000171c l       .text  00000000 
f000171c l       .text  00000000 
f000171e l       .text  00000000 
f0001720 l       .text  00000000 
f0001724 l       .text  00000000 
f0001724 l       .text  00000000 
f000172e l       .text  00000000 
f000172e l       .text  00000000 
f0001738 l       .text  00000000 
f0001738 l       .text  00000000 
f0001738 l       .text  00000000 
f0001738 l       .text  00000000 
f0001738 l       .text  00000000 
f000173a l       .text  00000000 
f0001740 l       .text  00000000 
f0001740 l       .text  00000000 
f000174a l       .text  00000000 
f000174a l       .text  00000000 
f0001750 l       .text  00000000 
f0001750 l       .text  00000000 
f0001754 l       .text  00000000 
f0001754 l       .text  00000000 
f0001756 l       .text  00000000 
f0001756 l       .text  00000000 
f0001758 l       .text  00000000 
f0001758 l       .text  00000000 
f000175a l       .text  00000000 
f000175e l       .text  00000000 
f0001762 l       .text  00000000 
f0001764 l       .text  00000000 
f0001764 l       .text  00000000 
f0001766 l       .text  00000000 
f0001766 l       .text  00000000 
f0001768 l       .text  00000000 
f0001768 l       .text  00000000 
f000176c l       .text  00000000 
f000176c l       .text  00000000 
00002513 l       .debug_loc     00000000 
0000253b l       .debug_loc     00000000 
00002556 l       .debug_loc     00000000 
00002592 l       .debug_loc     00000000 
000025ae l       .debug_loc     00000000 
000025c9 l       .debug_loc     00000000 
000025e4 l       .debug_loc     00000000 
000025ff l       .debug_loc     00000000 
0000263d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002330 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000490 l       .debug_ranges  00000000 
000004fd l       .debug_str     00000000 
0000234c l       .debug_str     00000000 
0000239a l       .debug_str     00000000 
0000239e l       .debug_str     00000000 
000023ac l       .debug_str     00000000 
0000018c l       .debug_str     00000000 
00000c50 l       .debug_str     00000000 
00000c41 l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000116 l       .debug_str     00000000 
00000127 l       .debug_str     00000000 
00000138 l       .debug_str     00000000 
0000014a l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
00000adb l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
0000235f l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000169 l       .debug_str     00000000 
00002372 l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
00002379 l       .debug_str     00000000 
00002381 l       .debug_str     00000000 
000004b7 l       .debug_str     00000000 
0000238d l       .debug_str     00000000 
00000748 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
00001ed4 l       .debug_str     00000000 
00001c61 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
0000075c l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
000023c8 l       .debug_str     00000000 
000003cd l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
00000198 l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
000024a1 l       .debug_str     00000000 
00000191 l       .debug_str     00000000 
000023c0 l       .debug_str     00000000 
000023b6 l       .debug_str     00000000 
00000678 l       .debug_frame   00000000 
f0001738 l       .text  00000000 
f000176c l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
f000176c l     F .text  00000004 base_dev_null
e0002058 l     O .bss   00000008 base_stdout
f000176c l       .text  00000000 
f000176c l       .text  00000000 
f000176c l       .text  00000000 
f000176e l       .text  00000000 
f000176e l       .text  00000000 
f0001770 l       .text  00000000 
f0001770 l       .text  00000000 
f0001770 l       .text  00000000 
f0001770 l       .text  00000000 
f0001770 l       .text  00000000 
f0001778 l       .text  00000000 
f0001778 l       .text  00000000 
f000177a l       .text  00000000 
f0001786 l     F .text  00000040 base_dev_uart
f0001782 l       .text  00000000 
f0001784 l       .text  00000000 
f0001784 l       .text  00000000 
f0001786 l       .text  00000000 
f0001786 l       .text  00000000 
f0001786 l       .text  00000000 
f0001786 l       .text  00000000 
f0001786 l       .text  00000000 
f0001788 l       .text  00000000 
f0001788 l       .text  00000000 
f0001792 l       .text  00000000 
f0001792 l       .text  00000000 
f0001792 l       .text  00000000 
f0001794 l       .text  00000000 
f0001796 l       .text  00000000 
f0001798 l       .text  00000000 
f000179a l       .text  00000000 
f000179c l       .text  00000000 
f000179c l       .text  00000000 
f00017a4 l       .text  00000000 
f00017a8 l       .text  00000000 
f00017a8 l       .text  00000000 
f00017aa l       .text  00000000 
f00017ac l       .text  00000000 
f00017b0 l       .text  00000000 
f00017b0 l       .text  00000000 
f00017b2 l       .text  00000000 
f00017b4 l       .text  00000000 
f00017b6 l       .text  00000000 
f00017b6 l       .text  00000000 
f00017c6 l       .text  00000000 
f00017c6 l       .text  00000000 
f00017c6 l       .text  00000000 
f00017c6 l       .text  00000000 
f00017c6 l       .text  00000000 
f00017c8 l       .text  00000000 
f00017ca l       .text  00000000 
f00017d8 l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e0 l       .text  00000000 
f00017e6 l       .text  00000000 
f00017e6 l       .text  00000000 
f00017e8 l       .text  00000000 
f00017e8 l       .text  00000000 
f00017ea l       .text  00000000 
f00017ea l       .text  00000000 
f00017ee l       .text  00000000 
f00017f0 l       .text  00000000 
f00017f2 l       .text  00000000 
f00017f2 l       .text  00000000 
f00017f8 l       .text  00000000 
f00017f8 l       .text  00000000 
f00017f8 l       .text  00000000 
f00017f8 l       .text  00000000 
f00017f8 l       .text  00000000 
f0001800 l       .text  00000000 
f0001806 l       .text  00000000 
f0001806 l       .text  00000000 
f0001808 l       .text  00000000 
f0001808 l       .text  00000000 
f000180e l       .text  00000000 
f0001810 l       .text  00000000 
f0001812 l       .text  00000000 
f0001812 l       .text  00000000 
f0001812 l       .text  00000000 
f0001812 l       .text  00000000 
f0001812 l       .text  00000000 
f0001812 l       .text  00000000 
f0001814 l       .text  00000000 
f000182e l       .text  00000000 
f0001830 l       .text  00000000 
f0001832 l       .text  00000000 
f0001834 l       .text  00000000 
f0001836 l       .text  00000000 
f0001838 l       .text  00000000 
f000183a l       .text  00000000 
f0001842 l       .text  00000000 
f0001842 l       .text  00000000 
f0001844 l       .text  00000000 
f0001844 l       .text  00000000 
f0001848 l       .text  00000000 
f000184c l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f000186a l       .text  00000000 
f000186e l       .text  00000000 
f0001872 l       .text  00000000 
f0001874 l       .text  00000000 
f0001876 l       .text  00000000 
f0001876 l       .text  00000000 
f0001878 l       .text  00000000 
f000187a l       .text  00000000 
f0001880 l       .text  00000000 
f0001880 l       .text  00000000 
f0001882 l       .text  00000000 
f0001882 l       .text  00000000 
f0001886 l       .text  00000000 
f0001886 l       .text  00000000 
f0001892 l       .text  00000000 
f0001896 l       .text  00000000 
f0001896 l       .text  00000000 
f00018a2 l       .text  00000000 
f00018a2 l       .text  00000000 
f00018aa l       .text  00000000 
f00018aa l       .text  00000000 
f00018ae l       .text  00000000 
f00018ae l       .text  00000000 
f00018bc l       .text  00000000 
f00018bc l       .text  00000000 
f00018c0 l       .text  00000000 
f00018c8 l       .text  00000000 
f00018cc l       .text  00000000 
f00018cc l       .text  00000000 
f00018d0 l       .text  00000000 
f00018d6 l       .text  00000000 
f00018da l       .text  00000000 
f00018dc l       .text  00000000 
f00018e0 l       .text  00000000 
f00018e0 l       .text  00000000 
f00018e4 l       .text  00000000 
f00018ea l       .text  00000000 
f00018ea l       .text  00000000 
f00018ee l       .text  00000000 
f0001902 l       .text  00000000 
f0001902 l       .text  00000000 
f0001904 l       .text  00000000 
f000190a l       .text  00000000 
f000190e l       .text  00000000 
f0001912 l       .text  00000000 
f0001912 l       .text  00000000 
f000191a l       .text  00000000 
f000191c l       .text  00000000 
f000192a l       .text  00000000 
f000192a l       .text  00000000 
f000192e l       .text  00000000 
f000193a l       .text  00000000 
f000193a l       .text  00000000 
f000193e l       .text  00000000 
f000193e l       .text  00000000 
f000194c l       .text  00000000 
f000194c l       .text  00000000 
f000194e l       .text  00000000 
f0001952 l       .text  00000000 
f0001952 l       .text  00000000 
f0001956 l       .text  00000000 
f00034f2 l     O .rodata        00000010 kDigitsLow
f0001968 l       .text  00000000 
f0001968 l       .text  00000000 
f0001970 l       .text  00000000 
f0001978 l       .text  00000000 
f0001978 l       .text  00000000 
f0001982 l       .text  00000000 
f0001982 l       .text  00000000 
f0001986 l       .text  00000000 
f0001986 l       .text  00000000 
f0001990 l       .text  00000000 
f0001990 l       .text  00000000 
f0001998 l       .text  00000000 
f0001998 l       .text  00000000 
f000199c l       .text  00000000 
f000351f l     O .rodata        00000010 kDigitsHigh
f00019a6 l       .text  00000000 
f00019a6 l       .text  00000000 
f00019b0 l       .text  00000000 
f00019b0 l       .text  00000000 
f00019b4 l       .text  00000000 
f00019be l       .text  00000000 
f00019be l       .text  00000000 
f00019c2 l       .text  00000000 
f00019cc l       .text  00000000 
f00019cc l       .text  00000000 
f00019d4 l       .text  00000000 
f00019d4 l       .text  00000000 
f00019d8 l       .text  00000000 
f00019e2 l       .text  00000000 
f00019e2 l       .text  00000000 
f00019ec l       .text  00000000 
f00019f0 l       .text  00000000 
f00019f4 l       .text  00000000 
f00019f4 l       .text  00000000 
f0001a00 l       .text  00000000 
f0001a00 l       .text  00000000 
f0001a04 l       .text  00000000 
f0001a0e l       .text  00000000 
f0001a12 l       .text  00000000 
f0001a12 l       .text  00000000 
f0001a14 l       .text  00000000 
f0001a14 l       .text  00000000 
f0001a18 l       .text  00000000 
f0001a18 l       .text  00000000 
f0001a1c l       .text  00000000 
f0001a26 l       .text  00000000 
f0001a26 l       .text  00000000 
f0001a2a l       .text  00000000 
f0001a36 l       .text  00000000 
f0001a36 l       .text  00000000 
f0001a3a l       .text  00000000 
f0001a3a l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a52 l       .text  00000000 
f0001a52 l       .text  00000000 
f0001a56 l       .text  00000000 
f0001a56 l       .text  00000000 
f0001d86 l     F .text  0000007e write_digits
f0001a6c l       .text  00000000 
f0001a6c l       .text  00000000 
f0001a72 l       .text  00000000 
f0001a72 l       .text  00000000 
f0001a7c l       .text  00000000 
f0001a7c l       .text  00000000 
f0001a7e l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a92 l       .text  00000000 
f0001a92 l       .text  00000000 
f0001a94 l       .text  00000000 
f0001a94 l       .text  00000000 
f0001a96 l       .text  00000000 
f0001a96 l       .text  00000000 
f0001a9a l       .text  00000000 
f0001a9a l       .text  00000000 
f0001a9e l       .text  00000000 
f0001aa0 l       .text  00000000 
f0001aa4 l       .text  00000000 
f0001aa4 l       .text  00000000 
f0001aa8 l       .text  00000000 
f0001aa8 l       .text  00000000 
f0001ab4 l       .text  00000000 
f0001ab4 l       .text  00000000 
f0001ab6 l       .text  00000000 
f0001ab6 l       .text  00000000 
f0001ab8 l       .text  00000000 
f0001ab8 l       .text  00000000 
f0001ac0 l       .text  00000000 
f0001ac0 l       .text  00000000 
f0001ac4 l       .text  00000000 
f0001ac4 l       .text  00000000 
f0001ad2 l       .text  00000000 
f0001ad2 l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ae2 l       .text  00000000 
f0001ae2 l       .text  00000000 
f0001ae6 l       .text  00000000 
f0001ae6 l       .text  00000000 
f0001aea l       .text  00000000 
f0001aea l       .text  00000000 
f0001af8 l       .text  00000000 
f0001af8 l       .text  00000000 
f0001afc l       .text  00000000 
f0001afc l       .text  00000000 
f0001b04 l       .text  00000000 
f0001b04 l       .text  00000000 
f0001b06 l       .text  00000000 
f0001b06 l       .text  00000000 
f0001b08 l       .text  00000000 
f0001b08 l       .text  00000000 
f0001b1c l       .text  00000000 
f0001b1c l       .text  00000000 
f0001b1e l       .text  00000000 
f0001b2c l       .text  00000000 
f0001b2c l       .text  00000000 
f0001b2e l       .text  00000000 
f0001b2e l       .text  00000000 
f0001b30 l       .text  00000000 
f0001b38 l       .text  00000000 
f0001b3c l       .text  00000000 
f0001b3e l       .text  00000000 
f0001b48 l       .text  00000000 
f0001b48 l       .text  00000000 
f0001b4c l       .text  00000000 
f0001b56 l       .text  00000000 
f0001b56 l       .text  00000000 
f0001b5a l       .text  00000000 
f0001b66 l       .text  00000000 
f0001b66 l       .text  00000000 
f0001b6a l       .text  00000000 
f0001b6a l       .text  00000000 
f0001b74 l       .text  00000000 
f0001b74 l       .text  00000000 
f0001b7c l       .text  00000000 
f0001b7c l       .text  00000000 
f0001b80 l       .text  00000000 
f0001b88 l       .text  00000000 
f0001b88 l       .text  00000000 
f0001b92 l       .text  00000000 
f0001b92 l       .text  00000000 
f0001b9c l       .text  00000000 
f0001b9c l       .text  00000000 
f0001ba0 l       .text  00000000 
f0001ba8 l       .text  00000000 
f0001ba8 l       .text  00000000 
f0001bb2 l       .text  00000000 
f0001bb4 l       .text  00000000 
f0001bb4 l       .text  00000000 
f0001bb8 l       .text  00000000 
f0001bc2 l       .text  00000000 
f0001bc2 l       .text  00000000 
f0001bca l       .text  00000000 
f0001bca l       .text  00000000 
f0001bce l       .text  00000000 
f0001bd6 l       .text  00000000 
f0001bd6 l       .text  00000000 
f0001ca0 l     F .text  000000e6 hex_dump
f0001be0 l       .text  00000000 
f0001be2 l       .text  00000000 
f000352f l     O .rodata        0000000f kUnknownSpec
f0001be2 l       .text  00000000 
f0001bec l       .text  00000000 
f0001bec l       .text  00000000 
f0001bf0 l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bf6 l       .text  00000000 
f0001bfc l       .text  00000000 
f0001bfc l       .text  00000000 
f0001c00 l       .text  00000000 
f0001c0c l       .text  00000000 
f0001c0c l       .text  00000000 
f0001c0e l       .text  00000000 
f0001c0e l       .text  00000000 
f0001c22 l       .text  00000000 
f0001c22 l       .text  00000000 
f0001c26 l       .text  00000000 
f0001c34 l       .text  00000000 
f0001c34 l       .text  00000000 
f0001c38 l       .text  00000000 
f0001c38 l       .text  00000000 
f0001c3e l       .text  00000000 
f0001c3e l       .text  00000000 
f0001c40 l       .text  00000000 
f0001c40 l       .text  00000000 
f0001c42 l       .text  00000000 
f0001c42 l       .text  00000000 
f0001c4a l       .text  00000000 
f0001c4c l       .text  00000000 
f0001c4e l       .text  00000000 
f0001c54 l       .text  00000000 
f0001c54 l       .text  00000000 
f0001c60 l       .text  00000000 
f0003502 l     O .rodata        00000011 kErrorNul
f0001c60 l       .text  00000000 
f0001c6a l       .text  00000000 
f0001c6a l       .text  00000000 
f0001c6e l       .text  00000000 
f0001c72 l       .text  00000000 
f0001c74 l       .text  00000000 
f0001c74 l       .text  00000000 
f0001c84 l       .text  00000000 
f0001c88 l       .text  00000000 
f0001c94 l       .text  00000000 
f0003513 l     O .rodata        0000000c kErrorTooWide
f0001c94 l       .text  00000000 
f0001ca0 l       .text  00000000 
f0001ca0 l       .text  00000000 
f0001ca0 l       .text  00000000 
f0001ca0 l       .text  00000000 
f0001ca0 l       .text  00000000 
f0001ca0 l       .text  00000000 
f0001ca2 l       .text  00000000 
f0001cba l       .text  00000000 
f0001cbc l       .text  00000000 
f0001cbe l       .text  00000000 
f0001cc0 l       .text  00000000 
f0001cc2 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cca l       .text  00000000 
f0001cce l       .text  00000000 
f0001cce l       .text  00000000 
f0001cda l       .text  00000000 
f0001cda l       .text  00000000 
f0001cdc l       .text  00000000 
f0001cde l       .text  00000000 
f0001ce4 l       .text  00000000 
f0001ce4 l       .text  00000000 
f0001ce8 l       .text  00000000 
f0001cec l       .text  00000000 
f0001cec l       .text  00000000 
f0001cf4 l       .text  00000000 
f0001cf4 l       .text  00000000 
f0001cf6 l       .text  00000000 
f0001cf8 l       .text  00000000 
f0001cf8 l       .text  00000000 
f0001cfa l       .text  00000000 
f0001cfa l       .text  00000000 
f0001d00 l       .text  00000000 
f0001d00 l       .text  00000000 
f0001d02 l       .text  00000000 
f0001d02 l       .text  00000000 
f0001d06 l       .text  00000000 
f0001d0a l       .text  00000000 
f0001d10 l       .text  00000000 
f0001d10 l       .text  00000000 
f0001d16 l       .text  00000000 
f0001d1e l       .text  00000000 
f0001d1e l       .text  00000000 
f0001d20 l       .text  00000000 
f0001d24 l       .text  00000000 
f0001d28 l       .text  00000000 
f0001d2e l       .text  00000000 
f0001d32 l       .text  00000000 
f0001d36 l       .text  00000000 
f0001d38 l       .text  00000000 
f0001d3e l       .text  00000000 
f0001d40 l       .text  00000000 
f0001d48 l       .text  00000000 
f0001d4e l       .text  00000000 
f0001d52 l       .text  00000000 
f0001d52 l       .text  00000000 
f0001d54 l       .text  00000000 
f0001d56 l       .text  00000000 
f0001d56 l       .text  00000000 
f0001d58 l       .text  00000000 
f0001d5a l       .text  00000000 
f0001d5e l       .text  00000000 
f0001d5e l       .text  00000000 
f0001d60 l       .text  00000000 
f0001d66 l       .text  00000000 
f0001d66 l       .text  00000000 
f0001d68 l       .text  00000000 
f0001d70 l       .text  00000000 
f0001d72 l       .text  00000000 
f0001d76 l       .text  00000000 
f0001d78 l       .text  00000000 
f0001d7a l       .text  00000000 
f0001d7c l       .text  00000000 
f0001d86 l       .text  00000000 
f0001d86 l       .text  00000000 
f0001d86 l       .text  00000000 
f0001d86 l       .text  00000000 
f0001d86 l       .text  00000000 
f0001d88 l       .text  00000000 
f0001d8a l       .text  00000000 
f0001d8c l       .text  00000000 
f0001d8c l       .text  00000000 
f0001d8e l       .text  00000000 
f0001d90 l       .text  00000000 
f0001d94 l       .text  00000000 
f0001d94 l       .text  00000000 
f0001d96 l       .text  00000000 
f0001d96 l       .text  00000000 
f0001da2 l       .text  00000000 
f0001da2 l       .text  00000000 
f0001da4 l       .text  00000000 
f0001da8 l       .text  00000000 
f0001db0 l       .text  00000000 
f0001db0 l       .text  00000000 
f0001db2 l       .text  00000000 
f0001db6 l       .text  00000000 
f0001dba l       .text  00000000 
f0001dba l       .text  00000000 
f0001dbc l       .text  00000000 
f0001dbc l       .text  00000000 
f0001dc0 l       .text  00000000 
f0001dc6 l       .text  00000000 
f0001dc6 l       .text  00000000 
f0001dc8 l       .text  00000000 
f0001dca l       .text  00000000 
f0001dcc l       .text  00000000 
f0001dd0 l       .text  00000000 
f0001dd4 l       .text  00000000 
f0001dd8 l       .text  00000000 
f0001dd8 l       .text  00000000 
f0001de2 l       .text  00000000 
f0001de6 l       .text  00000000 
f0001de8 l       .text  00000000 
f0001dec l       .text  00000000 
f0001df0 l       .text  00000000 
f0001df2 l       .text  00000000 
f0001df4 l       .text  00000000 
f0001df6 l       .text  00000000 
f0001df6 l       .text  00000000 
f0001dfc l       .text  00000000 
f0001dfe l       .text  00000000 
f0001dfe l       .text  00000000 
f0001e04 l       .text  00000000 
f0001e04 l       .text  00000000 
0000265a l       .debug_loc     00000000 
00002686 l       .debug_loc     00000000 
000026a1 l       .debug_loc     00000000 
000026c7 l       .debug_loc     00000000 
000026f3 l       .debug_loc     00000000 
00002724 l       .debug_loc     00000000 
00002755 l       .debug_loc     00000000 
00002791 l       .debug_loc     00000000 
000027c2 l       .debug_loc     00000000 
000027e9 l       .debug_loc     00000000 
0000281a l       .debug_loc     00000000 
00002835 l       .debug_loc     00000000 
00002851 l       .debug_loc     00000000 
0000286c l       .debug_loc     00000000 
00002892 l       .debug_loc     00000000 
000028b8 l       .debug_loc     00000000 
000028f4 l       .debug_loc     00000000 
000029ff l       .debug_loc     00000000 
00002b59 l       .debug_loc     00000000 
00002c59 l       .debug_loc     00000000 
00002d64 l       .debug_loc     00000000 
00002d84 l       .debug_loc     00000000 
00002daa l       .debug_loc     00000000 
00002dda l       .debug_loc     00000000 
00003012 l       .debug_loc     00000000 
0000302e l       .debug_loc     00000000 
00003049 l       .debug_loc     00000000 
000031be l       .debug_loc     00000000 
0000330e l       .debug_loc     00000000 
00003422 l       .debug_loc     00000000 
00003448 l       .debug_loc     00000000 
00003463 l       .debug_loc     00000000 
0000347e l       .debug_loc     00000000 
00003499 l       .debug_loc     00000000 
000034b4 l       .debug_loc     00000000 
000034cf l       .debug_loc     00000000 
000034eb l       .debug_loc     00000000 
00003506 l       .debug_loc     00000000 
00003521 l       .debug_loc     00000000 
0000353c l       .debug_loc     00000000 
00003557 l       .debug_loc     00000000 
00003589 l       .debug_loc     00000000 
000035bc l       .debug_loc     00000000 
000035d7 l       .debug_loc     00000000 
0000362a l       .debug_loc     00000000 
0000365d l       .debug_loc     00000000 
00003678 l       .debug_loc     00000000 
00003693 l       .debug_loc     00000000 
000036ae l       .debug_loc     00000000 
000036c9 l       .debug_loc     00000000 
000036e4 l       .debug_loc     00000000 
000036ff l       .debug_loc     00000000 
0000371a l       .debug_loc     00000000 
00003735 l       .debug_loc     00000000 
00003750 l       .debug_loc     00000000 
0000376b l       .debug_loc     00000000 
00003786 l       .debug_loc     00000000 
000037a2 l       .debug_loc     00000000 
000037c1 l       .debug_loc     00000000 
000037dc l       .debug_loc     00000000 
0000380d l       .debug_loc     00000000 
00003833 l       .debug_loc     00000000 
00003864 l       .debug_loc     00000000 
00003895 l       .debug_loc     00000000 
000038b0 l       .debug_loc     00000000 
000038cb l       .debug_loc     00000000 
000038e6 l       .debug_loc     00000000 
00003917 l       .debug_loc     00000000 
00003932 l       .debug_loc     00000000 
0000394d l       .debug_loc     00000000 
00003969 l       .debug_loc     00000000 
0000398f l       .debug_loc     00000000 
000039c0 l       .debug_loc     00000000 
000039db l       .debug_loc     00000000 
000039f6 l       .debug_loc     00000000 
00003a1c l       .debug_loc     00000000 
00003a42 l       .debug_loc     00000000 
00003a5d l       .debug_loc     00000000 
00003a78 l       .debug_loc     00000000 
00003a93 l       .debug_loc     00000000 
00003aae l       .debug_loc     00000000 
00003acd l       .debug_loc     00000000 
00003ae8 l       .debug_loc     00000000 
00003b03 l       .debug_loc     00000000 
00003b1f l       .debug_loc     00000000 
00003b3a l       .debug_loc     00000000 
00003b55 l       .debug_loc     00000000 
00003b74 l       .debug_loc     00000000 
00003b9a l       .debug_loc     00000000 
00003bcb l       .debug_loc     00000000 
00003c23 l       .debug_loc     00000000 
00003c6d l       .debug_loc     00000000 
00003cbf l       .debug_loc     00000000 
00003cfc l       .debug_loc     00000000 
00003d38 l       .debug_loc     00000000 
00003da2 l       .debug_loc     00000000 
00003deb l       .debug_loc     00000000 
00003e55 l       .debug_loc     00000000 
00003e7b l       .debug_loc     00000000 
00003e96 l       .debug_loc     00000000 
00003eb1 l       .debug_loc     00000000 
00003ed8 l       .debug_loc     00000000 
00003f20 l       .debug_loc     00000000 
00003f46 l       .debug_loc     00000000 
00003f6c l       .debug_loc     00000000 
00003f92 l       .debug_loc     00000000 
00003fad l       .debug_loc     00000000 
00003fdd l       .debug_loc     00000000 
00004003 l       .debug_loc     00000000 
00004035 l       .debug_loc     00000000 
00004073 l       .debug_loc     00000000 
000040a2 l       .debug_loc     00000000 
000040bd l       .debug_loc     00000000 
000040f0 l       .debug_loc     00000000 
0000410b l       .debug_loc     00000000 
00004147 l       .debug_loc     00000000 
0000416d l       .debug_loc     00000000 
00004188 l       .debug_loc     00000000 
000041a3 l       .debug_loc     00000000 
000041be l       .debug_loc     00000000 
00004214 l       .debug_loc     00000000 
00004243 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000023d3 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
000005e0 l       .debug_ranges  00000000 
000023f1 l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00002410 l       .debug_str     00000000 
00002428 l       .debug_str     00000000 
0000241c l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00002704 l       .debug_str     00000000 
000004b7 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00002436 l       .debug_str     00000000 
00002440 l       .debug_str     00000000 
0000275c l       .debug_str     00000000 
0000244e l       .debug_str     00000000 
000048ac l       .debug_str     00000000 
00001c61 l       .debug_str     00000000 
00002f1b l       .debug_str     00000000 
00002619 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
000027de l       .debug_str     00000000 
00001b2f l       .debug_str     00000000 
00002643 l       .debug_str     00000000 
000027ee l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
00002458 l       .debug_str     00000000 
00002464 l       .debug_str     00000000 
00002471 l       .debug_str     00000000 
000024c0 l       .debug_str     00000000 
000024af l       .debug_str     00000000 
00002488 l       .debug_str     00000000 
00002497 l       .debug_str     00000000 
000024a6 l       .debug_str     00000000 
000024d3 l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000310 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000321 l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000347 l       .debug_str     00000000 
00000356 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
000024de l       .debug_str     00000000 
000024e7 l       .debug_str     00000000 
000024f2 l       .debug_str     00000000 
000024fa l       .debug_str     00000000 
00002506 l       .debug_str     00000000 
00002512 l       .debug_str     00000000 
0000251f l       .debug_str     00000000 
0000252f l       .debug_str     00000000 
00002540 l       .debug_str     00000000 
0000254d l       .debug_str     00000000 
00002556 l       .debug_str     00000000 
00002560 l       .debug_str     00000000 
0000256a l       .debug_str     00000000 
00002575 l       .debug_str     00000000 
0000257f l       .debug_str     00000000 
0000258a l       .debug_str     00000000 
000004b5 l       .debug_str     00000000 
00000478 l       .debug_str     00000000 
0000046a l       .debug_str     00000000 
00000d5a l       .debug_str     00000000 
00000d51 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
000025a3 l       .debug_str     00000000 
000004cf l       .debug_str     00000000 
00002598 l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
000026c3 l       .debug_str     00000000 
000025b7 l       .debug_str     00000000 
0000100e l       .debug_str     00000000 
00000d55 l       .debug_str     00000000 
000026d1 l       .debug_str     00000000 
000003cd l       .debug_str     00000000 
000025c7 l       .debug_str     00000000 
0000238d l       .debug_str     00000000 
00000191 l       .debug_str     00000000 
0000018c l       .debug_str     00000000 
000023c0 l       .debug_str     00000000 
000023b6 l       .debug_str     00000000 
00002381 l       .debug_str     00000000 
000004a8 l       .debug_ranges  00000000 
000026df l       .debug_str     00000000 
00002769 l       .debug_str     00000000 
000027a4 l       .debug_str     00000000 
00000588 l       .debug_ranges  00000000 
0000265d l       .debug_str     00000000 
000004c0 l       .debug_ranges  00000000 
000004e8 l       .debug_ranges  00000000 
00000508 l       .debug_ranges  00000000 
00000520 l       .debug_ranges  00000000 
00000558 l       .debug_ranges  00000000 
00000540 l       .debug_ranges  00000000 
00000570 l       .debug_ranges  00000000 
000025e1 l       .debug_str     00000000 
000025f7 l       .debug_str     00000000 
00003a68 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00002600 l       .debug_str     00000000 
0000263e l       .debug_str     00000000 
0000262b l       .debug_str     00000000 
00002608 l       .debug_str     00000000 
00000e66 l       .debug_str     00000000 
00002621 l       .debug_str     00000000 
00002647 l       .debug_str     00000000 
00002659 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000adb l       .debug_str     00000000 
00002964 l       .debug_str     00000000 
00002668 l       .debug_str     00000000 
00002662 l       .debug_str     00000000 
0000266f l       .debug_str     00000000 
00002677 l       .debug_str     00000000 
00001c93 l       .debug_str     00000000 
0000267b l       .debug_str     00000000 
00001c9e l       .debug_str     00000000 
0000297d l       .debug_str     00000000 
0000267f l       .debug_str     00000000 
00002753 l       .debug_str     00000000 
000047c0 l       .debug_str     00000000 
000027d3 l       .debug_str     00000000 
000027ca l       .debug_str     00000000 
000027e5 l       .debug_str     00000000 
00000988 l       .debug_str     00000000 
000026ed l       .debug_str     00000000 
000026fb l       .debug_str     00000000 
00002773 l       .debug_str     00000000 
00002138 l       .debug_str     00000000 
00002709 l       .debug_str     00000000 
0000268e l       .debug_str     00000000 
000024bc l       .debug_str     00000000 
00002716 l       .debug_str     00000000 
00002740 l       .debug_str     00000000 
00002790 l       .debug_str     00000000 
000024a1 l       .debug_str     00000000 
000005c8 l       .debug_ranges  00000000 
00002783 l       .debug_str     00000000 
0000279f l       .debug_str     00000000 
000027b2 l       .debug_str     00000000 
00000bc9 l       .debug_str     00000000 
000005a8 l       .debug_ranges  00000000 
0000277c l       .debug_str     00000000 
000027c1 l       .debug_str     00000000 
00000b77 l       .debug_str     00000000 
000026a0 l       .debug_str     00000000 
000026b4 l       .debug_str     00000000 
00002723 l       .debug_str     00000000 
00002732 l       .debug_str     00000000 
000026bc l       .debug_str     00000000 
000006bc l       .debug_frame   00000000 
f0001770 l       .text  00000000 
f0001786 l       .text  00000000 
f00017c6 l       .text  00000000 
f00017f8 l       .text  00000000 
f0001812 l       .text  00000000 
f0001ca0 l       .text  00000000 
f0001d86 l       .text  00000000 
f0001e04 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f0001e04 l       .text  00000000 
f0001e04 l       .text  00000000 
f0001e04 l       .text  00000000 
f0001e04 l       .text  00000000 
f0001e08 l       .text  00000000 
f0001e10 l       .text  00000000 
f0001e10 l       .text  00000000 
f0001e14 l       .text  00000000 
f0001e14 l       .text  00000000 
f0001e20 l       .text  00000000 
f0001e22 l       .text  00000000 
f0001e22 l       .text  00000000 
f0001e26 l       .text  00000000 
f0001e32 l       .text  00000000 
f0001e34 l       .text  00000000 
f0001e38 l       .text  00000000 
f0001e3a l       .text  00000000 
f0001e3a l       .text  00000000 
f0001e3e l       .text  00000000 
f0001e3e l       .text  00000000 
f0001e42 l       .text  00000000 
f0001e42 l       .text  00000000 
f0001e44 l       .text  00000000 
f0001e44 l       .text  00000000 
f0001e48 l       .text  00000000 
f0001e48 l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e4e l       .text  00000000 
f0001e4e l       .text  00000000 
f0001e52 l       .text  00000000 
f0001e56 l       .text  00000000 
f0001e5c l       .text  00000000 
f0001e5c l       .text  00000000 
f0001e60 l       .text  00000000 
f0001e62 l       .text  00000000 
f0001e62 l       .text  00000000 
f0001e68 l       .text  00000000 
f0001e68 l       .text  00000000 
f0001e6e l       .text  00000000 
f0001e6e l       .text  00000000 
f0001e70 l       .text  00000000 
f0001e70 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e76 l       .text  00000000 
0000425e l       .debug_loc     00000000 
00004279 l       .debug_loc     00000000 
000042aa l       .debug_loc     00000000 
000042d0 l       .debug_loc     00000000 
000042f6 l       .debug_loc     00000000 
00004311 l       .debug_loc     00000000 
00004333 l       .debug_loc     00000000 
0000435a l       .debug_loc     00000000 
00004381 l       .debug_loc     00000000 
000043a5 l       .debug_loc     00000000 
000043d6 l       .debug_loc     00000000 
000043f1 l       .debug_loc     00000000 
00004422 l       .debug_loc     00000000 
0000447c l       .debug_loc     00000000 
000044b8 l       .debug_loc     00000000 
000044dc l       .debug_loc     00000000 
00004501 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000027f4 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000690 l       .debug_ranges  00000000 
00002810 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00002820 l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
0000294e l       .debug_str     00000000 
0000282d l       .debug_str     00000000 
00002831 l       .debug_str     00000000 
0000283c l       .debug_str     00000000 
00002845 l       .debug_str     00000000 
00002856 l       .debug_str     00000000 
00002868 l       .debug_str     00000000 
00002872 l       .debug_str     00000000 
00002881 l       .debug_str     00000000 
00002893 l       .debug_str     00000000 
000028a6 l       .debug_str     00000000 
000028ba l       .debug_str     00000000 
000028c3 l       .debug_str     00000000 
000028cf l       .debug_str     00000000 
000028de l       .debug_str     00000000 
000028e8 l       .debug_str     00000000 
000028f5 l       .debug_str     00000000 
000028ff l       .debug_str     00000000 
00002910 l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
000004b7 l       .debug_str     00000000 
000004b5 l       .debug_str     00000000 
0000295f l       .debug_str     00000000 
0000296d l       .debug_str     00000000 
000000e2 l       .debug_str     00000000 
000010c2 l       .debug_str     00000000 
000007e5 l       .debug_str     00000000 
000007dc l       .debug_str     00000000 
000007df l       .debug_str     00000000 
00001c61 l       .debug_str     00000000 
00000812 l       .debug_str     00000000 
00000801 l       .debug_str     00000000 
000007fc l       .debug_str     00000000 
00001d8a l       .debug_str     00000000 
00002981 l       .debug_str     00000000 
0000295a l       .debug_str     00000000 
0000298f l       .debug_str     00000000 
0000267b l       .debug_str     00000000 
00000678 l       .debug_ranges  00000000 
00002976 l       .debug_str     00000000 
00000114 l       .debug_str     00000000 
00002964 l       .debug_str     00000000 
00002668 l       .debug_str     00000000 
00000b24 l       .debug_str     00000000 
0000267f l       .debug_str     00000000 
00002999 l       .debug_str     00000000 
0000297d l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
000008b0 l       .debug_frame   00000000 
f0001e76 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart_autogen.c
f0001e76 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e78 l       .text  00000000 
f0001e7a l       .text  00000000 
f0001e7e l       .text  00000000 
f0001e80 l       .text  00000000 
f0001e82 l       .text  00000000 
f0001e84 l       .text  00000000 
f0001e84 l       .text  00000000 
00004523 l       .debug_loc     00000000 
0000453e l       .debug_loc     00000000 
00004559 l       .debug_loc     00000000 
00004574 l       .debug_loc     00000000 
00004590 l       .debug_loc     00000000 
000045ac l       .debug_loc     00000000 
000045c7 l       .debug_loc     00000000 
000045e2 l       .debug_loc     00000000 
000045fd l       .debug_loc     00000000 
00004618 l       .debug_loc     00000000 
00004633 l       .debug_loc     00000000 
0000464e l       .debug_loc     00000000 
00004669 l       .debug_loc     00000000 
00004684 l       .debug_loc     00000000 
000046aa l       .debug_loc     00000000 
000046c5 l       .debug_loc     00000000 
000046e0 l       .debug_loc     00000000 
000046fe l       .debug_loc     00000000 
00004725 l       .debug_loc     00000000 
00004740 l       .debug_loc     00000000 
0000475b l       .debug_loc     00000000 
00004776 l       .debug_loc     00000000 
00004794 l       .debug_loc     00000000 
000047bb l       .debug_loc     00000000 
000047d6 l       .debug_loc     00000000 
000047f1 l       .debug_loc     00000000 
0000480c l       .debug_loc     00000000 
00004827 l       .debug_loc     00000000 
0000484d l       .debug_loc     00000000 
00004868 l       .debug_loc     00000000 
00004883 l       .debug_loc     00000000 
000048a9 l       .debug_loc     00000000 
000048c9 l       .debug_loc     00000000 
000048ef l       .debug_loc     00000000 
0000490d l       .debug_loc     00000000 
00004928 l       .debug_loc     00000000 
0000494e l       .debug_loc     00000000 
00004974 l       .debug_loc     00000000 
0000498f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000029a0 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
000006a8 l       .debug_ranges  00000000 
00000665 l       .debug_str     00000000 
0000069f l       .debug_str     00000000 
00000692 l       .debug_str     00000000 
0000066f l       .debug_str     00000000 
00000680 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000310 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000321 l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000347 l       .debug_str     00000000 
00000356 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
000029e5 l       .debug_str     00000000 
000029cd l       .debug_str     00000000 
00002aa3 l       .debug_str     00000000 
000029f4 l       .debug_str     00000000 
00002a0b l       .debug_str     00000000 
00002a22 l       .debug_str     00000000 
00002a35 l       .debug_str     00000000 
00002a4b l       .debug_str     00000000 
00002a61 l       .debug_str     00000000 
00002a77 l       .debug_str     00000000 
00002a8c l       .debug_str     00000000 
0000073d l       .debug_str     00000000 
00000718 l       .debug_str     00000000 
0000072b l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000fa8 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000d55 l       .debug_str     00000000 
00000748 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
00001ed4 l       .debug_str     00000000 
00001c61 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
0000075c l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
00002ab0 l       .debug_str     00000000 
000029ee l       .debug_str     00000000 
00000982 l       .debug_str     00000000 
0000098c l       .debug_str     00000000 
00002ac5 l       .debug_str     00000000 
00001941 l       .debug_str     00000000 
00000e66 l       .debug_str     00000000 
00000766 l       .debug_str     00000000 
00002adb l       .debug_str     00000000 
0000099b l       .debug_str     00000000 
000007c8 l       .debug_str     00000000 
000007dc l       .debug_str     00000000 
0000078a l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
000007b1 l       .debug_str     00000000 
00002af2 l       .debug_str     00000000 
00001e42 l       .debug_str     00000000 
000009c6 l       .debug_str     00000000 
00001d8a l       .debug_str     00000000 
00002b0a l       .debug_str     00000000 
000007e5 l       .debug_str     00000000 
000007df l       .debug_str     00000000 
00000812 l       .debug_str     00000000 
00000801 l       .debug_str     00000000 
000007fc l       .debug_str     00000000 
00000825 l       .debug_str     00000000 
00002b27 l       .debug_str     00000000 
00002b40 l       .debug_str     00000000 
00001aae l       .debug_str     00000000 
000009d5 l       .debug_str     00000000 
00002b53 l       .debug_str     00000000 
00001bb6 l       .debug_str     00000000 
000009f0 l       .debug_str     00000000 
00000a00 l       .debug_str     00000000 
00002b6c l       .debug_str     00000000 
00000a0b l       .debug_str     00000000 
00002b85 l       .debug_str     00000000 
00002b9e l       .debug_str     00000000 
00000627 l       .debug_str     00000000 
00000d5a l       .debug_str     00000000 
00000d51 l       .debug_str     00000000 
00002bb7 l       .debug_str     00000000 
00002bc8 l       .debug_str     00000000 
00002bd7 l       .debug_str     00000000 
000009e3 l       .debug_str     00000000 
00002bf5 l       .debug_str     00000000 
000008e4 l       .debug_frame   00000000 
f0001e84 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart.c
f0001e84 l       .text  00000000 
f0001e84 l       .text  00000000 
f0001e84 l       .text  00000000 
f0001e86 l       .text  00000000 
f0001e90 l       .text  00000000 
f0001e92 l       .text  00000000 
f0001e94 l       .text  00000000 
f0001e96 l       .text  00000000 
f0001e96 l       .text  00000000 
f0001e98 l       .text  00000000 
f0001e9a l       .text  00000000 
f0001e9e l       .text  00000000 
f0001ea0 l       .text  00000000 
f0001ea2 l       .text  00000000 
f0001eaa l       .text  00000000 
f0001eb6 l       .text  00000000 
f0001ec6 l       .text  00000000 
f0001ece l       .text  00000000 
f0001ed6 l       .text  00000000 
f0001ed6 l       .text  00000000 
f0001eda l       .text  00000000 
f0001eda l       .text  00000000 
f0001edc l       .text  00000000 
f0001ede l       .text  00000000 
f0001ee0 l       .text  00000000 
f0001ee0 l       .text  00000000 
f0001ee2 l       .text  00000000 
f0001ee2 l       .text  00000000 
f0001ee6 l       .text  00000000 
f0001ee6 l       .text  00000000 
f0001ee8 l       .text  00000000 
f0001eea l       .text  00000000 
f0001eea l       .text  00000000 
f0001eec l       .text  00000000 
f0001eec l       .text  00000000 
f0001eee l       .text  00000000 
f0001eee l       .text  00000000 
f0001ef2 l       .text  00000000 
f0001ef2 l       .text  00000000 
f0001ef4 l       .text  00000000 
f0001ef4 l       .text  00000000 
f0001ef8 l       .text  00000000 
f0001ef8 l       .text  00000000 
f0001efa l       .text  00000000 
f0001efa l       .text  00000000 
f0001efe l       .text  00000000 
f0001efe l       .text  00000000 
f0001f00 l       .text  00000000 
f0001f02 l       .text  00000000 
f0001f02 l       .text  00000000 
f0001f04 l       .text  00000000 
f0001f04 l       .text  00000000 
f0001f08 l       .text  00000000 
f0001f08 l       .text  00000000 
f0001f0c l       .text  00000000 
f0001f0c l       .text  00000000 
f0001f0e l       .text  00000000 
f0001f12 l       .text  00000000 
f0001f12 l       .text  00000000 
f0001f16 l       .text  00000000 
f0001f16 l       .text  00000000 
f0001f18 l       .text  00000000 
f0001f1c l       .text  00000000 
f0001f1e l       .text  00000000 
f0001f1e l       .text  00000000 
f0001f20 l       .text  00000000 
f0001f24 l       .text  00000000 
f0001f26 l       .text  00000000 
f0001f26 l       .text  00000000 
f0001f28 l       .text  00000000 
f0001f28 l       .text  00000000 
f0001f2a l       .text  00000000 
f0001f2a l       .text  00000000 
f0001f2c l       .text  00000000 
f0001f2c l       .text  00000000 
f0001f30 l       .text  00000000 
f0001f30 l       .text  00000000 
f0001f40 l       .text  00000000 
f0001f40 l       .text  00000000 
f0001f40 l       .text  00000000 
f0001f40 l       .text  00000000 
f0001f40 l       .text  00000000 
f0001f40 l       .text  00000000 
f0001f42 l       .text  00000000 
f0001f44 l       .text  00000000 
f0001f44 l       .text  00000000 
f0001f46 l       .text  00000000 
f0001f46 l       .text  00000000 
f0001f48 l       .text  00000000 
f0001f48 l       .text  00000000 
f0001f4a l       .text  00000000 
f0001f4a l       .text  00000000 
f0001f4c l       .text  00000000 
f0001f4c l       .text  00000000 
f0001f4e l       .text  00000000 
f0001f4e l       .text  00000000 
f0001f50 l       .text  00000000 
f0001f50 l       .text  00000000 
f0001f52 l       .text  00000000 
f0001f54 l       .text  00000000 
f0001f54 l       .text  00000000 
f0001f56 l       .text  00000000 
f0001f56 l       .text  00000000 
f0001f58 l       .text  00000000 
f0001f58 l       .text  00000000 
f0001f5a l       .text  00000000 
f0001f5c l       .text  00000000 
f0001f5e l       .text  00000000 
f0001f5e l       .text  00000000 
f0001f60 l       .text  00000000 
f0001f60 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f62 l       .text  00000000 
000049aa l       .debug_loc     00000000 
000049d0 l       .debug_loc     00000000 
000049f8 l       .debug_loc     00000000 
00004a27 l       .debug_loc     00000000 
00004a42 l       .debug_loc     00000000 
00004a5e l       .debug_loc     00000000 
00004a94 l       .debug_loc     00000000 
00004aaf l       .debug_loc     00000000 
00004ad6 l       .debug_loc     00000000 
00004afb l       .debug_loc     00000000 
00004b21 l       .debug_loc     00000000 
00004b47 l       .debug_loc     00000000 
00004b6d l       .debug_loc     00000000 
00004b88 l       .debug_loc     00000000 
00004baa l       .debug_loc     00000000 
00004bd0 l       .debug_loc     00000000 
00004bf6 l       .debug_loc     00000000 
00004c1c l       .debug_loc     00000000 
00004c42 l       .debug_loc     00000000 
00004c5d l       .debug_loc     00000000 
00004c7f l       .debug_loc     00000000 
00004ca5 l       .debug_loc     00000000 
00004cc0 l       .debug_loc     00000000 
00004ce7 l       .debug_loc     00000000 
00004d02 l       .debug_loc     00000000 
00004d1d l       .debug_loc     00000000 
00004d38 l       .debug_loc     00000000 
00004d5f l       .debug_loc     00000000 
00004d7a l       .debug_loc     00000000 
00004d95 l       .debug_loc     00000000 
00004dbb l       .debug_loc     00000000 
00004dd6 l       .debug_loc     00000000 
00004df1 l       .debug_loc     00000000 
00004e0c l       .debug_loc     00000000 
00004e32 l       .debug_loc     00000000 
00004e4d l       .debug_loc     00000000 
00004e68 l       .debug_loc     00000000 
00004e83 l       .debug_loc     00000000 
00004e9e l       .debug_loc     00000000 
00004eb9 l       .debug_loc     00000000 
00004ed4 l       .debug_loc     00000000 
00004eef l       .debug_loc     00000000 
00004f12 l       .debug_loc     00000000 
00004f2d l       .debug_loc     00000000 
00004f48 l       .debug_loc     00000000 
00004f63 l       .debug_loc     00000000 
00004f7e l       .debug_loc     00000000 
00004fa1 l       .debug_loc     00000000 
00004fbc l       .debug_loc     00000000 
00004fd7 l       .debug_loc     00000000 
00004ffd l       .debug_loc     00000000 
00005023 l       .debug_loc     00000000 
00005049 l       .debug_loc     00000000 
0000506f l       .debug_loc     00000000 
00005095 l       .debug_loc     00000000 
000050bb l       .debug_loc     00000000 
000050d6 l       .debug_loc     00000000 
000050fc l       .debug_loc     00000000 
0000512b l       .debug_loc     00000000 
00005151 l       .debug_loc     00000000 
0000516c l       .debug_loc     00000000 
00005187 l       .debug_loc     00000000 
000051a7 l       .debug_loc     00000000 
000051c2 l       .debug_loc     00000000 
000051dd l       .debug_loc     00000000 
0000520e l       .debug_loc     00000000 
0000523f l       .debug_loc     00000000 
00005265 l       .debug_loc     00000000 
0000528b l       .debug_loc     00000000 
000052a7 l       .debug_loc     00000000 
000052c2 l       .debug_loc     00000000 
000052dd l       .debug_loc     00000000 
000052f8 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002c14 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000740 l       .debug_ranges  00000000 
00002c31 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000310 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000321 l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000347 l       .debug_str     00000000 
00000356 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
0000073d l       .debug_str     00000000 
00000718 l       .debug_str     00000000 
0000072b l       .debug_str     00000000 
00000eaa l       .debug_str     00000000 
00000e85 l       .debug_str     00000000 
00000e97 l       .debug_str     00000000 
00002cbc l       .debug_str     00000000 
00002c47 l       .debug_str     00000000 
00002c5e l       .debug_str     00000000 
00002c75 l       .debug_str     00000000 
00002c8c l       .debug_str     00000000 
00002ca4 l       .debug_str     00000000 
00002d0c l       .debug_str     00000000 
00002ccf l       .debug_str     00000000 
00002ce3 l       .debug_str     00000000 
00002cf7 l       .debug_str     00000000 
00002d4c l       .debug_str     00000000 
00002d20 l       .debug_str     00000000 
00002d37 l       .debug_str     00000000 
00000ba7 l       .debug_str     00000000 
00000b90 l       .debug_str     00000000 
000004b7 l       .debug_str     00000000 
00002d5e l       .debug_str     00000000 
00000d55 l       .debug_str     00000000 
00000c3d l       .debug_str     00000000 
00000d5a l       .debug_str     00000000 
00000d51 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000427 l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
00000748 l       .debug_str     00000000 
00001ed4 l       .debug_str     00000000 
00001c61 l       .debug_str     00000000 
0000075c l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
000007e5 l       .debug_str     00000000 
000007dc l       .debug_str     00000000 
000007df l       .debug_str     00000000 
00000812 l       .debug_str     00000000 
00000801 l       .debug_str     00000000 
000007fc l       .debug_str     00000000 
00001d8a l       .debug_str     00000000 
00000fb6 l       .debug_str     00000000 
00001007 l       .debug_str     00000000 
00002f08 l       .debug_str     00000000 
00002f0c l       .debug_str     00000000 
00002f17 l       .debug_str     00000000 
00002d69 l       .debug_str     00000000 
00000766 l       .debug_str     00000000 
00002ddd l       .debug_str     00000000 
00002cc5 l       .debug_str     00000000 
00002df7 l       .debug_str     00000000 
00002e15 l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00002d75 l       .debug_str     00000000 
000027a4 l       .debug_str     00000000 
00000478 l       .debug_str     00000000 
0000046a l       .debug_str     00000000 
00002d85 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
000007c8 l       .debug_str     00000000 
0000078a l       .debug_str     00000000 
000007b1 l       .debug_str     00000000 
00002d92 l       .debug_str     00000000 
00000b77 l       .debug_str     00000000 
00002e11 l       .debug_str     00000000 
00002778 l       .debug_str     00000000 
00002e29 l       .debug_str     00000000 
00002da5 l       .debug_str     00000000 
00002db0 l       .debug_str     00000000 
00002dbe l       .debug_str     00000000 
00002e25 l       .debug_str     00000000 
00002dd0 l       .debug_str     00000000 
000025c7 l       .debug_str     00000000 
00002e3c l       .debug_str     00000000 
00000b24 l       .debug_str     00000000 
00002e59 l       .debug_str     00000000 
00002f36 l       .debug_str     00000000 
00002e75 l       .debug_str     00000000 
00002f40 l       .debug_str     00000000 
00001db6 l       .debug_str     00000000 
00000825 l       .debug_str     00000000 
00002e91 l       .debug_str     00000000 
00002d55 l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
00000710 l       .debug_ranges  00000000 
00000728 l       .debug_ranges  00000000 
00002ea7 l       .debug_str     00000000 
00002f75 l       .debug_str     00000000 
00002ec2 l       .debug_str     00000000 
00002ede l       .debug_str     00000000 
00002668 l       .debug_str     00000000 
00000627 l       .debug_str     00000000 
00002ef6 l       .debug_str     00000000 
00000ffe l       .debug_str     00000000 
00000fc9 l       .debug_str     00000000 
00000fd2 l       .debug_str     00000000 
00000fde l       .debug_str     00000000 
00000eb3 l       .debug_str     00000000 
000009e3 l       .debug_str     00000000 
00000fec l       .debug_str     00000000 
00002f21 l       .debug_str     00000000 
00002f4b l       .debug_str     00000000 
00002f61 l       .debug_str     00000000 
000009b8 l       .debug_frame   00000000 
f0001f40 l       .text  00000000 
f0001f62 l       .text  00000000 
00000000 l    df *ABS*  00000000 tasks.c
f0001f62 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f64 l       .text  00000000 
f0001f7a l       .text  00000000 
f0001f7c l       .text  00000000 
f0001f7e l       .text  00000000 
f0001f80 l       .text  00000000 
f0001f82 l       .text  00000000 
f0001f84 l       .text  00000000 
f0001f84 l       .text  00000000 
f0001f88 l       .text  00000000 
f0001f8c l       .text  00000000 
f0001f8c l       .text  00000000 
f0001f8e l       .text  00000000 
f0001f92 l       .text  00000000 
f0001f94 l       .text  00000000 
f0001f94 l       .text  00000000 
f0001f9a l       .text  00000000 
f0001f9a l       .text  00000000 
f0001f9c l       .text  00000000 
f0001f9c l       .text  00000000 
f0001f9e l       .text  00000000 
f0001f9e l       .text  00000000 
f0001fa0 l       .text  00000000 
f0001fa0 l       .text  00000000 
f0001fa6 l       .text  00000000 
f0001fa8 l       .text  00000000 
f0001fa8 l       .text  00000000 
f0001faa l       .text  00000000 
f0001fae l       .text  00000000 
f0001fae l       .text  00000000 
f0001fb6 l       .text  00000000 
f0001fbe l       .text  00000000 
f0001fc2 l       .text  00000000 
f0001fc6 l       .text  00000000 
f0001fc6 l       .text  00000000 
f0001fcc l       .text  00000000 
f0001fd0 l       .text  00000000 
f0001fd4 l       .text  00000000 
f0001fda l       .text  00000000 
f0001fda l       .text  00000000 
f0001fdc l       .text  00000000 
f0001fde l       .text  00000000 
f0001fde l       .text  00000000 
f0001fe0 l       .text  00000000 
f0001fe0 l       .text  00000000 
f0001fe4 l       .text  00000000 
f0001fea l       .text  00000000 
f0001fea l       .text  00000000 
f0001fee l       .text  00000000 
f0001ff0 l       .text  00000000 
f0001ff0 l       .text  00000000 
f0001ff4 l       .text  00000000 
f0001ff8 l       .text  00000000 
f0001ffc l       .text  00000000 
f0001ffc l       .text  00000000 
f0002000 l       .text  00000000 
f0002002 l       .text  00000000 
f0002002 l       .text  00000000 
f0002008 l       .text  00000000 
f0002010 l       .text  00000000 
f0002014 l       .text  00000000 
f0002018 l       .text  00000000 
f000201c l       .text  00000000 
f0002026 l       .text  00000000 
f0002026 l       .text  00000000 
f000202a l       .text  00000000 
f000202e l       .text  00000000 
f0002032 l       .text  00000000 
f0002032 l       .text  00000000 
f0002036 l       .text  00000000 
e0002074 l     O .bss   00000004 xSchedulerRunning
f0002036 l       .text  00000000 
f0002042 l       .text  00000000 
f000204a l       .text  00000000 
f000204c l       .text  00000000 
f000204c l       .text  00000000 
f0002050 l       .text  00000000 
f0002056 l       .text  00000000 
f000205a l       .text  00000000 
e0002070 l     O .bss   00000004 uxCurrentNumberOfTasks
f000205a l       .text  00000000 
f0002068 l       .text  00000000 
e00020bc l     O .bss   00000064 pxReadyTasksLists
f000206c l       .text  00000000 
f0002074 l       .text  00000000 
f0002076 l       .text  00000000 
f0002076 l       .text  00000000 
f000207a l       .text  00000000 
f000207c l       .text  00000000 
f0002080 l       .text  00000000 
f0002082 l       .text  00000000 
f0002086 l       .text  00000000 
f000208a l       .text  00000000 
f0002090 l       .text  00000000 
f0002094 l       .text  00000000 
f0002098 l       .text  00000000 
f000209c l       .text  00000000 
f00020a2 l       .text  00000000 
f00020a2 l       .text  00000000 
f00020a8 l       .text  00000000 
f00020a8 l       .text  00000000 
f00020aa l       .text  00000000 
f00020aa l       .text  00000000 
f00020ae l       .text  00000000 
e000215c l     O .bss   00000014 xDelayedTaskList1
f00020ae l       .text  00000000 
f00020ba l       .text  00000000 
e0002170 l     O .bss   00000014 xDelayedTaskList2
f00020ba l       .text  00000000 
f00020c6 l       .text  00000000 
e0002148 l     O .bss   00000014 xPendingReadyList
f00020c6 l       .text  00000000 
f00020d0 l       .text  00000000 
e0002120 l     O .bss   00000014 xTasksWaitingTermination
f00020d0 l       .text  00000000 
f00020da l       .text  00000000 
e0002134 l     O .bss   00000014 xSuspendedTaskList
f00020da l       .text  00000000 
f00020e4 l       .text  00000000 
e0002078 l     O .bss   00000004 pxDelayedTaskList
f00020e4 l       .text  00000000 
e000207c l     O .bss   00000004 pxOverflowDelayedTaskList
f00020f0 l       .text  00000000 
f00020fc l       .text  00000000 
e0002068 l     O .bss   00000004 uxTaskNumber
f00020fc l       .text  00000000 
f000210a l       .text  00000000 
e0002064 l     O .bss   00000004 uxTopReadyPriority
f0002124 l       .text  00000000 
f0002124 l       .text  00000000 
f000212c l       .text  00000000 
f0002146 l       .text  00000000 
f000214a l       .text  00000000 
f000214a l       .text  00000000 
f000214c l       .text  00000000 
f000214c l       .text  00000000 
f0002150 l       .text  00000000 
f0002152 l       .text  00000000 
f0002152 l       .text  00000000 
f0002156 l       .text  00000000 
f0002156 l       .text  00000000 
f000215e l       .text  00000000 
f0002172 l       .text  00000000 
f0002172 l       .text  00000000 
e000206c l     O .bss   00000004 uxDeletedTasksWaitingCleanUp
e000208c l     O .bss   00000004 xNextTaskUnblockTime
f0002172 l       .text  00000000 
f0002172 l       .text  00000000 
f0002172 l       .text  00000000 
f0002172 l       .text  00000000 
f000217c l       .text  00000000 
f000217e l       .text  00000000 
f0002188 l       .text  00000000 
f000218a l       .text  00000000 
f000218c l       .text  00000000 
f000218e l       .text  00000000 
f0002194 l       .text  00000000 
f0002196 l       .text  00000000 
f0002198 l       .text  00000000 
f000219a l       .text  00000000 
f000219c l       .text  00000000 
f00021a0 l       .text  00000000 
f00021a2 l       .text  00000000 
f00021a2 l       .text  00000000 
f00021a2 l       .text  00000000 
f00021a2 l       .text  00000000 
f00021a2 l       .text  00000000 
f00021a4 l       .text  00000000 
f00021a4 l       .text  00000000 
f00021a8 l       .text  00000000 
e0002080 l     O .bss   00000004 uxSchedulerSuspended
f00021b2 l       .text  00000000 
e0002084 l     O .bss   00000004 xYieldPending
f00021b4 l       .text  00000000 
f00021c2 l       .text  00000000 
f00021ce l       .text  00000000 
f00021de l       .text  00000000 
f00021e2 l       .text  00000000 
f00021ee l       .text  00000000 
f00021ee l       .text  00000000 
f000225e l       .text  00000000 
f000225e l       .text  00000000 
f0002260 l       .text  00000000 
f0002260 l       .text  00000000 
f0002264 l       .text  00000000 
f0002264 l       .text  00000000 
f000226e l       .text  00000000 
f0002272 l       .text  00000000 
f0002276 l       .text  00000000 
f000227c l       .text  00000000 
f000227e l       .text  00000000 
f0002280 l       .text  00000000 
f0002282 l       .text  00000000 
f0002286 l       .text  00000000 
f0002286 l       .text  00000000 
f000228e l       .text  00000000 
f000228e l       .text  00000000 
f000228e l       .text  00000000 
f000228e l       .text  00000000 
f000228e l       .text  00000000 
f0002290 l       .text  00000000 
f0002290 l       .text  00000000 
f0002292 l       .text  00000000 
f00022f4 l     F .text  00000082 prvIdleTask
e0002088 l     O .bss   00000004 xIdleTaskHandle
f00022b4 l       .text  00000000 
f00022b4 l       .text  00000000 
f00022b6 l       .text  00000000 
f00022b6 l       .text  00000000 
f00022ba l       .text  00000000 
f00022be l       .text  00000000 
f00022be l       .text  00000000 
f00022ca l       .text  00000000 
e0002090 l     O .bss   00000004 xTickCount
f00022d4 l       .text  00000000 
f00022e0 l       .text  00000000 
f00022e4 l       .text  00000000 
f00022e4 l       .text  00000000 
f00022ee l       .text  00000000 
f00022f4 l       .text  00000000 
f00022f4 l       .text  00000000 
f00022f4 l       .text  00000000 
f00022f4 l       .text  00000000 
f00022f4 l       .text  00000000 
f00022f6 l       .text  00000000 
f0002304 l       .text  00000000 
f0002304 l       .text  00000000 
f000232c l       .text  00000000 
f000232c l       .text  00000000 
f000232e l       .text  00000000 
f0002330 l       .text  00000000 
f0002330 l       .text  00000000 
f0002334 l       .text  00000000 
f0002338 l       .text  00000000 
f000233a l       .text  00000000 
f000233e l       .text  00000000 
f0002344 l       .text  00000000 
f0002348 l       .text  00000000 
f0002348 l       .text  00000000 
f000234e l       .text  00000000 
f000234e l       .text  00000000 
f0002352 l       .text  00000000 
f0002354 l       .text  00000000 
f0002354 l       .text  00000000 
f000235e l       .text  00000000 
f0002364 l       .text  00000000 
f0002366 l       .text  00000000 
f0002366 l       .text  00000000 
f0002368 l       .text  00000000 
f000236a l       .text  00000000 
f000236a l       .text  00000000 
f000236e l       .text  00000000 
f000236e l       .text  00000000 
f0002370 l       .text  00000000 
f0002370 l       .text  00000000 
f0002376 l       .text  00000000 
f0002376 l       .text  00000000 
f0002376 l       .text  00000000 
f0002376 l       .text  00000000 
f0002376 l       .text  00000000 
f0002376 l       .text  00000000 
f0002384 l       .text  00000000 
f0002384 l       .text  00000000 
f0002386 l       .text  00000000 
f0002386 l       .text  00000000 
f0002386 l       .text  00000000 
f0002386 l       .text  00000000 
f0002386 l       .text  00000000 
f0002388 l       .text  00000000 
f0002388 l       .text  00000000 
f0002390 l       .text  00000000 
f0002390 l       .text  00000000 
f0002390 l       .text  00000000 
f0002394 l       .text  00000000 
f0002394 l       .text  00000000 
f000239e l       .text  00000000 
f00023a0 l       .text  00000000 
f00023aa l       .text  00000000 
f00023b0 l       .text  00000000 
f00023b2 l       .text  00000000 
f00023b2 l       .text  00000000 
f00023c0 l       .text  00000000 
f00023c2 l       .text  00000000 
f00023c4 l       .text  00000000 
f00023ce l       .text  00000000 
f00023d0 l       .text  00000000 
f00023da l       .text  00000000 
f00023e2 l       .text  00000000 
f00023e4 l       .text  00000000 
f00023e4 l       .text  00000000 
f00023e6 l       .text  00000000 
f0002400 l       .text  00000000 
f0002400 l       .text  00000000 
f0002404 l       .text  00000000 
f0002404 l       .text  00000000 
f000240a l       .text  00000000 
f0002410 l       .text  00000000 
f0002412 l       .text  00000000 
f000241a l       .text  00000000 
f000241c l       .text  00000000 
f0002426 l       .text  00000000 
f0002426 l       .text  00000000 
f0002426 l       .text  00000000 
f0002426 l       .text  00000000 
f000242c l       .text  00000000 
f0002432 l       .text  00000000 
f0002434 l       .text  00000000 
f0002438 l       .text  00000000 
f000243c l       .text  00000000 
f000243e l       .text  00000000 
f0002444 l       .text  00000000 
f0002444 l       .text  00000000 
f0002448 l       .text  00000000 
f0002450 l       .text  00000000 
f0002450 l       .text  00000000 
f0002458 l       .text  00000000 
f0002468 l       .text  00000000 
f000246c l       .text  00000000 
f000246c l       .text  00000000 
f0002470 l       .text  00000000 
f0002472 l       .text  00000000 
f0002476 l       .text  00000000 
f000247a l       .text  00000000 
f000247a l       .text  00000000 
f000247c l       .text  00000000 
f000247e l       .text  00000000 
f000247e l       .text  00000000 
f000248a l       .text  00000000 
f000248c l       .text  00000000 
f000248c l       .text  00000000 
f0002494 l       .text  00000000 
f0002496 l       .text  00000000 
f00024a0 l       .text  00000000 
e0002094 l     O .bss   00000004 xPendedTicks
f00024a0 l       .text  00000000 
f00024aa l       .text  00000000 
f00024aa l       .text  00000000 
f00024ac l       .text  00000000 
f00024ac l       .text  00000000 
f00024ae l       .text  00000000 
f00024ae l       .text  00000000 
f00024b0 l       .text  00000000 
f00024b2 l       .text  00000000 
f00024b6 l       .text  00000000 
f00024b6 l       .text  00000000 
f00024ba l       .text  00000000 
f00024bc l       .text  00000000 
f00024bc l       .text  00000000 
f00024ca l       .text  00000000 
f00024ca l       .text  00000000 
f00024ca l       .text  00000000 
f00024ca l       .text  00000000 
f00024ca l       .text  00000000 
f00024ca l       .text  00000000 
f00024d4 l       .text  00000000 
f00024d6 l       .text  00000000 
f00024e6 l       .text  00000000 
f00024e6 l       .text  00000000 
f00024f0 l       .text  00000000 
f00024f4 l       .text  00000000 
f00024f4 l       .text  00000000 
f00024f8 l       .text  00000000 
f00024f8 l       .text  00000000 
f0002508 l       .text  00000000 
f000250c l       .text  00000000 
f000250c l       .text  00000000 
f0002510 l       .text  00000000 
e0002098 l     O .bss   00000004 xNumOfOverflows
f000252e l       .text  00000000 
f000252e l       .text  00000000 
f0002534 l       .text  00000000 
f0002536 l       .text  00000000 
f0002536 l       .text  00000000 
f0002540 l       .text  00000000 
f0002546 l       .text  00000000 
f0002546 l       .text  00000000 
f000254a l       .text  00000000 
f000254e l       .text  00000000 
f0002554 l       .text  00000000 
f0002556 l       .text  00000000 
f0002558 l       .text  00000000 
f000256a l       .text  00000000 
f000256a l       .text  00000000 
f0002572 l       .text  00000000 
f0002572 l       .text  00000000 
f0002574 l       .text  00000000 
f0002574 l       .text  00000000 
f0002578 l       .text  00000000 
f0002578 l       .text  00000000 
f000257e l       .text  00000000 
f0002584 l       .text  00000000 
f0002586 l       .text  00000000 
f0002586 l       .text  00000000 
f000258a l       .text  00000000 
f000258a l       .text  00000000 
f000258e l       .text  00000000 
f0002590 l       .text  00000000 
f0002596 l       .text  00000000 
f0002596 l       .text  00000000 
f0002598 l       .text  00000000 
f0002598 l       .text  00000000 
f000259a l       .text  00000000 
f000259a l       .text  00000000 
f00025a4 l       .text  00000000 
f00025a6 l       .text  00000000 
f00025a6 l       .text  00000000 
f00025aa l       .text  00000000 
f00025aa l       .text  00000000 
f00025ae l       .text  00000000 
f00025b0 l       .text  00000000 
f00025ba l       .text  00000000 
f00025ba l       .text  00000000 
f00025ca l       .text  00000000 
f00025ca l       .text  00000000 
f00025d2 l       .text  00000000 
f00025e2 l       .text  00000000 
f00025e6 l       .text  00000000 
f00025e6 l       .text  00000000 
f00025ec l       .text  00000000 
f00025ee l       .text  00000000 
f00025ee l       .text  00000000 
f00025f4 l       .text  00000000 
f00025f4 l       .text  00000000 
f00025f8 l       .text  00000000 
f00025f8 l       .text  00000000 
0000531e l       .debug_loc     00000000 
0000535a l       .debug_loc     00000000 
00005380 l       .debug_loc     00000000 
0000539b l       .debug_loc     00000000 
000053d7 l       .debug_loc     00000000 
000053fd l       .debug_loc     00000000 
00005423 l       .debug_loc     00000000 
00005454 l       .debug_loc     00000000 
000054b1 l       .debug_loc     00000000 
000054d7 l       .debug_loc     00000000 
000054fd l       .debug_loc     00000000 
00005523 l       .debug_loc     00000000 
00005549 l       .debug_loc     00000000 
0000556f l       .debug_loc     00000000 
00005595 l       .debug_loc     00000000 
000055b0 l       .debug_loc     00000000 
000055d8 l       .debug_loc     00000000 
00005614 l       .debug_loc     00000000 
00005647 l       .debug_loc     00000000 
00005662 l       .debug_loc     00000000 
0000567d l       .debug_loc     00000000 
000056a3 l       .debug_loc     00000000 
000056ea l       .debug_loc     00000000 
00005747 l       .debug_loc     00000000 
00005799 l       .debug_loc     00000000 
000057bf l       .debug_loc     00000000 
000057e5 l       .debug_loc     00000000 
00005816 l       .debug_loc     00000000 
00005831 l       .debug_loc     00000000 
00005857 l       .debug_loc     00000000 
00005872 l       .debug_loc     00000000 
0000588d l       .debug_loc     00000000 
000058a8 l       .debug_loc     00000000 
000058d0 l       .debug_loc     00000000 
000058eb l       .debug_loc     00000000 
00005906 l       .debug_loc     00000000 
00005937 l       .debug_loc     00000000 
0000595d l       .debug_loc     00000000 
0000599d l       .debug_loc     00000000 
000059ce l       .debug_loc     00000000 
000059ff l       .debug_loc     00000000 
00005a30 l       .debug_loc     00000000 
00005a4b l       .debug_loc     00000000 
00005a71 l       .debug_loc     00000000 
00005ace l       .debug_loc     00000000 
00005ae9 l       .debug_loc     00000000 
00005b3b l       .debug_loc     00000000 
00005b82 l       .debug_loc     00000000 
00005ba8 l       .debug_loc     00000000 
00005bd0 l       .debug_loc     00000000 
00005bf6 l       .debug_loc     00000000 
00005c11 l       .debug_loc     00000000 
00005c6e l       .debug_loc     00000000 
00005c94 l       .debug_loc     00000000 
00005cf1 l       .debug_loc     00000000 
00005d17 l       .debug_loc     00000000 
00005d3f l       .debug_loc     00000000 
00005d97 l       .debug_loc     00000000 
00005df9 l       .debug_loc     00000000 
00005e14 l       .debug_loc     00000000 
00005e2f l       .debug_loc     00000000 
00005e4a l       .debug_loc     00000000 
00005e65 l       .debug_loc     00000000 
00005e98 l       .debug_loc     00000000 
00005ee4 l       .debug_loc     00000000 
00005eff l       .debug_loc     00000000 
00005f1a l       .debug_loc     00000000 
00005f35 l       .debug_loc     00000000 
00005f50 l       .debug_loc     00000000 
00005f84 l       .debug_loc     00000000 
00005fc0 l       .debug_loc     00000000 
00005fdb l       .debug_loc     00000000 
00005ff6 l       .debug_loc     00000000 
00006011 l       .debug_loc     00000000 
0000602c l       .debug_loc     00000000 
00006047 l       .debug_loc     00000000 
00006062 l       .debug_loc     00000000 
0000607d l       .debug_loc     00000000 
00006098 l       .debug_loc     00000000 
000060b3 l       .debug_loc     00000000 
000060ef l       .debug_loc     00000000 
00006125 l       .debug_loc     00000000 
0000616c l       .debug_loc     00000000 
00006187 l       .debug_loc     00000000 
000061e5 l       .debug_loc     00000000 
00006200 l       .debug_loc     00000000 
00006232 l       .debug_loc     00000000 
0000625a l       .debug_loc     00000000 
00006275 l       .debug_loc     00000000 
0000629b l       .debug_loc     00000000 
000062b6 l       .debug_loc     00000000 
000062d2 l       .debug_loc     00000000 
0000630e l       .debug_loc     00000000 
0000633f l       .debug_loc     00000000 
00006372 l       .debug_loc     00000000 
0000638d l       .debug_loc     00000000 
000063a8 l       .debug_loc     00000000 
000063d9 l       .debug_loc     00000000 
0000640a l       .debug_loc     00000000 
0000643b l       .debug_loc     00000000 
0000646f l       .debug_loc     00000000 
00006495 l       .debug_loc     00000000 
000064b0 l       .debug_loc     00000000 
000064cb l       .debug_loc     00000000 
000064e6 l       .debug_loc     00000000 
0000650c l       .debug_loc     00000000 
00006527 l       .debug_loc     00000000 
00006542 l       .debug_loc     00000000 
0000655d l       .debug_loc     00000000 
00006578 l       .debug_loc     00000000 
0000659e l       .debug_loc     00000000 
000065b9 l       .debug_loc     00000000 
000065d4 l       .debug_loc     00000000 
000065fa l       .debug_loc     00000000 
00006615 l       .debug_loc     00000000 
00006630 l       .debug_loc     00000000 
0000664b l       .debug_loc     00000000 
00006666 l       .debug_loc     00000000 
000066b8 l       .debug_loc     00000000 
0000670a l       .debug_loc     00000000 
00006730 l       .debug_loc     00000000 
0000674b l       .debug_loc     00000000 
00006772 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002f84 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000850 l       .debug_ranges  00000000 
00001332 l       .debug_str     00000000 
0000308e l       .debug_str     00000000 
00003087 l       .debug_str     00000000 
00000ee5 l       .debug_str     00000000 
00002f9e l       .debug_str     00000000 
00002fb7 l       .debug_str     00000000 
000038fd l       .debug_str     00000000 
00003053 l       .debug_str     00000000 
0000305e l       .debug_str     00000000 
000011ea l       .debug_str     00000000 
00003066 l       .debug_str     00000000 
00003078 l       .debug_str     00000000 
00002fab l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00003037 l       .debug_str     00000000 
00003048 l       .debug_str     00000000 
00002fc6 l       .debug_str     00000000 
00002fdc l       .debug_str     00000000 
00002fe3 l       .debug_str     00000000 
00002fee l       .debug_str     00000000 
00002ff6 l       .debug_str     00000000 
00002fd1 l       .debug_str     00000000 
00003042 l       .debug_str     00000000 
00003002 l       .debug_str     00000000 
00003012 l       .debug_str     00000000 
0000301a l       .debug_str     00000000 
00000eba l       .debug_str     00000000 
00003033 l       .debug_str     00000000 
00003023 l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00000478 l       .debug_str     00000000 
0000046a l       .debug_str     00000000 
00003094 l       .debug_str     00000000 
000030a6 l       .debug_str     00000000 
000030b8 l       .debug_str     00000000 
000030bf l       .debug_str     00000000 
000030d1 l       .debug_str     00000000 
000030eb l       .debug_str     00000000 
000030fd l       .debug_str     00000000 
00003116 l       .debug_str     00000000 
00003129 l       .debug_str     00000000 
0000313b l       .debug_str     00000000 
0000314d l       .debug_str     00000000 
00003160 l       .debug_str     00000000 
0000316d l       .debug_str     00000000 
0000318a l       .debug_str     00000000 
000031a1 l       .debug_str     00000000 
00000ebb l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
000031b3 l       .debug_str     00000000 
000031c8 l       .debug_str     00000000 
000031d6 l       .debug_str     00000000 
000011dd l       .debug_str     00000000 
000031e6 l       .debug_str     00000000 
000031fb l       .debug_str     00000000 
00003206 l       .debug_str     00000000 
00003213 l       .debug_str     00000000 
00003223 l       .debug_str     00000000 
0000322c l       .debug_str     00000000 
00003233 l       .debug_str     00000000 
0000323c l       .debug_str     00000000 
00003247 l       .debug_str     00000000 
00003250 l       .debug_str     00000000 
000004b7 l       .debug_str     00000000 
00003259 l       .debug_str     00000000 
0000326e l       .debug_str     00000000 
00003279 l       .debug_str     00000000 
00003280 l       .debug_str     00000000 
0000328d l       .debug_str     00000000 
0000329a l       .debug_str     00000000 
000032a8 l       .debug_str     00000000 
000032b1 l       .debug_str     00000000 
00000237 l       .debug_str     00000000 
00000f32 l       .debug_str     00000000 
000032f4 l       .debug_str     00000000 
000032e5 l       .debug_str     00000000 
000032ba l       .debug_str     00000000 
000032c8 l       .debug_str     00000000 
000032d8 l       .debug_str     00000000 
00003303 l       .debug_str     00000000 
00003316 l       .debug_str     00000000 
0000332f l       .debug_str     00000000 
00000ed9 l       .debug_str     00000000 
000036ec l       .debug_str     00000000 
0000386e l       .debug_str     00000000 
000007b8 l       .debug_ranges  00000000 
000007d8 l       .debug_ranges  00000000 
00003346 l       .debug_str     00000000 
00003353 l       .debug_str     00000000 
0000335d l       .debug_str     00000000 
00003371 l       .debug_str     00000000 
00003387 l       .debug_str     00000000 
000034a1 l       .debug_str     00000000 
00003397 l       .debug_str     00000000 
000033a4 l       .debug_str     00000000 
000033aa l       .debug_str     00000000 
00000ef9 l       .debug_str     00000000 
000036f9 l       .debug_str     00000000 
000007f0 l       .debug_ranges  00000000 
000033c6 l       .debug_str     00000000 
000033d3 l       .debug_str     00000000 
000034b3 l       .debug_str     00000000 
000011d7 l       .debug_str     00000000 
00003707 l       .debug_str     00000000 
00003713 l       .debug_str     00000000 
00003721 l       .debug_str     00000000 
00003739 l       .debug_str     00000000 
000034cc l       .debug_str     00000000 
00003741 l       .debug_str     00000000 
000034de l       .debug_str     00000000 
0000374a l       .debug_str     00000000 
000034f7 l       .debug_str     00000000 
00003760 l       .debug_str     00000000 
0000376e l       .debug_str     00000000 
0000377d l       .debug_str     00000000 
00003793 l       .debug_str     00000000 
00003508 l       .debug_str     00000000 
000037a9 l       .debug_str     00000000 
00000ec6 l       .debug_str     00000000 
000037b8 l       .debug_str     00000000 
000037c6 l       .debug_str     00000000 
000011b9 l       .debug_str     00000000 
000033e2 l       .debug_str     00000000 
00003515 l       .debug_str     00000000 
000037d2 l       .debug_str     00000000 
00003521 l       .debug_str     00000000 
000037e0 l       .debug_str     00000000 
00000f94 l       .debug_str     00000000 
00001278 l       .debug_str     00000000 
000033f9 l       .debug_str     00000000 
00003534 l       .debug_str     00000000 
00003540 l       .debug_str     00000000 
00003419 l       .debug_str     00000000 
00003552 l       .debug_str     00000000 
000037f7 l       .debug_str     00000000 
00003807 l       .debug_str     00000000 
0000380e l       .debug_str     00000000 
00003561 l       .debug_str     00000000 
0000381c l       .debug_str     00000000 
0000382c l       .debug_str     00000000 
0000383c l       .debug_str     00000000 
00000808 l       .debug_ranges  00000000 
00000820 l       .debug_ranges  00000000 
00003574 l       .debug_str     00000000 
00003843 l       .debug_str     00000000 
00003586 l       .debug_str     00000000 
0000359f l       .debug_str     00000000 
00000f05 l       .debug_str     00000000 
0000384a l       .debug_str     00000000 
0000342b l       .debug_str     00000000 
000035b6 l       .debug_str     00000000 
00003857 l       .debug_str     00000000 
00003865 l       .debug_str     00000000 
000035c5 l       .debug_str     00000000 
0000386d l       .debug_str     00000000 
00003876 l       .debug_str     00000000 
00003881 l       .debug_str     00000000 
0000388c l       .debug_str     00000000 
00003896 l       .debug_str     00000000 
000035e6 l       .debug_str     00000000 
000038a0 l       .debug_str     00000000 
000038b0 l       .debug_str     00000000 
000035f8 l       .debug_str     00000000 
00003608 l       .debug_str     00000000 
000038bf l       .debug_str     00000000 
0000390d l       .debug_str     00000000 
0000343b l       .debug_str     00000000 
0000361e l       .debug_str     00000000 
000038cb l       .debug_str     00000000 
000038e1 l       .debug_str     00000000 
0000363d l       .debug_str     00000000 
0000365c l       .debug_str     00000000 
000038ed l       .debug_str     00000000 
00003675 l       .debug_str     00000000 
000038fc l       .debug_str     00000000 
00000838 l       .debug_ranges  00000000 
00003697 l       .debug_str     00000000 
00003464 l       .debug_str     00000000 
00003447 l       .debug_str     00000000 
00003497 l       .debug_str     00000000 
0000348d l       .debug_str     00000000 
0000346e l       .debug_str     00000000 
0000347d l       .debug_str     00000000 
000036ac l       .debug_str     00000000 
0000390c l       .debug_str     00000000 
0000391a l       .debug_str     00000000 
000036c1 l       .debug_str     00000000 
000036d2 l       .debug_str     00000000 
000034c1 l       .debug_str     00000000 
00000c50 l       .debug_str     00000000 
00000c41 l       .debug_str     00000000 
00000abc l       .debug_frame   00000000 
f0002172 l       .text  00000000 
f00021a2 l       .text  00000000 
f000228e l       .text  00000000 
f00022f4 l       .text  00000000 
f0002376 l       .text  00000000 
f0002386 l       .text  00000000 
f00024ca l       .text  00000000 
f00025f8 l       .text  00000000 
00000000 l    df *ABS*  00000000 list.c
f00025f8 l       .text  00000000 
f00025f8 l       .text  00000000 
f00025f8 l       .text  00000000 
f00025f8 l       .text  00000000 
f00025fc l       .text  00000000 
f0002600 l       .text  00000000 
f0002602 l       .text  00000000 
f0002604 l       .text  00000000 
f0002606 l       .text  00000000 
f000260a l       .text  00000000 
f000260c l       .text  00000000 
f000260c l       .text  00000000 
f000260c l       .text  00000000 
f000260c l       .text  00000000 
f000260c l       .text  00000000 
f000260c l       .text  00000000 
f0002610 l       .text  00000000 
f0002612 l       .text  00000000 
f0002612 l       .text  00000000 
f0002612 l       .text  00000000 
f0002612 l       .text  00000000 
f0002612 l       .text  00000000 
f0002612 l       .text  00000000 
f0002614 l       .text  00000000 
f0002616 l       .text  00000000 
f0002618 l       .text  00000000 
f0002618 l       .text  00000000 
f000261a l       .text  00000000 
f000261c l       .text  00000000 
f000261e l       .text  00000000 
f0002620 l       .text  00000000 
f0002624 l       .text  00000000 
f0002626 l       .text  00000000 
f000262a l       .text  00000000 
f000262c l       .text  00000000 
f0002630 l       .text  00000000 
f0002632 l       .text  00000000 
f0002634 l       .text  00000000 
f0002634 l       .text  00000000 
0000678d l       .debug_loc     00000000 
000067a8 l       .debug_loc     00000000 
000067c3 l       .debug_loc     00000000 
000067de l       .debug_loc     00000000 
000067f9 l       .debug_loc     00000000 
0000681f l       .debug_loc     00000000 
0000683a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003927 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000978 l       .debug_ranges  00000000 
00003037 l       .debug_str     00000000 
00003048 l       .debug_str     00000000 
00002fc6 l       .debug_str     00000000 
00002fdc l       .debug_str     00000000 
00002fe3 l       .debug_str     00000000 
00002fee l       .debug_str     00000000 
00002ff6 l       .debug_str     00000000 
00002fd1 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00003042 l       .debug_str     00000000 
00003002 l       .debug_str     00000000 
00003012 l       .debug_str     00000000 
0000301a l       .debug_str     00000000 
00000eba l       .debug_str     00000000 
00003033 l       .debug_str     00000000 
00003023 l       .debug_str     00000000 
00003387 l       .debug_str     00000000 
00003807 l       .debug_str     00000000 
0000335d l       .debug_str     00000000 
00003940 l       .debug_str     00000000 
000033d3 l       .debug_str     00000000 
00003947 l       .debug_str     00000000 
0000343b l       .debug_str     00000000 
00003955 l       .debug_str     00000000 
00003967 l       .debug_str     00000000 
000033c6 l       .debug_str     00000000 
00003972 l       .debug_str     00000000 
000030b8 l       .debug_str     00000000 
00000dfc l       .debug_frame   00000000 
f000260c l       .text  00000000 
f0002612 l       .text  00000000 
f0002634 l       .text  00000000 
00000000 l    df *ABS*  00000000 heap_1.c
f0002634 l       .text  00000000 
f0002634 l       .text  00000000 
f0002634 l       .text  00000000 
f0002636 l       .text  00000000 
f000263e l       .text  00000000 
f0002640 l       .text  00000000 
f0002640 l       .text  00000000 
f0002644 l       .text  00000000 
f0002648 l       .text  00000000 
f000264c l       .text  00000000 
f000264e l       .text  00000000 
f0002650 l       .text  00000000 
f0002652 l       .text  00000000 
f0002654 l       .text  00000000 
e000209c l     O .bss   00000004 pvPortMalloc.pucAlignedHeap
f0002654 l       .text  00000000 
f000265e l       .text  00000000 
f0002660 l       .text  00000000 
f0002660 l       .text  00000000 
f0002664 l       .text  00000000 
f0002664 l       .text  00000000 
f000266e l       .text  00000000 
f0002674 l       .text  00000000 
e00020a0 l     O .bss   00000004 xNextFreeByte
f0002676 l       .text  00000000 
f0002682 l       .text  00000000 
f0002686 l       .text  00000000 
f0002692 l       .text  00000000 
f0002696 l       .text  00000000 
f0002696 l       .text  00000000 
f0002698 l       .text  00000000 
f000269a l       .text  00000000 
f000269a l       .text  00000000 
f000269c l       .text  00000000 
f00026a0 l       .text  00000000 
f00026a2 l       .text  00000000 
f00026a2 l       .text  00000000 
f00026a4 l       .text  00000000 
f00026a4 l       .text  00000000 
f00026a8 l       .text  00000000 
f00026a8 l       .text  00000000 
f00026aa l       .text  00000000 
f00026b0 l       .text  00000000 
f00026b6 l       .text  00000000 
f00026b6 l       .text  00000000 
f00026b6 l       .text  00000000 
f00026b6 l       .text  00000000 
f00026b6 l       .text  00000000 
f00026b6 l       .text  00000000 
f00026b8 l       .text  00000000 
f00026b8 l       .text  00000000 
00006855 l       .debug_loc     00000000 
00006891 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003981 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
000009a8 l       .debug_ranges  00000000 
00003346 l       .debug_str     00000000 
000039ad l       .debug_str     00000000 
000039f5 l       .debug_str     00000000 
00003a01 l       .debug_str     00000000 
00000478 l       .debug_str     00000000 
0000046a l       .debug_str     00000000 
000039bc l       .debug_str     00000000 
000004b7 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
0000342b l       .debug_str     00000000 
00003552 l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
0000119c l       .debug_str     00000000 
00003353 l       .debug_str     00000000 
00003a0a l       .debug_str     00000000 
000039ca l       .debug_str     00000000 
000039e0 l       .debug_str     00000000 
00000e60 l       .debug_frame   00000000 
f00026b6 l       .text  00000000 
f00026b8 l       .text  00000000 
00000000 l    df *ABS*  00000000 test_hooks_default.c
f00026b8 l       .text  00000000 
f00026b8 l       .text  00000000 
f00026b8 l       .text  00000000 
f00026b8 l       .text  00000000 
f00026bc l       .text  00000000 
f00026bc l       .text  00000000 
f00026bc l       .text  00000000 
f00026bc l       .text  00000000 
f00026bc l       .text  00000000 
f00026bc l       .text  00000000 
f00026c0 l       .text  00000000 
f00026c0 l       .text  00000000 
00000000 l       .debug_str     00000000 
00003a0d l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
000009d0 l       .debug_ranges  00000000 
00001032 l       .debug_str     00000000 
0000104d l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00000ec0 l       .debug_frame   00000000 
f00026bc l       .text  00000000 
f00026c0 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
f00026c0 l       .text  00000000 
f00026c0 l       .text  00000000 
f00026c0 l       .text  00000000 
f00026c0 l       .text  00000000 
f00026c4 l       .text  00000000 
f00026c4 l       .text  00000000 
f00026c6 l       .text  00000000 
f00026c6 l       .text  00000000 
00006918 l       .debug_loc     00000000 
00006933 l       .debug_loc     00000000 
0000695a l       .debug_loc     00000000 
00006981 l       .debug_loc     00000000 
0000699d l       .debug_loc     00000000 
000069ca l       .debug_loc     00000000 
000069f1 l       .debug_loc     00000000 
00006a18 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004669 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000a00 l       .debug_ranges  00000000 
00000ba7 l       .debug_str     00000000 
00000b90 l       .debug_str     00000000 
00004686 l       .debug_str     00000000 
00004697 l       .debug_str     00000000 
000046a1 l       .debug_str     00000000 
000046ac l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
000046cc l       .debug_str     00000000 
00000db6 l       .debug_str     00000000 
00001c93 l       .debug_str     00000000 
00003fd4 l       .debug_str     00000000 
00003fcd l       .debug_str     00000000 
000046b9 l       .debug_str     00000000 
00001196 l       .debug_str     00000000 
000046dd l       .debug_str     00000000 
00000f30 l       .debug_frame   00000000 
f00026c6 l       .text  00000000 
00000000 l    df *ABS*  00000000 ibex.c
f00026c6 l       .text  00000000 
f00026c6 l       .text  00000000 
f00026c6 l       .text  00000000 
f00026c6 l       .text  00000000 
f00026ca l       .text  00000000 
f00026ca l       .text  00000000 
f00026cc l       .text  00000000 
f00026cc l       .text  00000000 
f00026cc l       .text  00000000 
f00026cc l       .text  00000000 
f00026cc l       .text  00000000 
f00026cc l       .text  00000000 
f00026d0 l       .text  00000000 
f00026d0 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d6 l       .text  00000000 
f00026d6 l       .text  00000000 
f00026d8 l       .text  00000000 
f00026d8 l       .text  00000000 
00006a34 l       .debug_loc     00000000 
00006a4f l       .debug_loc     00000000 
00006a6a l       .debug_loc     00000000 
00006a85 l       .debug_loc     00000000 
00006aac l       .debug_loc     00000000 
00006ad3 l       .debug_loc     00000000 
00006aef l       .debug_loc     00000000 
00006b0a l       .debug_loc     00000000 
00006b26 l       .debug_loc     00000000 
00006b4d l       .debug_loc     00000000 
00006b74 l       .debug_loc     00000000 
00006b9a l       .debug_loc     00000000 
00006bc1 l       .debug_loc     00000000 
00006be8 l       .debug_loc     00000000 
00006c04 l       .debug_loc     00000000 
00006c1f l       .debug_loc     00000000 
00006c46 l       .debug_loc     00000000 
00006c6d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000046ef l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000a58 l       .debug_ranges  00000000 
00000ba7 l       .debug_str     00000000 
00000b90 l       .debug_str     00000000 
000019a2 l       .debug_str     00000000 
00001aac l       .debug_str     00000000 
00001992 l       .debug_str     00000000 
00001983 l       .debug_str     00000000 
00001aa7 l       .debug_str     00000000 
0000470c l       .debug_str     00000000 
00004686 l       .debug_str     00000000 
000046ac l       .debug_str     00000000 
000046a1 l       .debug_str     00000000 
00004697 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
0000471c l       .debug_str     00000000 
00000dae l       .debug_str     00000000 
00002d69 l       .debug_str     00000000 
0000474a l       .debug_str     00000000 
00004733 l       .debug_str     00000000 
00000a28 l       .debug_ranges  00000000 
0000475d l       .debug_str     00000000 
00000a40 l       .debug_ranges  00000000 
0000473b l       .debug_str     00000000 
0000472e l       .debug_str     00000000 
00003fd4 l       .debug_str     00000000 
00001c93 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00000f90 l       .debug_frame   00000000 
f00026cc l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d8 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
f00026d8 l       .text  00000000 
f00026d8 l       .text  00000000 
f00026d8 l       .text  00000000 
f00026d8 l       .text  00000000 
f00026e0 l       .text  00000000 
f00026e4 l       .text  00000000 
f00026e4 l       .text  00000000 
f00026e8 l       .text  00000000 
f00026e8 l       .text  00000000 
f00026ec l       .text  00000000 
f00026ec l       .text  00000000 
f00026f8 l       .text  00000000 
f00026fa l       .text  00000000 
f00026fa l       .text  00000000 
f0002700 l       .text  00000000 
f0002700 l       .text  00000000 
f0002704 l       .text  00000000 
f0002706 l       .text  00000000 
f000270a l       .text  00000000 
f000270a l       .text  00000000 
f000270c l       .text  00000000 
f000270c l       .text  00000000 
f000270e l       .text  00000000 
f000270e l       .text  00000000 
f0002716 l       .text  00000000 
f000271a l       .text  00000000 
f000271c l       .text  00000000 
f0002720 l       .text  00000000 
f0002724 l       .text  00000000 
f0002724 l       .text  00000000 
f0002728 l       .text  00000000 
f0002728 l       .text  00000000 
f000272c l       .text  00000000 
f000272e l       .text  00000000 
f000272e l       .text  00000000 
f0002732 l       .text  00000000 
f0002732 l       .text  00000000 
f0002734 l       .text  00000000 
f0002734 l       .text  00000000 
f0002736 l       .text  00000000 
f0002736 l       .text  00000000 
f000273a l       .text  00000000 
f000273a l       .text  00000000 
f000273e l       .text  00000000 
f0002740 l       .text  00000000 
f0002746 l       .text  00000000 
f0002746 l       .text  00000000 
f000274a l       .text  00000000 
f000274e l       .text  00000000 
f0002756 l       .text  00000000 
f0002756 l       .text  00000000 
f0002758 l       .text  00000000 
f0002758 l       .text  00000000 
f000275a l       .text  00000000 
f000275a l       .text  00000000 
f0002760 l       .text  00000000 
f0002760 l       .text  00000000 
f0002760 l       .text  00000000 
f0002760 l       .text  00000000 
f0002760 l       .text  00000000 
f0002764 l       .text  00000000 
f0002764 l       .text  00000000 
f0002768 l       .text  00000000 
f0002768 l       .text  00000000 
f0002770 l       .text  00000000 
f0002770 l       .text  00000000 
f0002774 l       .text  00000000 
f0002778 l       .text  00000000 
f0002778 l       .text  00000000 
f000277a l       .text  00000000 
f000277a l       .text  00000000 
f000277e l       .text  00000000 
f000277e l       .text  00000000 
f0002782 l       .text  00000000 
f0002782 l       .text  00000000 
f0002784 l       .text  00000000 
f0002786 l       .text  00000000 
f0002788 l       .text  00000000 
f0002788 l       .text  00000000 
f000278c l       .text  00000000 
f0002790 l       .text  00000000 
f00027a0 l       .text  00000000 
f00027a0 l       .text  00000000 
f00027a4 l       .text  00000000 
f00027a4 l       .text  00000000 
f00027a6 l       .text  00000000 
f00027a6 l       .text  00000000 
f00027a8 l       .text  00000000 
f00027a8 l       .text  00000000 
f00027ac l       .text  00000000 
f00027ac l       .text  00000000 
f00027b2 l       .text  00000000 
f00027b6 l       .text  00000000 
f00027b6 l       .text  00000000 
f00027ba l       .text  00000000 
f00027be l       .text  00000000 
f00027c0 l       .text  00000000 
f00027c2 l       .text  00000000 
f00027c2 l       .text  00000000 
f00027c2 l       .text  00000000 
f00027c2 l       .text  00000000 
f00027c2 l       .text  00000000 
f00027c6 l       .text  00000000 
f00027c6 l       .text  00000000 
f00027ca l       .text  00000000 
f00027ca l       .text  00000000 
f00027d2 l       .text  00000000 
f00027d6 l       .text  00000000 
f00027da l       .text  00000000 
f00027dc l       .text  00000000 
f00027de l       .text  00000000 
f00027de l       .text  00000000 
f00027e2 l       .text  00000000 
f00027e6 l       .text  00000000 
f00027e6 l       .text  00000000 
f00027e8 l       .text  00000000 
f00027ea l       .text  00000000 
f00027ec l       .text  00000000 
f00027f2 l       .text  00000000 
f00027f2 l       .text  00000000 
f00027f4 l       .text  00000000 
f00027f8 l       .text  00000000 
f0002804 l       .text  00000000 
f0002812 l       .text  00000000 
f0002812 l       .text  00000000 
f0002816 l       .text  00000000 
f0002818 l       .text  00000000 
f0002818 l       .text  00000000 
f000281c l       .text  00000000 
f0002820 l       .text  00000000 
f0002820 l       .text  00000000 
f0002824 l       .text  00000000 
f0002828 l       .text  00000000 
f000282c l       .text  00000000 
f0002830 l       .text  00000000 
f0002834 l       .text  00000000 
f0002834 l       .text  00000000 
f0002838 l       .text  00000000 
f000283c l       .text  00000000 
f000283e l       .text  00000000 
f000283e l       .text  00000000 
f0002840 l       .text  00000000 
f0002844 l       .text  00000000 
f0002844 l       .text  00000000 
f000284c l       .text  00000000 
f0002850 l       .text  00000000 
f0002850 l       .text  00000000 
f0002854 l       .text  00000000 
f0002858 l       .text  00000000 
f000285c l       .text  00000000 
f000285e l       .text  00000000 
f0002862 l       .text  00000000 
f0002862 l       .text  00000000 
f0002866 l       .text  00000000 
f0002866 l       .text  00000000 
f000286a l       .text  00000000 
f000286c l       .text  00000000 
f000286c l       .text  00000000 
f0002870 l       .text  00000000 
f0002870 l       .text  00000000 
f0002870 l       .text  00000000 
f0002870 l       .text  00000000 
f0002870 l       .text  00000000 
f0002874 l       .text  00000000 
f0002874 l       .text  00000000 
f0002878 l       .text  00000000 
f0002878 l       .text  00000000 
f0002880 l       .text  00000000 
f0002880 l       .text  00000000 
f0002884 l       .text  00000000 
f0002886 l       .text  00000000 
f000288a l       .text  00000000 
f000288a l       .text  00000000 
f000288c l       .text  00000000 
f000288c l       .text  00000000 
f0002890 l       .text  00000000 
f0002890 l       .text  00000000 
f0002896 l       .text  00000000 
f0002896 l       .text  00000000 
f000289a l       .text  00000000 
f000289a l       .text  00000000 
f00028a2 l       .text  00000000 
f00028a6 l       .text  00000000 
f00028a6 l       .text  00000000 
f00028a8 l       .text  00000000 
f00028ac l       .text  00000000 
f00028ac l       .text  00000000 
f00028ae l       .text  00000000 
f00028b0 l       .text  00000000 
f00028b0 l       .text  00000000 
f00028b8 l       .text  00000000 
f00028b8 l       .text  00000000 
f00028bc l       .text  00000000 
f00028bc l       .text  00000000 
f00028c6 l       .text  00000000 
f00028ca l       .text  00000000 
f00028ca l       .text  00000000 
f00028ce l       .text  00000000 
f00028ce l       .text  00000000 
f00028d2 l       .text  00000000 
f00028d6 l       .text  00000000 
f00028d6 l       .text  00000000 
f00028da l       .text  00000000 
f00028de l       .text  00000000 
f00028de l       .text  00000000 
f00028e0 l       .text  00000000 
f00028e4 l       .text  00000000 
f00028e4 l       .text  00000000 
f00028e8 l       .text  00000000 
f00028ec l       .text  00000000 
f00028f0 l       .text  00000000 
f00028f4 l       .text  00000000 
f00028f8 l       .text  00000000 
f00028fa l       .text  00000000 
f00028fa l       .text  00000000 
f00028fe l       .text  00000000 
f00028fe l       .text  00000000 
f0002900 l       .text  00000000 
f0002902 l       .text  00000000 
f0002902 l       .text  00000000 
f000290a l       .text  00000000 
f000290e l       .text  00000000 
f000290e l       .text  00000000 
f0002910 l       .text  00000000 
f0002914 l       .text  00000000 
f0002914 l       .text  00000000 
f0002916 l       .text  00000000 
f0002918 l       .text  00000000 
f0002918 l       .text  00000000 
f000291a l       .text  00000000 
f000291a l       .text  00000000 
f000291e l       .text  00000000 
f000291e l       .text  00000000 
f0002920 l       .text  00000000 
f0002920 l       .text  00000000 
f0002924 l       .text  00000000 
f0002924 l       .text  00000000 
f0002926 l       .text  00000000 
f0002926 l       .text  00000000 
f000292a l       .text  00000000 
f000292a l       .text  00000000 
f000292c l       .text  00000000 
f000292c l       .text  00000000 
f000292e l       .text  00000000 
f000292e l       .text  00000000 
f0002930 l       .text  00000000 
f0002930 l       .text  00000000 
00006c89 l       .debug_loc     00000000 
00006caf l       .debug_loc     00000000 
00006cd5 l       .debug_loc     00000000 
00006cfb l       .debug_loc     00000000 
00006d21 l       .debug_loc     00000000 
00006d40 l       .debug_loc     00000000 
00006d5f l       .debug_loc     00000000 
00006d85 l       .debug_loc     00000000 
00006da0 l       .debug_loc     00000000 
00006de9 l       .debug_loc     00000000 
00006e0f l       .debug_loc     00000000 
00006e31 l       .debug_loc     00000000 
00006e4c l       .debug_loc     00000000 
00006e67 l       .debug_loc     00000000 
00006e82 l       .debug_loc     00000000 
00006e9d l       .debug_loc     00000000 
00006eb8 l       .debug_loc     00000000 
00006ed3 l       .debug_loc     00000000 
00006f23 l       .debug_loc     00000000 
00006f3e l       .debug_loc     00000000 
00006f59 l       .debug_loc     00000000 
00006f7b l       .debug_loc     00000000 
00006f96 l       .debug_loc     00000000 
00006fb1 l       .debug_loc     00000000 
00006fcc l       .debug_loc     00000000 
00006fe7 l       .debug_loc     00000000 
00007002 l       .debug_loc     00000000 
00007021 l       .debug_loc     00000000 
00007040 l       .debug_loc     00000000 
00007066 l       .debug_loc     00000000 
00007081 l       .debug_loc     00000000 
000070ca l       .debug_loc     00000000 
000070f0 l       .debug_loc     00000000 
0000710b l       .debug_loc     00000000 
00007126 l       .debug_loc     00000000 
00007141 l       .debug_loc     00000000 
0000715c l       .debug_loc     00000000 
00007177 l       .debug_loc     00000000 
00007192 l       .debug_loc     00000000 
000071ad l       .debug_loc     00000000 
000071cc l       .debug_loc     00000000 
000071eb l       .debug_loc     00000000 
00007206 l       .debug_loc     00000000 
0000724d l       .debug_loc     00000000 
00007268 l       .debug_loc     00000000 
00007283 l       .debug_loc     00000000 
000072a9 l       .debug_loc     00000000 
000072c4 l       .debug_loc     00000000 
000072df l       .debug_loc     00000000 
000072fa l       .debug_loc     00000000 
00007315 l       .debug_loc     00000000 
00007330 l       .debug_loc     00000000 
00007356 l       .debug_loc     00000000 
00007371 l       .debug_loc     00000000 
00007397 l       .debug_loc     00000000 
000073bd l       .debug_loc     00000000 
000073da l       .debug_loc     00000000 
00007435 l       .debug_loc     00000000 
00007450 l       .debug_loc     00000000 
00007476 l       .debug_loc     00000000 
0000749c l       .debug_loc     00000000 
000074b7 l       .debug_loc     00000000 
000074dd l       .debug_loc     00000000 
0000753a l       .debug_loc     00000000 
00007555 l       .debug_loc     00000000 
00007570 l       .debug_loc     00000000 
000075cd l       .debug_loc     00000000 
000075ea l       .debug_loc     00000000 
00007605 l       .debug_loc     00000000 
0000764c l       .debug_loc     00000000 
00007667 l       .debug_loc     00000000 
00007682 l       .debug_loc     00000000 
0000769d l       .debug_loc     00000000 
000076b8 l       .debug_loc     00000000 
000076d3 l       .debug_loc     00000000 
000076f9 l       .debug_loc     00000000 
00007714 l       .debug_loc     00000000 
0000772f l       .debug_loc     00000000 
0000774a l       .debug_loc     00000000 
00007765 l       .debug_loc     00000000 
00007792 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004772 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00000b28 l       .debug_ranges  00000000 
0000478e l       .debug_str     00000000 
00004798 l       .debug_str     00000000 
000047a2 l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
0000046a l       .debug_str     00000000 
00000478 l       .debug_str     00000000 
00000adb l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
000047ac l       .debug_str     00000000 
00004871 l       .debug_str     00000000 
0000487b l       .debug_str     00000000 
00002643 l       .debug_str     00000000 
000047c6 l       .debug_str     00000000 
000047d1 l       .debug_str     00000000 
000004b7 l       .debug_str     00000000 
000004b5 l       .debug_str     00000000 
000047dd l       .debug_str     00000000 
000047ef l       .debug_str     00000000 
000047ff l       .debug_str     00000000 
000047b4 l       .debug_str     00000000 
0000480f l       .debug_str     00000000 
000003f3 l       .debug_str     00000000 
000003fb l       .debug_str     00000000 
00001aae l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000bce l       .debug_str     00000000 
00001c61 l       .debug_str     00000000 
00002138 l       .debug_str     00000000 
0000483b l       .debug_str     00000000 
00000b20 l       .debug_str     00000000 
00004840 l       .debug_str     00000000 
00004846 l       .debug_str     00000000 
000047f3 l       .debug_str     00000000 
000003cd l       .debug_str     00000000 
00004803 l       .debug_str     00000000 
00000ab8 l       .debug_ranges  00000000 
00000bc9 l       .debug_str     00000000 
00000aa0 l       .debug_ranges  00000000 
000026bc l       .debug_str     00000000 
0000484b l       .debug_str     00000000 
00004852 l       .debug_str     00000000 
00000ad0 l       .debug_ranges  00000000 
0000482c l       .debug_str     00000000 
0000485a l       .debug_str     00000000 
0000485e l       .debug_str     00000000 
00004862 l       .debug_str     00000000 
00004867 l       .debug_str     00000000 
0000486c l       .debug_str     00000000 
00004876 l       .debug_str     00000000 
00004833 l       .debug_str     00000000 
00001c9e l       .debug_str     00000000 
00002372 l       .debug_str     00000000 
00004881 l       .debug_str     00000000 
00000ae8 l       .debug_ranges  00000000 
00004886 l       .debug_str     00000000 
00004819 l       .debug_str     00000000 
00000b77 l       .debug_str     00000000 
00002379 l       .debug_str     00000000 
00000b00 l       .debug_ranges  00000000 
00000ae5 l       .debug_str     00000000 
0000232b l       .debug_str     00000000 
00000bb0 l       .debug_str     00000000 
00000bb8 l       .debug_str     00000000 
0000075c l       .debug_str     00000000 
00000ba7 l       .debug_str     00000000 
00000b90 l       .debug_str     00000000 
0000102c l       .debug_frame   00000000 
f0002760 l       .text  00000000 
f00027c2 l       .text  00000000 
f0002870 l       .text  00000000 
f0002930 l       .text  00000000 
00000000 l    df *ABS*  00000000 math.c
f0002930 l       .text  00000000 
f0002930 l       .text  00000000 
f0002930 l       .text  00000000 
f0002932 l       .text  00000000 
f0002938 l       .text  00000000 
f0002944 l       .text  00000000 
f000294c l       .text  00000000 
f000294c l       .text  00000000 
f0002954 l       .text  00000000 
f0002976 l       .text  00000000 
f000297a l       .text  00000000 
f000297a l       .text  00000000 
f000297e l       .text  00000000 
f0002982 l       .text  00000000 
f0002982 l       .text  00000000 
f0002986 l       .text  00000000 
f0002998 l       .text  00000000 
f000299c l       .text  00000000 
f00029ac l       .text  00000000 
f00029ae l       .text  00000000 
f00029ae l       .text  00000000 
f00029be l       .text  00000000 
f00029c0 l       .text  00000000 
f00029c0 l       .text  00000000 
f00029c4 l       .text  00000000 
f00029c4 l       .text  00000000 
f00029c8 l       .text  00000000 
f00029c8 l       .text  00000000 
f00029ca l       .text  00000000 
f00029d2 l       .text  00000000 
f00029d4 l       .text  00000000 
f00029d6 l       .text  00000000 
f00029e0 l       .text  00000000 
f00029e0 l       .text  00000000 
000077b2 l       .debug_loc     00000000 
000077ca l       .debug_loc     00000000 
000077f1 l       .debug_loc     00000000 
00007822 l       .debug_loc     00000000 
00007875 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000488e l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00002d69 l       .debug_str     00000000 
00003ff8 l       .debug_str     00000000 
000002e1 l       .debug_str     00000000 
000048a8 l       .debug_str     00000000 
00001b56 l       .debug_str     00000000 
000048b0 l       .debug_str     00000000 
000048b4 l       .debug_str     00000000 
000003cd l       .debug_str     00000000 
00000ba7 l       .debug_str     00000000 
00000b90 l       .debug_str     00000000 
000004b7 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
000010f0 l       .debug_frame   00000000 
f00029e0 l       .text  00000000 
00000000 l    df *ABS*  00000000 device_fpga_cw310.c
000068d0 l       .debug_loc     00000000 
000068fd l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003a43 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
000009e8 l       .debug_ranges  00000000 
00003a6a l       .debug_str     00000000 
00003a76 l       .debug_str     00000000 
00000e5f l       .debug_str     00000000 
00000e17 l       .debug_str     00000000 
00000e24 l       .debug_str     00000000 
00000e38 l       .debug_str     00000000 
00000e49 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
00003a84 l       .debug_str     00000000 
00000ba7 l       .debug_str     00000000 
00000b90 l       .debug_str     00000000 
00003a95 l       .debug_str     00000000 
00003aa5 l       .debug_str     00000000 
00003ac3 l       .debug_str     00000000 
00003ada l       .debug_str     00000000 
00003aea l       .debug_str     00000000 
00003afa l       .debug_str     00000000 
00003b08 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00003b16 l       .debug_str     00000000 
00003b2b l       .debug_str     00000000 
00003b42 l       .debug_str     00000000 
00000adb l       .debug_str     00000000 
00003b5b l       .debug_str     00000000 
00003b77 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
00003f9a l       .debug_str     00000000 
00003b86 l       .debug_str     00000000 
00003b8f l       .debug_str     00000000 
00003b9d l       .debug_str     00000000 
00003bbe l       .debug_str     00000000 
00003bd4 l       .debug_str     00000000 
00003bf0 l       .debug_str     00000000 
00003c05 l       .debug_str     00000000 
00003c21 l       .debug_str     00000000 
00003c3d l       .debug_str     00000000 
00003c51 l       .debug_str     00000000 
00003c65 l       .debug_str     00000000 
00003c7a l       .debug_str     00000000 
00003c93 l       .debug_str     00000000 
00003ca7 l       .debug_str     00000000 
00003cbb l       .debug_str     00000000 
00003ccb l       .debug_str     00000000 
00003cde l       .debug_str     00000000 
00003cf8 l       .debug_str     00000000 
00003d0f l       .debug_str     00000000 
00003d29 l       .debug_str     00000000 
00003d45 l       .debug_str     00000000 
00003d61 l       .debug_str     00000000 
00003d78 l       .debug_str     00000000 
00003d8e l       .debug_str     00000000 
00003da6 l       .debug_str     00000000 
00003dbe l       .debug_str     00000000 
00003dd7 l       .debug_str     00000000 
00003df0 l       .debug_str     00000000 
00003e09 l       .debug_str     00000000 
00003e22 l       .debug_str     00000000 
00003e41 l       .debug_str     00000000 
00003e5f l       .debug_str     00000000 
00003e79 l       .debug_str     00000000 
00003e92 l       .debug_str     00000000 
00003eae l       .debug_str     00000000 
00003ecc l       .debug_str     00000000 
00003ee8 l       .debug_str     00000000 
00003f04 l       .debug_str     00000000 
00003f20 l       .debug_str     00000000 
00003f37 l       .debug_str     00000000 
00003f50 l       .debug_str     00000000 
00003f66 l       .debug_str     00000000 
00003f85 l       .debug_str     00000000 
00003fcd l       .debug_str     00000000 
00000db6 l       .debug_str     00000000 
00003fdb l       .debug_str     00000000 
00003ff5 l       .debug_str     00000000 
00003fa4 l       .debug_str     00000000 
00003fb6 l       .debug_str     00000000 
00003fc1 l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
00000ef4 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 top_earlgrey.c
00000000 l       .debug_str     00000000 
00003ffa l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00004024 l       .debug_str     00000000 
00001950 l       .debug_str     00000000 
000018e8 l       .debug_str     00000000 
0000148f l       .debug_str     00000000 
000014b1 l       .debug_str     00000000 
000014d1 l       .debug_str     00000000 
000014f1 l       .debug_str     00000000 
00001511 l       .debug_str     00000000 
00001531 l       .debug_str     00000000 
00001550 l       .debug_str     00000000 
00001574 l       .debug_str     00000000 
00001593 l       .debug_str     00000000 
000015b2 l       .debug_str     00000000 
000015d1 l       .debug_str     00000000 
000015f3 l       .debug_str     00000000 
00001615 l       .debug_str     00000000 
00001637 l       .debug_str     00000000 
0000165e l       .debug_str     00000000 
00001681 l       .debug_str     00000000 
000016a4 l       .debug_str     00000000 
000016c5 l       .debug_str     00000000 
000016e9 l       .debug_str     00000000 
00001711 l       .debug_str     00000000 
00001736 l       .debug_str     00000000 
0000175c l       .debug_str     00000000 
00001781 l       .debug_str     00000000 
000017a4 l       .debug_str     00000000 
000017c8 l       .debug_str     00000000 
000017e7 l       .debug_str     00000000 
00001806 l       .debug_str     00000000 
00001825 l       .debug_str     00000000 
00001846 l       .debug_str     00000000 
00001866 l       .debug_str     00000000 
0000188b l       .debug_str     00000000 
000018aa l       .debug_str     00000000 
000018c9 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
0000404f l       .debug_str     00000000 
00004649 l       .debug_str     00000000 
0000462b l       .debug_str     00000000 
00004071 l       .debug_str     00000000 
00004092 l       .debug_str     00000000 
000040b3 l       .debug_str     00000000 
000040d4 l       .debug_str     00000000 
000040f5 l       .debug_str     00000000 
00004115 l       .debug_str     00000000 
0000413a l       .debug_str     00000000 
0000415a l       .debug_str     00000000 
0000417a l       .debug_str     00000000 
0000419a l       .debug_str     00000000 
000041bd l       .debug_str     00000000 
000041e0 l       .debug_str     00000000 
00004203 l       .debug_str     00000000 
00004225 l       .debug_str     00000000 
00004249 l       .debug_str     00000000 
0000426d l       .debug_str     00000000 
0000428f l       .debug_str     00000000 
000042b4 l       .debug_str     00000000 
000042d9 l       .debug_str     00000000 
000042fe l       .debug_str     00000000 
00004327 l       .debug_str     00000000 
0000434d l       .debug_str     00000000 
0000436f l       .debug_str     00000000 
00004394 l       .debug_str     00000000 
000043bb l       .debug_str     00000000 
000043e1 l       .debug_str     00000000 
0000440b l       .debug_str     00000000 
00004430 l       .debug_str     00000000 
00004450 l       .debug_str     00000000 
00004472 l       .debug_str     00000000 
00004491 l       .debug_str     00000000 
000044b1 l       .debug_str     00000000 
000044d1 l       .debug_str     00000000 
000044f1 l       .debug_str     00000000 
00004513 l       .debug_str     00000000 
00004534 l       .debug_str     00000000 
0000455a l       .debug_str     00000000 
0000457a l       .debug_str     00000000 
0000459a l       .debug_str     00000000 
000045c2 l       .debug_str     00000000 
000045e5 l       .debug_str     00000000 
0000460b l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_boot_measurements.c
00000000 l       .debug_str     00000000 
00001f22 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00001f69 l       .debug_str     00000000 
00001f83 l       .debug_str     00000000 
00001f7b l       .debug_str     00000000 
00001c67 l       .debug_str     00000000 
00001c52 l       .debug_str     00000000 
00002133 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_epmp_state.c
00000000 l       .debug_str     00000000 
00001f97 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00001fd7 l       .debug_str     00000000 
00001ff9 l       .debug_str     00000000 
00001fe2 l       .debug_str     00000000 
00001fe9 l       .debug_str     00000000 
00001ff1 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
00002006 l       .debug_str     00000000 
00000099 l       .debug_str     00000000 
00002044 l       .debug_str     00000000 
0000208a l       .debug_str     00000000 
00002051 l       .debug_str     00000000 
00002065 l       .debug_str     00000000 
0000205c l       .debug_str     00000000 
00002071 l       .debug_str     00000000 
0000207d l       .debug_str     00000000 
00002084 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
00000b9a l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
f000154e g     F .text  0000008a rand_testutils_init
f007b000 g       *ABS*  00000000 _non_volatile_scratch_start
f0000cd0 g     F .text  0000001c dif_spi_host_output_set_enabled
f0079800 g       *ABS*  00000000 _non_volatile_counter_3_end
f0079000 g       *ABS*  00000000 _non_volatile_counter_3_start
f0001392  w    F .text  00000020 ottf_instr_misaligned_fault_handler
f00014b6  w    F .text  00000018 ottf_external_nmi_handler
e00027c4 g       .data  00000000 __global_pointer$
e0002050 g     O .bss   00000004 ottf_plic
e0000000 g     O .static_critical       00000020 boot_measurements
f0001392  w    F .text  00000020 ottf_instr_access_fault_handler
f0002870 g     F .text  000000c0 memrchr
f0001f40 g     F .text  00000022 dif_uart_byte_send_polled
f0001392  w    F .text  00000020 ottf_user_ecall_handler
f00029e0 g       .shutdown      00000000 _text_end
f0001292 g     F .text  0000001a irq_external_ctrl
f00012d4 g     F .text  00000072 ottf_generic_fault_print
d0010000 g       .manifest      00000000 _chip_info_end
e0002060 g     O .bss   00000004 pxCurrentTCB
f00014ce  w    F .text  00000038 ottf_internal_isr
f00015d8 g     F .text  0000000e dif_rv_core_ibex_init
f00036f8 g     O .rodata        000002e8 top_earlgrey_plic_interrupt_for_peripheral
f00036e0 g     O .rodata        00000008 kClockFreqPeripheralHz
f0000810 g     F .text  00000114 read_sfdp
f000152e g     F .text  00000020 dif_rv_plic_irq_complete
f0001264 g     F .text  0000001c xPortStartScheduler
f00026d8 g     F .text  00000088 memcpy
f00013e6  w    F .text  000000d0 ottf_external_isr
f0001392  w    F .text  00000020 ottf_illegal_instr_fault_handler
f00026b6 g     F .text  00000002 vPortFree
f00026bc  w    F .text  00000004 manufacturer_post_test_hook
00005000 g       *ABS*  00000000 _non_volatile_scratch_size
e0002048 g       .bss   00000000 _bss_start
f00012ac g     F .text  00000016 irq_timer_ctrl
00000400 g       *ABS*  00000000 _manifest_code_start
00000000 g       *ABS*  00000000 __DYNAMIC
f00026d2 g     F .text  00000006 ibex_mepc_read
f007b000 g       *ABS*  00000000 _non_volatile_counter_0_end
f0000400 g       .vectors       00000000 _text_start
f0001392  w    F .text  00000020 ottf_load_store_fault_handler
f000260c g     F .text  00000006 vListInitialiseItem
e0002184 g     O .freertos.heap 00008000 ucHeap
000029e0 g       *ABS*  00000000 _manifest_code_end
f0000400 g     F .vectors       00000080 _ottf_interrupt_vector
f0000548 g       .init_array    00000000 _init_array_end
f0001738 g     F .text  00000034 base_log_internal_dv
f0003a64 g       *ABS*  00000000 _data_init_end
f0001e84 g     F .text  000000bc dif_uart_configure
f00026c0 g     F .text  00000006 abort
e0000020 g     O .static_critical       00000054 epmp_state
f0002634 g     F .text  00000082 pvPortMalloc
f00025f8 g     F .text  00000014 vListInitialise
f0000a38 g     F .text  000000be dif_spi_host_fifo_write
e0002184 g       .bss   00000000 _bss_end
f00026b8  w    F .text  00000004 manufacturer_pre_test_hook
f0000f0e g     F .text  00000052 ottf_machine_ecall_handler
f00039e0 g       *ABS*  00000000 _data_init_start
f0001280 g     F .text  00000012 irq_global_ctrl
f00011f0 g     F .text  0000003a vApplicationMallocFailedHook
f0000480 g     F .crt   00000068 _ottf_start
e0001fc4 g     O .data  00000084 status_codes
00001fc4 g       *ABS*  00000000 _static_critical_size
f00012c2 g     F .text  00000012 irq_software_ctrl
f000050c g     F .crt   0000003a crt_section_copy
f00036e8 g     O .rodata        00000008 kUartBaudrate
f00027c2 g     F .text  000000ae memchr
f00011ee g     F .text  00000002 test_coverage_send_buffer
00000800 g       *ABS*  00000000 _non_volatile_counter_size
00080000 g       *ABS*  00000000 _ottf_size
f00013ca  w    F .text  00000018 ottf_timer_isr
f0000d24 g     F .text  000001ea dif_spi_host_transaction
f0002376 g     F .text  00000010 vTaskSuspendAll
e0001fc4 g       .data  00000000 _data_start
f0000af6 g     F .text  00000158 dif_spi_host_fifo_read
f007a800 g       *ABS*  00000000 _non_volatile_counter_0_start
f0002612 g     F .text  00000022 uxListRemove
f0080000 g       .freertos.heap 00000000 _non_volatile_scratch_end
f007a000 g       *ABS*  00000000 _non_volatile_counter_2_end
f00014b6  w    F .text  00000018 ottf_load_integrity_error_handler
f0079800 g       *ABS*  00000000 _non_volatile_counter_2_start
f00021a2 g     F .text  000000ec vTaskSwitchContext
f0001392  w    F .text  00000020 ottf_breakpoint_handler
00004000 g       *ABS*  00000000 _stack_size
f0000608 g     F .text  00000050 handler_exception
f0001812 g     F .text  0000048e base_vfprintf
e0002048 g       .data  00000000 _data_end
f000122a g     F .text  0000003a vApplicationStackOverflowHook
f0001770 g     F .text  00000016 base_uart_stdout
f0000754 g     F .text  00000052 handler_irq_internal
f00017f8 g     F .text  0000001a base_vprintf
f00013b2  w    F .text  00000018 ottf_software_isr
f0000a38  w    F .text  000000be spi_host_fifo_write_alias
e0000074 g     O .static_critical       00001f50 sec_mmio_ctx
f0002760 g     F .text  00000062 memset
f00026c6 g     F .text  00000006 ibex_mcause_read
f00006ac g     F .text  00000052 handler_irq_timer
e0020000 g       .manifest      00000000 _stack_end
e00020a4 g     O .bss   00000018 rand_testutils_rng_ctx
e0002184 g       .freertos.heap 00000000 _freertos_heap_start
f00013e2  w    F .text  00000004 ottf_flow_control_isr
e001c000 g       *ABS*  00000000 _stack_start
f00004e8 g     F .crt   00000024 crt_section_clear
f0002386 g     F .text  00000144 xTaskResumeAll
f0000658 g     F .text  00000052 handler_irq_software
f00036d0 g     O .rodata        00000004 uxTopUsedPriority
f000228e g     F .text  00000066 vTaskStartScheduler
00010000 g       *ABS*  00000000 _dv_log_offset
f0000548 g     F .text  00000052 xPortStartFirstTask
f0001346  w    F .text  0000004c ottf_exception_handler
d000ff80 g       *ABS*  00000000 _chip_info_start
f0000af6  w    F .text  00000158 spi_host_fifo_read_alias
f0000924 g     F .text  00000106 test_main
f0000c4e g     F .text  00000082 dif_spi_host_configure
f00024ca g     F .text  0000012e xTaskIncrementTick
f00036f0 g     O .rodata        00000004 kDeviceTestStatusAddress
f0002b80 g     O .rodata        00000008 kOttfTestConfig
00000800 g       *ABS*  00000000 _epmp_reset_rx_size
f0002930 g     F .text  000000b0 udiv64_slow
f00017c6 g     F .text  00000032 base_printf
f0001506 g     F .text  00000028 dif_rv_plic_irq_claim
f00036f4 g     O .rodata        00000004 kDeviceLogBypassUartAddress
f0001f62 g     F .text  00000210 xTaskCreate
f00036dc g     O .rodata        00000004 kDeviceType
f00026cc g     F .text  00000006 ibex_mtval_read
f007a800 g       *ABS*  00000000 _non_volatile_counter_1_end
00000480 g       *ABS*  00000000 _manifest_entry_point
f0000f60 g     F .text  0000012e _ottf_main
00000080 g       *ABS*  00000000 _chip_info_size
f0002172 g     F .text  00000030 vTaskExitCritical
f000059c g     F .text  00000024 pxPortInitialiseStack
f0001e04 g     F .text  00000072 status_extract
f0000a2a g     F .text  0000000e dif_spi_host_init
00000100 g       *ABS*  00000000 _non_volatile_counter_flash_words
f0001e76 g     F .text  0000000e dif_uart_init
f007a000 g       *ABS*  00000000 _non_volatile_counter_1_start
f0000000 g       .manifest      00000000 _ottf_start_address
f0000548 g       .init_array    00000000 _init_array_start
f00015e6 g     F .text  000000b0 test_status_set
f0001696 g     F .text  000000a2 base_log_internal_core
f00007a8 g     F .text  00000068 ottf_isr_exit
f0000700 g     F .text  00000052 handler_irq_external



Disassembly of section .vectors:

f0000400 <_ottf_interrupt_vector>:
_ottf_interrupt_vector():
f0000400:       2080006f                j       f0000608 <handler_exception>
f0000404:       c0001073                unimp
f0000408:       c0001073                unimp
f000040c:       24c0006f                j       f0000658 <handler_irq_software>
f0000410:       c0001073                unimp
f0000414:       c0001073                unimp
f0000418:       c0001073                unimp
f000041c:       2900006f                j       f00006ac <handler_irq_timer>
f0000420:       c0001073                unimp
f0000424:       c0001073                unimp
f0000428:       c0001073                unimp
f000042c:       2d40006f                j       f0000700 <handler_irq_external>
f0000430:       c0001073                unimp
f0000434:       c0001073                unimp
f0000438:       c0001073                unimp
f000043c:       c0001073                unimp
f0000440:       c0001073                unimp
f0000444:       c0001073                unimp
f0000448:       c0001073                unimp
f000044c:       c0001073                unimp
f0000450:       c0001073                unimp
f0000454:       c0001073                unimp
f0000458:       c0001073                unimp
f000045c:       c0001073                unimp
f0000460:       c0001073                unimp
f0000464:       c0001073                unimp
f0000468:       c0001073                unimp
f000046c:       c0001073                unimp
f0000470:       c0001073                unimp
f0000474:       c0001073                unimp
f0000478:       c0001073                unimp
f000047c:       2d80006f                j       f0000754 <handler_irq_internal>

Disassembly of section .crt:

f0000480 <_ottf_start>:
_ottf_start():
f0000480:       f0002197                auipc   gp,0xf0002
f0000484:       34418193                addi    gp,gp,836 # e00027c4 <__global_pointer$>
f0000488:       f0020117                auipc   sp,0xf0020
f000048c:       b6810113                addi    sp,sp,-1176 # e001fff0 <_stack_start+0x3ff0>
f0000490:       00000297                auipc   t0,0x0
f0000494:       f7128293                addi    t0,t0,-143 # f0000401 <_ottf_interrupt_vector+0x1>
f0000498:       30529073                csrw    mtvec,t0
f000049c:       f0002517                auipc   a0,0xf0002
f00004a0:       b2850513                addi    a0,a0,-1240 # e0001fc4 <status_codes>
f00004a4:       88418593                addi    a1,gp,-1916 # e0002048 <uart0>
f00004a8:       00003617                auipc   a2,0x3
f00004ac:       53860613                addi    a2,a2,1336 # f00039e0 <_data_init_start>
f00004b0:       28b1                    jal     f000050c <crt_section_copy>
f00004b2:       f0002517                auipc   a0,0xf0002
f00004b6:       b9650513                addi    a0,a0,-1130 # e0002048 <uart0>
f00004ba:       f0002597                auipc   a1,0xf0002
f00004be:       cca58593                addi    a1,a1,-822 # e0002184 <ucHeap>
f00004c2:       201d                    jal     f00004e8 <crt_section_clear>
f00004c4:       00000417                auipc   s0,0x0
f00004c8:       08440413                addi    s0,s0,132 # f0000548 <xPortStartFirstTask>
f00004cc:       00000497                auipc   s1,0x0
f00004d0:       07c48493                addi    s1,s1,124 # f0000548 <xPortStartFirstTask>
f00004d4:       00947863                bgeu    s0,s1,f00004e4 <init_array_loop_end>

f00004d8 <init_array_loop>:
f00004d8:       /-> 00042283            lw      t0,0(s0)
f00004dc:       |   9282                        jalr    t0
f00004de:       |   0411                        addi    s0,s0,4
f00004e0:       \-- fe946ce3            bltu    s0,s1,f00004d8 <init_array_loop>

f00004e4 <init_array_loop_end>:
f00004e4:       27d0006f                j       f0000f60 <_ottf_main>

f00004e8 <crt_section_clear>:
crt_section_clear():
/proc/self/cwd/sw/device/lib/crt/crt.S:41
  .global crt_section_clear
  .type crt_section_clear, @function
crt_section_clear:

  // Check that start is before end.
  bgeu a0, a1, .L_clear_nothing
f00004e8:       /-------- 00b57e63              bgeu    a0,a1,f0000504 <crt_section_clear+0x1c>
/proc/self/cwd/sw/device/lib/crt/crt.S:44

  // Check that start and end are word aligned.
  or   t0, a0, a1
f00004ec:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:45
  andi t0, t0, 0x3
f00004f0:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:46
  bnez t0, .L_clear_error
f00004f4:       |  /----- 00029b63              bnez    t0,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:51

.L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
f00004f8:       |  |  /-> 00052023              sw      zero,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:52
  addi a0, a0, 4
f00004fc:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:53
  bltu a0, a1, .L_clear_loop
f00004fe:       |  |  \-- feb56de3              bltu    a0,a1,f00004f8 <crt_section_clear+0x10>
/proc/self/cwd/sw/device/lib/crt/crt.S:54
  ret
f0000502:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:59

.L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_clear_error
f0000504:       \--+----X 00b51363              bne     a0,a1,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:60
  ret
f0000508:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:63

.L_clear_error:
  unimp
f000050a:          \----> 0000                  unimp

f000050c <crt_section_copy>:
crt_section_copy():
/proc/self/cwd/sw/device/lib/crt/crt.S:95
  .global crt_section_copy
  .type crt_section_copy, @function
crt_section_copy:

  // Check that start is before end.
  bgeu a0, a1, .L_copy_nothing
f000050c:       /-------- 02b57963              bgeu    a0,a1,f000053e <crt_section_copy+0x32>
/proc/self/cwd/sw/device/lib/crt/crt.S:98

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
f0000510:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:99
  or   t0, t0, a2
f0000514:       |         00c2e2b3              or      t0,t0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:100
  andi t0, t0, 0x3
f0000518:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:101
  bnez t0, .L_copy_error
f000051c:       |  /----- 02029463              bnez    t0,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:118
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
f0000520:       |  |      40c502b3              sub     t0,a0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:119
  sub  t1, a1, a0           // end - start
f0000524:       |  |      40a58333              sub     t1,a1,a0
/proc/self/cwd/sw/device/lib/crt/crt.S:120
  bltu t0, t1, .L_copy_error
f0000528:       |  +----- 0062ee63              bltu    t0,t1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:125

.L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
f000052c:       |  |  /-> 00062283              lw      t0,0(a2)
/proc/self/cwd/sw/device/lib/crt/crt.S:126
  addi a2, a2, 4
f0000530:       |  |  |   0611                  addi    a2,a2,4
/proc/self/cwd/sw/device/lib/crt/crt.S:127
  sw   t0, 0(a0)
f0000532:       |  |  |   00552023              sw      t0,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:128
  addi a0, a0, 4
f0000536:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:129
  bltu a0, a1, .L_copy_loop
f0000538:       |  |  \-- feb56ae3              bltu    a0,a1,f000052c <crt_section_copy+0x20>
/proc/self/cwd/sw/device/lib/crt/crt.S:130
  ret
f000053c:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:135

.L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_copy_error
f000053e:       \--+----X 00b51363              bne     a0,a1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:136
  ret
f0000542:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:139

.L_copy_error:
  unimp
f0000544:          \----> 0000                  unimp

Disassembly of section .text:

f0000548 <xPortStartFirstTask>:
xPortStartFirstTask():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:18
  .global xPortStartFirstTask
  .type xPortStartFirstTask, @function
xPortStartFirstTask:
  // Load the stack pointer for the current TCB (just going to clobber sp here
  // since we are setting it here anyway).
  lw  sp, pxCurrentTCB
f0000548:       f0002117                auipc   sp,0xf0002
f000054c:       b1812103                lw      sp,-1256(sp) # e0002060 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:19
  lw  sp, 0(sp)
f0000550:       4102                    lw      sp,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:23

  // NOTE: for starting the FreeRTOS scheduler, the exception return address is
  // used as the function return address. See pxPortInitialiseStack below.
  lw  ra, 0(sp)
f0000552:       4082                    lw      ra,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:26

  // Restore registers initialized on task start.
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000554:       4332                    lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:27
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000556:       43c2                    lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:28
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000558:       4452                    lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:29
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f000055a:       44e2                    lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:30
  lw   a0,  7 * OTTF_WORD_SIZE(sp) // task parameters (pvParameters)
f000055c:       4572                    lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:31
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f000055e:       5582                    lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:32
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000560:       5612                    lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:33
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000562:       56a2                    lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:34
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000564:       5732                    lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:35
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000566:       57c2                    lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:36
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000568:       5852                    lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:37
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f000056a:       58e2                    lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:38
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f000056c:       5972                    lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:39
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f000056e:       4986                    lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:40
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000570:       4a16                    lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:41
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000572:       4aa6                    lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:42
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000574:       4b36                    lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:43
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000576:       4bc6                    lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:44
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000578:       4c56                    lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:45
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f000057a:       4ce6                    lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:46
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f000057c:       4d76                    lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:47
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f000057e:       5d86                    lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:48
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000580:       5e16                    lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:49
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000582:       5ea6                    lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:50
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000584:       5f36                    lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:51
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000586:       5fc6                    lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:55

  // Initialize t0 to the value of MSTATUS with global interrupts enabled, which
  // is required because this returns with ret, not eret.
  lw t0, 29 * OTTF_WORD_SIZE(sp) // Load the MSTATUS state from the stack.
f0000588:       52d6                    lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:56
  ori t0, t0, 1<<3               // Set MIE field.
f000058a:       0082e293                ori     t0,t0,8
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:57
  csrw mstatus, t0               // Ibex interrupts enabled from here!
f000058e:       30029073                csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:60

  // Restore t0 register from the stack (after using it to manipulate MSTATUS).
  lw t0, 2 * OTTF_WORD_SIZE(sp)
f0000592:       42a2                    lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:63

  // Update the stack pointer (shrinking the stack).
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000594:       07810113                addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:65

  ret
f0000598:       8082                    ret
f000059a:       0001                    nop

f000059c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:133
  .balign 4
  .global pxPortInitialiseStack
  .type pxPortInitialiseStack, @function
pxPortInitialiseStack:
  // Setup the MSTATUS register.
  csrr t0, mstatus
f000059c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:137
  // Ensure interrupts are disabled when the stack is restored within an ISR.
  // Required when a task is created after the scheduler has been started,
  // otherwise interrupts would be disabled anyway.
  andi t0, t0, ~0x8
f00005a0:       ff72f293                andi    t0,t0,-9
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:139
  // Generate the value 0x1880, to set the MPIE and MPP bits in MSTATUS.
  li t1, 0x188 << 4
f00005a4:       6309                    lui     t1,0x2
f00005a6:       88030313                addi    t1,t1,-1920 # 1880 <_epmp_reset_rx_size+0x1080>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:140
  or t0, t0, t1
f00005aa:       0062e2b3                or      t0,t0,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:143

  // Setup the stack frame detailed above (a0 holds the task stack pointer).
  addi a0, a0, -OTTF_CONTEXT_SIZE
f00005ae:       f8850513                addi    a0,a0,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:145
  // Push MSTATUS onto the stack.
  sw t0, 29 * OTTF_WORD_SIZE(a0)
f00005b2:       06552a23                sw      t0,116(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:148

  // Push task parameters (pvParameters that is in x12/a2, on the stack.
  sw a2, 7 * OTTF_WORD_SIZE(a0)
f00005b6:       cd50                    sw      a2,28(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:150
  // Push 0 for the portTASK_RETURN_ADDRESS for now.
  sw zero, 1 * OTTF_WORD_SIZE(a0)
f00005b8:       00052223                sw      zero,4(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:155
  // Push the pointer to the task's entry point (pxCode) onto the stack. This
  // will be loaded into either ra (in xPortStartFirstTask) or mepc (in
  // freertosIrqExit), so that when ret/mret is called control flow will be
  // transferred accordingly.
  sw a1, 0(a0)
f00005bc:       c10c                    sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:157

  ret
f00005be:       8082                    ret

f00005c0 <compute_mepc_on_synchronous_irq>:
compute_mepc_on_synchronous_irq():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:32
   * below will cause another exception.
   */
  .balign 4
  .type compute_mepc_on_synchronous_irq, @function
compute_mepc_on_synchronous_irq:
  csrr t0, mepc
f00005c0:           341022f3            csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:33
  csrr t1, mcause
f00005c4:           34202373            csrr    t1,mcause
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:34
  li t2, 0x01
f00005c8:           4385                        li      t2,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:35
  bne t1, t2, .L_load_mepc
f00005ca:       /-- 00731363            bne     t1,t2,f00005d0 <compute_mepc_on_synchronous_irq+0x10>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:36
  ret
f00005ce:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:38
.L_load_mepc:
  lh t2, 0(t0)
f00005d0:       \-> 00029383            lh      t2,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:39
  li t1, 0x3
f00005d4:           430d                        li      t1,3
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:40
  and t3, t2, t1
f00005d6:           0063fe33            and     t3,t2,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:41
  beq t3, t1, .L_32bit_trap_instr
f00005da:       /-- 006e0463            beq     t3,t1,f00005e2 <compute_mepc_on_synchronous_irq+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:42
  addi t0, t0, OTTF_HALF_WORD_SIZE
f00005de:       |   0289                        addi    t0,t0,2
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:43
  ret
f00005e0:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:45
.L_32bit_trap_instr:
  addi t0, t0, OTTF_WORD_SIZE
f00005e2:       \-> 0291                        addi    t0,t0,4
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:46
  ret
f00005e4:           8082                        ret
f00005e6:           0001                        nop

f00005e8 <save_current_sp_to_tcb>:
save_current_sp_to_tcb():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:61
   * exception, if we attempt to perform a store to said address.
   */
  .balign 4
  .type save_current_sp_to_tcb, @function
save_current_sp_to_tcb:
  la t0, kOttfTestConfig
f00005e8:           00002297            auipc   t0,0x2
f00005ec:           59828293            addi    t0,t0,1432 # f0002b80 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:62
  lb t1, 0(t0)
f00005f0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:63
  beqz t1, .L_skip_sp_save
f00005f4:       /-- 00030863            beqz    t1,f0000604 <save_current_sp_to_tcb+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:64
  lw t2, pxCurrentTCB
f00005f8:       |   f0002397            auipc   t2,0xf0002
f00005fc:       |   a683a383            lw      t2,-1432(t2) # e0002060 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:65
  sw sp, 0(t2)
f0000600:       |   0023a023            sw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:67
.L_skip_sp_save:
  ret
f0000604:       \-> 8082                        ret
f0000606:           0001                        nop

f0000608 <handler_exception>:
handler_exception():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:80
  .balign 4
  .global handler_exception
  .type handler_exception, @function
handler_exception:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000608:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:81
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000060c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:82
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000060e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:83
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000610:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:84
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000612:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:85
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000614:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:86
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000616:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:87
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000618:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:88
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000061a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:89
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000061c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:90
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000061e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:91
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000620:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:92
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000622:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:93
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000624:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:94
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000626:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:95
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000628:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:96
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000062a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:97
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000062c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:98
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000062e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:99
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000630:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:100
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000632:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:101
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000634:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:102
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000636:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:103
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000638:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:104
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000063a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:105
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000063c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:106
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000063e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:107
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000640:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:108
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000642:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:111

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000644:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:112
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000648:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:116

  // Save MEPC to the stack after updating it to the next instruction (since
  // this is a synchronous IRQ).
  jal compute_mepc_on_synchronous_irq
f000064a:       3f9d                    jal     f00005c0 <compute_mepc_on_synchronous_irq>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:117
  sw t0, 0(sp)
f000064c:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:121

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000064e:       3f69                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:124

  // Jump to the exception handler.
  jal ottf_exception_handler
f0000650:       4f7000ef                jal     ra,f0001346 <ottf_exception_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:127

  // Return from ISR.
  j ottf_isr_exit
f0000654:       1540006f                j       f00007a8 <ottf_isr_exit>

f0000658 <handler_irq_software>:
handler_irq_software():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:140
  .balign 4
  .global handler_irq_software
  .type handler_irq_software, @function
handler_irq_software:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000658:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:141
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000065c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:142
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000065e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:143
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000660:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:144
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000662:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:145
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000664:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:146
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000666:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:147
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000668:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:148
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000066a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:149
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000066c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:150
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000066e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:151
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000670:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:152
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000672:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:153
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000674:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:154
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000676:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:155
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000678:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:156
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000067a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:157
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000067c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:158
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000067e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:159
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000680:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:160
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000682:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:161
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000684:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:162
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000686:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:163
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000688:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:164
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000068a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:165
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000068c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:166
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000068e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:167
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000690:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:168
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000692:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:171

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000694:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:172
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000698:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:176

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f000069a:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:177
  sw t0, 0(sp)
f000069e:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:181

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006a0:       37a1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:184

  // Jump to the software ISR.
  jal ottf_software_isr
f00006a2:       511000ef                jal     ra,f00013b2 <ottf_software_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:187

  // Return from ISR.
  j ottf_isr_exit
f00006a6:       1020006f                j       f00007a8 <ottf_isr_exit>
f00006aa:       0001                    nop

f00006ac <handler_irq_timer>:
handler_irq_timer():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:200
  .balign 4
  .global handler_irq_timer
  .type handler_irq_timer, @function
handler_irq_timer:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f00006ac:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:201
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f00006b0:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:202
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f00006b2:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:203
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f00006b4:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:204
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f00006b6:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:205
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f00006b8:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:206
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f00006ba:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:207
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f00006bc:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:208
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f00006be:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:209
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f00006c0:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:210
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f00006c2:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:211
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f00006c4:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:212
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f00006c6:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:213
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f00006c8:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:214
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f00006ca:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:215
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f00006cc:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:216
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f00006ce:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:217
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f00006d0:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:218
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f00006d2:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:219
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f00006d4:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:220
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f00006d6:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:221
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f00006d8:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:222
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f00006da:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:223
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f00006dc:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:224
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f00006de:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:225
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f00006e0:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:226
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f00006e2:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:227
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f00006e4:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:228
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f00006e6:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:231

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f00006e8:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:232
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f00006ec:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:236

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f00006ee:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:237
  sw t0, 0(sp)
f00006f2:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:241

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006f4:       3dd5                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:244

  // Jump to timer ISR.
  jal ottf_timer_isr
f00006f6:       4d5000ef                jal     ra,f00013ca <ottf_timer_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:247

  // Return from ISR.
  j ottf_isr_exit
f00006fa:       0ae0006f                j       f00007a8 <ottf_isr_exit>
f00006fe:       0001                    nop

f0000700 <handler_irq_external>:
handler_irq_external():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:260
  .balign 4
  .global handler_irq_external
  .type handler_irq_external, @function
handler_irq_external:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000700:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:261
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000704:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:262
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f0000706:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:263
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000708:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:264
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000070a:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:265
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f000070c:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:266
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f000070e:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:267
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000710:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:268
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000712:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:269
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000714:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:270
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000716:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:271
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000718:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:272
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000071a:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:273
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f000071c:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:274
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f000071e:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:275
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000720:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:276
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000722:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:277
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000724:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:278
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000726:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:279
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000728:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:280
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000072a:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:281
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f000072c:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:282
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f000072e:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:283
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000730:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:284
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000732:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:285
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000734:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:286
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000736:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:287
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000738:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:288
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000073a:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:291

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f000073c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:292
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000740:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:296

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000742:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:297
  sw t0, 0(sp)
f0000746:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:301

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f0000748:       3545                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:304

  // Jump to external ISR.
  jal ottf_external_isr
f000074a:       49d000ef                jal     ra,f00013e6 <ottf_external_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:307

  // Return from ISR.
  j ottf_isr_exit
f000074e:       05a0006f                j       f00007a8 <ottf_isr_exit>
f0000752:       0001                    nop

f0000754 <handler_irq_internal>:
handler_irq_internal():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:320
  .balign 4
  .global handler_irq_internal
  .type handler_irq_internal, @function
handler_irq_internal:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000754:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:321
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000758:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:322
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000075a:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:323
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f000075c:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:324
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000075e:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:325
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000760:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:326
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000762:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:327
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000764:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:328
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000766:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:329
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000768:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:330
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000076a:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:331
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f000076c:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:332
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000076e:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:333
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000770:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:334
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000772:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:335
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000774:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:336
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000776:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:337
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000778:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:338
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000077a:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:339
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f000077c:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:340
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000077e:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:341
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000780:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:342
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000782:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:343
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000784:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:344
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000786:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:345
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000788:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:346
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000078a:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:347
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f000078c:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:348
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000078e:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:351

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000790:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:352
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000794:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:356

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000796:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:357
  sw t0, 0(sp)
f000079a:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:361

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000079c:       35b1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:364

  // Jump to the internal ISR.
  jal ottf_internal_isr
f000079e:       531000ef                jal     ra,f00014ce <ottf_internal_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:367

  // Return from ISR.
  j ottf_isr_exit
f00007a2:       0060006f                j       f00007a8 <ottf_isr_exit>
f00007a6:       0001                    nop

f00007a8 <ottf_isr_exit>:
ottf_isr_exit():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:384
  // Load the stack pointer for the current task control block (TCB), only if
  // the `enable_concurrency` flag is set in the test configuration struct,
  // meaning a test is run as a FreeRTOS task, where each task maintains its own
  // stack. Otherwise, the test is run on bare-metal, and there is no TCB, and
  // only a single stack/stack pointer.
  la t0, kOttfTestConfig
f00007a8:           00002297            auipc   t0,0x2
f00007ac:           3d828293            addi    t0,t0,984 # f0002b80 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:385
  lb t1, 0(t0)
f00007b0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:386
  beqz t1, .L_skip_sp_restore
f00007b4:       /-- 00030863            beqz    t1,f00007c4 <ottf_isr_exit+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:387
  lw  t2, pxCurrentTCB
f00007b8:       |   f0002397            auipc   t2,0xf0002
f00007bc:       |   8a83a383            lw      t2,-1880(t2) # e0002060 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:388
  lw  sp, 0(t2)
f00007c0:       |   0003a103            lw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:392
.L_skip_sp_restore:

  // Load the correct MEPC for the next instruction in the current task.
  lw t0, 0(sp)
f00007c4:       \-> 4282                        lw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:393
  csrw mepc, t0
f00007c6:           34129073            csrw    mepc,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:396

  // Load MSTATUS for the MPIE bit.
  lw  t0, 29 * OTTF_WORD_SIZE(sp)
f00007ca:           52d6                        lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:397
  csrw mstatus, t0
f00007cc:           30029073            csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:400

  // Restore all registers from the stack.
  lw   ra,  1 * OTTF_WORD_SIZE(sp)
f00007d0:           4092                        lw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:401
  lw   t0,  2 * OTTF_WORD_SIZE(sp)
f00007d2:           42a2                        lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:402
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f00007d4:           4332                        lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:403
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f00007d6:           43c2                        lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:404
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f00007d8:           4452                        lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:405
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f00007da:           44e2                        lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:406
  lw   a0,  7 * OTTF_WORD_SIZE(sp)
f00007dc:           4572                        lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:407
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f00007de:           5582                        lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:408
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f00007e0:           5612                        lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:409
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f00007e2:           56a2                        lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:410
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f00007e4:           5732                        lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:411
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f00007e6:           57c2                        lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:412
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f00007e8:           5852                        lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:413
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f00007ea:           58e2                        lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:414
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f00007ec:           5972                        lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:415
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f00007ee:           4986                        lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:416
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f00007f0:           4a16                        lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:417
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f00007f2:           4aa6                        lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:418
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f00007f4:           4b36                        lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:419
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f00007f6:           4bc6                        lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:420
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f00007f8:           4c56                        lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:421
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f00007fa:           4ce6                        lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:422
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f00007fc:           4d76                        lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:423
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f00007fe:           5d86                        lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:424
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000800:           5e16                        lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:425
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000802:           5ea6                        lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:426
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000804:           5f36                        lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:427
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000806:           5fc6                        lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:428
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000808:           07810113            addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:432

  // This exits the ISR completely, and does not return control flow to the ISR
  // that called this sub-routine.
  mret
f000080c:           30200073            mret

f0000810 <read_sfdp>:
read_sfdp():
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:25

#define SFDP_SIGNATURE 0x50444653

OTTF_DEFINE_TEST_CONFIG();

void read_sfdp(dif_spi_host_t *spi_host) {
f0000810:                 7109                  addi    sp,sp,-384
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:27
  uint8_t buf[256];
  dif_spi_host_segment_t segments[] = {
f0000812:                 16112e23              sw      ra,380(sp)
f0000816:                 16812c23              sw      s0,376(sp)
f000081a:                 16912a23              sw      s1,372(sp)
f000081e:                 d202                  sw      zero,36(sp)
f0000820:                 d802                  sw      zero,48(sp)
f0000822:                 d602                  sw      zero,44(sp)
f0000824:                 d402                  sw      zero,40(sp)
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:28
      {
f0000826:                 d002                  sw      zero,32(sp)
f0000828:                 05a00593              li      a1,90
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:30
          .type = kDifSpiHostSegmentTypeOpcode,
          .opcode = 0x5a,
f000082c:                 02b10223              sb      a1,36(sp)
f0000830:                 4585                  li      a1,1
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:32
      },
      {
f0000832:                 da2e                  sw      a1,52(sp)
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:35
          .type = kDifSpiHostSegmentTypeAddress,
          .address =
              {
f0000834:                 dc02                  sw      zero,56(sp)
f0000836:                 de02                  sw      zero,60(sp)
f0000838:                 c082                  sw      zero,64(sp)
f000083a:                 4589                  li      a1,2
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:41
                  .width = kDifSpiHostWidthStandard,
                  .mode = kDifSpiHostAddrMode3b,
                  .address = 0x0,
              },
      },
      {
f000083c:                 c4ae                  sw      a1,72(sp)
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:44
          .type = kDifSpiHostSegmentTypeDummy,
          .dummy =
              {
f000083e:                 c682                  sw      zero,76(sp)
f0000840:                 45a1                  li      a1,8
f0000842:                 c8ae                  sw      a1,80(sp)
f0000844:                 4591                  li      a1,4
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:49
                  .width = kDifSpiHostWidthStandard,
                  .length = 8,
              },
      },
      {
f0000846:                 ceae                  sw      a1,92(sp)
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:52
          .type = kDifSpiHostSegmentTypeRx,
          .rx =
              {
f0000848:                 d082                  sw      zero,96(sp)
f000084a:                 18cc                  addi    a1,sp,116
f000084c:                 d2ae                  sw      a1,100(sp)
f000084e:                 10000593              li      a1,256
f0000852:                 d4ae                  sw      a1,104(sp)
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:59
                  .buf = buf,
                  .length = sizeof(buf),
              },
      },
  };
  CHECK_DIF_OK(
f0000854:                 1010                  addi    a2,sp,32
f0000856:                 4691                  li      a3,4
f0000858:                 4581                  li      a1,0
f000085a:                 21e9                  jal     f0000d24 <dif_spi_host_transaction>
f000085c:                 00003597              auipc   a1,0x3
f0000860:                 e9858593              addi    a1,a1,-360 # f00036f4 <kDeviceLogBypassUartAddress>
f0000864:                 4184                  lw      s1,0(a1)
f0000866:       /-------- cd0d                  beqz    a0,f00008a0 <read_sfdp+0x90>
f0000868:       |         842a                  mv      s0,a0
f000086a:       |     /-- c891                  beqz    s1,f000087e <read_sfdp+0x6e>
f000086c:       |     |   1000f517              auipc   a0,0x1000f
f0000870:       |     |   79450513              addi    a0,a0,1940 # 10000 <_non_volatile_scratch_end+0xff90000>
f0000874:       |     |   4585                  li      a1,1
f0000876:       |     |   8622                  mv      a2,s0
f0000878:       |     |   6c1000ef              jal     ra,f0001738 <base_log_internal_dv>
f000087c:       |  /--|-- a829                  j       f0000896 <read_sfdp+0x86>
f000087e:       |  |  \-> 00002597              auipc   a1,0x2
f0000882:       |  |      30a58593              addi    a1,a1,778 # f0002b88 <kOttfTestConfig+0x8>
f0000886:       |  |      0028                  addi    a0,sp,8
f0000888:       |  |      4651                  li      a2,20
f000088a:       |  |      64f010ef              jal     ra,f00026d8 <memcpy>
f000088e:       |  |      0028                  addi    a0,sp,8
f0000890:       |  |      85a2                  mv      a1,s0
f0000892:       |  |      605000ef              jal     ra,f0001696 <base_log_internal_core>
f0000896:       |  \----> 6531                  lui     a0,0xc
f0000898:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000089c:       |         54b000ef              jal     ra,f00015e6 <test_status_set>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f00008a0:       \-------> 5456                  lw      s0,116(sp)
read_sfdp():
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:63
      dif_spi_host_transaction(spi_host, 0, segments, ARRAYSIZE(segments)));

  uint32_t sfdp = read_32(buf);
  LOG_INFO("SFDP signature is 0x%08x", sfdp);
f00008a2:             /-- c49d                  beqz    s1,f00008d0 <read_sfdp+0xc0>
f00008a4:             |   1000f517              auipc   a0,0x1000f
f00008a8:             |   77050513              addi    a0,a0,1904 # 10014 <_non_volatile_scratch_end+0xff90014>
f00008ac:             |   4585                  li      a1,1
f00008ae:             |   8622                  mv      a2,s0
f00008b0:             |   689000ef              jal     ra,f0001738 <base_log_internal_dv>
f00008b4:             |   50444537              lui     a0,0x50444
f00008b8:             |   65350513              addi    a0,a0,1619 # 50444653 <_ottf_size+0x503c4653>
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:64
  CHECK(sfdp == SFDP_SIGNATURE, "Expected to find the SFDP signature!");
f00008bc:       /-----|-- 04a40c63              beq     s0,a0,f0000914 <read_sfdp+0x104>
f00008c0:       |     |   1000f517              auipc   a0,0x1000f
f00008c4:       |     |   76850513              addi    a0,a0,1896 # 10028 <_non_volatile_scratch_end+0xff90028>
f00008c8:       |     |   4581                  li      a1,0
f00008ca:       |     |   66f000ef              jal     ra,f0001738 <base_log_internal_dv>
f00008ce:       |  /--|-- a835                  j       f000090a <read_sfdp+0xfa>
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:63
  LOG_INFO("SFDP signature is 0x%08x", sfdp);
f00008d0:       |  |  \-> 00002597              auipc   a1,0x2
f00008d4:       |  |      2cc58593              addi    a1,a1,716 # f0002b9c <kOttfTestConfig+0x1c>
f00008d8:       |  |      0028                  addi    a0,sp,8
f00008da:       |  |      4651                  li      a2,20
f00008dc:       |  |      5fd010ef              jal     ra,f00026d8 <memcpy>
f00008e0:       |  |      0028                  addi    a0,sp,8
f00008e2:       |  |      85a2                  mv      a1,s0
f00008e4:       |  |      5b3000ef              jal     ra,f0001696 <base_log_internal_core>
f00008e8:       |  |      50444537              lui     a0,0x50444
f00008ec:       |  |      65350513              addi    a0,a0,1619 # 50444653 <_ottf_size+0x503c4653>
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:64
  CHECK(sfdp == SFDP_SIGNATURE, "Expected to find the SFDP signature!");
f00008f0:       +--|----- 02a40263              beq     s0,a0,f0000914 <read_sfdp+0x104>
f00008f4:       |  |      00002597              auipc   a1,0x2
f00008f8:       |  |      2bc58593              addi    a1,a1,700 # f0002bb0 <kOttfTestConfig+0x30>
f00008fc:       |  |      0028                  addi    a0,sp,8
f00008fe:       |  |      4651                  li      a2,20
f0000900:       |  |      5d9010ef              jal     ra,f00026d8 <memcpy>
f0000904:       |  |      0028                  addi    a0,sp,8
f0000906:       |  |      591000ef              jal     ra,f0001696 <base_log_internal_core>
f000090a:       |  \----> 6531                  lui     a0,0xc
f000090c:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000910:       |         4d7000ef              jal     ra,f00015e6 <test_status_set>
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:65
}
f0000914:       \-------> 17412483              lw      s1,372(sp)
f0000918:                 17812403              lw      s0,376(sp)
f000091c:                 17c12083              lw      ra,380(sp)
f0000920:                 6119                  addi    sp,sp,384
f0000922:                 8082                  ret

f0000924 <test_main>:
test_main():
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:67

bool test_main(void) {
f0000924:                 7179                  addi    sp,sp,-48
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:69
  dif_spi_host_t spi_host;
  CHECK_DIF_OK(dif_spi_host_init(
f0000926:                 d606                  sw      ra,44(sp)
f0000928:                 d422                  sw      s0,40(sp)
f000092a:                 d226                  sw      s1,36(sp)
f000092c:                 c0300537              lui     a0,0xc0300
f0000930:                 100c                  addi    a1,sp,32
f0000932:                 28e5                  jal     f0000a2a <dif_spi_host_init>
f0000934:                 00003497              auipc   s1,0x3
f0000938:                 dc048493              addi    s1,s1,-576 # f00036f4 <kDeviceLogBypassUartAddress>
f000093c:       /-------- cd15                  beqz    a0,f0000978 <test_main+0x54>
f000093e:       |         842a                  mv      s0,a0
f0000940:       |         4088                  lw      a0,0(s1)
f0000942:       |     /-- c911                  beqz    a0,f0000956 <test_main+0x32>
f0000944:       |     |   1000f517              auipc   a0,0x1000f
f0000948:       |     |   6f850513              addi    a0,a0,1784 # 1003c <_non_volatile_scratch_end+0xff9003c>
f000094c:       |     |   4585                  li      a1,1
f000094e:       |     |   8622                  mv      a2,s0
f0000950:       |     |   5e9000ef              jal     ra,f0001738 <base_log_internal_dv>
f0000954:       |  /--|-- a829                  j       f000096e <test_main+0x4a>
f0000956:       |  |  \-> 00002597              auipc   a1,0x2
f000095a:       |  |      26e58593              addi    a1,a1,622 # f0002bc4 <kOttfTestConfig+0x44>
f000095e:       |  |      0028                  addi    a0,sp,8
f0000960:       |  |      4651                  li      a2,20
f0000962:       |  |      577010ef              jal     ra,f00026d8 <memcpy>
f0000966:       |  |      0028                  addi    a0,sp,8
f0000968:       |  |      85a2                  mv      a1,s0
f000096a:       |  |      52d000ef              jal     ra,f0001696 <base_log_internal_core>
f000096e:       |  \----> 6531                  lui     a0,0xc
f0000970:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000974:       |         473000ef              jal     ra,f00015e6 <test_status_set>
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:72
      mmio_region_from_addr(TOP_EARLGREY_SPI_HOST0_BASE_ADDR), &spi_host));

  CHECK_DIF_OK(dif_spi_host_configure(
f0000978:       \-------> 00003517              auipc   a0,0x3
f000097c:                 d6850513              addi    a0,a0,-664 # f00036e0 <kClockFreqPeripheralHz>
f0000980:                 4108                  lw      a0,0(a0)
f0000982:                 00010123              sb      zero,2(sp)
f0000986:                 00011023              sh      zero,0(sp)
f000098a:                 000f45b7              lui     a1,0xf4
f000098e:                 24058593              addi    a1,a1,576 # f4240 <_ottf_size+0x74240>
f0000992:                 c42e                  sw      a1,8(sp)
f0000994:                 c62a                  sw      a0,12(sp)
f0000996:                 c802                  sw      zero,16(sp)
f0000998:                 00011a23              sh      zero,20(sp)
f000099c:                 1008                  addi    a0,sp,32
f000099e:                 002c                  addi    a1,sp,8
f00009a0:                 247d                  jal     f0000c4e <dif_spi_host_configure>
f00009a2:       /-------- c91d                  beqz    a0,f00009d8 <test_main+0xb4>
f00009a4:       |         4088                  lw      a0,0(s1)
f00009a6:       |     /-- c909                  beqz    a0,f00009b8 <test_main+0x94>
f00009a8:       |     |   1000f517              auipc   a0,0x1000f
f00009ac:       |     |   6a850513              addi    a0,a0,1704 # 10050 <_non_volatile_scratch_end+0xff90050>
f00009b0:       |     |   4581                  li      a1,0
f00009b2:       |     |   587000ef              jal     ra,f0001738 <base_log_internal_dv>
f00009b6:       |  /--|-- a821                  j       f00009ce <test_main+0xaa>
f00009b8:       |  |  \-> 00002597              auipc   a1,0x2
f00009bc:       |  |      22058593              addi    a1,a1,544 # f0002bd8 <kOttfTestConfig+0x58>
f00009c0:       |  |      0028                  addi    a0,sp,8
f00009c2:       |  |      4651                  li      a2,20
f00009c4:       |  |      515010ef              jal     ra,f00026d8 <memcpy>
f00009c8:       |  |      0028                  addi    a0,sp,8
f00009ca:       |  |      4cd000ef              jal     ra,f0001696 <base_log_internal_core>
f00009ce:       |  \----> 6531                  lui     a0,0xc
f00009d0:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00009d4:       |         413000ef              jal     ra,f00015e6 <test_status_set>
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:79
                   (dif_spi_host_config_t){
                       .spi_clock = 1000000,
                       .peripheral_clock_freq_hz = kClockFreqPeripheralHz,
                   }),
               "SPI_HOST config failed!");
  CHECK_DIF_OK(dif_spi_host_output_set_enabled(&spi_host, true));
f00009d8:       \-------> 1008                  addi    a0,sp,32
f00009da:                 4585                  li      a1,1
f00009dc:                 2cd5                  jal     f0000cd0 <dif_spi_host_output_set_enabled>
f00009de:       /-------- cd15                  beqz    a0,f0000a1a <test_main+0xf6>
f00009e0:       |         842a                  mv      s0,a0
f00009e2:       |         4088                  lw      a0,0(s1)
f00009e4:       |     /-- c911                  beqz    a0,f00009f8 <test_main+0xd4>
f00009e6:       |     |   1000f517              auipc   a0,0x1000f
f00009ea:       |     |   67e50513              addi    a0,a0,1662 # 10064 <_non_volatile_scratch_end+0xff90064>
f00009ee:       |     |   4585                  li      a1,1
f00009f0:       |     |   8622                  mv      a2,s0
f00009f2:       |     |   547000ef              jal     ra,f0001738 <base_log_internal_dv>
f00009f6:       |  /--|-- a829                  j       f0000a10 <test_main+0xec>
f00009f8:       |  |  \-> 00002597              auipc   a1,0x2
f00009fc:       |  |      1f458593              addi    a1,a1,500 # f0002bec <kOttfTestConfig+0x6c>
f0000a00:       |  |      0028                  addi    a0,sp,8
f0000a02:       |  |      4651                  li      a2,20
f0000a04:       |  |      4d5010ef              jal     ra,f00026d8 <memcpy>
f0000a08:       |  |      0028                  addi    a0,sp,8
f0000a0a:       |  |      85a2                  mv      a1,s0
f0000a0c:       |  |      48b000ef              jal     ra,f0001696 <base_log_internal_core>
f0000a10:       |  \----> 6531                  lui     a0,0xc
f0000a12:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000a16:       |         3d1000ef              jal     ra,f00015e6 <test_status_set>
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:81

  read_sfdp(&spi_host);
f0000a1a:       \-------> 1008                  addi    a0,sp,32
f0000a1c:                 3bd5                  jal     f0000810 <read_sfdp>
/proc/self/cwd/sw/device/tests/spi_host_smoketest.c:82
  return true;
f0000a1e:                 4505                  li      a0,1
f0000a20:                 5492                  lw      s1,36(sp)
f0000a22:                 5422                  lw      s0,40(sp)
f0000a24:                 50b2                  lw      ra,44(sp)
f0000a26:                 6145                  addi    sp,sp,48
f0000a28:                 8082                  ret

f0000a2a <dif_spi_host_init>:
dif_spi_host_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:19
#include "spi_host_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_host_init(mmio_region_t base_addr,
                               dif_spi_host_t *spi_host) {
  if (spi_host == NULL) {
f0000a2a:       /----- c581                     beqz    a1,f0000a32 <dif_spi_host_init+0x8>
f0000a2c:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:23
    return kDifBadArg;
  }

  spi_host->base_addr = base_addr;
f0000a2e:       |      c188                     sw      a0,0(a1)
f0000a30:       |  /-- a011                     j       f0000a34 <dif_spi_host_init+0xa>
f0000a32:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:26

  return kDifOk;
}
f0000a34:          \-> 8532                     mv      a0,a2
f0000a36:              8082                     ret

f0000a38 <dif_spi_host_fifo_write>:
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:156
  uint32_t val = read_32((const void *)srcaddr);
  mmio_region_write32(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, val);
}

dif_result_t dif_spi_host_fifo_write(const dif_spi_host_t *spi_host,
                                     const void *src, uint16_t len) {
f0000a38:                    468d                       li      a3,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:158
  uintptr_t ptr = (uintptr_t)src;
  if (spi_host == NULL || (src == NULL && len > 0)) {
f0000a3a:       /----------- cd45                       beqz    a0,f0000af2 <dif_spi_host_fifo_write+0xba>
f0000a3c:       |            00b03733           snez    a4,a1
f0000a40:       |            00163793           seqz    a5,a2
f0000a44:       |            8f5d                       or      a4,a4,a5
f0000a46:       +----------- c755                       beqz    a4,f0000af2 <dif_spi_host_fifo_write+0xba>
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
f0000a48:       |            0035f693           andi    a3,a1,3
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
    return kDifBadArg;
  }

  // If the pointer starts mis-aligned, write until we are aligned.
  while (misalignment32_of(ptr) && len > 0) {
f0000a4c:       |            00d036b3           snez    a3,a3
f0000a50:       |            00c03733           snez    a4,a2
f0000a54:       |            8ef9                       and     a3,a3,a4
f0000a56:       |  /-------- ce8d                       beqz    a3,f0000a90 <dif_spi_host_fifo_write+0x58>
f0000a58:       |  |         04800693           li      a3,72
f0000a5c:       |  |         6741                       lui     a4,0x10
f0000a5e:       |  |         fff70813           addi    a6,a4,-1 # ffff <_non_volatile_scratch_size+0xafff>
f0000a62:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000a64:       |  |  |  /-> 4bd8                       lw      a4,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
 * @return Zero-extended `field` from `bitfield`.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_read(uint32_t bitfield,
                                      bitfield_field32_t field) {
  return (bitfield >> field.index) & field.mask;
f0000a66:       |  |  |  |   0ff77713           andi    a4,a4,255
f0000a6a:       |  |  |  \-- fed70de3           beq     a4,a3,f0000a64 <dif_spi_host_fifo_write+0x2c>
tx_fifo_write8():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:145
  mmio_region_write8(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, *src);
f0000a6e:       |  |  |      00058883           lb      a7,0(a1)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:165
    tx_fifo_write8(spi_host, ptr);
    ptr += 1;
f0000a72:       |  |  |      0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:166
    len -= 1;
f0000a74:       |  |  |      167d                       addi    a2,a2,-1
f0000a76:       |  |  |      010672b3           and     t0,a2,a6
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
f0000a7a:       |  |  |      0035f713           andi    a4,a1,3
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
  while (misalignment32_of(ptr) && len > 0) {
f0000a7e:       |  |  |      00e03333           snez    t1,a4
f0000a82:       |  |  |      00503733           snez    a4,t0
f0000a86:       |  |  |      00e37733           and     a4,t1,a4
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write8(mmio_region_t base, ptrdiff_t offset,
                               uint8_t value) {
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
f0000a8a:       |  |  |      03178423           sb      a7,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
f0000a8e:       |  |  \----- fb71                       bnez    a4,f0000a62 <dif_spi_host_fifo_write+0x2a>
f0000a90:       |  \-------> 66c1                       lui     a3,0x10
f0000a92:       |            fff68893           addi    a7,a3,-1 # ffff <_non_volatile_scratch_size+0xafff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:170
  }

  // Write complete 32-bit words to the fifo.
  while (len > 3) {
f0000a96:       |            01167733           and     a4,a2,a7
f0000a9a:       |            4791                       li      a5,4
f0000a9c:       |  /-------- 02f76363           bltu    a4,a5,f0000ac2 <dif_spi_host_fifo_write+0x8a>
f0000aa0:       |  |         04800713           li      a4,72
f0000aa4:       |  |         480d                       li      a6,3
f0000aa6:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000aa8:       |  |  |  /-> 4bd4                       lw      a3,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
f0000aaa:       |  |  |  |   0ff6f693           andi    a3,a3,255
f0000aae:       |  |  |  \-- fee68de3           beq     a3,a4,f0000aa8 <dif_spi_host_fifo_write+0x70>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0000ab2:       |  |  |      4194                       lw      a3,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0000ab4:       |  |  |      d794                       sw      a3,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:173
    tx_fifo_write32(spi_host, ptr);
    ptr += 4;
    len -= 4;
f0000ab6:       |  |  |      1671                       addi    a2,a2,-4
f0000ab8:       |  |  |      011676b3           and     a3,a2,a7
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:172
    ptr += 4;
f0000abc:       |  |  |      0591                       addi    a1,a1,4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:170
  while (len > 3) {
f0000abe:       |  |  \----- fed864e3           bltu    a6,a3,f0000aa6 <dif_spi_host_fifo_write+0x6e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:177
  }

  // Clean up any leftover bytes.
  while (len > 0) {
f0000ac2:       |  \-------> 011676b3           and     a3,a2,a7
f0000ac6:       |  /-------- c68d                       beqz    a3,f0000af0 <dif_spi_host_fifo_write+0xb8>
f0000ac8:       |  |         04800693           li      a3,72
f0000acc:       |  |         6741                       lui     a4,0x10
f0000ace:       |  |         fff70813           addi    a6,a4,-1 # ffff <_non_volatile_scratch_size+0xafff>
f0000ad2:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000ad4:       |  |  |  /-> 4bd8                       lw      a4,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
f0000ad6:       |  |  |  |   0ff77713           andi    a4,a4,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
f0000ada:       |  |  |  \-- fed70de3           beq     a4,a3,f0000ad4 <dif_spi_host_fifo_write+0x9c>
tx_fifo_write8():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:145
  mmio_region_write8(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, *src);
f0000ade:       |  |  |      00058703           lb      a4,0(a1)
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
f0000ae2:       |  |  |      02e78423           sb      a4,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:180
    tx_fifo_write8(spi_host, ptr);
    ptr += 1;
    len -= 1;
f0000ae6:       |  |  |      167d                       addi    a2,a2,-1
f0000ae8:       |  |  |      01067733           and     a4,a2,a6
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:179
    ptr += 1;
f0000aec:       |  |  |      0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:177
  while (len > 0) {
f0000aee:       |  |  \----- f375                       bnez    a4,f0000ad2 <dif_spi_host_fifo_write+0x9a>
f0000af0:       |  \-------> 4681                       li      a3,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:184
  }

  return kDifOk;
}
f0000af2:       \----------> 8536                       mv      a0,a3
f0000af4:                    8082                       ret

f0000af6 <dif_spi_host_fifo_read>:
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:223
  queue->length -= 4;
  return val;
}

dif_result_t dif_spi_host_fifo_read(const dif_spi_host_t *spi_host, void *dst,
                                    uint16_t len) {
f0000af6:                       7179                    addi    sp,sp,-48
f0000af8:                       d606                    sw      ra,44(sp)
f0000afa:                       d422                    sw      s0,40(sp)
f0000afc:                       d226                    sw      s1,36(sp)
f0000afe:                       d04a                    sw      s2,32(sp)
f0000b00:                       ce4e                    sw      s3,28(sp)
f0000b02:                       cc52                    sw      s4,24(sp)
f0000b04:                       ca56                    sw      s5,20(sp)
f0000b06:                       892a                    mv      s2,a0
f0000b08:                       450d                    li      a0,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:224
  if (spi_host == NULL || (dst == NULL && len > 0)) {
f0000b0a:       /-------------- 12090963                beqz    s2,f0000c3c <dif_spi_host_fifo_read+0x146>
f0000b0e:       |               89b2                    mv      s3,a2
f0000b10:       |               84ae                    mv      s1,a1
f0000b12:       |               00b035b3                snez    a1,a1
f0000b16:       |               00163613                seqz    a2,a2
f0000b1a:       |               8dd1                    or      a1,a1,a2
f0000b1c:       +-------------- 12058063                beqz    a1,f0000c3c <dif_spi_host_fifo_read+0x146>
f0000b20:       |               00002517                auipc   a0,0x2
f0000b24:       |               0f850513                addi    a0,a0,248 # f0002c18 <kOttfTestConfig+0x98>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:231
  }

  uintptr_t ptr = (uintptr_t)dst;
  // We always have to read from the RXFIFO as a 32-bit word.  We use a
  // two-word queue to handle destination and length mis-alignments.
  queue_t queue = {0};
f0000b28:       |               454c                    lw      a1,12(a0)
f0000b2a:       |               4510                    lw      a2,8(a0)
f0000b2c:       |               4154                    lw      a3,4(a0)
f0000b2e:       |               c62e                    sw      a1,12(sp)
f0000b30:       |               6a41                    lui     s4,0x10
f0000b32:       |               c432                    sw      a2,8(sp)
f0000b34:       |               c236                    sw      a3,4(sp)
f0000b36:       |               4108                    lw      a0,0(a0)
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
f0000b38:       |               0034f593                andi    a1,s1,3
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235

  // If the buffer is misaligned, write a byte at a time until we reach
  // alignment.
  while (misalignment32_of(ptr) && len > 0) {
f0000b3c:       |               00b035b3                snez    a1,a1
f0000b40:       |               01303633                snez    a2,s3
f0000b44:       |               8df1                    and     a1,a1,a2
f0000b46:       |               f00a0413                addi    s0,s4,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:231
  queue_t queue = {0};
f0000b4a:       |               c02a                    sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235
  while (misalignment32_of(ptr) && len > 0) {
f0000b4c:       |  /----------- cdb1                    beqz    a1,f0000ba8 <dif_spi_host_fifo_read+0xb2>
f0000b4e:       |  |            4501                    li      a0,0
f0000b50:       |  |            fffa0a93                addi    s5,s4,-1
f0000b54:       |  |     /----- 00a04b63                bgtz    a0,f0000b6a <dif_spi_host_fifo_read+0x74>
f0000b58:       |  |  /--|----> 00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000b5c:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
f0000b5e:       |  |  |  |  |   8de1                    and     a1,a1,s0
f0000b60:       |  |  |  |  \-- ddf5                    beqz    a1,f0000b5c <dif_spi_host_fifo_read+0x66>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0000b62:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:238
    if (queue.length < 1) {
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
f0000b64:       |  |  |  |      850a                    mv      a0,sp
f0000b66:       |  |  |  |      2259                    jal     f0000cec <enqueue_word>
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
f0000b68:       |  |  |  |      4502                    lw      a0,0(sp)
read_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:120
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint64_t));
  uint64_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint64_t));
f0000b6a:       |  |  |  >----> 45b2                    lw      a1,12(sp)
f0000b6c:       |  |  |  |      4622                    lw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:208
  uint8_t val = queue->data[0];
f0000b6e:       |  |  |  |      00810683                lb      a3,8(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:210
  write_64(qword >> 8, queue->data);
f0000b72:       |  |  |  |      01859713                slli    a4,a1,0x18
f0000b76:       |  |  |  |      8221                    srli    a2,a2,0x8
f0000b78:       |  |  |  |      8e59                    or      a2,a2,a4
f0000b7a:       |  |  |  |      81a1                    srli    a1,a1,0x8
write_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:172
inline void write_64(uint64_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_64()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint64_t));
  __builtin_memcpy(ptr, &value, sizeof(uint64_t));
f0000b7c:       |  |  |  |      c62e                    sw      a1,12(sp)
f0000b7e:       |  |  |  |      c432                    sw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
f0000b80:       |  |  |  |      157d                    addi    a0,a0,-1
f0000b82:       |  |  |  |      c02a                    sw      a0,0(sp)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:242
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    uint8_t *p = (uint8_t *)ptr;
    *p = dequeue_byte(&queue);
f0000b84:       |  |  |  |      00d48023                sb      a3,0(s1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:243
    ptr += 1;
f0000b88:       |  |  |  |      0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:244
    len -= 1;
f0000b8a:       |  |  |  |      19fd                    addi    s3,s3,-1
f0000b8c:       |  |  |  |      0159f533                and     a0,s3,s5
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
f0000b90:       |  |  |  |      0034f593                andi    a1,s1,3
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235
  while (misalignment32_of(ptr) && len > 0) {
f0000b94:       |  |  |  |      00b035b3                snez    a1,a1
f0000b98:       |  |  |  |      00a03533                snez    a0,a0
f0000b9c:       |  |  |  |      8d6d                    and     a0,a0,a1
f0000b9e:       |  +--|--|----- c509                    beqz    a0,f0000ba8 <dif_spi_host_fifo_read+0xb2>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:236
    if (queue.length < 1) {
f0000ba0:       |  |  |  |      4502                    lw      a0,0(sp)
f0000ba2:       |  |  |  \----- fca044e3                bgtz    a0,f0000b6a <dif_spi_host_fifo_read+0x74>
f0000ba6:       |  |  \-------- bf4d                    j       f0000b58 <dif_spi_host_fifo_read+0x62>
f0000ba8:       |  \----------> fffa0513                addi    a0,s4,-1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:248
  }

  // While we can write complete words to memory, operate on 4 bytes at a time.
  while (len > 3) {
f0000bac:       |               00a9f533                and     a0,s3,a0
f0000bb0:       |               4591                    li      a1,4
f0000bb2:       |  /----------- 02b56e63                bltu    a0,a1,f0000bee <dif_spi_host_fifo_read+0xf8>
f0000bb6:       |  |            4a0d                    li      s4,3
f0000bb8:       |  |            6541                    lui     a0,0x10
f0000bba:       |  |            fff50a93                addi    s5,a0,-1 # ffff <_non_volatile_scratch_size+0xafff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:249
    if (queue.length < 4) {
f0000bbe:       |  |  /-------> 4502                    lw      a0,0(sp)
f0000bc0:       |  |  |  /----- 00aa4b63                blt     s4,a0,f0000bd6 <dif_spi_host_fifo_read+0xe0>
f0000bc4:       |  |  |  |      00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0000bc8:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
f0000bca:       |  |  |  |  |   8de1                    and     a1,a1,s0
f0000bcc:       |  |  |  |  \-- ddf5                    beqz    a1,f0000bc8 <dif_spi_host_fifo_read+0xd2>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0000bce:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:251
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
f0000bd0:       |  |  |  |      850a                    mv      a0,sp
f0000bd2:       |  |  |  |      2a29                    jal     f0000cec <enqueue_word>
dequeue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:218
  queue->length -= 4;
f0000bd4:       |  |  |  |      4502                    lw      a0,0(sp)
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0000bd6:       |  |  |  \----> 45b2                    lw      a1,12(sp)
f0000bd8:       |  |  |         4622                    lw      a2,8(sp)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f0000bda:       |  |  |         c42e                    sw      a1,8(sp)
dequeue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:218
f0000bdc:       |  |  |         1571                    addi    a0,a0,-4
f0000bde:       |  |  |         c02a                    sw      a0,0(sp)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
f0000be0:       |  |  |         c090                    sw      a2,0(s1)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:256
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    write_32(dequeue_word(&queue), (void *)ptr);
    ptr += 4;
    len -= 4;
f0000be2:       |  |  |         19f1                    addi    s3,s3,-4
f0000be4:       |  |  |         0159f533                and     a0,s3,s5
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:255
    ptr += 4;
f0000be8:       |  |  |         0491                    addi    s1,s1,4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:248
  while (len > 3) {
f0000bea:       |  |  \-------- fcaa6ae3                bltu    s4,a0,f0000bbe <dif_spi_host_fifo_read+0xc8>
f0000bee:       |  \----------> 6541                    lui     a0,0x10
f0000bf0:       |               fff50a13                addi    s4,a0,-1 # ffff <_non_volatile_scratch_size+0xafff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:260
  }

  // Finish up any left over buffer a byte at a time.
  while (len > 0) {
f0000bf4:       |               0149f533                and     a0,s3,s4
f0000bf8:       |  /----------- c129                    beqz    a0,f0000c3a <dif_spi_host_fifo_read+0x144>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:261
    if (queue.length < 1) {
f0000bfa:       |  |  /-------> 4502                    lw      a0,0(sp)
f0000bfc:       |  |  |  /----- 00a04b63                bgtz    a0,f0000c12 <dif_spi_host_fifo_read+0x11c>
f0000c00:       |  |  |  |      00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0000c04:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
f0000c06:       |  |  |  |  |   8de1                    and     a1,a1,s0
f0000c08:       |  |  |  |  \-- ddf5                    beqz    a1,f0000c04 <dif_spi_host_fifo_read+0x10e>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0000c0a:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:263
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
f0000c0c:       |  |  |  |      850a                    mv      a0,sp
f0000c0e:       |  |  |  |      28f9                    jal     f0000cec <enqueue_word>
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
f0000c10:       |  |  |  |      4502                    lw      a0,0(sp)
read_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:120
  __builtin_memcpy(&val, ptr, sizeof(uint64_t));
f0000c12:       |  |  |  \----> 45b2                    lw      a1,12(sp)
f0000c14:       |  |  |         4622                    lw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:208
  uint8_t val = queue->data[0];
f0000c16:       |  |  |         00810683                lb      a3,8(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:210
  write_64(qword >> 8, queue->data);
f0000c1a:       |  |  |         01859713                slli    a4,a1,0x18
f0000c1e:       |  |  |         8221                    srli    a2,a2,0x8
f0000c20:       |  |  |         8e59                    or      a2,a2,a4
f0000c22:       |  |  |         81a1                    srli    a1,a1,0x8
write_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:172
  __builtin_memcpy(ptr, &value, sizeof(uint64_t));
f0000c24:       |  |  |         c62e                    sw      a1,12(sp)
f0000c26:       |  |  |         c432                    sw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
f0000c28:       |  |  |         157d                    addi    a0,a0,-1
f0000c2a:       |  |  |         c02a                    sw      a0,0(sp)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:267
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    uint8_t *p = (uint8_t *)ptr;
    *p = dequeue_byte(&queue);
f0000c2c:       |  |  |         00d48023                sb      a3,0(s1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:269
    ptr += 1;
    len -= 1;
f0000c30:       |  |  |         19fd                    addi    s3,s3,-1
f0000c32:       |  |  |         0149f533                and     a0,s3,s4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:268
    ptr += 1;
f0000c36:       |  |  |         0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:260
  while (len > 0) {
f0000c38:       |  |  \-------- f169                    bnez    a0,f0000bfa <dif_spi_host_fifo_read+0x104>
f0000c3a:       |  \----------> 4501                    li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:273
  }

  return kDifOk;
}
f0000c3c:       \-------------> 4ad2                    lw      s5,20(sp)
f0000c3e:                       4a62                    lw      s4,24(sp)
f0000c40:                       49f2                    lw      s3,28(sp)
f0000c42:                       5902                    lw      s2,32(sp)
f0000c44:                       5492                    lw      s1,36(sp)
f0000c46:                       5422                    lw      s0,40(sp)
f0000c48:                       50b2                    lw      ra,44(sp)
f0000c4a:                       6145                    addi    sp,sp,48
f0000c4c:                       8082                    ret

f0000c4e <dif_spi_host_configure>:
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:66
                                    dif_spi_host_config_t config) {
f0000c4e:              460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:67
  if (spi_host == NULL) {
f0000c50:       /----- cd35                     beqz    a0,f0000ccc <dif_spi_host_configure+0x7e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:70
  if (config.peripheral_clock_freq_hz == 0 || config.spi_clock == 0) {
f0000c52:       |      41d4                     lw      a3,4(a1)
f0000c54:       +----- cea5                     beqz    a3,f0000ccc <dif_spi_host_configure+0x7e>
f0000c56:       |      4198                     lw      a4,0(a1)
f0000c58:       +----- cb35                     beqz    a4,f0000ccc <dif_spi_host_configure+0x7e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:75
      ((config.peripheral_clock_freq_hz / config.spi_clock) / 2) - 1;
f0000c5a:       |      02e6d6b3                 divu    a3,a3,a4
f0000c5e:       |      8285                     srli    a3,a3,0x1
f0000c60:       |      16fd                     addi    a3,a3,-1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:76
  if (divider & ~SPI_HOST_CONFIGOPTS_CLKDIV_0_MASK) {
f0000c62:       |      0106d713                 srli    a4,a3,0x10
f0000c66:       +----- e33d                     bnez    a4,f0000ccc <dif_spi_host_configure+0x7e>
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:32
  mmio_region_write32(
f0000c68:       |      4110                     lw      a2,0(a0)
f0000c6a:       |      40000737                 lui     a4,0x40000
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0000c6e:       |      ca18                     sw      a4,16(a2)
f0000c70:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000c72:       |  /-> 4a5c                     lw      a5,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f0000c74:       |  |   8ff9                     and     a5,a5,a4
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:42
  } while (active);
f0000c76:       |  \-- fff5                     bnez    a5,f0000c72 <dif_spi_host_configure+0x24>
f0000c78:       |      6741                     lui     a4,0x10
f0000c7a:       |      177d                     addi    a4,a4,-1
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0000c7c:       |  /-> 4a5c                     lw      a5,20(a2)
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:51
  } while (txqd != 0 || rxqd != 0);
f0000c7e:       |  |   8ff9                     and     a5,a5,a4
f0000c80:       |  \-- fff5                     bnez    a5,f0000c7c <dif_spi_host_configure+0x2e>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0000c82:       |      00062823                 sw      zero,16(a2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000c86:       |      00858603                 lb      a2,8(a1) # 80000008 <_non_volatile_scratch_end+0x8ff80008>
f0000c8a:       |      8ef9                     and     a3,a3,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f0000c8c:       |      0672                     slli    a2,a2,0x1c
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000c8e:       |      00958703                 lb      a4,9(a1)
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f0000c92:       |      8231                     srli    a2,a2,0xc
f0000c94:       |      8e55                     or      a2,a2,a3
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:89
                               config.chip_select.lead);
f0000c96:       |      00a5c683                 lbu     a3,10(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
f0000c9a:       |      0772                     slli    a4,a4,0x1c
f0000c9c:       |      8321                     srli    a4,a4,0x8
f0000c9e:       |      8e59                     or      a2,a2,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000ca0:       |      8abd                     andi    a3,a3,15
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_bit32_write(uint32_t bitfield,
                                     bitfield_bit32_index_t bit_index,
                                     bool value) {
  return bitfield_field32_write(bitfield, bitfield_bit32_to_field32(bit_index),
                                value ? 0x1u : 0x0u);
f0000ca2:       |      00b58703                 lb      a4,11(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000ca6:       |      06e2                     slli    a3,a3,0x18
f0000ca8:       |      8e55                     or      a2,a2,a3
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
f0000caa:       |      00c58683                 lb      a3,12(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000cae:       |      0776                     slli    a4,a4,0x1d
f0000cb0:       |      8e59                     or      a2,a2,a4
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
f0000cb2:       |      00d58583                 lb      a1,13(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000cb6:       |      06fa                     slli    a3,a3,0x1e
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:94
  mmio_region_write32(spi_host->base_addr, SPI_HOST_CONFIGOPTS_REG_OFFSET, reg);
f0000cb8:       |      4118                     lw      a4,0(a0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f0000cba:       |      8e55                     or      a2,a2,a3
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000cbc:       |      05fe                     slli    a1,a1,0x1f
f0000cbe:       |      8dd1                     or      a1,a1,a2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0000cc0:       |      cf0c                     sw      a1,24(a4)
spi_host_enable():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:60
  mmio_region_write32(
f0000cc2:       |      4108                     lw      a0,0(a0)
f0000cc4:       |      4601                     li      a2,0
f0000cc6:       |      800005b7                 lui     a1,0x80000
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0000cca:       |      c90c                     sw      a1,16(a0)
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:97
}
f0000ccc:       \----> 8532                     mv      a0,a2
f0000cce:              8082                     ret

f0000cd0 <dif_spi_host_output_set_enabled>:
dif_spi_host_output_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:101
  if (spi_host == NULL) {
f0000cd0:       /-- cd01                        beqz    a0,f0000ce8 <dif_spi_host_output_set_enabled+0x18>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:106
      mmio_region_read32(spi_host->base_addr, SPI_HOST_CONTROL_REG_OFFSET);
f0000cd2:       |   4110                        lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000cd4:       |   4a14                        lw      a3,16(a2)
f0000cd6:       |   4501                        li      a0,0
f0000cd8:       |   e0000737            lui     a4,0xe0000
f0000cdc:       |   177d                        addi    a4,a4,-1
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f0000cde:       |   8ef9                        and     a3,a3,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000ce0:       |   05f6                        slli    a1,a1,0x1d
f0000ce2:       |   8dd5                        or      a1,a1,a3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0000ce4:       |   ca0c                        sw      a1,16(a2)
dif_spi_host_output_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:112
}
f0000ce6:       |   8082                        ret
f0000ce8:       \-> 450d                        li      a0,3
f0000cea:           8082                        ret

f0000cec <enqueue_word>:
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:196
  if (queue->length % sizeof(uint32_t) == 0) {
f0000cec:              4110                     lw      a2,0(a0)
f0000cee:              00367693                 andi    a3,a2,3
f0000cf2:       /----- c29d                     beqz    a3,f0000d18 <enqueue_word+0x2c>
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
f0000cf4:       |      00160693                 addi    a3,a2,1
f0000cf8:       |      c114                     sw      a3,0(a0)
f0000cfa:       |      962a                     add     a2,a2,a0
f0000cfc:       |      00b60423                 sb      a1,8(a2)
f0000d00:       |      460d                     li      a2,3
f0000d02:       |  /-> 4114                     lw      a3,0(a0)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:202
      data >>= 8;
f0000d04:       |  |   81a1                     srli    a1,a1,0x8
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
f0000d06:       |  |   00168713                 addi    a4,a3,1
f0000d0a:       |  |   c118                     sw      a4,0(a0)
f0000d0c:       |  |   96aa                     add     a3,a3,a0
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:200
    for (size_t i = 0; i < sizeof(uint32_t); ++i) {
f0000d0e:       |  |   167d                     addi    a2,a2,-1
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
f0000d10:       |  |   00b68423                 sb      a1,8(a3)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:200
    for (size_t i = 0; i < sizeof(uint32_t); ++i) {
f0000d14:       |  \-- f67d                     bnez    a2,f0000d02 <enqueue_word+0x16>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:205
}
f0000d16:       |      8082                     ret
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:197
    write_32(data, queue->data + queue->length);
f0000d18:       \----> 962a                     add     a2,a2,a0
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f0000d1a:              c60c                     sw      a1,8(a2)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:198
    queue->length += 4;
f0000d1c:              410c                     lw      a1,0(a0)
f0000d1e:              0591                     addi    a1,a1,4
f0000d20:              c10c                     sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:205
}
f0000d22:              8082                     ret

f0000d24 <dif_spi_host_transaction>:
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:362
}

dif_result_t dif_spi_host_transaction(const dif_spi_host_t *spi_host,
                                      uint32_t csid,
                                      dif_spi_host_segment_t *segments,
                                      size_t length) {
f0000d24:                          7139                 addi    sp,sp,-64
f0000d26:                          de06                 sw      ra,60(sp)
f0000d28:                          dc22                 sw      s0,56(sp)
f0000d2a:                          da26                 sw      s1,52(sp)
f0000d2c:                          d84a                 sw      s2,48(sp)
f0000d2e:                          d64e                 sw      s3,44(sp)
f0000d30:                          d452                 sw      s4,40(sp)
f0000d32:                          d256                 sw      s5,36(sp)
f0000d34:                          d05a                 sw      s6,32(sp)
f0000d36:                          ce5e                 sw      s7,28(sp)
f0000d38:                          cc62                 sw      s8,24(sp)
f0000d3a:                          ca66                 sw      s9,20(sp)
f0000d3c:                          c86a                 sw      s10,16(sp)
f0000d3e:                          c66e                 sw      s11,12(sp)
f0000d40:                          8a2a                 mv      s4,a0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:364
  // Write to chip select ID.
  mmio_region_write32(spi_host->base_addr, SPI_HOST_CSID_REG_OFFSET, csid);
f0000d42:                          4108                 lw      a0,0(a0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0000d44:                          cd4c                 sw      a1,28(a0)
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:368

  // For each segment, write the segment information to the
  // COMMAND register and transmit FIFO.
  for (size_t i = 0; i < length; ++i) {
f0000d46:       /----------------- 1a068263             beqz    a3,f0000eea <dif_spi_host_transaction+0x1c6>
f0000d4a:       |                  8d36                 mv      s10,a3
f0000d4c:       |                  8932                 mv      s2,a2
f0000d4e:       |                  4401                 li      s0,0
f0000d50:       |                  fff68a93             addi    s5,a3,-1
f0000d54:       |                  0016b513             seqz    a0,a3
f0000d58:       |                  c02a                 sw      a0,0(sp)
f0000d5a:       |                  6505                 lui     a0,0x1
f0000d5c:       |                  c0050b13             addi    s6,a0,-1024 # c00 <_epmp_reset_rx_size+0x400>
f0000d60:       |                  4851                 li      a6,20
f0000d62:       |                  4c15                 li      s8,5
f0000d64:       |                  00002c97             auipc   s9,0x2
f0000d68:       |                  e9cc8c93             addi    s9,s9,-356 # f0002c00 <kOttfTestConfig+0x80>
f0000d6c:       |                  04800493             li      s1,72
f0000d70:       |                  6541                 lui     a0,0x10
f0000d72:       |                  f0050593             addi    a1,a0,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f0000d76:       |                  c22e                 sw      a1,4(sp)
f0000d78:       |                  157d                 addi    a0,a0,-1
f0000d7a:       |                  c42a                 sw      a0,8(sp)
f0000d7c:       |        /-------> 000a2503             lw      a0,0(s4)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000d80:       |        |     /-> 494c                 lw      a1,20(a0)
wait_ready():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:120
  } while (!ready);
f0000d82:       |        |     \-- fe05dfe3             bgez    a1,f0000d80 <dif_spi_host_transaction+0x5c>
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:372
    bool last_segment = i == length - 1;
    wait_ready(spi_host);
    dif_spi_host_segment_t *segment = &segments[i];
    switch (segment->type) {
f0000d86:       |        |         030405b3             mul     a1,s0,a6
f0000d8a:       |        |         95ca                 add     a1,a1,s2
f0000d8c:       |        |         4190                 lw      a2,0(a1)
f0000d8e:       |  /-----|-------- 16cc6e63             bltu    s8,a2,f0000f0a <dif_spi_host_transaction+0x1e6>
f0000d92:       |  |     |         060a                 slli    a2,a2,0x2
f0000d94:       |  |     |         9666                 add     a2,a2,s9
f0000d96:       |  |     |         4210                 lw      a2,0(a2)
f0000d98:       |  |     |         015446b3             xor     a3,s0,s5
f0000d9c:       |  |     |         0016bd93             seqz    s11,a3
f0000da0:       |  |     |         8602                 jr      a2
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0000da2:       |  |     |     /-> 4950                 lw      a2,20(a0)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f0000da4:       |  |     |     |   0ff67613             andi    a2,a2,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
f0000da8:       |  |     |     \-- fe960de3             beq     a2,s1,f0000da2 <dif_spi_host_transaction+0x7e>
issue_opcode():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:292
                     segment->opcode);
f0000dac:       |  |     |         00458583             lb      a1,4(a1) # 3004 <_manifest_code_end+0x624>
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
f0000db0:       |  |     |         02b50423             sb      a1,40(a0)
f0000db4:       |  |     |         6589                 lui     a1,0x2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000db6:       |  |     |     /-- 000d9463             bnez    s11,f0000dbe <dif_spi_host_transaction+0x9a>
f0000dba:       |  |     |     |   20058593             addi    a1,a1,512 # 2200 <_static_critical_size+0x23c>
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
f0000dbe:       |  |     |     \-> 000a2503             lw      a0,0(s4)
f0000dc2:       |  |     |  /----- a8f1                 j       f0000e9e <dif_spi_host_transaction+0x17a>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000dc4:       |  |     |  |  /-> 4950                 lw      a2,20(a0)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f0000dc6:       |  |     |  |  |   0ff67613             andi    a2,a2,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
f0000dca:       |  |     |  |  \-- fe960de3             beq     a2,s1,f0000dc4 <dif_spi_host_transaction+0xa0>
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:301
  uint32_t address = bitfield_byteswap32(segment->address.address);
f0000dce:       |  |     |  |      45d4                 lw      a3,12(a1)
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
 * @param bitfield Bitfield to reverse bytes of.
 * @return `bitfield` with the order of bytes reversed.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_byteswap32(uint32_t bitfield) {
  return __builtin_bswap32(bitfield);
f0000dd0:       |  |     |  |      0086d613             srli    a2,a3,0x8
f0000dd4:       |  |     |  |      4712                 lw      a4,4(sp)
f0000dd6:       |  |     |  |      8e79                 and     a2,a2,a4
f0000dd8:       |  |     |  |      0186d713             srli    a4,a3,0x18
f0000ddc:       |  |     |  |      8f51                 or      a4,a4,a2
f0000dde:       |  |     |  |      00869793             slli    a5,a3,0x8
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
  if (segment->address.mode == kDifSpiHostAddrMode4b) {
f0000de2:       |  |     |  |      0085a883             lw      a7,8(a1)
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
f0000de6:       |  |     |  |      00ff0637             lui     a2,0xff0
f0000dea:       |  |     |  |      8ff1                 and     a5,a5,a2
f0000dec:       |  |     |  |      06e2                 slli    a3,a3,0x18
f0000dee:       |  |     |  |      8edd                 or      a3,a3,a5
f0000df0:       |  |     |  |      8ed9                 or      a3,a3,a4
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
f0000df2:       |  |     |  |      4605                 li      a2,1
f0000df4:       |  |     |  |  /-- 00c88363             beq     a7,a2,f0000dfa <dif_spi_host_transaction+0xd6>
f0000df8:       |  |     |  |  |   82a1                 srli    a3,a3,0x8
f0000dfa:       |  |     |  |  \-> 6709                 lui     a4,0x2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000dfc:       |  |     |  |  /-- 000d9463             bnez    s11,f0000e04 <dif_spi_host_transaction+0xe0>
f0000e00:       |  |     |  |  |   20070713             addi    a4,a4,512 # 2200 <_static_critical_size+0x23c>
f0000e04:       |  |     |  |  \-> d514                 sw      a3,40(a0)
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:313
  write_command_reg(spi_host, length, segment->address.width,
f0000e06:       |  |     |  |      41c8                 lw      a0,4(a1)
f0000e08:       |  |     |  |      fff88593             addi    a1,a7,-1
f0000e0c:       |  |     |  |      0015b593             seqz    a1,a1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
  if (segment->address.mode == kDifSpiHostAddrMode4b) {
f0000e10:       |  |     |  |      8dd9                 or      a1,a1,a4
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0000e12:       |  |     |  |      00a51613             slli    a2,a0,0xa
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
f0000e16:       |  |     |  |      000a2503             lw      a0,0(s4)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0000e1a:       |  |     |  |      01667633             and     a2,a2,s6
f0000e1e:       |  |     |  |      8dd1                 or      a1,a1,a2
f0000e20:       |  |     |  |      0025e593             ori     a1,a1,2
f0000e24:       |  |     |  +----- a8ad                 j       f0000e9e <dif_spi_host_transaction+0x17a>
issue_dummy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:319
  write_command_reg(spi_host, segment->dummy.length, segment->dummy.width,
f0000e26:       |  |     |  |      4590                 lw      a2,8(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0000e28:       |  |     |  |      167d                 addi    a2,a2,-1
f0000e2a:       |  |     |  |      1ff67613             andi    a2,a2,511
f0000e2e:       |  |     |  |  /-- 000d9463             bnez    s11,f0000e36 <dif_spi_host_transaction+0x112>
f0000e32:       |  |     |  |  |   20066613             ori     a2,a2,512
f0000e36:       |  |     |  |  \-> 41cc                 lw      a1,4(a1)
f0000e38:       |  |     |  |      05aa                 slli    a1,a1,0xa
f0000e3a:       |  |     |  |      0165f5b3             and     a1,a1,s6
f0000e3e:       |  |     |  |      8dd1                 or      a1,a1,a2
f0000e40:       |  |     |  +----- a8b9                 j       f0000e9e <dif_spi_host_transaction+0x17a>
issue_data_phase():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:332
      width = segment->tx.width;
f0000e42:       |  |     |  |      0045a983             lw      s3,4(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:333
      length = segment->tx.length;
f0000e46:       |  |     |  |      00c5ab83             lw      s7,12(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:335
      spi_host_fifo_write_alias(spi_host, segment->tx.buf, segment->tx.length);
f0000e4a:       |  |     |  |      458c                 lw      a1,8(a1)
f0000e4c:       |  |     |  |      4522                 lw      a0,8(sp)
f0000e4e:       |  |     |  |      00abf633             and     a2,s7,a0
f0000e52:       |  |     |  |      8552                 mv      a0,s4
f0000e54:       |  |     |  |      36d5                 jal     f0000a38 <dif_spi_host_fifo_write>
f0000e56:       |  |     |  |      6589                 lui     a1,0x2
f0000e58:       |  |     |  |  /-- a015                 j       f0000e7c <dif_spi_host_transaction+0x158>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:345
      width = segment->rx.width;
f0000e5a:       |  |     |  |  |   0045a983             lw      s3,4(a1) # 2004 <_static_critical_size+0x40>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:346
      length = segment->rx.length;
f0000e5e:       |  |     |  |  |   00c5ab83             lw      s7,12(a1)
f0000e62:       |  |     |  |  |   6585                 lui     a1,0x1
f0000e64:       |  |     |  |  +-- a821                 j       f0000e7c <dif_spi_host_transaction+0x158>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:338
      width = segment->bidir.width;
f0000e66:       |  |     |  |  |   0045a983             lw      s3,4(a1) # 1004 <_epmp_reset_rx_size+0x804>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:339
      length = segment->bidir.length;
f0000e6a:       |  |     |  |  |   0105ab83             lw      s7,16(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:341
      spi_host_fifo_write_alias(spi_host, segment->bidir.txbuf,
f0000e6e:       |  |     |  |  |   458c                 lw      a1,8(a1)
f0000e70:       |  |     |  |  |   4522                 lw      a0,8(sp)
f0000e72:       |  |     |  |  |   00abf633             and     a2,s7,a0
f0000e76:       |  |     |  |  |   8552                 mv      a0,s4
f0000e78:       |  |     |  |  |   36c1                 jal     f0000a38 <dif_spi_host_fifo_write>
f0000e7a:       |  |     |  |  |   658d                 lui     a1,0x3
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0000e7c:       |  |     |  |  \-> fffb8513             addi    a0,s7,-1
f0000e80:       |  |     |  |      1ff57613             andi    a2,a0,511
f0000e84:       |  |     |  |  /-- 000d9463             bnez    s11,f0000e8c <dif_spi_host_transaction+0x168>
f0000e88:       |  |     |  |  |   20066613             ori     a2,a2,512
f0000e8c:       |  |     |  |  \-> 4851                 li      a6,20
f0000e8e:       |  |     |  |      00a99693             slli    a3,s3,0xa
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
f0000e92:       |  |     |  |      000a2503             lw      a0,0(s4)
f0000e96:       |  |     |  |      0166f6b3             and     a3,a3,s6
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0000e9a:       |  |     |  |      8dd1                 or      a1,a1,a2
f0000e9c:       |  |     |  |      8dd5                 or      a1,a1,a3
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:368
  for (size_t i = 0; i < length; ++i) {
f0000e9e:       |  |     |  \----> 0405                 addi    s0,s0,1
f0000ea0:       |  |     |         d10c                 sw      a1,32(a0)
f0000ea2:       |  |     \-------- eda41de3             bne     s0,s10,f0000d7c <dif_spi_host_transaction+0x58>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:397
        return kDifBadArg;
    }
  }

  // For each segment which receives data, read from the receive FIFO.
  for (size_t i = 0; i < length; ++i) {
f0000ea6:       |  |               4502                 lw      a0,0(sp)
f0000ea8:       +--|-------------- e129                 bnez    a0,f0000eea <dif_spi_host_transaction+0x1c6>
f0000eaa:       |  |               4401                 li      s0,0
f0000eac:       |  |               00c90493             addi    s1,s2,12
f0000eb0:       |  |               4995                 li      s3,5
f0000eb2:       |  |               4a91                 li      s5,4
f0000eb4:       |  |               4b51                 li      s6,20
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:399
    dif_spi_host_segment_t *segment = &segments[i];
    switch (segment->type) {
f0000eb6:       |  |  /----------> ff44a503             lw      a0,-12(s1)
f0000eba:       |  |  |     /----- 01350b63             beq     a0,s3,f0000ed0 <dif_spi_host_transaction+0x1ac>
f0000ebe:       |  |  |  /--|----- 03551163             bne     a0,s5,f0000ee0 <dif_spi_host_transaction+0x1bc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:401
      case kDifSpiHostSegmentTypeRx:
        spi_host_fifo_read_alias(spi_host, segment->rx.buf, segment->rx.length);
f0000ec2:       |  |  |  |  |      03640533             mul     a0,s0,s6
f0000ec6:       |  |  |  |  |      954a                 add     a0,a0,s2
f0000ec8:       |  |  |  |  |      00850593             addi    a1,a0,8
f0000ecc:       |  |  |  |  |      0531                 addi    a0,a0,12
f0000ece:       |  |  |  |  |  /-- a021                 j       f0000ed6 <dif_spi_host_transaction+0x1b2>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:406
        break;
      case kDifSpiHostSegmentTypeBidirectional:
        spi_host_fifo_read_alias(spi_host, segment->bidir.rxbuf,
                                 segment->bidir.length);
        break;
f0000ed0:       |  |  |  |  \--|-> 00448513             addi    a0,s1,4
f0000ed4:       |  |  |  |     |   85a6                 mv      a1,s1
f0000ed6:       |  |  |  |     \-> 418c                 lw      a1,0(a1)
f0000ed8:       |  |  |  |         00055603             lhu     a2,0(a0)
f0000edc:       |  |  |  |         8552                 mv      a0,s4
f0000ede:       |  |  |  |         3921                 jal     f0000af6 <dif_spi_host_fifo_read>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:397
  for (size_t i = 0; i < length; ++i) {
f0000ee0:       |  |  |  \-------> 0405                 addi    s0,s0,1
f0000ee2:       |  |  |            1d7d                 addi    s10,s10,-1
f0000ee4:       |  |  |            04d1                 addi    s1,s1,20
f0000ee6:       |  |  \----------- fc0d18e3             bnez    s10,f0000eb6 <dif_spi_host_transaction+0x192>
f0000eea:       \--|-------------> 4501                 li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:412
      default:
          /* do nothing */;
    }
  }
  return kDifOk;
}
f0000eec:          |           /-> 4db2                 lw      s11,12(sp)
f0000eee:          |           |   4d42                 lw      s10,16(sp)
f0000ef0:          |           |   4cd2                 lw      s9,20(sp)
f0000ef2:          |           |   4c62                 lw      s8,24(sp)
f0000ef4:          |           |   4bf2                 lw      s7,28(sp)
f0000ef6:          |           |   5b02                 lw      s6,32(sp)
f0000ef8:          |           |   5a92                 lw      s5,36(sp)
f0000efa:          |           |   5a22                 lw      s4,40(sp)
f0000efc:          |           |   59b2                 lw      s3,44(sp)
f0000efe:          |           |   5942                 lw      s2,48(sp)
f0000f00:          |           |   54d2                 lw      s1,52(sp)
f0000f02:          |           |   5462                 lw      s0,56(sp)
f0000f04:          |           |   50f2                 lw      ra,60(sp)
f0000f06:          |           |   6121                 addi    sp,sp,64
f0000f08:          |           |   8082                 ret
f0000f0a:          \-----------|-> 450d                 li      a0,3
f0000f0c:                      \-- b7c5                 j       f0000eec <dif_spi_host_transaction+0x1c8>

f0000f0e <ottf_machine_ecall_handler>:
ottf_machine_ecall_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:49
// A global random number generator testutil handle.
rand_testutils_rng_t rand_testutils_rng_ctx;

// The OTTF overrides the default machine ecall exception handler to implement
// FreeRTOS context switching, required for supporting cooperative scheduling.
void ottf_machine_ecall_handler(void) {
f0000f0e:           1101                        addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:50
  if (pxCurrentTCB != NULL) {
f0000f10:           ce06                        sw      ra,28(sp)
f0000f12:           f0001517            auipc   a0,0xf0001
f0000f16:           14e50513            addi    a0,a0,334 # e0002060 <pxCurrentTCB>
f0000f1a:           4108                        lw      a0,0(a0)
f0000f1c:       /-- c509                        beqz    a0,f0000f26 <ottf_machine_ecall_handler+0x18>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:54
    // If the pointer to the current TCB is not NULL, we are operating in
    // concurrency mode. In this case, our default behavior is to assume a
    // context switch has been requested.
    vTaskSwitchContext();
f0000f1e:       |   40f2                        lw      ra,28(sp)
f0000f20:       |   6105                        addi    sp,sp,32
f0000f22:       |   2800106f            j       f00021a2 <vTaskSwitchContext>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:57
    return;
  }
  LOG_ERROR(
f0000f26:       \-> 00002517            auipc   a0,0x2
f0000f2a:           7ce50513            addi    a0,a0,1998 # f00036f4 <kDeviceLogBypassUartAddress>
f0000f2e:           4108                        lw      a0,0(a0)
f0000f30:       /-- c911                        beqz    a0,f0000f44 <ottf_machine_ecall_handler+0x36>
f0000f32:       |   1000f517            auipc   a0,0x1000f
f0000f36:       |   14650513            addi    a0,a0,326 # 10078 <_non_volatile_scratch_end+0xff90078>
f0000f3a:       |   4581                        li      a1,0
f0000f3c:       |   40f2                        lw      ra,28(sp)
f0000f3e:       |   6105                        addi    sp,sp,32
f0000f40:       |   7f80006f            j       f0001738 <base_log_internal_dv>
f0000f44:       \-> 00002597            auipc   a1,0x2
f0000f48:           f4858593            addi    a1,a1,-184 # f0002e8c <kOttfTestConfig+0x30c>
f0000f4c:           0028                        addi    a0,sp,8
f0000f4e:           4651                        li      a2,20
f0000f50:           788010ef            jal     ra,f00026d8 <memcpy>
f0000f54:           0028                        addi    a0,sp,8
f0000f56:           740000ef            jal     ra,f0001696 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:60
      "OTTF currently only supports use of machine-mode ecall for FreeRTOS "
      "context switching.");
}
f0000f5a:           40f2                        lw      ra,28(sp)
f0000f5c:           6105                        addi    sp,sp,32
f0000f5e:           8082                        ret

f0000f60 <_ottf_main>:
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:120
  report_test_status(result);
}

dif_uart_t *ottf_console(void) { return &uart0; }

void _ottf_main(void) {
f0000f60:                 7179                  addi    sp,sp,-48
f0000f62:                 d606                  sw      ra,44(sp)
f0000f64:                 d422                  sw      s0,40(sp)
f0000f66:                 d226                  sw      s1,36(sp)
f0000f68:                 d04a                  sw      s2,32(sp)
f0000f6a:                 6511                  lui     a0,0x4
f0000f6c:                 35450513              addi    a0,a0,852 # 4354 <_stack_size+0x354>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:121
  test_status_set(kTestStatusInTest);
f0000f70:                 676000ef              jal     ra,f00015e6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:124

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
f0000f74:                 00002517              auipc   a0,0x2
f0000f78:                 76850513              addi    a0,a0,1896 # f00036dc <kDeviceType>
f0000f7c:                 4108                  lw      a0,0(a0)
f0000f7e:                 00002917              auipc   s2,0x2
f0000f82:                 77690913              addi    s2,s2,1910 # f00036f4 <kDeviceLogBypassUartAddress>
f0000f86:                 00002497              auipc   s1,0x2
f0000f8a:                 bfa48493              addi    s1,s1,-1030 # f0002b80 <kOttfTestConfig>
f0000f8e:          /----- c91d                  beqz    a0,f0000fc4 <_ottf_main+0x64>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:125
    init_uart();
f0000f90:          |      28fd                  jal     f000108e <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:126
    LOG_INFO("Running %s", kOttfTestConfig.file);
f0000f92:          |      00092503              lw      a0,0(s2)
f0000f96:          |      40c0                  lw      s0,4(s1)
f0000f98:          |  /-- c911                  beqz    a0,f0000fac <_ottf_main+0x4c>
f0000f9a:          |  |   1000f517              auipc   a0,0x1000f
f0000f9e:          |  |   0f250513              addi    a0,a0,242 # 1008c <_non_volatile_scratch_end+0xff9008c>
f0000fa2:          |  |   4585                  li      a1,1
f0000fa4:          |  |   8622                  mv      a2,s0
f0000fa6:          |  |   792000ef              jal     ra,f0001738 <base_log_internal_dv>
f0000faa:          +--|-- a829                  j       f0000fc4 <_ottf_main+0x64>
f0000fac:          |  \-> 00002597              auipc   a1,0x2
f0000fb0:          |      ef458593              addi    a1,a1,-268 # f0002ea0 <kOttfTestConfig+0x320>
f0000fb4:          |      850a                  mv      a0,sp
f0000fb6:          |      4651                  li      a2,20
f0000fb8:          |      720010ef              jal     ra,f00026d8 <memcpy>
f0000fbc:          |      850a                  mv      a0,sp
f0000fbe:          |      85a2                  mv      a1,s0
f0000fc0:          |      6d6000ef              jal     ra,f0001696 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:132
  }

  // Initialize a global random number generator testutil context to provide
  // tests with a source of entropy for randomizing test behaviors.
  dif_rv_core_ibex_t rv_core_ibex;
  CHECK_DIF_OK(dif_rv_core_ibex_init(
f0000fc4:          \----> c11f0537              lui     a0,0xc11f0
f0000fc8:                 082c                  addi    a1,sp,24
f0000fca:                 60e000ef              jal     ra,f00015d8 <dif_rv_core_ibex_init>
f0000fce:       /-------- cd15                  beqz    a0,f000100a <_ottf_main+0xaa>
f0000fd0:       |         842a                  mv      s0,a0
f0000fd2:       |         00092503              lw      a0,0(s2)
f0000fd6:       |     /-- c911                  beqz    a0,f0000fea <_ottf_main+0x8a>
f0000fd8:       |     |   1000f517              auipc   a0,0x1000f
f0000fdc:       |     |   0c850513              addi    a0,a0,200 # 100a0 <_non_volatile_scratch_end+0xff900a0>
f0000fe0:       |     |   4585                  li      a1,1
f0000fe2:       |     |   8622                  mv      a2,s0
f0000fe4:       |     |   754000ef              jal     ra,f0001738 <base_log_internal_dv>
f0000fe8:       |  /--|-- a829                  j       f0001002 <_ottf_main+0xa2>
f0000fea:       |  |  \-> 00002597              auipc   a1,0x2
f0000fee:       |  |      eca58593              addi    a1,a1,-310 # f0002eb4 <kOttfTestConfig+0x334>
f0000ff2:       |  |      850a                  mv      a0,sp
f0000ff4:       |  |      4651                  li      a2,20
f0000ff6:       |  |      6e2010ef              jal     ra,f00026d8 <memcpy>
f0000ffa:       |  |      850a                  mv      a0,sp
f0000ffc:       |  |      85a2                  mv      a1,s0
f0000ffe:       |  |      698000ef              jal     ra,f0001696 <base_log_internal_core>
f0001002:       |  \----> 6531                  lui     a0,0xc
f0001004:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001008:       |         2bf9                  jal     f00015e6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:135
      mmio_region_from_addr(TOP_EARLGREY_RV_CORE_IBEX_CFG_BASE_ADDR),
      &rv_core_ibex));
  rand_testutils_rng_ctx = rand_testutils_init(&rv_core_ibex);
f000100a:       \-------> 850a                  mv      a0,sp
f000100c:                 082c                  addi    a1,sp,24
f000100e:                 2381                  jal     f000154e <rand_testutils_init>
f0001010:                 f0001517              auipc   a0,0xf0001
f0001014:                 09450513              addi    a0,a0,148 # e00020a4 <rand_testutils_rng_ctx>
f0001018:                 858a                  mv      a1,sp
f000101a:                 4661                  li      a2,24
f000101c:                 6bc010ef              jal     ra,f00026d8 <memcpy>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:138

  // Run the test.
  if (kOttfTestConfig.enable_concurrency) {
f0001020:                 0004c503              lbu     a0,0(s1)
f0001024:          /----- c11d                  beqz    a0,f000104a <_ottf_main+0xea>
ottf_task_create():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:65
  return xTaskCreate(/*pvTaskCode=*/task_function, /*pcName=*/task_name,
f0001026:          |      00000517              auipc   a0,0x0
f000102a:          |      13a50513              addi    a0,a0,314 # f0001160 <test_wrapper>
f000102e:          |      00002597              auipc   a1,0x2
f0001032:          |      d0858593              addi    a1,a1,-760 # f0002d36 <kOttfTestConfig+0x1b6>
f0001036:          |      10000613              li      a2,256
f000103a:          |      4705                  li      a4,1
f000103c:          |      4681                  li      a3,0
f000103e:          |      4781                  li      a5,0
f0001040:          |      723000ef              jal     ra,f0001f62 <xTaskCreate>
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:143
    // Run `test_main()` in a FreeRTOS task, allowing other FreeRTOS tasks to
    // be spawned, if requested in the main test task. Note, we spawn the main
    // test task at a priority level of 0.
    ottf_task_create(test_wrapper, "test_main", kOttfFreeRtosMinStackSize, 0);
    vTaskStartScheduler();
f0001044:          |      24a010ef              jal     ra,f000228e <vTaskStartScheduler>
f0001048:          |  /-- a019                  j       f000104e <_ottf_main+0xee>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:146
  } else {
    // Otherwise, launch `test_main()` on bare-metal.
    test_wrapper(NULL);
f000104a:          \--|-> 4501                  li      a0,0
f000104c:             |   2a11                  jal     f0001160 <test_wrapper>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:150
  }

  // Unreachable.
  CHECK(false);
f000104e:             \-> 00092503              lw      a0,0(s2)
f0001052:             /-- c909                  beqz    a0,f0001064 <_ottf_main+0x104>
f0001054:             |   1000f517              auipc   a0,0x1000f
f0001058:             |   06050513              addi    a0,a0,96 # 100b4 <_non_volatile_scratch_end+0xff900b4>
f000105c:             |   4581                  li      a1,0
f000105e:             |   6da000ef              jal     ra,f0001738 <base_log_internal_dv>
f0001062:          /--|-- a821                  j       f000107a <_ottf_main+0x11a>
f0001064:          |  \-> 00002597              auipc   a1,0x2
f0001068:          |      e6458593              addi    a1,a1,-412 # f0002ec8 <kOttfTestConfig+0x348>
f000106c:          |      850a                  mv      a0,sp
f000106e:          |      4651                  li      a2,20
f0001070:          |      668010ef              jal     ra,f00026d8 <memcpy>
f0001074:          |      850a                  mv      a0,sp
f0001076:          |      620000ef              jal     ra,f0001696 <base_log_internal_core>
f000107a:          \----> 6531                  lui     a0,0xc
f000107c:                 aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001080:                 239d                  jal     f00015e6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:151
}
f0001082:                 5902                  lw      s2,32(sp)
f0001084:                 5492                  lw      s1,36(sp)
f0001086:                 5422                  lw      s0,40(sp)
f0001088:                 50b2                  lw      ra,44(sp)
f000108a:                 6145                  addi    sp,sp,48
f000108c:                 8082                  ret

f000108e <init_uart>:
init_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:81
static void init_uart(void) {
f000108e:                 1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:82
  CHECK_DIF_OK(dif_uart_init(
f0001090:                 ce06                  sw      ra,28(sp)
f0001092:                 cc22                  sw      s0,24(sp)
f0001094:                 ca26                  sw      s1,20(sp)
f0001096:                 f0001597              auipc   a1,0xf0001
f000109a:                 fb258593              addi    a1,a1,-78 # e0002048 <uart0>
f000109e:                 c0000537              lui     a0,0xc0000
f00010a2:                 5d5000ef              jal     ra,f0001e76 <dif_uart_init>
f00010a6:                 00002497              auipc   s1,0x2
f00010aa:                 64e48493              addi    s1,s1,1614 # f00036f4 <kDeviceLogBypassUartAddress>
f00010ae:       /-------- cd05                  beqz    a0,f00010e6 <init_uart+0x58>
f00010b0:       |         842a                  mv      s0,a0
f00010b2:       |         4088                  lw      a0,0(s1)
f00010b4:       |     /-- c911                  beqz    a0,f00010c8 <init_uart+0x3a>
f00010b6:       |     |   1000f517              auipc   a0,0x1000f
f00010ba:       |     |   01250513              addi    a0,a0,18 # 100c8 <_non_volatile_scratch_end+0xff900c8>
f00010be:       |     |   4585                  li      a1,1
f00010c0:       |     |   8622                  mv      a2,s0
f00010c2:       |     |   676000ef              jal     ra,f0001738 <base_log_internal_dv>
f00010c6:       |  /--|-- a821                  j       f00010de <init_uart+0x50>
f00010c8:       |  |  \-> 00002597              auipc   a1,0x2
f00010cc:       |  |      e1458593              addi    a1,a1,-492 # f0002edc <kOttfTestConfig+0x35c>
f00010d0:       |  |      850a                  mv      a0,sp
f00010d2:       |  |      4651                  li      a2,20
f00010d4:       |  |      604010ef              jal     ra,f00026d8 <memcpy>
f00010d8:       |  |      850a                  mv      a0,sp
f00010da:       |  |      85a2                  mv      a1,s0
f00010dc:       |  |      2b6d                  jal     f0001696 <base_log_internal_core>
f00010de:       |  \----> 6531                  lui     a0,0xc
f00010e0:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00010e4:       |         2309                  jal     f00015e6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:84
  CHECK_DIF_OK(
f00010e6:       \-------> 00002517              auipc   a0,0x2
f00010ea:                 60250513              addi    a0,a0,1538 # f00036e8 <kUartBaudrate>
f00010ee:                 4108                  lw      a0,0(a0)
f00010f0:                 00002597              auipc   a1,0x2
f00010f4:                 5f058593              addi    a1,a1,1520 # f00036e0 <kClockFreqPeripheralHz>
f00010f8:                 418c                  lw      a1,0(a1)
f00010fa:                 c02a                  sw      a0,0(sp)
f00010fc:                 c22e                  sw      a1,4(sp)
f00010fe:                 c402                  sw      zero,8(sp)
f0001100:                 4505                  li      a0,1
f0001102:                 c62a                  sw      a0,12(sp)
f0001104:                 f0001517              auipc   a0,0xf0001
f0001108:                 f4450513              addi    a0,a0,-188 # e0002048 <uart0>
f000110c:                 858a                  mv      a1,sp
f000110e:                 577000ef              jal     ra,f0001e84 <dif_uart_configure>
f0001112:       /-------- cd05                  beqz    a0,f000114a <init_uart+0xbc>
f0001114:       |         842a                  mv      s0,a0
f0001116:       |         4088                  lw      a0,0(s1)
f0001118:       |     /-- c911                  beqz    a0,f000112c <init_uart+0x9e>
f000111a:       |     |   1000f517              auipc   a0,0x1000f
f000111e:       |     |   fc250513              addi    a0,a0,-62 # 100dc <_non_volatile_scratch_end+0xff900dc>
f0001122:       |     |   4585                  li      a1,1
f0001124:       |     |   8622                  mv      a2,s0
f0001126:       |     |   612000ef              jal     ra,f0001738 <base_log_internal_dv>
f000112a:       |  /--|-- a821                  j       f0001142 <init_uart+0xb4>
f000112c:       |  |  \-> 00002597              auipc   a1,0x2
f0001130:       |  |      dc458593              addi    a1,a1,-572 # f0002ef0 <kOttfTestConfig+0x370>
f0001134:       |  |      850a                  mv      a0,sp
f0001136:       |  |      4651                  li      a2,20
f0001138:       |  |      5a0010ef              jal     ra,f00026d8 <memcpy>
f000113c:       |  |      850a                  mv      a0,sp
f000113e:       |  |      85a2                  mv      a1,s0
f0001140:       |  |      2b99                  jal     f0001696 <base_log_internal_core>
f0001142:       |  \----> 6531                  lui     a0,0xc
f0001144:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001148:       |         2979                  jal     f00015e6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:91
  base_uart_stdout(&uart0);
f000114a:       \-------> f0001517              auipc   a0,0xf0001
f000114e:                 efe50513              addi    a0,a0,-258 # e0002048 <uart0>
f0001152:                 61e000ef              jal     ra,f0001770 <base_uart_stdout>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:92
}
f0001156:                 44d2                  lw      s1,20(sp)
f0001158:                 4462                  lw      s0,24(sp)
f000115a:                 40f2                  lw      ra,28(sp)
f000115c:                 6105                  addi    sp,sp,32
f000115e:                 8082                  ret

f0001160 <test_wrapper>:
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:110
static void test_wrapper(void *task_parameters) {
f0001160:                 1101                  addi    sp,sp,-32
f0001162:                 ce06                  sw      ra,28(sp)
f0001164:                 cc22                  sw      s0,24(sp)
f0001166:                 ca26                  sw      s1,20(sp)
f0001168:                 6531                  lui     a0,0xc
f000116a:                 aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:112
  bool result = manufacturer_pre_test_hook();
f000116e:                 54a010ef              jal     ra,f00026b8 <manufacturer_pre_test_hook>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:113
  result = result && test_main();
f0001172:          /----- cd11                  beqz    a0,f000118e <test_wrapper+0x2e>
f0001174:          |      fb0ff0ef              jal     ra,f0000924 <test_main>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:114
  result = result && manufacturer_post_test_hook();
f0001178:          +----- c919                  beqz    a0,f000118e <test_wrapper+0x2e>
f000117a:          |      542010ef              jal     ra,f00026bc <manufacturer_post_test_hook>
f000117e:          |  /-- e509                  bnez    a0,f0001188 <test_wrapper+0x28>
f0001180:          |  |   6531                  lui     a0,0xc
f0001182:          |  |   aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001186:          +--|-- a021                  j       f000118e <test_wrapper+0x2e>
f0001188:          |  \-> 6525                  lui     a0,0x9
f000118a:          |      00d50413              addi    s0,a0,13 # 900d <_non_volatile_scratch_size+0x400d>
report_test_status():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:96
  if (kDeviceType != kDeviceSimDV) {
f000118e:          \----> 00002517              auipc   a0,0x2
f0001192:                 54e50513              addi    a0,a0,1358 # f00036dc <kDeviceType>
f0001196:                 4108                  lw      a0,0(a0)
f0001198:       /-------- c521                  beqz    a0,f00011e0 <test_wrapper+0x80>
f000119a:       |         00002497              auipc   s1,0x2
f000119e:       |         9e648493              addi    s1,s1,-1562 # f0002b80 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:97
    if (kOttfTestConfig.can_clobber_uart) {
f00011a2:       |         0014c503              lbu     a0,1(s1)
f00011a6:       |     /-- c111                  beqz    a0,f00011aa <test_wrapper+0x4a>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:98
      init_uart();
f00011a8:       |     |   35dd                  jal     f000108e <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:100
    LOG_INFO("Finished %s", kOttfTestConfig.file);
f00011aa:       |     \-> 00002517              auipc   a0,0x2
f00011ae:       |         54a50513              addi    a0,a0,1354 # f00036f4 <kDeviceLogBypassUartAddress>
f00011b2:       |         4108                  lw      a0,0(a0)
f00011b4:       |         40c4                  lw      s1,4(s1)
f00011b6:       |     /-- c909                  beqz    a0,f00011c8 <test_wrapper+0x68>
f00011b8:       |     |   1000f517              auipc   a0,0x1000f
f00011bc:       |     |   f3850513              addi    a0,a0,-200 # 100f0 <_non_volatile_scratch_end+0xff900f0>
f00011c0:       |     |   4585                  li      a1,1
f00011c2:       |     |   8626                  mv      a2,s1
f00011c4:       |     |   2b95                  jal     f0001738 <base_log_internal_dv>
f00011c6:       |  /--|-- a821                  j       f00011de <test_wrapper+0x7e>
f00011c8:       |  |  \-> 00002597              auipc   a1,0x2
f00011cc:       |  |      d3c58593              addi    a1,a1,-708 # f0002f04 <kOttfTestConfig+0x384>
f00011d0:       |  |      850a                  mv      a0,sp
f00011d2:       |  |      4651                  li      a2,20
f00011d4:       |  |      504010ef              jal     ra,f00026d8 <memcpy>
f00011d8:       |  |      850a                  mv      a0,sp
f00011da:       |  |      85a6                  mv      a1,s1
f00011dc:       |  |      296d                  jal     f0001696 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:101
    test_coverage_send_buffer();
f00011de:       |  \----> 2801                  jal     f00011ee <test_coverage_send_buffer>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:104
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
f00011e0:       \-------> 8522                  mv      a0,s0
f00011e2:                 2111                  jal     f00015e6 <test_status_set>
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:116
}
f00011e4:                 44d2                  lw      s1,20(sp)
f00011e6:                 4462                  lw      s0,24(sp)
f00011e8:                 40f2                  lw      ra,28(sp)
f00011ea:                 6105                  addi    sp,sp,32
f00011ec:                 8082                  ret

f00011ee <test_coverage_send_buffer>:
test_coverage_send_buffer():
/proc/self/cwd/sw/device/lib/testing/test_framework/coverage_none.c:9

#include "sw/device/lib/testing/test_framework/coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
f00011ee:       8082                    ret

f00011f0 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:18

/**
 * This is called if configUSE_MALLOC_FAILED_HOOK is set to 1 in
 * FreeRTOSConfig.h, and a call to pvPortMalloc() fails.
 */
void vApplicationMallocFailedHook(void) {
f00011f0:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:19
  LOG_INFO("FreeRTOS malloc failed. Increase heap size in FreeRTOSConfig.h");
f00011f2:              ce06                     sw      ra,28(sp)
f00011f4:              00002517                 auipc   a0,0x2
f00011f8:              50050513                 addi    a0,a0,1280 # f00036f4 <kDeviceLogBypassUartAddress>
f00011fc:              4108                     lw      a0,0(a0)
f00011fe:       /----- ed01                     bnez    a0,f0001216 <vApplicationMallocFailedHook+0x26>
f0001200:       |      00002597                 auipc   a1,0x2
f0001204:       |      dc858593                 addi    a1,a1,-568 # f0002fc8 <kOttfTestConfig+0x448>
f0001208:       |      0028                     addi    a0,sp,8
f000120a:       |      4651                     li      a2,20
f000120c:       |      4cc010ef                 jal     ra,f00026d8 <memcpy>
f0001210:       |      0028                     addi    a0,sp,8
f0001212:       |      2151                     jal     f0001696 <base_log_internal_core>
f0001214:       |  /-- a039                     j       f0001222 <vApplicationMallocFailedHook+0x32>
f0001216:       \--|-> 1000f517                 auipc   a0,0x1000f
f000121a:          |   eee50513                 addi    a0,a0,-274 # 10104 <_non_volatile_scratch_end+0xff90104>
f000121e:          |   4581                     li      a1,0
f0001220:          |   2b21                     jal     f0001738 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:20
  irq_global_ctrl(false);
f0001222:          \-> 4501                     li      a0,0
f0001224:              28b1                     jal     f0001280 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:21
  abort();
f0001226:              49a010ef                 jal     ra,f00026c0 <abort>

f000122a <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:28

/**
 * This is called if configCHECK_FOR_STACK_OVERFLOW is set to 1 or 2 in
 * FreeRTOSConfig.h, and a task detects a stack overflow.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
f000122a:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:29
  LOG_INFO("FreeRTOS stack overflow. Increase stack size of task: %s");
f000122c:              ce06                     sw      ra,28(sp)
f000122e:              00002517                 auipc   a0,0x2
f0001232:              4c650513                 addi    a0,a0,1222 # f00036f4 <kDeviceLogBypassUartAddress>
f0001236:              4108                     lw      a0,0(a0)
f0001238:       /----- ed01                     bnez    a0,f0001250 <vApplicationStackOverflowHook+0x26>
f000123a:       |      00002597                 auipc   a1,0x2
f000123e:       |      da258593                 addi    a1,a1,-606 # f0002fdc <kOttfTestConfig+0x45c>
f0001242:       |      0028                     addi    a0,sp,8
f0001244:       |      4651                     li      a2,20
f0001246:       |      492010ef                 jal     ra,f00026d8 <memcpy>
f000124a:       |      0028                     addi    a0,sp,8
f000124c:       |      21a9                     jal     f0001696 <base_log_internal_core>
f000124e:       |  /-- a039                     j       f000125c <vApplicationStackOverflowHook+0x32>
f0001250:       \--|-> 1000f517                 auipc   a0,0x1000f
f0001254:          |   ec850513                 addi    a0,a0,-312 # 10118 <_non_volatile_scratch_end+0xff90118>
f0001258:          |   4581                     li      a1,0
f000125a:          |   29f9                     jal     f0001738 <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:30
  irq_global_ctrl(false);
f000125c:          \-> 4501                     li      a0,0
f000125e:              200d                     jal     f0001280 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:31
  abort();
f0001260:              460010ef                 jal     ra,f00026c0 <abort>

f0001264 <xPortStartScheduler>:
xPortStartScheduler():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:93
// ----------------------------------------------------------------------------
// Scheduler Setup
// ----------------------------------------------------------------------------
extern void xPortStartFirstTask(void);

BaseType_t xPortStartScheduler(void) {
f0001264:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:97
#if configUSE_PREEMPTION
  vPortSetupTimerInterrupt();
#endif  // configUSE_PREEMPTION
  irq_timer_ctrl(true);
f0001266:       c606                    sw      ra,12(sp)
f0001268:       4505                    li      a0,1
f000126a:       2089                    jal     f00012ac <irq_timer_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:98
  irq_external_ctrl(true);
f000126c:       4505                    li      a0,1
f000126e:       2015                    jal     f0001292 <irq_external_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:99
  irq_software_ctrl(true);
f0001270:       4505                    li      a0,1
f0001272:       2881                    jal     f00012c2 <irq_software_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:103
  // Note: no need to call 'irq_global_ctrl(true)' since the global interrupt
  // enable is set in the xPortStartFirstTask sub-routine in
  // sw/device/lib/testing/test_framework/freertos_port.S.
  xPortStartFirstTask();
f0001274:       ad4ff0ef                jal     ra,f0000548 <xPortStartFirstTask>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:106

  // Unreachable.
  return pdFAIL;
f0001278:       4501                    li      a0,0
f000127a:       40b2                    lw      ra,12(sp)
f000127c:       0141                    addi    sp,sp,16
f000127e:       8082                    ret

f0001280 <irq_global_ctrl>:
irq_global_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:18
void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
}

void irq_global_ctrl(bool en) {
  if (en) {
f0001280:       /-- c509                        beqz    a0,f000128a <irq_global_ctrl+0xa>
f0001282:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
f0001284:       |   30052073            csrs    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
f0001288:       |   8082                        ret
f000128a:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
f000128c:           30053073            csrc    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
}
f0001290:           8082                        ret

f0001292 <irq_external_ctrl>:
irq_external_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
f0001292:       /-- c519                        beqz    a0,f00012a0 <irq_external_ctrl+0xe>
f0001294:       |   6505                        lui     a0,0x1
f0001296:       |   80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
f000129a:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f000129e:       |   8082                        ret
f00012a0:       \-> 6505                        lui     a0,0x1
f00012a2:           80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f00012a6:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
}
f00012aa:           8082                        ret

f00012ac <irq_timer_ctrl>:
irq_timer_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
f00012ac:       /-- c511                        beqz    a0,f00012b8 <irq_timer_ctrl+0xc>
f00012ae:       |   08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
f00012b2:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f00012b6:       |   8082                        ret
f00012b8:       \-> 08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f00012bc:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
}
f00012c0:           8082                        ret

f00012c2 <irq_software_ctrl>:
irq_software_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
f00012c2:       /-- c509                        beqz    a0,f00012cc <irq_software_ctrl+0xa>
f00012c4:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
f00012c6:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f00012ca:       |   8082                        ret
f00012cc:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f00012ce:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
}
f00012d2:           8082                        ret

f00012d4 <ottf_generic_fault_print>:
ottf_generic_fault_print():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:56
    "Reserved",
    "Reserved",
    "Reserved",
};

void ottf_generic_fault_print(const char *reason, uint32_t mcause) {
f00012d4:           7179                        addi    sp,sp,-48
f00012d6:           d606                        sw      ra,44(sp)
f00012d8:           d422                        sw      s0,40(sp)
f00012da:           d226                        sw      s1,36(sp)
f00012dc:           d04a                        sw      s2,32(sp)
f00012de:           ce4e                        sw      s3,28(sp)
f00012e0:           892e                        mv      s2,a1
f00012e2:           89aa                        mv      s3,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:57
  uint32_t mepc = ibex_mepc_read();
f00012e4:           3ee010ef            jal     ra,f00026d2 <ibex_mepc_read>
f00012e8:           84aa                        mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f00012ea:           3e2010ef            jal     ra,f00026cc <ibex_mtval_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f00012ee:           00002597            auipc   a1,0x2
f00012f2:           40658593            addi    a1,a1,1030 # f00036f4 <kDeviceLogBypassUartAddress>
f00012f6:           418c                        lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f00012f8:           842a                        mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f00012fa:       /-- c18d                        beqz    a1,f000131c <ottf_generic_fault_print+0x48>
f00012fc:       |   1000f517            auipc   a0,0x1000f
f0001300:       |   e3050513            addi    a0,a0,-464 # 1012c <_non_volatile_scratch_end+0xff9012c>
f0001304:       |   4591                        li      a1,4
f0001306:       |   864e                        mv      a2,s3
f0001308:       |   86ca                        mv      a3,s2
f000130a:       |   8726                        mv      a4,s1
f000130c:       |   87a2                        mv      a5,s0
f000130e:       |   49f2                        lw      s3,28(sp)
f0001310:       |   5902                        lw      s2,32(sp)
f0001312:       |   5492                        lw      s1,36(sp)
f0001314:       |   5422                        lw      s0,40(sp)
f0001316:       |   50b2                        lw      ra,44(sp)
f0001318:       |   6145                        addi    sp,sp,48
f000131a:       |   a939                        j       f0001738 <base_log_internal_dv>
f000131c:       \-> 00002597            auipc   a1,0x2
f0001320:           f4058593            addi    a1,a1,-192 # f000325c <kOttfTestConfig+0x6dc>
f0001324:           0028                        addi    a0,sp,8
f0001326:           4651                        li      a2,20
f0001328:           3b0010ef            jal     ra,f00026d8 <memcpy>
f000132c:           0028                        addi    a0,sp,8
f000132e:           85ce                        mv      a1,s3
f0001330:           864a                        mv      a2,s2
f0001332:           86a6                        mv      a3,s1
f0001334:           8722                        mv      a4,s0
f0001336:           2685                        jal     f0001696 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:61
            mtval);
}
f0001338:           49f2                        lw      s3,28(sp)
f000133a:           5902                        lw      s2,32(sp)
f000133c:           5492                        lw      s1,36(sp)
f000133e:           5422                        lw      s0,40(sp)
f0001340:           50b2                        lw      ra,44(sp)
f0001342:           6145                        addi    sp,sp,48
f0001344:           8082                        ret

f0001346 <ottf_exception_handler>:
ottf_exception_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:79
 */
OT_WEAK
void *pxCurrentTCB = NULL;

OT_WEAK
void ottf_exception_handler(void) {
f0001346:           1141                        addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:80
  uint32_t mcause = ibex_mcause_read();
f0001348:           c606                        sw      ra,12(sp)
f000134a:           37c010ef            jal     ra,f00026c6 <ibex_mcause_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:82

  switch ((ibex_exc_t)(mcause & kIbexExcMax)) {
f000134e:           897d                        andi    a0,a0,31
f0001350:           45ad                        li      a1,11
f0001352:       /-- 02a5ef63            bltu    a1,a0,f0001390 <ottf_exception_handler+0x4a>
f0001356:       |   050a                        slli    a0,a0,0x2
f0001358:       |   00002597            auipc   a1,0x2
f000135c:       |   c9858593            addi    a1,a1,-872 # f0002ff0 <kOttfTestConfig+0x470>
f0001360:       |   952e                        add     a0,a0,a1
f0001362:       |   4108                        lw      a0,0(a0)
f0001364:       |   8502                        jr      a0
f0001366:       |   40b2                        lw      ra,12(sp)
f0001368:       |   0141                        addi    sp,sp,16
f000136a:       |   a025                        j       f0001392 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:84
    case kIbexExcInstrMisaligned:
      ottf_instr_misaligned_fault_handler();
f000136c:       |   40b2                        lw      ra,12(sp)
f000136e:       |   0141                        addi    sp,sp,16
f0001370:       |   a00d                        j       f0001392 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:87
      break;
    case kIbexExcInstrAccessFault:
      ottf_instr_access_fault_handler();
f0001372:       |   40b2                        lw      ra,12(sp)
f0001374:       |   0141                        addi    sp,sp,16
f0001376:       |   a831                        j       f0001392 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:90
      break;
    case kIbexExcIllegalInstrFault:
      ottf_illegal_instr_fault_handler();
f0001378:       |   40b2                        lw      ra,12(sp)
f000137a:       |   0141                        addi    sp,sp,16
f000137c:       |   a819                        j       f0001392 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:93
      break;
    case kIbexExcBreakpoint:
      ottf_breakpoint_handler();
f000137e:       |   40b2                        lw      ra,12(sp)
f0001380:       |   0141                        addi    sp,sp,16
f0001382:       |   a801                        j       f0001392 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:105
      break;
    case kIbexExcMachineECall:
      ottf_machine_ecall_handler();
      break;
    case kIbexExcUserECall:
      ottf_user_ecall_handler();
f0001384:       |   40b2                        lw      ra,12(sp)
f0001386:       |   0141                        addi    sp,sp,16
f0001388:       |   a029                        j       f0001392 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:102
      ottf_machine_ecall_handler();
f000138a:       |   40b2                        lw      ra,12(sp)
f000138c:       |   0141                        addi    sp,sp,16
f000138e:       |   b641                        j       f0000f0e <ottf_machine_ecall_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:108
      break;
    default:
      generic_fault_handler();
f0001390:       \-> 2009                        jal     f0001392 <ottf_breakpoint_handler>

f0001392 <ottf_breakpoint_handler>:
generic_fault_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:63
static void generic_fault_handler(void) {
f0001392:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:64
  uint32_t mcause = ibex_mcause_read();
f0001394:       c606                    sw      ra,12(sp)
f0001396:       330010ef                jal     ra,f00026c6 <ibex_mcause_read>
f000139a:       85aa                    mv      a1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:65
  ottf_generic_fault_print(exception_reason[mcause & kIbexExcMax], mcause);
f000139c:       897d                    andi    a0,a0,31
f000139e:       050a                    slli    a0,a0,0x2
f00013a0:       00002617                auipc   a2,0x2
f00013a4:       ef860613                addi    a2,a2,-264 # f0003298 <exception_reason>
f00013a8:       9532                    add     a0,a0,a2
f00013aa:       4108                    lw      a0,0(a0)
f00013ac:       3725                    jal     f00012d4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:66
  abort();
f00013ae:       312010ef                jal     ra,f00026c0 <abort>

f00013b2 <ottf_software_isr>:
ottf_software_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:141
OT_WEAK
OT_ALIAS("generic_fault_handler")
void ottf_user_ecall_handler(void);

OT_WEAK
void ottf_software_isr(void) {
f00013b2:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:142
  ottf_generic_fault_print("Software IRQ", ibex_mcause_read());
f00013b4:       c606                    sw      ra,12(sp)
f00013b6:       310010ef                jal     ra,f00026c6 <ibex_mcause_read>
f00013ba:       85aa                    mv      a1,a0
f00013bc:       00002517                auipc   a0,0x2
f00013c0:       cc150513                addi    a0,a0,-831 # f000307d <kOttfTestConfig+0x4fd>
f00013c4:       3f01                    jal     f00012d4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:143
  abort();
f00013c6:       2fa010ef                jal     ra,f00026c0 <abort>

f00013ca <ottf_timer_isr>:
ottf_timer_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:147
}

OT_WEAK
void ottf_timer_isr(void) {
f00013ca:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:148
  ottf_generic_fault_print("Timer IRQ", ibex_mcause_read());
f00013cc:       c606                    sw      ra,12(sp)
f00013ce:       2f8010ef                jal     ra,f00026c6 <ibex_mcause_read>
f00013d2:       85aa                    mv      a1,a0
f00013d4:       00002517                auipc   a0,0x2
f00013d8:       cb650513                addi    a0,a0,-842 # f000308a <kOttfTestConfig+0x50a>
f00013dc:       3de5                    jal     f00012d4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:149
  abort();
f00013de:       2e2010ef                jal     ra,f00026c0 <abort>

f00013e2 <ottf_flow_control_isr>:
ottf_flow_control_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:153
}

OT_WEAK
bool ottf_flow_control_isr(void) { return false; }
f00013e2:       4501                    li      a0,0
f00013e4:       8082                    ret

f00013e6 <ottf_external_isr>:
ottf_external_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:156

OT_WEAK
void ottf_external_isr(void) {
f00013e6:                    7179                       addi    sp,sp,-48
f00013e8:                    d606                       sw      ra,44(sp)
f00013ea:                    d422                       sw      s0,40(sp)
f00013ec:                    d226                       sw      s1,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:159
  const uint32_t kPlicTarget = kTopEarlgreyPlicTargetIbex0;
  dif_rv_plic_irq_id_t plic_irq_id;
  CHECK_DIF_OK(dif_rv_plic_irq_claim(&ottf_plic, kPlicTarget, &plic_irq_id));
f00013ee:                    f0001517           auipc   a0,0xf0001
f00013f2:                    c6250513           addi    a0,a0,-926 # e0002050 <ottf_plic>
f00013f6:                    1010                       addi    a2,sp,32
f00013f8:                    4581                       li      a1,0
f00013fa:                    2231                       jal     f0001506 <dif_rv_plic_irq_claim>
f00013fc:                    00002497           auipc   s1,0x2
f0001400:                    2f848493           addi    s1,s1,760 # f00036f4 <kDeviceLogBypassUartAddress>
f0001404:          /-------- c91d                       beqz    a0,f000143a <ottf_external_isr+0x54>
f0001406:          |         842a                       mv      s0,a0
f0001408:          |         4088                       lw      a0,0(s1)
f000140a:          |     /-- c909                       beqz    a0,f000141c <ottf_external_isr+0x36>
f000140c:          |     |   1000f517           auipc   a0,0x1000f
f0001410:          |     |   d3450513           addi    a0,a0,-716 # 10140 <_non_volatile_scratch_end+0xff90140>
f0001414:          |     |   4585                       li      a1,1
f0001416:          |     |   8622                       mv      a2,s0
f0001418:          |     |   2605                       jal     f0001738 <base_log_internal_dv>
f000141a:          |  /--|-- a821                       j       f0001432 <ottf_external_isr+0x4c>
f000141c:          |  |  \-> 00002597           auipc   a1,0x2
f0001420:          |  |      e5458593           addi    a1,a1,-428 # f0003270 <kOttfTestConfig+0x6f0>
f0001424:          |  |      0028                       addi    a0,sp,8
f0001426:          |  |      4651                       li      a2,20
f0001428:          |  |      2b0010ef           jal     ra,f00026d8 <memcpy>
f000142c:          |  |      0028                       addi    a0,sp,8
f000142e:          |  |      85a2                       mv      a1,s0
f0001430:          |  |      249d                       jal     f0001696 <base_log_internal_core>
f0001432:          |  \----> 6531                       lui     a0,0xc
f0001434:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001438:          |         227d                       jal     f00015e6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:162

  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
f000143a:          \-------> 5502                       lw      a0,32(sp)
f000143c:                    050a                       slli    a0,a0,0x2
f000143e:                    00002597           auipc   a1,0x2
f0001442:                    2ba58593           addi    a1,a1,698 # f00036f8 <top_earlgrey_plic_interrupt_for_peripheral>
f0001446:                    952e                       add     a0,a0,a1
f0001448:                    4108                       lw      a0,0(a0)
f000144a:                    4585                       li      a1,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164

  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f000144c:       /----------- 04b51b63           bne     a0,a1,f00014a2 <ottf_external_isr+0xbc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:165
      ottf_flow_control_isr()) {
f0001450:       |            3f49                       jal     f00013e2 <ottf_flow_control_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164
  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f0001452:       +----------- c921                       beqz    a0,f00014a2 <ottf_external_isr+0xbc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:167
    // Complete the IRQ at PLIC.
    CHECK_DIF_OK(
f0001454:       |            5602                       lw      a2,32(sp)
f0001456:       |            f0001517           auipc   a0,0xf0001
f000145a:       |            bfa50513           addi    a0,a0,-1030 # e0002050 <ottf_plic>
f000145e:       |            4581                       li      a1,0
f0001460:       |            20f9                       jal     f000152e <dif_rv_plic_irq_complete>
f0001462:       |  /-------- c91d                       beqz    a0,f0001498 <ottf_external_isr+0xb2>
f0001464:       |  |         842a                       mv      s0,a0
f0001466:       |  |         4088                       lw      a0,0(s1)
f0001468:       |  |     /-- c909                       beqz    a0,f000147a <ottf_external_isr+0x94>
f000146a:       |  |     |   1000f517           auipc   a0,0x1000f
f000146e:       |  |     |   cea50513           addi    a0,a0,-790 # 10154 <_non_volatile_scratch_end+0xff90154>
f0001472:       |  |     |   4585                       li      a1,1
f0001474:       |  |     |   8622                       mv      a2,s0
f0001476:       |  |     |   24c9                       jal     f0001738 <base_log_internal_dv>
f0001478:       |  |  /--|-- a821                       j       f0001490 <ottf_external_isr+0xaa>
f000147a:       |  |  |  \-> 00002597           auipc   a1,0x2
f000147e:       |  |  |      e0a58593           addi    a1,a1,-502 # f0003284 <kOttfTestConfig+0x704>
f0001482:       |  |  |      0028                       addi    a0,sp,8
f0001484:       |  |  |      4651                       li      a2,20
f0001486:       |  |  |      252010ef           jal     ra,f00026d8 <memcpy>
f000148a:       |  |  |      0028                       addi    a0,sp,8
f000148c:       |  |  |      85a2                       mv      a1,s0
f000148e:       |  |  |      2421                       jal     f0001696 <base_log_internal_core>
f0001490:       |  |  \----> 6531                       lui     a0,0xc
f0001492:       |  |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001496:       |  |         2a81                       jal     f00015e6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:174
    return;
  }

  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
  abort();
}
f0001498:       |  \-------> 5492                       lw      s1,36(sp)
f000149a:       |            5422                       lw      s0,40(sp)
f000149c:       |            50b2                       lw      ra,44(sp)
f000149e:       |            6145                       addi    sp,sp,48
f00014a0:       |            8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:172
  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
f00014a2:       \----------> 224010ef           jal     ra,f00026c6 <ibex_mcause_read>
f00014a6:                    85aa                       mv      a1,a0
f00014a8:                    00002517           auipc   a0,0x2
f00014ac:                    c9250513           addi    a0,a0,-878 # f000313a <kOttfTestConfig+0x5ba>
f00014b0:                    3515                       jal     f00012d4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:173
  abort();
f00014b2:                    20e010ef           jal     ra,f00026c0 <abort>

f00014b6 <ottf_external_nmi_handler>:
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:176

static void generic_internal_irq_handler(void) {
f00014b6:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f00014b8:       c606                    sw      ra,12(sp)
f00014ba:       20c010ef                jal     ra,f00026c6 <ibex_mcause_read>
f00014be:       85aa                    mv      a1,a0
f00014c0:       00002517                auipc   a0,0x2
f00014c4:       d8e50513                addi    a0,a0,-626 # f000324e <kOttfTestConfig+0x6ce>
f00014c8:       3531                    jal     f00012d4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f00014ca:       1f6010ef                jal     ra,f00026c0 <abort>

f00014ce <ottf_internal_isr>:
ottf_internal_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:190
OT_WEAK
OT_ALIAS("generic_internal_irq_handler")
void ottf_load_integrity_error_handler(void);

OT_WEAK
void ottf_internal_isr(void) {
f00014ce:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:191
  uint32_t mcause = ibex_mcause_read();
f00014d0:              c606                     sw      ra,12(sp)
f00014d2:              1f4010ef                 jal     ra,f00026c6 <ibex_mcause_read>
f00014d6:              800005b7                 lui     a1,0x80000
f00014da:              05fd                     addi    a1,a1,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:192
  switch ((ibex_internal_irq_t)(mcause)) {
f00014dc:          /-- 00b50863                 beq     a0,a1,f00014ec <ottf_internal_isr+0x1e>
f00014e0:          |   5581                     li      a1,-32
f00014e2:       /--|-- 00b51863                 bne     a0,a1,f00014f2 <ottf_internal_isr+0x24>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:194
    case kIbexInternalIrqLoadInteg:
      ottf_load_integrity_error_handler();
f00014e6:       |  |   40b2                     lw      ra,12(sp)
f00014e8:       |  |   0141                     addi    sp,sp,16
f00014ea:       |  |   b7f1                     j       f00014b6 <ottf_external_nmi_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:197
      break;
    case kIbexInternalIrqNmi:
      ottf_external_nmi_handler();
f00014ec:       |  \-> 40b2                     lw      ra,12(sp)
f00014ee:       |      0141                     addi    sp,sp,16
f00014f0:       |      b7d9                     j       f00014b6 <ottf_external_nmi_handler>
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f00014f2:       \----> 1d4010ef                 jal     ra,f00026c6 <ibex_mcause_read>
f00014f6:              85aa                     mv      a1,a0
f00014f8:              00002517                 auipc   a0,0x2
f00014fc:              d5650513                 addi    a0,a0,-682 # f000324e <kOttfTestConfig+0x6ce>
f0001500:              3bd1                     jal     f00012d4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f0001502:              1be010ef                 jal     ra,f00026c0 <abort>

f0001506 <dif_rv_plic_irq_claim>:
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:245
}

dif_result_t dif_rv_plic_irq_claim(const dif_rv_plic_t *plic,
                                   dif_rv_plic_target_t target,
                                   dif_rv_plic_irq_id_t *claim_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
f0001506:           00153693            seqz    a3,a0
f000150a:           00b035b3            snez    a1,a1
f000150e:           8dd5                        or      a1,a1,a3
f0001510:           00163693            seqz    a3,a2
f0001514:           8ecd                        or      a3,a3,a1
f0001516:           458d                        li      a1,3
f0001518:       /-- ea89                        bnez    a3,f000152a <dif_rv_plic_irq_claim+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
      claim_data == NULL) {
    return kDifBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->base_addr, claim_complete_reg);
f000151a:       |   4108                        lw      a0,0(a0)
f000151c:       |   002005b7            lui     a1,0x200
f0001520:       |   0591                        addi    a1,a1,4
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001522:       |   952e                        add     a0,a0,a1
f0001524:       |   4108                        lw      a0,0(a0)
f0001526:       |   4581                        li      a1,0
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
f0001528:       |   c208                        sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:254

  return kDifOk;
}
f000152a:       \-> 852e                        mv      a0,a1
f000152c:           8082                        ret

f000152e <dif_rv_plic_irq_complete>:
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:259

dif_result_t dif_rv_plic_irq_complete(const dif_rv_plic_t *plic,
                                      dif_rv_plic_target_t target,
                                      dif_rv_plic_irq_id_t complete_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
f000152e:           00153693            seqz    a3,a0
f0001532:           00b035b3            snez    a1,a1
f0001536:           8ecd                        or      a3,a3,a1
f0001538:           458d                        li      a1,3
f000153a:       /-- ea81                        bnez    a3,f000154a <dif_rv_plic_irq_complete+0x1c>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:266
  }

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->base_addr, claim_complete_reg, complete_data);
f000153c:       |   4108                        lw      a0,0(a0)
f000153e:       |   4581                        li      a1,0
f0001540:       |   002006b7            lui     a3,0x200
f0001544:       |   0691                        addi    a3,a3,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0001546:       |   9536                        add     a0,a0,a3
f0001548:       |   c110                        sw      a2,0(a0)
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:269

  return kDifOk;
}
f000154a:       \-> 852e                        mv      a0,a1
f000154c:           8082                        ret

f000154e <rand_testutils_init>:
rand_testutils_init():
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:31
/**
 * The default timeout in usecs for fetching data from the entropy source.
 */
static const uint32_t kEntropyFetchTimeoutMicros = 100000;

rand_testutils_rng_t rand_testutils_init(dif_rv_core_ibex_t *rv_core_ibex) {
f000154e:                 1101                  addi    sp,sp,-32
f0001550:                 ce06                  sw      ra,28(sp)
f0001552:                 cc22                  sw      s0,24(sp)
f0001554:                 ca26                  sw      s1,20(sp)
f0001556:                 84ae                  mv      s1,a1
f0001558:                 842a                  mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:32
  CHECK(rv_core_ibex != NULL);
f000155a:       /-------- ed85                  bnez    a1,f0001592 <rand_testutils_init+0x44>
f000155c:       |         00002517              auipc   a0,0x2
f0001560:       |         19850513              addi    a0,a0,408 # f00036f4 <kDeviceLogBypassUartAddress>
f0001564:       |         4108                  lw      a0,0(a0)
f0001566:       |     /-- c901                  beqz    a0,f0001576 <rand_testutils_init+0x28>
f0001568:       |     |   1000f517              auipc   a0,0x1000f
f000156c:       |     |   c0050513              addi    a0,a0,-1024 # 10168 <_non_volatile_scratch_end+0xff90168>
f0001570:       |     |   4581                  li      a1,0
f0001572:       |     |   22d9                  jal     f0001738 <base_log_internal_dv>
f0001574:       |  /--|-- a819                  j       f000158a <rand_testutils_init+0x3c>
f0001576:       |  |  \-> 00002597              auipc   a1,0x2
f000157a:       |  |      e2e58593              addi    a1,a1,-466 # f00033a4 <exception_reason+0x10c>
f000157e:       |  |      850a                  mv      a0,sp
f0001580:       |  |      4651                  li      a2,20
f0001582:       |  |      156010ef              jal     ra,f00026d8 <memcpy>
f0001586:       |  |      850a                  mv      a0,sp
f0001588:       |  |      2239                  jal     f0001696 <base_log_internal_core>
f000158a:       |  \----> 6531                  lui     a0,0xc
f000158c:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001590:       |         2899                  jal     f00015e6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  // For the simulation platforms (DV and Verilator), the LFSR reseed frequency
  // is arbitrarily set to 255. The test may choose to update this value if
  // needed.
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f0001592:       \-------> c004                  sw      s1,0(s0)
f0001594:                 6561                  lui     a0,0x18
f0001596:                 6a050513              addi    a0,a0,1696 # 186a0 <test_status_set.kLogFields.2+0x84e8>
f000159a:                 c048                  sw      a0,4(s0)
f000159c:                 deadc537              lui     a0,0xdeadc
f00015a0:                 eef50513              addi    a0,a0,-273 # deadbeef <_non_volatile_scratch_end+0xeea5beef>
f00015a4:                 c408                  sw      a0,8(s0)
f00015a6:                 80000537              lui     a0,0x80000
f00015aa:                 05750513              addi    a0,a0,87 # 80000057 <_non_volatile_scratch_end+0x8ff80057>
f00015ae:                 c448                  sw      a0,12(s0)
f00015b0:                 10000513              li      a0,256
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
      .polynomial_coefficients = kLfsrPolynomialCoefficients,
      .reseed_frequency = 256,
      .op_counter = UINT32_MAX};
  // For non-runtime-sensitive simulations (for example, using FPGA or the
  // debug board), always fetch random data from the hardware.
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f00015b4:                 00002597              auipc   a1,0x2
f00015b8:                 12858593              addi    a1,a1,296 # f00036dc <kDeviceType>
f00015bc:                 418c                  lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f00015be:                 c808                  sw      a0,16(s0)
f00015c0:                 557d                  li      a0,-1
f00015c2:                 4609                  li      a2,2
f00015c4:                 c848                  sw      a0,20(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f00015c6:             /-- 00c5e463              bltu    a1,a2,f00015ce <rand_testutils_init+0x80>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:46
    ctx.reseed_frequency = 0;
f00015ca:             |   00042823              sw      zero,16(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:48
  }
  return ctx;
f00015ce:             \-> 44d2                  lw      s1,20(sp)
f00015d0:                 4462                  lw      s0,24(sp)
f00015d2:                 40f2                  lw      ra,28(sp)
f00015d4:                 6105                  addi    sp,sp,32
f00015d6:                 8082                  ret

f00015d8 <dif_rv_core_ibex_init>:
dif_rv_core_ibex_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:19
#include "rv_core_ibex_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_core_ibex_init(mmio_region_t base_addr,
                                   dif_rv_core_ibex_t *rv_core_ibex) {
  if (rv_core_ibex == NULL) {
f00015d8:       /----- c581                     beqz    a1,f00015e0 <dif_rv_core_ibex_init+0x8>
f00015da:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:23
    return kDifBadArg;
  }

  rv_core_ibex->base_addr = base_addr;
f00015dc:       |      c188                     sw      a0,0(a1)
f00015de:       |  /-- a011                     j       f00015e2 <dif_rv_core_ibex_init+0xa>
f00015e0:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:26

  return kDifOk;
}
f00015e2:          \-> 8532                     mv      a0,a2
f00015e4:              8082                     ret

f00015e6 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
f00015e6:                    1101                       addi    sp,sp,-32
f00015e8:                    ce06                       sw      ra,28(sp)
f00015ea:                    65b1                       lui     a1,0xc
f00015ec:                    aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
f00015f0:             /----- 02b50063           beq     a0,a1,f0001610 <test_status_set+0x2a>
f00015f4:             |      65a5                       lui     a1,0x9
f00015f6:             |      05b5                       addi    a1,a1,13
f00015f8:          /--|----- 02b50d63           beq     a0,a1,f0001632 <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f00015fc:          |  |      00002597           auipc   a1,0x2
f0001600:          |  |      0f458593           addi    a1,a1,244 # f00036f0 <kDeviceTestStatusAddress>
f0001604:          |  |      418c                       lw      a1,0(a1)
f0001606:          |  |  /-- c191                       beqz    a1,f000160a <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001608:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
f000160a:          |  |  \-> 40f2                       lw      ra,28(sp)
f000160c:          |  |      6105                       addi    sp,sp,32
f000160e:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0001610:          |  \----> 00002517           auipc   a0,0x2
f0001614:          |         0e450513           addi    a0,a0,228 # f00036f4 <kDeviceLogBypassUartAddress>
f0001618:          |         4108                       lw      a0,0(a0)
f000161a:          |  /----- ed0d                       bnez    a0,f0001654 <test_status_set+0x6e>
f000161c:          |  |      00002597           auipc   a1,0x2
f0001620:          |  |      dec58593           addi    a1,a1,-532 # f0003408 <exception_reason+0x170>
f0001624:          |  |      0028                       addi    a0,sp,8
f0001626:          |  |      4651                       li      a2,20
f0001628:          |  |      0b0010ef           jal     ra,f00026d8 <memcpy>
f000162c:          |  |      0028                       addi    a0,sp,8
f000162e:          |  |      20a5                       jal     f0001696 <base_log_internal_core>
f0001630:          |  |  /-- a805                       j       f0001660 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0001632:          \--|--|-> 00002517           auipc   a0,0x2
f0001636:             |  |   0c250513           addi    a0,a0,194 # f00036f4 <kDeviceLogBypassUartAddress>
f000163a:             |  |   4108                       lw      a0,0(a0)
f000163c:       /-----|--|-- ed05                       bnez    a0,f0001674 <test_status_set+0x8e>
f000163e:       |     |  |   00002597           auipc   a1,0x2
f0001642:       |     |  |   db658593           addi    a1,a1,-586 # f00033f4 <exception_reason+0x15c>
f0001646:       |     |  |   0028                       addi    a0,sp,8
f0001648:       |     |  |   4651                       li      a2,20
f000164a:       |     |  |   08e010ef           jal     ra,f00026d8 <memcpy>
f000164e:       |     |  |   0028                       addi    a0,sp,8
f0001650:       |     |  |   2099                       jal     f0001696 <base_log_internal_core>
f0001652:       |  /--|--|-- a03d                       j       f0001680 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0001654:       |  |  \--|-> 1000f517           auipc   a0,0x1000f
f0001658:       |  |     |   b6450513           addi    a0,a0,-1180 # 101b8 <_non_volatile_scratch_end+0xff901b8>
f000165c:       |  |     |   4581                       li      a1,0
f000165e:       |  |     |   28e9                       jal     f0001738 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001660:       |  |     \-> 00002517           auipc   a0,0x2
f0001664:       |  |         09050513           addi    a0,a0,144 # f00036f0 <kDeviceTestStatusAddress>
f0001668:       |  |         4108                       lw      a0,0(a0)
f000166a:       |  |  /----- c505                       beqz    a0,f0001692 <test_status_set+0xac>
f000166c:       |  |  |      65b1                       lui     a1,0xc
f000166e:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001672:       |  |  |  /-- a839                       j       f0001690 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0001674:       \--|--|--|-> 1000f517           auipc   a0,0x1000f
f0001678:          |  |  |   b3050513           addi    a0,a0,-1232 # 101a4 <_non_volatile_scratch_end+0xff901a4>
f000167c:          |  |  |   4581                       li      a1,0
f000167e:          |  |  |   286d                       jal     f0001738 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001680:          \--|--|-> 00002517           auipc   a0,0x2
f0001684:             |  |   07050513           addi    a0,a0,112 # f00036f0 <kDeviceTestStatusAddress>
f0001688:             |  |   4108                       lw      a0,0(a0)
f000168a:             +--|-- c501                       beqz    a0,f0001692 <test_status_set+0xac>
f000168c:             |  |   65a5                       lui     a1,0x9
f000168e:             |  |   05b5                       addi    a1,a1,13
f0001690:             |  \-> c10c                       sw      a1,0(a0)
f0001692:             \----> 02e010ef           jal     ra,f00026c0 <abort>

f0001696 <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
f0001696:              7179                     addi    sp,sp,-48
f0001698:              c606                     sw      ra,12(sp)
f000169a:              c422                     sw      s0,8(sp)
f000169c:              c226                     sw      s1,4(sp)
f000169e:              842a                     mv      s0,a0
f00016a0:              d646                     sw      a7,44(sp)
f00016a2:              d442                     sw      a6,40(sp)
f00016a4:              d23e                     sw      a5,36(sp)
f00016a6:              d03a                     sw      a4,32(sp)
f00016a8:              ce36                     sw      a3,28(sp)
f00016aa:              cc32                     sw      a2,24(sp)
f00016ac:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
f00016ae:              4148                     lw      a0,4(a0)
f00016b0:              800005b7                 lui     a1,0x80000
f00016b4:              fff58613                 addi    a2,a1,-1 # 7fffffff <_non_volatile_scratch_end+0x8ff7ffff>
f00016b8:              4581                     li      a1,0
f00016ba:              108010ef                 jal     ra,f00027c2 <memchr>
f00016be:              4054                     lw      a3,4(s0)
f00016c0:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
f00016c4:              02f00593                 li      a1,47
f00016c8:              8536                     mv      a0,a3
f00016ca:              1a6010ef                 jal     ra,f0002870 <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
f00016ce:       /----- c501                     beqz    a0,f00016d6 <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
f00016d0:       |      00150693                 addi    a3,a0,1
f00016d4:       |  /-- a011                     j       f00016d8 <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
f00016d6:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f00016d8:          \-> 4008                     lw      a0,0(s0)
f00016da:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
f00016dc:       /----- 00a5ea63                 bltu    a1,a0,f00016f0 <base_log_internal_core+0x5a>
f00016e0:       |      050a                     slli    a0,a0,0x2
f00016e2:       |      00002597                 auipc   a1,0x2
f00016e6:       |      d5658593                 addi    a1,a1,-682 # f0003438 <exception_reason+0x1a0>
f00016ea:       |      952e                     add     a0,a0,a1
f00016ec:       |      410c                     lw      a1,0(a0)
f00016ee:       |  /-- a029                     j       f00016f8 <base_log_internal_core+0x62>
f00016f0:       \--|-> 00002597                 auipc   a1,0x2
f00016f4:          |   d4458593                 addi    a1,a1,-700 # f0003434 <exception_reason+0x19c>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
f00016f8:          \-> f0001497                 auipc   s1,0xf0001
f00016fc:              95c48493                 addi    s1,s1,-1700 # e0002054 <base_log_internal_core.global_log_counter>
f0001700:              0004d603                 lhu     a2,0(s1)
f0001704:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f0001706:              00002517                 auipc   a0,0x2
f000170a:              d1650513                 addi    a0,a0,-746 # f000341c <exception_reason+0x184>
f000170e:              2865                     jal     f00017c6 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
f0001710:              00049503                 lh      a0,0(s1)
f0001714:              0505                     addi    a0,a0,1
f0001716:              00a49023                 sh      a0,0(s1)
f000171a:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
f000171c:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
f000171e:              4808                     lw      a0,16(s0)
f0001720:              084c                     addi    a1,sp,20
f0001722:              28d9                     jal     f00017f8 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
f0001724:              00002517                 auipc   a0,0x2
f0001728:              d0750513                 addi    a0,a0,-761 # f000342b <exception_reason+0x193>
f000172c:              2869                     jal     f00017c6 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
f000172e:              4492                     lw      s1,4(sp)
f0001730:              4422                     lw      s0,8(sp)
f0001732:              40b2                     lw      ra,12(sp)
f0001734:              6145                     addi    sp,sp,48
f0001736:              8082                     ret

f0001738 <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
f0001738:              1101                     addi    sp,sp,-32
f000173a:              ce46                     sw      a7,28(sp)
f000173c:              cc42                     sw      a6,24(sp)
f000173e:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
f0001740:              00002797                 auipc   a5,0x2
f0001744:              fb478793                 addi    a5,a5,-76 # f00036f4 <kDeviceLogBypassUartAddress>
f0001748:              439c                     lw      a5,0(a5)
f000174a:              c83a                     sw      a4,16(sp)
f000174c:              c636                     sw      a3,12(sp)
f000174e:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001750:              c388                     sw      a0,0(a5)
f0001752:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
f0001754:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001756:       /----- c989                     beqz    a1,f0001768 <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
f0001758:       |  /-> 4512                     lw      a0,4(sp)
f000175a:       |  |   00450613                 addi    a2,a0,4
f000175e:       |  |   c232                     sw      a2,4(sp)
f0001760:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001762:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001764:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
f0001766:       |  \-- f9ed                     bnez    a1,f0001758 <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
f0001768:       \----> 6105                     addi    sp,sp,32
f000176a:              8082                     ret

f000176c <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
f000176c:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
f000176e:       8082                    ret

f0001770 <base_uart_stdout>:
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:79
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
f0001770:       f0001597                auipc   a1,0xf0001
f0001774:       8e858593                addi    a1,a1,-1816 # e0002058 <base_stdout>
base_set_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:66
  base_stdout = out;
f0001778:       c188                    sw      a0,0(a1)
f000177a:       00000517                auipc   a0,0x0
f000177e:       00c50513                addi    a0,a0,12 # f0001786 <base_dev_uart>
f0001782:       c1c8                    sw      a0,4(a1)
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:82
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
f0001784:       8082                    ret

f0001786 <base_dev_uart>:
base_dev_uart():
/proc/self/cwd/sw/device/lib/runtime/print.c:69
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
f0001786:                 1101                  addi    sp,sp,-32
f0001788:                 ce06                  sw      ra,28(sp)
f000178a:                 cc22                  sw      s0,24(sp)
f000178c:                 ca26                  sw      s1,20(sp)
f000178e:                 c84a                  sw      s2,16(sp)
f0001790:                 c64e                  sw      s3,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001792:       /-------- c20d                  beqz    a2,f00017b4 <base_dev_uart+0x2e>
f0001794:       |         8432                  mv      s0,a2
f0001796:       |         892e                  mv      s2,a1
f0001798:       |         89aa                  mv      s3,a0
f000179a:       |         4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:72
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifOk) {
f000179c:       |  /----> 00990533              add     a0,s2,s1
f00017a0:       |  |      00054583              lbu     a1,0(a0)
f00017a4:       |  |      854e                  mv      a0,s3
f00017a6:       |  |      2f69                  jal     f0001f40 <dif_uart_byte_send_polled>
f00017a8:       |  |  /-- e519                  bnez    a0,f00017b6 <base_dev_uart+0x30>
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f00017aa:       |  |  |   0485                  addi    s1,s1,1
f00017ac:       |  \--|-- fe9418e3              bne     s0,s1,f000179c <base_dev_uart+0x16>
f00017b0:       |     |   84a2                  mv      s1,s0
f00017b2:       |     +-- a011                  j       f00017b6 <base_dev_uart+0x30>
f00017b4:       \-----|-> 4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:77
}
f00017b6:             \-> 8526                  mv      a0,s1
f00017b8:                 49b2                  lw      s3,12(sp)
f00017ba:                 4942                  lw      s2,16(sp)
f00017bc:                 44d2                  lw      s1,20(sp)
f00017be:                 4462                  lw      s0,24(sp)
f00017c0:                 40f2                  lw      ra,28(sp)
f00017c2:                 6105                  addi    sp,sp,32
f00017c4:                 8082                  ret

f00017c6 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84

size_t base_printf(const char *format, ...) {
f00017c6:       7179                    addi    sp,sp,-48
f00017c8:       c606                    sw      ra,12(sp)
f00017ca:       d646                    sw      a7,44(sp)
f00017cc:       d442                    sw      a6,40(sp)
f00017ce:       d23e                    sw      a5,36(sp)
f00017d0:       d03a                    sw      a4,32(sp)
f00017d2:       ce36                    sw      a3,28(sp)
f00017d4:       cc32                    sw      a2,24(sp)
f00017d6:       ca2e                    sw      a1,20(sp)
f00017d8:       f0001597                auipc   a1,0xf0001
f00017dc:       88058593                addi    a1,a1,-1920 # e0002058 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
f00017e0:       4190                    lw      a2,0(a1)
f00017e2:       41cc                    lw      a1,4(a1)
f00017e4:       872a                    mv      a4,a0
f00017e6:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
f00017e8:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f00017ea:       0854                    addi    a3,sp,20
f00017ec:       8532                    mv      a0,a2
f00017ee:       863a                    mv      a2,a4
f00017f0:       200d                    jal     f0001812 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
f00017f2:       40b2                    lw      ra,12(sp)
f00017f4:       6145                    addi    sp,sp,48
f00017f6:       8082                    ret

f00017f8 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
f00017f8:       f0001697                auipc   a3,0xf0001
f00017fc:       86068693                addi    a3,a3,-1952 # e0002058 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f0001800:       4290                    lw      a2,0(a3)
f0001802:       42d4                    lw      a3,4(a3)
f0001804:       872e                    mv      a4,a1
f0001806:       87aa                    mv      a5,a0
f0001808:       8532                    mv      a0,a2
f000180a:       85b6                    mv      a1,a3
f000180c:       863e                    mv      a2,a5
f000180e:       86ba                    mv      a3,a4
f0001810:       a009                    j       f0001812 <base_vfprintf>

f0001812 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
f0001812:                                                                    715d                       addi    sp,sp,-80
f0001814:                                                                    c686                       sw      ra,76(sp)
f0001816:                                                                    c4a2                       sw      s0,72(sp)
f0001818:                                                                    c2a6                       sw      s1,68(sp)
f000181a:                                                                    c0ca                       sw      s2,64(sp)
f000181c:                                                                    de4e                       sw      s3,60(sp)
f000181e:                                                                    dc52                       sw      s4,56(sp)
f0001820:                                                                    da56                       sw      s5,52(sp)
f0001822:                                                                    d85a                       sw      s6,48(sp)
f0001824:                                                                    d65e                       sw      s7,44(sp)
f0001826:                                                                    d462                       sw      s8,40(sp)
f0001828:                                                                    d266                       sw      s9,36(sp)
f000182a:                                                                    d06a                       sw      s10,32(sp)
f000182c:                                                                    ce6e                       sw      s11,28(sp)
f000182e:                                                                    8cb2                       mv      s9,a2
f0001830:                                                                    892a                       mv      s2,a0
f0001832:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
f0001834:                                                                /-- c199                       beqz    a1,f000183a <base_vfprintf+0x28>
f0001836:                                                                |   89ae                       mv      s3,a1
f0001838:                                                             /--|-- a029                       j       f0001842 <base_vfprintf+0x30>
f000183a:                                                             |  \-> 00000997           auipc   s3,0x0
f000183e:                                                             |      f3298993           addi    s3,s3,-206 # f000176c <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
f0001842:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
f0001844:                                                                    000cc503           lbu     a0,0(s9)
f0001848:       /----------------------------------------------------------- 42050563           beqz    a0,f0001c72 <base_vfprintf+0x460>
f000184c:       |                                                            4a81                       li      s5,0
f000184e:       |                                                            02500c13           li      s8,37
f0001852:       |                                                            4d25                       li      s10,9
f0001854:       |                                                            4a29                       li      s4,10
f0001856:       |                                                            658d                       lui     a1,0x3
f0001858:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_manifest_code_end+0x242>
f000185c:       |                                                            c02e                       sw      a1,0(sp)
f000185e:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
f0001860:       |        |                                               /-> 0ff57413           andi    s0,a0,255
f0001864:       |        |                                            /--|-- 01840963           beq     s0,s8,f0001876 <base_vfprintf+0x64>
f0001868:       |        |                                            +--|-- c419                       beqz    s0,f0001876 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
f000186a:       |        |                                            |  |   009c8533           add     a0,s9,s1
f000186e:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
f0001872:       |        |                                            |  |   0485                       addi    s1,s1,1
f0001874:       |        |                                            |  \-- b7f5                       j       f0001860 <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
f0001876:       |        |                                            \--/-X c491                       beqz    s1,f0001882 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
f0001878:       |        |                                               |   854a                       mv      a0,s2
f000187a:       |        |                                               |   85e6                       mv      a1,s9
f000187c:       |        |                                               |   8626                       mv      a2,s1
f000187e:       |        |                                               |   9982                       jalr    s3
f0001880:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
f0001882:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,f0001c74 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
f0001886:       |  |     |                                                   009c8533           add     a0,s9,s1
f000188a:       |  |     |                                                   00154603           lbu     a2,1(a0)
f000188e:       |  |     |                                                   02100713           li      a4,33
f0001892:       |  |     |                                            /----- 00e61863           bne     a2,a4,f00018a2 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001896:       |  |     |                                            |      00254583           lbu     a1,2(a0)
f000189a:       |  |     |                                            |      00250693           addi    a3,a0,2
f000189e:       |  |     |                                            |      4b05                       li      s6,1
f00018a0:       |  |     |                                            |  /-- a029                       j       f00018aa <base_vfprintf+0x98>
f00018a2:       |  |     |                                            \--|-> 4b01                       li      s6,0
f00018a4:       |  |     |                                               |   00150693           addi    a3,a0,1
f00018a8:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f00018aa:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,f0001c60 <base_vfprintf+0x44e>
f00018ae:       |  |  |  |                                                   4481                       li      s1,0
f00018b0:       |  |  |  |                                                   4b81                       li      s7,0
f00018b2:       |  |  |  |                                                   4501                       li      a0,0
f00018b4:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
f00018b8:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
f00018bc:       |  |  |  |                                                   00168c93           addi    s9,a3,1
f00018c0:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
f00018c4:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f00018c8:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
f00018cc:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,f0001902 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
f00018d0:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
f00018d4:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,f00018ea <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
f00018d6:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
f00018da:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
f00018dc:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f00018e0:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f00018e4:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
f00018e6:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,f00018c0 <base_vfprintf+0xae>
f00018e8:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       f0001c60 <base_vfprintf+0x44e>
f00018ea:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
f00018ee:       |  |  |  |                                   |     |  |      03000613           li      a2,48
f00018f2:       |  |  |  |                                   |     |  |      02000513           li      a0,32
f00018f6:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,f00018d6 <base_vfprintf+0xc4>
f00018fa:       |  |  |  |                                   |     |         03000513           li      a0,48
f00018fe:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
f0001900:       |  |  |  |                                   |     \-------- b7c5                       j       f00018e0 <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
f0001902:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,f000190a <base_vfprintf+0xf8>
f0001904:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,f0001912 <base_vfprintf+0x100>
f0001908:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       f0001c94 <base_vfprintf+0x482>
f000190a:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
f000190e:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,f0001c94 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001912:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
f0001916:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,f0001968 <base_vfprintf+0x156>
f000191a:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
f000191c:       |  |  |  |  |                                         |      00002597           auipc   a1,0x2
f0001920:       |  |  |  |  |                                         |      b2c58593           addi    a1,a1,-1236 # f0003448 <exception_reason+0x1b0>
f0001924:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
f0001926:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
f0001928:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
f000192a:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,f0001be2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
f000192e:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
f0001930:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
f0001934:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
f0001936:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
f000193a:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,f0001952 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
f000193e:       |  |  |  |  |  |                                      |  |   00002597           auipc   a1,0x2
f0001942:       |  |  |  |  |  |                                      |  |   ba158593           addi    a1,a1,-1119 # f00034df <exception_reason+0x247>
f0001946:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
f0001948:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
f000194a:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
f000194c:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
f000194e:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001952:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
f0001956:       |  |  |  |  |  |                                      |      00002817           auipc   a6,0x2
f000195a:       |  |  |  |  |  |                                      |      b9c80813           addi    a6,a6,-1124 # f00034f2 <kDigitsLow>
f000195e:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
f0001960:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
f0001962:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
f0001964:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
f0001966:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       f0001bae <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001968:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
f000196c:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,f00019a6 <base_vfprintf+0x194>
f0001970:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,f0001be2 <base_vfprintf+0x3d0>
f0001974:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,f0001be2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
f0001978:       |  |  |  |  |  |        |                                |   00002597           auipc   a1,0x2
f000197c:       |  |  |  |  |  |        |                                |   b6558593           addi    a1,a1,-1179 # f00034dd <exception_reason+0x245>
f0001980:       |  |  |  |  |  |        |                             /--|-- a851                       j       f0001a14 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
f0001982:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,f00019a6 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
f0001986:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
f0001988:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
f000198c:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f000198e:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
f0001990:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
f0001994:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001996:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001998:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
f000199c:       |  |  |  |  |  |        |                             |  |   00002897           auipc   a7,0x2
f00019a0:       |  |  |  |  |  |        |                             |  |   b8388893           addi    a7,a7,-1149 # f000351f <kDigitsHigh>
f00019a4:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       f0001b88 <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
f00019a6:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
f00019a8:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
f00019ac:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
f00019ae:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
f00019b0:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
f00019b4:       |  |  |  |  |  |        |           |                 |      00002817           auipc   a6,0x2
f00019b8:       |  |  |  |  |  |        |           |                 |      b6b80813           addi    a6,a6,-1173 # f000351f <kDigitsHigh>
f00019bc:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       f0001ba8 <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
f00019be:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,f0001be2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
f00019c2:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
f00019c4:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
f00019c8:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f00019ca:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
f00019cc:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
f00019d0:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f00019d2:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f00019d4:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
f00019d8:       |  |  |  |  |  |        |        |  |                 |      00002897           auipc   a7,0x2
f00019dc:       |  |  |  |  |  |        |        |  |                 |      b4788893           addi    a7,a7,-1209 # f000351f <kDigitsHigh>
f00019e0:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       f0001bd6 <base_vfprintf+0x3c4>
f00019e2:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
f00019e4:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
f00019e8:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
f00019ea:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
f00019ec:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,f0001bfc <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
f00019f0:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,f0001c54 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
f00019f4:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00002597           auipc   a1,0x2
f00019f8:       |  |  |  |  |  |  |     |  |  |  |  |                 |      af058593           addi    a1,a1,-1296 # f00034e4 <exception_reason+0x24c>
f00019fc:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
f00019fe:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       f0001bec <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
f0001a00:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,f0001be2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
f0001a04:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
f0001a06:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
f0001a0a:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
f0001a0c:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
f0001a0e:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
f0001a12:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
f0001a14:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
f0001a16:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       f0001bec <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
f0001a18:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,f0001be2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
f0001a1c:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
f0001a1e:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
f0001a22:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
f0001a24:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
f0001a26:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
f0001a2a:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00002817           auipc   a6,0x2
f0001a2e:       |  |  |  |  |  |  |  |  |  |  |  |  |                        ac880813           addi    a6,a6,-1336 # f00034f2 <kDigitsLow>
f0001a32:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
f0001a34:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       f0001baa <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
f0001a36:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,f0001be2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001a3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00002597           auipc   a1,0x2
f0001a3e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     aa758593           addi    a1,a1,-1369 # f00034e1 <exception_reason+0x249>
f0001a42:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
f0001a44:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001a46:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
f0001a48:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
f0001a4a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
f0001a4e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
f0001a50:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001a52:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
f0001a56:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00002817           auipc   a6,0x2
f0001a5a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     a9c80813           addi    a6,a6,-1380 # f00034f2 <kDigitsLow>
f0001a5e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
f0001a60:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
f0001a64:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
f0001a66:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001a68:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
f0001a6a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e31                       jal     f0001d86 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
f0001a6c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
f0001a70:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       f0001bf2 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
f0001a72:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
f0001a74:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
f0001a78:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
f0001a7a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
f0001a7c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
f0001a7e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
f0001a82:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
f0001a86:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001a88:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
f0001a8a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
f0001a8c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
f0001a90:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e95                       jal     f0001e04 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
f0001a92:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001a94:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001a96:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
f0001a9a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
f0001a9e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001aa0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
f0001aa2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,f0001a9a <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001aa4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
f0001aa8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001aac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  a4158593           addi    a1,a1,-1471 # f00034e9 <exception_reason+0x251>
f0001ab0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001ab2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001ab4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001ab6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001ab8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
f0001abc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001abe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001ac0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
f0001ac4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001ac8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  a2658593           addi    a1,a1,-1498 # f00034ea <exception_reason+0x252>
f0001acc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001ace:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
f0001ad0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001ad2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
f0001ad4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001ad8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  a0058593           addi    a1,a1,-1536 # f00034d4 <exception_reason+0x23c>
f0001adc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
f0001ade:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001ae0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001ae2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
f0001ae6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,f0001c0c <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
f0001aea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002597           auipc   a1,0x2
f0001aee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               a0258593           addi    a1,a1,-1534 # f00034ec <exception_reason+0x254>
f0001af2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001af4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001af6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001af8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001afc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
f0001afe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
f0001b00:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001b02:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001b04:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001b06:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001b08:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002817           auipc   a6,0x2
f0001b0c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9ea80813           addi    a6,a6,-1558 # f00034f2 <kDigitsLow>
f0001b10:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
f0001b12:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001b14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
f0001b16:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
f0001b18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
f0001b1a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24b5                       jal     f0001d86 <write_digits>
f0001b1c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
f0001b1e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002597           auipc   a1,0x2
f0001b22:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9d058593           addi    a1,a1,-1584 # f00034ee <exception_reason+0x256>
f0001b26:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001b28:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001b2a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001b2c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
f0001b2e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       f0001c26 <base_vfprintf+0x414>
f0001b30:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
f0001b32:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
f0001b36:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
f0001b38:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,f0001c3e <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
f0001b3c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f0001b3e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
f0001b42:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0001b44:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
f0001b46:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       f0001bec <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
f0001b48:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,f0001be2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
f0001b4c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
f0001b4e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
f0001b52:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0001b54:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001b56:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
f0001b5a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00002817           auipc   a6,0x2
f0001b5e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         99880813           addi    a6,a6,-1640 # f00034f2 <kDigitsLow>
f0001b62:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
f0001b64:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       f0001baa <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
f0001b66:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,f0001b92 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
f0001b6a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
f0001b6c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
f0001b70:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0001b72:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
f0001b74:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
f0001b78:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0001b7a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001b7c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
f0001b80:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00002897           auipc   a7,0x2
f0001b84:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   97288893           addi    a7,a7,-1678 # f00034f2 <kDigitsLow>
f0001b88:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
f0001b8a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
f0001b8c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
f0001b8e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
f0001b90:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       f0001bde <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
f0001b92:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
f0001b94:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
f0001b98:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
f0001b9a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
f0001b9c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
f0001ba0:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00002817           auipc   a6,0x2
f0001ba4:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      95280813           addi    a6,a6,-1710 # f00034f2 <kDigitsLow>
f0001ba8:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
f0001baa:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
f0001bac:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
f0001bae:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
f0001bb0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad9                       jal     f0001d86 <write_digits>
f0001bb2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       f0001bf0 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
f0001bb4:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,f0001be2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
f0001bb8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
f0001bba:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
f0001bbe:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f0001bc0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
f0001bc2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
f0001bc6:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f0001bc8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001bca:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
f0001bce:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00002897           auipc   a7,0x2
f0001bd2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   92488893           addi    a7,a7,-1756 # f00034f2 <kDigitsLow>
f0001bd6:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
f0001bd8:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
f0001bda:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
f0001bdc:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
f0001bde:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     f0001ca0 <hex_dump>
f0001be0:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       f0001bf0 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
f0001be2:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00002597           auipc   a1,0x2
f0001be6:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   94d58593           addi    a1,a1,-1715 # f000352f <kUnknownSpec>
f0001bea:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
f0001bec:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
f0001bee:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
f0001bf0:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
f0001bf2:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
f0001bf6:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,f000185e <base_vfprintf+0x4c>
f0001bfa:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       f0001c74 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
f0001bfc:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
f0001c00:       |  |  |     |     |  |                 |  |  |  |  |         00002817           auipc   a6,0x2
f0001c04:       |  |  |     |     |  |                 |  |  |  |  |         8f280813           addi    a6,a6,-1806 # f00034f2 <kDigitsLow>
f0001c08:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
f0001c0a:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       f0001baa <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001c0c:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
f0001c0e:       |  |  |     |     |  |                    |     |  |         00002817           auipc   a6,0x2
f0001c12:       |  |  |     |     |  |                    |     |  |         8e480813           addi    a6,a6,-1820 # f00034f2 <kDigitsLow>
f0001c16:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
f0001c18:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
f0001c1a:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
f0001c1c:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
f0001c1e:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
f0001c20:       |  |  |     |     |  |                    |     |  |         229d                       jal     f0001d86 <write_digits>
f0001c22:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
f0001c26:       |  |  |     |     |  |                    |     |  \-------> 00002597           auipc   a1,0x2
f0001c2a:       |  |  |     |     |  |                    |     |            8ca58593           addi    a1,a1,-1846 # f00034f0 <exception_reason+0x258>
f0001c2e:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
f0001c30:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
f0001c32:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
f0001c34:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
f0001c38:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
f0001c3c:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       f0001bf2 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f0001c3e:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
f0001c40:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f0001c42:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
f0001c46:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
f0001c4a:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f0001c4c:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,f0001c42 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
f0001c4e:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
f0001c52:       |  |  |     |     |  +-------------------------------------- bf69                       j       f0001bec <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
f0001c54:       |  |  |     |     \--|-------------------------------------> 00001597           auipc   a1,0x1
f0001c58:       |  |  |     |        |                                       0f858593           addi    a1,a1,248 # f0002d4c <kOttfTestConfig+0x1cc>
f0001c5c:       |  |  |     |        |                                       4615                       li      a2,5
f0001c5e:       |  |  |     |        \-------------------------------------- b779                       j       f0001bec <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
f0001c60:       |  |  \-----|----------------------------------------------> 00002597           auipc   a1,0x2
f0001c64:       |  |        |                                                8a258593           addi    a1,a1,-1886 # f0003502 <kErrorNul>
f0001c68:       |  |        |                                                4645                       li      a2,17
f0001c6a:       |  |        |                                            /-> 854a                       mv      a0,s2
f0001c6c:       |  |        |                                            |   9982                       jalr    s3
f0001c6e:       |  |        |                                            |   9aaa                       add     s5,s5,a0
f0001c70:       |  +--------|--------------------------------------------|-- a011                       j       f0001c74 <base_vfprintf+0x462>
f0001c72:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
f0001c74:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
f0001c76:                   |                                            |   4df2                       lw      s11,28(sp)
f0001c78:                   |                                            |   5d02                       lw      s10,32(sp)
f0001c7a:                   |                                            |   5c92                       lw      s9,36(sp)
f0001c7c:                   |                                            |   5c22                       lw      s8,40(sp)
f0001c7e:                   |                                            |   5bb2                       lw      s7,44(sp)
f0001c80:                   |                                            |   5b42                       lw      s6,48(sp)
f0001c82:                   |                                            |   5ad2                       lw      s5,52(sp)
f0001c84:                   |                                            |   5a62                       lw      s4,56(sp)
f0001c86:                   |                                            |   59f2                       lw      s3,60(sp)
f0001c88:                   |                                            |   4906                       lw      s2,64(sp)
f0001c8a:                   |                                            |   4496                       lw      s1,68(sp)
f0001c8c:                   |                                            |   4426                       lw      s0,72(sp)
f0001c8e:                   |                                            |   40b6                       lw      ra,76(sp)
f0001c90:                   |                                            |   6161                       addi    sp,sp,80
f0001c92:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
f0001c94:                   \--------------------------------------------|-> 00002597           auipc   a1,0x2
f0001c98:                                                                |   87f58593           addi    a1,a1,-1921 # f0003513 <kErrorTooWide>
f0001c9c:                                                                |   4631                       li      a2,12
f0001c9e:                                                                \-- b7f1                       j       f0001c6a <base_vfprintf+0x458>

f0001ca0 <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
f0001ca0:                    715d                       addi    sp,sp,-80
f0001ca2:                    c686                       sw      ra,76(sp)
f0001ca4:                    c4a2                       sw      s0,72(sp)
f0001ca6:                    c2a6                       sw      s1,68(sp)
f0001ca8:                    c0ca                       sw      s2,64(sp)
f0001caa:                    de4e                       sw      s3,60(sp)
f0001cac:                    dc52                       sw      s4,56(sp)
f0001cae:                    da56                       sw      s5,52(sp)
f0001cb0:                    d85a                       sw      s6,48(sp)
f0001cb2:                    d65e                       sw      s7,44(sp)
f0001cb4:                    d462                       sw      s8,40(sp)
f0001cb6:                    d266                       sw      s9,36(sp)
f0001cb8:                    d06a                       sw      s10,32(sp)
f0001cba:                    8bc6                       mv      s7,a7
f0001cbc:                    8a42                       mv      s4,a6
f0001cbe:                    8b36                       mv      s6,a3
f0001cc0:                    8ab2                       mv      s5,a2
f0001cc2:                    892e                       mv      s2,a1
f0001cc4:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
f0001cc6:          /-------- 02e6fd63           bgeu    a3,a4,f0001d00 <hex_dump+0x60>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
f0001cca:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
f0001cce:          |         850a                       mv      a0,sp
f0001cd0:          |         02000613           li      a2,32
f0001cd4:          |         85be                       mv      a1,a5
f0001cd6:          |         28b000ef           jal     ra,f0002760 <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f0001cda:          +-------- c09d                       beqz    s1,f0001d00 <hex_dump+0x60>
f0001cdc:          |         4c01                       li      s8,0
f0001cde:          |  /----> 02000513           li      a0,32
f0001ce2:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
f0001ce4:          |  |  /-- 00a4e463           bltu    s1,a0,f0001cec <hex_dump+0x4c>
f0001ce8:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f0001cec:          |  |  \-> 858a                       mv      a1,sp
f0001cee:          |  |      854e                       mv      a0,s3
f0001cf0:          |  |      8622                       mv      a2,s0
f0001cf2:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
f0001cf4:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f0001cf6:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f0001cf8:          |  \----- f0fd                       bnez    s1,f0001cde <hex_dump+0x3e>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f0001cfa:          |     /-- 000b1663           bnez    s6,f0001d06 <hex_dump+0x66>
f0001cfe:       /--|-----|-- a0ad                       j       f0001d68 <hex_dump+0xc8>
f0001d00:       |  \-----|-> 4c01                       li      s8,0
f0001d02:       +--------|-- 060b0363           beqz    s6,f0001d68 <hex_dump+0xc8>
f0001d06:       |        \-> 4401                       li      s0,0
f0001d08:       |            4601                       li      a2,0
f0001d0a:       |            fffb0493           addi    s1,s6,-1
f0001d0e:       |            8b0a                       mv      s6,sp
f0001d10:       |            02000c93           li      s9,32
f0001d14:       |            5d7d                       li      s10,-1
f0001d16:       |     /----> 8526                       mv      a0,s1
f0001d18:       |     |  /-- 000a1363           bnez    s4,f0001d1e <hex_dump+0x7e>
f0001d1c:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
f0001d1e:       |     |  \-> 9556                       add     a0,a0,s5
f0001d20:       |     |      00054503           lbu     a0,0(a0)
f0001d24:       |     |      00455593           srli    a1,a0,0x4
f0001d28:       |     |      95de                       add     a1,a1,s7
f0001d2a:       |     |      00058583           lb      a1,0(a1)
f0001d2e:       |     |      00cb06b3           add     a3,s6,a2
f0001d32:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f0001d36:       |     |      893d                       andi    a0,a0,15
f0001d38:       |     |      955e                       add     a0,a0,s7
f0001d3a:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
f0001d3e:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f0001d40:       |     |      00a680a3           sb      a0,1(a3)
f0001d44:       |     |  /-- 01961963           bne     a2,s9,f0001d56 <hex_dump+0xb6>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
f0001d48:       |     |  |   858a                       mv      a1,sp
f0001d4a:       |     |  |   02000613           li      a2,32
f0001d4e:       |     |  |   854e                       mv      a0,s3
f0001d50:       |     |  |   9902                       jalr    s2
f0001d52:       |     |  |   4601                       li      a2,0
f0001d54:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f0001d56:       |     |  \-> 14fd                       addi    s1,s1,-1
f0001d58:       |     |      0405                       addi    s0,s0,1
f0001d5a:       |     \----- fba49ee3           bne     s1,s10,f0001d16 <hex_dump+0x76>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
f0001d5e:       +----------- c609                       beqz    a2,f0001d68 <hex_dump+0xc8>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
f0001d60:       |            858a                       mv      a1,sp
f0001d62:       |            854e                       mv      a0,s3
f0001d64:       |            9902                       jalr    s2
f0001d66:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
f0001d68:       \----------> 8562                       mv      a0,s8
f0001d6a:                    5d02                       lw      s10,32(sp)
f0001d6c:                    5c92                       lw      s9,36(sp)
f0001d6e:                    5c22                       lw      s8,40(sp)
f0001d70:                    5bb2                       lw      s7,44(sp)
f0001d72:                    5b42                       lw      s6,48(sp)
f0001d74:                    5ad2                       lw      s5,52(sp)
f0001d76:                    5a62                       lw      s4,56(sp)
f0001d78:                    59f2                       lw      s3,60(sp)
f0001d7a:                    4906                       lw      s2,64(sp)
f0001d7c:                    4496                       lw      s1,68(sp)
f0001d7e:                    4426                       lw      s0,72(sp)
f0001d80:                    40b6                       lw      ra,76(sp)
f0001d82:                    6161                       addi    sp,sp,80
f0001d84:                    8082                       ret

f0001d86 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
f0001d86:              7179                     addi    sp,sp,-48
f0001d88:              d606                     sw      ra,44(sp)
f0001d8a:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
f0001d8c:       /----- ca05                     beqz    a2,f0001dbc <write_digits+0x36>
f0001d8e:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f0001d90:       |      02b10293                 addi    t0,sp,43
f0001d94:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
f0001d96:       |  |   02f65633                 divu    a2,a2,a5
f0001d9a:       |  |   02f605b3                 mul     a1,a2,a5
f0001d9e:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
f0001da2:       |  |   95c2                     add     a1,a1,a6
f0001da4:       |  |   00058e03                 lb      t3,0(a1)
f0001da8:       |  |   007285b3                 add     a1,t0,t2
f0001dac:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f0001db0:       |  |   13fd                     addi    t2,t2,-1
f0001db2:       |  \-- fef371e3                 bgeu    t1,a5,f0001d94 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0001db6:       |      40700633                 neg     a2,t2
f0001dba:       |  /-- a031                     j       f0001dc6 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
f0001dbc:       \--|-> 00080583                 lb      a1,0(a6)
f0001dc0:          |   02b105a3                 sb      a1,43(sp)
f0001dc4:          |   4605                     li      a2,1
f0001dc6:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0001dc8:          /-- c291                     beqz    a3,f0001dcc <write_digits+0x46>
f0001dca:          |   85b6                     mv      a1,a3
f0001dcc:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
f0001dd0:          /-- 00d5e463                 bltu    a1,a3,f0001dd8 <write_digits+0x52>
f0001dd4:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f0001dd8:       /--\-X 00b67e63                 bgeu    a2,a1,f0001df4 <write_digits+0x6e>
f0001ddc:       |      40c586b3                 sub     a3,a1,a2
f0001de0:       |      007c                     addi    a5,sp,12
f0001de2:       |      40c78633                 sub     a2,a5,a2
f0001de6:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
f0001de8:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f0001dec:       |  |   16fd                     addi    a3,a3,-1
f0001dee:       |  |   167d                     addi    a2,a2,-1
f0001df0:       |  \-- fee5                     bnez    a3,f0001de8 <write_digits+0x62>
f0001df2:       |      862e                     mv      a2,a1
f0001df4:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
f0001df6:              8d91                     sub     a1,a1,a2
f0001df8:              02058593                 addi    a1,a1,32
f0001dfc:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
f0001dfe:              50b2                     lw      ra,44(sp)
f0001e00:              6145                     addi    sp,sp,48
f0001e02:              8082                     ret

f0001e04 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
f0001e04:              00052813                 slti    a6,a0,0
f0001e08:              41f55793                 srai    a5,a0,0x1f
f0001e0c:              8fe9                     and     a5,a5,a0
f0001e0e:              8bfd                     andi    a5,a5,31
f0001e10:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
f0001e14:              00e87833                 and     a6,a6,a4
f0001e18:              02000713                 li      a4,32
f0001e1c:          /-- 00081363                 bnez    a6,f0001e22 <status_extract+0x1e>
f0001e20:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
f0001e22:          \-> 00271813                 slli    a6,a4,0x2
f0001e26:              f0000797                 auipc   a5,0xf0000
f0001e2a:              19e78793                 addi    a5,a5,414 # e0001fc4 <status_codes>
f0001e2e:              97c2                     add     a5,a5,a6
f0001e30:              439c                     lw      a5,0(a5)
f0001e32:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
f0001e34:              00173593                 seqz    a1,a4
f0001e38:       /----- cb1d                     beqz    a4,f0001e6e <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f0001e3a:       |      00555713                 srli    a4,a0,0x5
f0001e3e:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
f0001e42:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
f0001e44:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
f0001e48:       |      8a7d                     andi    a2,a2,31
f0001e4a:       |      04066613                 ori     a2,a2,64
f0001e4e:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
f0001e52:       |      01555613                 srli    a2,a0,0x15
f0001e56:       |      8a7d                     andi    a2,a2,31
f0001e58:       |      04066613                 ori     a2,a2,64
f0001e5c:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
f0001e60:       |      8169                     srli    a0,a0,0x1a
f0001e62:       |      897d                     andi    a0,a0,31
f0001e64:       |      04056513                 ori     a0,a0,64
f0001e68:       |      00a68123                 sb      a0,2(a3)
f0001e6c:       |  /-- a011                     j       f0001e70 <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
f0001e6e:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
f0001e70:          \-> 0015c513                 xori    a0,a1,1
f0001e74:              8082                     ret

f0001e76 <dif_uart_init>:
dif_uart_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:18

#include "uart_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_init(mmio_region_t base_addr, dif_uart_t *uart) {
  if (uart == NULL) {
f0001e76:       /----- c581                     beqz    a1,f0001e7e <dif_uart_init+0x8>
f0001e78:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:22
    return kDifBadArg;
  }

  uart->base_addr = base_addr;
f0001e7a:       |      c188                     sw      a0,0(a1)
f0001e7c:       |  /-- a011                     j       f0001e80 <dif_uart_init+0xa>
f0001e7e:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:25

  return kDifOk;
}
f0001e80:          \-> 8532                     mv      a0,a2
f0001e82:              8082                     ret

f0001e84 <dif_uart_configure>:
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:91

  return bytes_read;
}

dif_result_t dif_uart_configure(const dif_uart_t *uart,
                                dif_uart_config_t config) {
f0001e84:              1101                     addi    sp,sp,-32
f0001e86:              ce06                     sw      ra,28(sp)
f0001e88:              cc22                     sw      s0,24(sp)
f0001e8a:              ca26                     sw      s1,20(sp)
f0001e8c:              c84a                     sw      s2,16(sp)
f0001e8e:              c64e                     sw      s3,12(sp)
f0001e90:              448d                     li      s1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:92
  if (uart == NULL) {
f0001e92:       /----- cd59                     beqz    a0,f0001f30 <dif_uart_configure+0xac>
f0001e94:       |      892e                     mv      s2,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:96
    return kDifBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
f0001e96:       |      4194                     lw      a3,0(a1)
f0001e98:       +----- cec1                     beqz    a3,f0001f30 <dif_uart_configure+0xac>
f0001e9a:       |      00492603                 lw      a2,4(s2)
f0001e9e:       +----- ca49                     beqz    a2,f0001f30 <dif_uart_configure+0xac>
f0001ea0:       |      842a                     mv      s0,a0
f0001ea2:       |      0016e537                 lui     a0,0x16e
f0001ea6:       |      36050513                 addi    a0,a0,864 # 16e360 <_ottf_size+0xee360>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:118
  // 2^4 should be multiplied.
  // If uart baud rate is 1.5Mbps and IO is 24Mhz, NCO is 0x10000, which is over
  // the NCO width, use NCO = 0xffff for this case since the error is tolerable.
  // Refer to #4263
  uint64_t nco =
      ((uint64_t)config.baudrate == 1500000 && config.clk_freq_hz == 24000000)
f0001eaa:       |      8d35                     xor     a0,a0,a3
f0001eac:       |      016e35b7                 lui     a1,0x16e3
f0001eb0:       |      60058593                 addi    a1,a1,1536 # 16e3600 <_ottf_size+0x1663600>
f0001eb4:       |      8db1                     xor     a1,a1,a2
f0001eb6:       |      00b56733                 or      a4,a0,a1
f0001eba:       |      6541                     lui     a0,0x10
f0001ebc:       |      fff50993                 addi    s3,a0,-1 # ffff <_non_volatile_scratch_size+0xafff>
f0001ec0:       |      4581                     li      a1,0
f0001ec2:       |      854e                     mv      a0,s3
f0001ec4:       |  /-- cb09                     beqz    a4,f0001ed6 <dif_uart_configure+0x52>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:120
          ? 0xffff
          : udiv64_slow((uint64_t)config.baudrate << (nco_width + 4),
f0001ec6:       |  |   01469513                 slli    a0,a3,0x14
f0001eca:       |  |   00c6d593                 srli    a1,a3,0xc
f0001ece:       |  |   4681                     li      a3,0
f0001ed0:       |  |   4701                     li      a4,0
f0001ed2:       |  |   25f000ef                 jal     ra,f0002930 <udiv64_slow>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:122
                        config.clk_freq_hz, NULL);
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
f0001ed6:       |  \-> 01357633                 and     a2,a0,s3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:125

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
f0001eda:       |      8d31                     xor     a0,a0,a2
f0001edc:       |      8d4d                     or      a0,a0,a1
f0001ede:       +----- e929                     bnez    a0,f0001f30 <dif_uart_configure+0xac>
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:47
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, 0u);
f0001ee0:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001ee2:       |      00052823                 sw      zero,16(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:53
  mmio_region_write32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
f0001ee6:       |      4008                     lw      a0,0(s0)
f0001ee8:       |      458d                     li      a1,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001eea:       |      d10c                     sw      a1,32(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:55
  mmio_region_write32(uart->base_addr, UART_OVRD_REG_OFFSET, 0u);
f0001eec:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001eee:       |      02052423                 sw      zero,40(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:56
  mmio_region_write32(uart->base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
f0001ef2:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001ef4:       |      02052823                 sw      zero,48(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:57
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f0001ef8:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001efa:       |      00052223                 sw      zero,4(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:58
  mmio_region_write32(uart->base_addr, UART_INTR_STATE_REG_OFFSET,
f0001efe:       |      4008                     lw      a0,0(s0)
f0001f00:       |      55fd                     li      a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001f02:       |      c10c                     sw      a1,0(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifToggleEnabled) {
f0001f04:       |      00892683                 lw      a3,8(s2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0001f08:       |      01061513                 slli    a0,a2,0x10
f0001f0c:       |      4605                     li      a2,1
f0001f0e:       |      04300593                 li      a1,67
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
f0001f12:       |  /-- 00c68363                 beq     a3,a2,f0001f18 <dif_uart_configure+0x94>
f0001f16:       |  |   458d                     li      a1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
f0001f18:       |  \-> 00c92603                 lw      a2,12(s2)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  if (config.parity_enable == kDifToggleEnabled) {
f0001f1c:       |      8d4d                     or      a0,a0,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
  if (config.parity == kDifUartParityOdd) {
f0001f1e:       |  /-- e219                     bnez    a2,f0001f24 <dif_uart_configure+0xa0>
f0001f20:       |  |   08056513                 ori     a0,a0,128
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:143
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, reg);
f0001f24:       |  \-> 400c                     lw      a1,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001f26:       |      c988                     sw      a0,16(a1)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:146

  // Disable interrupts.
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f0001f28:       |      4008                     lw      a0,0(s0)
f0001f2a:       |      4481                     li      s1,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001f2c:       |      00052223                 sw      zero,4(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:149

  return kDifOk;
}
f0001f30:       \----> 8526                     mv      a0,s1
f0001f32:              49b2                     lw      s3,12(sp)
f0001f34:              4942                     lw      s2,16(sp)
f0001f36:              44d2                     lw      s1,20(sp)
f0001f38:              4462                     lw      s0,24(sp)
f0001f3a:              40f2                     lw      ra,28(sp)
f0001f3c:              6105                     addi    sp,sp,32
f0001f3e:              8082                     ret

f0001f40 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:256

  return kDifOk;
}

dif_result_t dif_uart_byte_send_polled(const dif_uart_t *uart, uint8_t byte) {
  if (uart == NULL) {
f0001f40:       /----- cd19                     beqz    a0,f0001f5e <dif_uart_byte_send_polled+0x1e>
f0001f42:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0001f44:       |  /-> 4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f0001f46:       |  |   8a85                     andi    a3,a3,1
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:261
    return kDifBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
f0001f48:       |  \-- fef5                     bnez    a3,f0001f44 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001f4a:       |      4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0001f4c:       |      8a85                     andi    a3,a3,1
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:68
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
f0001f4e:       |  /-- e299                     bnez    a3,f0001f54 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0001f50:       |  |   ce4c                     sw      a1,28(a2)
f0001f52:       |  |   4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0001f54:       |  >-> 4a48                     lw      a0,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0001f56:       |  |   8921                     andi    a0,a0,8
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:268

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
f0001f58:       |  \-- dd75                     beqz    a0,f0001f54 <dif_uart_byte_send_polled+0x14>
f0001f5a:       |      4501                     li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:272
  }

  return kDifOk;
}
f0001f5c:       |      8082                     ret
f0001f5e:       \----> 450d                     li      a0,3
f0001f60:              8082                     ret

f0001f62 <xTaskCreate>:
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:734
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
f0001f62:                    7179                       addi    sp,sp,-48
f0001f64:                    d606                       sw      ra,44(sp)
f0001f66:                    d422                       sw      s0,40(sp)
f0001f68:                    d226                       sw      s1,36(sp)
f0001f6a:                    d04a                       sw      s2,32(sp)
f0001f6c:                    ce4e                       sw      s3,28(sp)
f0001f6e:                    cc52                       sw      s4,24(sp)
f0001f70:                    ca56                       sw      s5,20(sp)
f0001f72:                    c85a                       sw      s6,16(sp)
f0001f74:                    c65e                       sw      s7,12(sp)
f0001f76:                    c462                       sw      s8,8(sp)
f0001f78:                    c266                       sw      s9,4(sp)
f0001f7a:                    8abe                       mv      s5,a5
f0001f7c:                    8b3a                       mv      s6,a4
f0001f7e:                    89b6                       mv      s3,a3
f0001f80:                    84ae                       mv      s1,a1
f0001f82:                    8a2a                       mv      s4,a0
/proc/self/cwd/external/freertos/tasks.c:768
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
f0001f84:                    00261913           slli    s2,a2,0x2
f0001f88:                    854a                       mv      a0,s2
f0001f8a:                    256d                       jal     f0002634 <pvPortMalloc>
f0001f8c:                    5bfd                       li      s7,-1
/proc/self/cwd/external/freertos/tasks.c:770

                if( pxStack != NULL )
f0001f8e:       /----------- 1c050463           beqz    a0,f0002156 <xTaskCreate+0x1f4>
f0001f92:       |            842a                       mv      s0,a0
/proc/self/cwd/external/freertos/tasks.c:773
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
f0001f94:       |            04c00513           li      a0,76
f0001f98:       |            2d71                       jal     f0002634 <pvPortMalloc>
/proc/self/cwd/external/freertos/tasks.c:775

                    if( pxNewTCB != NULL )
f0001f9a:       |  /-------- c121                       beqz    a0,f0001fda <xTaskCreate+0x78>
f0001f9c:       |  |         8c2a                       mv      s8,a0
/proc/self/cwd/external/freertos/tasks.c:778
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
f0001f9e:       |  |         d900                       sw      s0,48(a0)
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:860
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
f0001fa0:       |  |         00890533           add     a0,s2,s0
f0001fa4:       |  |         1571                       addi    a0,a0,-4
/proc/self/cwd/external/freertos/tasks.c:888
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
f0001fa6:       |  |  /----- cc8d                       beqz    s1,f0001fe0 <xTaskCreate+0x7e>
f0001fa8:       |  |  |      4601                       li      a2,0
/proc/self/cwd/external/freertos/tasks.c:890
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
f0001faa:       |  |  |      034c0593           addi    a1,s8,52
/proc/self/cwd/external/freertos/tasks.c:892
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
f0001fae:       |  |  |  /-> 00c486b3           add     a3,s1,a2
f0001fb2:       |  |  |  |   00068703           lb      a4,0(a3)
f0001fb6:       |  |  |  |   00c587b3           add     a5,a1,a2
f0001fba:       |  |  |  |   00e78023           sb      a4,0(a5)
/proc/self/cwd/external/freertos/tasks.c:897

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
f0001fbe:       |  |  |  |   0006c683           lbu     a3,0(a3)
f0001fc2:       |  |  |  |   0016b693           seqz    a3,a3
f0001fc6:       |  |  |  |   ff160713           addi    a4,a2,-15
f0001fca:       |  |  |  |   0605                       addi    a2,a2,1
f0001fcc:       |  |  |  |   00173713           seqz    a4,a4
f0001fd0:       |  |  |  |   8ed9                       or      a3,a3,a4
f0001fd2:       |  |  |  \-- def1                       beqz    a3,f0001fae <xTaskCreate+0x4c>
/proc/self/cwd/external/freertos/tasks.c:909
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
f0001fd4:       |  |  |      040c01a3           sb      zero,67(s8)
f0001fd8:       |  |  |  /-- a031                       j       f0001fe4 <xTaskCreate+0x82>
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:784
                        vPortFreeStack( pxStack );
f0001fda:       |  \--|--|-> 8522                       mv      a0,s0
f0001fdc:       |     |  |   2de9                       jal     f00026b6 <vPortFree>
f0001fde:       +-----|--|-- aaa5                       j       f0002156 <xTaskCreate+0x1f4>
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:915
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
f0001fe0:       |     \--|-> 020c0a23           sb      zero,52(s8)
f0001fe4:       |        \-> 4591                       li      a1,4
f0001fe6:       |            ff057493           andi    s1,a0,-16
/proc/self/cwd/external/freertos/tasks.c:921
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
f0001fea:       |        /-- 00bb6363           bltu    s6,a1,f0001ff0 <xTaskCreate+0x8e>
f0001fee:       |        |   4b11                       li      s6,4
/proc/self/cwd/external/freertos/tasks.c:930
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
f0001ff0:       |        \-> 036c2623           sw      s6,44(s8)
/proc/self/cwd/external/freertos/tasks.c:938
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
f0001ff4:       |            004c0913           addi    s2,s8,4
f0001ff8:       |            854a                       mv      a0,s2
f0001ffa:       |            2d09                       jal     f000260c <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:939
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
f0001ffc:       |            018c0513           addi    a0,s8,24
f0002000:       |            2531                       jal     f000260c <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:943

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
f0002002:       |            018c2823           sw      s8,16(s8)
f0002006:       |            4515                       li      a0,5
/proc/self/cwd/external/freertos/tasks.c:946

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
f0002008:       |            41650533           sub     a0,a0,s6
f000200c:       |            00ac2c23           sw      a0,24(s8)
/proc/self/cwd/external/freertos/tasks.c:947
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
f0002010:       |            038c2223           sw      s8,36(s8)
/proc/self/cwd/external/freertos/tasks.c:951

    #if ( portCRITICAL_NESTING_IN_TCB == 1 )
        {
            pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
f0002014:       |            040c2223           sw      zero,68(s8)
/proc/self/cwd/external/freertos/tasks.c:1002
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
f0002018:       |            040c0423           sb      zero,72(s8)
/proc/self/cwd/external/freertos/tasks.c:1052
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
f000201c:       |            8526                       mv      a0,s1
f000201e:       |            85d2                       mv      a1,s4
f0002020:       |            864e                       mv      a2,s3
f0002022:       |            d7afe0ef           jal     ra,f000059c <pxPortInitialiseStack>
f0002026:       |            00ac2023           sw      a0,0(s8)
/proc/self/cwd/external/freertos/tasks.c:1058
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
f000202a:       |        /-- 000a8463           beqz    s5,f0002032 <xTaskCreate+0xd0>
/proc/self/cwd/external/freertos/tasks.c:1062
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
f000202e:       |        |   018aa023           sw      s8,0(s5)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskEnterCritical( void )
    {
        portDISABLE_INTERRUPTS();
f0002032:       |        \-> 30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347

        if( xSchedulerRunning != pdFALSE )
f0002036:       |            f0000a97           auipc   s5,0xf0000
f000203a:       |            03ea8a93           addi    s5,s5,62 # e0002074 <xSchedulerRunning>
f000203e:       |            000aa503           lw      a0,0(s5)
f0002042:       |            f0000b17           auipc   s6,0xf0000
f0002046:       |            01eb0b13           addi    s6,s6,30 # e0002060 <pxCurrentTCB>
f000204a:       |        /-- c901                       beqz    a0,f000205a <xTaskCreate+0xf8>
/proc/self/cwd/external/freertos/tasks.c:4349
        {
            ( pxCurrentTCB->uxCriticalNesting )++;
f000204c:       |        |   000b2503           lw      a0,0(s6)
f0002050:       |        |   416c                       lw      a1,68(a0)
f0002052:       |        |   0585                       addi    a1,a1,1
f0002054:       |        |   c16c                       sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
             * function so  assert() if it is being called from an interrupt
             * context.  Only API functions that end in "FromISR" can be used in an
             * interrupt.  Only assert if the critical nesting count is 1 to
             * protect against recursive calls if the assert function also uses a
             * critical section. */
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0002056:       |        |   000b2503           lw      a0,0(s6)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1077
        uxCurrentNumberOfTasks++;
f000205a:       |        \-> f0000517           auipc   a0,0xf0000
f000205e:       |            01650513           addi    a0,a0,22 # e0002070 <uxCurrentNumberOfTasks>
f0002062:       |            410c                       lw      a1,0(a0)
f0002064:       |            0585                       addi    a1,a1,1
f0002066:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1079
        if( pxCurrentTCB == NULL )
f0002068:       |            000b2583           lw      a1,0(s6)
f000206c:       |            f0000c97           auipc   s9,0xf0000
f0002070:       |            050c8c93           addi    s9,s9,80 # e00020bc <pxReadyTasksLists>
f0002074:       |        /-- cd91                       beqz    a1,f0002090 <xTaskCreate+0x12e>
/proc/self/cwd/external/freertos/tasks.c:1102
            if( xSchedulerRunning == pdFALSE )
f0002076:       |        |   000aa503           lw      a0,0(s5)
f000207a:       |     /--|-- e149                       bnez    a0,f00020fc <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1104
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
f000207c:       |     |  |   000b2503           lw      a0,0(s6)
f0002080:       |     |  |   5548                       lw      a0,44(a0)
f0002082:       |     |  |   02cc2583           lw      a1,44(s8)
f0002086:       |     +--|-- 06a5eb63           bltu    a1,a0,f00020fc <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1106
                    pxCurrentTCB = pxNewTCB;
f000208a:       |     |  |   018b2023           sw      s8,0(s6)
f000208e:       |     +--|-- a0bd                       j       f00020fc <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1083
            pxCurrentTCB = pxNewTCB;
f0002090:       |     |  \-> 018b2023           sw      s8,0(s6)
/proc/self/cwd/external/freertos/tasks.c:1085
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
f0002094:       |     |      4108                       lw      a0,0(a0)
f0002096:       |     |      4585                       li      a1,1
f0002098:       |     +----- 06b51263           bne     a0,a1,f00020fc <xTaskCreate+0x19a>
f000209c:       |     |      4401                       li      s0,0
f000209e:       |     |      06400493           li      s1,100
prvInitialiseTaskLists():
/proc/self/cwd/external/freertos/tasks.c:3665
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
f00020a2:       |     |  /-> 01940533           add     a0,s0,s9
f00020a6:       |     |  |   2b89                       jal     f00025f8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3663
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
f00020a8:       |     |  |   0451                       addi    s0,s0,20
f00020aa:       |     |  \-- fe941ce3           bne     s0,s1,f00020a2 <xTaskCreate+0x140>
/proc/self/cwd/external/freertos/tasks.c:3668
    vListInitialise( &xDelayedTaskList1 );
f00020ae:       |     |      f0000997           auipc   s3,0xf0000
f00020b2:       |     |      0ae98993           addi    s3,s3,174 # e000215c <xDelayedTaskList1>
f00020b6:       |     |      854e                       mv      a0,s3
f00020b8:       |     |      2381                       jal     f00025f8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3669
    vListInitialise( &xDelayedTaskList2 );
f00020ba:       |     |      f0000a17           auipc   s4,0xf0000
f00020be:       |     |      0b6a0a13           addi    s4,s4,182 # e0002170 <xDelayedTaskList2>
f00020c2:       |     |      8552                       mv      a0,s4
f00020c4:       |     |      2b15                       jal     f00025f8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3670
    vListInitialise( &xPendingReadyList );
f00020c6:       |     |      f0000517           auipc   a0,0xf0000
f00020ca:       |     |      08250513           addi    a0,a0,130 # e0002148 <xPendingReadyList>
f00020ce:       |     |      232d                       jal     f00025f8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3674
            vListInitialise( &xTasksWaitingTermination );
f00020d0:       |     |      f0000517           auipc   a0,0xf0000
f00020d4:       |     |      05050513           addi    a0,a0,80 # e0002120 <xTasksWaitingTermination>
f00020d8:       |     |      2305                       jal     f00025f8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3680
            vListInitialise( &xSuspendedTaskList );
f00020da:       |     |      f0000517           auipc   a0,0xf0000
f00020de:       |     |      05a50513           addi    a0,a0,90 # e0002134 <xSuspendedTaskList>
f00020e2:       |     |      2b19                       jal     f00025f8 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3686
    pxDelayedTaskList = &xDelayedTaskList1;
f00020e4:       |     |      f0000517           auipc   a0,0xf0000
f00020e8:       |     |      f9450513           addi    a0,a0,-108 # e0002078 <pxDelayedTaskList>
f00020ec:       |     |      01352023           sw      s3,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3687
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
f00020f0:       |     |      f0000517           auipc   a0,0xf0000
f00020f4:       |     |      f8c50513           addi    a0,a0,-116 # e000207c <pxOverflowDelayedTaskList>
f00020f8:       |     |      01452023           sw      s4,0(a0)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1119
        uxTaskNumber++;
f00020fc:       |     \----> f0000517           auipc   a0,0xf0000
f0002100:       |            f6c50513           addi    a0,a0,-148 # e0002068 <uxTaskNumber>
f0002104:       |            410c                       lw      a1,0(a0)
f0002106:       |            0585                       addi    a1,a1,1
f0002108:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1129
        prvAddTaskToReadyList( pxNewTCB );
f000210a:       |            02cc2503           lw      a0,44(s8)
f000210e:       |            f0000597           auipc   a1,0xf0000
f0002112:       |            f5658593           addi    a1,a1,-170 # e0002064 <uxTopReadyPriority>
f0002116:       |            4190                       lw      a2,0(a1)
f0002118:       |            4b85                       li      s7,1
f000211a:       |            00ab96b3           sll     a3,s7,a0
f000211e:       |            8e55                       or      a2,a2,a3
f0002120:       |            c190                       sw      a2,0(a1)
f0002122:       |            45d1                       li      a1,20
f0002124:       |            02b50533           mul     a0,a0,a1
f0002128:       |            9566                       add     a0,a0,s9
f000212a:       |            414c                       lw      a1,4(a0)
f000212c:       |            00bc2423           sw      a1,8(s8)
f0002130:       |            4590                       lw      a2,8(a1)
f0002132:       |            00cc2623           sw      a2,12(s8)
f0002136:       |            4590                       lw      a2,8(a1)
f0002138:       |            01262223           sw      s2,4(a2)
f000213c:       |            0125a423           sw      s2,8(a1)
f0002140:       |            00ac2a23           sw      a0,20(s8)
f0002144:       |            410c                       lw      a1,0(a0)
f0002146:       |            0585                       addi    a1,a1,1
f0002148:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1133
    taskEXIT_CRITICAL();
f000214a:       |            2025                       jal     f0002172 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:1135
    if( xSchedulerRunning != pdFALSE )
f000214c:       |            000aa503           lw      a0,0(s5)
f0002150:       +----------- c119                       beqz    a0,f0002156 <xTaskCreate+0x1f4>
/proc/self/cwd/external/freertos/tasks.c:1139
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
f0002152:       |            000b2503           lw      a0,0(s6)
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:813
        return xReturn;
f0002156:       \----------> 855e                       mv      a0,s7
f0002158:                    4c92                       lw      s9,4(sp)
f000215a:                    4c22                       lw      s8,8(sp)
f000215c:                    4bb2                       lw      s7,12(sp)
f000215e:                    4b42                       lw      s6,16(sp)
f0002160:                    4ad2                       lw      s5,20(sp)
f0002162:                    4a62                       lw      s4,24(sp)
f0002164:                    49f2                       lw      s3,28(sp)
f0002166:                    5902                       lw      s2,32(sp)
f0002168:                    5492                       lw      s1,36(sp)
f000216a:                    5422                       lw      s0,40(sp)
f000216c:                    50b2                       lw      ra,44(sp)
f000216e:                    6145                       addi    sp,sp,48
f0002170:                    8082                       ret

f0002172 <vTaskExitCritical>:
vTaskExitCritical():
/proc/self/cwd/external/freertos/tasks.c:4375

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskExitCritical( void )
    {
        if( xSchedulerRunning != pdFALSE )
f0002172:              f0000517                 auipc   a0,0xf0000
f0002176:              f0250513                 addi    a0,a0,-254 # e0002074 <xSchedulerRunning>
f000217a:              4108                     lw      a0,0(a0)
f000217c:       /----- cd19                     beqz    a0,f000219a <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4377
        {
            if( pxCurrentTCB->uxCriticalNesting > 0U )
f000217e:       |      f0000517                 auipc   a0,0xf0000
f0002182:       |      ee250513                 addi    a0,a0,-286 # e0002060 <pxCurrentTCB>
f0002186:       |      410c                     lw      a1,0(a0)
f0002188:       |      41ec                     lw      a1,68(a1)
f000218a:       +----- c981                     beqz    a1,f000219a <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4379
            {
                ( pxCurrentTCB->uxCriticalNesting )--;
f000218c:       |      410c                     lw      a1,0(a0)
f000218e:       |      41f0                     lw      a2,68(a1)
f0002190:       |      167d                     addi    a2,a2,-1
f0002192:       |      c1f0                     sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4381

                if( pxCurrentTCB->uxCriticalNesting == 0U )
f0002194:       |      4108                     lw      a0,0(a0)
f0002196:       |      4168                     lw      a0,68(a0)
f0002198:       |  /-- c111                     beqz    a0,f000219c <vTaskExitCritical+0x2a>
/proc/self/cwd/external/freertos/tasks.c:4399
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
f000219a:       \--|-> 8082                     ret
/proc/self/cwd/external/freertos/tasks.c:4383
                    portENABLE_INTERRUPTS();
f000219c:          \-> 30046073                 csrsi   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4399
    }
f00021a0:              8082                     ret

f00021a2 <vTaskSwitchContext>:
vTaskSwitchContext():
/proc/self/cwd/external/freertos/tasks.c:3015
{
f00021a2:              1141                     addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:3016
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
f00021a4:              c606                     sw      ra,12(sp)
f00021a6:              c422                     sw      s0,8(sp)
f00021a8:              f0000517                 auipc   a0,0xf0000
f00021ac:              ed850513                 addi    a0,a0,-296 # e0002080 <uxSchedulerSuspended>
f00021b0:              4108                     lw      a0,0(a0)
f00021b2:          /-- c901                     beqz    a0,f00021c2 <vTaskSwitchContext+0x20>
/proc/self/cwd/external/freertos/tasks.c:3020
        xYieldPending = pdTRUE;
f00021b4:          |   f0000517                 auipc   a0,0xf0000
f00021b8:          |   ed050513                 addi    a0,a0,-304 # e0002084 <xYieldPending>
f00021bc:          |   4585                     li      a1,1
f00021be:          |   c10c                     sw      a1,0(a0)
f00021c0:       /--|-- a0d9                     j       f0002286 <vTaskSwitchContext+0xe4>
/proc/self/cwd/external/freertos/tasks.c:3024
        xYieldPending = pdFALSE;
f00021c2:       |  \-> f0000517                 auipc   a0,0xf0000
f00021c6:       |      ec250513                 addi    a0,a0,-318 # e0002084 <xYieldPending>
f00021ca:       |      00052023                 sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3056
        taskCHECK_FOR_STACK_OVERFLOW();
f00021ce:       |      f0000417                 auipc   s0,0xf0000
f00021d2:       |      e9240413                 addi    s0,s0,-366 # e0002060 <pxCurrentTCB>
f00021d6:       |      4008                     lw      a0,0(s0)
f00021d8:       |      4108                     lw      a0,0(a0)
f00021da:       |      400c                     lw      a1,0(s0)
f00021dc:       |      598c                     lw      a1,48(a1)
f00021de:       |  /-- 00a5e863                 bltu    a1,a0,f00021ee <vTaskSwitchContext+0x4c>
f00021e2:       |  |   4008                     lw      a0,0(s0)
f00021e4:       |  |   400c                     lw      a1,0(s0)
f00021e6:       |  |   03458593                 addi    a1,a1,52
f00021ea:       |  |   840ff0ef                 jal     ra,f000122a <vApplicationStackOverflowHook>
/proc/self/cwd/external/freertos/tasks.c:3067
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f00021ee:       |  \-> f0000517                 auipc   a0,0xf0000
f00021f2:       |      e7650513                 addi    a0,a0,-394 # e0002064 <uxTopReadyPriority>
f00021f6:       |      4108                     lw      a0,0(a0)
f00021f8:       |      00155593                 srli    a1,a0,0x1
f00021fc:       |      8d4d                     or      a0,a0,a1
f00021fe:       |      00255593                 srli    a1,a0,0x2
f0002202:       |      8d4d                     or      a0,a0,a1
f0002204:       |      00455593                 srli    a1,a0,0x4
f0002208:       |      8d4d                     or      a0,a0,a1
f000220a:       |      00855593                 srli    a1,a0,0x8
f000220e:       |      8d4d                     or      a0,a0,a1
f0002210:       |      01055593                 srli    a1,a0,0x10
f0002214:       |      8d4d                     or      a0,a0,a1
f0002216:       |      fff54513                 not     a0,a0
f000221a:       |      00155593                 srli    a1,a0,0x1
f000221e:       |      55555637                 lui     a2,0x55555
f0002222:       |      55560613                 addi    a2,a2,1365 # 55555555 <_ottf_size+0x554d5555>
f0002226:       |      8df1                     and     a1,a1,a2
f0002228:       |      8d0d                     sub     a0,a0,a1
f000222a:       |      333335b7                 lui     a1,0x33333
f000222e:       |      33358593                 addi    a1,a1,819 # 33333333 <_ottf_size+0x332b3333>
f0002232:       |      00b57633                 and     a2,a0,a1
f0002236:       |      8109                     srli    a0,a0,0x2
f0002238:       |      8d6d                     and     a0,a0,a1
f000223a:       |      9532                     add     a0,a0,a2
f000223c:       |      00455593                 srli    a1,a0,0x4
f0002240:       |      952e                     add     a0,a0,a1
f0002242:       |      0f0f15b7                 lui     a1,0xf0f1
f0002246:       |      f0f58593                 addi    a1,a1,-241 # f0f0f0f <_ottf_size+0xf070f0f>
f000224a:       |      8d6d                     and     a0,a0,a1
f000224c:       |      010105b7                 lui     a1,0x1010
f0002250:       |      10158593                 addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
f0002254:       |      02b50533                 mul     a0,a0,a1
f0002258:       |      8161                     srli    a0,a0,0x18
f000225a:       |      01f54513                 xori    a0,a0,31
f000225e:       |      45d1                     li      a1,20
f0002260:       |      02b50533                 mul     a0,a0,a1
f0002264:       |      f0000597                 auipc   a1,0xf0000
f0002268:       |      e5858593                 addi    a1,a1,-424 # e00020bc <pxReadyTasksLists>
f000226c:       |      95aa                     add     a1,a1,a0
f000226e:       |      41c8                     lw      a0,4(a1)
f0002270:       |      4148                     lw      a0,4(a0)
f0002272:       |      00858613                 addi    a2,a1,8
f0002276:       |      c1c8                     sw      a0,4(a1)
f0002278:       |  /-- 00c51563                 bne     a0,a2,f0002282 <vTaskSwitchContext+0xe0>
f000227c:       |  |   4148                     lw      a0,4(a0)
f000227e:       |  |   0591                     addi    a1,a1,4
f0002280:       |  |   c188                     sw      a0,0(a1)
f0002282:       |  \-> 4548                     lw      a0,12(a0)
f0002284:       |      c008                     sw      a0,0(s0)
/proc/self/cwd/external/freertos/tasks.c:3087
}
f0002286:       \----> 4422                     lw      s0,8(sp)
f0002288:              40b2                     lw      ra,12(sp)
f000228a:              0141                     addi    sp,sp,16
f000228c:              8082                     ret

f000228e <vTaskStartScheduler>:
vTaskStartScheduler():
/proc/self/cwd/external/freertos/tasks.c:1991
{
f000228e:           1141                        addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:2024
            xReturn = xTaskCreate( prvIdleTask,
f0002290:           c606                        sw      ra,12(sp)
f0002292:           00000517            auipc   a0,0x0
f0002296:           06250513            addi    a0,a0,98 # f00022f4 <prvIdleTask>
f000229a:           00001597            auipc   a1,0x1
f000229e:           43a58593            addi    a1,a1,1082 # f00036d4 <uxTopUsedPriority+0x4>
f00022a2:           f0000797            auipc   a5,0xf0000
f00022a6:           de678793            addi    a5,a5,-538 # e0002088 <xIdleTaskHandle>
f00022aa:           10000613            li      a2,256
f00022ae:           4681                        li      a3,0
f00022b0:           4701                        li      a4,0
f00022b2:           3945                        jal     f0001f62 <xTaskCreate>
f00022b4:           4585                        li      a1,1
/proc/self/cwd/external/freertos/tasks.c:2046
    if( xReturn == pdPASS )
f00022b6:       /-- 02b51763            bne     a0,a1,f00022e4 <vTaskStartScheduler+0x56>
/proc/self/cwd/external/freertos/tasks.c:2062
        portDISABLE_INTERRUPTS();
f00022ba:       |   30047073            csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:2074
        xNextTaskUnblockTime = portMAX_DELAY;
f00022be:       |   f0000517            auipc   a0,0xf0000
f00022c2:       |   dce50513            addi    a0,a0,-562 # e000208c <xNextTaskUnblockTime>
f00022c6:       |   567d                        li      a2,-1
f00022c8:       |   c110                        sw      a2,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2075
        xSchedulerRunning = pdTRUE;
f00022ca:       |   f0000517            auipc   a0,0xf0000
f00022ce:       |   daa50513            addi    a0,a0,-598 # e0002074 <xSchedulerRunning>
f00022d2:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2076
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
f00022d4:       |   f0000517            auipc   a0,0xf0000
f00022d8:       |   dbc50513            addi    a0,a0,-580 # e0002090 <xTickCount>
f00022dc:       |   00052023            sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2090
        if( xPortStartScheduler() != pdFALSE )
f00022e0:       |   f85fe0ef            jal     ra,f0001264 <xPortStartScheduler>
/proc/self/cwd/external/freertos/tasks.c:2114
    ( void ) uxTopUsedPriority;
f00022e4:       \-> 00001517            auipc   a0,0x1
f00022e8:           3ec50513            addi    a0,a0,1004 # f00036d0 <uxTopUsedPriority>
f00022ec:           4108                        lw      a0,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2115
}
f00022ee:           40b2                        lw      ra,12(sp)
f00022f0:           0141                        addi    sp,sp,16
f00022f2:           8082                        ret

f00022f4 <prvIdleTask>:
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3435
{
f00022f4:                 1101                  addi    sp,sp,-32
f00022f6:                 ce06                  sw      ra,28(sp)
f00022f8:                 cc22                  sw      s0,24(sp)
f00022fa:                 ca26                  sw      s1,20(sp)
f00022fc:                 c84a                  sw      s2,16(sp)
f00022fe:                 c64e                  sw      s3,12(sp)
f0002300:                 c452                  sw      s4,8(sp)
f0002302:                 c256                  sw      s5,4(sp)
f0002304:                 f0000497              auipc   s1,0xf0000
f0002308:                 d6848493              addi    s1,s1,-664 # e000206c <uxDeletedTasksWaitingCleanUp>
f000230c:                 f0000917              auipc   s2,0xf0000
f0002310:                 d6890913              addi    s2,s2,-664 # e0002074 <xSchedulerRunning>
f0002314:                 f0000997              auipc   s3,0xf0000
f0002318:                 e0c98993              addi    s3,s3,-500 # e0002120 <xTasksWaitingTermination>
f000231c:                 f0000a17              auipc   s4,0xf0000
f0002320:                 d54a0a13              addi    s4,s4,-684 # e0002070 <uxCurrentNumberOfTasks>
f0002324:                 f0000a97              auipc   s5,0xf0000
f0002328:                 d3ca8a93              addi    s5,s5,-708 # e0002060 <pxCurrentTCB>
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3701
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
f000232c:       /-------> 4088                  lw      a0,0(s1)
f000232e:       |  /----- c129                  beqz    a0,f0002370 <prvIdleTask+0x7c>
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f0002330:       |  |      30047073              csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f0002334:       |  |      00092503              lw      a0,0(s2)
f0002338:       |  |  /-- c901                  beqz    a0,f0002348 <prvIdleTask+0x54>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f000233a:       |  |  |   000aa503              lw      a0,0(s5)
f000233e:       |  |  |   416c                  lw      a1,68(a0)
f0002340:       |  |  |   0585                  addi    a1,a1,1
f0002342:       |  |  |   c16c                  sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0002344:       |  |  |   000aa503              lw      a0,0(s5)
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3705
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0002348:       |  |  \-> 00c9a503              lw      a0,12(s3)
f000234c:       |  |      4540                  lw      s0,12(a0)
/proc/self/cwd/external/freertos/tasks.c:3706
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
f000234e:       |  |      00440513              addi    a0,s0,4
f0002352:       |  |      24c1                  jal     f0002612 <uxListRemove>
/proc/self/cwd/external/freertos/tasks.c:3707
                    --uxCurrentNumberOfTasks;
f0002354:       |  |      000a2503              lw      a0,0(s4)
f0002358:       |  |      157d                  addi    a0,a0,-1
f000235a:       |  |      00aa2023              sw      a0,0(s4)
/proc/self/cwd/external/freertos/tasks.c:3708
                    --uxDeletedTasksWaitingCleanUp;
f000235e:       |  |      4088                  lw      a0,0(s1)
f0002360:       |  |      157d                  addi    a0,a0,-1
f0002362:       |  |      c088                  sw      a0,0(s1)
/proc/self/cwd/external/freertos/tasks.c:3710
                taskEXIT_CRITICAL();
f0002364:       |  |      3539                  jal     f0002172 <vTaskExitCritical>
prvDeleteTCB():
/proc/self/cwd/external/freertos/tasks.c:3964
                vPortFreeStack( pxTCB->pxStack );
f0002366:       |  |      5808                  lw      a0,48(s0)
f0002368:       |  |      26b9                  jal     f00026b6 <vPortFree>
/proc/self/cwd/external/freertos/tasks.c:3965
                vPortFree( pxTCB );
f000236a:       |  |      8522                  mv      a0,s0
f000236c:       |  |      26a9                  jal     f00026b6 <vPortFree>
f000236e:       +--|----- bf7d                  j       f000232c <prvIdleTask+0x38>
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3459
                taskYIELD();
f0002370:       |  \----> 00000073              ecall
f0002374:       \-------- bf65                  j       f000232c <prvIdleTask+0x38>

f0002376 <vTaskSuspendAll>:
vTaskSuspendAll():
/proc/self/cwd/external/freertos/tasks.c:2142
    ++uxSchedulerSuspended;
f0002376:       f0000517                auipc   a0,0xf0000
f000237a:       d0a50513                addi    a0,a0,-758 # e0002080 <uxSchedulerSuspended>
f000237e:       410c                    lw      a1,0(a0)
f0002380:       0585                    addi    a1,a1,1
f0002382:       c10c                    sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2147
}
f0002384:       8082                    ret

f0002386 <xTaskResumeAll>:
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2214
{
f0002386:                    1141                       addi    sp,sp,-16
f0002388:                    c606                       sw      ra,12(sp)
f000238a:                    c422                       sw      s0,8(sp)
f000238c:                    c226                       sw      s1,4(sp)
f000238e:                    c04a                       sw      s2,0(sp)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f0002390:                    30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f0002394:                    f0000517           auipc   a0,0xf0000
f0002398:                    ce050513           addi    a0,a0,-800 # e0002074 <xSchedulerRunning>
f000239c:                    4108                       lw      a0,0(a0)
f000239e:                /-- c911                       beqz    a0,f00023b2 <xTaskResumeAll+0x2c>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f00023a0:                |   f0000517           auipc   a0,0xf0000
f00023a4:                |   cc050513           addi    a0,a0,-832 # e0002060 <pxCurrentTCB>
f00023a8:                |   410c                       lw      a1,0(a0)
f00023aa:                |   41f0                       lw      a2,68(a1)
f00023ac:                |   0605                       addi    a2,a2,1
f00023ae:                |   c1f0                       sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f00023b0:                |   4108                       lw      a0,0(a0)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2229
        --uxSchedulerSuspended;
f00023b2:                \-> f0000517           auipc   a0,0xf0000
f00023b6:                    cce50513           addi    a0,a0,-818 # e0002080 <uxSchedulerSuspended>
f00023ba:                    410c                       lw      a1,0(a0)
f00023bc:                    15fd                       addi    a1,a1,-1
f00023be:                    c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2231
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f00023c0:                    4108                       lw      a0,0(a0)
f00023c2:       /----------- ed65                       bnez    a0,f00024ba <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2233
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
f00023c4:       |            f0000517           auipc   a0,0xf0000
f00023c8:       |            cac50513           addi    a0,a0,-852 # e0002070 <uxCurrentNumberOfTasks>
f00023cc:       |            4108                       lw      a0,0(a0)
f00023ce:       +----------- c575                       beqz    a0,f00024ba <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f00023d0:       |            f0000517           auipc   a0,0xf0000
f00023d4:       |            d7850513           addi    a0,a0,-648 # e0002148 <xPendingReadyList>
f00023d8:       |            410c                       lw      a1,0(a0)
f00023da:       |            f0000917           auipc   s2,0xf0000
f00023de:       |            caa90913           addi    s2,s2,-854 # e0002084 <xYieldPending>
f00023e2:       |  /-------- cddd                       beqz    a1,f00024a0 <xTaskResumeAll+0x11a>
f00023e4:       |  |         4885                       li      a7,1
f00023e6:       |  |         f0000617           auipc   a2,0xf0000
f00023ea:       |  |         c7e60613           addi    a2,a2,-898 # e0002064 <uxTopReadyPriority>
f00023ee:       |  |         4851                       li      a6,20
f00023f0:       |  |         f0000297           auipc   t0,0xf0000
f00023f4:       |  |         ccc28293           addi    t0,t0,-820 # e00020bc <pxReadyTasksLists>
f00023f8:       |  |         f0000317           auipc   t1,0xf0000
f00023fc:       |  |         c6830313           addi    t1,t1,-920 # e0002060 <pxCurrentTCB>
/proc/self/cwd/external/freertos/tasks.c:2239
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0002400:       |  |  /----> 454c                       lw      a1,12(a0)
f0002402:       |  |  |      45c0                       lw      s0,12(a1)
/proc/self/cwd/external/freertos/tasks.c:2240
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f0002404:       |  |  |      500c                       lw      a1,32(s0)
f0002406:       |  |  |      4c58                       lw      a4,28(s0)
f0002408:       |  |  |      5404                       lw      s1,40(s0)
f000240a:       |  |  |      c70c                       sw      a1,8(a4)
f000240c:       |  |  |      5014                       lw      a3,32(s0)
f000240e:       |  |  |      c2d8                       sw      a4,4(a3)
f0002410:       |  |  |      40cc                       lw      a1,4(s1)
f0002412:       |  |  |      01840713           addi    a4,s0,24
f0002416:       |  |  |  /-- 00e59363           bne     a1,a4,f000241c <xTaskResumeAll+0x96>
f000241a:       |  |  |  |   c0d4                       sw      a3,4(s1)
f000241c:       |  |  |  \-> 02042423           sw      zero,40(s0)
f0002420:       |  |  |      408c                       lw      a1,0(s1)
f0002422:       |  |  |      15fd                       addi    a1,a1,-1
f0002424:       |  |  |      c08c                       sw      a1,0(s1)
/proc/self/cwd/external/freertos/tasks.c:2242
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f0002426:       |  |  |      444c                       lw      a1,12(s0)
f0002428:       |  |  |      4418                       lw      a4,8(s0)
f000242a:       |  |  |      4854                       lw      a3,20(s0)
f000242c:       |  |  |      c70c                       sw      a1,8(a4)
f000242e:       |  |  |      444c                       lw      a1,12(s0)
f0002430:       |  |  |      c1d8                       sw      a4,4(a1)
f0002432:       |  |  |      42d8                       lw      a4,4(a3)
f0002434:       |  |  |      00440493           addi    s1,s0,4
f0002438:       |  |  |  /-- 00971363           bne     a4,s1,f000243e <xTaskResumeAll+0xb8>
f000243c:       |  |  |  |   c2cc                       sw      a1,4(a3)
f000243e:       |  |  |  \-> 428c                       lw      a1,0(a3)
f0002440:       |  |  |      15fd                       addi    a1,a1,-1
f0002442:       |  |  |      c28c                       sw      a1,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2243
                    prvAddTaskToReadyList( pxTCB );
f0002444:       |  |  |      544c                       lw      a1,44(s0)
f0002446:       |  |  |      4214                       lw      a3,0(a2)
f0002448:       |  |  |      00b89733           sll     a4,a7,a1
f000244c:       |  |  |      8ed9                       or      a3,a3,a4
f000244e:       |  |  |      c214                       sw      a3,0(a2)
f0002450:       |  |  |      030586b3           mul     a3,a1,a6
f0002454:       |  |  |      9696                       add     a3,a3,t0
f0002456:       |  |  |      42d8                       lw      a4,4(a3)
f0002458:       |  |  |      c418                       sw      a4,8(s0)
f000245a:       |  |  |      471c                       lw      a5,8(a4)
f000245c:       |  |  |      c45c                       sw      a5,12(s0)
f000245e:       |  |  |      471c                       lw      a5,8(a4)
f0002460:       |  |  |      c3c4                       sw      s1,4(a5)
f0002462:       |  |  |      c704                       sw      s1,8(a4)
f0002464:       |  |  |      c854                       sw      a3,20(s0)
f0002466:       |  |  |      4298                       lw      a4,0(a3)
f0002468:       |  |  |      0705                       addi    a4,a4,1
f000246a:       |  |  |      c298                       sw      a4,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2247
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
f000246c:       |  |  |      00032683           lw      a3,0(t1)
f0002470:       |  |  |      56d4                       lw      a3,44(a3)
f0002472:       |  |  |  /-- 00d5e463           bltu    a1,a3,f000247a <xTaskResumeAll+0xf4>
/proc/self/cwd/external/freertos/tasks.c:2249
                        xYieldPending = pdTRUE;
f0002476:       |  |  |  |   01192023           sw      a7,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f000247a:       |  |  |  \-> 410c                       lw      a1,0(a0)
f000247c:       |  |  \----- f1d1                       bnez    a1,f0002400 <xTaskResumeAll+0x7a>
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f000247e:       |  |         f0000517           auipc   a0,0xf0000
f0002482:       |  |         bfa50513           addi    a0,a0,-1030 # e0002078 <pxDelayedTaskList>
f0002486:       |  |         410c                       lw      a1,0(a0)
f0002488:       |  |         418c                       lw      a1,0(a1)
f000248a:       |  |  /----- c589                       beqz    a1,f0002494 <xTaskResumeAll+0x10e>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f000248c:       |  |  |      4108                       lw      a0,0(a0)
f000248e:       |  |  |      4548                       lw      a0,12(a0)
f0002490:       |  |  |      4108                       lw      a0,0(a0)
f0002492:       |  |  |  /-- a011                       j       f0002496 <xTaskResumeAll+0x110>
f0002494:       |  |  \--|-> 557d                       li      a0,-1
f0002496:       |  |     \-> f0000597           auipc   a1,0xf0000
f000249a:       |  |         bf658593           addi    a1,a1,-1034 # e000208c <xNextTaskUnblockTime>
f000249e:       |  |         c188                       sw      a0,0(a1)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2273
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
f00024a0:       |  \-------> f0000417           auipc   s0,0xf0000
f00024a4:       |            bf440413           addi    s0,s0,-1036 # e0002094 <xPendedTicks>
f00024a8:       |            4004                       lw      s1,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2275
                    if( xPendedCounts > ( TickType_t ) 0U )
f00024aa:       |     /----- c491                       beqz    s1,f00024b6 <xTaskResumeAll+0x130>
/proc/self/cwd/external/freertos/tasks.c:2279
                            if( xTaskIncrementTick() != pdFALSE )
f00024ac:       |     |  /-> 2839                       jal     f00024ca <xTaskIncrementTick>
/proc/self/cwd/external/freertos/tasks.c:2288
                            --xPendedCounts;
f00024ae:       |     |  |   14fd                       addi    s1,s1,-1
/proc/self/cwd/external/freertos/tasks.c:2289
                        } while( xPendedCounts > ( TickType_t ) 0U );
f00024b0:       |     |  \-- fcf5                       bnez    s1,f00024ac <xTaskResumeAll+0x126>
/proc/self/cwd/external/freertos/tasks.c:2291
                        xPendedTicks = 0;
f00024b2:       |     |      00042023           sw      zero,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2299
                if( xYieldPending != pdFALSE )
f00024b6:       |     \----> 00092503           lw      a0,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2319
    taskEXIT_CRITICAL();
f00024ba:       \----------> 3965                       jal     f0002172 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:2321
    return xAlreadyYielded;
f00024bc:                    4501                       li      a0,0
f00024be:                    4902                       lw      s2,0(sp)
f00024c0:                    4492                       lw      s1,4(sp)
f00024c2:                    4422                       lw      s0,8(sp)
f00024c4:                    40b2                       lw      ra,12(sp)
f00024c6:                    0141                       addi    sp,sp,16
f00024c8:                    8082                       ret

f00024ca <xTaskIncrementTick>:
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2740
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f00024ca:                          f0000517             auipc   a0,0xf0000
f00024ce:                          bb650513             addi    a0,a0,-1098 # e0002080 <uxSchedulerSuspended>
f00024d2:                          4108                 lw      a0,0(a0)
f00024d4:                      /-- c909                 beqz    a0,f00024e6 <xTaskIncrementTick+0x1c>
/proc/self/cwd/external/freertos/tasks.c:2887
        ++xPendedTicks;
f00024d6:                      |   f0000517             auipc   a0,0xf0000
f00024da:                      |   bbe50513             addi    a0,a0,-1090 # e0002094 <xPendedTicks>
f00024de:                      |   410c                 lw      a1,0(a0)
f00024e0:                      |   0585                 addi    a1,a1,1
f00024e2:                      |   c10c                 sw      a1,0(a0)
f00024e4:       /--------------|-- aa01                 j       f00025f4 <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2744
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
f00024e6:       |              \-> f0000517             auipc   a0,0xf0000
f00024ea:       |                  baa50513             addi    a0,a0,-1110 # e0002090 <xTickCount>
f00024ee:       |                  410c                 lw      a1,0(a0)
f00024f0:       |                  00158393             addi    t2,a1,1
/proc/self/cwd/external/freertos/tasks.c:2748
        xTickCount = xConstTickCount;
f00024f4:       |                  00752023             sw      t2,0(a0)
f00024f8:       |                  f0000e17             auipc   t3,0xf0000
f00024fc:       |                  b80e0e13             addi    t3,t3,-1152 # e0002078 <pxDelayedTaskList>
f0002500:       |                  f0000817             auipc   a6,0xf0000
f0002504:       |                  b8c80813             addi    a6,a6,-1140 # e000208c <xNextTaskUnblockTime>
/proc/self/cwd/external/freertos/tasks.c:2750
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
f0002508:       |        /-------- 02b3ff63             bgeu    t2,a1,f0002546 <xTaskIncrementTick+0x7c>
/proc/self/cwd/external/freertos/tasks.c:2752
            taskSWITCH_DELAYED_LISTS();
f000250c:       |        |         000e2503             lw      a0,0(t3)
f0002510:       |        |         f0000597             auipc   a1,0xf0000
f0002514:       |        |         b6c58593             addi    a1,a1,-1172 # e000207c <pxOverflowDelayedTaskList>
f0002518:       |        |         4194                 lw      a3,0(a1)
f000251a:       |        |         00de2023             sw      a3,0(t3)
f000251e:       |        |         c188                 sw      a0,0(a1)
f0002520:       |        |         f0000517             auipc   a0,0xf0000
f0002524:       |        |         b7850513             addi    a0,a0,-1160 # e0002098 <xNumOfOverflows>
f0002528:       |        |         410c                 lw      a1,0(a0)
f000252a:       |        |         0585                 addi    a1,a1,1
f000252c:       |        |         c10c                 sw      a1,0(a0)
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f000252e:       |        |         000e2503             lw      a0,0(t3)
f0002532:       |        |         4108                 lw      a0,0(a0)
f0002534:       |        |  /----- c511                 beqz    a0,f0002540 <xTaskIncrementTick+0x76>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f0002536:       |        |  |      000e2503             lw      a0,0(t3)
f000253a:       |        |  |      4548                 lw      a0,12(a0)
f000253c:       |        |  |      4108                 lw      a0,0(a0)
f000253e:       |        |  |  /-- a011                 j       f0002542 <xTaskIncrementTick+0x78>
f0002540:       |        |  \--|-> 557d                 li      a0,-1
f0002542:       |        |     \-> 00a82023             sw      a0,0(a6)
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2763
        if( xConstTickCount >= xNextTaskUnblockTime )
f0002546:       |        \-------> 00082503             lw      a0,0(a6)
f000254a:       +----------------- 0aa3e563             bltu    t2,a0,f00025f4 <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f000254e:       |                  000e2503             lw      a0,0(t3)
f0002552:       |                  4108                 lw      a0,0(a0)
f0002554:       |  /-------------- cd49                 beqz    a0,f00025ee <xTaskIncrementTick+0x124>
f0002556:       |  |               4885                 li      a7,1
f0002558:       |  |               f0000e97             auipc   t4,0xf0000
f000255c:       |  |               b0ce8e93             addi    t4,t4,-1268 # e0002064 <uxTopReadyPriority>
f0002560:       |  |               42d1                 li      t0,20
f0002562:       |  |               f0000317             auipc   t1,0xf0000
f0002566:       |  |               b5a30313             addi    t1,t1,-1190 # e00020bc <pxReadyTasksLists>
/proc/self/cwd/external/freertos/tasks.c:2783
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f000256a:       |  |  /----------> 000e2503             lw      a0,0(t3)
f000256e:       |  |  |            4548                 lw      a0,12(a0)
f0002570:       |  |  |            4554                 lw      a3,12(a0)
/proc/self/cwd/external/freertos/tasks.c:2784
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
f0002572:       |  |  |            42c8                 lw      a0,4(a3)
/proc/self/cwd/external/freertos/tasks.c:2786
                    if( xConstTickCount < xItemValue )
f0002574:       |  |  |  /-------- 06a3ee63             bltu    t2,a0,f00025f0 <xTaskIncrementTick+0x126>
/proc/self/cwd/external/freertos/tasks.c:2802
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f0002578:       |  |  |  |         46cc                 lw      a1,12(a3)
f000257a:       |  |  |  |         469c                 lw      a5,8(a3)
f000257c:       |  |  |  |         4ac8                 lw      a0,20(a3)
f000257e:       |  |  |  |         c78c                 sw      a1,8(a5)
f0002580:       |  |  |  |         46cc                 lw      a1,12(a3)
f0002582:       |  |  |  |         c1dc                 sw      a5,4(a1)
f0002584:       |  |  |  |         4150                 lw      a2,4(a0)
f0002586:       |  |  |  |         00468793             addi    a5,a3,4
f000258a:       |  |  |  |     /-- 00f61363             bne     a2,a5,f0002590 <xTaskIncrementTick+0xc6>
f000258e:       |  |  |  |     |   c14c                 sw      a1,4(a0)
f0002590:       |  |  |  |     \-> 410c                 lw      a1,0(a0)
f0002592:       |  |  |  |         15fd                 addi    a1,a1,-1
f0002594:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f0002596:       |  |  |  |         5688                 lw      a0,40(a3)
f0002598:       |  |  |  |  /----- c10d                 beqz    a0,f00025ba <xTaskIncrementTick+0xf0>
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f000259a:       |  |  |  |  |      528c                 lw      a1,32(a3)
f000259c:       |  |  |  |  |      4ed0                 lw      a2,28(a3)
f000259e:       |  |  |  |  |      c60c                 sw      a1,8(a2)
f00025a0:       |  |  |  |  |      528c                 lw      a1,32(a3)
f00025a2:       |  |  |  |  |      c1d0                 sw      a2,4(a1)
f00025a4:       |  |  |  |  |      4150                 lw      a2,4(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f00025a6:       |  |  |  |  |      01868713             addi    a4,a3,24
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f00025aa:       |  |  |  |  |  /-- 00e61363             bne     a2,a4,f00025b0 <xTaskIncrementTick+0xe6>
f00025ae:       |  |  |  |  |  |   c14c                 sw      a1,4(a0)
f00025b0:       |  |  |  |  |  \-> 0206a423             sw      zero,40(a3)
f00025b4:       |  |  |  |  |      410c                 lw      a1,0(a0)
f00025b6:       |  |  |  |  |      15fd                 addi    a1,a1,-1
f00025b8:       |  |  |  |  |      c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2817
                    prvAddTaskToReadyList( pxTCB );
f00025ba:       |  |  |  |  \----> 56c8                 lw      a0,44(a3)
f00025bc:       |  |  |  |         000ea583             lw      a1,0(t4)
f00025c0:       |  |  |  |         00a89633             sll     a2,a7,a0
f00025c4:       |  |  |  |         8dd1                 or      a1,a1,a2
f00025c6:       |  |  |  |         00bea023             sw      a1,0(t4)
f00025ca:       |  |  |  |         02550533             mul     a0,a0,t0
f00025ce:       |  |  |  |         951a                 add     a0,a0,t1
f00025d0:       |  |  |  |         414c                 lw      a1,4(a0)
f00025d2:       |  |  |  |         c68c                 sw      a1,8(a3)
f00025d4:       |  |  |  |         4590                 lw      a2,8(a1)
f00025d6:       |  |  |  |         c6d0                 sw      a2,12(a3)
f00025d8:       |  |  |  |         4590                 lw      a2,8(a1)
f00025da:       |  |  |  |         c25c                 sw      a5,4(a2)
f00025dc:       |  |  |  |         c59c                 sw      a5,8(a1)
f00025de:       |  |  |  |         cac8                 sw      a0,20(a3)
f00025e0:       |  |  |  |         410c                 lw      a1,0(a0)
f00025e2:       |  |  |  |         0585                 addi    a1,a1,1
f00025e4:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f00025e6:       |  |  |  |         000e2503             lw      a0,0(t3)
f00025ea:       |  |  |  |         4108                 lw      a0,0(a0)
f00025ec:       |  |  \--|-------- fd3d                 bnez    a0,f000256a <xTaskIncrementTick+0xa0>
f00025ee:       |  \-----|-------> 557d                 li      a0,-1
f00025f0:       |        \-------> 00a82023             sw      a0,0(a6)
/proc/self/cwd/external/freertos/tasks.c:2898
    return xSwitchRequired;
f00025f4:       \----------------> 4501                 li      a0,0
f00025f6:                          8082                 ret

f00025f8 <vListInitialise>:
vListInitialise():
/proc/self/cwd/external/freertos/list.c:55
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f00025f8:       00850593                addi    a1,a0,8
f00025fc:       c14c                    sw      a1,4(a0)
f00025fe:       567d                    li      a2,-1
/proc/self/cwd/external/freertos/list.c:59

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
f0002600:       c510                    sw      a2,8(a0)
/proc/self/cwd/external/freertos/list.c:63

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0002602:       c54c                    sw      a1,12(a0)
/proc/self/cwd/external/freertos/list.c:64
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0002604:       c90c                    sw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:66

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
f0002606:       00052023                sw      zero,0(a0)
/proc/self/cwd/external/freertos/list.c:72

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
f000260a:       8082                    ret

f000260c <vListInitialiseItem>:
vListInitialiseItem():
/proc/self/cwd/external/freertos/list.c:78
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
f000260c:       00052823                sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:84

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
f0002610:       8082                    ret

f0002612 <uxListRemove>:
uxListRemove():
/proc/self/cwd/external/freertos/list.c:194
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0002612:           4510                        lw      a2,8(a0)
f0002614:           4154                        lw      a3,4(a0)
/proc/self/cwd/external/freertos/list.c:192
    List_t * const pxList = pxItemToRemove->pxContainer;
f0002616:           490c                        lw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:194
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0002618:           c690                        sw      a2,8(a3)
/proc/self/cwd/external/freertos/list.c:195
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
f000261a:           4510                        lw      a2,8(a0)
f000261c:           c254                        sw      a3,4(a2)
/proc/self/cwd/external/freertos/list.c:201

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
f000261e:           41d4                        lw      a3,4(a1)
f0002620:       /-- 00a69363            bne     a3,a0,f0002626 <uxListRemove+0x14>
/proc/self/cwd/external/freertos/list.c:203
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
f0002624:       |   c1d0                        sw      a2,4(a1)
/proc/self/cwd/external/freertos/list.c:210
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
f0002626:       \-> 00052823            sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:211
    ( pxList->uxNumberOfItems )--;
f000262a:           4188                        lw      a0,0(a1)
f000262c:           157d                        addi    a0,a0,-1
f000262e:           c188                        sw      a0,0(a1)
/proc/self/cwd/external/freertos/list.c:213

    return pxList->uxNumberOfItems;
f0002630:           4188                        lw      a0,0(a1)
f0002632:           8082                        ret

f0002634 <pvPortMalloc>:
pvPortMalloc():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:72
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
f0002634:                 1141                  addi    sp,sp,-16
f0002636:                 c606                  sw      ra,12(sp)
f0002638:                 c422                  sw      s0,8(sp)
f000263a:                 c226                  sw      s1,4(sp)
f000263c:                 c04a                  sw      s2,0(sp)
f000263e:                 842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:79
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
f0002640:                 9941                  andi    a0,a0,-16
f0002642:                 0541                  addi    a0,a0,16
f0002644:                 00f47593              andi    a1,s0,15
f0002648:          /----- 00a46363              bltu    s0,a0,f000264e <pvPortMalloc+0x1a>
f000264c:          |      4501                  li      a0,0
f000264e:          \--/-X c191                  beqz    a1,f0002652 <pvPortMalloc+0x1e>
f0002650:             |   842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:94
                }
            }
        }
    #endif

    vTaskSuspendAll();
f0002652:             \-> 3315                  jal     f0002376 <vTaskSuspendAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:96
    {
        if( pucAlignedHeap == NULL )
f0002654:                 f0000517              auipc   a0,0xf0000
f0002658:                 a4850513              addi    a0,a0,-1464 # e000209c <pvPortMalloc.pucAlignedHeap>
f000265c:                 4104                  lw      s1,0(a0)
f000265e:             /-- c099                  beqz    s1,f0002664 <pvPortMalloc+0x30>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
f0002660:          /--|-- e819                  bnez    s0,f0002676 <pvPortMalloc+0x42>
f0002662:       /--|--|-- a081                  j       f00026a2 <pvPortMalloc+0x6e>
f0002664:       |  |  \-> f0000597              auipc   a1,0xf0000
f0002668:       |  |      b2058593              addi    a1,a1,-1248 # e0002184 <ucHeap>
f000266c:       |  |      05c1                  addi    a1,a1,16
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:99
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
f000266e:       |  |      ff05f493              andi    s1,a1,-16
f0002672:       |  |      c104                  sw      s1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
        if( ( xWantedSize > 0 ) && /* valid size */
f0002674:       +--|----- c41d                  beqz    s0,f00026a2 <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:104
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
f0002676:       |  \----> f0000517              auipc   a0,0xf0000
f000267a:       |         a2a50513              addi    a0,a0,-1494 # e00020a0 <xNextFreeByte>
f000267e:       |         00052903              lw      s2,0(a0)
f0002682:       |         008905b3              add     a1,s2,s0
f0002686:       |         0045d613              srli    a2,a1,0x4
f000268a:       |         7ff63613              sltiu   a2,a2,2047
f000268e:       |         00b936b3              sltu    a3,s2,a1
f0002692:       |         8e75                  and     a2,a2,a3
f0002694:       +-------- c619                  beqz    a2,f00026a2 <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:110
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
            xNextFreeByte += xWantedSize;
f0002696:       |         c10c                  sw      a1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
f0002698:       |         31fd                  jal     f0002386 <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:119

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
f000269a:       |     /-- c489                  beqz    s1,f00026a4 <pvPortMalloc+0x70>
f000269c:       |     |   01248533              add     a0,s1,s2
f00026a0:       |  /--|-- a029                  j       f00026aa <pvPortMalloc+0x76>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
    ( void ) xTaskResumeAll();
f00026a2:       \--|--|-> 31d5                  jal     f0002386 <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:122
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
f00026a4:          |  \-> b4dfe0ef              jal     ra,f00011f0 <vApplicationMallocFailedHook>
f00026a8:          |      4501                  li      a0,0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:127
            }
        }
    #endif

    return pvReturn;
f00026aa:          \----> 4902                  lw      s2,0(sp)
f00026ac:                 4492                  lw      s1,4(sp)
f00026ae:                 4422                  lw      s0,8(sp)
f00026b0:                 40b2                  lw      ra,12(sp)
f00026b2:                 0141                  addi    sp,sp,16
f00026b4:                 8082                  ret

f00026b6 <vPortFree>:
vPortFree():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:140
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
f00026b6:       8082                    ret

f00026b8 <manufacturer_pre_test_hook>:
manufacturer_pre_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:14
// The default test hooks do nothing, but exist as the OTTF expects some hooks
// to exist. Additionally, they are weak symbols so they may be overridden by
// other custom test hooks.

OT_WEAK
bool manufacturer_pre_test_hook(void) { return true; }
f00026b8:       4505                    li      a0,1
f00026ba:       8082                    ret

f00026bc <manufacturer_post_test_hook>:
manufacturer_post_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:17

OT_WEAK
bool manufacturer_post_test_hook(void) { return true; }
f00026bc:       4505                    li      a0,1
f00026be:       8082                    ret

f00026c0 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
f00026c0:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
f00026c4:       \-- bff5                        j       f00026c0 <abort>

f00026c6 <ibex_mcause_read>:
ibex_mcause_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:11

#include "sw/device/lib/base/csr.h"

uint32_t ibex_mcause_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MCAUSE, &mtval);
f00026c6:       34202573                csrr    a0,mcause
/proc/self/cwd/sw/device/lib/runtime/ibex.c:12
  return mtval;
f00026ca:       8082                    ret

f00026cc <ibex_mtval_read>:
ibex_mtval_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:17
}

uint32_t ibex_mtval_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MTVAL, &mtval);
f00026cc:       34302573                csrr    a0,mtval
/proc/self/cwd/sw/device/lib/runtime/ibex.c:18
  return mtval;
f00026d0:       8082                    ret

f00026d2 <ibex_mepc_read>:
ibex_mepc_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:23
}

uint32_t ibex_mepc_read(void) {
  uint32_t mepc;
  CSR_READ(CSR_REG_MEPC, &mepc);
f00026d2:       34102573                csrr    a0,mepc
/proc/self/cwd/sw/device/lib/runtime/ibex.c:24
  return mepc;
f00026d6:       8082                    ret

f00026d8 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
f00026d8:                       00153693                seqz    a3,a0
f00026dc:                       0015b713                seqz    a4,a1
f00026e0:                       8ed9                    or      a3,a3,a4
f00026e2:       /-------------- eab5                    bnez    a3,f0002756 <memcpy+0x7e>
f00026e4:       |               4711                    li      a4,4
f00026e6:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00026e8:       |        /----- 00e66c63                bltu    a2,a4,f0002700 <memcpy+0x28>
f00026ec:       |        |      00a5c6b3                xor     a3,a1,a0
f00026f0:       |        |      0036f793                andi    a5,a3,3
f00026f4:       |        |      8832                    mv      a6,a2
f00026f6:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
f00026f8:       |        |  /-- eb91                    bnez    a5,f000270c <memcpy+0x34>
f00026fa:       |        |  |   40a006b3                neg     a3,a0
f00026fe:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002700:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002704:       |           |   9b71                    andi    a4,a4,-4
f0002706:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f000270a:       |  /--------|-- c6b9                    beqz    a3,f0002758 <memcpy+0x80>
f000270c:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f000270e:       |  |        /-> 00f58733                add     a4,a1,a5
f0002712:       |  |        |   00070883                lb      a7,0(a4)
f0002716:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f000271a:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f000271c:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f0002720:       |  |        \-- fef697e3                bne     a3,a5,f000270e <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002724:       |  |  /-------- 0106fb63                bgeu    a3,a6,f000273a <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002728:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f000272c:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f000272e:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f0002732:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f0002734:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f0002736:       |  |  |  +----- ff06e9e3                bltu    a3,a6,f0002728 <memcpy+0x50>
f000273a:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,f0002756 <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
f000273e:       |  |  |  |      8e15                    sub     a2,a2,a3
f0002740:       |  |  |  |      00d50733                add     a4,a0,a3
f0002744:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
f0002746:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
f000274a:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
f000274e:       |  |  |  |  |   167d                    addi    a2,a2,-1
f0002750:       |  |  |  |  |   0705                    addi    a4,a4,1
f0002752:       |  |  |  |  |   0585                    addi    a1,a1,1
f0002754:       |  |  |  |  \-- fa6d                    bnez    a2,f0002746 <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
f0002756:       \--|--|--|----> 8082                    ret
f0002758:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f000275a:             |  \----- fd06e7e3                bltu    a3,a6,f0002728 <memcpy+0x50>
f000275e:             \-------- bff1                    j       f000273a <memcpy+0x62>

f0002760 <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
f0002760:                 4691                  li      a3,4
f0002762:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f0002764:             /-- 00d66663              bltu    a2,a3,f0002770 <memset+0x10>
f0002768:             |   40a006b3              neg     a3,a0
f000276c:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002770:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002774:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f0002778:          /----- cb01                  beqz    a4,f0002788 <memset+0x28>
f000277a:          |      87aa                  mv      a5,a0
f000277c:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
f000277e:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
f0002782:          |  |   16fd                  addi    a3,a3,-1
f0002784:          |  |   0785                  addi    a5,a5,1
f0002786:          |  \-- fee5                  bnez    a3,f000277e <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002788:       /--\----X 02080263              beqz    a6,f00027ac <memset+0x4c>
f000278c:       |         00e808b3              add     a7,a6,a4
f0002790:       |         0ff5f813              andi    a6,a1,255
f0002794:       |         010107b7              lui     a5,0x1010
f0002798:       |         10178793              addi    a5,a5,257 # 1010101 <_ottf_size+0xf90101>
f000279c:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00027a0:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f00027a4:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f00027a6:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f00027a8:       |     \-- ff176ce3              bltu    a4,a7,f00027a0 <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
f00027ac:       \--/----X 00c77a63              bgeu    a4,a2,f00027c0 <memset+0x60>
f00027b0:          |      8e19                  sub     a2,a2,a4
f00027b2:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
f00027b6:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
f00027ba:          |  |   167d                  addi    a2,a2,-1
f00027bc:          |  |   0685                  addi    a3,a3,1
f00027be:          |  \-- fe65                  bnez    a2,f00027b6 <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
f00027c0:          \----> 8082                  ret

f00027c2 <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
f00027c2:                             4691                      li      a3,4
f00027c4:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00027c6:                         /-- 00d66663                  bltu    a2,a3,f00027d2 <memchr+0x10>
f00027ca:                         |   40a006b3                  neg     a3,a0
f00027ce:                         |   0036fe93                  andi    t4,a3,3
f00027d2:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f00027d6:                      /----- 000e8b63                  beqz    t4,f00027ec <memchr+0x2a>
f00027da:                      |      85aa                      mv      a1,a0
f00027dc:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
f00027de:                      |  /-> 0005c683                  lbu     a3,0(a1)
f00027e2:       /--------------|--|-- 09c68563                  beq     a3,t3,f000286c <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
f00027e6:       |              |  |   17fd                      addi    a5,a5,-1
f00027e8:       |              |  |   0585                      addi    a1,a1,1
f00027ea:       |              |  \-- fbf5                      bnez    a5,f00027de <memchr+0x1c>
f00027ec:       |              \----> 41d605b3                  sub     a1,a2,t4
f00027f0:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00027f2:       |  /----------------- c9a9                      beqz    a1,f0002844 <memchr+0x82>
f00027f4:       |  |                  01d58833                  add     a6,a1,t4
f00027f8:       |  |                  010105b7                  lui     a1,0x1010
f00027fc:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
f0002800:       |  |                  02be02b3                  mul     t0,t3,a1
f0002804:       |  |                  0ff00893                  li      a7,255
f0002808:       |  |                  65c1                      lui     a1,0x10
f000280a:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f000280e:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002812:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0002816:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
f0002818:       |  |              |   0056c7b3                  xor     a5,a3,t0
f000281c:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f0002820:       |  |              |   0ff6f713                  andi    a4,a3,255
f0002824:       +--|--------------|-- 05170463                  beq     a4,a7,f000286c <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f0002828:       |  |              |   0076f733                  and     a4,a3,t2
f000282c:       |  |  /-----------|-- 02770b63                  beq     a4,t2,f0002862 <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f0002830:       |  |  |           |   0066f6b3                  and     a3,a3,t1
f0002834:       |  |  |  /--------|-- 02668963                  beq     a3,t1,f0002866 <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f0002838:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
f000283c:       |  |  |  |  /-----|-- c69d                      beqz    a3,f000286a <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f000283e:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
f0002840:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,f0002812 <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
f0002844:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,f000285e <memchr+0x9c>
f0002848:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
f000284c:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
f0002850:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
f0002854:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,f000286c <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
f0002858:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
f000285a:       |     |  |  |  |  |   0585                      addi    a1,a1,1
f000285c:       |     |  |  |  |  \-- fa75                      bnez    a2,f0002850 <memchr+0x8e>
f000285e:       |     |  |  |  \----> 4581                      li      a1,0
f0002860:       +-----|--|--|-------- a031                      j       f000286c <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
f0002862:       |     \--|--|-------> 0585                      addi    a1,a1,1
f0002864:       +--------|--|-------- a021                      j       f000286c <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
f0002866:       |        \--|-------> 0589                      addi    a1,a1,2
f0002868:       +-----------|-------- a011                      j       f000286c <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
f000286a:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f000286c:       \-------------------> 852e                      mv      a0,a1
f000286e:                             8082                      ret

f0002870 <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
f0002870:                          4691                 li      a3,4
f0002872:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f0002874:                      /-- 00d66663             bltu    a2,a3,f0002880 <memrchr+0x10>
f0002878:                      |   40a006b3             neg     a3,a0
f000287c:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002880:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002884:                          9af1                 andi    a3,a3,-4
f0002886:                          006687b3             add     a5,a3,t1
f000288a:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
f000288c:                      /-- 00f66363             bltu    a2,a5,f0002892 <memrchr+0x22>
f0002890:                      |   86be                 mv      a3,a5
f0002892:                      \-> 0ff5f393             andi    t2,a1,255
f0002896:                   /--/-X 00c7fd63             bgeu    a5,a2,f00028b0 <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
f000289a:                   |  |   00c50733             add     a4,a0,a2
f000289e:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
f00028a2:                   |  |   fff60713             addi    a4,a2,-1
f00028a6:                   |  |   863a                 mv      a2,a4
f00028a8:                   |  \-- fe7597e3             bne     a1,t2,f0002896 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f00028ac:                   |      953a                 add     a0,a0,a4
f00028ae:                   |      8082                 ret
f00028b0:                   \----> 010105b7             lui     a1,0x1010
f00028b4:                          10158593             addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
f00028b8:                          02b382b3             mul     t0,t2,a1
f00028bc:                          00ff0837             lui     a6,0xff0
f00028c0:                          65c1                 lui     a1,0x10
f00028c2:                          f0058793             addi    a5,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f00028c6:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
f00028ca:       /--------------/-X 04d37563             bgeu    t1,a3,f0002914 <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00028ce:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f00028d2:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
f00028d6:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f00028da:       |              |   01875593             srli    a1,a4,0x18
f00028de:       |  /-----------|-- cd95                 beqz    a1,f000291a <memrchr+0xaa>
f00028e0:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f00028e4:       |  |           |   010775b3             and     a1,a4,a6
f00028e8:       |  |  /--------|-- 03058c63             beq     a1,a6,f0002920 <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f00028ec:       |  |  |        |   00f775b3             and     a1,a4,a5
f00028f0:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,f0002926 <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f00028f4:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
f00028f8:       |  |  |  |     |   16f1                 addi    a3,a3,-4
f00028fa:       |  |  |  |     \-- fd1598e3             bne     a1,a7,f00028ca <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f00028fe:       |  |  |  |         9536                 add     a0,a0,a3
f0002900:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
f0002902:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
f0002906:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
f000290a:       |  |  |  |     |   fff68613             addi    a2,a3,-1
f000290e:       |  |  |  |     |   86b2                 mv      a3,a2
f0002910:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,f000292c <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
f0002914:       \--|--|--|--|--\-X f6fd                 bnez    a3,f0002902 <memrchr+0x92>
f0002916:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002918:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
f000291a:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f000291e:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
f0002920:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002924:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
f0002926:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f000292a:                   |      8082                 ret
f000292c:                   \----> 9532                 add     a0,a0,a2
f000292e:                          8082                 ret

f0002930 <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:9

#include "sw/device/lib/base/math.h"

#include <stddef.h>

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
f0002930:                 1141                  addi    sp,sp,-16
f0002932:                 c622                  sw      s0,12(sp)
f0002934:                 c426                  sw      s1,8(sp)
f0002936:                 c24a                  sw      s2,4(sp)
f0002938:                 4881                  li      a7,0
f000293a:                 4801                  li      a6,0
f000293c:                 4e01                  li      t3,0
f000293e:                 4e81                  li      t4,0
f0002940:                 03f00793              li      a5,63
f0002944:                 42fd                  li      t0,31
f0002946:                 00159313              slli    t1,a1,0x1
f000294a:                 53fd                  li      t2,-1
/proc/self/cwd/sw/device/lib/base/math.c:23
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
f000294c:       /-------> fe078493              addi    s1,a5,-32
f0002950:       |     /-- 0004c563              bltz    s1,f000295a <udiv64_slow+0x2a>
f0002954:       |     |   0095df33              srl     t5,a1,s1
f0002958:       |  /--|-- a809                  j       f000296a <udiv64_slow+0x3a>
f000295a:       |  |  \-> 00f554b3              srl     s1,a0,a5
f000295e:       |  |      40f28433              sub     s0,t0,a5
f0002962:       |  |      00831433              sll     s0,t1,s0
f0002966:       |  |      0084ef33              or      t5,s1,s0
f000296a:       |  \----> 01fe5493              srli    s1,t3,0x1f
f000296e:       |         001e9413              slli    s0,t4,0x1
f0002972:       |         00946eb3              or      t4,s0,s1
f0002976:       |         001e1493              slli    s1,t3,0x1
f000297a:       |         001f7413              andi    s0,t5,1
f000297e:       |         00946f33              or      t5,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:29

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
f0002982:       |  /----- 00de8563              beq     t4,a3,f000298c <udiv64_slow+0x5c>
f0002986:       |  |      00debe33              sltu    t3,t4,a3
f000298a:       |  |  /-- a019                  j       f0002990 <udiv64_slow+0x60>
f000298c:       |  \--|-> 00cf3e33              sltu    t3,t5,a2
f0002990:       |     \-> 001e4f93              xori    t6,t3,1
f0002994:       |         4901                  li      s2,0
f0002996:       |         4481                  li      s1,0
f0002998:       |     /-- 000e1463              bnez    t3,f00029a0 <udiv64_slow+0x70>
f000299c:       |     |   8936                  mv      s2,a3
f000299e:       |     |   84b2                  mv      s1,a2
f00029a0:       |     \-> 01f8de13              srli    t3,a7,0x1f
f00029a4:       |         00181413              slli    s0,a6,0x1
f00029a8:       |         01c46833              or      a6,s0,t3
f00029ac:       |         0886                  slli    a7,a7,0x1
f00029ae:       |         409f0e33              sub     t3,t5,s1
f00029b2:       |         009f34b3              sltu    s1,t5,s1
f00029b6:       |         412e8433              sub     s0,t4,s2
f00029ba:       |         40940eb3              sub     t4,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f00029be:       |         17fd                  addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/base/math.c:29
    if (rem >= b) {
f00029c0:       |         01f8e8b3              or      a7,a7,t6
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f00029c4:       \-------- f87794e3              bne     a5,t2,f000294c <udiv64_slow+0x1c>
/proc/self/cwd/sw/device/lib/base/math.c:35
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
f00029c8:             /-- c709                  beqz    a4,f00029d2 <udiv64_slow+0xa2>
/proc/self/cwd/sw/device/lib/base/math.c:36
    *rem_out = rem;
f00029ca:             |   01c72023              sw      t3,0(a4)
f00029ce:             |   01d72223              sw      t4,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:38
  }
  return quot;
f00029d2:             \-> 8546                  mv      a0,a7
f00029d4:                 85c2                  mv      a1,a6
f00029d6:                 4912                  lw      s2,4(sp)
f00029d8:                 44a2                  lw      s1,8(sp)
f00029da:                 4432                  lw      s0,12(sp)
f00029dc:                 0141                  addi    sp,sp,16
f00029de:                 8082                  ret
