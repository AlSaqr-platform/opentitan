
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/device/silicon_creator/rom/rom_with_fake_keys_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/device/silicon_creator/rom/rom_with_fake_keys_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xd0008180

Program Header:
    LOAD off    0x00001000 vaddr 0xd0008000 paddr 0xd0008000 align 2**12
         filesz 0x0000388c memsz 0x0000388c flags r-x
    LOAD off    0x00000000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00000000 memsz 0x000024b8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .vectors          00000180  d0008000  d0008000  00001000  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .crt              00000680  d0008180  d0008180  00001180  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text             0000277c  d0008800  d0008800  00001800  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .shutdown         00000298  d000af7c  d000af7c  00003f7c  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata           00000674  d000b218  d000b218  00004218  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .static_critical  00001fc4  e0000000  e0000000  00005000  2**2  ALLOC
  6 .data             00000084  e0001fc4  e0001fc4  00005000  2**2  ALLOC
  7 .bss              00000470  e0002048  e0002048  00005000  2**2  ALLOC
  8 .logs.fields      000000a0  00000000  00000000  0000488c  2**2  CONTENTS, READONLY
  9 .riscv.attributes 00000026  00000000  00000000  0000492c  2**0  CONTENTS, READONLY
 10 .debug_info       0000db7a  00000000  00000000  00004952  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev     00002c31  00000000  00000000  000124cc  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges    00000088  00000000  00000000  000150fd  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line       00008d12  00000000  00000000  00015185  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc        000084a1  00000000  00000000  0001de97  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges     00000bc0  00000000  00000000  00026338  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str        0000609a  00000000  00000000  00026ef8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame      00000d44  00000000  00000000  0002cf94  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
d0008000 l    d  .vectors       00000000 .vectors
d0008180 l    d  .crt   00000000 .crt
d0008800 l    d  .text  00000000 .text
d000af7c l    d  .shutdown      00000000 .shutdown
d000b218 l    d  .rodata        00000000 .rodata
e0000000 l    d  .static_critical       00000000 .static_critical
e0001fc4 l    d  .data  00000000 .data
e0002048 l    d  .bss   00000000 .bss
00000000 l    d  .logs.fields   00000000 .logs.fields
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    df *ABS*  00000000 rom_start.o
c0001073 l       *ABS*  00000000 UNIMP
00030d40 l       *ABS*  00000000 WDOG_BITE_THOLD
00036ee8 l       *ABS*  00000000 WDOG_BARK_THOLD
d0008000 l       .vectors       00000000 
d0008000 l       .vectors       00000000 
d0008080 l       .vectors       00000000 
d0008100 l       .vectors       00000000 
d0008100 l       .vectors       00000000 
d0008180 l       .crt   00000000 
d0008180 l       .crt   00000000 
d0008188 l       .crt   00000000 kRomStartBootMaybeHalt
d0008188 l       .crt   00000000 
d0008198 l       .crt   00000000 
d000819a l       .crt   00000000 kRomStartBootExecEn
d000819a l       .crt   00000000 
d000819a l       .crt   00000000 
d00081cc l       .crt   00000000 kRomStartStoreT1ToBiteThold
d00081cc l       .crt   00000000 
d00081d6 l       .crt   00000000 kRomStartWatchdogEnabled
d00081d6 l       .crt   00000000 
00000000 l       .debug_info    00000000 
00000000 l       .debug_abbrev  00000000 
d0008180 l       .vectors       00000000 
d0008380 l       .crt   00000000 
00000000 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 rom.c
d0008800 l       .text  00000000 
d0008800 l       .text  00000000 
d0008800 l       .text  00000000 
d0008802 l       .text  00000000 
d0008810 l       .text  00000000 
d0008818 l       .text  00000000 
d000881c l       .text  00000000 
d000881c l       .text  00000000 
d000881c l       .text  00000000 
d000881c l       .text  00000000 
d0008838 l       .text  00000000 
d0008838 l       .text  00000000 
d000883a l       .text  00000000 
d000883a l       .text  00000000 
d000883e l       .text  00000000 
d000883e l       .text  00000000 
d0008842 l       .text  00000000 
d0008842 l       .text  00000000 
d0008842 l       .text  00000000 
d0008842 l       .text  00000000 
d0008862 l       .text  00000000 
d0008862 l       .text  00000000 
d0008862 l       .text  00000000 
d0008862 l       .text  00000000 
d000887e l       .text  00000000 
d000887e l       .text  00000000 
d000887e l       .text  00000000 
d000887e l       .text  00000000 
d0008882 l       .text  00000000 
d0008882 l       .text  00000000 
d0008886 l       .text  00000000 
d0008886 l       .text  00000000 
d0008890 l       .text  00000000 
d0008894 l       .text  00000000 
d0008894 l       .text  00000000 
d0008898 l       .text  00000000 
d000889c l       .text  00000000 
d00088a0 l       .text  00000000 
d00088a0 l       .text  00000000 
d00088a8 l       .text  00000000 
d00088a8 l       .text  00000000 
d00088ac l       .text  00000000 
d00088ac l       .text  00000000 
d00088b0 l       .text  00000000 
d00088b0 l       .text  00000000 
d00088b2 l       .text  00000000 
d00088b2 l       .text  00000000 
d00088b6 l       .text  00000000 
d00088ba l       .text  00000000 
d00088ba l       .text  00000000 
d00088c4 l       .text  00000000 
d00088c8 l       .text  00000000 
d00088c8 l       .text  00000000 
d00088ca l       .text  00000000 
d00088ce l       .text  00000000 
d00088ce l       .text  00000000 
d00088d6 l       .text  00000000 
d00088d8 l       .text  00000000 
d00088d8 l       .text  00000000 
d00088da l       .text  00000000 
d00088da l       .text  00000000 
d00088de l       .text  00000000 
d00088de l       .text  00000000 
d00088e0 l       .text  00000000 
d00088e2 l       .text  00000000 
d00088e2 l       .text  00000000 
d00088e2 l       .text  00000000 
d00088e2 l       .text  00000000 
d00088e6 l       .text  00000000 
d00088e6 l       .text  00000000 
d00088ea l       .text  00000000 
d00088f6 l       .text  00000000 
d00088f6 l       .text  00000000 
d00088fa l       .text  00000000 
d00088fa l       .text  00000000 
d00088fc l       .text  00000000 
d00088fe l       .text  00000000 
d0008902 l       .text  00000000 
d0008906 l       .text  00000000 
d0008906 l       .text  00000000 
d000890c l       .text  00000000 
d000890c l       .text  00000000 
d000890e l       .text  00000000 
d000890e l       .text  00000000 
d0008912 l       .text  00000000 
d0008912 l       .text  00000000 
d0008916 l       .text  00000000 
d0008922 l       .text  00000000 
d0008922 l       .text  00000000 
d0008926 l       .text  00000000 
d0008928 l       .text  00000000 
d0008928 l       .text  00000000 
d0008930 l       .text  00000000 
d0008930 l       .text  00000000 
d0008934 l       .text  00000000 
d0008934 l       .text  00000000 
d0008938 l       .text  00000000 
d0008938 l       .text  00000000 
d000893a l       .text  00000000 
d000893e l       .text  00000000 
d000893e l       .text  00000000 
d0008942 l       .text  00000000 
d0008942 l       .text  00000000 
d0008946 l       .text  00000000 
d000894c l       .text  00000000 
d000894c l       .text  00000000 
d0008950 l       .text  00000000 
d0008950 l       .text  00000000 
d0008954 l       .text  00000000 
d0008954 l       .text  00000000 
d0008958 l       .text  00000000 
d0008958 l       .text  00000000 
d000895e l       .text  00000000 
d000895e l       .text  00000000 
d0008980 l       .text  00000000 
d0008980 l       .text  00000000 
d0008982 l       .text  00000000 
d0008982 l       .text  00000000 
d0008984 l       .text  00000000 
d0008984 l       .text  00000000 
d0008986 l       .text  00000000 
d0008986 l       .text  00000000 
d000898a l       .text  00000000 
d000898a l       .text  00000000 
d000898e l       .text  00000000 
d000899a l       .text  00000000 
d000899a l       .text  00000000 
d000899c l       .text  00000000 
d000899c l       .text  00000000 
d000899e l       .text  00000000 
d000899e l       .text  00000000 
d00089a4 l       .text  00000000 
d00089a4 l       .text  00000000 
d00089a4 l       .text  00000000 
d00089a4 l       .text  00000000 
d00089a4 l       .text  00000000 
d00089a4 l       .text  00000000 
d00089a6 l       .text  00000000 
d00089a6 l       .text  00000000 
d00089ac l       .text  00000000 
d00089b6 l       .text  00000000 
e000204c l     O .bss   00000004 spi_host
d00089b6 l       .text  00000000 
d00089c6 l       .text  00000000 
d00089c6 l       .text  00000000 
d00089ce l       .text  00000000 
d00089d0 l       .text  00000000 
d00089d0 l       .text  00000000 
d00089d2 l       .text  00000000 
d00089d2 l       .text  00000000 
d00089d4 l       .text  00000000 
d00089d6 l       .text  00000000 
0000003c l     O .logs.fields   00000014 spi_test.kLogFields
d00089d6 l       .text  00000000 
d00089e2 l       .text  00000000 
d00089e2 l       .text  00000000 
d00089e4 l       .text  00000000 
d00089e4 l       .text  00000000 
d00089fc l       .text  00000000 
d00089fc l       .text  00000000 
d0008a02 l       .text  00000000 
d0008a06 l       .text  00000000 
d0008a06 l       .text  00000000 
d0008a1a l       .text  00000000 
d0008a1a l       .text  00000000 
d0008a22 l       .text  00000000 
d0008a26 l       .text  00000000 
d0008a2c l       .text  00000000 
d0008a2e l       .text  00000000 
d0008a36 l       .text  00000000 
d0008a38 l       .text  00000000 
d0008a40 l       .text  00000000 
d0008a40 l       .text  00000000 
d0008a4c l       .text  00000000 
d0008a4e l       .text  00000000 
d0008a4e l       .text  00000000 
d0008a50 l       .text  00000000 
d0008a50 l       .text  00000000 
d0008a52 l       .text  00000000 
d0008a54 l       .text  00000000 
00000050 l     O .logs.fields   00000014 spi_test.kLogFields.9
d0008a54 l       .text  00000000 
d0008a60 l       .text  00000000 
d0008a60 l       .text  00000000 
d0008a62 l       .text  00000000 
d0008a62 l       .text  00000000 
d0008a7a l       .text  00000000 
d0008a7a l       .text  00000000 
d0008a80 l       .text  00000000 
d0008a84 l       .text  00000000 
d0008a84 l       .text  00000000 
d0008a86 l       .text  00000000 
d0008a86 l       .text  00000000 
d0008a8e l       .text  00000000 
d0008a8e l       .text  00000000 
d0008a92 l       .text  00000000 
d0008a92 l       .text  00000000 
d0008a9e l       .text  00000000 
d0008aa6 l       .text  00000000 
d0008aa6 l       .text  00000000 
d0008aa8 l       .text  00000000 
d0008aa8 l       .text  00000000 
d0008ab6 l       .text  00000000 
d0008ab8 l       .text  00000000 
d0008ab8 l       .text  00000000 
d0008aba l       .text  00000000 
d0008aba l       .text  00000000 
d0008abc l       .text  00000000 
d0008abe l       .text  00000000 
00000064 l     O .logs.fields   00000014 spi_test.kLogFields.14
d0008abe l       .text  00000000 
d0008aca l       .text  00000000 
d0008aca l       .text  00000000 
d0008acc l       .text  00000000 
d0008acc l       .text  00000000 
d0008ae4 l       .text  00000000 
d0008ae4 l       .text  00000000 
d0008aea l       .text  00000000 
d0008aee l       .text  00000000 
d0008aee l       .text  00000000 
d0008afa l       .text  00000000 
d0008afa l       .text  00000000 
d0008380 l       .crt   00000000 
d0008380 l       .crt   00000000 
d0008380 l       .crt   00000000 
d0008380 l       .crt   00000000 
d0008384 l       .crt   00000000 
d0008384 l       .crt   00000000 
d0008388 l       .crt   00000000 
d000838a l       .crt   00000000 
d000838c l       .crt   00000000 
d000838e l       .crt   00000000 
d000839a l       .crt   00000000 
d000839a l       .crt   00000000 
d000839e l       .crt   00000000 
d000839e l       .crt   00000000 
00000000 l     O .logs.fields   00000014 read_flash.kLogFields
d0008afa l       .text  00000000 
d0008afa l       .text  00000000 
d0008afa l       .text  00000000 
d0008afc l       .text  00000000 
d0008b04 l       .text  00000000 
d0008b06 l       .text  00000000 
d0008b06 l       .text  00000000 
d0008b0a l       .text  00000000 
d0008b0a l       .text  00000000 
d0008b12 l       .text  00000000 
d0008b12 l       .text  00000000 
d0008b16 l       .text  00000000 
d0008b22 l       .text  00000000 
d0008b28 l       .text  00000000 
d0008b28 l       .text  00000000 
d0008b30 l       .text  00000000 
d0008b32 l       .text  00000000 
d0008b32 l       .text  00000000 
d0008b34 l       .text  00000000 
d0008b34 l       .text  00000000 
d0008b38 l       .text  00000000 
d0008b3a l       .text  00000000 
00000014 l     O .logs.fields   00000014 init_spi_host.kLogFields
d0008b3a l       .text  00000000 
d0008b46 l       .text  00000000 
d0008b46 l       .text  00000000 
d0008b48 l       .text  00000000 
d0008b48 l       .text  00000000 
d0008b60 l       .text  00000000 
d0008b60 l       .text  00000000 
d0008b66 l       .text  00000000 
d0008b6a l       .text  00000000 
d0008b6a l       .text  00000000 
d0008b72 l       .text  00000000 
d0008b74 l       .text  00000000 
d0008b76 l       .text  00000000 
d0008b76 l       .text  00000000 
d0008b7a l       .text  00000000 
d0008b7c l       .text  00000000 
00000028 l     O .logs.fields   00000014 init_spi_host.kLogFields.4
d0008b7c l       .text  00000000 
d0008b88 l       .text  00000000 
d0008b88 l       .text  00000000 
d0008b8a l       .text  00000000 
d0008b8a l       .text  00000000 
d0008ba2 l       .text  00000000 
d0008ba2 l       .text  00000000 
d0008ba8 l       .text  00000000 
d0008bac l       .text  00000000 
d0008bac l       .text  00000000 
d0008bb8 l       .text  00000000 
d0008bb8 l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000001b l       .debug_loc     00000000 
00000041 l       .debug_loc     00000000 
00000064 l       .debug_loc     00000000 
0000007f l       .debug_loc     00000000 
000000b0 l       .debug_loc     00000000 
000000d6 l       .debug_loc     00000000 
000000f1 l       .debug_loc     00000000 
00000117 l       .debug_loc     00000000 
00000132 l       .debug_loc     00000000 
0000014d l       .debug_loc     00000000 
00000168 l       .debug_loc     00000000 
0000018e l       .debug_loc     00000000 
000001b4 l       .debug_loc     00000000 
000001d4 l       .debug_loc     00000000 
00000254 l       .debug_loc     00000000 
000002fe l       .debug_loc     00000000 
0000032f l       .debug_loc     00000000 
00000360 l       .debug_loc     00000000 
0000037b l       .debug_loc     00000000 
00000396 l       .debug_loc     00000000 
000003c7 l       .debug_loc     00000000 
000003e2 l       .debug_loc     00000000 
000003fd l       .debug_loc     00000000 
00000418 l       .debug_loc     00000000 
0000043e l       .debug_loc     00000000 
0000047a l       .debug_loc     00000000 
00000495 l       .debug_loc     00000000 
00000584 l       .debug_loc     00000000 
000005b5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000058 l       .debug_ranges  00000000 
000000a7 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
000000d1 l       .debug_str     00000000 
0000012c l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000e7 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
00000100 l       .debug_str     00000000 
00000110 l       .debug_str     00000000 
0000013e l       .debug_str     00000000 
000001ea l       .debug_str     00000000 
0000014d l       .debug_str     00000000 
00000162 l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
00005342 l       .debug_str     00000000 
00000196 l       .debug_str     00000000 
000001b3 l       .debug_str     00000000 
000001cc l       .debug_str     00000000 
00000154 l       .debug_str     00000000 
00000148 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
0000016b l       .debug_str     00000000 
000001e2 l       .debug_str     00000000 
000001d4 l       .debug_str     00000000 
0000102f l       .debug_str     00000000 
000001f6 l       .debug_str     00000000 
000002bf l       .debug_str     00000000 
00000f39 l       .debug_str     00000000 
00001048 l       .debug_str     00000000 
000010ab l       .debug_str     00000000 
00000988 l       .debug_str     00000000 
0000027a l       .debug_str     00000000 
00000285 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000263 l       .debug_str     00000000 
0000547a l       .debug_str     00000000 
0000026d l       .debug_str     00000000 
00000273 l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000247 l       .debug_str     00000000 
00000201 l       .debug_str     00000000 
00000212 l       .debug_str     00000000 
00000223 l       .debug_str     00000000 
00000235 l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
0000103a l       .debug_str     00000000 
00000fae l       .debug_str     00000000 
00004a83 l       .debug_str     00000000 
00001010 l       .debug_str     00000000 
00001068 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
000010a6 l       .debug_str     00000000 
00001085 l       .debug_str     00000000 
00001093 l       .debug_str     00000000 
000010a1 l       .debug_str     00000000 
000002c8 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002ad l       .debug_str     00000000 
000002a1 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
000002d7 l       .debug_str     00000000 
000002e7 l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
0000031c l       .debug_str     00000000 
00000334 l       .debug_str     00000000 
00000344 l       .debug_str     00000000 
00000352 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
0000036a l       .debug_str     00000000 
00000378 l       .debug_str     00000000 
00000387 l       .debug_str     00000000 
0000039b l       .debug_str     00000000 
000007bb l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b0 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003df l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000411 l       .debug_str     00000000 
00000426 l       .debug_str     00000000 
00000442 l       .debug_str     00000000 
0000045e l       .debug_str     00000000 
00000472 l       .debug_str     00000000 
00000486 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
000004b4 l       .debug_str     00000000 
000004c8 l       .debug_str     00000000 
000004dc l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
000004ff l       .debug_str     00000000 
00000519 l       .debug_str     00000000 
00000530 l       .debug_str     00000000 
0000054a l       .debug_str     00000000 
00000566 l       .debug_str     00000000 
00000582 l       .debug_str     00000000 
00000599 l       .debug_str     00000000 
000005af l       .debug_str     00000000 
000005c7 l       .debug_str     00000000 
000005df l       .debug_str     00000000 
000005f8 l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
0000062a l       .debug_str     00000000 
00000643 l       .debug_str     00000000 
00000662 l       .debug_str     00000000 
00000680 l       .debug_str     00000000 
0000069a l       .debug_str     00000000 
000006b3 l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
000006ed l       .debug_str     00000000 
00000709 l       .debug_str     00000000 
00000725 l       .debug_str     00000000 
00000741 l       .debug_str     00000000 
00000758 l       .debug_str     00000000 
00000771 l       .debug_str     00000000 
00000787 l       .debug_str     00000000 
000007a6 l       .debug_str     00000000 
00000872 l       .debug_str     00000000 
000007c5 l       .debug_str     00000000 
000007e2 l       .debug_str     00000000 
00000800 l       .debug_str     00000000 
0000081c l       .debug_str     00000000 
00000835 l       .debug_str     00000000 
0000084e l       .debug_str     00000000 
000008cf l       .debug_str     00000000 
0000088c l       .debug_str     00000000 
000008a5 l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
0000090e l       .debug_str     00000000 
000008e2 l       .debug_str     00000000 
000008f8 l       .debug_str     00000000 
00000925 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
00000936 l       .debug_str     00000000 
00000941 l       .debug_str     00000000 
0000094c l       .debug_str     00000000 
0000095c l       .debug_str     00000000 
0000096b l       .debug_str     00000000 
0000097a l       .debug_str     00000000 
00000a08 l       .debug_str     00000000 
00000993 l       .debug_str     00000000 
000009a8 l       .debug_str     00000000 
000009c1 l       .debug_str     00000000 
000009d3 l       .debug_str     00000000 
000009e4 l       .debug_str     00000000 
000009f6 l       .debug_str     00000000 
00000a14 l       .debug_str     00000000 
00000a29 l       .debug_str     00000000 
00000a43 l       .debug_str     00000000 
00000a5b l       .debug_str     00000000 
00000a85 l       .debug_str     00000000 
00000aa8 l       .debug_str     00000000 
00000acd l       .debug_str     00000000 
00000ae6 l       .debug_str     00000000 
00000b02 l       .debug_str     00000000 
00000b20 l       .debug_str     00000000 
00000b43 l       .debug_str     00000000 
00000c34 l       .debug_str     00000000 
00000b59 l       .debug_str     00000000 
00000b6e l       .debug_str     00000000 
00000b88 l       .debug_str     00000000 
00000ba5 l       .debug_str     00000000 
00000bbd l       .debug_str     00000000 
00000bd3 l       .debug_str     00000000 
00000bee l       .debug_str     00000000 
00000c06 l       .debug_str     00000000 
00000c22 l       .debug_str     00000000 
00000c42 l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
00000c4c l       .debug_str     00000000 
00000c61 l       .debug_str     00000000 
00000c6d l       .debug_str     00000000 
00000c7b l       .debug_str     00000000 
00002014 l       .debug_str     00000000 
00000c55 l       .debug_str     00000000 
00000c86 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
00000cca l       .debug_str     00000000 
00001007 l       .debug_str     00000000 
00005e37 l       .debug_str     00000000 
00000040 l       .debug_ranges  00000000 
00000028 l       .debug_ranges  00000000 
00000cd4 l       .debug_str     00000000 
00000ce2 l       .debug_str     00000000 
00000cee l       .debug_str     00000000 
00000cf8 l       .debug_str     00000000 
00000d03 l       .debug_str     00000000 
00000d0e l       .debug_str     00000000 
00000d22 l       .debug_str     00000000 
00000d3c l       .debug_str     00000000 
00000d4a l       .debug_str     00000000 
00000d58 l       .debug_str     00000000 
00000d68 l       .debug_str     00000000 
00000d7c l       .debug_str     00000000 
00000d86 l       .debug_str     00000000 
00000d98 l       .debug_str     00000000 
00000dac l       .debug_str     00000000 
00000ddf l       .debug_str     00000000 
00000dbf l       .debug_str     00000000 
00000dd0 l       .debug_str     00000000 
00000dee l       .debug_str     00000000 
00000e02 l       .debug_str     00000000 
00000e1c l       .debug_str     00000000 
00000e32 l       .debug_str     00000000 
00000e4a l       .debug_str     00000000 
00000e5c l       .debug_str     00000000 
00000e64 l       .debug_str     00000000 
00000e68 l       .debug_str     00000000 
00000e73 l       .debug_str     00000000 
00000e85 l       .debug_str     00000000 
00000e9a l       .debug_str     00000000 
00000eb1 l       .debug_str     00000000 
00000ec1 l       .debug_str     00000000 
00000f3d l       .debug_str     00000000 
00005f96 l       .debug_str     00000000 
00004fb1 l       .debug_str     00000000 
00005014 l       .debug_str     00000000 
000008dc l       .debug_str     00000000 
00005aac l       .debug_str     00000000 
00005036 l       .debug_str     00000000 
00000f24 l       .debug_str     00000000 
000051ea l       .debug_str     00000000 
00005b42 l       .debug_str     00000000 
00000f2b l       .debug_str     00000000 
00000f31 l       .debug_str     00000000 
00000f37 l       .debug_str     00000000 
00000eda l       .debug_str     00000000 
00000ef6 l       .debug_str     00000000 
00000f0b l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
00000f52 l       .debug_str     00000000 
00000f72 l       .debug_str     00000000 
00000f78 l       .debug_str     00000000 
00000f86 l       .debug_str     00000000 
00001019 l       .debug_str     00000000 
00001554 l       .debug_str     00000000 
00000f8d l       .debug_str     00000000 
00000ff3 l       .debug_str     00000000 
00000fa4 l       .debug_str     00000000 
00000fc7 l       .debug_str     00000000 
000048b4 l       .debug_str     00000000 
00000fd3 l       .debug_str     00000000 
00000fd9 l       .debug_str     00000000 
00000fde l       .debug_str     00000000 
00000fe9 l       .debug_str     00000000 
00000fee l       .debug_str     00000000 
00001051 l       .debug_str     00000000 
0000106e l       .debug_str     00000000 
00001078 l       .debug_str     00000000 
000010b0 l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
d00089a4 l       .text  00000000 
d0008afa l       .text  00000000 
d000839e l       .crt   00000000 
d0008bb8 l       .text  00000000 
00000000 l    df *ABS*  00000000 irq_asm.o
d00083a0 l       .crt   00000000 
d00083a0 l       .crt   00000000 
d00083b6 l       .crt   00000000 
000013b5 l       .debug_info    00000000 
00000300 l       .debug_abbrev  00000000 
d00083b8 l       .crt   00000000 
00000000 l    df *ABS*  00000000 crt.o
d00083b8 l       .crt   00000000 
d00083b8 l       .crt   00000000 
d00083da l       .crt   00000000 
d00083dc l       .crt   00000000 
d00083dc l       .crt   00000000 
00009c02 l       .debug_info    00000000 
000018e3 l       .debug_abbrev  00000000 
d0008416 l       .crt   00000000 
00000000 l    df *ABS*  00000000 rom_epmp_init.o
d0008418 l       .crt   00000000 
d0008418 l       .crt   00000000 
0000c2fa l       .debug_info    00000000 
000024a5 l       .debug_abbrev  00000000 
d00084a4 l       .crt   00000000 
00000000 l    df *ABS*  00000000 shutdown.c
d0008bb8 l       .text  00000000 
d0008bb8 l       .text  00000000 
d0008bb8 l       .text  00000000 
d0008bba l       .text  00000000 
d0008bd4 l       .text  00000000 
d0008bd6 l       .text  00000000 
d0008bd6 l       .text  00000000 
d0008bd6 l       .text  00000000 
d0008bd6 l       .text  00000000 
d0008bde l       .text  00000000 
d0008bde l       .text  00000000 
d0008be2 l       .text  00000000 
d0008be2 l       .text  00000000 
d0008be6 l       .text  00000000 
d0008bea l       .text  00000000 
d0008bf2 l       .text  00000000 
d0008bf6 l       .text  00000000 
d0008c04 l       .text  00000000 
d0008c04 l       .text  00000000 
d0008c06 l       .text  00000000 
d0008c06 l       .text  00000000 
d0008c08 l       .text  00000000 
d0008c10 l       .text  00000000 
d0008c14 l       .text  00000000 
d0008c22 l       .text  00000000 
d0008c22 l       .text  00000000 
d0008c24 l       .text  00000000 
d0008c24 l       .text  00000000 
d0008c26 l       .text  00000000 
d0008c2e l       .text  00000000 
d0008c3c l       .text  00000000 
d0008c3c l       .text  00000000 
d0008c3e l       .text  00000000 
d0008c3e l       .text  00000000 
d0008c42 l       .text  00000000 
d0008c42 l       .text  00000000 
d0008c44 l       .text  00000000 
d0008c4c l       .text  00000000 
d0008c50 l       .text  00000000 
d0008c50 l       .text  00000000 
d0008c54 l       .text  00000000 
d0008c54 l       .text  00000000 
d0008c60 l       .text  00000000 
d0008c60 l       .text  00000000 
d0008c60 l       .text  00000000 
d0008c60 l       .text  00000000 
d0008c64 l       .text  00000000 
d0008c64 l       .text  00000000 
d0008c6c l       .text  00000000 
d0008c6e l       .text  00000000 
d0008c6e l       .text  00000000 
d0008c76 l       .text  00000000 
d0008c76 l       .text  00000000 
d0008c78 l       .text  00000000 
d0008c78 l       .text  00000000 
d0008c7e l       .text  00000000 
d0008c7e l       .text  00000000 
d0008c82 l       .text  00000000 
d0008c82 l       .text  00000000 
d0008c8c l       .text  00000000 
d0008c8c l       .text  00000000 
d0008c90 l       .text  00000000 
d0008c94 l       .text  00000000 
d0008c94 l       .text  00000000 
d0008c96 l       .text  00000000 
d0008c96 l       .text  00000000 
d0008c9a l       .text  00000000 
d0008c9e l       .text  00000000 
d0008c9e l       .text  00000000 
d0008ca0 l       .text  00000000 
d0008ca0 l       .text  00000000 
d0008ca2 l       .text  00000000 
d0008ca2 l       .text  00000000 
d0008ca4 l       .text  00000000 
d0008cae l       .text  00000000 
d0008cae l       .text  00000000 
d0008cb0 l       .text  00000000 
d0008cb4 l       .text  00000000 
d0008cb8 l       .text  00000000 
d0008cba l       .text  00000000 
d0008cba l       .text  00000000 
d0008cbc l       .text  00000000 
d0008cbc l       .text  00000000 
d0008cc0 l       .text  00000000 
d0008cc0 l       .text  00000000 
d0008cc4 l       .text  00000000 
d0008cc4 l       .text  00000000 
d0008cca l       .text  00000000 
d0008ce2 l       .text  00000000 
d0008ce2 l       .text  00000000 
d0008ce8 l       .text  00000000 
d0008ce8 l       .text  00000000 
d0008cec l       .text  00000000 
d0008cec l       .text  00000000 
d0008cf0 l       .text  00000000 
d0008cf0 l       .text  00000000 
d0008cf4 l       .text  00000000 
d0008cfc l       .text  00000000 
d0008cfc l       .text  00000000 
d0008d0a l       .text  00000000 
d0008d10 l       .text  00000000 
d0008d14 l       .text  00000000 
d0008d14 l       .text  00000000 
d0008d18 l       .text  00000000 
d0008d18 l       .text  00000000 
d0008d1a l       .text  00000000 
d0008d1c l       .text  00000000 
d0008d1c l       .text  00000000 
d0008d1e l       .text  00000000 
d0008d1e l       .text  00000000 
d0008d24 l       .text  00000000 
d0008d24 l       .text  00000000 
d0008d28 l       .text  00000000 
d0008d2c l       .text  00000000 
d0008d2e l       .text  00000000 
d0008d30 l       .text  00000000 
d0008d30 l       .text  00000000 
d0008d32 l       .text  00000000 
d0008d32 l       .text  00000000 
d0008d34 l       .text  00000000 
d0008d34 l       .text  00000000 
d0008d38 l       .text  00000000 
d0008d38 l       .text  00000000 
d0008d54 l       .text  00000000 
d0008d54 l       .text  00000000 
d0008d5a l       .text  00000000 
d0008d5a l       .text  00000000 
d0008d5e l       .text  00000000 
d0008d5e l       .text  00000000 
d0008d62 l       .text  00000000 
d0008d62 l       .text  00000000 
d0008d66 l       .text  00000000 
d0008d6e l       .text  00000000 
d0008d6e l       .text  00000000 
d0008d7c l       .text  00000000 
d0008d82 l       .text  00000000 
d0008d86 l       .text  00000000 
d0008d86 l       .text  00000000 
d0008d8a l       .text  00000000 
d0008d8a l       .text  00000000 
d0008d8c l       .text  00000000 
d0008d8e l       .text  00000000 
d0008d8e l       .text  00000000 
d0008d90 l       .text  00000000 
d0008d90 l       .text  00000000 
d0008d96 l       .text  00000000 
d0008d96 l       .text  00000000 
d0008da0 l       .text  00000000 
d0008da0 l       .text  00000000 
d0008da2 l       .text  00000000 
d0008da2 l       .text  00000000 
d0008da4 l       .text  00000000 
d0008da4 l       .text  00000000 
d0008da8 l       .text  00000000 
d0008da8 l       .text  00000000 
d0008dac l       .text  00000000 
d0008dac l       .text  00000000 
d0008db0 l       .text  00000000 
d0008db8 l       .text  00000000 
d0008dbc l       .text  00000000 
d0008dbe l       .text  00000000 
d0008dc4 l       .text  00000000 
d0008dc8 l       .text  00000000 
d0008dd0 l       .text  00000000 
d0008ddc l       .text  00000000 
d0008ddc l       .text  00000000 
d0008de6 l       .text  00000000 
d0008dec l       .text  00000000 
d0008dee l       .text  00000000 
d0008df0 l       .text  00000000 
d0008df4 l       .text  00000000 
d0008df8 l       .text  00000000 
d0008df8 l       .text  00000000 
d0008dfa l       .text  00000000 
d0008dfe l       .text  00000000 
d0008e02 l       .text  00000000 
d0008e02 l       .text  00000000 
d0008e04 l       .text  00000000 
d0008e04 l       .text  00000000 
d0008e06 l       .text  00000000 
d0008e06 l       .text  00000000 
d0008e06 l       .text  00000000 
d0008e06 l       .text  00000000 
d0008e08 l       .text  00000000 
d0008e08 l       .text  00000000 
d0008e0c l       .text  00000000 
d0008e0c l       .text  00000000 
d0008e14 l       .text  00000000 
d0008e14 l       .text  00000000 
d0008e1a l       .text  00000000 
d0008e1a l       .text  00000000 
d0008e1e l       .text  00000000 
d0008e1e l       .text  00000000 
d0008e20 l       .text  00000000 
d0008e20 l       .text  00000000 
d0008e2a l       .text  00000000 
d0008e2a l       .text  00000000 
d0008e30 l       .text  00000000 
d0008e32 l       .text  00000000 
d0008e38 l       .text  00000000 
d0008e38 l       .text  00000000 
d0008e3e l       .text  00000000 
d0008e42 l       .text  00000000 
d0008e42 l       .text  00000000 
d0008e44 l       .text  00000000 
d0008e44 l       .text  00000000 
d0008e48 l       .text  00000000 
d0008e48 l       .text  00000000 
d0008e4a l       .text  00000000 
d0008e4c l       .text  00000000 
d0008e4c l       .text  00000000 
d0008e4e l       .text  00000000 
d0008e4e l       .text  00000000 
d0008e54 l       .text  00000000 
d0008e54 l       .text  00000000 
d0008e56 l       .text  00000000 
d0008e5a l       .text  00000000 
d0008e5c l       .text  00000000 
d0008e5e l       .text  00000000 
d0008e60 l       .text  00000000 
d0008e68 l       .text  00000000 
d0008e6c l       .text  00000000 
d0008e7c l       .text  00000000 
d0008e7c l       .text  00000000 
d0008e9a l       .text  00000000 
d0008e9a l       .text  00000000 
d0008ea2 l       .text  00000000 
d0008ea2 l       .text  00000000 
d000af7c l       .shutdown      00000000 
d000af7c l       .shutdown      00000000 
d000af7c l       .shutdown      00000000 
d000af80 l       .shutdown      00000000 
d000af80 l       .shutdown      00000000 
d000af82 l       .shutdown      00000000 
d000af82 l       .shutdown      00000000 
d000af88 l       .shutdown      00000000 
d000af88 l       .shutdown      00000000 
d000af8c l       .shutdown      00000000 
d000af8c l       .shutdown      00000000 
d000af9c l       .shutdown      00000000 
d000af9c l       .shutdown      00000000 
d000afa0 l       .shutdown      00000000 
d000afa0 l       .shutdown      00000000 
d000afa8 l       .shutdown      00000000 
d000afac l       .shutdown      00000000 
d000afb4 l       .shutdown      00000000 
d000afb8 l       .shutdown      00000000 
d000afc0 l       .shutdown      00000000 
d000afc4 l       .shutdown      00000000 
d000afda l       .shutdown      00000000 
d000afde l       .shutdown      00000000 
d000afe6 l       .shutdown      00000000 
d000afea l       .shutdown      00000000 
d000aff2 l       .shutdown      00000000 
d000aff6 l       .shutdown      00000000 
d000affe l       .shutdown      00000000 
d000b004 l       .shutdown      00000000 
d000b008 l       .shutdown      00000000 
d000b00c l       .shutdown      00000000 
d000b014 l       .shutdown      00000000 
d000b018 l       .shutdown      00000000 
d000b02a l       .shutdown      00000000 
d000b02e l       .shutdown      00000000 
d000b036 l       .shutdown      00000000 
d000b03a l       .shutdown      00000000 
d000b042 l       .shutdown      00000000 
d000b046 l       .shutdown      00000000 
d000b04a l       .shutdown      00000000 
d000b04a l       .shutdown      00000000 
d000b050 l       .shutdown      00000000 
d000b050 l       .shutdown      00000000 
d000b058 l       .shutdown      00000000 
d000b05c l       .shutdown      00000000 
d000b05c l       .shutdown      00000000 
d000b060 l       .shutdown      00000000 
d000b062 l       .shutdown      00000000 
d000b064 l       .shutdown      00000000 
d000b06c l       .shutdown      00000000 
d000b070 l       .shutdown      00000000 
d000b078 l       .shutdown      00000000 
d000b07c l       .shutdown      00000000 
d000b084 l       .shutdown      00000000 
d000b088 l       .shutdown      00000000 
d000b08c l       .shutdown      00000000 
d000b090 l       .shutdown      00000000 
d000b090 l       .shutdown      00000000 
d000b092 l       .shutdown      00000000 
d000b092 l       .shutdown      00000000 
d000b098 l       .shutdown      00000000 
d000b098 l       .shutdown      00000000 
d000b09a l       .shutdown      00000000 
d000b09c l       .shutdown      00000000 
d000b09e l       .shutdown      00000000 
d000b0a4 l       .shutdown      00000000 
d000b0a4 l       .shutdown      00000000 
d000b0a6 l       .shutdown      00000000 
d000b0a6 l       .shutdown      00000000 
d000b0a8 l       .shutdown      00000000 
d000b0a8 l       .shutdown      00000000 
d000b0ac l       .shutdown      00000000 
d000b0ac l       .shutdown      00000000 
d000b0b6 l       .shutdown      00000000 
d000b0b6 l       .shutdown      00000000 
d000b0c0 l       .shutdown      00000000 
d000b0c0 l       .shutdown      00000000 
d000b0c8 l       .shutdown      00000000 
d000b0c8 l       .shutdown      00000000 
d000b0d0 l       .shutdown      00000000 
d000b0d0 l       .shutdown      00000000 
d000b0d6 l       .shutdown      00000000 
d000b0d6 l       .shutdown      00000000 
d000b0d8 l       .shutdown      00000000 
d000b0d8 l       .shutdown      00000000 
d000b0e0 l       .shutdown      00000000 
d000b0e2 l       .shutdown      00000000 
d000b0e2 l       .shutdown      00000000 
d000b0e6 l       .shutdown      00000000 
d000b0e6 l       .shutdown      00000000 
d000b0ea l       .shutdown      00000000 
d000b0ec l       .shutdown      00000000 
d000b0ec l       .shutdown      00000000 
d000b0ee l       .shutdown      00000000 
d000b0f2 l       .shutdown      00000000 
d000b0f2 l       .shutdown      00000000 
d000b0f4 l       .shutdown      00000000 
d000b0f4 l       .shutdown      00000000 
d000b0f6 l       .shutdown      00000000 
d000b0f6 l       .shutdown      00000000 
d000b0f8 l       .shutdown      00000000 
d000b0f8 l       .shutdown      00000000 
d000b0fa l       .shutdown      00000000 
d000b0fe l       .shutdown      00000000 
d000b0fe l       .shutdown      00000000 
d000b100 l       .shutdown      00000000 
d000b100 l       .shutdown      00000000 
d000b106 l       .shutdown      00000000 
d000b106 l       .shutdown      00000000 
d000b10c l       .shutdown      00000000 
d000b10c l       .shutdown      00000000 
d000b112 l       .shutdown      00000000 
d000b112 l       .shutdown      00000000 
d000b114 l       .shutdown      00000000 
d000b114 l       .shutdown      00000000 
d000b118 l       .shutdown      00000000 
d000b118 l       .shutdown      00000000 
d000b11c l       .shutdown      00000000 
d000b11c l       .shutdown      00000000 
d000b11c l       .shutdown      00000000 
d000b11c l       .shutdown      00000000 
d000b120 l       .shutdown      00000000 
d000b120 l       .shutdown      00000000 
d000b128 l       .shutdown      00000000 
d000b128 l       .shutdown      00000000 
d000b12c l       .shutdown      00000000 
d000b12e l       .shutdown      00000000 
d000b12e l       .shutdown      00000000 
d000b130 l       .shutdown      00000000 
d000b134 l       .shutdown      00000000 
d000b134 l       .shutdown      00000000 
d000b136 l       .shutdown      00000000 
d000b136 l       .shutdown      00000000 
d000b138 l       .shutdown      00000000 
d000b138 l       .shutdown      00000000 
d000b13a l       .shutdown      00000000 
d000b13a l       .shutdown      00000000 
d000b13c l       .shutdown      00000000 
d000b140 l       .shutdown      00000000 
d000b140 l       .shutdown      00000000 
d000b144 l       .shutdown      00000000 
d000b144 l       .shutdown      00000000 
d000b148 l       .shutdown      00000000 
d000b148 l       .shutdown      00000000 
d000b14a l       .shutdown      00000000 
d000b14a l       .shutdown      00000000 
d000b14e l       .shutdown      00000000 
d000b14e l       .shutdown      00000000 
d000b158 l       .shutdown      00000000 
d000b158 l       .shutdown      00000000 
d000b15a l       .shutdown      00000000 
d000b15a l       .shutdown      00000000 
d000b15e l       .shutdown      00000000 
d000b15e l       .shutdown      00000000 
d000b160 l       .shutdown      00000000 
d000b164 l       .shutdown      00000000 
d000b164 l       .shutdown      00000000 
d000b168 l       .shutdown      00000000 
d000b168 l       .shutdown      00000000 
d000b16a l       .shutdown      00000000 
d000b16a l       .shutdown      00000000 
d000b16c l       .shutdown      00000000 
d000b16c l       .shutdown      00000000 
d000b170 l       .shutdown      00000000 
d000b170 l       .shutdown      00000000 
d000b17c l       .shutdown      00000000 
d000b17c l       .shutdown      00000000 
d000b17e l       .shutdown      00000000 
d000b182 l       .shutdown      00000000 
d000b182 l       .shutdown      00000000 
d000b184 l       .shutdown      00000000 
d000b184 l       .shutdown      00000000 
d000b18c l       .shutdown      00000000 
d000b18c l       .shutdown      00000000 
d000b194 l       .shutdown      00000000 
d000b194 l       .shutdown      00000000 
d000b19c l       .shutdown      00000000 
d000b19c l       .shutdown      00000000 
d000b1a0 l       .shutdown      00000000 
d000b1a0 l       .shutdown      00000000 
d000b1b4 l       .shutdown      00000000 
d000b1b4 l       .shutdown      00000000 
d000b214 l       .shutdown      00000000 
d000b214 l       .shutdown      00000000 
d000b214 l       .shutdown      00000000 
000005e6 l       .debug_loc     00000000 
00000622 l       .debug_loc     00000000 
00000648 l       .debug_loc     00000000 
0000066f l       .debug_loc     00000000 
000006ba l       .debug_loc     00000000 
000006e1 l       .debug_loc     00000000 
00000708 l       .debug_loc     00000000 
0000072e l       .debug_loc     00000000 
0000074a l       .debug_loc     00000000 
000007d4 l       .debug_loc     00000000 
0000083f l       .debug_loc     00000000 
0000085a l       .debug_loc     00000000 
000008a2 l       .debug_loc     00000000 
000008bd l       .debug_loc     00000000 
000008fb l       .debug_loc     00000000 
00000939 l       .debug_loc     00000000 
00000976 l       .debug_loc     00000000 
00000999 l       .debug_loc     00000000 
000009b4 l       .debug_loc     00000000 
000009cf l       .debug_loc     00000000 
000009ea l       .debug_loc     00000000 
00000a27 l       .debug_loc     00000000 
00000a4a l       .debug_loc     00000000 
00000a65 l       .debug_loc     00000000 
00000a80 l       .debug_loc     00000000 
00000a9b l       .debug_loc     00000000 
00000ad8 l       .debug_loc     00000000 
00000b21 l       .debug_loc     00000000 
00000b68 l       .debug_loc     00000000 
00000b83 l       .debug_loc     00000000 
00000bb4 l       .debug_loc     00000000 
00000bda l       .debug_loc     00000000 
00000c00 l       .debug_loc     00000000 
00000c26 l       .debug_loc     00000000 
00000c4c l       .debug_loc     00000000 
00000c71 l       .debug_loc     00000000 
00000c95 l       .debug_loc     00000000 
00000cbc l       .debug_loc     00000000 
00000cd7 l       .debug_loc     00000000 
00000cf2 l       .debug_loc     00000000 
00000d18 l       .debug_loc     00000000 
00000d49 l       .debug_loc     00000000 
00000d7a l       .debug_loc     00000000 
00000da0 l       .debug_loc     00000000 
00000dc7 l       .debug_loc     00000000 
00000df8 l       .debug_loc     00000000 
00000e1e l       .debug_loc     00000000 
00000e44 l       .debug_loc     00000000 
00000e5f l       .debug_loc     00000000 
00000e85 l       .debug_loc     00000000 
00000eaa l       .debug_loc     00000000 
00000ece l       .debug_loc     00000000 
00000ef4 l       .debug_loc     00000000 
00000f16 l       .debug_loc     00000000 
00000f31 l       .debug_loc     00000000 
00000f57 l       .debug_loc     00000000 
00000f89 l       .debug_loc     00000000 
00000fbc l       .debug_loc     00000000 
00000fef l       .debug_loc     00000000 
0000102e l       .debug_loc     00000000 
00001049 l       .debug_loc     00000000 
00001087 l       .debug_loc     00000000 
000010ae l       .debug_loc     00000000 
000010ed l       .debug_loc     00000000 
00001108 l       .debug_loc     00000000 
00001123 l       .debug_loc     00000000 
0000113e l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000010c6 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000180 l       .debug_ranges  00000000 
000007bb l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b0 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003df l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000411 l       .debug_str     00000000 
00000426 l       .debug_str     00000000 
00000442 l       .debug_str     00000000 
0000045e l       .debug_str     00000000 
00000472 l       .debug_str     00000000 
00000486 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
000004b4 l       .debug_str     00000000 
000004c8 l       .debug_str     00000000 
000004dc l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
000004ff l       .debug_str     00000000 
00000519 l       .debug_str     00000000 
00000530 l       .debug_str     00000000 
0000054a l       .debug_str     00000000 
00000566 l       .debug_str     00000000 
00000582 l       .debug_str     00000000 
00000599 l       .debug_str     00000000 
000005af l       .debug_str     00000000 
000005c7 l       .debug_str     00000000 
000005df l       .debug_str     00000000 
000005f8 l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
0000062a l       .debug_str     00000000 
00000643 l       .debug_str     00000000 
00000662 l       .debug_str     00000000 
00000680 l       .debug_str     00000000 
0000069a l       .debug_str     00000000 
000006b3 l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
000006ed l       .debug_str     00000000 
00000709 l       .debug_str     00000000 
00000725 l       .debug_str     00000000 
00000741 l       .debug_str     00000000 
00000758 l       .debug_str     00000000 
00000771 l       .debug_str     00000000 
00000787 l       .debug_str     00000000 
000007a6 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000e7 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
00000100 l       .debug_str     00000000 
00000110 l       .debug_str     00000000 
00000d4a l       .debug_str     00000000 
000010ef l       .debug_str     00000000 
000010fc l       .debug_str     00000000 
0000110c l       .debug_str     00000000 
00001118 l       .debug_str     00000000 
000000d1 l       .debug_str     00000000 
000017cc l       .debug_str     00000000 
00001608 l       .debug_str     00000000 
00004a83 l       .debug_str     00000000 
000016ad l       .debug_str     00000000 
000016b6 l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
00001554 l       .debug_str     00000000 
000016c6 l       .debug_str     00000000 
000016d3 l       .debug_str     00000000 
000016e2 l       .debug_str     00000000 
00000088 l       .debug_ranges  00000000 
000000a0 l       .debug_ranges  00000000 
000000b8 l       .debug_ranges  00000000 
00005de4 l       .debug_str     00000000 
000053aa l       .debug_str     00000000 
00001455 l       .debug_str     00000000 
000000d0 l       .debug_ranges  00000000 
000000e8 l       .debug_ranges  00000000 
00005047 l       .debug_str     00000000 
00000100 l       .debug_ranges  00000000 
0000115c l       .debug_str     00000000 
00001124 l       .debug_str     00000000 
00001135 l       .debug_str     00000000 
00001149 l       .debug_str     00000000 
000011cf l       .debug_str     00000000 
00001168 l       .debug_str     00000000 
0000117b l       .debug_str     00000000 
00001190 l       .debug_str     00000000 
000011a5 l       .debug_str     00000000 
000011ba l       .debug_str     00000000 
0000121e l       .debug_str     00000000 
000011dd l       .debug_str     00000000 
000011ea l       .debug_str     00000000 
000011f7 l       .debug_str     00000000 
00001204 l       .debug_str     00000000 
00001211 l       .debug_str     00000000 
0000128f l       .debug_str     00000000 
00001229 l       .debug_str     00000000 
00001242 l       .debug_str     00000000 
0000125c l       .debug_str     00000000 
00001277 l       .debug_str     00000000 
000012a5 l       .debug_str     00000000 
000012b0 l       .debug_str     00000000 
000012bd l       .debug_str     00000000 
000012c7 l       .debug_str     00000000 
0000130d l       .debug_str     00000000 
000012d5 l       .debug_str     00000000 
000012f1 l       .debug_str     00000000 
00001321 l       .debug_str     00000000 
000013c7 l       .debug_str     00000000 
00001327 l       .debug_str     00000000 
0000133a l       .debug_str     00000000 
0000134e l       .debug_str     00000000 
00001361 l       .debug_str     00000000 
00001375 l       .debug_str     00000000 
00001389 l       .debug_str     00000000 
0000139e l       .debug_str     00000000 
000013b2 l       .debug_str     00000000 
000013d6 l       .debug_str     00000000 
000013e4 l       .debug_str     00000000 
000013f0 l       .debug_str     00000000 
000013ff l       .debug_str     00000000 
00001410 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
0000141e l       .debug_str     00000000 
00000cca l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
00001436 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
0000144c l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
00000d03 l       .debug_str     00000000 
00001459 l       .debug_str     00000000 
00001469 l       .debug_str     00000000 
0000147f l       .debug_str     00000000 
000014cc l       .debug_str     00000000 
00004de2 l       .debug_str     00000000 
00001495 l       .debug_str     00000000 
000014a0 l       .debug_str     00000000 
000014b0 l       .debug_str     00000000 
000014bf l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
000014dd l       .debug_str     00000000 
00000c3b l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
000014f4 l       .debug_str     00000000 
00000c55 l       .debug_str     00000000 
00000c86 l       .debug_str     00000000 
00001671 l       .debug_str     00000000 
00000120 l       .debug_ranges  00000000 
000014fd l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
0000150d l       .debug_str     00000000 
0000152b l       .debug_str     00000000 
00001681 l       .debug_str     00000000 
00000138 l       .debug_ranges  00000000 
00001535 l       .debug_str     00000000 
00001691 l       .debug_str     00000000 
0000154b l       .debug_str     00000000 
0000155a l       .debug_str     00000000 
00001568 l       .debug_str     00000000 
000048b1 l       .debug_str     00000000 
00000f72 l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
00001580 l       .debug_str     00000000 
00004bf2 l       .debug_str     00000000 
00001595 l       .debug_str     00000000 
000015ac l       .debug_str     00000000 
0000131a l       .debug_str     00000000 
000015d1 l       .debug_str     00000000 
000015db l       .debug_str     00000000 
000015bb l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
000001e2 l       .debug_str     00000000 
000001d4 l       .debug_str     00000000 
000015e2 l       .debug_str     00000000 
000015f6 l       .debug_str     00000000 
00001611 l       .debug_str     00000000 
0000162b l       .debug_str     00000000 
00001781 l       .debug_str     00000000 
00001640 l       .debug_str     00000000 
0000164f l       .debug_str     00000000 
00001663 l       .debug_str     00000000 
00000e4a l       .debug_str     00000000 
00000150 l       .debug_ranges  00000000 
00000168 l       .debug_ranges  00000000 
00001698 l       .debug_str     00000000 
0000012c l       .debug_str     00000000 
0000009c l       .debug_frame   00000000 
d0008ea2 l       .text  00000000 
d000b214 l       .shutdown      00000000 
00000000 l    df *ABS*  00000000 rom_print.c
d0008ea2 l       .text  00000000 
d0008ea2 l       .text  00000000 
d0008ea2 l       .text  00000000 
d0008ea4 l       .text  00000000 
d0008eb6 l       .text  00000000 
d0008eb8 l       .text  00000000 
d0008ec8 l       .text  00000000 
d0008ec8 l       .text  00000000 
d0008eda l       .text  00000000 
d000b51c l     O .rodata        00000010 rom_printf.kHexTable
d0008eda l       .text  00000000 
d0008ee6 l       .text  00000000 
d0008ee6 l       .text  00000000 
d0008eea l       .text  00000000 
d0008ef0 l       .text  00000000 
d0008ef2 l       .text  00000000 
d0008ef6 l       .text  00000000 
d0008ef6 l       .text  00000000 
d0008ef8 l       .text  00000000 
d0008ef8 l       .text  00000000 
d0008efc l       .text  00000000 
d0008f00 l       .text  00000000 
d0008f00 l       .text  00000000 
d0008f08 l       .text  00000000 
d0008f08 l       .text  00000000 
d0008f0a l       .text  00000000 
d0008f0e l       .text  00000000 
d0008f12 l       .text  00000000 
d0008f12 l       .text  00000000 
d0008f18 l       .text  00000000 
d0008f1a l       .text  00000000 
d0008f1a l       .text  00000000 
d0008f1e l       .text  00000000 
d0008f1e l       .text  00000000 
d0008f26 l       .text  00000000 
d0008f26 l       .text  00000000 
d0008f2a l       .text  00000000 
d0008f30 l       .text  00000000 
d0008f30 l       .text  00000000 
d0008f32 l       .text  00000000 
d0008f36 l       .text  00000000 
d0008f3a l       .text  00000000 
d0008f3a l       .text  00000000 
d0008f3c l       .text  00000000 
d0008f3c l       .text  00000000 
d0008f40 l       .text  00000000 
d0008f46 l       .text  00000000 
d0008f4a l       .text  00000000 
d0008f4a l       .text  00000000 
d0008f4c l       .text  00000000 
d0008f4c l       .text  00000000 
d0008f4e l       .text  00000000 
d0008f4e l       .text  00000000 
d0008f50 l       .text  00000000 
d0008f50 l       .text  00000000 
d0008f52 l       .text  00000000 
d0008f58 l       .text  00000000 
d0008f58 l       .text  00000000 
d0008f70 l       .text  00000000 
d0008f70 l       .text  00000000 
0000115e l       .debug_loc     00000000 
000011aa l       .debug_loc     00000000 
000011ea l       .debug_loc     00000000 
000011fd l       .debug_loc     00000000 
00001210 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000016eb l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000e68 l       .debug_str     00000000 
000015d1 l       .debug_str     00000000 
00000273 l       .debug_str     00000000 
0000026e l       .debug_str     00000000 
000001a8 l       .debug_ranges  00000000 
00001734 l       .debug_str     00000000 
00000e98 l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
000001c0 l       .debug_ranges  00000000 
000016b0 l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
000007bb l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b0 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003df l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000411 l       .debug_str     00000000 
00000426 l       .debug_str     00000000 
00000442 l       .debug_str     00000000 
0000045e l       .debug_str     00000000 
00000472 l       .debug_str     00000000 
00000486 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
000004b4 l       .debug_str     00000000 
000004c8 l       .debug_str     00000000 
000004dc l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
000004ff l       .debug_str     00000000 
00000519 l       .debug_str     00000000 
00000530 l       .debug_str     00000000 
0000054a l       .debug_str     00000000 
00000566 l       .debug_str     00000000 
00000582 l       .debug_str     00000000 
00000599 l       .debug_str     00000000 
000005af l       .debug_str     00000000 
000005c7 l       .debug_str     00000000 
000005df l       .debug_str     00000000 
000005f8 l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
0000062a l       .debug_str     00000000 
00000643 l       .debug_str     00000000 
00000662 l       .debug_str     00000000 
00000680 l       .debug_str     00000000 
0000069a l       .debug_str     00000000 
000006b3 l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
000006ed l       .debug_str     00000000 
00000709 l       .debug_str     00000000 
00000725 l       .debug_str     00000000 
00000741 l       .debug_str     00000000 
00000758 l       .debug_str     00000000 
00000771 l       .debug_str     00000000 
00000787 l       .debug_str     00000000 
000007a6 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00001715 l       .debug_str     00000000 
000001d4 l       .debug_str     00000000 
00000c55 l       .debug_str     00000000 
0000172c l       .debug_str     00000000 
00001722 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000110 l       .debug_frame   00000000 
d0008f70 l       .text  00000000 
00000000 l    df *ABS*  00000000 alert.c
d0008f70 l       .text  00000000 
d0008f70 l       .text  00000000 
d0008f70 l       .text  00000000 
d0008f74 l       .text  00000000 
d0008f78 l       .text  00000000 
d0008f7c l       .text  00000000 
d0008f80 l       .text  00000000 
d0008f82 l       .text  00000000 
d0008f82 l       .text  00000000 
d0008f8a l       .text  00000000 
d0008f8e l       .text  00000000 
d0008f8e l       .text  00000000 
d0008f96 l       .text  00000000 
d0008f9a l       .text  00000000 
d0008f9e l       .text  00000000 
d0008fa2 l       .text  00000000 
d0008fa6 l       .text  00000000 
d0008faa l       .text  00000000 
d0008fae l       .text  00000000 
d0008fb2 l       .text  00000000 
d0008fb6 l       .text  00000000 
d0008fb6 l       .text  00000000 
d0008fba l       .text  00000000 
d0008fc0 l       .text  00000000 
d0008fc0 l       .text  00000000 
d0008fc4 l       .text  00000000 
d0008fc8 l       .text  00000000 
d0008fcc l       .text  00000000 
d0008fd0 l       .text  00000000 
d0008fd4 l       .text  00000000 
d0008fd4 l       .text  00000000 
d0008fd8 l       .text  00000000 
d0008fd8 l       .text  00000000 
d0008fdc l       .text  00000000 
d0008fdc l       .text  00000000 
d0008fe0 l       .text  00000000 
d0008fe0 l       .text  00000000 
d0008fe4 l       .text  00000000 
d0008fe4 l       .text  00000000 
d0009000 l       .text  00000000 
d0009006 l       .text  00000000 
d0009006 l       .text  00000000 
d000900a l       .text  00000000 
d000900e l       .text  00000000 
d000900e l       .text  00000000 
d0009012 l       .text  00000000 
d0009012 l       .text  00000000 
d0009014 l       .text  00000000 
d0009014 l       .text  00000000 
d000901a l       .text  00000000 
d000901a l       .text  00000000 
d0009020 l       .text  00000000 
d0009020 l       .text  00000000 
d0009024 l       .text  00000000 
d0009028 l       .text  00000000 
d0009028 l       .text  00000000 
d000902a l       .text  00000000 
d000902a l       .text  00000000 
d0009030 l       .text  00000000 
d0009030 l       .text  00000000 
d0009030 l       .text  00000000 
d0009030 l       .text  00000000 
d0009030 l       .text  00000000 
d0009032 l       .text  00000000 
d0009036 l       .text  00000000 
d000903a l       .text  00000000 
d000903e l       .text  00000000 
d0009040 l       .text  00000000 
d0009040 l       .text  00000000 
d0009048 l       .text  00000000 
d000904c l       .text  00000000 
d000904c l       .text  00000000 
d0009054 l       .text  00000000 
d0009058 l       .text  00000000 
d000905c l       .text  00000000 
d0009060 l       .text  00000000 
d0009064 l       .text  00000000 
d0009068 l       .text  00000000 
d000906c l       .text  00000000 
d0009070 l       .text  00000000 
d0009074 l       .text  00000000 
d0009074 l       .text  00000000 
d0009078 l       .text  00000000 
d000907e l       .text  00000000 
d000907e l       .text  00000000 
d0009082 l       .text  00000000 
d0009086 l       .text  00000000 
d000908a l       .text  00000000 
d000908e l       .text  00000000 
d0009092 l       .text  00000000 
d0009092 l       .text  00000000 
d0009096 l       .text  00000000 
d0009096 l       .text  00000000 
d000909a l       .text  00000000 
d000909a l       .text  00000000 
d000909e l       .text  00000000 
d000909e l       .text  00000000 
d00090a2 l       .text  00000000 
d00090a2 l       .text  00000000 
d00090be l       .text  00000000 
d00090c4 l       .text  00000000 
d00090c4 l       .text  00000000 
d00090c8 l       .text  00000000 
d00090cc l       .text  00000000 
d00090cc l       .text  00000000 
d00090d0 l       .text  00000000 
d00090d0 l       .text  00000000 
d00090d2 l       .text  00000000 
d00090d2 l       .text  00000000 
d00090d8 l       .text  00000000 
d00090d8 l       .text  00000000 
d00090de l       .text  00000000 
d00090de l       .text  00000000 
d00090e2 l       .text  00000000 
d00090e6 l       .text  00000000 
d00090e6 l       .text  00000000 
d00090e8 l       .text  00000000 
d00090e8 l       .text  00000000 
d00090ee l       .text  00000000 
d00090ee l       .text  00000000 
d00090ee l       .text  00000000 
d00090ee l       .text  00000000 
d00090ee l       .text  00000000 
d00090f0 l       .text  00000000 
d00090f8 l       .text  00000000 
d00090fc l       .text  00000000 
d0009100 l       .text  00000000 
d0009104 l       .text  00000000 
d0009108 l       .text  00000000 
d000910c l       .text  00000000 
d0009110 l       .text  00000000 
d0009110 l       .text  00000000 
d0009116 l       .text  00000000 
d000911a l       .text  00000000 
d000911e l       .text  00000000 
d0009122 l       .text  00000000 
d0009126 l       .text  00000000 
d000912e l       .text  00000000 
d0009130 l       .text  00000000 
d0009134 l       .text  00000000 
d0009134 l       .text  00000000 
d000913c l       .text  00000000 
d0009140 l       .text  00000000 
d0009144 l       .text  00000000 
d0009148 l       .text  00000000 
d000914c l       .text  00000000 
d0009150 l       .text  00000000 
d0009156 l       .text  00000000 
d0009158 l       .text  00000000 
d0009162 l       .text  00000000 
d0009162 l       .text  00000000 
d0009170 l       .text  00000000 
d0009174 l       .text  00000000 
d0009178 l       .text  00000000 
d000917c l       .text  00000000 
d0009180 l       .text  00000000 
d0009184 l       .text  00000000 
d0009188 l       .text  00000000 
d000918c l       .text  00000000 
d000918c l       .text  00000000 
d000918e l       .text  00000000 
d000918e l       .text  00000000 
d0009192 l       .text  00000000 
d0009196 l       .text  00000000 
d000919a l       .text  00000000 
d000919e l       .text  00000000 
d000919e l       .text  00000000 
d00091a2 l       .text  00000000 
d00091a2 l       .text  00000000 
d00091a6 l       .text  00000000 
d00091a6 l       .text  00000000 
d00091aa l       .text  00000000 
d00091aa l       .text  00000000 
d00091ae l       .text  00000000 
d00091ae l       .text  00000000 
d00091b6 l       .text  00000000 
d00091b6 l       .text  00000000 
d00091b8 l       .text  00000000 
d00091b8 l       .text  00000000 
d00091bc l       .text  00000000 
d00091c0 l       .text  00000000 
d00091c0 l       .text  00000000 
d00091c2 l       .text  00000000 
d00091c2 l       .text  00000000 
d00091c6 l       .text  00000000 
d00091ca l       .text  00000000 
d00091ca l       .text  00000000 
d00091cc l       .text  00000000 
d00091cc l       .text  00000000 
d00091ce l       .text  00000000 
d00091ce l       .text  00000000 
d00091d2 l       .text  00000000 
d00091da l       .text  00000000 
d00091da l       .text  00000000 
d00091dc l       .text  00000000 
d00091dc l       .text  00000000 
d00091de l       .text  00000000 
d00091de l       .text  00000000 
d00091e8 l       .text  00000000 
d00091e8 l       .text  00000000 
d00091ea l       .text  00000000 
d00091ea l       .text  00000000 
d00091ec l       .text  00000000 
d00091ec l       .text  00000000 
d00091ee l       .text  00000000 
d00091ee l       .text  00000000 
d00091f2 l       .text  00000000 
d00091f2 l       .text  00000000 
d00091fa l       .text  00000000 
d00091fe l       .text  00000000 
d00091fe l       .text  00000000 
d0009202 l       .text  00000000 
d0009202 l       .text  00000000 
d0009204 l       .text  00000000 
d0009204 l       .text  00000000 
d000920c l       .text  00000000 
d000920e l       .text  00000000 
d000920e l       .text  00000000 
00001241 l       .debug_loc     00000000 
00001272 l       .debug_loc     00000000 
000012c4 l       .debug_loc     00000000 
000012f5 l       .debug_loc     00000000 
00001326 l       .debug_loc     00000000 
00001378 l       .debug_loc     00000000 
000013a9 l       .debug_loc     00000000 
000013e5 l       .debug_loc     00000000 
00001416 l       .debug_loc     00000000 
00001471 l       .debug_loc     00000000 
000014e2 l       .debug_loc     00000000 
00001504 l       .debug_loc     00000000 
00001526 l       .debug_loc     00000000 
00001548 l       .debug_loc     00000000 
0000156a l       .debug_loc     00000000 
000015a9 l       .debug_loc     00000000 
000015dc l       .debug_loc     00000000 
00001618 l       .debug_loc     00000000 
0000164b l       .debug_loc     00000000 
00001689 l       .debug_loc     00000000 
000016bc l       .debug_loc     00000000 
000016fa l       .debug_loc     00000000 
0000172d l       .debug_loc     00000000 
0000176b l       .debug_loc     00000000 
0000179e l       .debug_loc     00000000 
000017dc l       .debug_loc     00000000 
0000180f l       .debug_loc     00000000 
0000184d l       .debug_loc     00000000 
0000186b l       .debug_loc     00000000 
00001886 l       .debug_loc     00000000 
000018a3 l       .debug_loc     00000000 
000018d6 l       .debug_loc     00000000 
00001907 l       .debug_loc     00000000 
0000192d l       .debug_loc     00000000 
00001953 l       .debug_loc     00000000 
00001979 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001738 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
000001f0 l       .debug_ranges  00000000 
000007bb l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b0 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003df l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000411 l       .debug_str     00000000 
00000426 l       .debug_str     00000000 
00000442 l       .debug_str     00000000 
0000045e l       .debug_str     00000000 
00000472 l       .debug_str     00000000 
00000486 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
000004b4 l       .debug_str     00000000 
000004c8 l       .debug_str     00000000 
000004dc l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
000004ff l       .debug_str     00000000 
00000519 l       .debug_str     00000000 
00000530 l       .debug_str     00000000 
0000054a l       .debug_str     00000000 
00000566 l       .debug_str     00000000 
00000582 l       .debug_str     00000000 
00000599 l       .debug_str     00000000 
000005af l       .debug_str     00000000 
000005c7 l       .debug_str     00000000 
000005df l       .debug_str     00000000 
000005f8 l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
0000062a l       .debug_str     00000000 
00000643 l       .debug_str     00000000 
00000662 l       .debug_str     00000000 
00000680 l       .debug_str     00000000 
0000069a l       .debug_str     00000000 
000006b3 l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
000006ed l       .debug_str     00000000 
00000709 l       .debug_str     00000000 
00000725 l       .debug_str     00000000 
00000741 l       .debug_str     00000000 
00000758 l       .debug_str     00000000 
00000771 l       .debug_str     00000000 
00000787 l       .debug_str     00000000 
000007a6 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
0000121e l       .debug_str     00000000 
000011dd l       .debug_str     00000000 
000011ea l       .debug_str     00000000 
000011f7 l       .debug_str     00000000 
00001204 l       .debug_str     00000000 
00001211 l       .debug_str     00000000 
0000115c l       .debug_str     00000000 
00001124 l       .debug_str     00000000 
00001135 l       .debug_str     00000000 
00001149 l       .debug_str     00000000 
00001321 l       .debug_str     00000000 
000011cf l       .debug_str     00000000 
00001168 l       .debug_str     00000000 
0000117b l       .debug_str     00000000 
00001190 l       .debug_str     00000000 
000011a5 l       .debug_str     00000000 
000011ba l       .debug_str     00000000 
000017d3 l       .debug_str     00000000 
00001766 l       .debug_str     00000000 
000051e9 l       .debug_str     00000000 
000017f9 l       .debug_str     00000000 
000017ff l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000e7 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
00000100 l       .debug_str     00000000 
00000110 l       .debug_str     00000000 
000017e6 l       .debug_str     00000000 
00001771 l       .debug_str     00000000 
000000d1 l       .debug_str     00000000 
0000577b l       .debug_str     00000000 
000017e0 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00001611 l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
00001459 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
00001455 l       .debug_str     00000000 
00004de2 l       .debug_str     00000000 
00001469 l       .debug_str     00000000 
00000c86 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00001580 l       .debug_str     00000000 
00004bf2 l       .debug_str     00000000 
00001595 l       .debug_str     00000000 
00000f72 l       .debug_str     00000000 
0000147f l       .debug_str     00000000 
00004a83 l       .debug_str     00000000 
00001781 l       .debug_str     00000000 
00005dd8 l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
000001d8 l       .debug_ranges  00000000 
000017c1 l       .debug_str     00000000 
000014fd l       .debug_str     00000000 
00001777 l       .debug_str     00000000 
00001785 l       .debug_str     00000000 
00001794 l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
0000179d l       .debug_str     00000000 
000017a8 l       .debug_str     00000000 
000017b4 l       .debug_str     00000000 
00000cca l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
00000d03 l       .debug_str     00000000 
00000c55 l       .debug_str     00000000 
00001410 l       .debug_str     00000000 
000013f0 l       .debug_str     00000000 
00001698 l       .debug_str     00000000 
000014cc l       .debug_str     00000000 
00001495 l       .debug_str     00000000 
000014a0 l       .debug_str     00000000 
000014b0 l       .debug_str     00000000 
000014bf l       .debug_str     00000000 
000013ff l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
0000012c l       .debug_str     00000000 
0000014c l       .debug_frame   00000000 
d0009030 l       .text  00000000 
d00090ee l       .text  00000000 
d000920e l       .text  00000000 
00000000 l    df *ABS*  00000000 ast.c
d000920e l       .text  00000000 
d000920e l       .text  00000000 
d000920e l       .text  00000000 
d0009210 l       .text  00000000 
d0009210 l       .text  00000000 
d0009210 l       .text  00000000 
d0009212 l       .text  00000000 
d0009214 l       .text  00000000 
d0009214 l       .text  00000000 
d000921c l       .text  00000000 
d000921c l       .text  00000000 
d0009220 l       .text  00000000 
d0009220 l       .text  00000000 
d0009224 l       .text  00000000 
d0009228 l       .text  00000000 
d0009230 l       .text  00000000 
d0009234 l       .text  00000000 
d0009242 l       .text  00000000 
d000924a l       .text  00000000 
d000924e l       .text  00000000 
d000925c l       .text  00000000 
d0009264 l       .text  00000000 
d0009272 l       .text  00000000 
d000927a l       .text  00000000 
d000927e l       .text  00000000 
d000928a l       .text  00000000 
d000928e l       .text  00000000 
d0009292 l       .text  00000000 
d0009292 l       .text  00000000 
d0009294 l       .text  00000000 
d0009294 l       .text  00000000 
d0009296 l       .text  00000000 
d0009296 l       .text  00000000 
d000929a l       .text  00000000 
d000929a l       .text  00000000 
d00092a8 l       .text  00000000 
d00092a8 l       .text  00000000 
d00092ac l       .text  00000000 
d00092ac l       .text  00000000 
d00092c4 l       .text  00000000 
d00092c4 l       .text  00000000 
d00092c8 l       .text  00000000 
d00092c8 l       .text  00000000 
d00092ca l       .text  00000000 
d00092ca l       .text  00000000 
d00092d2 l       .text  00000000 
d00092d2 l       .text  00000000 
d00092d4 l       .text  00000000 
d00092d8 l       .text  00000000 
d00092d8 l       .text  00000000 
d00092da l       .text  00000000 
d00092da l       .text  00000000 
d00092e0 l       .text  00000000 
d00092e4 l       .text  00000000 
d00092e4 l       .text  00000000 
d00092f0 l       .text  00000000 
d00092f0 l       .text  00000000 
d00092f4 l       .text  00000000 
d00092f6 l       .text  00000000 
d0009302 l       .text  00000000 
d000930a l       .text  00000000 
d000930e l       .text  00000000 
d000931a l       .text  00000000 
d000931a l       .text  00000000 
d000931e l       .text  00000000 
d0009324 l       .text  00000000 
d0009324 l       .text  00000000 
d000932c l       .text  00000000 
d000932c l       .text  00000000 
0000199f l       .debug_loc     00000000 
000019d0 l       .debug_loc     00000000 
000019f6 l       .debug_loc     00000000 
00001a1c l       .debug_loc     00000000 
00001a37 l       .debug_loc     00000000 
00001a6d l       .debug_loc     00000000 
00001aa1 l       .debug_loc     00000000 
00001abc l       .debug_loc     00000000 
00001ad7 l       .debug_loc     00000000 
00001b00 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000180b l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000228 l       .debug_ranges  00000000 
000007bb l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b0 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003df l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000411 l       .debug_str     00000000 
00000426 l       .debug_str     00000000 
00000442 l       .debug_str     00000000 
0000045e l       .debug_str     00000000 
00000472 l       .debug_str     00000000 
00000486 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
000004b4 l       .debug_str     00000000 
000004c8 l       .debug_str     00000000 
000004dc l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
000004ff l       .debug_str     00000000 
00000519 l       .debug_str     00000000 
00000530 l       .debug_str     00000000 
0000054a l       .debug_str     00000000 
00000566 l       .debug_str     00000000 
00000582 l       .debug_str     00000000 
00000599 l       .debug_str     00000000 
000005af l       .debug_str     00000000 
000005c7 l       .debug_str     00000000 
000005df l       .debug_str     00000000 
000005f8 l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
0000062a l       .debug_str     00000000 
00000643 l       .debug_str     00000000 
00000662 l       .debug_str     00000000 
00000680 l       .debug_str     00000000 
0000069a l       .debug_str     00000000 
000006b3 l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
000006ed l       .debug_str     00000000 
00000709 l       .debug_str     00000000 
00000725 l       .debug_str     00000000 
00000741 l       .debug_str     00000000 
00000758 l       .debug_str     00000000 
00000771 l       .debug_str     00000000 
00000787 l       .debug_str     00000000 
000007a6 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000e7 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
00000100 l       .debug_str     00000000 
00000110 l       .debug_str     00000000 
000013c7 l       .debug_str     00000000 
00001327 l       .debug_str     00000000 
0000133a l       .debug_str     00000000 
0000134e l       .debug_str     00000000 
00001361 l       .debug_str     00000000 
00001375 l       .debug_str     00000000 
00001389 l       .debug_str     00000000 
0000139e l       .debug_str     00000000 
000013b2 l       .debug_str     00000000 
0000185c l       .debug_str     00000000 
00001837 l       .debug_str     00000000 
00001849 l       .debug_str     00000000 
00001321 l       .debug_str     00000000 
00000c55 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000cca l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
000014fd l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
0000186a l       .debug_str     00000000 
00001781 l       .debug_str     00000000 
00000f72 l       .debug_str     00000000 
00001877 l       .debug_str     00000000 
0000577b l       .debug_str     00000000 
00001885 l       .debug_str     00000000 
000015e2 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00004bf2 l       .debug_str     00000000 
00001595 l       .debug_str     00000000 
00000d7c l       .debug_str     00000000 
000000d1 l       .debug_str     00000000 
000012ba l       .debug_str     00000000 
00001568 l       .debug_str     00000000 
0000187b l       .debug_str     00000000 
00000d03 l       .debug_str     00000000 
0000012c l       .debug_str     00000000 
000001e0 l       .debug_frame   00000000 
d000932c l       .text  00000000 
00000000 l    df *ABS*  00000000 flash_ctrl.c
d000932c l       .text  00000000 
d000932c l       .text  00000000 
d000932c l       .text  00000000 
d000932e l       .text  00000000 
d0009336 l       .text  00000000 
d000933c l       .text  00000000 
d000933c l       .text  00000000 
d000933e l       .text  00000000 
d000933e l       .text  00000000 
d0009346 l       .text  00000000 
d0009346 l       .text  00000000 
d000934a l       .text  00000000 
d000934a l       .text  00000000 
d000934e l       .text  00000000 
d0009352 l       .text  00000000 
d0009352 l       .text  00000000 
d0009354 l       .text  00000000 
d0009354 l       .text  00000000 
d0009358 l       .text  00000000 
d0009358 l       .text  00000000 
d0009360 l       .text  00000000 
d0009362 l       .text  00000000 
d0009362 l       .text  00000000 
d000936a l       .text  00000000 
d000936a l       .text  00000000 
d000936e l       .text  00000000 
d000936e l       .text  00000000 
d0009372 l       .text  00000000 
d0009376 l       .text  00000000 
d0009376 l       .text  00000000 
d0009378 l       .text  00000000 
d0009378 l       .text  00000000 
d000937c l       .text  00000000 
d000937c l       .text  00000000 
d000938e l       .text  00000000 
d000938e l       .text  00000000 
d00093a0 l       .text  00000000 
d00093a0 l       .text  00000000 
d00093a2 l       .text  00000000 
d00093a4 l       .text  00000000 
d00093a6 l       .text  00000000 
d00093ac l       .text  00000000 
d00093ac l       .text  00000000 
d00093ac l       .text  00000000 
d00093ac l       .text  00000000 
d00093ac l       .text  00000000 
d00093ae l       .text  00000000 
d00093b4 l       .text  00000000 
d00093b6 l       .text  00000000 
d00093be l       .text  00000000 
d00093c4 l       .text  00000000 
d00093c4 l       .text  00000000 
d00093cc l       .text  00000000 
d00093cc l       .text  00000000 
d00093ce l       .text  00000000 
d00093ce l       .text  00000000 
d00093d0 l       .text  00000000 
d00093d0 l       .text  00000000 
d00093d2 l       .text  00000000 
d00093d2 l       .text  00000000 
d00093d4 l       .text  00000000 
d00093d6 l       .text  00000000 
d00093d6 l       .text  00000000 
d00093d8 l       .text  00000000 
d00093d8 l       .text  00000000 
d00093da l       .text  00000000 
d00093dc l       .text  00000000 
d00093dc l       .text  00000000 
d00093de l       .text  00000000 
d00093de l       .text  00000000 
d00093e0 l       .text  00000000 
d00093e2 l       .text  00000000 
d00093e4 l       .text  00000000 
d00093e4 l       .text  00000000 
d00093ea l       .text  00000000 
d00093f2 l       .text  00000000 
d00093f2 l       .text  00000000 
d00093f2 l       .text  00000000 
d00093f2 l       .text  00000000 
d00093f2 l       .text  00000000 
d00093f2 l       .text  00000000 
d00093f4 l       .text  00000000 
d00093fa l       .text  00000000 
d00093fc l       .text  00000000 
d0009438 l     F .text  00000366 info_cfg_regs
d00093fc l       .text  00000000 
d00093fe l       .text  00000000 
d0009400 l       .text  00000000 
d0009400 l       .text  00000000 
d0009406 l       .text  00000000 
d0009406 l       .text  00000000 
d000940a l       .text  00000000 
d000940e l       .text  00000000 
d000940e l       .text  00000000 
d0009410 l       .text  00000000 
d0009410 l       .text  00000000 
d0009412 l       .text  00000000 
d0009412 l       .text  00000000 
d0009414 l       .text  00000000 
d0009414 l       .text  00000000 
d0009416 l       .text  00000000 
d0009416 l       .text  00000000 
d0009418 l       .text  00000000 
d0009418 l       .text  00000000 
d000941a l       .text  00000000 
d000941c l       .text  00000000 
d000941c l       .text  00000000 
d000941e l       .text  00000000 
d0009420 l       .text  00000000 
d0009420 l       .text  00000000 
d0009422 l       .text  00000000 
d0009422 l       .text  00000000 
d000942a l       .text  00000000 
d000942a l       .text  00000000 
d000942e l       .text  00000000 
d0009430 l       .text  00000000 
d0009438 l       .text  00000000 
d0009438 l       .text  00000000 
d0009438 l       .text  00000000 
d0009438 l       .text  00000000 
d0009438 l       .text  00000000 
d0009438 l       .text  00000000 
d0009438 l       .text  00000000 
d000943a l       .text  00000000 
d000943a l       .text  00000000 
d0009442 l       .text  00000000 
d0009442 l       .text  00000000 
d0009446 l       .text  00000000 
d0009446 l       .text  00000000 
d000944e l       .text  00000000 
d0009452 l       .text  00000000 
d000945a l       .text  00000000 
d000945e l       .text  00000000 
d0009462 l       .text  00000000 
d0009466 l       .text  00000000 
d000946e l       .text  00000000 
d0009472 l       .text  00000000 
d0009472 l       .text  00000000 
d0009472 l       .text  00000000 
d0009472 l       .text  00000000 
d000948a l       .text  00000000 
d000948c l       .text  00000000 
d000948c l       .text  00000000 
d0009494 l       .text  00000000 
d0009498 l       .text  00000000 
d00094a0 l       .text  00000000 
d00094a4 l       .text  00000000 
d00094a8 l       .text  00000000 
d00094ac l       .text  00000000 
d00094b4 l       .text  00000000 
d00094b8 l       .text  00000000 
d00094b8 l       .text  00000000 
d00094b8 l       .text  00000000 
d00094b8 l       .text  00000000 
d00094d0 l       .text  00000000 
d00094d2 l       .text  00000000 
d00094d2 l       .text  00000000 
d00094da l       .text  00000000 
d00094de l       .text  00000000 
d00094e2 l       .text  00000000 
d00094e6 l       .text  00000000 
d00094ee l       .text  00000000 
d00094f2 l       .text  00000000 
d00094f2 l       .text  00000000 
d00094f2 l       .text  00000000 
d00094f2 l       .text  00000000 
d000950a l       .text  00000000 
d000950c l       .text  00000000 
d000950c l       .text  00000000 
d0009514 l       .text  00000000 
d0009518 l       .text  00000000 
d000951c l       .text  00000000 
d0009520 l       .text  00000000 
d0009528 l       .text  00000000 
d000952c l       .text  00000000 
d000952c l       .text  00000000 
d000952c l       .text  00000000 
d000952c l       .text  00000000 
d0009544 l       .text  00000000 
d0009546 l       .text  00000000 
d0009546 l       .text  00000000 
d000954e l       .text  00000000 
d0009552 l       .text  00000000 
d0009552 l       .text  00000000 
d0009552 l       .text  00000000 
d0009552 l       .text  00000000 
d000956a l       .text  00000000 
d000956c l       .text  00000000 
d000956c l       .text  00000000 
d0009574 l       .text  00000000 
d0009578 l       .text  00000000 
d0009578 l       .text  00000000 
d0009578 l       .text  00000000 
d0009578 l       .text  00000000 
d0009590 l       .text  00000000 
d0009592 l       .text  00000000 
d0009592 l       .text  00000000 
d000959a l       .text  00000000 
d000959e l       .text  00000000 
d000959e l       .text  00000000 
d000959e l       .text  00000000 
d000959e l       .text  00000000 
d00095b6 l       .text  00000000 
d00095b8 l       .text  00000000 
d00095b8 l       .text  00000000 
d00095c0 l       .text  00000000 
d00095c4 l       .text  00000000 
d00095c4 l       .text  00000000 
d00095c4 l       .text  00000000 
d00095c4 l       .text  00000000 
d00095dc l       .text  00000000 
d00095de l       .text  00000000 
d00095de l       .text  00000000 
d00095de l       .text  00000000 
d00095de l       .text  00000000 
d00095e6 l       .text  00000000 
d00095e6 l       .text  00000000 
d00095f6 l       .text  00000000 
d00095fe l       .text  00000000 
d0009600 l       .text  00000000 
d0009600 l       .text  00000000 
d0009600 l       .text  00000000 
d0009600 l       .text  00000000 
d0009608 l       .text  00000000 
d0009608 l       .text  00000000 
d0009618 l       .text  00000000 
d0009620 l       .text  00000000 
d0009622 l       .text  00000000 
d0009622 l       .text  00000000 
d0009622 l       .text  00000000 
d0009622 l       .text  00000000 
d000962a l       .text  00000000 
d000962a l       .text  00000000 
d000963a l       .text  00000000 
d0009642 l       .text  00000000 
d0009644 l       .text  00000000 
d0009644 l       .text  00000000 
d0009644 l       .text  00000000 
d0009644 l       .text  00000000 
d000964c l       .text  00000000 
d000964c l       .text  00000000 
d000965c l       .text  00000000 
d0009664 l       .text  00000000 
d0009666 l       .text  00000000 
d0009666 l       .text  00000000 
d000966e l       .text  00000000 
d0009672 l       .text  00000000 
d0009672 l       .text  00000000 
d0009672 l       .text  00000000 
d0009672 l       .text  00000000 
d000968a l       .text  00000000 
d000968c l       .text  00000000 
d000968c l       .text  00000000 
d0009694 l       .text  00000000 
d0009698 l       .text  00000000 
d0009698 l       .text  00000000 
d0009698 l       .text  00000000 
d0009698 l       .text  00000000 
d00096b0 l       .text  00000000 
d00096b2 l       .text  00000000 
d00096b2 l       .text  00000000 
d00096ba l       .text  00000000 
d00096be l       .text  00000000 
d00096be l       .text  00000000 
d00096be l       .text  00000000 
d00096be l       .text  00000000 
d00096d6 l       .text  00000000 
d00096d8 l       .text  00000000 
d00096d8 l       .text  00000000 
d00096e0 l       .text  00000000 
d00096e4 l       .text  00000000 
d00096e4 l       .text  00000000 
d00096e4 l       .text  00000000 
d00096e4 l       .text  00000000 
d00096fc l       .text  00000000 
d00096fe l       .text  00000000 
d00096fe l       .text  00000000 
d0009706 l       .text  00000000 
d000970a l       .text  00000000 
d000970a l       .text  00000000 
d000970a l       .text  00000000 
d000970a l       .text  00000000 
d0009722 l       .text  00000000 
d0009724 l       .text  00000000 
d0009724 l       .text  00000000 
d000972c l       .text  00000000 
d0009730 l       .text  00000000 
d0009730 l       .text  00000000 
d0009730 l       .text  00000000 
d0009730 l       .text  00000000 
d0009748 l       .text  00000000 
d000974a l       .text  00000000 
d000974a l       .text  00000000 
d0009752 l       .text  00000000 
d0009756 l       .text  00000000 
d0009756 l       .text  00000000 
d0009756 l       .text  00000000 
d0009756 l       .text  00000000 
d000976e l       .text  00000000 
d0009770 l       .text  00000000 
d0009770 l       .text  00000000 
d0009778 l       .text  00000000 
d000977c l       .text  00000000 
d000977c l       .text  00000000 
d000977c l       .text  00000000 
d000977c l       .text  00000000 
d0009794 l       .text  00000000 
d0009796 l       .text  00000000 
d0009796 l       .text  00000000 
d000979e l       .text  00000000 
d000979e l       .text  00000000 
00001b1b l       .debug_loc     00000000 
00001b3f l       .debug_loc     00000000 
00001b65 l       .debug_loc     00000000 
00001b89 l       .debug_loc     00000000 
00001bd9 l       .debug_loc     00000000 
00001bfd l       .debug_loc     00000000 
00001c18 l       .debug_loc     00000000 
00001c3c l       .debug_loc     00000000 
00001c60 l       .debug_loc     00000000 
00001cc1 l       .debug_loc     00000000 
00001ce5 l       .debug_loc     00000000 
00001d00 l       .debug_loc     00000000 
00001d28 l       .debug_loc     00000000 
00001d5e l       .debug_loc     00000000 
00001d79 l       .debug_loc     00000000 
00001d9b l       .debug_loc     00000000 
00001dc4 l       .debug_loc     00000000 
00001de4 l       .debug_loc     00000000 
00001e06 l       .debug_loc     00000000 
00001e21 l       .debug_loc     00000000 
00001e43 l       .debug_loc     00000000 
00001e5e l       .debug_loc     00000000 
00001e79 l       .debug_loc     00000000 
00001ea1 l       .debug_loc     00000000 
00001ebc l       .debug_loc     00000000 
00001f04 l       .debug_loc     00000000 
00001f26 l       .debug_loc     00000000 
00001f48 l       .debug_loc     00000000 
00001f63 l       .debug_loc     00000000 
00001f7e l       .debug_loc     00000000 
00001fa0 l       .debug_loc     00000000 
00001fc2 l       .debug_loc     00000000 
00001fdd l       .debug_loc     00000000 
00001fff l       .debug_loc     00000000 
0000201a l       .debug_loc     00000000 
00002035 l       .debug_loc     00000000 
00002050 l       .debug_loc     00000000 
00002076 l       .debug_loc     00000000 
0000209c l       .debug_loc     00000000 
000020b8 l       .debug_loc     00000000 
000020d3 l       .debug_loc     00000000 
000020ee l       .debug_loc     00000000 
00002109 l       .debug_loc     00000000 
00002131 l       .debug_loc     00000000 
00002171 l       .debug_loc     00000000 
000021a3 l       .debug_loc     00000000 
000021ca l       .debug_loc     00000000 
000021e5 l       .debug_loc     00000000 
00002201 l       .debug_loc     00000000 
00002223 l       .debug_loc     00000000 
0000223e l       .debug_loc     00000000 
0000225d l       .debug_loc     00000000 
0000227f l       .debug_loc     00000000 
000022a3 l       .debug_loc     00000000 
000022c1 l       .debug_loc     00000000 
000022e3 l       .debug_loc     00000000 
00002305 l       .debug_loc     00000000 
00002320 l       .debug_loc     00000000 
00002346 l       .debug_loc     00000000 
0000236c l       .debug_loc     00000000 
00002392 l       .debug_loc     00000000 
000023ad l       .debug_loc     00000000 
000023c9 l       .debug_loc     00000000 
000023e4 l       .debug_loc     00000000 
000023ff l       .debug_loc     00000000 
0000241a l       .debug_loc     00000000 
00002511 l       .debug_loc     00000000 
00002537 l       .debug_loc     00000000 
0000255d l       .debug_loc     00000000 
00002583 l       .debug_loc     00000000 
0000259e l       .debug_loc     00000000 
000025c4 l       .debug_loc     00000000 
000025ea l       .debug_loc     00000000 
00002605 l       .debug_loc     00000000 
0000262b l       .debug_loc     00000000 
0000267d l       .debug_loc     00000000 
00002698 l       .debug_loc     00000000 
000026b3 l       .debug_loc     00000000 
000026d9 l       .debug_loc     00000000 
0000270a l       .debug_loc     00000000 
0000273b l       .debug_loc     00000000 
00002756 l       .debug_loc     00000000 
00002771 l       .debug_loc     00000000 
0000278c l       .debug_loc     00000000 
000027a7 l       .debug_loc     00000000 
000027d8 l       .debug_loc     00000000 
00002809 l       .debug_loc     00000000 
0000282f l       .debug_loc     00000000 
00002888 l       .debug_loc     00000000 
000028b1 l       .debug_loc     00000000 
000028e6 l       .debug_loc     00000000 
00002919 l       .debug_loc     00000000 
00002956 l       .debug_loc     00000000 
00002971 l       .debug_loc     00000000 
00002997 l       .debug_loc     00000000 
000029b2 l       .debug_loc     00000000 
000029d8 l       .debug_loc     00000000 
000029f3 l       .debug_loc     00000000 
00002a0e l       .debug_loc     00000000 
00002a3f l       .debug_loc     00000000 
00002a67 l       .debug_loc     00000000 
00002a8d l       .debug_loc     00000000 
00002aaf l       .debug_loc     00000000 
00002ad8 l       .debug_loc     00000000 
00002af3 l       .debug_loc     00000000 
00002b15 l       .debug_loc     00000000 
00002b30 l       .debug_loc     00000000 
00002b52 l       .debug_loc     00000000 
00002b6d l       .debug_loc     00000000 
00002b88 l       .debug_loc     00000000 
00002bb0 l       .debug_loc     00000000 
00002bcb l       .debug_loc     00000000 
00002c13 l       .debug_loc     00000000 
00002c35 l       .debug_loc     00000000 
00002c57 l       .debug_loc     00000000 
00002c72 l       .debug_loc     00000000 
00002c8d l       .debug_loc     00000000 
00002caf l       .debug_loc     00000000 
00002cca l       .debug_loc     00000000 
00002cec l       .debug_loc     00000000 
00002d07 l       .debug_loc     00000000 
00002dfe l       .debug_loc     00000000 
00002e24 l       .debug_loc     00000000 
00002e4a l       .debug_loc     00000000 
00002e70 l       .debug_loc     00000000 
00002e97 l       .debug_loc     00000000 
00002ed6 l       .debug_loc     00000000 
00002ef1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001895 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000380 l       .debug_ranges  00000000 
000018c8 l       .debug_str     00000000 
00001b79 l       .debug_str     00000000 
00001b64 l       .debug_str     00000000 
000018e0 l       .debug_str     00000000 
000018fc l       .debug_str     00000000 
0000191c l       .debug_str     00000000 
0000193a l       .debug_str     00000000 
0000195c l       .debug_str     00000000 
0000197e l       .debug_str     00000000 
000019a0 l       .debug_str     00000000 
000019c1 l       .debug_str     00000000 
000019e2 l       .debug_str     00000000 
00001a03 l       .debug_str     00000000 
00001a24 l       .debug_str     00000000 
00001a40 l       .debug_str     00000000 
00001a5c l       .debug_str     00000000 
00001a79 l       .debug_str     00000000 
00001a96 l       .debug_str     00000000 
00001ab8 l       .debug_str     00000000 
00001ada l       .debug_str     00000000 
00001aff l       .debug_str     00000000 
00001b1e l       .debug_str     00000000 
00001b41 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
00001321 l       .debug_str     00000000 
000013c7 l       .debug_str     00000000 
00001327 l       .debug_str     00000000 
0000133a l       .debug_str     00000000 
0000134e l       .debug_str     00000000 
00001361 l       .debug_str     00000000 
00001375 l       .debug_str     00000000 
00001389 l       .debug_str     00000000 
0000139e l       .debug_str     00000000 
000013b2 l       .debug_str     00000000 
000007bb l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b0 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003df l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000411 l       .debug_str     00000000 
00000426 l       .debug_str     00000000 
00000442 l       .debug_str     00000000 
0000045e l       .debug_str     00000000 
00000472 l       .debug_str     00000000 
00000486 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
000004b4 l       .debug_str     00000000 
000004c8 l       .debug_str     00000000 
000004dc l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
000004ff l       .debug_str     00000000 
00000519 l       .debug_str     00000000 
00000530 l       .debug_str     00000000 
0000054a l       .debug_str     00000000 
00000566 l       .debug_str     00000000 
00000582 l       .debug_str     00000000 
00000599 l       .debug_str     00000000 
000005af l       .debug_str     00000000 
000005c7 l       .debug_str     00000000 
000005df l       .debug_str     00000000 
000005f8 l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
0000062a l       .debug_str     00000000 
00000643 l       .debug_str     00000000 
00000662 l       .debug_str     00000000 
00000680 l       .debug_str     00000000 
0000069a l       .debug_str     00000000 
000006b3 l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
000006ed l       .debug_str     00000000 
00000709 l       .debug_str     00000000 
00000725 l       .debug_str     00000000 
00000741 l       .debug_str     00000000 
00000758 l       .debug_str     00000000 
00000771 l       .debug_str     00000000 
00000787 l       .debug_str     00000000 
000007a6 l       .debug_str     00000000 
00001bc0 l       .debug_str     00000000 
00001b90 l       .debug_str     00000000 
00001ba8 l       .debug_str     00000000 
00001c39 l       .debug_str     00000000 
00001bd6 l       .debug_str     00000000 
00001bee l       .debug_str     00000000 
00001c07 l       .debug_str     00000000 
00001c20 l       .debug_str     00000000 
00001c4e l       .debug_str     00000000 
0000185c l       .debug_str     00000000 
00001837 l       .debug_str     00000000 
00001849 l       .debug_str     00000000 
00000c97 l       .debug_str     00000000 
00001c63 l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
00001c44 l       .debug_str     00000000 
00002003 l       .debug_str     00000000 
000010a6 l       .debug_str     00000000 
00001554 l       .debug_str     00000000 
00001ffc l       .debug_str     00000000 
0000200e l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00001436 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
00000d58 l       .debug_str     00000000 
00001eb7 l       .debug_str     00000000 
00001ebf l       .debug_str     00000000 
00001f13 l       .debug_str     00000000 
00000d03 l       .debug_str     00000000 
00001d12 l       .debug_str     00000000 
00001f1d l       .debug_str     00000000 
00001781 l       .debug_str     00000000 
00000240 l       .debug_ranges  00000000 
00001d32 l       .debug_str     00000000 
00001b6f l       .debug_str     00000000 
00001ceb l       .debug_str     00000000 
00000258 l       .debug_ranges  00000000 
00000270 l       .debug_ranges  00000000 
00000288 l       .debug_ranges  00000000 
00000c86 l       .debug_str     00000000 
00001c74 l       .debug_str     00000000 
00001c84 l       .debug_str     00000000 
00001cf4 l       .debug_str     00000000 
000014fd l       .debug_str     00000000 
00001d4a l       .debug_str     00000000 
00001f79 l       .debug_str     00000000 
00001f76 l       .debug_str     00000000 
00005072 l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
00001c95 l       .debug_str     00000000 
00000e64 l       .debug_str     00000000 
00001c9e l       .debug_str     00000000 
00001cac l       .debug_str     00000000 
00000c55 l       .debug_str     00000000 
000015e2 l       .debug_str     00000000 
00004bf2 l       .debug_str     00000000 
00000f72 l       .debug_str     00000000 
00001595 l       .debug_str     00000000 
00001d60 l       .debug_str     00000000 
00001d75 l       .debug_str     00000000 
00001fc3 l       .debug_str     00000000 
00001fdf l       .debug_str     00000000 
00001fea l       .debug_str     00000000 
00001ff4 l       .debug_str     00000000 
000002a0 l       .debug_ranges  00000000 
000002b8 l       .debug_ranges  00000000 
000002d0 l       .debug_ranges  00000000 
00000cca l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
00001580 l       .debug_str     00000000 
00001d87 l       .debug_str     00000000 
00005dd8 l       .debug_str     00000000 
00001d9c l       .debug_str     00000000 
00001dab l       .debug_str     00000000 
00000e5c l       .debug_str     00000000 
0000505a l       .debug_str     00000000 
00001dc1 l       .debug_str     00000000 
00001dd7 l       .debug_str     00000000 
00001bcb l       .debug_str     00000000 
00001ded l       .debug_str     00000000 
0000201b l       .debug_str     00000000 
000002e8 l       .debug_ranges  00000000 
00000300 l       .debug_ranges  00000000 
00004f68 l       .debug_str     00000000 
00001e0a l       .debug_str     00000000 
00001e20 l       .debug_str     00000000 
00002026 l       .debug_str     00000000 
00001e34 l       .debug_str     00000000 
0000203a l       .debug_str     00000000 
00000320 l       .debug_ranges  00000000 
00001e56 l       .debug_str     00000000 
00000338 l       .debug_ranges  00000000 
00000350 l       .debug_ranges  00000000 
00000368 l       .debug_ranges  00000000 
00001e70 l       .debug_str     00000000 
000017cc l       .debug_str     00000000 
00001cb6 l       .debug_str     00000000 
00001cd0 l       .debug_str     00000000 
0000178f l       .debug_str     00000000 
00001d02 l       .debug_str     00000000 
00001cde l       .debug_str     00000000 
00001e90 l       .debug_str     00000000 
00001f02 l       .debug_str     00000000 
00001ef3 l       .debug_str     00000000 
00001ed0 l       .debug_str     00000000 
00001eec l       .debug_str     00000000 
00001ef0 l       .debug_str     00000000 
00001edb l       .debug_str     00000000 
00001f62 l       .debug_str     00000000 
00001f50 l       .debug_str     00000000 
00001f21 l       .debug_str     00000000 
00001f29 l       .debug_str     00000000 
00001f32 l       .debug_str     00000000 
00001f3c l       .debug_str     00000000 
00001f47 l       .debug_str     00000000 
00001fca l       .debug_str     00000000 
00001fb7 l       .debug_str     00000000 
00001f80 l       .debug_str     00000000 
00001f88 l       .debug_str     00000000 
00001fa0 l       .debug_str     00000000 
00002040 l       .debug_str     00000000 
0000202f l       .debug_str     00000000 
00001447 l       .debug_str     00000000 
00001de7 l       .debug_str     00000000 
00001885 l       .debug_str     00000000 
0000021c l       .debug_frame   00000000 
d00093ac l       .text  00000000 
d00093f2 l       .text  00000000 
d0009438 l       .text  00000000 
d000979e l       .text  00000000 
00000000 l    df *ABS*  00000000 pinmux.c
d000979e l       .text  00000000 
d000979e l       .text  00000000 
d000979e l       .text  00000000 
d00097a0 l       .text  00000000 
d00097a0 l       .text  00000000 
d00097a2 l       .text  00000000 
d00097aa l       .text  00000000 
d00097aa l       .text  00000000 
d00097ac l       .text  00000000 
d00097ac l       .text  00000000 
d00097b0 l       .text  00000000 
d00097b0 l       .text  00000000 
d00097b4 l       .text  00000000 
d00097b4 l       .text  00000000 
d00097c4 l       .text  00000000 
d00097c4 l       .text  00000000 
d00097c6 l       .text  00000000 
d00097c6 l       .text  00000000 
d00097ca l       .text  00000000 
d00097ca l       .text  00000000 
d00097ce l       .text  00000000 
d00097ce l       .text  00000000 
d00097d4 l       .text  00000000 
d00097d4 l       .text  00000000 
d00097da l       .text  00000000 
d00097da l       .text  00000000 
d00097e4 l       .text  00000000 
d00097e4 l       .text  00000000 
d00097e6 l       .text  00000000 
d00097e6 l       .text  00000000 
d00097ec l       .text  00000000 
d00097ec l       .text  00000000 
d00097f4 l       .text  00000000 
d00097f4 l       .text  00000000 
d00097f8 l       .text  00000000 
d00097f8 l       .text  00000000 
d00097fe l       .text  00000000 
d00097fe l       .text  00000000 
00002f2b l       .debug_loc     00000000 
00002f49 l       .debug_loc     00000000 
00002f5c l       .debug_loc     00000000 
00002f76 l       .debug_loc     00000000 
00002f90 l       .debug_loc     00000000 
00002faa l       .debug_loc     00000000 
00002fc5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002053 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00002082 l       .debug_str     00000000 
00003538 l       .debug_str     00000000 
0000352b l       .debug_str     00000000 
00002091 l       .debug_str     00000000 
00002fe9 l       .debug_str     00000000 
0000300b l       .debug_str     00000000 
00002a20 l       .debug_str     00000000 
000029fe l       .debug_str     00000000 
00002098 l       .debug_str     00000000 
000020c0 l       .debug_str     00000000 
000020e8 l       .debug_str     00000000 
00002110 l       .debug_str     00000000 
00002138 l       .debug_str     00000000 
00002160 l       .debug_str     00000000 
00002188 l       .debug_str     00000000 
000021b0 l       .debug_str     00000000 
000021d8 l       .debug_str     00000000 
00002200 l       .debug_str     00000000 
00002228 l       .debug_str     00000000 
00002251 l       .debug_str     00000000 
0000227a l       .debug_str     00000000 
000022a3 l       .debug_str     00000000 
000022cc l       .debug_str     00000000 
000022f5 l       .debug_str     00000000 
0000231e l       .debug_str     00000000 
00002347 l       .debug_str     00000000 
00002370 l       .debug_str     00000000 
00002399 l       .debug_str     00000000 
000023c2 l       .debug_str     00000000 
000023eb l       .debug_str     00000000 
00002414 l       .debug_str     00000000 
0000243d l       .debug_str     00000000 
00002466 l       .debug_str     00000000 
0000248f l       .debug_str     00000000 
000024b8 l       .debug_str     00000000 
000024e1 l       .debug_str     00000000 
0000250a l       .debug_str     00000000 
00002533 l       .debug_str     00000000 
0000255c l       .debug_str     00000000 
00002585 l       .debug_str     00000000 
000025ae l       .debug_str     00000000 
000025d4 l       .debug_str     00000000 
000025fa l       .debug_str     00000000 
00002620 l       .debug_str     00000000 
00002646 l       .debug_str     00000000 
0000266c l       .debug_str     00000000 
00002692 l       .debug_str     00000000 
000026bc l       .debug_str     00000000 
000026e6 l       .debug_str     00000000 
00002710 l       .debug_str     00000000 
0000273a l       .debug_str     00000000 
00002760 l       .debug_str     00000000 
00002786 l       .debug_str     00000000 
000027ac l       .debug_str     00000000 
000027d2 l       .debug_str     00000000 
00002800 l       .debug_str     00000000 
0000282b l       .debug_str     00000000 
00002856 l       .debug_str     00000000 
00002881 l       .debug_str     00000000 
000028b6 l       .debug_str     00000000 
000028e8 l       .debug_str     00000000 
0000291a l       .debug_str     00000000 
0000294c l       .debug_str     00000000 
0000297e l       .debug_str     00000000 
000029b1 l       .debug_str     00000000 
000029db l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00002fef l       .debug_str     00000000 
00002fd5 l       .debug_str     00000000 
00002a44 l       .debug_str     00000000 
00002a68 l       .debug_str     00000000 
00002a8b l       .debug_str     00000000 
00002aa7 l       .debug_str     00000000 
00002ac3 l       .debug_str     00000000 
00002adf l       .debug_str     00000000 
00002afb l       .debug_str     00000000 
00002b17 l       .debug_str     00000000 
00002b33 l       .debug_str     00000000 
00002b4f l       .debug_str     00000000 
00002b6b l       .debug_str     00000000 
00002b87 l       .debug_str     00000000 
00002ba3 l       .debug_str     00000000 
00002bbf l       .debug_str     00000000 
00002bdb l       .debug_str     00000000 
00002bf7 l       .debug_str     00000000 
00002c13 l       .debug_str     00000000 
00002c2f l       .debug_str     00000000 
00002c4b l       .debug_str     00000000 
00002c67 l       .debug_str     00000000 
00002c83 l       .debug_str     00000000 
00002c9f l       .debug_str     00000000 
00002cbc l       .debug_str     00000000 
00002cd9 l       .debug_str     00000000 
00002cf6 l       .debug_str     00000000 
00002d12 l       .debug_str     00000000 
00002d2e l       .debug_str     00000000 
00002d4a l       .debug_str     00000000 
00002d66 l       .debug_str     00000000 
00002d82 l       .debug_str     00000000 
00002d9e l       .debug_str     00000000 
00002dba l       .debug_str     00000000 
00002dd6 l       .debug_str     00000000 
00002df2 l       .debug_str     00000000 
00002e0e l       .debug_str     00000000 
00002e2b l       .debug_str     00000000 
00002e48 l       .debug_str     00000000 
00002e65 l       .debug_str     00000000 
00002e81 l       .debug_str     00000000 
00002e9d l       .debug_str     00000000 
00002eb9 l       .debug_str     00000000 
00002ed5 l       .debug_str     00000000 
00002ef1 l       .debug_str     00000000 
00002f0d l       .debug_str     00000000 
00002f29 l       .debug_str     00000000 
00002f45 l       .debug_str     00000000 
00002f62 l       .debug_str     00000000 
00002f7f l       .debug_str     00000000 
00002f9c l       .debug_str     00000000 
00002fb9 l       .debug_str     00000000 
00003511 l       .debug_str     00000000 
000034f9 l       .debug_str     00000000 
0000300f l       .debug_str     00000000 
00003029 l       .debug_str     00000000 
00003043 l       .debug_str     00000000 
0000305d l       .debug_str     00000000 
00003077 l       .debug_str     00000000 
00003091 l       .debug_str     00000000 
000030ab l       .debug_str     00000000 
000030c5 l       .debug_str     00000000 
000030df l       .debug_str     00000000 
000030f9 l       .debug_str     00000000 
00003113 l       .debug_str     00000000 
0000312d l       .debug_str     00000000 
00003147 l       .debug_str     00000000 
00003161 l       .debug_str     00000000 
0000317b l       .debug_str     00000000 
00003195 l       .debug_str     00000000 
000031af l       .debug_str     00000000 
000031c9 l       .debug_str     00000000 
000031e3 l       .debug_str     00000000 
000031fd l       .debug_str     00000000 
00003218 l       .debug_str     00000000 
00003233 l       .debug_str     00000000 
0000324e l       .debug_str     00000000 
00003268 l       .debug_str     00000000 
00003282 l       .debug_str     00000000 
0000329c l       .debug_str     00000000 
000032b6 l       .debug_str     00000000 
000032d0 l       .debug_str     00000000 
000032ea l       .debug_str     00000000 
00003304 l       .debug_str     00000000 
0000331e l       .debug_str     00000000 
00003338 l       .debug_str     00000000 
00003352 l       .debug_str     00000000 
0000336d l       .debug_str     00000000 
00003388 l       .debug_str     00000000 
000033a3 l       .debug_str     00000000 
000033bd l       .debug_str     00000000 
000033d7 l       .debug_str     00000000 
000033f1 l       .debug_str     00000000 
0000340b l       .debug_str     00000000 
00003425 l       .debug_str     00000000 
0000343f l       .debug_str     00000000 
00003459 l       .debug_str     00000000 
00003473 l       .debug_str     00000000 
0000348e l       .debug_str     00000000 
000034a9 l       .debug_str     00000000 
000034c4 l       .debug_str     00000000 
000034df l       .debug_str     00000000 
00003547 l       .debug_str     00000000 
00003556 l       .debug_str     00000000 
00003565 l       .debug_str     00000000 
00003571 l       .debug_str     00000000 
000046df l       .debug_str     00000000 
000046d1 l       .debug_str     00000000 
00005b67 l       .debug_str     00000000 
000046ad l       .debug_str     00000000 
00003b14 l       .debug_str     00000000 
00003af8 l       .debug_str     00000000 
0000357e l       .debug_str     00000000 
0000359b l       .debug_str     00000000 
000035b8 l       .debug_str     00000000 
000035d5 l       .debug_str     00000000 
000035f2 l       .debug_str     00000000 
0000360f l       .debug_str     00000000 
0000362c l       .debug_str     00000000 
00003649 l       .debug_str     00000000 
00003666 l       .debug_str     00000000 
00003683 l       .debug_str     00000000 
000036a0 l       .debug_str     00000000 
000036bd l       .debug_str     00000000 
000036da l       .debug_str     00000000 
000036f7 l       .debug_str     00000000 
00003714 l       .debug_str     00000000 
00003731 l       .debug_str     00000000 
0000374e l       .debug_str     00000000 
0000376b l       .debug_str     00000000 
00003788 l       .debug_str     00000000 
000037a5 l       .debug_str     00000000 
000037c3 l       .debug_str     00000000 
000037e1 l       .debug_str     00000000 
000037ff l       .debug_str     00000000 
0000381c l       .debug_str     00000000 
00003839 l       .debug_str     00000000 
00003856 l       .debug_str     00000000 
00003873 l       .debug_str     00000000 
00003890 l       .debug_str     00000000 
000038ad l       .debug_str     00000000 
000038ca l       .debug_str     00000000 
000038e7 l       .debug_str     00000000 
00003904 l       .debug_str     00000000 
00003921 l       .debug_str     00000000 
0000393f l       .debug_str     00000000 
0000395d l       .debug_str     00000000 
0000397b l       .debug_str     00000000 
00003998 l       .debug_str     00000000 
000039b5 l       .debug_str     00000000 
000039d2 l       .debug_str     00000000 
000039ef l       .debug_str     00000000 
00003a0c l       .debug_str     00000000 
00003a29 l       .debug_str     00000000 
00003a46 l       .debug_str     00000000 
00003a63 l       .debug_str     00000000 
00003a81 l       .debug_str     00000000 
00003a9f l       .debug_str     00000000 
00003abd l       .debug_str     00000000 
00003adb l       .debug_str     00000000 
000046b4 l       .debug_str     00000000 
00004699 l       .debug_str     00000000 
00003b32 l       .debug_str     00000000 
00003b57 l       .debug_str     00000000 
00003b7b l       .debug_str     00000000 
00003ba1 l       .debug_str     00000000 
00003bc3 l       .debug_str     00000000 
00003be5 l       .debug_str     00000000 
00003c07 l       .debug_str     00000000 
00003c29 l       .debug_str     00000000 
00003c4b l       .debug_str     00000000 
00003c6d l       .debug_str     00000000 
00003c8f l       .debug_str     00000000 
00003cb1 l       .debug_str     00000000 
00003cd3 l       .debug_str     00000000 
00003cf5 l       .debug_str     00000000 
00003d18 l       .debug_str     00000000 
00003d3b l       .debug_str     00000000 
00003d5e l       .debug_str     00000000 
00003d81 l       .debug_str     00000000 
00003da4 l       .debug_str     00000000 
00003dc7 l       .debug_str     00000000 
00003dea l       .debug_str     00000000 
00003e0d l       .debug_str     00000000 
00003e30 l       .debug_str     00000000 
00003e53 l       .debug_str     00000000 
00003e76 l       .debug_str     00000000 
00003e99 l       .debug_str     00000000 
00003ebc l       .debug_str     00000000 
00003edf l       .debug_str     00000000 
00003f02 l       .debug_str     00000000 
00003f25 l       .debug_str     00000000 
00003f48 l       .debug_str     00000000 
00003f6b l       .debug_str     00000000 
00003f8e l       .debug_str     00000000 
00003fb1 l       .debug_str     00000000 
00003fd4 l       .debug_str     00000000 
00003ff7 l       .debug_str     00000000 
00004017 l       .debug_str     00000000 
00004037 l       .debug_str     00000000 
00004057 l       .debug_str     00000000 
00004077 l       .debug_str     00000000 
00004097 l       .debug_str     00000000 
000040b7 l       .debug_str     00000000 
000040db l       .debug_str     00000000 
000040ff l       .debug_str     00000000 
00004123 l       .debug_str     00000000 
00004147 l       .debug_str     00000000 
00004167 l       .debug_str     00000000 
00004187 l       .debug_str     00000000 
000041a7 l       .debug_str     00000000 
000041c7 l       .debug_str     00000000 
000041ed l       .debug_str     00000000 
00004213 l       .debug_str     00000000 
00004239 l       .debug_str     00000000 
0000425f l       .debug_str     00000000 
00004283 l       .debug_str     00000000 
000042a7 l       .debug_str     00000000 
000042cc l       .debug_str     00000000 
000042fb l       .debug_str     00000000 
0000432a l       .debug_str     00000000 
00004359 l       .debug_str     00000000 
00004388 l       .debug_str     00000000 
000043b7 l       .debug_str     00000000 
000043e6 l       .debug_str     00000000 
00004415 l       .debug_str     00000000 
00004444 l       .debug_str     00000000 
00004473 l       .debug_str     00000000 
00004496 l       .debug_str     00000000 
000044b9 l       .debug_str     00000000 
000044dc l       .debug_str     00000000 
000044ff l       .debug_str     00000000 
00004522 l       .debug_str     00000000 
00004545 l       .debug_str     00000000 
0000456a l       .debug_str     00000000 
0000459a l       .debug_str     00000000 
000045c7 l       .debug_str     00000000 
000045f4 l       .debug_str     00000000 
00004621 l       .debug_str     00000000 
0000464e l       .debug_str     00000000 
0000467c l       .debug_str     00000000 
0000185c l       .debug_str     00000000 
00001837 l       .debug_str     00000000 
00001849 l       .debug_str     00000000 
00001321 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000cca l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
000046ef l       .debug_str     00000000 
00001781 l       .debug_str     00000000 
00004700 l       .debug_str     00000000 
0000470a l       .debug_str     00000000 
00004710 l       .debug_str     00000000 
0000471a l       .debug_str     00000000 
00000ce2 l       .debug_str     00000000 
00004721 l       .debug_str     00000000 
00000d03 l       .debug_str     00000000 
00000408 l       .debug_frame   00000000 
d00097fe l       .text  00000000 
00000000 l    df *ABS*  00000000 retention_sram.c
d00097fe l       .text  00000000 
d00097fe l       .text  00000000 
d00097fe l       .text  00000000 
d00097fe l       .text  00000000 
d0009804 l       .text  00000000 
d0009804 l       .text  00000000 
d0009804 l       .text  00000000 
d0009804 l       .text  00000000 
d0009804 l       .text  00000000 
d000980a l       .text  00000000 
d000980a l       .text  00000000 
d000980c l       .text  00000000 
d000980c l       .text  00000000 
d000980e l       .text  00000000 
d000980e l       .text  00000000 
00000000 l       .debug_str     00000000 
0000472e l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000428 l       .debug_ranges  00000000 
00001321 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00004765 l       .debug_str     00000000 
00000ddf l       .debug_str     00000000 
00000c6d l       .debug_str     00000000 
00000dbf l       .debug_str     00000000 
00000dd0 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
00000dac l       .debug_str     00000000 
0000477d l       .debug_str     00000000 
00004776 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00000d98 l       .debug_str     00000000 
00001781 l       .debug_str     00000000 
00004792 l       .debug_str     00000000 
000047aa l       .debug_str     00000000 
00000434 l       .debug_frame   00000000 
d0009804 l       .text  00000000 
d000980e l       .text  00000000 
00000000 l    df *ABS*  00000000 rstmgr.c
d000980e l       .text  00000000 
d000980e l       .text  00000000 
d000980e l       .text  00000000 
d0009812 l       .text  00000000 
d0009812 l       .text  00000000 
d0009814 l       .text  00000000 
d0009814 l       .text  00000000 
d0009818 l       .text  00000000 
d0009818 l       .text  00000000 
d000981e l       .text  00000000 
d000981e l       .text  00000000 
d0009820 l       .text  00000000 
d0009828 l       .text  00000000 
d0009828 l       .text  00000000 
d000982c l       .text  00000000 
d000982c l       .text  00000000 
d000982e l       .text  00000000 
d000982e l       .text  00000000 
d0009830 l       .text  00000000 
d0009830 l       .text  00000000 
d0009832 l       .text  00000000 
d0009834 l       .text  00000000 
d0009836 l       .text  00000000 
d000983a l       .text  00000000 
d000983e l       .text  00000000 
d000983e l       .text  00000000 
d0009840 l       .text  00000000 
d0009840 l       .text  00000000 
d0009842 l       .text  00000000 
d0009842 l       .text  00000000 
d0009842 l       .text  00000000 
d0009842 l       .text  00000000 
d0009842 l       .text  00000000 
d0009846 l       .text  00000000 
d0009846 l       .text  00000000 
d0009848 l       .text  00000000 
d0009848 l       .text  00000000 
d000984a l       .text  00000000 
d000984a l       .text  00000000 
00002fe0 l       .debug_loc     00000000 
00003002 l       .debug_loc     00000000 
00003029 l       .debug_loc     00000000 
0000304b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000047af l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000450 l       .debug_ranges  00000000 
000047de l       .debug_str     00000000 
00004800 l       .debug_str     00000000 
000047f0 l       .debug_str     00000000 
00000f24 l       .debug_str     00000000 
00001ff7 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
00001321 l       .debug_str     00000000 
000013c7 l       .debug_str     00000000 
00001327 l       .debug_str     00000000 
0000133a l       .debug_str     00000000 
0000134e l       .debug_str     00000000 
00001361 l       .debug_str     00000000 
00001375 l       .debug_str     00000000 
00001389 l       .debug_str     00000000 
0000139e l       .debug_str     00000000 
000013b2 l       .debug_str     00000000 
000014fd l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
00004814 l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
00001436 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
00000c86 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
00000d86 l       .debug_str     00000000 
00000dee l       .debug_str     00000000 
00000c73 l       .debug_str     00000000 
00004841 l       .debug_str     00000000 
0000482e l       .debug_str     00000000 
0000485a l       .debug_str     00000000 
00000488 l       .debug_frame   00000000 
d0009842 l       .text  00000000 
d000984a l       .text  00000000 
00000000 l    df *ABS*  00000000 uart.c
d000984a l       .text  00000000 
d000984a l       .text  00000000 
d000984a l       .text  00000000 
d000984e l       .text  00000000 
d000984e l       .text  00000000 
d0009854 l       .text  00000000 
d0009854 l       .text  00000000 
d0009856 l       .text  00000000 
d0009856 l       .text  00000000 
d000985a l       .text  00000000 
d000985a l       .text  00000000 
d000985e l       .text  00000000 
d000985e l       .text  00000000 
d0009864 l       .text  00000000 
d0009864 l       .text  00000000 
d0009866 l       .text  00000000 
d0009866 l       .text  00000000 
d0009868 l       .text  00000000 
d0009868 l       .text  00000000 
d000986c l       .text  00000000 
d000986c l       .text  00000000 
d000986e l       .text  00000000 
d000986e l       .text  00000000 
d0009872 l       .text  00000000 
d0009872 l       .text  00000000 
d0009876 l       .text  00000000 
d0009876 l       .text  00000000 
d0009878 l       .text  00000000 
d0009878 l       .text  00000000 
d0009878 l       .text  00000000 
d0009878 l       .text  00000000 
d0009878 l       .text  00000000 
d000987c l       .text  00000000 
d000987c l       .text  00000000 
d000987e l       .text  00000000 
d000987e l       .text  00000000 
d0009880 l       .text  00000000 
d0009880 l       .text  00000000 
d0009882 l       .text  00000000 
d0009882 l       .text  00000000 
d000988a l       .text  00000000 
d000988a l       .text  00000000 
d000988c l       .text  00000000 
d000988c l       .text  00000000 
d000988e l       .text  00000000 
d000988e l       .text  00000000 
d0009890 l       .text  00000000 
d0009890 l       .text  00000000 
d0009892 l       .text  00000000 
d0009894 l       .text  00000000 
d0009894 l       .text  00000000 
00003072 l       .debug_loc     00000000 
0000308d l       .debug_loc     00000000 
000030a9 l       .debug_loc     00000000 
000030d0 l       .debug_loc     00000000 
000030f5 l       .debug_loc     00000000 
0000311c l       .debug_loc     00000000 
0000313e l       .debug_loc     00000000 
00003159 l       .debug_loc     00000000 
00003174 l       .debug_loc     00000000 
0000318f l       .debug_loc     00000000 
000031aa l       .debug_loc     00000000 
000031c5 l       .debug_loc     00000000 
000031f6 l       .debug_loc     00000000 
0000321c l       .debug_loc     00000000 
00003237 l       .debug_loc     00000000 
00003252 l       .debug_loc     00000000 
0000326d l       .debug_loc     00000000 
00003288 l       .debug_loc     00000000 
000032a3 l       .debug_loc     00000000 
000032c9 l       .debug_loc     00000000 
000032ef l       .debug_loc     00000000 
0000330a l       .debug_loc     00000000 
00003325 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004867 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000478 l       .debug_ranges  00000000 
000007bb l       .debug_str     00000000 
000003a7 l       .debug_str     00000000 
000003b0 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003df l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000411 l       .debug_str     00000000 
00000426 l       .debug_str     00000000 
00000442 l       .debug_str     00000000 
0000045e l       .debug_str     00000000 
00000472 l       .debug_str     00000000 
00000486 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
000004b4 l       .debug_str     00000000 
000004c8 l       .debug_str     00000000 
000004dc l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
000004ff l       .debug_str     00000000 
00000519 l       .debug_str     00000000 
00000530 l       .debug_str     00000000 
0000054a l       .debug_str     00000000 
00000566 l       .debug_str     00000000 
00000582 l       .debug_str     00000000 
00000599 l       .debug_str     00000000 
000005af l       .debug_str     00000000 
000005c7 l       .debug_str     00000000 
000005df l       .debug_str     00000000 
000005f8 l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
0000062a l       .debug_str     00000000 
00000643 l       .debug_str     00000000 
00000662 l       .debug_str     00000000 
00000680 l       .debug_str     00000000 
0000069a l       .debug_str     00000000 
000006b3 l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
000006ed l       .debug_str     00000000 
00000709 l       .debug_str     00000000 
00000725 l       .debug_str     00000000 
00000741 l       .debug_str     00000000 
00000758 l       .debug_str     00000000 
00000771 l       .debug_str     00000000 
00000787 l       .debug_str     00000000 
000007a6 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000001e2 l       .debug_str     00000000 
000001d4 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00004894 l       .debug_str     00000000 
00001781 l       .debug_str     00000000 
00000c86 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
00001580 l       .debug_str     00000000 
00004bf2 l       .debug_str     00000000 
00001595 l       .debug_str     00000000 
00000f72 l       .debug_str     00000000 
00000cee l       .debug_str     00000000 
000048d4 l       .debug_str     00000000 
000014fd l       .debug_str     00000000 
0000489f l       .debug_str     00000000 
000015e2 l       .debug_str     00000000 
000048ac l       .debug_str     00000000 
00001715 l       .debug_str     00000000 
00004f36 l       .debug_str     00000000 
000048b9 l       .debug_str     00000000 
000010a6 l       .debug_str     00000000 
00005631 l       .debug_str     00000000 
000048c4 l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
000048ca l       .debug_str     00000000 
0000557e l       .debug_str     00000000 
00000c55 l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
000004dc l       .debug_frame   00000000 
d0009878 l       .text  00000000 
d0009894 l       .text  00000000 
00000000 l    df *ABS*  00000000 watchdog.c
d0009894 l       .text  00000000 
d0009894 l       .text  00000000 
d0009894 l       .text  00000000 
d0009896 l       .text  00000000 
d0009896 l       .text  00000000 
d000989a l       .text  00000000 
d000989a l       .text  00000000 
d000989a l       .text  00000000 
d000989c l       .text  00000000 
d000989c l       .text  00000000 
d00098a4 l       .text  00000000 
d00098a4 l       .text  00000000 
d00098a8 l       .text  00000000 
d00098a8 l       .text  00000000 
d00098ac l       .text  00000000 
d00098b0 l       .text  00000000 
d00098b8 l       .text  00000000 
d00098bc l       .text  00000000 
d00098ca l       .text  00000000 
d00098d2 l       .text  00000000 
d00098d6 l       .text  00000000 
d00098e4 l       .text  00000000 
d00098ec l       .text  00000000 
d00098fa l       .text  00000000 
d0009902 l       .text  00000000 
d0009906 l       .text  00000000 
d0009912 l       .text  00000000 
d0009920 l       .text  00000000 
d0009924 l       .text  00000000 
d0009930 l       .text  00000000 
d0009934 l       .text  00000000 
d0009934 l       .text  00000000 
d0009938 l       .text  00000000 
d000993c l       .text  00000000 
d000993c l       .text  00000000 
d000993e l       .text  00000000 
d000993e l       .text  00000000 
d0009940 l       .text  00000000 
d0009940 l       .text  00000000 
d0009942 l       .text  00000000 
d0009952 l       .text  00000000 
d0009958 l       .text  00000000 
d000995a l       .text  00000000 
d0009962 l       .text  00000000 
d0009964 l       .text  00000000 
d0009964 l       .text  00000000 
d0009966 l       .text  00000000 
d000996c l       .text  00000000 
d000996c l       .text  00000000 
d0009974 l       .text  00000000 
d0009974 l       .text  00000000 
d0009974 l       .text  00000000 
d0009974 l       .text  00000000 
d0009974 l       .text  00000000 
d0009976 l       .text  00000000 
d000997c l       .text  00000000 
d000997e l       .text  00000000 
d0009986 l       .text  00000000 
d000998c l       .text  00000000 
d000998c l       .text  00000000 
d000998e l       .text  00000000 
d000998e l       .text  00000000 
d0009998 l       .text  00000000 
d0009998 l       .text  00000000 
d000999e l       .text  00000000 
d000999e l       .text  00000000 
d00099a2 l       .text  00000000 
d00099a2 l       .text  00000000 
d00099a4 l       .text  00000000 
d00099a4 l       .text  00000000 
d00099a6 l       .text  00000000 
d00099a6 l       .text  00000000 
d00099ac l       .text  00000000 
d00099b0 l       .text  00000000 
d00099b0 l       .text  00000000 
d00099b2 l       .text  00000000 
d00099b2 l       .text  00000000 
d00099b2 l       .text  00000000 
d00099b6 l       .text  00000000 
d00099b6 l       .text  00000000 
d00099ba l       .text  00000000 
d00099ca l       .text  00000000 
d00099ca l       .text  00000000 
d00099cc l       .text  00000000 
d00099d0 l       .text  00000000 
d00099d4 l       .text  00000000 
d00099e4 l       .text  00000000 
d00099e4 l       .text  00000000 
d00099ea l       .text  00000000 
d00099ee l       .text  00000000 
d00099ee l       .text  00000000 
d00099f4 l       .text  00000000 
d00099f4 l       .text  00000000 
d00099f6 l       .text  00000000 
d00099f6 l       .text  00000000 
d00099fa l       .text  00000000 
d0009a00 l       .text  00000000 
d0009a00 l       .text  00000000 
d0009a08 l       .text  00000000 
d0009a08 l       .text  00000000 
00003340 l       .debug_loc     00000000 
00003366 l       .debug_loc     00000000 
0000338c l       .debug_loc     00000000 
000033c3 l       .debug_loc     00000000 
000033e9 l       .debug_loc     00000000 
00003404 l       .debug_loc     00000000 
00003438 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000048e6 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
000004a0 l       .debug_ranges  00000000 
0000011c l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000e7 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
00000100 l       .debug_str     00000000 
00000110 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
0000185c l       .debug_str     00000000 
00001837 l       .debug_str     00000000 
00001849 l       .debug_str     00000000 
00004917 l       .debug_str     00000000 
00001321 l       .debug_str     00000000 
0000492d l       .debug_str     00000000 
00004939 l       .debug_str     00000000 
00004945 l       .debug_str     00000000 
000049f4 l       .debug_str     00000000 
00004952 l       .debug_str     00000000 
0000498b l       .debug_str     00000000 
000049ca l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000cca l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
00000d3c l       .debug_str     00000000 
000000d1 l       .debug_str     00000000 
000017cc l       .debug_str     00000000 
00004a70 l       .debug_str     00000000 
00000d03 l       .debug_str     00000000 
00004a1e l       .debug_str     00000000 
00004a83 l       .debug_str     00000000 
000047aa l       .debug_str     00000000 
0000156f l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00001c84 l       .debug_str     00000000 
00004a31 l       .debug_str     00000000 
00004a42 l       .debug_str     00000000 
000014fd l       .debug_str     00000000 
00004a4f l       .debug_str     00000000 
0000012c l       .debug_str     00000000 
00001885 l       .debug_str     00000000 
00004a8a l       .debug_str     00000000 
00004a7a l       .debug_str     00000000 
00004a5c l       .debug_str     00000000 
00004a6b l       .debug_str     00000000 
00000530 l       .debug_frame   00000000 
d0009974 l       .text  00000000 
d0009a08 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_spi_host_autogen.c
d0009a08 l       .text  00000000 
d0009a08 l       .text  00000000 
d0009a08 l       .text  00000000 
d0009a08 l       .text  00000000 
d0009a0a l       .text  00000000 
d0009a0c l       .text  00000000 
d0009a10 l       .text  00000000 
d0009a12 l       .text  00000000 
d0009a14 l       .text  00000000 
d0009a16 l       .text  00000000 
d0009a16 l       .text  00000000 
00003483 l       .debug_loc     00000000 
0000349e l       .debug_loc     00000000 
000034b9 l       .debug_loc     00000000 
000034d4 l       .debug_loc     00000000 
000034f0 l       .debug_loc     00000000 
0000350c l       .debug_loc     00000000 
00003527 l       .debug_loc     00000000 
00003542 l       .debug_loc     00000000 
0000355d l       .debug_loc     00000000 
00003578 l       .debug_loc     00000000 
00003593 l       .debug_loc     00000000 
000035ae l       .debug_loc     00000000 
000035c9 l       .debug_loc     00000000 
000035e4 l       .debug_loc     00000000 
0000360a l       .debug_loc     00000000 
00003625 l       .debug_loc     00000000 
00003640 l       .debug_loc     00000000 
0000365e l       .debug_loc     00000000 
00003685 l       .debug_loc     00000000 
000036a0 l       .debug_loc     00000000 
000036bb l       .debug_loc     00000000 
000036d6 l       .debug_loc     00000000 
000036f4 l       .debug_loc     00000000 
0000371b l       .debug_loc     00000000 
00003736 l       .debug_loc     00000000 
00003751 l       .debug_loc     00000000 
0000376c l       .debug_loc     00000000 
00003787 l       .debug_loc     00000000 
000037ad l       .debug_loc     00000000 
000037c8 l       .debug_loc     00000000 
000037e3 l       .debug_loc     00000000 
00003809 l       .debug_loc     00000000 
00003829 l       .debug_loc     00000000 
0000384f l       .debug_loc     00000000 
0000386d l       .debug_loc     00000000 
00003888 l       .debug_loc     00000000 
000038a3 l       .debug_loc     00000000 
000038c3 l       .debug_loc     00000000 
000038e9 l       .debug_loc     00000000 
0000390f l       .debug_loc     00000000 
0000392a l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004a9c l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
000004d0 l       .debug_ranges  00000000 
00004acd l       .debug_str     00000000 
00004b07 l       .debug_str     00000000 
00004afa l       .debug_str     00000000 
00004ad7 l       .debug_str     00000000 
00004ae8 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
00000988 l       .debug_str     00000000 
00000925 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
00000936 l       .debug_str     00000000 
00000941 l       .debug_str     00000000 
0000094c l       .debug_str     00000000 
0000095c l       .debug_str     00000000 
0000096b l       .debug_str     00000000 
0000097a l       .debug_str     00000000 
00004b31 l       .debug_str     00000000 
00004b16 l       .debug_str     00000000 
00004b6f l       .debug_str     00000000 
00004b44 l       .debug_str     00000000 
00004b58 l       .debug_str     00000000 
00004ba5 l       .debug_str     00000000 
00004b80 l       .debug_str     00000000 
00004b93 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000e73 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
000002bf l       .debug_str     00000000 
00004bb0 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00005dd8 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
000002ad l       .debug_str     00000000 
000002a1 l       .debug_str     00000000 
00004bc4 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00004c19 l       .debug_str     00000000 
00004b3e l       .debug_str     00000000 
00004d61 l       .debug_str     00000000 
00004d6b l       .debug_str     00000000 
00004c32 l       .debug_str     00000000 
00004b7c l       .debug_str     00000000 
00005f96 l       .debug_str     00000000 
00004bce l       .debug_str     00000000 
00004c4c l       .debug_str     00000000 
00004d7a l       .debug_str     00000000 
00004be1 l       .debug_str     00000000 
00004c0f l       .debug_str     00000000 
00000f72 l       .debug_str     00000000 
00004bfc l       .debug_str     00000000 
00001595 l       .debug_str     00000000 
000015e2 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00004bf2 l       .debug_str     00000000 
00004c67 l       .debug_str     00000000 
00004c78 l       .debug_str     00000000 
00004da5 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
00004c83 l       .debug_str     00000000 
00000c86 l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00001580 l       .debug_str     00000000 
00004ca4 l       .debug_str     00000000 
00004cc1 l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
00004db4 l       .debug_str     00000000 
00004cd8 l       .debug_str     00000000 
000000d4 l       .debug_str     00000000 
00004dcf l       .debug_str     00000000 
00004ddf l       .debug_str     00000000 
00004cf5 l       .debug_str     00000000 
00004dea l       .debug_str     00000000 
00004d12 l       .debug_str     00000000 
00004d2f l       .debug_str     00000000 
00001078 l       .debug_str     00000000 
000002c8 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
00004d4c l       .debug_str     00000000 
00004d83 l       .debug_str     00000000 
00004dc2 l       .debug_str     00000000 
00004df5 l       .debug_str     00000000 
000005a8 l       .debug_frame   00000000 
d0009a16 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_spi_host.c
d0009a16 l       .text  00000000 
d0009a16 l       .text  00000000 
d0009a16 l       .text  00000000 
d0009a18 l       .text  00000000 
d0009a1a l       .text  00000000 
d0009a22 l       .text  00000000 
d0009a26 l       .text  00000000 
d0009a26 l       .text  00000000 
d0009a2a l       .text  00000000 
d0009a2a l       .text  00000000 
d0009a2e l       .text  00000000 
d0009a34 l       .text  00000000 
d0009a36 l       .text  00000000 
d0009a36 l       .text  00000000 
d0009a40 l       .text  00000000 
d0009a42 l       .text  00000000 
d0009a42 l       .text  00000000 
d0009a44 l       .text  00000000 
d0009a44 l       .text  00000000 
d0009a48 l       .text  00000000 
d0009a48 l       .text  00000000 
d0009a4c l       .text  00000000 
d0009a4c l       .text  00000000 
d0009a50 l       .text  00000000 
d0009a50 l       .text  00000000 
d0009a52 l       .text  00000000 
d0009a52 l       .text  00000000 
d0009a58 l       .text  00000000 
d0009a58 l       .text  00000000 
d0009a5c l       .text  00000000 
d0009a5c l       .text  00000000 
d0009a60 l       .text  00000000 
d0009a68 l       .text  00000000 
d0009a68 l       .text  00000000 
d0009a6c l       .text  00000000 
d0009a6c l       .text  00000000 
d0009a6e l       .text  00000000 
d0009a6e l       .text  00000000 
d0009a74 l       .text  00000000 
d0009a7a l       .text  00000000 
d0009a7e l       .text  00000000 
d0009a86 l       .text  00000000 
d0009a86 l       .text  00000000 
d0009a88 l       .text  00000000 
d0009a88 l       .text  00000000 
d0009a8c l       .text  00000000 
d0009a8c l       .text  00000000 
d0009a90 l       .text  00000000 
d0009a90 l       .text  00000000 
d0009a92 l       .text  00000000 
d0009a92 l       .text  00000000 
d0009a94 l       .text  00000000 
d0009a94 l       .text  00000000 
d0009a9a l       .text  00000000 
d0009a9a l       .text  00000000 
d0009a9c l       .text  00000000 
d0009aa0 l       .text  00000000 
d0009aa4 l       .text  00000000 
d0009aa6 l       .text  00000000 
d0009ab2 l       .text  00000000 
d0009ab2 l       .text  00000000 
d0009ab4 l       .text  00000000 
d0009ab4 l       .text  00000000 
d0009ab8 l       .text  00000000 
d0009ab8 l       .text  00000000 
d0009abc l       .text  00000000 
d0009abc l       .text  00000000 
d0009ac0 l       .text  00000000 
d0009ac0 l       .text  00000000 
d0009ac4 l       .text  00000000 
d0009ac4 l       .text  00000000 
d0009aca l       .text  00000000 
d0009acc l       .text  00000000 
d0009ace l       .text  00000000 
d0009ad0 l       .text  00000000 
d0009ad2 l       .text  00000000 
d0009ad4 l       .text  00000000 
d0009ad4 l       .text  00000000 
d0009ad4 l       .text  00000000 
d0009ad4 l       .text  00000000 
d0009ad4 l       .text  00000000 
d0009ad6 l       .text  00000000 
d0009ae4 l       .text  00000000 
d0009ae6 l       .text  00000000 
d0009ae8 l       .text  00000000 
d0009aec l       .text  00000000 
d0009aee l       .text  00000000 
d0009af0 l       .text  00000000 
d0009af0 l       .text  00000000 
d0009af8 l       .text  00000000 
d0009afe l       .text  00000000 
d0009afe l       .text  00000000 
d0009b06 l       .text  00000000 
d0009b16 l       .text  00000000 
d0009b16 l       .text  00000000 
d0009b1a l       .text  00000000 
d0009b1a l       .text  00000000 
d0009b1e l       .text  00000000 
d0009b28 l       .text  00000000 
d0009b28 l       .text  00000000 
d0009b2a l       .text  00000000 
d0009b2c l       .text  00000000 
d0009b2c l       .text  00000000 
d0009b36 l       .text  00000000 
d0009b3a l       .text  00000000 
d0009b3a l       .text  00000000 
d0009b3c l       .text  00000000 
d0009b3c l       .text  00000000 
d0009b3e l       .text  00000000 
d0009b3e l       .text  00000000 
d0009b40 l       .text  00000000 
d0009b40 l       .text  00000000 
d0009b42 l       .text  00000000 
d0009b42 l       .text  00000000 
d0009cca l     F .text  00000038 enqueue_word
d0009b46 l       .text  00000000 
d0009b46 l       .text  00000000 
d0009b48 l       .text  00000000 
d0009b48 l       .text  00000000 
d0009b4a l       .text  00000000 
d0009b4c l       .text  00000000 
d0009b4c l       .text  00000000 
d0009b50 l       .text  00000000 
d0009b50 l       .text  00000000 
d0009b56 l       .text  00000000 
d0009b5a l       .text  00000000 
d0009b5a l       .text  00000000 
d0009b5e l       .text  00000000 
d0009b5e l       .text  00000000 
d0009b62 l       .text  00000000 
d0009b62 l       .text  00000000 
d0009b66 l       .text  00000000 
d0009b68 l       .text  00000000 
d0009b68 l       .text  00000000 
d0009b6e l       .text  00000000 
d0009b6e l       .text  00000000 
d0009b72 l       .text  00000000 
d0009b72 l       .text  00000000 
d0009b76 l       .text  00000000 
d0009b7e l       .text  00000000 
d0009b7e l       .text  00000000 
d0009b86 l       .text  00000000 
d0009b86 l       .text  00000000 
d0009b8a l       .text  00000000 
d0009b90 l       .text  00000000 
d0009b94 l       .text  00000000 
d0009b9c l       .text  00000000 
d0009ba2 l       .text  00000000 
d0009ba6 l       .text  00000000 
d0009ba6 l       .text  00000000 
d0009ba8 l       .text  00000000 
d0009ba8 l       .text  00000000 
d0009baa l       .text  00000000 
d0009baa l       .text  00000000 
d0009bac l       .text  00000000 
d0009bac l       .text  00000000 
d0009bae l       .text  00000000 
d0009bae l       .text  00000000 
d0009bb2 l       .text  00000000 
d0009bb2 l       .text  00000000 
d0009bb4 l       .text  00000000 
d0009bb4 l       .text  00000000 
d0009bb6 l       .text  00000000 
d0009bb6 l       .text  00000000 
d0009bb8 l       .text  00000000 
d0009bb8 l       .text  00000000 
d0009bba l       .text  00000000 
d0009bba l       .text  00000000 
d0009bbe l       .text  00000000 
d0009bbe l       .text  00000000 
d0009bc0 l       .text  00000000 
d0009bc0 l       .text  00000000 
d0009bc6 l       .text  00000000 
d0009bc8 l       .text  00000000 
d0009bcc l       .text  00000000 
d0009bcc l       .text  00000000 
d0009bd2 l       .text  00000000 
d0009bd6 l       .text  00000000 
d0009bd8 l       .text  00000000 
d0009bd8 l       .text  00000000 
d0009bde l       .text  00000000 
d0009be2 l       .text  00000000 
d0009be2 l       .text  00000000 
d0009be4 l       .text  00000000 
d0009be4 l       .text  00000000 
d0009be6 l       .text  00000000 
d0009be6 l       .text  00000000 
d0009be8 l       .text  00000000 
d0009be8 l       .text  00000000 
d0009bea l       .text  00000000 
d0009bea l       .text  00000000 
d0009bee l       .text  00000000 
d0009bee l       .text  00000000 
d0009bf0 l       .text  00000000 
d0009bf0 l       .text  00000000 
d0009bf2 l       .text  00000000 
d0009bf4 l       .text  00000000 
d0009bf4 l       .text  00000000 
d0009bf8 l       .text  00000000 
d0009bf8 l       .text  00000000 
d0009bfe l       .text  00000000 
d0009c02 l       .text  00000000 
d0009c02 l       .text  00000000 
d0009c06 l       .text  00000000 
d0009c06 l       .text  00000000 
d0009c0a l       .text  00000000 
d0009c0a l       .text  00000000 
d0009c0e l       .text  00000000 
d0009c14 l       .text  00000000 
d0009c16 l       .text  00000000 
d0009c16 l       .text  00000000 
d0009c18 l       .text  00000000 
d0009c18 l       .text  00000000 
d0009c1a l       .text  00000000 
d0009c1a l       .text  00000000 
d0009c22 l       .text  00000000 
d0009c2c l       .text  00000000 
d0009c2c l       .text  00000000 
d0009c2c l       .text  00000000 
d0009c2c l       .text  00000000 
d0009c2c l       .text  00000000 
d0009c2e l       .text  00000000 
d0009c30 l       .text  00000000 
d0009c32 l       .text  00000000 
d0009c34 l       .text  00000000 
d0009c36 l       .text  00000000 
d0009c38 l       .text  00000000 
d0009c3c l       .text  00000000 
d0009c3e l       .text  00000000 
d0009c40 l       .text  00000000 
d0009c40 l       .text  00000000 
d0009c44 l       .text  00000000 
d0009c46 l       .text  00000000 
d0009c46 l       .text  00000000 
d0009c4c l       .text  00000000 
d0009c4c l       .text  00000000 
d0009c50 l       .text  00000000 
d0009c50 l       .text  00000000 
d0009c52 l       .text  00000000 
d0009c52 l       .text  00000000 
d0009c54 l       .text  00000000 
d0009c54 l       .text  00000000 
d0009c56 l       .text  00000000 
d0009c56 l       .text  00000000 
d0009c5a l       .text  00000000 
d0009c5a l       .text  00000000 
d0009c5c l       .text  00000000 
d0009c5c l       .text  00000000 
d0009c5e l       .text  00000000 
d0009c5e l       .text  00000000 
d0009c60 l       .text  00000000 
d0009c60 l       .text  00000000 
d0009c64 l       .text  00000000 
d0009c64 l       .text  00000000 
d0009c68 l       .text  00000000 
d0009c68 l       .text  00000000 
d0009c6a l       .text  00000000 
d0009c6a l       .text  00000000 
d0009c6c l       .text  00000000 
d0009c70 l       .text  00000000 
d0009c70 l       .text  00000000 
d0009c74 l       .text  00000000 
d0009c74 l       .text  00000000 
d0009c78 l       .text  00000000 
d0009c78 l       .text  00000000 
d0009c7e l       .text  00000000 
d0009c7e l       .text  00000000 
d0009c80 l       .text  00000000 
d0009c80 l       .text  00000000 
d0009c84 l       .text  00000000 
d0009c84 l       .text  00000000 
d0009c86 l       .text  00000000 
d0009c88 l       .text  00000000 
d0009c88 l       .text  00000000 
d0009c8c l       .text  00000000 
d0009c8c l       .text  00000000 
d0009c8e l       .text  00000000 
d0009c8e l       .text  00000000 
d0009c90 l       .text  00000000 
d0009c90 l       .text  00000000 
d0009c94 l       .text  00000000 
d0009c94 l       .text  00000000 
d0009c96 l       .text  00000000 
d0009c96 l       .text  00000000 
d0009c98 l       .text  00000000 
d0009c98 l       .text  00000000 
d0009c9a l       .text  00000000 
d0009c9a l       .text  00000000 
d0009c9c l       .text  00000000 
d0009c9c l       .text  00000000 
d0009c9e l       .text  00000000 
d0009c9e l       .text  00000000 
d0009ca0 l       .text  00000000 
d0009ca0 l       .text  00000000 
d0009ca2 l       .text  00000000 
d0009ca2 l       .text  00000000 
d0009ca8 l       .text  00000000 
d0009ca8 l       .text  00000000 
d0009caa l       .text  00000000 
d0009caa l       .text  00000000 
d0009cae l       .text  00000000 
d0009cae l       .text  00000000 
d0009cae l       .text  00000000 
d0009cae l       .text  00000000 
d0009cae l       .text  00000000 
d0009cae l       .text  00000000 
d0009cb0 l       .text  00000000 
d0009cb2 l       .text  00000000 
d0009cb2 l       .text  00000000 
d0009cb4 l       .text  00000000 
d0009cb4 l       .text  00000000 
d0009cb6 l       .text  00000000 
d0009cbc l       .text  00000000 
d0009cbc l       .text  00000000 
d0009cbe l       .text  00000000 
d0009cbe l       .text  00000000 
d0009cc0 l       .text  00000000 
d0009cc0 l       .text  00000000 
d0009cc2 l       .text  00000000 
d0009cc2 l       .text  00000000 
d0009cc4 l       .text  00000000 
d0009cc4 l       .text  00000000 
d0009cc6 l       .text  00000000 
d0009cc6 l       .text  00000000 
d0009cc8 l       .text  00000000 
d0009cc8 l       .text  00000000 
d0009cca l       .text  00000000 
d0009cca l       .text  00000000 
d0009cca l       .text  00000000 
d0009cca l       .text  00000000 
d0009cca l       .text  00000000 
d0009cca l       .text  00000000 
d0009ccc l       .text  00000000 
d0009cd0 l       .text  00000000 
d0009cd2 l       .text  00000000 
d0009cd2 l       .text  00000000 
d0009cd8 l       .text  00000000 
d0009cda l       .text  00000000 
d0009ce0 l       .text  00000000 
d0009ce0 l       .text  00000000 
d0009ce2 l       .text  00000000 
d0009ce2 l       .text  00000000 
d0009ce4 l       .text  00000000 
d0009ce4 l       .text  00000000 
d0009cea l       .text  00000000 
d0009cec l       .text  00000000 
d0009cec l       .text  00000000 
d0009cee l       .text  00000000 
d0009cee l       .text  00000000 
d0009cf2 l       .text  00000000 
d0009cf2 l       .text  00000000 
d0009cf4 l       .text  00000000 
d0009cf4 l       .text  00000000 
d0009cf6 l       .text  00000000 
d0009cf6 l       .text  00000000 
d0009cf8 l       .text  00000000 
d0009cf8 l       .text  00000000 
d0009cfa l       .text  00000000 
d0009cfa l       .text  00000000 
d0009cfc l       .text  00000000 
d0009d00 l       .text  00000000 
d0009d02 l       .text  00000000 
d0009d02 l       .text  00000000 
d0009d02 l       .text  00000000 
d0009d02 l       .text  00000000 
d0009d02 l       .text  00000000 
d0009d04 l       .text  00000000 
d0009d1e l       .text  00000000 
d0009d20 l       .text  00000000 
d0009d20 l       .text  00000000 
d0009d22 l       .text  00000000 
d0009d22 l       .text  00000000 
d0009d24 l       .text  00000000 
d0009d24 l       .text  00000000 
d0009d28 l       .text  00000000 
d0009d2a l       .text  00000000 
d0009d2c l       .text  00000000 
d0009d42 l       .text  00000000 
d0009d58 l       .text  00000000 
d0009d5a l       .text  00000000 
d0009d5a l       .text  00000000 
d0009d5e l       .text  00000000 
d0009d5e l       .text  00000000 
d0009d60 l       .text  00000000 
d0009d60 l       .text  00000000 
d0009d64 l       .text  00000000 
d0009d64 l       .text  00000000 
d0009d6c l       .text  00000000 
d0009d70 l       .text  00000000 
d0009d7e l       .text  00000000 
d0009d80 l       .text  00000000 
d0009d80 l       .text  00000000 
d0009d82 l       .text  00000000 
d0009d82 l       .text  00000000 
d0009d86 l       .text  00000000 
d0009d86 l       .text  00000000 
d0009d8a l       .text  00000000 
d0009d8a l       .text  00000000 
d0009d8e l       .text  00000000 
d0009d8e l       .text  00000000 
d0009d94 l       .text  00000000 
d0009d94 l       .text  00000000 
d0009d98 l       .text  00000000 
d0009d98 l       .text  00000000 
d0009d9c l       .text  00000000 
d0009d9c l       .text  00000000 
d0009da0 l       .text  00000000 
d0009da2 l       .text  00000000 
d0009da2 l       .text  00000000 
d0009da4 l       .text  00000000 
d0009da4 l       .text  00000000 
d0009da8 l       .text  00000000 
d0009da8 l       .text  00000000 
d0009dac l       .text  00000000 
d0009dac l       .text  00000000 
d0009dae l       .text  00000000 
d0009dae l       .text  00000000 
d0009dc0 l       .text  00000000 
d0009dc0 l       .text  00000000 
d0009dc4 l       .text  00000000 
d0009dc4 l       .text  00000000 
d0009dcc l       .text  00000000 
d0009dd0 l       .text  00000000 
d0009dd0 l       .text  00000000 
d0009dd6 l       .text  00000000 
d0009dd8 l       .text  00000000 
d0009dda l       .text  00000000 
d0009dda l       .text  00000000 
d0009dde l       .text  00000000 
d0009dde l       .text  00000000 
d0009de2 l       .text  00000000 
d0009de4 l       .text  00000000 
d0009de6 l       .text  00000000 
d0009dee l       .text  00000000 
d0009df0 l       .text  00000000 
d0009df0 l       .text  00000000 
d0009df4 l       .text  00000000 
d0009df4 l       .text  00000000 
d0009df8 l       .text  00000000 
d0009df8 l       .text  00000000 
d0009dfc l       .text  00000000 
d0009dfc l       .text  00000000 
d0009e02 l       .text  00000000 
d0009e02 l       .text  00000000 
d0009e04 l       .text  00000000 
d0009e04 l       .text  00000000 
d0009e06 l       .text  00000000 
d0009e06 l       .text  00000000 
d0009e08 l       .text  00000000 
d0009e0c l       .text  00000000 
d0009e0c l       .text  00000000 
d0009e10 l       .text  00000000 
d0009e10 l       .text  00000000 
d0009e14 l       .text  00000000 
d0009e16 l       .text  00000000 
d0009e18 l       .text  00000000 
d0009e1c l       .text  00000000 
d0009e1c l       .text  00000000 
d0009e1e l       .text  00000000 
d0009e1e l       .text  00000000 
d0009e20 l       .text  00000000 
d0009e20 l       .text  00000000 
d0009e24 l       .text  00000000 
d0009e24 l       .text  00000000 
d0009e28 l       .text  00000000 
d0009e28 l       .text  00000000 
d0009e2a l       .text  00000000 
d0009e34 l       .text  00000000 
d0009e38 l       .text  00000000 
d0009e38 l       .text  00000000 
d0009e3c l       .text  00000000 
d0009e3c l       .text  00000000 
d0009e40 l       .text  00000000 
d0009e40 l       .text  00000000 
d0009e42 l       .text  00000000 
d0009e44 l       .text  00000000 
d0009e44 l       .text  00000000 
d0009e48 l       .text  00000000 
d0009e48 l       .text  00000000 
d0009e4c l       .text  00000000 
d0009e4c l       .text  00000000 
d0009e4e l       .text  00000000 
d0009e58 l       .text  00000000 
d0009e5a l       .text  00000000 
d0009e5a l       .text  00000000 
d0009e62 l       .text  00000000 
d0009e62 l       .text  00000000 
d0009e66 l       .text  00000000 
d0009e66 l       .text  00000000 
d0009e6a l       .text  00000000 
d0009e70 l       .text  00000000 
d0009e74 l       .text  00000000 
d0009e74 l       .text  00000000 
d0009e78 l       .text  00000000 
d0009e78 l       .text  00000000 
d0009e7a l       .text  00000000 
d0009e7a l       .text  00000000 
d0009e7c l       .text  00000000 
d0009e7c l       .text  00000000 
d0009e7e l       .text  00000000 
d0009e7e l       .text  00000000 
d0009e80 l       .text  00000000 
d0009e80 l       .text  00000000 
d0009e84 l       .text  00000000 
d0009e84 l       .text  00000000 
d0009e88 l       .text  00000000 
d0009e8a l       .text  00000000 
d0009e94 l       .text  00000000 
d0009e94 l       .text  00000000 
d0009e9c l       .text  00000000 
d0009ea0 l       .text  00000000 
d0009eaa l       .text  00000000 
d0009eae l       .text  00000000 
d0009eb4 l       .text  00000000 
d0009ebe l       .text  00000000 
d0009ebe l       .text  00000000 
d0009ec0 l       .text  00000000 
d0009ec4 l       .text  00000000 
d0009ec8 l       .text  00000000 
d0009ec8 l       .text  00000000 
d0009eca l       .text  00000000 
d0009eda l       .text  00000000 
d0009ee8 l       .text  00000000 
d0009ee8 l       .text  00000000 
d0009eec l       .text  00000000 
d0009eec l       .text  00000000 
00003945 l       .debug_loc     00000000 
00003960 l       .debug_loc     00000000 
0000397b l       .debug_loc     00000000 
000039a1 l       .debug_loc     00000000 
000039bc l       .debug_loc     00000000 
000039d7 l       .debug_loc     00000000 
000039fb l       .debug_loc     00000000 
00003a16 l       .debug_loc     00000000 
00003a31 l       .debug_loc     00000000 
00003a4c l       .debug_loc     00000000 
00003a70 l       .debug_loc     00000000 
00003a8b l       .debug_loc     00000000 
00003aa6 l       .debug_loc     00000000 
00003ac1 l       .debug_loc     00000000 
00003adc l       .debug_loc     00000000 
00003b00 l       .debug_loc     00000000 
00003b1b l       .debug_loc     00000000 
00003b36 l       .debug_loc     00000000 
00003b67 l       .debug_loc     00000000 
00003b98 l       .debug_loc     00000000 
00003bc9 l       .debug_loc     00000000 
00003be4 l       .debug_loc     00000000 
00003bff l       .debug_loc     00000000 
00003c22 l       .debug_loc     00000000 
00003c3d l       .debug_loc     00000000 
00003c58 l       .debug_loc     00000000 
00003c96 l       .debug_loc     00000000 
00003cb5 l       .debug_loc     00000000 
00003cd0 l       .debug_loc     00000000 
00003cfd l       .debug_loc     00000000 
00003d20 l       .debug_loc     00000000 
00003d3b l       .debug_loc     00000000 
00003d56 l       .debug_loc     00000000 
00003d79 l       .debug_loc     00000000 
00003d94 l       .debug_loc     00000000 
00003daf l       .debug_loc     00000000 
00003ded l       .debug_loc     00000000 
00003e0c l       .debug_loc     00000000 
00003e27 l       .debug_loc     00000000 
00003e47 l       .debug_loc     00000000 
00003e62 l       .debug_loc     00000000 
00003e7e l       .debug_loc     00000000 
00003e99 l       .debug_loc     00000000 
00003eb4 l       .debug_loc     00000000 
00003ed7 l       .debug_loc     00000000 
00003ef8 l       .debug_loc     00000000 
00003f45 l       .debug_loc     00000000 
00003f60 l       .debug_loc     00000000 
00003f87 l       .debug_loc     00000000 
00003fac l       .debug_loc     00000000 
00003fce l       .debug_loc     00000000 
00003fe9 l       .debug_loc     00000000 
0000400b l       .debug_loc     00000000 
0000402c l       .debug_loc     00000000 
00004047 l       .debug_loc     00000000 
00004067 l       .debug_loc     00000000 
00004083 l       .debug_loc     00000000 
0000409e l       .debug_loc     00000000 
000040c0 l       .debug_loc     00000000 
000040db l       .debug_loc     00000000 
00004101 l       .debug_loc     00000000 
0000411d l       .debug_loc     00000000 
00004138 l       .debug_loc     00000000 
0000415a l       .debug_loc     00000000 
00004176 l       .debug_loc     00000000 
00004196 l       .debug_loc     00000000 
000041b8 l       .debug_loc     00000000 
000041d3 l       .debug_loc     00000000 
000041ee l       .debug_loc     00000000 
00004214 l       .debug_loc     00000000 
00004244 l       .debug_loc     00000000 
0000425f l       .debug_loc     00000000 
0000427f l       .debug_loc     00000000 
000042a1 l       .debug_loc     00000000 
000042c1 l       .debug_loc     00000000 
000042e7 l       .debug_loc     00000000 
00004302 l       .debug_loc     00000000 
00004337 l       .debug_loc     00000000 
0000437f l       .debug_loc     00000000 
000043bb l       .debug_loc     00000000 
000043d6 l       .debug_loc     00000000 
00004412 l       .debug_loc     00000000 
0000444e l       .debug_loc     00000000 
00004475 l       .debug_loc     00000000 
00004490 l       .debug_loc     00000000 
000044b0 l       .debug_loc     00000000 
000044d2 l       .debug_loc     00000000 
000044f6 l       .debug_loc     00000000 
00004511 l       .debug_loc     00000000 
0000452c l       .debug_loc     00000000 
0000454e l       .debug_loc     00000000 
00004577 l       .debug_loc     00000000 
0000459b l       .debug_loc     00000000 
000045b6 l       .debug_loc     00000000 
000045d1 l       .debug_loc     00000000 
000045ec l       .debug_loc     00000000 
00004607 l       .debug_loc     00000000 
00004622 l       .debug_loc     00000000 
00004644 l       .debug_loc     00000000 
0000465f l       .debug_loc     00000000 
00004681 l       .debug_loc     00000000 
0000469d l       .debug_loc     00000000 
000046b8 l       .debug_loc     00000000 
000046d3 l       .debug_loc     00000000 
000046ee l       .debug_loc     00000000 
00004715 l       .debug_loc     00000000 
0000473a l       .debug_loc     00000000 
0000475e l       .debug_loc     00000000 
00004785 l       .debug_loc     00000000 
000047b5 l       .debug_loc     00000000 
000047dd l       .debug_loc     00000000 
000047fa l       .debug_loc     00000000 
00004820 l       .debug_loc     00000000 
0000483b l       .debug_loc     00000000 
00004856 l       .debug_loc     00000000 
00004878 l       .debug_loc     00000000 
0000489a l       .debug_loc     00000000 
000048cb l       .debug_loc     00000000 
0000490a l       .debug_loc     00000000 
0000493b l       .debug_loc     00000000 
00004956 l       .debug_loc     00000000 
00004972 l       .debug_loc     00000000 
00004996 l       .debug_loc     00000000 
000049bd l       .debug_loc     00000000 
000049df l       .debug_loc     00000000 
00004a01 l       .debug_loc     00000000 
00004a23 l       .debug_loc     00000000 
00004a3f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004e18 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000698 l       .debug_ranges  00000000 
00000988 l       .debug_str     00000000 
00000925 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
00000936 l       .debug_str     00000000 
00000941 l       .debug_str     00000000 
0000094c l       .debug_str     00000000 
0000095c l       .debug_str     00000000 
0000096b l       .debug_str     00000000 
0000097a l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00000872 l       .debug_str     00000000 
000007c5 l       .debug_str     00000000 
000007e2 l       .debug_str     00000000 
00000800 l       .debug_str     00000000 
0000081c l       .debug_str     00000000 
00000835 l       .debug_str     00000000 
0000084e l       .debug_str     00000000 
000008cf l       .debug_str     00000000 
0000088c l       .debug_str     00000000 
000008a5 l       .debug_str     00000000 
000008ba l       .debug_str     00000000 
0000090e l       .debug_str     00000000 
000008e2 l       .debug_str     00000000 
000008f8 l       .debug_str     00000000 
00004ea3 l       .debug_str     00000000 
00004e39 l       .debug_str     00000000 
00004e53 l       .debug_str     00000000 
00004e6a l       .debug_str     00000000 
00004e81 l       .debug_str     00000000 
0000106e l       .debug_str     00000000 
000001e2 l       .debug_str     00000000 
000001d4 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00004eba l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
00004bc4 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00004bce l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00005dd8 l       .debug_str     00000000 
000002ad l       .debug_str     00000000 
000002a1 l       .debug_str     00000000 
00004ecc l       .debug_str     00000000 
000002bf l       .debug_str     00000000 
00004ed9 l       .debug_str     00000000 
00001781 l       .debug_str     00000000 
000002c8 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
00004ede l       .debug_str     00000000 
00004eed l       .debug_str     00000000 
00004ef5 l       .debug_str     00000000 
00001436 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
00004ef9 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00004f0c l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
00000e5c l       .debug_str     00000000 
00000e64 l       .debug_str     00000000 
00004bb0 l       .debug_str     00000000 
0000504d l       .debug_str     00000000 
00005631 l       .debug_str     00000000 
00000538 l       .debug_ranges  00000000 
00000550 l       .debug_ranges  00000000 
00004f1c l       .debug_str     00000000 
00004f29 l       .debug_str     00000000 
00004f2e l       .debug_str     00000000 
00004f3b l       .debug_str     00000000 
00004f49 l       .debug_str     00000000 
00004f41 l       .debug_str     00000000 
00000f24 l       .debug_str     00000000 
000010a6 l       .debug_str     00000000 
000000b5 l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
0000016b l       .debug_str     00000000 
00004f4f l       .debug_str     00000000 
00004f57 l       .debug_str     00000000 
00004f60 l       .debug_str     00000000 
00001c95 l       .debug_str     00000000 
00005065 l       .debug_str     00000000 
00005089 l       .debug_str     00000000 
00000568 l       .debug_ranges  00000000 
00000580 l       .debug_ranges  00000000 
000010ae l       .debug_str     00000000 
0000507c l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
000005f8 l       .debug_ranges  00000000 
00004f6d l       .debug_str     00000000 
00004f7c l       .debug_str     00000000 
00000f72 l       .debug_str     00000000 
000015e2 l       .debug_str     00000000 
00004bf2 l       .debug_str     00000000 
00001595 l       .debug_str     00000000 
00000c86 l       .debug_str     00000000 
00001580 l       .debug_str     00000000 
00004f83 l       .debug_str     00000000 
000017cc l       .debug_str     00000000 
00000f8d l       .debug_str     00000000 
00004a83 l       .debug_str     00000000 
0000508d l       .debug_str     00000000 
00000598 l       .debug_ranges  00000000 
000005b0 l       .debug_ranges  00000000 
000005c8 l       .debug_ranges  00000000 
000005e0 l       .debug_ranges  00000000 
00000f52 l       .debug_str     00000000 
00004de2 l       .debug_str     00000000 
00004f93 l       .debug_str     00000000 
00004fa0 l       .debug_str     00000000 
00004fa5 l       .debug_str     00000000 
00004fab l       .debug_str     00000000 
00004fbd l       .debug_str     00000000 
00004fb8 l       .debug_str     00000000 
00001051 l       .debug_str     00000000 
00000f3d l       .debug_str     00000000 
00005f96 l       .debug_str     00000000 
00004fb1 l       .debug_str     00000000 
00005014 l       .debug_str     00000000 
000008dc l       .debug_str     00000000 
00005aac l       .debug_str     00000000 
00005036 l       .debug_str     00000000 
000051ea l       .debug_str     00000000 
00000f39 l       .debug_str     00000000 
00005b42 l       .debug_str     00000000 
00000f2b l       .debug_str     00000000 
00000f31 l       .debug_str     00000000 
00000f37 l       .debug_str     00000000 
00000eda l       .debug_str     00000000 
00000ef6 l       .debug_str     00000000 
00000f0b l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
00004fc5 l       .debug_str     00000000 
00004fef l       .debug_str     00000000 
00004eb0 l       .debug_str     00000000 
00004fe6 l       .debug_str     00000000 
00004fd7 l       .debug_str     00000000 
00004ff5 l       .debug_str     00000000 
0000500e l       .debug_str     00000000 
0000501c l       .debug_str     00000000 
00005030 l       .debug_str     00000000 
0000503c l       .debug_str     00000000 
00001078 l       .debug_str     00000000 
00000ec1 l       .debug_str     00000000 
00005095 l       .debug_str     00000000 
00001048 l       .debug_str     00000000 
00000680 l       .debug_ranges  00000000 
00000618 l       .debug_ranges  00000000 
00000630 l       .debug_ranges  00000000 
00000648 l       .debug_ranges  00000000 
00000668 l       .debug_ranges  00000000 
00001554 l       .debug_str     00000000 
000010b0 l       .debug_str     00000000 
00000ff3 l       .debug_str     00000000 
00000fa4 l       .debug_str     00000000 
00000fae l       .debug_str     00000000 
00000fc7 l       .debug_str     00000000 
000048b4 l       .debug_str     00000000 
00000fd3 l       .debug_str     00000000 
00000fd9 l       .debug_str     00000000 
00000fde l       .debug_str     00000000 
00000fe9 l       .debug_str     00000000 
00000fee l       .debug_str     00000000 
0000067c l       .debug_frame   00000000 
d0009ad4 l       .text  00000000 
d0009c2c l       .text  00000000 
d0009cae l       .text  00000000 
d0009cca l       .text  00000000 
d0009d02 l       .text  00000000 
d0009eec l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
d0009eec l       .text  00000000 
d0009eec l       .text  00000000 
d0009eec l       .text  00000000 
d0009eee l       .text  00000000 
d0009ef0 l       .text  00000000 
d0009ef6 l       .text  00000000 
d0009efa l       .text  00000000 
d0009efe l       .text  00000000 
d0009f02 l       .text  00000000 
d0009f02 l       .text  00000000 
d0009f0c l       .text  00000000 
d0009f0e l       .text  00000000 
d0009f0e l       .text  00000000 
d0009f10 l       .text  00000000 
d0009f10 l       .text  00000000 
d0009f16 l       .text  00000000 
d0009f16 l       .text  00000000 
d0009f20 l       .text  00000000 
d0009f22 l       .text  00000000 
d0009f22 l       .text  00000000 
d0009f36 l       .text  00000000 
d0009f36 l       .text  00000000 
d0009f38 l       .text  00000000 
d0009f38 l       .text  00000000 
d0009f42 l       .text  00000000 
d0009f44 l       .text  00000000 
d0009f44 l       .text  00000000 
d0009f58 l       .text  00000000 
d0009f58 l       .text  00000000 
d0009f5a l       .text  00000000 
0000008c l     O .logs.fields   00000014 test_status_set.kLogFields.2
d0009f5a l       .text  00000000 
d0009f62 l       .text  00000000 
d0009f62 l       .text  00000000 
d0009f6c l       .text  00000000 
d0009f6e l       .text  00000000 
d0009f6e l       .text  00000000 
00000078 l     O .logs.fields   00000014 test_status_set.kLogFields
d0009f76 l       .text  00000000 
d0009f7e l       .text  00000000 
d0009f7e l       .text  00000000 
d0009f88 l       .text  00000000 
d0009f8a l       .text  00000000 
d0009f8a l       .text  00000000 
d0009f92 l       .text  00000000 
d0009f92 l       .text  00000000 
d0009f92 l       .text  00000000 
00004a66 l       .debug_loc     00000000 
00004a84 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005222 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000eb1 l       .debug_str     00000000 
000001f6 l       .debug_str     00000000 
00000a08 l       .debug_str     00000000 
0000027a l       .debug_str     00000000 
00000285 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000263 l       .debug_str     00000000 
0000547a l       .debug_str     00000000 
0000026d l       .debug_str     00000000 
00000273 l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000247 l       .debug_str     00000000 
00000201 l       .debug_str     00000000 
00000212 l       .debug_str     00000000 
00000223 l       .debug_str     00000000 
00000235 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000993 l       .debug_str     00000000 
000009a8 l       .debug_str     00000000 
000009c1 l       .debug_str     00000000 
000009d3 l       .debug_str     00000000 
000009e4 l       .debug_str     00000000 
000009f6 l       .debug_str     00000000 
00005250 l       .debug_str     00000000 
00005277 l       .debug_str     00000000 
00005269 l       .debug_str     00000000 
000002ad l       .debug_str     00000000 
000002a1 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00004bb0 l       .debug_str     00000000 
00005dd8 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00004bc4 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000e9a l       .debug_str     00000000 
00000e85 l       .debug_str     00000000 
0000528f l       .debug_str     00000000 
00000724 l       .debug_frame   00000000 
d0009f92 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
d0009f92 l       .text  00000000 
d0009f92 l       .text  00000000 
d0009f92 l       .text  00000000 
d0009f92 l       .text  00000000 
d0009f96 l       .text  00000000 
d0009f96 l       .text  00000000 
d0009f98 l       .text  00000000 
d0009f98 l       .text  00000000 
00004a97 l       .debug_loc     00000000 
00004ab2 l       .debug_loc     00000000 
00004ad9 l       .debug_loc     00000000 
00004b00 l       .debug_loc     00000000 
00004b1c l       .debug_loc     00000000 
00004b49 l       .debug_loc     00000000 
00004b70 l       .debug_loc     00000000 
00004b97 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005295 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
000006d0 l       .debug_ranges  00000000 
00000182 l       .debug_str     00000000 
0000016b l       .debug_str     00000000 
000052b2 l       .debug_str     00000000 
000052c3 l       .debug_str     00000000 
000052cd l       .debug_str     00000000 
000052d8 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000052f3 l       .debug_str     00000000 
00005316 l       .debug_str     00000000 
00001d81 l       .debug_str     00000000 
000014c5 l       .debug_str     00000000 
000052e5 l       .debug_str     00000000 
0000482e l       .debug_str     00000000 
0000528f l       .debug_str     00000000 
00005304 l       .debug_str     00000000 
00000750 l       .debug_frame   00000000 
d0009f98 l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
d0009f98 l       .text  00000000 
d0009f98 l       .text  00000000 
d0009f98 l       .text  00000000 
d0009f9a l       .text  00000000 
d0009fa0 l       .text  00000000 
d0009fa2 l       .text  00000000 
d0009fb0 l       .text  00000000 
d0009fba l       .text  00000000 
d0009fc0 l       .text  00000000 
d0009fc0 l       .text  00000000 
d0009fc2 l       .text  00000000 
d0009fc6 l       .text  00000000 
d0009fc6 l       .text  00000000 
d0009fd0 l       .text  00000000 
d0009fd0 l       .text  00000000 
d0009fd2 l       .text  00000000 
d0009fd6 l       .text  00000000 
d0009fd6 l       .text  00000000 
d0009fd8 l       .text  00000000 
d0009fd8 l       .text  00000000 
d0009fda l       .text  00000000 
d0009fda l       .text  00000000 
d0009fde l       .text  00000000 
d0009fde l       .text  00000000 
d0009fe4 l       .text  00000000 
d0009ff2 l       .text  00000000 
d0009ff2 l       .text  00000000 
e0002050 l     O .bss   00000002 base_log_internal_core.global_log_counter
d0009ffa l       .text  00000000 
d000a002 l       .text  00000000 
d000a004 l       .text  00000000 
d000a00e l       .text  00000000 
d000a00e l       .text  00000000 
d000a01a l       .text  00000000 
d000a01a l       .text  00000000 
d000a01c l       .text  00000000 
d000a01e l       .text  00000000 
d000a022 l       .text  00000000 
d000a022 l       .text  00000000 
d000a02c l       .text  00000000 
d000a02c l       .text  00000000 
d000a036 l       .text  00000000 
d000a036 l       .text  00000000 
d000a036 l       .text  00000000 
d000a036 l       .text  00000000 
d000a036 l       .text  00000000 
d000a038 l       .text  00000000 
d000a03e l       .text  00000000 
d000a03e l       .text  00000000 
d000a048 l       .text  00000000 
d000a048 l       .text  00000000 
d000a04e l       .text  00000000 
d000a04e l       .text  00000000 
d000a052 l       .text  00000000 
d000a052 l       .text  00000000 
d000a054 l       .text  00000000 
d000a054 l       .text  00000000 
d000a056 l       .text  00000000 
d000a056 l       .text  00000000 
d000a058 l       .text  00000000 
d000a05c l       .text  00000000 
d000a060 l       .text  00000000 
d000a062 l       .text  00000000 
d000a062 l       .text  00000000 
d000a064 l       .text  00000000 
d000a064 l       .text  00000000 
d000a066 l       .text  00000000 
d000a066 l       .text  00000000 
d000a06a l       .text  00000000 
d000a06a l       .text  00000000 
00004bb3 l       .debug_loc     00000000 
00004bdb l       .debug_loc     00000000 
00004bf6 l       .debug_loc     00000000 
00004c32 l       .debug_loc     00000000 
00004c4e l       .debug_loc     00000000 
00004c69 l       .debug_loc     00000000 
00004c84 l       .debug_loc     00000000 
00004c9f l       .debug_loc     00000000 
00004cdd l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000531b l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
000006f8 l       .debug_ranges  00000000 
00000e9a l       .debug_str     00000000 
00005337 l       .debug_str     00000000 
00005385 l       .debug_str     00000000 
00005389 l       .debug_str     00000000 
00005397 l       .debug_str     00000000 
0000026e l       .debug_str     00000000 
00004fe6 l       .debug_str     00000000 
00004fd7 l       .debug_str     00000000 
00000247 l       .debug_str     00000000 
00000201 l       .debug_str     00000000 
00000212 l       .debug_str     00000000 
00000223 l       .debug_str     00000000 
00000235 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
0000106e l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
0000534a l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
0000535d l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00005364 l       .debug_str     00000000 
0000536c l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
00005378 l       .debug_str     00000000 
00004bb0 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00005dd8 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
000002ad l       .debug_str     00000000 
000002a1 l       .debug_str     00000000 
00004bc4 l       .debug_str     00000000 
00000e85 l       .debug_str     00000000 
0000026d l       .debug_str     00000000 
000053a1 l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
00000285 l       .debug_str     00000000 
0000027a l       .debug_str     00000000 
00000263 l       .debug_str     00000000 
0000547a l       .debug_str     00000000 
00000273 l       .debug_str     00000000 
0000172c l       .debug_str     00000000 
00001722 l       .debug_str     00000000 
000007b0 l       .debug_frame   00000000 
d000a036 l       .text  00000000 
d000a06a l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
d000a06a l     F .text  00000004 base_dev_null
e0002054 l     O .bss   00000008 base_stdout
d000a06a l       .text  00000000 
d000a06a l       .text  00000000 
d000a06a l       .text  00000000 
d000a06c l       .text  00000000 
d000a06c l       .text  00000000 
d000a06e l       .text  00000000 
d000a06e l       .text  00000000 
d000a06e l       .text  00000000 
d000a06e l       .text  00000000 
d000a06e l       .text  00000000 
d000a070 l       .text  00000000 
d000a072 l       .text  00000000 
d000a080 l       .text  00000000 
d000a084 l       .text  00000000 
d000a084 l       .text  00000000 
d000a08a l       .text  00000000 
d000a08a l       .text  00000000 
d000a08c l       .text  00000000 
d000a08c l       .text  00000000 
d000a08e l       .text  00000000 
d000a08e l       .text  00000000 
d000a092 l       .text  00000000 
d000a094 l       .text  00000000 
d000a096 l       .text  00000000 
d000a096 l       .text  00000000 
d000a09c l       .text  00000000 
d000a09c l       .text  00000000 
d000a09c l       .text  00000000 
d000a09c l       .text  00000000 
d000a09c l       .text  00000000 
d000a0a0 l       .text  00000000 
d000a0a6 l       .text  00000000 
d000a0a6 l       .text  00000000 
d000a0a8 l       .text  00000000 
d000a0a8 l       .text  00000000 
d000a0ae l       .text  00000000 
d000a0b0 l       .text  00000000 
d000a0b2 l       .text  00000000 
d000a0b2 l       .text  00000000 
d000a0b2 l       .text  00000000 
d000a0b2 l       .text  00000000 
d000a0b2 l       .text  00000000 
d000a0b2 l       .text  00000000 
d000a0b4 l       .text  00000000 
d000a0ce l       .text  00000000 
d000a0d0 l       .text  00000000 
d000a0d2 l       .text  00000000 
d000a0d4 l       .text  00000000 
d000a0d6 l       .text  00000000 
d000a0d8 l       .text  00000000 
d000a0da l       .text  00000000 
d000a0e2 l       .text  00000000 
d000a0e2 l       .text  00000000 
d000a0e4 l       .text  00000000 
d000a0e4 l       .text  00000000 
d000a0e8 l       .text  00000000 
d000a0ec l       .text  00000000 
d000a100 l       .text  00000000 
d000a100 l       .text  00000000 
d000a10a l       .text  00000000 
d000a10e l       .text  00000000 
d000a112 l       .text  00000000 
d000a114 l       .text  00000000 
d000a116 l       .text  00000000 
d000a116 l       .text  00000000 
d000a118 l       .text  00000000 
d000a11a l       .text  00000000 
d000a120 l       .text  00000000 
d000a120 l       .text  00000000 
d000a122 l       .text  00000000 
d000a122 l       .text  00000000 
d000a126 l       .text  00000000 
d000a126 l       .text  00000000 
d000a132 l       .text  00000000 
d000a136 l       .text  00000000 
d000a136 l       .text  00000000 
d000a142 l       .text  00000000 
d000a142 l       .text  00000000 
d000a14a l       .text  00000000 
d000a14a l       .text  00000000 
d000a14e l       .text  00000000 
d000a14e l       .text  00000000 
d000a15c l       .text  00000000 
d000a15c l       .text  00000000 
d000a160 l       .text  00000000 
d000a168 l       .text  00000000 
d000a16c l       .text  00000000 
d000a16c l       .text  00000000 
d000a170 l       .text  00000000 
d000a176 l       .text  00000000 
d000a17a l       .text  00000000 
d000a17c l       .text  00000000 
d000a180 l       .text  00000000 
d000a180 l       .text  00000000 
d000a184 l       .text  00000000 
d000a18a l       .text  00000000 
d000a18a l       .text  00000000 
d000a18e l       .text  00000000 
d000a1a2 l       .text  00000000 
d000a1a2 l       .text  00000000 
d000a1a4 l       .text  00000000 
d000a1aa l       .text  00000000 
d000a1ae l       .text  00000000 
d000a1b2 l       .text  00000000 
d000a1b2 l       .text  00000000 
d000a1ba l       .text  00000000 
d000a1bc l       .text  00000000 
d000a1ca l       .text  00000000 
d000a1ca l       .text  00000000 
d000a1ce l       .text  00000000 
d000a1da l       .text  00000000 
d000a1da l       .text  00000000 
d000a1de l       .text  00000000 
d000a1de l       .text  00000000 
d000a1ec l       .text  00000000 
d000a1ec l       .text  00000000 
d000a1ee l       .text  00000000 
d000a1f2 l       .text  00000000 
d000a1f2 l       .text  00000000 
d000a1f6 l       .text  00000000 
d000b698 l     O .rodata        00000010 kDigitsLow
d000a208 l       .text  00000000 
d000a208 l       .text  00000000 
d000a210 l       .text  00000000 
d000a218 l       .text  00000000 
d000a218 l       .text  00000000 
d000a222 l       .text  00000000 
d000a222 l       .text  00000000 
d000a226 l       .text  00000000 
d000a226 l       .text  00000000 
d000a230 l       .text  00000000 
d000a230 l       .text  00000000 
d000a238 l       .text  00000000 
d000a238 l       .text  00000000 
d000a23c l       .text  00000000 
d000b6c5 l     O .rodata        00000010 kDigitsHigh
d000a246 l       .text  00000000 
d000a246 l       .text  00000000 
d000a250 l       .text  00000000 
d000a250 l       .text  00000000 
d000a254 l       .text  00000000 
d000a25e l       .text  00000000 
d000a25e l       .text  00000000 
d000a262 l       .text  00000000 
d000a26c l       .text  00000000 
d000a26c l       .text  00000000 
d000a274 l       .text  00000000 
d000a274 l       .text  00000000 
d000a278 l       .text  00000000 
d000a282 l       .text  00000000 
d000a282 l       .text  00000000 
d000a28c l       .text  00000000 
d000a290 l       .text  00000000 
d000a294 l       .text  00000000 
d000a294 l       .text  00000000 
d000a2a0 l       .text  00000000 
d000a2a0 l       .text  00000000 
d000a2a4 l       .text  00000000 
d000a2ae l       .text  00000000 
d000a2b2 l       .text  00000000 
d000a2b2 l       .text  00000000 
d000a2b4 l       .text  00000000 
d000a2b4 l       .text  00000000 
d000a2b8 l       .text  00000000 
d000a2b8 l       .text  00000000 
d000a2bc l       .text  00000000 
d000a2c6 l       .text  00000000 
d000a2c6 l       .text  00000000 
d000a2ca l       .text  00000000 
d000a2d6 l       .text  00000000 
d000a2d6 l       .text  00000000 
d000a2da l       .text  00000000 
d000a2da l       .text  00000000 
d000a2e8 l       .text  00000000 
d000a2e8 l       .text  00000000 
d000a2f2 l       .text  00000000 
d000a2f2 l       .text  00000000 
d000a2f6 l       .text  00000000 
d000a2f6 l       .text  00000000 
d000a626 l     F .text  0000007e write_digits
d000a30c l       .text  00000000 
d000a30c l       .text  00000000 
d000a312 l       .text  00000000 
d000a312 l       .text  00000000 
d000a31c l       .text  00000000 
d000a31c l       .text  00000000 
d000a31e l       .text  00000000 
d000a328 l       .text  00000000 
d000a328 l       .text  00000000 
d000a332 l       .text  00000000 
d000a332 l       .text  00000000 
d000a334 l       .text  00000000 
d000a334 l       .text  00000000 
d000a336 l       .text  00000000 
d000a336 l       .text  00000000 
d000a33a l       .text  00000000 
d000a33a l       .text  00000000 
d000a33e l       .text  00000000 
d000a340 l       .text  00000000 
d000a344 l       .text  00000000 
d000a344 l       .text  00000000 
d000a348 l       .text  00000000 
d000a348 l       .text  00000000 
d000a354 l       .text  00000000 
d000a354 l       .text  00000000 
d000a356 l       .text  00000000 
d000a356 l       .text  00000000 
d000a358 l       .text  00000000 
d000a358 l       .text  00000000 
d000a360 l       .text  00000000 
d000a360 l       .text  00000000 
d000a364 l       .text  00000000 
d000a364 l       .text  00000000 
d000a372 l       .text  00000000 
d000a372 l       .text  00000000 
d000a374 l       .text  00000000 
d000a382 l       .text  00000000 
d000a382 l       .text  00000000 
d000a386 l       .text  00000000 
d000a386 l       .text  00000000 
d000a38a l       .text  00000000 
d000a38a l       .text  00000000 
d000a398 l       .text  00000000 
d000a398 l       .text  00000000 
d000a39c l       .text  00000000 
d000a39c l       .text  00000000 
d000a3a4 l       .text  00000000 
d000a3a4 l       .text  00000000 
d000a3a6 l       .text  00000000 
d000a3a6 l       .text  00000000 
d000a3a8 l       .text  00000000 
d000a3a8 l       .text  00000000 
d000a3bc l       .text  00000000 
d000a3bc l       .text  00000000 
d000a3be l       .text  00000000 
d000a3cc l       .text  00000000 
d000a3cc l       .text  00000000 
d000a3ce l       .text  00000000 
d000a3ce l       .text  00000000 
d000a3d0 l       .text  00000000 
d000a3d8 l       .text  00000000 
d000a3dc l       .text  00000000 
d000a3de l       .text  00000000 
d000a3e8 l       .text  00000000 
d000a3e8 l       .text  00000000 
d000a3ec l       .text  00000000 
d000a3f6 l       .text  00000000 
d000a3f6 l       .text  00000000 
d000a3fa l       .text  00000000 
d000a406 l       .text  00000000 
d000a406 l       .text  00000000 
d000a40a l       .text  00000000 
d000a40a l       .text  00000000 
d000a414 l       .text  00000000 
d000a414 l       .text  00000000 
d000a41c l       .text  00000000 
d000a41c l       .text  00000000 
d000a420 l       .text  00000000 
d000a428 l       .text  00000000 
d000a428 l       .text  00000000 
d000a432 l       .text  00000000 
d000a432 l       .text  00000000 
d000a43c l       .text  00000000 
d000a43c l       .text  00000000 
d000a440 l       .text  00000000 
d000a448 l       .text  00000000 
d000a448 l       .text  00000000 
d000a452 l       .text  00000000 
d000a454 l       .text  00000000 
d000a454 l       .text  00000000 
d000a458 l       .text  00000000 
d000a462 l       .text  00000000 
d000a462 l       .text  00000000 
d000a46a l       .text  00000000 
d000a46a l       .text  00000000 
d000a46e l       .text  00000000 
d000a476 l       .text  00000000 
d000a476 l       .text  00000000 
d000a540 l     F .text  000000e6 hex_dump
d000a480 l       .text  00000000 
d000a482 l       .text  00000000 
d000b6d5 l     O .rodata        0000000f kUnknownSpec
d000a482 l       .text  00000000 
d000a48c l       .text  00000000 
d000a48c l       .text  00000000 
d000a490 l       .text  00000000 
d000a492 l       .text  00000000 
d000a492 l       .text  00000000 
d000a496 l       .text  00000000 
d000a49c l       .text  00000000 
d000a49c l       .text  00000000 
d000a4a0 l       .text  00000000 
d000a4ac l       .text  00000000 
d000a4ac l       .text  00000000 
d000a4ae l       .text  00000000 
d000a4ae l       .text  00000000 
d000a4c2 l       .text  00000000 
d000a4c2 l       .text  00000000 
d000a4c6 l       .text  00000000 
d000a4d4 l       .text  00000000 
d000a4d4 l       .text  00000000 
d000a4d8 l       .text  00000000 
d000a4d8 l       .text  00000000 
d000a4de l       .text  00000000 
d000a4de l       .text  00000000 
d000a4e0 l       .text  00000000 
d000a4e0 l       .text  00000000 
d000a4e2 l       .text  00000000 
d000a4e2 l       .text  00000000 
d000a4ea l       .text  00000000 
d000a4ec l       .text  00000000 
d000a4ee l       .text  00000000 
d000a4f4 l       .text  00000000 
d000a4f4 l       .text  00000000 
d000a500 l       .text  00000000 
d000b6a8 l     O .rodata        00000011 kErrorNul
d000a500 l       .text  00000000 
d000a50a l       .text  00000000 
d000a50a l       .text  00000000 
d000a50e l       .text  00000000 
d000a512 l       .text  00000000 
d000a514 l       .text  00000000 
d000a514 l       .text  00000000 
d000a524 l       .text  00000000 
d000a528 l       .text  00000000 
d000a534 l       .text  00000000 
d000b6b9 l     O .rodata        0000000c kErrorTooWide
d000a534 l       .text  00000000 
d000a540 l       .text  00000000 
d000a540 l       .text  00000000 
d000a540 l       .text  00000000 
d000a540 l       .text  00000000 
d000a540 l       .text  00000000 
d000a540 l       .text  00000000 
d000a542 l       .text  00000000 
d000a55a l       .text  00000000 
d000a55c l       .text  00000000 
d000a55e l       .text  00000000 
d000a560 l       .text  00000000 
d000a562 l       .text  00000000 
d000a566 l       .text  00000000 
d000a566 l       .text  00000000 
d000a56a l       .text  00000000 
d000a56e l       .text  00000000 
d000a56e l       .text  00000000 
d000a57a l       .text  00000000 
d000a57a l       .text  00000000 
d000a57c l       .text  00000000 
d000a57e l       .text  00000000 
d000a584 l       .text  00000000 
d000a584 l       .text  00000000 
d000a588 l       .text  00000000 
d000a58c l       .text  00000000 
d000a58c l       .text  00000000 
d000a594 l       .text  00000000 
d000a594 l       .text  00000000 
d000a596 l       .text  00000000 
d000a598 l       .text  00000000 
d000a598 l       .text  00000000 
d000a59a l       .text  00000000 
d000a59a l       .text  00000000 
d000a5a0 l       .text  00000000 
d000a5a0 l       .text  00000000 
d000a5a2 l       .text  00000000 
d000a5a2 l       .text  00000000 
d000a5a6 l       .text  00000000 
d000a5aa l       .text  00000000 
d000a5b0 l       .text  00000000 
d000a5b0 l       .text  00000000 
d000a5b6 l       .text  00000000 
d000a5be l       .text  00000000 
d000a5be l       .text  00000000 
d000a5c0 l       .text  00000000 
d000a5c4 l       .text  00000000 
d000a5c8 l       .text  00000000 
d000a5ce l       .text  00000000 
d000a5d2 l       .text  00000000 
d000a5d6 l       .text  00000000 
d000a5d8 l       .text  00000000 
d000a5de l       .text  00000000 
d000a5e0 l       .text  00000000 
d000a5e8 l       .text  00000000 
d000a5ee l       .text  00000000 
d000a5f2 l       .text  00000000 
d000a5f2 l       .text  00000000 
d000a5f4 l       .text  00000000 
d000a5f6 l       .text  00000000 
d000a5f6 l       .text  00000000 
d000a5f8 l       .text  00000000 
d000a5fa l       .text  00000000 
d000a5fe l       .text  00000000 
d000a5fe l       .text  00000000 
d000a600 l       .text  00000000 
d000a606 l       .text  00000000 
d000a606 l       .text  00000000 
d000a608 l       .text  00000000 
d000a610 l       .text  00000000 
d000a612 l       .text  00000000 
d000a616 l       .text  00000000 
d000a618 l       .text  00000000 
d000a61a l       .text  00000000 
d000a61c l       .text  00000000 
d000a626 l       .text  00000000 
d000a626 l       .text  00000000 
d000a626 l       .text  00000000 
d000a626 l       .text  00000000 
d000a626 l       .text  00000000 
d000a628 l       .text  00000000 
d000a62a l       .text  00000000 
d000a62c l       .text  00000000 
d000a62c l       .text  00000000 
d000a62e l       .text  00000000 
d000a630 l       .text  00000000 
d000a634 l       .text  00000000 
d000a634 l       .text  00000000 
d000a636 l       .text  00000000 
d000a636 l       .text  00000000 
d000a642 l       .text  00000000 
d000a642 l       .text  00000000 
d000a644 l       .text  00000000 
d000a648 l       .text  00000000 
d000a650 l       .text  00000000 
d000a650 l       .text  00000000 
d000a652 l       .text  00000000 
d000a656 l       .text  00000000 
d000a65a l       .text  00000000 
d000a65a l       .text  00000000 
d000a65c l       .text  00000000 
d000a65c l       .text  00000000 
d000a660 l       .text  00000000 
d000a666 l       .text  00000000 
d000a666 l       .text  00000000 
d000a668 l       .text  00000000 
d000a66a l       .text  00000000 
d000a66c l       .text  00000000 
d000a670 l       .text  00000000 
d000a674 l       .text  00000000 
d000a678 l       .text  00000000 
d000a678 l       .text  00000000 
d000a682 l       .text  00000000 
d000a686 l       .text  00000000 
d000a688 l       .text  00000000 
d000a68c l       .text  00000000 
d000a690 l       .text  00000000 
d000a692 l       .text  00000000 
d000a694 l       .text  00000000 
d000a696 l       .text  00000000 
d000a696 l       .text  00000000 
d000a69c l       .text  00000000 
d000a69e l       .text  00000000 
d000a69e l       .text  00000000 
d000a6a4 l       .text  00000000 
d000a6a4 l       .text  00000000 
00004cfa l       .debug_loc     00000000 
00004d26 l       .debug_loc     00000000 
00004d41 l       .debug_loc     00000000 
00004d67 l       .debug_loc     00000000 
00004d93 l       .debug_loc     00000000 
00004dc4 l       .debug_loc     00000000 
00004df5 l       .debug_loc     00000000 
00004e31 l       .debug_loc     00000000 
00004e62 l       .debug_loc     00000000 
00004e89 l       .debug_loc     00000000 
00004eba l       .debug_loc     00000000 
00004ed5 l       .debug_loc     00000000 
00004ef1 l       .debug_loc     00000000 
00004f0c l       .debug_loc     00000000 
00004f32 l       .debug_loc     00000000 
00004f58 l       .debug_loc     00000000 
00004f94 l       .debug_loc     00000000 
0000509f l       .debug_loc     00000000 
000051f9 l       .debug_loc     00000000 
000052f9 l       .debug_loc     00000000 
00005404 l       .debug_loc     00000000 
00005424 l       .debug_loc     00000000 
0000544a l       .debug_loc     00000000 
0000547a l       .debug_loc     00000000 
000056b2 l       .debug_loc     00000000 
000056ce l       .debug_loc     00000000 
000056e9 l       .debug_loc     00000000 
0000585e l       .debug_loc     00000000 
000059ae l       .debug_loc     00000000 
00005ac2 l       .debug_loc     00000000 
00005ae8 l       .debug_loc     00000000 
00005b03 l       .debug_loc     00000000 
00005b1e l       .debug_loc     00000000 
00005b39 l       .debug_loc     00000000 
00005b54 l       .debug_loc     00000000 
00005b6f l       .debug_loc     00000000 
00005b8b l       .debug_loc     00000000 
00005ba6 l       .debug_loc     00000000 
00005bc1 l       .debug_loc     00000000 
00005bdc l       .debug_loc     00000000 
00005bf7 l       .debug_loc     00000000 
00005c29 l       .debug_loc     00000000 
00005c5c l       .debug_loc     00000000 
00005c77 l       .debug_loc     00000000 
00005cca l       .debug_loc     00000000 
00005cfd l       .debug_loc     00000000 
00005d18 l       .debug_loc     00000000 
00005d33 l       .debug_loc     00000000 
00005d4e l       .debug_loc     00000000 
00005d69 l       .debug_loc     00000000 
00005d84 l       .debug_loc     00000000 
00005d9f l       .debug_loc     00000000 
00005dba l       .debug_loc     00000000 
00005dd5 l       .debug_loc     00000000 
00005df0 l       .debug_loc     00000000 
00005e0b l       .debug_loc     00000000 
00005e26 l       .debug_loc     00000000 
00005e42 l       .debug_loc     00000000 
00005e61 l       .debug_loc     00000000 
00005e7c l       .debug_loc     00000000 
00005ead l       .debug_loc     00000000 
00005ed3 l       .debug_loc     00000000 
00005f04 l       .debug_loc     00000000 
00005f35 l       .debug_loc     00000000 
00005f50 l       .debug_loc     00000000 
00005f6b l       .debug_loc     00000000 
00005f86 l       .debug_loc     00000000 
00005fb7 l       .debug_loc     00000000 
00005fd2 l       .debug_loc     00000000 
00005fed l       .debug_loc     00000000 
00006009 l       .debug_loc     00000000 
0000602f l       .debug_loc     00000000 
00006060 l       .debug_loc     00000000 
0000607b l       .debug_loc     00000000 
00006096 l       .debug_loc     00000000 
000060bc l       .debug_loc     00000000 
000060e2 l       .debug_loc     00000000 
000060fd l       .debug_loc     00000000 
00006118 l       .debug_loc     00000000 
00006133 l       .debug_loc     00000000 
0000614e l       .debug_loc     00000000 
0000616d l       .debug_loc     00000000 
00006188 l       .debug_loc     00000000 
000061a3 l       .debug_loc     00000000 
000061bf l       .debug_loc     00000000 
000061da l       .debug_loc     00000000 
000061f5 l       .debug_loc     00000000 
00006214 l       .debug_loc     00000000 
0000623a l       .debug_loc     00000000 
0000626b l       .debug_loc     00000000 
000062c3 l       .debug_loc     00000000 
0000630d l       .debug_loc     00000000 
0000635f l       .debug_loc     00000000 
0000639c l       .debug_loc     00000000 
000063d8 l       .debug_loc     00000000 
00006442 l       .debug_loc     00000000 
0000648b l       .debug_loc     00000000 
000064f5 l       .debug_loc     00000000 
0000651b l       .debug_loc     00000000 
00006536 l       .debug_loc     00000000 
00006551 l       .debug_loc     00000000 
00006578 l       .debug_loc     00000000 
000065c0 l       .debug_loc     00000000 
000065e6 l       .debug_loc     00000000 
0000660c l       .debug_loc     00000000 
00006632 l       .debug_loc     00000000 
0000664d l       .debug_loc     00000000 
0000667d l       .debug_loc     00000000 
000066a3 l       .debug_loc     00000000 
000066d5 l       .debug_loc     00000000 
00006713 l       .debug_loc     00000000 
00006742 l       .debug_loc     00000000 
0000675d l       .debug_loc     00000000 
00006790 l       .debug_loc     00000000 
000067ab l       .debug_loc     00000000 
000067e7 l       .debug_loc     00000000 
0000680d l       .debug_loc     00000000 
00006828 l       .debug_loc     00000000 
00006843 l       .debug_loc     00000000 
0000685e l       .debug_loc     00000000 
000068b4 l       .debug_loc     00000000 
000068e3 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000053ac l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000848 l       .debug_ranges  00000000 
000053ca l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
000053e9 l       .debug_str     00000000 
00005401 l       .debug_str     00000000 
000053f5 l       .debug_str     00000000 
000010a6 l       .debug_str     00000000 
00005707 l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
0000540f l       .debug_str     00000000 
00005419 l       .debug_str     00000000 
0000575f l       .debug_str     00000000 
00005427 l       .debug_str     00000000 
00003b10 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
000008dc l       .debug_str     00000000 
000001cc l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
000057e1 l       .debug_str     00000000 
0000578c l       .debug_str     00000000 
00005631 l       .debug_str     00000000 
000057f1 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00005431 l       .debug_str     00000000 
0000543d l       .debug_str     00000000 
0000544a l       .debug_str     00000000 
00005499 l       .debug_str     00000000 
00005488 l       .debug_str     00000000 
00005461 l       .debug_str     00000000 
00005470 l       .debug_str     00000000 
0000547f l       .debug_str     00000000 
000054ac l       .debug_str     00000000 
00000988 l       .debug_str     00000000 
00000925 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
00000936 l       .debug_str     00000000 
00000941 l       .debug_str     00000000 
0000094c l       .debug_str     00000000 
0000095c l       .debug_str     00000000 
0000096b l       .debug_str     00000000 
0000097a l       .debug_str     00000000 
000054b7 l       .debug_str     00000000 
000054c0 l       .debug_str     00000000 
000054cb l       .debug_str     00000000 
000054d3 l       .debug_str     00000000 
000054df l       .debug_str     00000000 
000054eb l       .debug_str     00000000 
000054f8 l       .debug_str     00000000 
00005508 l       .debug_str     00000000 
00005519 l       .debug_str     00000000 
00005526 l       .debug_str     00000000 
0000552f l       .debug_str     00000000 
00005539 l       .debug_str     00000000 
00005543 l       .debug_str     00000000 
0000554e l       .debug_str     00000000 
00005558 l       .debug_str     00000000 
00005563 l       .debug_str     00000000 
00005571 l       .debug_str     00000000 
000001e2 l       .debug_str     00000000 
000001d4 l       .debug_str     00000000 
00005583 l       .debug_str     00000000 
0000557a l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
000002ad l       .debug_str     00000000 
000002a1 l       .debug_str     00000000 
00005599 l       .debug_str     00000000 
00000f39 l       .debug_str     00000000 
0000558e l       .debug_str     00000000 
000000b5 l       .debug_str     00000000 
000056b5 l       .debug_str     00000000 
000055ad l       .debug_str     00000000 
000056c3 l       .debug_str     00000000 
0000557e l       .debug_str     00000000 
000056d4 l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
000055bd l       .debug_str     00000000 
00005378 l       .debug_str     00000000 
00000273 l       .debug_str     00000000 
0000026e l       .debug_str     00000000 
0000172c l       .debug_str     00000000 
00001722 l       .debug_str     00000000 
0000536c l       .debug_str     00000000 
00000710 l       .debug_ranges  00000000 
000056e2 l       .debug_str     00000000 
0000576c l       .debug_str     00000000 
000057a7 l       .debug_str     00000000 
000007f0 l       .debug_ranges  00000000 
0000564b l       .debug_str     00000000 
00000728 l       .debug_ranges  00000000 
00000750 l       .debug_ranges  00000000 
00000770 l       .debug_ranges  00000000 
00000788 l       .debug_ranges  00000000 
000007c0 l       .debug_ranges  00000000 
000007a8 l       .debug_ranges  00000000 
000007d8 l       .debug_ranges  00000000 
000055d7 l       .debug_str     00000000 
000055ed l       .debug_str     00000000 
00005bc2 l       .debug_str     00000000 
00000f72 l       .debug_str     00000000 
000055f6 l       .debug_str     00000000 
0000562c l       .debug_str     00000000 
00005619 l       .debug_str     00000000 
000055fe l       .debug_str     00000000 
00005f96 l       .debug_str     00000000 
0000560f l       .debug_str     00000000 
00005635 l       .debug_str     00000000 
00005647 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
0000106e l       .debug_str     00000000 
00001f6d l       .debug_str     00000000 
00001f79 l       .debug_str     00000000 
00005650 l       .debug_str     00000000 
0000565d l       .debug_str     00000000 
00005665 l       .debug_str     00000000 
00001d81 l       .debug_str     00000000 
00005669 l       .debug_str     00000000 
0000566d l       .debug_str     00000000 
00005985 l       .debug_str     00000000 
00005671 l       .debug_str     00000000 
00005756 l       .debug_str     00000000 
00005e4d l       .debug_str     00000000 
000057d6 l       .debug_str     00000000 
000057cd l       .debug_str     00000000 
000057e8 l       .debug_str     00000000 
00004d67 l       .debug_str     00000000 
000056f0 l       .debug_str     00000000 
000056fe l       .debug_str     00000000 
00005776 l       .debug_str     00000000 
00005680 l       .debug_str     00000000 
0000570c l       .debug_str     00000000 
00005687 l       .debug_str     00000000 
00005495 l       .debug_str     00000000 
00005719 l       .debug_str     00000000 
00005743 l       .debug_str     00000000 
00005793 l       .debug_str     00000000 
0000547a l       .debug_str     00000000 
00000830 l       .debug_ranges  00000000 
00005786 l       .debug_str     00000000 
000057a2 l       .debug_str     00000000 
000057b5 l       .debug_str     00000000 
00004f68 l       .debug_str     00000000 
00000810 l       .debug_ranges  00000000 
0000577f l       .debug_str     00000000 
000057c4 l       .debug_str     00000000 
00004f36 l       .debug_str     00000000 
00005699 l       .debug_str     00000000 
000056ad l       .debug_str     00000000 
00005726 l       .debug_str     00000000 
00005735 l       .debug_str     00000000 
00004776 l       .debug_str     00000000 
000007f4 l       .debug_frame   00000000 
d000a06e l       .text  00000000 
d000a09c l       .text  00000000 
d000a0b2 l       .text  00000000 
d000a540 l       .text  00000000 
d000a626 l       .text  00000000 
d000a6a4 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
d000a6a4 l       .text  00000000 
d000a6a4 l       .text  00000000 
d000a6a4 l       .text  00000000 
d000a6a4 l       .text  00000000 
d000a6a8 l       .text  00000000 
d000a6b0 l       .text  00000000 
d000a6b0 l       .text  00000000 
d000a6b4 l       .text  00000000 
d000a6b4 l       .text  00000000 
d000a6c0 l       .text  00000000 
d000a6c2 l       .text  00000000 
d000a6c2 l       .text  00000000 
d000a6c6 l       .text  00000000 
d000a6d2 l       .text  00000000 
d000a6d4 l       .text  00000000 
d000a6d8 l       .text  00000000 
d000a6da l       .text  00000000 
d000a6da l       .text  00000000 
d000a6de l       .text  00000000 
d000a6de l       .text  00000000 
d000a6e2 l       .text  00000000 
d000a6e2 l       .text  00000000 
d000a6e4 l       .text  00000000 
d000a6e4 l       .text  00000000 
d000a6e8 l       .text  00000000 
d000a6e8 l       .text  00000000 
d000a6ea l       .text  00000000 
d000a6ee l       .text  00000000 
d000a6ee l       .text  00000000 
d000a6f2 l       .text  00000000 
d000a6f6 l       .text  00000000 
d000a6fc l       .text  00000000 
d000a6fc l       .text  00000000 
d000a700 l       .text  00000000 
d000a702 l       .text  00000000 
d000a702 l       .text  00000000 
d000a708 l       .text  00000000 
d000a708 l       .text  00000000 
d000a70e l       .text  00000000 
d000a70e l       .text  00000000 
d000a710 l       .text  00000000 
d000a710 l       .text  00000000 
d000a716 l       .text  00000000 
d000a716 l       .text  00000000 
000068fe l       .debug_loc     00000000 
00006919 l       .debug_loc     00000000 
0000694a l       .debug_loc     00000000 
00006970 l       .debug_loc     00000000 
00006996 l       .debug_loc     00000000 
000069b1 l       .debug_loc     00000000 
000069d3 l       .debug_loc     00000000 
000069fa l       .debug_loc     00000000 
00006a21 l       .debug_loc     00000000 
00006a45 l       .debug_loc     00000000 
00006a76 l       .debug_loc     00000000 
00006a91 l       .debug_loc     00000000 
00006ac2 l       .debug_loc     00000000 
00006b1c l       .debug_loc     00000000 
00006b58 l       .debug_loc     00000000 
00006b7c l       .debug_loc     00000000 
00006ba1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000057f7 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
000008f8 l       .debug_ranges  00000000 
00005813 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00005823 l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
00005951 l       .debug_str     00000000 
00005830 l       .debug_str     00000000 
00005834 l       .debug_str     00000000 
0000583f l       .debug_str     00000000 
00005848 l       .debug_str     00000000 
00005859 l       .debug_str     00000000 
0000586b l       .debug_str     00000000 
00005875 l       .debug_str     00000000 
00005884 l       .debug_str     00000000 
00005896 l       .debug_str     00000000 
000058a9 l       .debug_str     00000000 
000058bd l       .debug_str     00000000 
000058c6 l       .debug_str     00000000 
000058d2 l       .debug_str     00000000 
000058e1 l       .debug_str     00000000 
000058eb l       .debug_str     00000000 
000058f8 l       .debug_str     00000000 
00005902 l       .debug_str     00000000 
00005913 l       .debug_str     00000000 
000000b5 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
00005571 l       .debug_str     00000000 
00005962 l       .debug_str     00000000 
00005970 l       .debug_str     00000000 
00005979 l       .debug_str     00000000 
00005a7c l       .debug_str     00000000 
00000c86 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
00005989 l       .debug_str     00000000 
0000595d l       .debug_str     00000000 
00005997 l       .debug_str     00000000 
00005669 l       .debug_str     00000000 
000008e0 l       .debug_ranges  00000000 
0000597e l       .debug_str     00000000 
0000350f l       .debug_str     00000000 
00001f6d l       .debug_str     00000000 
00001f79 l       .debug_str     00000000 
00001436 l       .debug_str     00000000 
00005671 l       .debug_str     00000000 
000059a1 l       .debug_str     00000000 
00005985 l       .debug_str     00000000 
00000f72 l       .debug_str     00000000 
000009e8 l       .debug_frame   00000000 
d000a716 l       .text  00000000 
00000000 l    df *ABS*  00000000 rom_epmp.c
d000a716 l       .text  00000000 
d000a716 l       .text  00000000 
d000a716 l       .text  00000000 
d000a718 l       .text  00000000 
d000a718 l       .text  00000000 
d000a71e l       .text  00000000 
d000a71e l       .text  00000000 
d000a71e l       .text  00000000 
d000a720 l       .text  00000000 
d000a720 l       .text  00000000 
d000a728 l       .text  00000000 
d000a728 l       .text  00000000 
d000a72c l       .text  00000000 
d000a72c l       .text  00000000 
d000a730 l       .text  00000000 
d000a734 l       .text  00000000 
d000a73c l       .text  00000000 
d000a740 l       .text  00000000 
d000a74e l       .text  00000000 
d000a756 l       .text  00000000 
d000a75a l       .text  00000000 
d000a768 l       .text  00000000 
d000a770 l       .text  00000000 
d000a77e l       .text  00000000 
d000a786 l       .text  00000000 
d000a78a l       .text  00000000 
d000a796 l       .text  00000000 
d000a798 l       .text  00000000 
d000a79e l       .text  00000000 
d000a7a6 l       .text  00000000 
d000a7aa l       .text  00000000 
d000a7b6 l       .text  00000000 
d000a7b8 l       .text  00000000 
d000a7bc l       .text  00000000 
d000a7c4 l       .text  00000000 
d000a7ce l       .text  00000000 
d000a7ce l       .text  00000000 
d000a7d6 l       .text  00000000 
d000a7d8 l       .text  00000000 
d000a7da l       .text  00000000 
d000a7e2 l       .text  00000000 
d000a7e4 l       .text  00000000 
d000a7e6 l       .text  00000000 
d000a7e6 l       .text  00000000 
d000a7e8 l       .text  00000000 
d000a7ee l       .text  00000000 
d000a7ee l       .text  00000000 
d000a7f8 l       .text  00000000 
d000a7f8 l       .text  00000000 
d000a7fa l       .text  00000000 
d000a802 l       .text  00000000 
d000a804 l       .text  00000000 
d000a804 l       .text  00000000 
d000a80c l       .text  00000000 
d000a80c l       .text  00000000 
d000a812 l       .text  00000000 
d000a812 l       .text  00000000 
d000a818 l       .text  00000000 
d000a818 l       .text  00000000 
d000a81e l       .text  00000000 
d000a81e l       .text  00000000 
d000a824 l       .text  00000000 
d000a824 l       .text  00000000 
d000a828 l       .text  00000000 
d000a828 l       .text  00000000 
d000a82c l       .text  00000000 
d000a830 l       .text  00000000 
d000a830 l       .text  00000000 
d000a832 l       .text  00000000 
d000a832 l       .text  00000000 
d000a836 l       .text  00000000 
d000a836 l       .text  00000000 
d000a83e l       .text  00000000 
d000a840 l       .text  00000000 
d000a848 l       .text  00000000 
d000a848 l       .text  00000000 
d000a84e l       .text  00000000 
d000a84e l       .text  00000000 
d000a850 l       .text  00000000 
d000a850 l       .text  00000000 
d000a852 l       .text  00000000 
d000a852 l       .text  00000000 
d000a856 l       .text  00000000 
d000a860 l       .text  00000000 
d000a860 l       .text  00000000 
d000a868 l       .text  00000000 
d000a868 l       .text  00000000 
d000a868 l       .text  00000000 
d000a868 l       .text  00000000 
d000a868 l       .text  00000000 
d000a86c l       .text  00000000 
d000a876 l       .text  00000000 
d000a87a l       .text  00000000 
d000a87a l       .text  00000000 
d000a87c l       .text  00000000 
d000a87c l       .text  00000000 
d000a884 l       .text  00000000 
d000a884 l       .text  00000000 
d000a888 l       .text  00000000 
d000a888 l       .text  00000000 
d000a88c l       .text  00000000 
d000a890 l       .text  00000000 
d000a898 l       .text  00000000 
d000a89c l       .text  00000000 
d000a8aa l       .text  00000000 
d000a8b2 l       .text  00000000 
d000a8b6 l       .text  00000000 
d000a8c4 l       .text  00000000 
d000a8cc l       .text  00000000 
d000a8da l       .text  00000000 
d000a8e2 l       .text  00000000 
d000a8e6 l       .text  00000000 
d000a8f2 l       .text  00000000 
d000a8f4 l       .text  00000000 
d000a8f8 l       .text  00000000 
d000a8fa l       .text  00000000 
d000a902 l       .text  00000000 
d000a906 l       .text  00000000 
d000a912 l       .text  00000000 
d000a914 l       .text  00000000 
d000a918 l       .text  00000000 
d000a918 l       .text  00000000 
d000a91c l       .text  00000000 
d000a91e l       .text  00000000 
d000a91e l       .text  00000000 
d000a926 l       .text  00000000 
d000a926 l       .text  00000000 
00006bc3 l       .debug_loc     00000000 
00006bf4 l       .debug_loc     00000000 
00006c1a l       .debug_loc     00000000 
00006c76 l       .debug_loc     00000000 
00006cd2 l       .debug_loc     00000000 
00006d20 l       .debug_loc     00000000 
00006d58 l       .debug_loc     00000000 
00006db4 l       .debug_loc     00000000 
00006de0 l       .debug_loc     00000000 
00006e0c l       .debug_loc     00000000 
00006e30 l       .debug_loc     00000000 
00006e66 l       .debug_loc     00000000 
00006e8a l       .debug_loc     00000000 
00006eae l       .debug_loc     00000000 
00006ee4 l       .debug_loc     00000000 
00006f08 l       .debug_loc     00000000 
00006f48 l       .debug_loc     00000000 
00006f6c l       .debug_loc     00000000 
00006f8a l       .debug_loc     00000000 
00006fa6 l       .debug_loc     00000000 
00006fca l       .debug_loc     00000000 
00006fee l       .debug_loc     00000000 
00007017 l       .debug_loc     00000000 
0000703b l       .debug_loc     00000000 
00007058 l       .debug_loc     00000000 
0000708e l       .debug_loc     00000000 
000070b2 l       .debug_loc     00000000 
000070d6 l       .debug_loc     00000000 
000070f6 l       .debug_loc     00000000 
00007122 l       .debug_loc     00000000 
00007146 l       .debug_loc     00000000 
00007173 l       .debug_loc     00000000 
000071a0 l       .debug_loc     00000000 
000071bb l       .debug_loc     00000000 
000071df l       .debug_loc     00000000 
00007210 l       .debug_loc     00000000 
00007236 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000059a8 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000940 l       .debug_ranges  00000000 
0000011c l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000e7 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
00000100 l       .debug_str     00000000 
00000110 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00005a67 l       .debug_str     00000000 
000059d1 l       .debug_str     00000000 
000059e3 l       .debug_str     00000000 
000059fb l       .debug_str     00000000 
00005a13 l       .debug_str     00000000 
00005a2c l       .debug_str     00000000 
00005a47 l       .debug_str     00000000 
00005aa7 l       .debug_str     00000000 
00005a71 l       .debug_str     00000000 
00005a7e l       .debug_str     00000000 
00005a8b l       .debug_str     00000000 
00005a98 l       .debug_str     00000000 
00000cca l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00005ab1 l       .debug_str     00000000 
00005aca l       .debug_str     00000000 
000002a6 l       .debug_str     00000000 
00005a6c l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00005adc l       .debug_str     00000000 
00005ad0 l       .debug_str     00000000 
00001d81 l       .debug_str     00000000 
0000566d l       .debug_str     00000000 
0000106e l       .debug_str     00000000 
00005aea l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
00005af6 l       .debug_str     00000000 
00005631 l       .debug_str     00000000 
00000c86 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00005b11 l       .debug_str     00000000 
00000d68 l       .debug_str     00000000 
000000d1 l       .debug_str     00000000 
00000d38 l       .debug_str     00000000 
00005b5f l       .debug_str     00000000 
00005b66 l       .debug_str     00000000 
00000d32 l       .debug_str     00000000 
00000dea l       .debug_str     00000000 
00005b6b l       .debug_str     00000000 
00005b7c l       .debug_str     00000000 
00005b85 l       .debug_str     00000000 
00000910 l       .debug_ranges  00000000 
00000928 l       .debug_ranges  00000000 
00004776 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00005b2a l       .debug_str     00000000 
00005b91 l       .debug_str     00000000 
00005b45 l       .debug_str     00000000 
00000d22 l       .debug_str     00000000 
00005185 l       .debug_str     00000000 
0000517e l       .debug_str     00000000 
0000012c l       .debug_str     00000000 
00000a1c l       .debug_frame   00000000 
d000a868 l       .text  00000000 
d000a926 l       .text  00000000 
00000000 l    df *ABS*  00000000 rnd.c
d000a926 l       .text  00000000 
d000a926 l       .text  00000000 
d000a926 l       .text  00000000 
d000a928 l       .text  00000000 
d000a928 l       .text  00000000 
d000a92a l       .text  00000000 
d000a930 l       .text  00000000 
d000a930 l       .text  00000000 
d000a934 l       .text  00000000 
d000a938 l       .text  00000000 
d000a93c l       .text  00000000 
d000a93c l       .text  00000000 
d000a93e l       .text  00000000 
d000a93e l       .text  00000000 
d000a940 l       .text  00000000 
d000a944 l       .text  00000000 
d000a944 l       .text  00000000 
d000a948 l       .text  00000000 
d000a948 l       .text  00000000 
d000a94a l       .text  00000000 
d000a94a l       .text  00000000 
d000a94c l       .text  00000000 
d000a94c l       .text  00000000 
d000a952 l       .text  00000000 
d000a952 l       .text  00000000 
00007260 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005b98 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
0000185c l       .debug_str     00000000 
00001837 l       .debug_str     00000000 
00001849 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00001321 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
000014fd l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
00000cf8 l       .debug_str     00000000 
00001568 l       .debug_str     00000000 
00000d03 l       .debug_str     00000000 
00000a7c l       .debug_frame   00000000 
d000a952 l       .text  00000000 
00000000 l    df *ABS*  00000000 lifecycle.c
d000a952 l       .text  00000000 
d000a952 l       .text  00000000 
d000a952 l       .text  00000000 
d000a954 l       .text  00000000 
d000a956 l       .text  00000000 
d000a95e l       .text  00000000 
d000a95e l       .text  00000000 
d000a960 l       .text  00000000 
d000a960 l       .text  00000000 
d000a966 l       .text  00000000 
d000a966 l       .text  00000000 
d000a968 l       .text  00000000 
d000a968 l       .text  00000000 
d000a96a l       .text  00000000 
d000a96a l       .text  00000000 
d000a972 l       .text  00000000 
d000a972 l       .text  00000000 
d000a976 l       .text  00000000 
d000a976 l       .text  00000000 
d000a97e l       .text  00000000 
d000a982 l       .text  00000000 
d000a98a l       .text  00000000 
d000a98e l       .text  00000000 
d000a996 l       .text  00000000 
d000a99a l       .text  00000000 
d000a9a8 l       .text  00000000 
d000a9b0 l       .text  00000000 
d000a9b4 l       .text  00000000 
d000a9bc l       .text  00000000 
d000a9c0 l       .text  00000000 
d000a9c8 l       .text  00000000 
d000a9cc l       .text  00000000 
d000a9da l       .text  00000000 
d000a9de l       .text  00000000 
d000a9e2 l       .text  00000000 
d000a9ea l       .text  00000000 
d000a9ee l       .text  00000000 
d000a9fc l       .text  00000000 
d000aa00 l       .text  00000000 
d000aa04 l       .text  00000000 
d000aa0c l       .text  00000000 
d000aa10 l       .text  00000000 
d000aa20 l       .text  00000000 
d000aa20 l       .text  00000000 
d000aa26 l       .text  00000000 
d000aa26 l       .text  00000000 
d000aa34 l       .text  00000000 
d000aa42 l       .text  00000000 
d000aa4a l       .text  00000000 
d000aa58 l       .text  00000000 
d000aa60 l       .text  00000000 
d000aa70 l       .text  00000000 
d000aa70 l       .text  00000000 
d000aa76 l       .text  00000000 
d000aa7e l       .text  00000000 
d000aa82 l       .text  00000000 
d000aa90 l       .text  00000000 
d000aa98 l       .text  00000000 
d000aa9c l       .text  00000000 
d000aaac l       .text  00000000 
d000aaac l       .text  00000000 
d000aab2 l       .text  00000000 
d000aaba l       .text  00000000 
d000aabe l       .text  00000000 
d000aaca l       .text  00000000 
d000aace l       .text  00000000 
d000aad2 l       .text  00000000 
d000aad8 l       .text  00000000 
d000aad8 l       .text  00000000 
d000aae0 l       .text  00000000 
d000aae4 l       .text  00000000 
d000aaf4 l       .text  00000000 
d000aaf4 l       .text  00000000 
d000aafa l       .text  00000000 
d000aafa l       .text  00000000 
d000ab02 l       .text  00000000 
d000ab02 l       .text  00000000 
00007273 l       .debug_loc     00000000 
0000729a l       .debug_loc     00000000 
000072c0 l       .debug_loc     00000000 
00007312 l       .debug_loc     00000000 
00007339 l       .debug_loc     00000000 
00007354 l       .debug_loc     00000000 
0000737a l       .debug_loc     00000000 
000073ad l       .debug_loc     00000000 
000073d3 l       .debug_loc     00000000 
000073f8 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005bc4 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000968 l       .debug_ranges  00000000 
0000011c l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000e7 l       .debug_str     00000000 
000000f3 l       .debug_str     00000000 
00000100 l       .debug_str     00000000 
00000110 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00001321 l       .debug_str     00000000 
00005bf6 l       .debug_str     00000000 
00005c11 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00001436 l       .debug_str     00000000 
00000c9d l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
00000cb7 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00004bf6 l       .debug_str     00000000 
00000cca l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
00000d0e l       .debug_str     00000000 
0000152b l       .debug_str     00000000 
00001c74 l       .debug_str     00000000 
00005c29 l       .debug_str     00000000 
00005c60 l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
00005c41 l       .debug_str     00000000 
00005c9c l       .debug_str     00000000 
00001781 l       .debug_str     00000000 
0000012c l       .debug_str     00000000 
00005c6a l       .debug_str     00000000 
00005c56 l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
00005ca3 l       .debug_str     00000000 
00005c92 l       .debug_str     00000000 
00005c80 l       .debug_str     00000000 
00005c89 l       .debug_str     00000000 
00004fe6 l       .debug_str     00000000 
00004fd7 l       .debug_str     00000000 
00000aa8 l       .debug_frame   00000000 
d000ab02 l       .text  00000000 
00000000 l    df *ABS*  00000000 otp.c
d000ab02 l       .text  00000000 
d000ab02 l       .text  00000000 
d000ab02 l       .text  00000000 
d000ab06 l       .text  00000000 
d000ab08 l       .text  00000000 
d000ab08 l       .text  00000000 
d000ab0a l       .text  00000000 
d000ab0a l       .text  00000000 
d000ab0a l       .text  00000000 
00007413 l       .debug_loc     00000000 
0000742e l       .debug_loc     00000000 
00007449 l       .debug_loc     00000000 
00007467 l       .debug_loc     00000000 
000074a3 l       .debug_loc     00000000 
000074be l       .debug_loc     00000000 
000074e4 l       .debug_loc     00000000 
0000750a l       .debug_loc     00000000 
00007528 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005cb6 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000990 l       .debug_ranges  00000000 
00001321 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00000d03 l       .debug_str     00000000 
00005014 l       .debug_str     00000000 
00001c74 l       .debug_str     00000000 
00005ce2 l       .debug_str     00000000 
00005d12 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00005ced l       .debug_str     00000000 
000010a6 l       .debug_str     00000000 
00005d1d l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
00005cf6 l       .debug_str     00000000 
00001c84 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
0000016b l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
00000b24 l       .debug_frame   00000000 
d000ab0a l       .text  00000000 
00000000 l    df *ABS*  00000000 sec_mmio.c
d000ab0a l       .text  00000000 
d000ab0a l       .text  00000000 
d000ab0a l       .text  00000000 
d000ab0a l       .text  00000000 
d000ab0c l       .text  00000000 
d000ab0c l       .text  00000000 
d000ab0e l       .text  00000000 
d000ab0e l       .text  00000000 
d000ab10 l       .text  00000000 
d000ab10 l       .text  00000000 
d000ab12 l       .text  00000000 
d000ab12 l       .text  00000000 
d000ab12 l       .text  00000000 
d000ab12 l       .text  00000000 
d000ab1a l       .text  00000000 
d000ab1c l       .text  00000000 
d000ab1c l       .text  00000000 
d000ab1c l       .text  00000000 
d000ab1c l       .text  00000000 
d000ab1e l       .text  00000000 
d000ab1e l       .text  00000000 
d000ab1e l       .text  00000000 
d000ab1e l       .text  00000000 
d000ab20 l       .text  00000000 
d000ab20 l       .text  00000000 
d000ab20 l       .text  00000000 
d000ab20 l       .text  00000000 
d000ab28 l       .text  00000000 
d000ab28 l       .text  00000000 
d000ab30 l       .text  00000000 
d000ab32 l       .text  00000000 
d000ab32 l       .text  00000000 
d000ab34 l       .text  00000000 
d000ab36 l       .text  00000000 
d000ab38 l       .text  00000000 
d000ab38 l       .text  00000000 
d000ab40 l       .text  00000000 
d000ab42 l       .text  00000000 
d000ab42 l       .text  00000000 
d000ab44 l       .text  00000000 
d000ab44 l       .text  00000000 
d000ab46 l       .text  00000000 
d000ab48 l       .text  00000000 
d000ab56 l       .text  00000000 
d000ab56 l       .text  00000000 
d000ab62 l       .text  00000000 
d000ab64 l       .text  00000000 
d000ab64 l       .text  00000000 
d000ab64 l       .text  00000000 
d000ab64 l       .text  00000000 
d000ab64 l       .text  00000000 
d000ab66 l       .text  00000000 
d000ab70 l       .text  00000000 
d000ab72 l       .text  00000000 
d000ab72 l       .text  00000000 
d000ab76 l       .text  00000000 
d000ab76 l       .text  00000000 
d000ab7e l       .text  00000000 
d000ab7e l       .text  00000000 
d000ab82 l       .text  00000000 
d000ab82 l       .text  00000000 
d000ab82 l       .text  00000000 
d000ab82 l       .text  00000000 
d000abaa l     F .text  0000006e upsert_register
d000ab88 l       .text  00000000 
d000ab88 l       .text  00000000 
d000ab8a l       .text  00000000 
d000ab8a l       .text  00000000 
d000ab9a l       .text  00000000 
d000aba0 l       .text  00000000 
d000aba2 l       .text  00000000 
d000aba4 l       .text  00000000 
d000abaa l       .text  00000000 
d000abaa l       .text  00000000 
d000abaa l       .text  00000000 
d000abaa l       .text  00000000 
d000abaa l       .text  00000000 
d000abaa l       .text  00000000 
d000abb6 l       .text  00000000 
d000abb6 l       .text  00000000 
d000abb8 l       .text  00000000 
d000abb8 l       .text  00000000 
d000abba l       .text  00000000 
d000abba l       .text  00000000 
d000abbe l       .text  00000000 
d000abbe l       .text  00000000 
d000abc2 l       .text  00000000 
d000abc2 l       .text  00000000 
d000abca l       .text  00000000 
d000abce l       .text  00000000 
d000abd0 l       .text  00000000 
d000abd0 l       .text  00000000 
d000abd2 l       .text  00000000 
d000abd2 l       .text  00000000 
d000abda l       .text  00000000 
d000abda l       .text  00000000 
d000abdc l       .text  00000000 
d000abdc l       .text  00000000 
d000abde l       .text  00000000 
d000abde l       .text  00000000 
d000abe2 l       .text  00000000 
d000abe2 l       .text  00000000 
d000abe4 l       .text  00000000 
d000abe4 l       .text  00000000 
d000abe8 l       .text  00000000 
d000abe8 l       .text  00000000 
d000abec l       .text  00000000 
d000abec l       .text  00000000 
d000abf6 l       .text  00000000 
d000abfa l       .text  00000000 
d000abfc l       .text  00000000 
d000ac00 l       .text  00000000 
d000ac06 l       .text  00000000 
d000ac0a l       .text  00000000 
d000ac16 l       .text  00000000 
d000ac18 l       .text  00000000 
d000ac18 l       .text  00000000 
d000ac18 l       .text  00000000 
d000ac18 l       .text  00000000 
d000ac18 l       .text  00000000 
d000ac1a l       .text  00000000 
d000ac22 l       .text  00000000 
d000ac24 l       .text  00000000 
d000ac24 l       .text  00000000 
d000ac2e l       .text  00000000 
d000ac2e l       .text  00000000 
d000ac32 l       .text  00000000 
d000ac32 l       .text  00000000 
d000ac32 l       .text  00000000 
d000ac32 l       .text  00000000 
d000ac36 l       .text  00000000 
d000ac38 l       .text  00000000 
d000ac38 l       .text  00000000 
d000ac3a l       .text  00000000 
d000ac3a l       .text  00000000 
d000ac4a l       .text  00000000 
d000ac4a l       .text  00000000 
d000ac52 l       .text  00000000 
d000ac58 l       .text  00000000 
d000ac64 l       .text  00000000 
d000ac64 l       .text  00000000 
d000ac64 l       .text  00000000 
d000ac64 l       .text  00000000 
d000ac64 l       .text  00000000 
d000ac64 l       .text  00000000 
d000ac70 l       .text  00000000 
d000ac70 l       .text  00000000 
d000ac72 l       .text  00000000 
d000ac72 l       .text  00000000 
d000ac74 l       .text  00000000 
d000ac74 l       .text  00000000 
d000ac78 l       .text  00000000 
d000ac78 l       .text  00000000 
d000ac7a l       .text  00000000 
d000ac7e l       .text  00000000 
d000ac7e l       .text  00000000 
d000ac82 l       .text  00000000 
d000ac86 l       .text  00000000 
d000ac86 l       .text  00000000 
d000ac94 l       .text  00000000 
d000ac94 l       .text  00000000 
d000ac96 l       .text  00000000 
d000ac96 l       .text  00000000 
d000ac9e l       .text  00000000 
d000ac9e l       .text  00000000 
d000aca0 l       .text  00000000 
d000acac l       .text  00000000 
d000acb0 l       .text  00000000 
d000acb0 l       .text  00000000 
d000acb2 l       .text  00000000 
d000acb4 l       .text  00000000 
d000acb4 l       .text  00000000 
d000acb6 l       .text  00000000 
d000acb6 l       .text  00000000 
d000acb8 l       .text  00000000 
d000acb8 l       .text  00000000 
d000acbc l       .text  00000000 
d000acbc l       .text  00000000 
d000acc8 l       .text  00000000 
d000acd2 l       .text  00000000 
d000acd4 l       .text  00000000 
d000acd4 l       .text  00000000 
d000acd4 l       .text  00000000 
d000acd4 l       .text  00000000 
d000acd4 l       .text  00000000 
d000acdc l       .text  00000000 
d000acdc l       .text  00000000 
d000acde l       .text  00000000 
d000acde l       .text  00000000 
d000ace6 l       .text  00000000 
d000ace8 l       .text  00000000 
d000acea l       .text  00000000 
d000acec l       .text  00000000 
d000acec l       .text  00000000 
d000acee l       .text  00000000 
d000acfa l       .text  00000000 
d000acfc l       .text  00000000 
d000acfc l       .text  00000000 
d000acfe l       .text  00000000 
d000ad00 l       .text  00000000 
d000ad00 l       .text  00000000 
d000ad00 l       .text  00000000 
d000ad00 l       .text  00000000 
d000ad18 l       .text  00000000 
d000ad1e l       .text  00000000 
d000ad20 l       .text  00000000 
d000ad20 l       .text  00000000 
00007544 l       .debug_loc     00000000 
0000756b l       .debug_loc     00000000 
00007592 l       .debug_loc     00000000 
000075b9 l       .debug_loc     00000000 
000075f4 l       .debug_loc     00000000 
00007623 l       .debug_loc     00000000 
0000763e l       .debug_loc     00000000 
00007664 l       .debug_loc     00000000 
0000767f l       .debug_loc     00000000 
0000769a l       .debug_loc     00000000 
000076b5 l       .debug_loc     00000000 
000076f2 l       .debug_loc     00000000 
00007719 l       .debug_loc     00000000 
00007734 l       .debug_loc     00000000 
0000775a l       .debug_loc     00000000 
00007780 l       .debug_loc     00000000 
000077a6 l       .debug_loc     00000000 
000077c1 l       .debug_loc     00000000 
000077dc l       .debug_loc     00000000 
00007802 l       .debug_loc     00000000 
0000781d l       .debug_loc     00000000 
00007838 l       .debug_loc     00000000 
00007853 l       .debug_loc     00000000 
00007890 l       .debug_loc     00000000 
000078b7 l       .debug_loc     00000000 
000078d2 l       .debug_loc     00000000 
000078ed l       .debug_loc     00000000 
00007908 l       .debug_loc     00000000 
00007923 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005d27 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000a78 l       .debug_ranges  00000000 
000051e0 l       .debug_str     00000000 
00005213 l       .debug_str     00000000 
000051ed l       .debug_str     00000000 
00005201 l       .debug_str     00000000 
000051f8 l       .debug_str     00000000 
00005df3 l       .debug_str     00000000 
00000e2b l       .debug_str     00000000 
0000520d l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
00005d55 l       .debug_str     00000000 
00005d65 l       .debug_str     00000000 
00005d75 l       .debug_str     00000000 
00000e1c l       .debug_str     00000000 
00005d84 l       .debug_str     00000000 
00005dd4 l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
00005dd8 l       .debug_str     00000000 
00000a48 l       .debug_ranges  00000000 
00000a60 l       .debug_ranges  00000000 
00005ddf l       .debug_str     00000000 
00005d8a l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
0000016b l       .debug_str     00000000 
00000cca l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
00000cd4 l       .debug_str     00000000 
000017f3 l       .debug_str     00000000 
000009b8 l       .debug_ranges  00000000 
000009d0 l       .debug_ranges  00000000 
000009e8 l       .debug_ranges  00000000 
00000a00 l       .debug_ranges  00000000 
00005d9e l       .debug_str     00000000 
00000a18 l       .debug_ranges  00000000 
000014fd l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
00000c42 l       .debug_str     00000000 
00001c74 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00005dc7 l       .debug_str     00000000 
00005db7 l       .debug_str     00000000 
00000a30 l       .debug_ranges  00000000 
0000156f l       .debug_str     00000000 
00001c84 l       .debug_str     00000000 
00001cb6 l       .debug_str     00000000 
00000e32 l       .debug_str     00000000 
00005dea l       .debug_str     00000000 
0000098c l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
00000b90 l       .debug_frame   00000000 
d000ab64 l       .text  00000000 
d000abaa l       .text  00000000 
d000ac18 l       .text  00000000 
d000ac64 l       .text  00000000 
d000acd4 l       .text  00000000 
d000ad20 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
d000ad20 l       .text  00000000 
d000ad20 l       .text  00000000 
d000ad20 l       .text  00000000 
d000ad20 l       .text  00000000 
d000ad28 l       .text  00000000 
d000ad2c l       .text  00000000 
d000ad2c l       .text  00000000 
d000ad30 l       .text  00000000 
d000ad30 l       .text  00000000 
d000ad34 l       .text  00000000 
d000ad34 l       .text  00000000 
d000ad40 l       .text  00000000 
d000ad42 l       .text  00000000 
d000ad42 l       .text  00000000 
d000ad48 l       .text  00000000 
d000ad48 l       .text  00000000 
d000ad4c l       .text  00000000 
d000ad4e l       .text  00000000 
d000ad52 l       .text  00000000 
d000ad52 l       .text  00000000 
d000ad54 l       .text  00000000 
d000ad54 l       .text  00000000 
d000ad56 l       .text  00000000 
d000ad56 l       .text  00000000 
d000ad5e l       .text  00000000 
d000ad62 l       .text  00000000 
d000ad64 l       .text  00000000 
d000ad68 l       .text  00000000 
d000ad6c l       .text  00000000 
d000ad6c l       .text  00000000 
d000ad70 l       .text  00000000 
d000ad70 l       .text  00000000 
d000ad74 l       .text  00000000 
d000ad76 l       .text  00000000 
d000ad76 l       .text  00000000 
d000ad7a l       .text  00000000 
d000ad7a l       .text  00000000 
d000ad7c l       .text  00000000 
d000ad7c l       .text  00000000 
d000ad7e l       .text  00000000 
d000ad7e l       .text  00000000 
d000ad82 l       .text  00000000 
d000ad82 l       .text  00000000 
d000ad86 l       .text  00000000 
d000ad88 l       .text  00000000 
d000ad8e l       .text  00000000 
d000ad8e l       .text  00000000 
d000ad92 l       .text  00000000 
d000ad96 l       .text  00000000 
d000ad9e l       .text  00000000 
d000ad9e l       .text  00000000 
d000ada0 l       .text  00000000 
d000ada0 l       .text  00000000 
d000ada2 l       .text  00000000 
d000ada2 l       .text  00000000 
d000ada8 l       .text  00000000 
d000ada8 l       .text  00000000 
d000ada8 l       .text  00000000 
d000ada8 l       .text  00000000 
d000ada8 l       .text  00000000 
d000adac l       .text  00000000 
d000adac l       .text  00000000 
d000adb0 l       .text  00000000 
d000adb0 l       .text  00000000 
d000adb8 l       .text  00000000 
d000adb8 l       .text  00000000 
d000adbc l       .text  00000000 
d000adc0 l       .text  00000000 
d000adc0 l       .text  00000000 
d000adc2 l       .text  00000000 
d000adc2 l       .text  00000000 
d000adc6 l       .text  00000000 
d000adc6 l       .text  00000000 
d000adca l       .text  00000000 
d000adca l       .text  00000000 
d000adcc l       .text  00000000 
d000adce l       .text  00000000 
d000add0 l       .text  00000000 
d000add0 l       .text  00000000 
d000add4 l       .text  00000000 
d000add8 l       .text  00000000 
d000ade8 l       .text  00000000 
d000ade8 l       .text  00000000 
d000adec l       .text  00000000 
d000adec l       .text  00000000 
d000adee l       .text  00000000 
d000adee l       .text  00000000 
d000adf0 l       .text  00000000 
d000adf0 l       .text  00000000 
d000adf4 l       .text  00000000 
d000adf4 l       .text  00000000 
d000adfa l       .text  00000000 
d000adfe l       .text  00000000 
d000adfe l       .text  00000000 
d000ae02 l       .text  00000000 
d000ae06 l       .text  00000000 
d000ae08 l       .text  00000000 
d000ae0a l       .text  00000000 
d000ae0a l       .text  00000000 
d000ae0a l       .text  00000000 
d000ae0a l       .text  00000000 
d000ae0a l       .text  00000000 
d000ae0e l       .text  00000000 
d000ae0e l       .text  00000000 
d000ae12 l       .text  00000000 
d000ae12 l       .text  00000000 
d000ae1a l       .text  00000000 
d000ae1e l       .text  00000000 
d000ae22 l       .text  00000000 
d000ae24 l       .text  00000000 
d000ae26 l       .text  00000000 
d000ae26 l       .text  00000000 
d000ae2a l       .text  00000000 
d000ae2e l       .text  00000000 
d000ae2e l       .text  00000000 
d000ae30 l       .text  00000000 
d000ae32 l       .text  00000000 
d000ae34 l       .text  00000000 
d000ae3a l       .text  00000000 
d000ae3a l       .text  00000000 
d000ae3c l       .text  00000000 
d000ae40 l       .text  00000000 
d000ae4c l       .text  00000000 
d000ae5a l       .text  00000000 
d000ae5a l       .text  00000000 
d000ae5e l       .text  00000000 
d000ae60 l       .text  00000000 
d000ae60 l       .text  00000000 
d000ae64 l       .text  00000000 
d000ae68 l       .text  00000000 
d000ae68 l       .text  00000000 
d000ae6c l       .text  00000000 
d000ae70 l       .text  00000000 
d000ae74 l       .text  00000000 
d000ae78 l       .text  00000000 
d000ae7c l       .text  00000000 
d000ae7c l       .text  00000000 
d000ae80 l       .text  00000000 
d000ae84 l       .text  00000000 
d000ae86 l       .text  00000000 
d000ae86 l       .text  00000000 
d000ae88 l       .text  00000000 
d000ae8c l       .text  00000000 
d000ae8c l       .text  00000000 
d000ae94 l       .text  00000000 
d000ae98 l       .text  00000000 
d000ae98 l       .text  00000000 
d000ae9c l       .text  00000000 
d000aea0 l       .text  00000000 
d000aea4 l       .text  00000000 
d000aea6 l       .text  00000000 
d000aeaa l       .text  00000000 
d000aeaa l       .text  00000000 
d000aeae l       .text  00000000 
d000aeae l       .text  00000000 
d000aeb2 l       .text  00000000 
d000aeb4 l       .text  00000000 
d000aeb4 l       .text  00000000 
d000aeb8 l       .text  00000000 
d000aeb8 l       .text  00000000 
d000aeb8 l       .text  00000000 
d000aeb8 l       .text  00000000 
d000aeb8 l       .text  00000000 
d000aebc l       .text  00000000 
d000aebc l       .text  00000000 
d000aec0 l       .text  00000000 
d000aec0 l       .text  00000000 
d000aec8 l       .text  00000000 
d000aec8 l       .text  00000000 
d000aecc l       .text  00000000 
d000aece l       .text  00000000 
d000aed2 l       .text  00000000 
d000aed2 l       .text  00000000 
d000aed4 l       .text  00000000 
d000aed4 l       .text  00000000 
d000aed8 l       .text  00000000 
d000aed8 l       .text  00000000 
d000aede l       .text  00000000 
d000aede l       .text  00000000 
d000aee2 l       .text  00000000 
d000aee2 l       .text  00000000 
d000aeea l       .text  00000000 
d000aeee l       .text  00000000 
d000aeee l       .text  00000000 
d000aef0 l       .text  00000000 
d000aef4 l       .text  00000000 
d000aef4 l       .text  00000000 
d000aef6 l       .text  00000000 
d000aef8 l       .text  00000000 
d000aef8 l       .text  00000000 
d000af00 l       .text  00000000 
d000af00 l       .text  00000000 
d000af04 l       .text  00000000 
d000af04 l       .text  00000000 
d000af0e l       .text  00000000 
d000af12 l       .text  00000000 
d000af12 l       .text  00000000 
d000af16 l       .text  00000000 
d000af16 l       .text  00000000 
d000af1a l       .text  00000000 
d000af1e l       .text  00000000 
d000af1e l       .text  00000000 
d000af22 l       .text  00000000 
d000af26 l       .text  00000000 
d000af26 l       .text  00000000 
d000af28 l       .text  00000000 
d000af2c l       .text  00000000 
d000af2c l       .text  00000000 
d000af30 l       .text  00000000 
d000af34 l       .text  00000000 
d000af38 l       .text  00000000 
d000af3c l       .text  00000000 
d000af40 l       .text  00000000 
d000af42 l       .text  00000000 
d000af42 l       .text  00000000 
d000af46 l       .text  00000000 
d000af46 l       .text  00000000 
d000af48 l       .text  00000000 
d000af4a l       .text  00000000 
d000af4a l       .text  00000000 
d000af52 l       .text  00000000 
d000af56 l       .text  00000000 
d000af56 l       .text  00000000 
d000af58 l       .text  00000000 
d000af5c l       .text  00000000 
d000af5c l       .text  00000000 
d000af5e l       .text  00000000 
d000af60 l       .text  00000000 
d000af60 l       .text  00000000 
d000af62 l       .text  00000000 
d000af62 l       .text  00000000 
d000af66 l       .text  00000000 
d000af66 l       .text  00000000 
d000af68 l       .text  00000000 
d000af68 l       .text  00000000 
d000af6c l       .text  00000000 
d000af6c l       .text  00000000 
d000af6e l       .text  00000000 
d000af6e l       .text  00000000 
d000af72 l       .text  00000000 
d000af72 l       .text  00000000 
d000af74 l       .text  00000000 
d000af74 l       .text  00000000 
d000af76 l       .text  00000000 
d000af76 l       .text  00000000 
d000af78 l       .text  00000000 
d000af78 l       .text  00000000 
00007949 l       .debug_loc     00000000 
0000796f l       .debug_loc     00000000 
00007995 l       .debug_loc     00000000 
000079bb l       .debug_loc     00000000 
000079e1 l       .debug_loc     00000000 
00007a00 l       .debug_loc     00000000 
00007a1f l       .debug_loc     00000000 
00007a45 l       .debug_loc     00000000 
00007a60 l       .debug_loc     00000000 
00007aa9 l       .debug_loc     00000000 
00007acf l       .debug_loc     00000000 
00007af1 l       .debug_loc     00000000 
00007b0c l       .debug_loc     00000000 
00007b27 l       .debug_loc     00000000 
00007b42 l       .debug_loc     00000000 
00007b5d l       .debug_loc     00000000 
00007b78 l       .debug_loc     00000000 
00007b93 l       .debug_loc     00000000 
00007be3 l       .debug_loc     00000000 
00007bfe l       .debug_loc     00000000 
00007c19 l       .debug_loc     00000000 
00007c3b l       .debug_loc     00000000 
00007c56 l       .debug_loc     00000000 
00007c71 l       .debug_loc     00000000 
00007c8c l       .debug_loc     00000000 
00007ca7 l       .debug_loc     00000000 
00007cc2 l       .debug_loc     00000000 
00007ce1 l       .debug_loc     00000000 
00007d00 l       .debug_loc     00000000 
00007d26 l       .debug_loc     00000000 
00007d41 l       .debug_loc     00000000 
00007d8a l       .debug_loc     00000000 
00007db0 l       .debug_loc     00000000 
00007dcb l       .debug_loc     00000000 
00007de6 l       .debug_loc     00000000 
00007e01 l       .debug_loc     00000000 
00007e1c l       .debug_loc     00000000 
00007e37 l       .debug_loc     00000000 
00007e52 l       .debug_loc     00000000 
00007e6d l       .debug_loc     00000000 
00007e8c l       .debug_loc     00000000 
00007eab l       .debug_loc     00000000 
00007ec6 l       .debug_loc     00000000 
00007f0d l       .debug_loc     00000000 
00007f28 l       .debug_loc     00000000 
00007f43 l       .debug_loc     00000000 
00007f69 l       .debug_loc     00000000 
00007f84 l       .debug_loc     00000000 
00007f9f l       .debug_loc     00000000 
00007fba l       .debug_loc     00000000 
00007fd5 l       .debug_loc     00000000 
00007ff0 l       .debug_loc     00000000 
00008016 l       .debug_loc     00000000 
00008031 l       .debug_loc     00000000 
00008057 l       .debug_loc     00000000 
0000807d l       .debug_loc     00000000 
0000809a l       .debug_loc     00000000 
000080f5 l       .debug_loc     00000000 
00008110 l       .debug_loc     00000000 
00008136 l       .debug_loc     00000000 
0000815c l       .debug_loc     00000000 
00008177 l       .debug_loc     00000000 
0000819d l       .debug_loc     00000000 
000081fa l       .debug_loc     00000000 
00008215 l       .debug_loc     00000000 
00008230 l       .debug_loc     00000000 
0000828d l       .debug_loc     00000000 
000082aa l       .debug_loc     00000000 
000082c5 l       .debug_loc     00000000 
0000830c l       .debug_loc     00000000 
00008327 l       .debug_loc     00000000 
00008342 l       .debug_loc     00000000 
0000835d l       .debug_loc     00000000 
00008378 l       .debug_loc     00000000 
00008393 l       .debug_loc     00000000 
000083b9 l       .debug_loc     00000000 
000083d4 l       .debug_loc     00000000 
000083ef l       .debug_loc     00000000 
0000840a l       .debug_loc     00000000 
00008425 l       .debug_loc     00000000 
00008452 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005dff l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000b48 l       .debug_ranges  00000000 
00005e1b l       .debug_str     00000000 
00005e25 l       .debug_str     00000000 
00005e2f l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
000001d4 l       .debug_str     00000000 
000001e2 l       .debug_str     00000000 
0000106e l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00005e39 l       .debug_str     00000000 
00005ef4 l       .debug_str     00000000 
00005efe l       .debug_str     00000000 
00005631 l       .debug_str     00000000 
00005e53 l       .debug_str     00000000 
00005e5e l       .debug_str     00000000 
00005573 l       .debug_str     00000000 
00005571 l       .debug_str     00000000 
00005e6a l       .debug_str     00000000 
00005e7c l       .debug_str     00000000 
00005e8c l       .debug_str     00000000 
00005e41 l       .debug_str     00000000 
00005d1d l       .debug_str     00000000 
00000e5c l       .debug_str     00000000 
00000e64 l       .debug_str     00000000 
0000202b l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00001c95 l       .debug_str     00000000 
00005de4 l       .debug_str     00000000 
00005680 l       .debug_str     00000000 
00005ebe l       .debug_str     00000000 
00004ef5 l       .debug_str     00000000 
00005ec3 l       .debug_str     00000000 
00005ec9 l       .debug_str     00000000 
00005e80 l       .debug_str     00000000 
0000287f l       .debug_str     00000000 
00005e90 l       .debug_str     00000000 
00000ad8 l       .debug_ranges  00000000 
00004f68 l       .debug_str     00000000 
00000ac0 l       .debug_ranges  00000000 
00004776 l       .debug_str     00000000 
00005ece l       .debug_str     00000000 
00005ed5 l       .debug_str     00000000 
00000af0 l       .debug_ranges  00000000 
00005eaf l       .debug_str     00000000 
00005edd l       .debug_str     00000000 
00005ee1 l       .debug_str     00000000 
00005ee5 l       .debug_str     00000000 
00005eea l       .debug_str     00000000 
00005eef l       .debug_str     00000000 
00005ef9 l       .debug_str     00000000 
00005eb6 l       .debug_str     00000000 
0000566d l       .debug_str     00000000 
0000535d l       .debug_str     00000000 
00005f04 l       .debug_str     00000000 
00000b08 l       .debug_ranges  00000000 
00005f09 l       .debug_str     00000000 
00005e9c l       .debug_str     00000000 
00004f36 l       .debug_str     00000000 
00005364 l       .debug_str     00000000 
00000b20 l       .debug_ranges  00000000 
00004eba l       .debug_str     00000000 
0000528a l       .debug_str     00000000 
00004f4f l       .debug_str     00000000 
00004f57 l       .debug_str     00000000 
00004bc4 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
0000016b l       .debug_str     00000000 
00000c4c l       .debug_frame   00000000 
d000ada8 l       .text  00000000 
d000ae0a l       .text  00000000 
d000aeb8 l       .text  00000000 
d000af78 l       .text  00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
d000af78 l       .text  00000000 
d000af78 l       .text  00000000 
d000af78 l       .text  00000000 
d000af78 l       .text  00000000 
d000af7a l       .text  00000000 
d000af7a l       .text  00000000 
00008472 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00005f11 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00000ba8 l       .debug_ranges  00000000 
00005f3b l       .debug_str     00000000 
00005f9b l       .debug_str     00000000 
00005f8f l       .debug_str     00000000 
00005f47 l       .debug_str     00000000 
00005f54 l       .debug_str     00000000 
00005f68 l       .debug_str     00000000 
00005f79 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00005fa9 l       .debug_str     00000000 
00000182 l       .debug_str     00000000 
0000016b l       .debug_str     00000000 
00005fb9 l       .debug_str     00000000 
00005fd7 l       .debug_str     00000000 
00005fee l       .debug_str     00000000 
00005ffe l       .debug_str     00000000 
0000600e l       .debug_str     00000000 
0000601c l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
0000602a l       .debug_str     00000000 
0000603f l       .debug_str     00000000 
00006056 l       .debug_str     00000000 
0000106e l       .debug_str     00000000 
0000606f l       .debug_str     00000000 
0000608b l       .debug_str     00000000 
00000f72 l       .debug_str     00000000 
000052e5 l       .debug_str     00000000 
00005316 l       .debug_str     00000000 
00000e02 l       .debug_str     00000000 
00000d10 l       .debug_frame   00000000 
d000af7a l       .text  00000000 
00000000 l    df *ABS*  00000000 static_critical_boot_measurements.c
00000000 l       .debug_str     00000000 
0000509a l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
000050e1 l       .debug_str     00000000 
0000511f l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
00005108 l       .debug_str     00000000 
000050f3 l       .debug_str     00000000 
000010a6 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_epmp_state.c
00000000 l       .debug_str     00000000 
00005133 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
00005173 l       .debug_str     00000000 
00005195 l       .debug_str     00000000 
0000517e l       .debug_str     00000000 
00005185 l       .debug_str     00000000 
0000518d l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
000051a2 l       .debug_str     00000000 
00000098 l       .debug_str     00000000 
000051e0 l       .debug_str     00000000 
00005213 l       .debug_str     00000000 
000051ed l       .debug_str     00000000 
00005201 l       .debug_str     00000000 
000051f8 l       .debug_str     00000000 
00005df3 l       .debug_str     00000000 
00000e2b l       .debug_str     00000000 
0000520d l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
000000bd l       .debug_str     00000000 
d000ab64 g     F .text  00000046 sec_mmio_read32
d0009cae g     F .text  0000001c dif_spi_host_output_set_enabled
e0002474 g     O .bss   00000044 rstmgr_alert_info
e0002048 g     O .bss   00000004 lc_state
00080000 g       *ABS*  00000000 _rom_ext_virtual_size
d0008100 g     F .vectors       00000080 _rom_interrupt_vector_c
d000a926 g     F .text  0000002c rnd_uint32
e0002848 g       .bss   00000000 __global_pointer$
e0000000 g     O .static_critical       00000020 boot_measurements
d000aeb8 g     F .text  000000c0 memrchr
d00093ac g     F .text  00000046 flash_ctrl_data_default_cfg_set
d000b214 g       .shutdown      00000000 _text_end
34002000 g       *ABS*  00000000 _epmp_text_tor_lo
38007000 g       *ABS*  00000000 _epmp_stack_guard_na4
d0010000 g       .vectors       00000000 _chip_info_end
d000a868 g     F .text  000000be rom_epmp_config_debug_rom
d0008bb8 g     F .text  000002ea shutdown_init
d00090ee g     F .text  00000120 alert_class_configure
d000ad20 g     F .text  00000088 memcpy
d0008f70 g     F .text  000000c0 alert_configure
d0008380 g     F .crt   0000001e rom_interrupt_handler
00000000 g       *ABS*  00000000 __abi_shutdown$
e0002048 g       .bss   00000000 _bss_start
d0008180 g     F .crt   00000200 _rom_start_boot
d000acd4 g     F .text  0000004c sec_mmio_check_counters
00000000 g       *ABS*  00000000 __DYNAMIC
d0008380 g     F .crt   0000001e rom_exception_handler
d0008000 g       .vectors       00000000 _text_start
d000ac64 g     F .text  00000070 sec_mmio_check_values
d000a036 g     F .text  00000034 base_log_internal_dv
d0009f92 g     F .text  00000006 abort
e0000020 g     O .static_critical       00000054 epmp_state
d00089a4 g     F .text  00000156 spi_test
d000920e g     F .text  0000011e ast_check
d000ac18 g     F .text  0000004c sec_mmio_write32
d000932c g     F .text  00000080 flash_ctrl_init
d0009842 g     F .text  00000008 rstmgr_reason_clear
d0009a16 g     F .text  000000be dif_spi_host_fifo_write
e00024b8 g       .bss   00000000 _bss_end
d00097fe g     F .text  00000006 retention_sram_get
d000980e g     F .text  00000034 rstmgr_reason_get
e000205c g     O .bss   00000400 _rom_shadow_stack
d000ab02 g     F .text  00000008 otp_read32
e0001fc4 g     O .data  00000084 status_codes
00001fc4 g       *ABS*  00000000 _static_critical_size
d000b880 g     O .rodata        00000004 kAstCheckPollCpuCycles
d00083dc g     F .crt   0000003a crt_section_copy
d000984a g     F .text  0000002e uart_init
d000ab0a g     F .text  0000005a sec_mmio_init
d000ae0a g     F .text  000000ae memchr
d0009d02 g     F .text  000001ea dif_spi_host_transaction
d0008000 g       .vectors       00000000 _rom_boot_address
d0009ad4 g     F .text  00000158 dif_spi_host_fifo_read
d00093f2 g     F .text  00000046 flash_ctrl_info_cfg_set
d0009030 g     F .text  000000be alert_local_configure
d000b87c g     O .rodata        00000004 kUartTxFifoCpuCycles
00004000 g       *ABS*  00000000 _stack_size
d000a0b2 g     F .text  0000048e base_vfprintf
d000a09c g     F .text  00000016 base_vprintf
d0009a16  w    F .text  000000be spi_host_fifo_write_alias
e0000074 g     O .static_critical       00001f50 sec_mmio_ctx
d000ada8 g     F .text  00000062 memset
e0020000 g       .vectors       00000000 _stack_end
d000b878 g     O .rodata        00000004 kUartNCOValue
d000af78 g     F .text  00000002 device_fpga_version_print
e001c000 g       *ABS*  00000000 _stack_start
d0009804 g     F .text  0000000a retention_sram_init
d00083b8 g     F .crt   00000024 crt_section_clear
00000000 g       *ABS*  00000000 _dv_log_offset
d000ff80 g       *ABS*  00000000 _chip_info_start
d0009ad4  w    F .text  00000158 spi_host_fifo_read_alias
d0009974 g     F .text  00000094 watchdog_configure
e000245c g     O .bss   00000018 rom_counters
d0009c2c g     F .text  00000082 dif_spi_host_configure
d000b884 g     O .rodata        00000004 kDeviceTestStatusAddress
00000800 g       *ABS*  00000000 _epmp_reset_rx_size
d00083a0 g     F .crt   00000018 _asm_exception_handler
d0008000 g     F .vectors       00000084 _rom_interrupt_vector_asm
d000a716 g     F .text  00000152 rom_epmp_state_init
d000a06e g     F .text  0000002e base_printf
d0008800 g     F .text  000001a4 rom_main
d000b888 g     O .rodata        00000004 kDeviceLogBypassUartAddress
00000080 g       *ABS*  00000000 _chip_info_size
d0008ea2 g     F .text  000000ce rom_printf
d0008418 g     F .crt   0000008c rom_epmp_init
d000a6a4 g     F .text  00000072 status_extract
d0009a08 g     F .text  0000000e dif_spi_host_init
d000af7c g     F .shutdown      00000298 shutdown_finalize
d0008afa g     F .text  000000be init_spi_host
90000000 g       .vectors       00000000 _rom_ext_virtual_start_address
d0009894 g     F .text  000000e0 watchdog_init
d0009eec g     F .text  000000a6 test_status_set
d000979e g     F .text  00000060 pinmux_init
d000a952 g     F .text  000001b0 lifecycle_state_get
d0009f98 g     F .text  0000009e base_log_internal_core
d0009878 g     F .text  0000001c uart_putchar
d0008380 g     F .crt   0000001e rom_nmi_handler
34002c85 g       *ABS*  00000000 _epmp_text_tor_hi



Disassembly of section .vectors:

d0008000 <_rom_interrupt_vector_asm>:
_rom_interrupt_vector_asm():
d0008000:       3a00006f                j       d00083a0 <_asm_exception_handler>
d0008004:       39c0006f                j       d00083a0 <_asm_exception_handler>
d0008008:       3980006f                j       d00083a0 <_asm_exception_handler>
d000800c:       3940006f                j       d00083a0 <_asm_exception_handler>
d0008010:       3900006f                j       d00083a0 <_asm_exception_handler>
d0008014:       38c0006f                j       d00083a0 <_asm_exception_handler>
d0008018:       3880006f                j       d00083a0 <_asm_exception_handler>
d000801c:       3840006f                j       d00083a0 <_asm_exception_handler>
d0008020:       3800006f                j       d00083a0 <_asm_exception_handler>
d0008024:       37c0006f                j       d00083a0 <_asm_exception_handler>
d0008028:       3780006f                j       d00083a0 <_asm_exception_handler>
d000802c:       3740006f                j       d00083a0 <_asm_exception_handler>
d0008030:       3700006f                j       d00083a0 <_asm_exception_handler>
d0008034:       36c0006f                j       d00083a0 <_asm_exception_handler>
d0008038:       3680006f                j       d00083a0 <_asm_exception_handler>
d000803c:       3640006f                j       d00083a0 <_asm_exception_handler>
d0008040:       3600006f                j       d00083a0 <_asm_exception_handler>
d0008044:       35c0006f                j       d00083a0 <_asm_exception_handler>
d0008048:       3580006f                j       d00083a0 <_asm_exception_handler>
d000804c:       3540006f                j       d00083a0 <_asm_exception_handler>
d0008050:       3500006f                j       d00083a0 <_asm_exception_handler>
d0008054:       34c0006f                j       d00083a0 <_asm_exception_handler>
d0008058:       3480006f                j       d00083a0 <_asm_exception_handler>
d000805c:       3440006f                j       d00083a0 <_asm_exception_handler>
d0008060:       3400006f                j       d00083a0 <_asm_exception_handler>
d0008064:       33c0006f                j       d00083a0 <_asm_exception_handler>
d0008068:       3380006f                j       d00083a0 <_asm_exception_handler>
d000806c:       3340006f                j       d00083a0 <_asm_exception_handler>
d0008070:       3300006f                j       d00083a0 <_asm_exception_handler>
d0008074:       32c0006f                j       d00083a0 <_asm_exception_handler>
d0008078:       3280006f                j       d00083a0 <_asm_exception_handler>
d000807c:       3240006f                j       d00083a0 <_asm_exception_handler>
d0008080:       1000006f                j       d0008180 <_rom_start_boot>
d0008084:       c0001073                unimp
d0008088:       c0001073                unimp
d000808c:       c0001073                unimp
d0008090:       c0001073                unimp
d0008094:       c0001073                unimp
d0008098:       c0001073                unimp
d000809c:       c0001073                unimp
d00080a0:       c0001073                unimp
d00080a4:       c0001073                unimp
d00080a8:       c0001073                unimp
d00080ac:       c0001073                unimp
d00080b0:       c0001073                unimp
d00080b4:       c0001073                unimp
d00080b8:       c0001073                unimp
d00080bc:       c0001073                unimp
d00080c0:       c0001073                unimp
d00080c4:       c0001073                unimp
d00080c8:       c0001073                unimp
d00080cc:       c0001073                unimp
d00080d0:       c0001073                unimp
d00080d4:       c0001073                unimp
d00080d8:       c0001073                unimp
d00080dc:       c0001073                unimp
d00080e0:       c0001073                unimp
d00080e4:       c0001073                unimp
d00080e8:       c0001073                unimp
d00080ec:       c0001073                unimp
d00080f0:       c0001073                unimp
d00080f4:       c0001073                unimp
d00080f8:       c0001073                unimp
d00080fc:       c0001073                unimp

d0008100 <_rom_interrupt_vector_c>:
_rom_interrupt_vector_c():
d0008100:       2800006f                j       d0008380 <rom_exception_handler>
d0008104:       27c0006f                j       d0008380 <rom_exception_handler>
d0008108:       2780006f                j       d0008380 <rom_exception_handler>
d000810c:       2740006f                j       d0008380 <rom_exception_handler>
d0008110:       2700006f                j       d0008380 <rom_exception_handler>
d0008114:       26c0006f                j       d0008380 <rom_exception_handler>
d0008118:       2680006f                j       d0008380 <rom_exception_handler>
d000811c:       2640006f                j       d0008380 <rom_exception_handler>
d0008120:       2600006f                j       d0008380 <rom_exception_handler>
d0008124:       25c0006f                j       d0008380 <rom_exception_handler>
d0008128:       2580006f                j       d0008380 <rom_exception_handler>
d000812c:       2540006f                j       d0008380 <rom_exception_handler>
d0008130:       2500006f                j       d0008380 <rom_exception_handler>
d0008134:       24c0006f                j       d0008380 <rom_exception_handler>
d0008138:       2480006f                j       d0008380 <rom_exception_handler>
d000813c:       2440006f                j       d0008380 <rom_exception_handler>
d0008140:       2400006f                j       d0008380 <rom_exception_handler>
d0008144:       23c0006f                j       d0008380 <rom_exception_handler>
d0008148:       2380006f                j       d0008380 <rom_exception_handler>
d000814c:       2340006f                j       d0008380 <rom_exception_handler>
d0008150:       2300006f                j       d0008380 <rom_exception_handler>
d0008154:       22c0006f                j       d0008380 <rom_exception_handler>
d0008158:       2280006f                j       d0008380 <rom_exception_handler>
d000815c:       2240006f                j       d0008380 <rom_exception_handler>
d0008160:       2200006f                j       d0008380 <rom_exception_handler>
d0008164:       21c0006f                j       d0008380 <rom_exception_handler>
d0008168:       2180006f                j       d0008380 <rom_exception_handler>
d000816c:       2140006f                j       d0008380 <rom_exception_handler>
d0008170:       2100006f                j       d0008380 <rom_exception_handler>
d0008174:       20c0006f                j       d0008380 <rom_exception_handler>
d0008178:       2080006f                j       d0008380 <rom_exception_handler>
d000817c:       2040006f                j       d0008380 <rom_exception_handler>

Disassembly of section .crt:

d0008180 <_rom_start_boot>:
_rom_start_boot():
d0008180:       0fffa197                auipc   gp,0xfffa
d0008184:       6c818193                addi    gp,gp,1736 # e0002848 <__global_pointer$>

d0008188 <kRomStartBootMaybeHalt>:
d0008188:           c0131537            lui     a0,0xc0131
d000818c:           10852283            lw      t0,264(a0) # c0131108 <_stack_end+0xe0111108>
d0008190:           00029563            bnez    t0,d000819a <kRomStartBootExecEn>
d0008194:       /-> 10500073            wfi
d0008198:       \-- bff5                        j       d0008194 <kRomStartBootMaybeHalt+0xc>

d000819a <kRomStartBootExecEn>:
d000819a:       c11f02b7                lui     t0,0xc11f0
d000819e:       4309                    li      t1,2
d00081a0:       0462a623                sw      t1,76(t0) # c11f004c <_stack_end+0xe11d004c>
d00081a4:       c04002b7                lui     t0,0xc0400
d00081a8:       537d                    li      t1,-1
d00081aa:       0262a623                sw      t1,44(t0) # c040002c <_stack_end+0xe03e002c>
d00081ae:       4305                    li      t1,1
d00081b0:       0062ac23                sw      t1,24(t0)
d00081b4:       c04702b7                lui     t0,0xc0470
d00081b8:       00037337                lui     t1,0x37
d00081bc:       ee830313                addi    t1,t1,-280 # 36ee8 <WDOG_BARK_THOLD>
d00081c0:       0062ac23                sw      t1,24(t0) # c0470018 <_stack_end+0xe0450018>
d00081c4:       00031337                lui     t1,0x31
d00081c8:       d4030313                addi    t1,t1,-704 # 30d40 <WDOG_BITE_THOLD>

d00081cc <kRomStartStoreT1ToBiteThold>:
d00081cc:       0062ae23                sw      t1,28(t0)
d00081d0:       4305                    li      t1,1
d00081d2:       0062aa23                sw      t1,20(t0)

d00081d6 <kRomStartWatchdogEnabled>:
d00081d6:              72c5                     lui     t0,0xffff1
d00081d8:              88828293                 addi    t0,t0,-1912 # ffff0888 <_stack_end+0x1ffd0888>
d00081dc:              3042b073                 csrc    mie,t0
d00081e0:              c0131537                 lui     a0,0xc0131
d00081e4:              0dc52283                 lw      t0,220(a0) # c01310dc <_stack_end+0xe01110dc>
d00081e8:              4319                     li      t1,6
d00081ea:          /-- 02629563                 bne     t0,t1,d0008214 <kRomStartWatchdogEnabled+0x3e>
d00081ee:          |   c0480537                 lui     a0,0xc0480
d00081f2:          |   c04805b7                 lui     a1,0xc0480
d00081f6:          |   09c58593                 addi    a1,a1,156 # c048009c <_stack_end+0xe046009c>
d00081fa:          |   c0131637                 lui     a2,0xc0131
d00081fe:          |   04060613                 addi    a2,a2,64 # c0131040 <_stack_end+0xe0111040>
d0008202:          |   2ae9                     jal     d00083dc <crt_section_copy>
d0008204:          |   c0131537                 lui     a0,0xc0131
d0008208:          |   0fc52283                 lw      t0,252(a0) # c01310fc <_stack_end+0xe01110fc>
d000820c:          |   c0420537                 lui     a0,0xc0420
d0008210:          |   00552a23                 sw      t0,20(a0) # c0420014 <_stack_end+0xe0400014>
d0008214:          \-> c0131537                 lui     a0,0xc0131
d0008218:              11c52283                 lw      t0,284(a0) # c013111c <_stack_end+0xe011111c>
d000821c:              73900f93                 li      t6,1849
d0008220:       /----- 0bf29f63                 bne     t0,t6,d00082de <kRomStartWatchdogEnabled+0x108>
d0008224:       |      c01315b7                 lui     a1,0xc0131
d0008228:       |      11c5a303                 lw      t1,284(a1) # c013111c <_stack_end+0xe011111c>
d000822c:       |  /-- 01f30663                 beq     t1,t6,d0008238 <kRomStartWatchdogEnabled+0x62>
d0008230:       |  |   0000                     unimp
d0008232:       |  |   0000                     unimp
d0008234:       |  |   0000                     unimp
d0008236:       |  |   0000                     unimp
d0008238:       |  \-> c0460537                 lui     a0,0xc0460
d000823c:       |      40050513                 addi    a0,a0,1024 # c0460400 <_stack_end+0xe0440400>
d0008240:       |      42b1                     li      t0,12
d0008242:       |      04552c23                 sw      t0,88(a0)
d0008246:       |      4291                     li      t0,4
d0008248:       |      04552e23                 sw      t0,92(a0)
d000824c:       |      06552023                 sw      t0,96(a0)
d0008250:       |      c0460537                 lui     a0,0xc0460
d0008254:       |      0e850513                 addi    a0,a0,232 # c04600e8 <_stack_end+0xe04400e8>
d0008258:       |      42e1                     li      t0,24
d000825a:       |      04552c23                 sw      t0,88(a0)
d000825e:       |      42e5                     li      t0,25
d0008260:       |      04552e23                 sw      t0,92(a0)
d0008264:       |      42e9                     li      t0,26
d0008266:       |      06552023                 sw      t0,96(a0)
d000826a:       |      c0040537                 lui     a0,0xc0040
d000826e:       |      01052283                 lw      t0,16(a0) # c0040010 <_stack_end+0xe0020010>
d0008272:       |      01c00f37                 lui     t5,0x1c00
d0008276:       |      01e2f2b3                 and     t0,t0,t5
d000827a:       |      01800eb7                 lui     t4,0x1800
d000827e:       |      739e8e93                 addi    t4,t4,1849 # 1800739 <_rom_ext_virtual_size+0x1780739>
d0008282:       |      01d2c2b3                 xor     t0,t0,t4
d0008286:       +----- 05f29c63                 bne     t0,t6,d00082de <kRomStartWatchdogEnabled+0x108>
d000828a:       |      73900f93                 li      t6,1849
d000828e:       |      c00405b7                 lui     a1,0xc0040
d0008292:       |      0105a303                 lw      t1,16(a1) # c0040010 <_stack_end+0xe0020010>
d0008296:       |      01e37333                 and     t1,t1,t5
d000829a:       |      01d34333                 xor     t1,t1,t4
d000829e:       |  /-- 01f30663                 beq     t1,t6,d00082aa <kRomStartWatchdogEnabled+0xd4>
d00082a2:       |  |   0000                     unimp
d00082a4:       |  |   0000                     unimp
d00082a6:       |  |   0000                     unimp
d00082a8:       |  |   0000                     unimp
d00082aa:       |  \-> b0001073                 csrw    mcycle,zero
d00082ae:       |      c0470537                 lui     a0,0xc0470
d00082b2:       |      00052a23                 sw      zero,20(a0) # c0470014 <_stack_end+0xe0450014>
d00082b6:       |  /-> c0131537                 lui     a0,0xc0131
d00082ba:       |  |   12052283                 lw      t0,288(a0) # c0131120 <_stack_end+0xe0111120>
d00082be:       |  |   b0002373                 csrr    t1,mcycle
d00082c2:       |  \-- fe536ae3                 bltu    t1,t0,d00082b6 <kRomStartWatchdogEnabled+0xe0>
d00082c6:       |  /-> c0140537                 lui     a0,0xc0140
d00082ca:       |  |   00452283                 lw      t0,4(a0) # c0140004 <_stack_end+0xe0120004>
d00082ce:       |  |   0022f293                 andi    t0,t0,2
d00082d2:       |  \-- fe028ae3                 beqz    t0,d00082c6 <kRomStartWatchdogEnabled+0xf0>
d00082d6:       |      0000                     unimp
d00082d8:       |      0000                     unimp
d00082da:       |      0000                     unimp
d00082dc:       |      0000                     unimp
d00082de:       \----> c1160537                 lui     a0,0xc1160
d00082e2:              009092b7                 lui     t0,0x909
d00082e6:              09928293                 addi    t0,t0,153 # 909099 <_rom_ext_virtual_size+0x889099>
d00082ea:              02552223                 sw      t0,36(a0) # c1160024 <_stack_end+0xe1140024>
d00082ee:              4299                     li      t0,6
d00082f0:              02552023                 sw      t0,32(a0)
d00082f4:              c1150537                 lui     a0,0xc1150
d00082f8:              66600293                 li      t0,1638
d00082fc:              00552a23                 sw      t0,20(a0) # c1150014 <_stack_end+0xe1130014>
d0008300:              c1170537                 lui     a0,0xc1170
d0008304:              62a9                     lui     t0,0xa
d0008306:              96628293                 addi    t0,t0,-1690 # 9966 <_stack_size+0x5966>
d000830a:              00552a23                 sw      t0,20(a0) # c1170014 <_stack_end+0xe1150014>
d000830e:              c11c0537                 lui     a0,0xc11c0
d0008312:              458d                     li      a1,3
d0008314:              c94c                     sw      a1,20(a0)
d0008316:              4081                     li      ra,0
d0008318:              4101                     li      sp,0
d000831a:              4201                     li      tp,0
d000831c:              4281                     li      t0,0
d000831e:              4301                     li      t1,0
d0008320:              4381                     li      t2,0
d0008322:              4401                     li      s0,0
d0008324:              4481                     li      s1,0
d0008326:              4501                     li      a0,0
d0008328:              4581                     li      a1,0
d000832a:              4601                     li      a2,0
d000832c:              4681                     li      a3,0
d000832e:              4701                     li      a4,0
d0008330:              4781                     li      a5,0
d0008332:              4801                     li      a6,0
d0008334:              4881                     li      a7,0
d0008336:              4901                     li      s2,0
d0008338:              4981                     li      s3,0
d000833a:              4a01                     li      s4,0
d000833c:              4a81                     li      s5,0
d000833e:              4b01                     li      s6,0
d0008340:              4b81                     li      s7,0
d0008342:              4c01                     li      s8,0
d0008344:              4c81                     li      s9,0
d0008346:              4d01                     li      s10,0
d0008348:              4d81                     li      s11,0
d000834a:              4e01                     li      t3,0
d000834c:              4e81                     li      t4,0
d000834e:              4f01                     li      t5,0
d0008350:              4f81                     li      t6,0
d0008352:              20d9                     jal     d0008418 <rom_epmp_init>
d0008354:              0fffa517                 auipc   a0,0xfffa
d0008358:              cf450513                 addi    a0,a0,-780 # e0002048 <lc_state>
d000835c:              c7018593                 addi    a1,gp,-912 # e00024b8 <_bss_end>
d0008360:              28a1                     jal     d00083b8 <crt_section_clear>
d0008362:              10018117                 auipc   sp,0x10018
d0008366:              c8e10113                 addi    sp,sp,-882 # e001fff0 <_stack_start+0x3ff0>
d000836a:              0fffa917                 auipc   s2,0xfffa
d000836e:              cf290913                 addi    s2,s2,-782 # e000205c <_rom_shadow_stack>
d0008372:              00000297                 auipc   t0,0x0
d0008376:              d8f28293                 addi    t0,t0,-625 # d0008101 <_rom_interrupt_vector_c+0x1>
d000837a:              30529073                 csrw    mtvec,t0
d000837e:              a149                     j       d0008800 <rom_main>

d0008380 <rom_exception_handler>:
rom_irq_error():
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:108
static dif_spi_host_t spi_host;

OT_ALWAYS_INLINE
static rom_error_t rom_irq_error(void) {
  uint32_t mcause;
  CSR_READ(CSR_REG_MCAUSE, &mcause);
d0008380:       34202573                csrr    a0,mcause
d0008384:       800005b7                lui     a1,0x80000
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:119
  //
  // Preserve the MSB and shift the 7 LSBs into the upper byte.
  // (we preserve 7 instead of 5 because the verilog hardcodes the unused bits
  // as zero and those would be the next bits used should the number of
  // interrupt causes increase).
  mcause = (mcause & 0x80000000) | ((mcause & 0x7f) << 24);
d0008388:       8de9                    and     a1,a1,a0
d000838a:       0566                    slli    a0,a0,0x19
d000838c:       8105                    srli    a0,a0,0x1
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:120
  return kErrorInterrupt + mcause;
d000838e:       8d4d                    or      a0,a0,a1
d0008390:       004955b7                lui     a1,0x495
d0008394:       20258593                addi    a1,a1,514 # 495202 <_rom_ext_virtual_size+0x415202>
d0008398:       8d4d                    or      a0,a0,a1
rom_interrupt_handler():
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:489
  while(true);//shutdown_finalize(rom_try_boot());
}

void rom_interrupt_handler(void) {
  register rom_error_t error asm("a0") = rom_irq_error();
  asm volatile("tail shutdown_finalize;" ::"r"(error));
d000839a:       3e30206f                j       d000af7c <shutdown_finalize>
d000839e:       0000                    unimp

d00083a0 <_asm_exception_handler>:
_asm_exception_handler():
/proc/self/cwd/sw/device/silicon_creator/lib/irq_asm.S:29
  .global _asm_exception_handler
  .type _asm_exception_handler, @function
_asm_exception_handler:
.L_exception_loop:
  // Request a system reset.
  li t0, TOP_EARLGREY_RSTMGR_AON_BASE_ADDR
d00083a0:       /-> c04102b7            lui     t0,0xc0410
/proc/self/cwd/sw/device/silicon_creator/lib/irq_asm.S:30
  li t1, MULTIBIT_ASM_BOOL4_TRUE
d00083a4:       |   4319                        li      t1,6
/proc/self/cwd/sw/device/silicon_creator/lib/irq_asm.S:31
  sw t1, RSTMGR_RESET_REQ_REG_OFFSET(t0)
d00083a6:       |   0062a223            sw      t1,4(t0) # c0410004 <_stack_end+0xe03f0004>
/proc/self/cwd/sw/device/silicon_creator/lib/irq_asm.S:37

  // Disable access to flash.
  //
  // This is done after requesting a reset so that this function will
  // work even if it is in flash.
  li t0, TOP_EARLGREY_FLASH_CTRL_CORE_BASE_ADDR
d00083aa:       |   c10002b7            lui     t0,0xc1000
/proc/self/cwd/sw/device/silicon_creator/lib/irq_asm.S:38
  sw zero, FLASH_CTRL_DIS_REG_OFFSET(t0)
d00083ae:       |   0002a823            sw      zero,16(t0) # c1000010 <_stack_end+0xe0fe0010>
/proc/self/cwd/sw/device/silicon_creator/lib/irq_asm.S:40

  wfi
d00083b2:       |   10500073            wfi
/proc/self/cwd/sw/device/silicon_creator/lib/irq_asm.S:41
  j   .L_exception_loop
d00083b6:       \-- b7ed                        j       d00083a0 <_asm_exception_handler>

d00083b8 <crt_section_clear>:
crt_section_clear():
/proc/self/cwd/sw/device/lib/crt/crt.S:41
  .global crt_section_clear
  .type crt_section_clear, @function
crt_section_clear:

  // Check that start is before end.
  bgeu a0, a1, .L_clear_nothing
d00083b8:       /-------- 00b57e63              bgeu    a0,a1,d00083d4 <crt_section_clear+0x1c>
/proc/self/cwd/sw/device/lib/crt/crt.S:44

  // Check that start and end are word aligned.
  or   t0, a0, a1
d00083bc:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:45
  andi t0, t0, 0x3
d00083c0:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:46
  bnez t0, .L_clear_error
d00083c4:       |  /----- 00029b63              bnez    t0,d00083da <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:51

.L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
d00083c8:       |  |  /-> 00052023              sw      zero,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:52
  addi a0, a0, 4
d00083cc:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:53
  bltu a0, a1, .L_clear_loop
d00083ce:       |  |  \-- feb56de3              bltu    a0,a1,d00083c8 <crt_section_clear+0x10>
/proc/self/cwd/sw/device/lib/crt/crt.S:54
  ret
d00083d2:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:59

.L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_clear_error
d00083d4:       \--+----X 00b51363              bne     a0,a1,d00083da <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:60
  ret
d00083d8:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:63

.L_clear_error:
  unimp
d00083da:          \----> 0000                  unimp

d00083dc <crt_section_copy>:
crt_section_copy():
/proc/self/cwd/sw/device/lib/crt/crt.S:95
  .global crt_section_copy
  .type crt_section_copy, @function
crt_section_copy:

  // Check that start is before end.
  bgeu a0, a1, .L_copy_nothing
d00083dc:       /-------- 02b57963              bgeu    a0,a1,d000840e <crt_section_copy+0x32>
/proc/self/cwd/sw/device/lib/crt/crt.S:98

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
d00083e0:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:99
  or   t0, t0, a2
d00083e4:       |         00c2e2b3              or      t0,t0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:100
  andi t0, t0, 0x3
d00083e8:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:101
  bnez t0, .L_copy_error
d00083ec:       |  /----- 02029463              bnez    t0,d0008414 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:118
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
d00083f0:       |  |      40c502b3              sub     t0,a0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:119
  sub  t1, a1, a0           // end - start
d00083f4:       |  |      40a58333              sub     t1,a1,a0
/proc/self/cwd/sw/device/lib/crt/crt.S:120
  bltu t0, t1, .L_copy_error
d00083f8:       |  +----- 0062ee63              bltu    t0,t1,d0008414 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:125

.L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
d00083fc:       |  |  /-> 00062283              lw      t0,0(a2)
/proc/self/cwd/sw/device/lib/crt/crt.S:126
  addi a2, a2, 4
d0008400:       |  |  |   0611                  addi    a2,a2,4
/proc/self/cwd/sw/device/lib/crt/crt.S:127
  sw   t0, 0(a0)
d0008402:       |  |  |   00552023              sw      t0,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:128
  addi a0, a0, 4
d0008406:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:129
  bltu a0, a1, .L_copy_loop
d0008408:       |  |  \-- feb56ae3              bltu    a0,a1,d00083fc <crt_section_copy+0x20>
/proc/self/cwd/sw/device/lib/crt/crt.S:130
  ret
d000840c:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:135

.L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_copy_error
d000840e:       \--+----X 00b51363              bne     a0,a1,d0008414 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:136
  ret
d0008412:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:139

.L_copy_error:
  unimp
d0008414:          \----> 0000                  unimp
d0008416:                 0000                  unimp

d0008418 <rom_epmp_init>:
rom_epmp_init():
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:59
  .extern _epmp_stack_guard_na4

  // Setup PMP address registers.

  // ROM TEXT
  la   t0, _epmp_text_tor_lo
d0008418:       63ffa297                auipc   t0,0x63ffa
d000841c:       be828293                addi    t0,t0,-1048 # 34002000 <_stack_end+0x53fe2000>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:60
  csrw pmpaddr0, t0
d0008420:       3b029073                csrw    pmpaddr0,t0
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:61
  la   t0, _epmp_text_tor_hi
d0008424:       63ffb297                auipc   t0,0x63ffb
d0008428:       86128293                addi    t0,t0,-1951 # 34002c85 <_stack_end+0x53fe2c85>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:62
  csrw pmpaddr1, t0
d000842c:       3b129073                csrw    pmpaddr1,t0
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:65

  // ROM
  li   t0, NAPOT(TOP_EARLGREY_ROM_BASE_ADDR, TOP_EARLGREY_ROM_SIZE_BYTES)
d0008430:       340032b7                lui     t0,0x34003
d0008434:       12fd                    addi    t0,t0,-1
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:66
  csrw pmpaddr2, t0
d0008436:       3b229073                csrw    pmpaddr2,t0
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:69

  // ROM_EXT TEXT (configured after signature verification)
  csrw pmpaddr3, zero // ROM_EXT TEXT low
d000843a:       3b301073                csrw    pmpaddr3,zero
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:70
  csrw pmpaddr4, zero // ROM_EXT TEXT high
d000843e:       3b401073                csrw    pmpaddr4,zero
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:73

  // eFLASH
  li   t0, NAPOT(TOP_EARLGREY_EFLASH_BASE_ADDR, TOP_EARLGREY_EFLASH_SIZE_BYTES)
d0008442:       3c0202b7                lui     t0,0x3c020
d0008446:       12fd                    addi    t0,t0,-1
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:74
  csrw pmpaddr5, t0
d0008448:       3b529073                csrw    pmpaddr5,t0
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:77

  // MMIO
  li   t0, TOR(TOP_EARLGREY_MMIO_BASE_ADDR)
d000844c:       6291                    lui     t0,0x4
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:78
  csrw pmpaddr10, t0
d000844e:       3ba29073                csrw    pmpaddr10,t0
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:79
  li   t0, TOR(TOP_EARLGREY_MMIO_BASE_ADDR + TOP_EARLGREY_MMIO_SIZE_BYTES)
d0008452:       340002b7                lui     t0,0x34000
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:80
  csrw pmpaddr11, t0
d0008456:       3bb29073                csrw    pmpaddr11,t0
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:83

  // Debug ROM
  li   t0, NAPOT(TOP_EARLGREY_RV_DM_MEM_BASE_ADDR, TOP_EARLGREY_RV_DM_MEM_SIZE_BYTES)
d000845a:       1ff00293                li      t0,511
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:84
  csrw pmpaddr13, t0
d000845e:       3bd29073                csrw    pmpaddr13,t0
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:87

  // Stack guard
  la   t0, _epmp_stack_guard_na4
d0008462:       67fff297                auipc   t0,0x67fff
d0008466:       b9e28293                addi    t0,t0,-1122 # 38007000 <_stack_end+0x57fe7000>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:88
  csrw pmpaddr14, t0
d000846a:       3be29073                csrw    pmpaddr14,t0
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:91

  // RAM
  li   t0, NAPOT(TOP_EARLGREY_RAM_MAIN_BASE_ADDR, TOP_EARLGREY_RAM_MAIN_SIZE_BYTES)
d000846e:       380042b7                lui     t0,0x38004
d0008472:       12fd                    addi    t0,t0,-1
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:92
  csrw pmpaddr15, t0
d0008474:       3bf29073                csrw    pmpaddr15,t0
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:95

  // Set PMP configuration registers.
  li   t0, CFG_INDEX(1  % 4, EPMP_CFG_A_TOR   | EPMP_CFG_LRX) | /* ROM TEXT    */ \
d0008478:       009992b7                lui     t0,0x999
d000847c:       d0028293                addi    t0,t0,-768 # 998d00 <_rom_ext_virtual_size+0x918d00>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:97
           CFG_INDEX(2  % 4, EPMP_CFG_A_NAPOT | EPMP_CFG_LR)    /* ROM         */
  li   t1, CFG_INDEX(5  % 4, EPMP_CFG_A_NAPOT | EPMP_CFG_LR)    /* eFLASH      */
d0008480:       6329                    lui     t1,0xa
d0008482:       90030313                addi    t1,t1,-1792 # 9900 <_stack_size+0x5900>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:98
  li   t2, CFG_INDEX(11 % 4, EPMP_CFG_A_TOR   | EPMP_CFG_LRW)   /* MMIO        */
d0008486:       8b0003b7                lui     t2,0x8b000
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:99
  li   t3, CFG_INDEX(13 % 4, EPMP_CFG_A_NAPOT | EPMP_CFG_LRWX)| /* Debug ROM   */ \
d000848a:       9b90ae37                lui     t3,0x9b90a
d000848e:       f00e0e13                addi    t3,t3,-256 # 9b909f00 <_stack_end+0xbb8e9f00>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:104
           CFG_INDEX(14 % 4, EPMP_CFG_A_NA4   | EPMP_CFG_L)   | /* Stack Guard */ \
           CFG_INDEX(15 % 4, EPMP_CFG_A_NAPOT | EPMP_CFG_LRW)   /* RAM         */
  //li   t4, 0x6

  csrw pmpcfg0, t0
d0008492:       3a029073                csrw    pmpcfg0,t0
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:105
  csrw pmpcfg1, t1
d0008496:       3a131073                csrw    pmpcfg1,t1
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:106
  csrw pmpcfg2, t2
d000849a:       3a239073                csrw    pmpcfg2,t2
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:107
  csrw pmpcfg3, t3
d000849e:       3a3e1073                csrw    pmpcfg3,t3
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp_init.S:110
  //csrw EPMP_MSECCFG , t4      

  ret
d00084a2:       8082                    ret
d00084a4:       0000                    unimp
d00084a6:       0000                    unimp
d00084a8:       0000                    unimp
d00084aa:       0000                    unimp
d00084ac:       0000                    unimp
d00084ae:       0000                    unimp
d00084b0:       0000                    unimp
d00084b2:       0000                    unimp
d00084b4:       0000                    unimp
d00084b6:       0000                    unimp
d00084b8:       0000                    unimp
d00084ba:       0000                    unimp
d00084bc:       0000                    unimp
d00084be:       0000                    unimp
d00084c0:       0000                    unimp
d00084c2:       0000                    unimp
d00084c4:       0000                    unimp
d00084c6:       0000                    unimp
d00084c8:       0000                    unimp
d00084ca:       0000                    unimp
d00084cc:       0000                    unimp
d00084ce:       0000                    unimp
d00084d0:       0000                    unimp
d00084d2:       0000                    unimp
d00084d4:       0000                    unimp
d00084d6:       0000                    unimp
d00084d8:       0000                    unimp
d00084da:       0000                    unimp
d00084dc:       0000                    unimp
d00084de:       0000                    unimp
d00084e0:       0000                    unimp
d00084e2:       0000                    unimp
d00084e4:       0000                    unimp
d00084e6:       0000                    unimp
d00084e8:       0000                    unimp
d00084ea:       0000                    unimp
d00084ec:       0000                    unimp
d00084ee:       0000                    unimp
d00084f0:       0000                    unimp
d00084f2:       0000                    unimp
d00084f4:       0000                    unimp
d00084f6:       0000                    unimp
d00084f8:       0000                    unimp
d00084fa:       0000                    unimp
d00084fc:       0000                    unimp
d00084fe:       0000                    unimp
d0008500:       0000                    unimp
d0008502:       0000                    unimp
d0008504:       0000                    unimp
d0008506:       0000                    unimp
d0008508:       0000                    unimp
d000850a:       0000                    unimp
d000850c:       0000                    unimp
d000850e:       0000                    unimp
d0008510:       0000                    unimp
d0008512:       0000                    unimp
d0008514:       0000                    unimp
d0008516:       0000                    unimp
d0008518:       0000                    unimp
d000851a:       0000                    unimp
d000851c:       0000                    unimp
d000851e:       0000                    unimp
d0008520:       0000                    unimp
d0008522:       0000                    unimp
d0008524:       0000                    unimp
d0008526:       0000                    unimp
d0008528:       0000                    unimp
d000852a:       0000                    unimp
d000852c:       0000                    unimp
d000852e:       0000                    unimp
d0008530:       0000                    unimp
d0008532:       0000                    unimp
d0008534:       0000                    unimp
d0008536:       0000                    unimp
d0008538:       0000                    unimp
d000853a:       0000                    unimp
d000853c:       0000                    unimp
d000853e:       0000                    unimp
d0008540:       0000                    unimp
d0008542:       0000                    unimp
d0008544:       0000                    unimp
d0008546:       0000                    unimp
d0008548:       0000                    unimp
d000854a:       0000                    unimp
d000854c:       0000                    unimp
d000854e:       0000                    unimp
d0008550:       0000                    unimp
d0008552:       0000                    unimp
d0008554:       0000                    unimp
d0008556:       0000                    unimp
d0008558:       0000                    unimp
d000855a:       0000                    unimp
d000855c:       0000                    unimp
d000855e:       0000                    unimp
d0008560:       0000                    unimp
d0008562:       0000                    unimp
d0008564:       0000                    unimp
d0008566:       0000                    unimp
d0008568:       0000                    unimp
d000856a:       0000                    unimp
d000856c:       0000                    unimp
d000856e:       0000                    unimp
d0008570:       0000                    unimp
d0008572:       0000                    unimp
d0008574:       0000                    unimp
d0008576:       0000                    unimp
d0008578:       0000                    unimp
d000857a:       0000                    unimp
d000857c:       0000                    unimp
d000857e:       0000                    unimp
d0008580:       0000                    unimp
d0008582:       0000                    unimp
d0008584:       0000                    unimp
d0008586:       0000                    unimp
d0008588:       0000                    unimp
d000858a:       0000                    unimp
d000858c:       0000                    unimp
d000858e:       0000                    unimp
d0008590:       0000                    unimp
d0008592:       0000                    unimp
d0008594:       0000                    unimp
d0008596:       0000                    unimp
d0008598:       0000                    unimp
d000859a:       0000                    unimp
d000859c:       0000                    unimp
d000859e:       0000                    unimp
d00085a0:       0000                    unimp
d00085a2:       0000                    unimp
d00085a4:       0000                    unimp
d00085a6:       0000                    unimp
d00085a8:       0000                    unimp
d00085aa:       0000                    unimp
d00085ac:       0000                    unimp
d00085ae:       0000                    unimp
d00085b0:       0000                    unimp
d00085b2:       0000                    unimp
d00085b4:       0000                    unimp
d00085b6:       0000                    unimp
d00085b8:       0000                    unimp
d00085ba:       0000                    unimp
d00085bc:       0000                    unimp
d00085be:       0000                    unimp
d00085c0:       0000                    unimp
d00085c2:       0000                    unimp
d00085c4:       0000                    unimp
d00085c6:       0000                    unimp
d00085c8:       0000                    unimp
d00085ca:       0000                    unimp
d00085cc:       0000                    unimp
d00085ce:       0000                    unimp
d00085d0:       0000                    unimp
d00085d2:       0000                    unimp
d00085d4:       0000                    unimp
d00085d6:       0000                    unimp
d00085d8:       0000                    unimp
d00085da:       0000                    unimp
d00085dc:       0000                    unimp
d00085de:       0000                    unimp
d00085e0:       0000                    unimp
d00085e2:       0000                    unimp
d00085e4:       0000                    unimp
d00085e6:       0000                    unimp
d00085e8:       0000                    unimp
d00085ea:       0000                    unimp
d00085ec:       0000                    unimp
d00085ee:       0000                    unimp
d00085f0:       0000                    unimp
d00085f2:       0000                    unimp
d00085f4:       0000                    unimp
d00085f6:       0000                    unimp
d00085f8:       0000                    unimp
d00085fa:       0000                    unimp
d00085fc:       0000                    unimp
d00085fe:       0000                    unimp
d0008600:       0000                    unimp
d0008602:       0000                    unimp
d0008604:       0000                    unimp
d0008606:       0000                    unimp
d0008608:       0000                    unimp
d000860a:       0000                    unimp
d000860c:       0000                    unimp
d000860e:       0000                    unimp
d0008610:       0000                    unimp
d0008612:       0000                    unimp
d0008614:       0000                    unimp
d0008616:       0000                    unimp
d0008618:       0000                    unimp
d000861a:       0000                    unimp
d000861c:       0000                    unimp
d000861e:       0000                    unimp
d0008620:       0000                    unimp
d0008622:       0000                    unimp
d0008624:       0000                    unimp
d0008626:       0000                    unimp
d0008628:       0000                    unimp
d000862a:       0000                    unimp
d000862c:       0000                    unimp
d000862e:       0000                    unimp
d0008630:       0000                    unimp
d0008632:       0000                    unimp
d0008634:       0000                    unimp
d0008636:       0000                    unimp
d0008638:       0000                    unimp
d000863a:       0000                    unimp
d000863c:       0000                    unimp
d000863e:       0000                    unimp
d0008640:       0000                    unimp
d0008642:       0000                    unimp
d0008644:       0000                    unimp
d0008646:       0000                    unimp
d0008648:       0000                    unimp
d000864a:       0000                    unimp
d000864c:       0000                    unimp
d000864e:       0000                    unimp
d0008650:       0000                    unimp
d0008652:       0000                    unimp
d0008654:       0000                    unimp
d0008656:       0000                    unimp
d0008658:       0000                    unimp
d000865a:       0000                    unimp
d000865c:       0000                    unimp
d000865e:       0000                    unimp
d0008660:       0000                    unimp
d0008662:       0000                    unimp
d0008664:       0000                    unimp
d0008666:       0000                    unimp
d0008668:       0000                    unimp
d000866a:       0000                    unimp
d000866c:       0000                    unimp
d000866e:       0000                    unimp
d0008670:       0000                    unimp
d0008672:       0000                    unimp
d0008674:       0000                    unimp
d0008676:       0000                    unimp
d0008678:       0000                    unimp
d000867a:       0000                    unimp
d000867c:       0000                    unimp
d000867e:       0000                    unimp
d0008680:       0000                    unimp
d0008682:       0000                    unimp
d0008684:       0000                    unimp
d0008686:       0000                    unimp
d0008688:       0000                    unimp
d000868a:       0000                    unimp
d000868c:       0000                    unimp
d000868e:       0000                    unimp
d0008690:       0000                    unimp
d0008692:       0000                    unimp
d0008694:       0000                    unimp
d0008696:       0000                    unimp
d0008698:       0000                    unimp
d000869a:       0000                    unimp
d000869c:       0000                    unimp
d000869e:       0000                    unimp
d00086a0:       0000                    unimp
d00086a2:       0000                    unimp
d00086a4:       0000                    unimp
d00086a6:       0000                    unimp
d00086a8:       0000                    unimp
d00086aa:       0000                    unimp
d00086ac:       0000                    unimp
d00086ae:       0000                    unimp
d00086b0:       0000                    unimp
d00086b2:       0000                    unimp
d00086b4:       0000                    unimp
d00086b6:       0000                    unimp
d00086b8:       0000                    unimp
d00086ba:       0000                    unimp
d00086bc:       0000                    unimp
d00086be:       0000                    unimp
d00086c0:       0000                    unimp
d00086c2:       0000                    unimp
d00086c4:       0000                    unimp
d00086c6:       0000                    unimp
d00086c8:       0000                    unimp
d00086ca:       0000                    unimp
d00086cc:       0000                    unimp
d00086ce:       0000                    unimp
d00086d0:       0000                    unimp
d00086d2:       0000                    unimp
d00086d4:       0000                    unimp
d00086d6:       0000                    unimp
d00086d8:       0000                    unimp
d00086da:       0000                    unimp
d00086dc:       0000                    unimp
d00086de:       0000                    unimp
d00086e0:       0000                    unimp
d00086e2:       0000                    unimp
d00086e4:       0000                    unimp
d00086e6:       0000                    unimp
d00086e8:       0000                    unimp
d00086ea:       0000                    unimp
d00086ec:       0000                    unimp
d00086ee:       0000                    unimp
d00086f0:       0000                    unimp
d00086f2:       0000                    unimp
d00086f4:       0000                    unimp
d00086f6:       0000                    unimp
d00086f8:       0000                    unimp
d00086fa:       0000                    unimp
d00086fc:       0000                    unimp
d00086fe:       0000                    unimp
d0008700:       0000                    unimp
d0008702:       0000                    unimp
d0008704:       0000                    unimp
d0008706:       0000                    unimp
d0008708:       0000                    unimp
d000870a:       0000                    unimp
d000870c:       0000                    unimp
d000870e:       0000                    unimp
d0008710:       0000                    unimp
d0008712:       0000                    unimp
d0008714:       0000                    unimp
d0008716:       0000                    unimp
d0008718:       0000                    unimp
d000871a:       0000                    unimp
d000871c:       0000                    unimp
d000871e:       0000                    unimp
d0008720:       0000                    unimp
d0008722:       0000                    unimp
d0008724:       0000                    unimp
d0008726:       0000                    unimp
d0008728:       0000                    unimp
d000872a:       0000                    unimp
d000872c:       0000                    unimp
d000872e:       0000                    unimp
d0008730:       0000                    unimp
d0008732:       0000                    unimp
d0008734:       0000                    unimp
d0008736:       0000                    unimp
d0008738:       0000                    unimp
d000873a:       0000                    unimp
d000873c:       0000                    unimp
d000873e:       0000                    unimp
d0008740:       0000                    unimp
d0008742:       0000                    unimp
d0008744:       0000                    unimp
d0008746:       0000                    unimp
d0008748:       0000                    unimp
d000874a:       0000                    unimp
d000874c:       0000                    unimp
d000874e:       0000                    unimp
d0008750:       0000                    unimp
d0008752:       0000                    unimp
d0008754:       0000                    unimp
d0008756:       0000                    unimp
d0008758:       0000                    unimp
d000875a:       0000                    unimp
d000875c:       0000                    unimp
d000875e:       0000                    unimp
d0008760:       0000                    unimp
d0008762:       0000                    unimp
d0008764:       0000                    unimp
d0008766:       0000                    unimp
d0008768:       0000                    unimp
d000876a:       0000                    unimp
d000876c:       0000                    unimp
d000876e:       0000                    unimp
d0008770:       0000                    unimp
d0008772:       0000                    unimp
d0008774:       0000                    unimp
d0008776:       0000                    unimp
d0008778:       0000                    unimp
d000877a:       0000                    unimp
d000877c:       0000                    unimp
d000877e:       0000                    unimp
d0008780:       0000                    unimp
d0008782:       0000                    unimp
d0008784:       0000                    unimp
d0008786:       0000                    unimp
d0008788:       0000                    unimp
d000878a:       0000                    unimp
d000878c:       0000                    unimp
d000878e:       0000                    unimp
d0008790:       0000                    unimp
d0008792:       0000                    unimp
d0008794:       0000                    unimp
d0008796:       0000                    unimp
d0008798:       0000                    unimp
d000879a:       0000                    unimp
d000879c:       0000                    unimp
d000879e:       0000                    unimp
d00087a0:       0000                    unimp
d00087a2:       0000                    unimp
d00087a4:       0000                    unimp
d00087a6:       0000                    unimp
d00087a8:       0000                    unimp
d00087aa:       0000                    unimp
d00087ac:       0000                    unimp
d00087ae:       0000                    unimp
d00087b0:       0000                    unimp
d00087b2:       0000                    unimp
d00087b4:       0000                    unimp
d00087b6:       0000                    unimp
d00087b8:       0000                    unimp
d00087ba:       0000                    unimp
d00087bc:       0000                    unimp
d00087be:       0000                    unimp
d00087c0:       0000                    unimp
d00087c2:       0000                    unimp
d00087c4:       0000                    unimp
d00087c6:       0000                    unimp
d00087c8:       0000                    unimp
d00087ca:       0000                    unimp
d00087cc:       0000                    unimp
d00087ce:       0000                    unimp
d00087d0:       0000                    unimp
d00087d2:       0000                    unimp
d00087d4:       0000                    unimp
d00087d6:       0000                    unimp
d00087d8:       0000                    unimp
d00087da:       0000                    unimp
d00087dc:       0000                    unimp
d00087de:       0000                    unimp
d00087e0:       0000                    unimp
d00087e2:       0000                    unimp
d00087e4:       0000                    unimp
d00087e6:       0000                    unimp
d00087e8:       0000                    unimp
d00087ea:       0000                    unimp
d00087ec:       0000                    unimp
d00087ee:       0000                    unimp
d00087f0:       0000                    unimp
d00087f2:       0000                    unimp
d00087f4:       0000                    unimp
d00087f6:       0000                    unimp
d00087f8:       0000                    unimp
d00087fa:       0000                    unimp
d00087fc:       0000                    unimp
d00087fe:       0000                    unimp

Disassembly of section .text:

d0008800 <rom_main>:
rom_main():
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:462
void rom_main(void) {
d0008800:                 1101                  addi    sp,sp,-32
d0008802:                 ce06                  sw      ra,28(sp)
d0008804:                 cc22                  sw      s0,24(sp)
d0008806:                 ca26                  sw      s1,20(sp)
d0008808:                 c84a                  sw      s2,16(sp)
d000880a:                 c64e                  sw      s3,12(sp)
d000880c:                 c452                  sw      s4,8(sp)
d000880e:                 c256                  sw      s5,4(sp)
d0008810:                 c1418a93              addi    s5,gp,-1004 # e000245c <rom_counters>
d0008814:                 1a500513              li      a0,421
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:463
  CFI_FUNC_COUNTER_INIT(rom_counters, kCfiRomMain);
d0008818:                 00aaa023              sw      a0,0(s5)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:465
  CFI_FUNC_COUNTER_PREPCALL(rom_counters, kCfiRomMain, 1, kCfiRomInit);
d000881c:                 000aa583              lw      a1,0(s5)
d0008820:             /-- 00a58663              beq     a1,a0,d000882c <rom_main+0x2c>
d0008824:             |   0000                  unimp
d0008826:             |   0000                  unimp
d0008828:             |   0000                  unimp
d000882a:             |   0000                  unimp
d000882c:             \-> 000aa503              lw      a0,0(s5)
d0008830:                 05a50513              addi    a0,a0,90
d0008834:                 00aaa023              sw      a0,0(s5)
barrier32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:349
 * loop; however, the barriers in each loop iteration force a particular order
 * is observed.
 *
 * @param val A value to create a barrier for.
 */
inline void barrier32(uint32_t val) { asm volatile("" ::"r"(val)); }
d0008838:                 6505                  lui     a0,0x1
d000883a:                 83650513              addi    a0,a0,-1994 # 836 <_epmp_reset_rx_size+0x36>
rom_main():
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:465
d000883e:                 00aaa223              sw      a0,4(s5)
d0008842:                 000aa583              lw      a1,0(s5)
d0008846:                 1ff00613              li      a2,511
d000884a:             /-- 00c58663              beq     a1,a2,d0008856 <rom_main+0x56>
d000884e:             |   0000                  unimp
d0008850:             |   0000                  unimp
d0008852:             |   0000                  unimp
d0008854:             |   0000                  unimp
d0008856:             \-> 000aa583              lw      a1,0(s5)
d000885a:                 05a58593              addi    a1,a1,90
d000885e:                 00baa023              sw      a1,0(s5)
rom_init():
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:146
  CFI_FUNC_COUNTER_INCREMENT(rom_counters, kCfiRomInit, 1);
d0008862:                 004aa583              lw      a1,4(s5)
d0008866:             /-- 00a58663              beq     a1,a0,d0008872 <rom_main+0x72>
d000886a:             |   0000                  unimp
d000886c:             |   0000                  unimp
d000886e:             |   0000                  unimp
d0008870:             |   0000                  unimp
d0008872:             \-> 004aa503              lw      a0,4(s5)
d0008876:                 05a50513              addi    a0,a0,90
d000887a:                 00aaa223              sw      a0,4(s5)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:147
  sec_mmio_init();
d000887e:                 28c020ef              jal     ra,d000ab0a <sec_mmio_init>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:149
  pinmux_init();
d0008882:                 71d000ef              jal     ra,d000979e <pinmux_init>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:151
  uart_init(kUartNCOValue);
d0008886:                 00003517              auipc   a0,0x3
d000888a:                 ff250513              addi    a0,a0,-14 # d000b878 <kUartNCOValue>
d000888e:                 4108                  lw      a0,0(a0)
d0008890:                 7bb000ef              jal     ra,d000984a <uart_init>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:156
  CSR_WRITE(CSR_REG_SECURESEED, rnd_uint32());
d0008894:                 092020ef              jal     ra,d000a926 <rnd_uint32>
d0008898:                 7c151073              csrw    0x7c1,a0
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:160
  CSR_READ(CSR_REG_CPUCTRL, &cpuctrl_csr);
d000889c:                 7c002473              csrr    s0,0x7c0
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:163
      otp_read32(OTP_CTRL_PARAM_CREATOR_SW_CFG_CPUCTRL_OFFSET));
d00088a0:                 10c00513              li      a0,268
d00088a4:                 25e020ef              jal     ra,d000ab02 <otp_read32>
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
d00088a8:                 fc047593              andi    a1,s0,-64
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d00088ac:                 03f57513              andi    a0,a0,63
d00088b0:                 8d4d                  or      a0,a0,a1
rom_init():
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:164
  CSR_WRITE(CSR_REG_CPUCTRL, cpuctrl_csr);
d00088b2:                 7c051073              csrw    0x7c0,a0
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:166
  lc_state = lifecycle_state_get();
d00088b6:                 09c020ef              jal     ra,d000a952 <lifecycle_state_get>
d00088ba:                 0fff9417              auipc   s0,0xfff9
d00088be:                 78e40413              addi    s0,s0,1934 # e0002048 <lc_state>
d00088c2:                 c008                  sw      a0,0(s0)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:169
  rom_epmp_config_debug_rom(lc_state);
d00088c4:                 7a5010ef              jal     ra,d000a868 <rom_epmp_config_debug_rom>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:172
  watchdog_init(lc_state);
d00088c8:                 4008                  lw      a0,0(s0)
d00088ca:                 7cb000ef              jal     ra,d0009894 <watchdog_init>
d00088ce:                 0fff7497              auipc   s1,0xfff7
d00088d2:                 7a648493              addi    s1,s1,1958 # e0000074 <sec_mmio_ctx>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:173
  SEC_MMIO_WRITE_INCREMENT(kWatchdogSecMmioInit);
d00088d6:                 448c                  lw      a1,8(s1)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:176
  HARDENED_RETURN_IF_ERROR(shutdown_init(lc_state));
d00088d8:                 4008                  lw      a0,0(s0)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:173
  SEC_MMIO_WRITE_INCREMENT(kWatchdogSecMmioInit);
d00088da:                 0591                  addi    a1,a1,4
d00088dc:                 c48c                  sw      a1,8(s1)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:176
  HARDENED_RETURN_IF_ERROR(shutdown_init(lc_state));
d00088de:                 2ce9                  jal     d0008bb8 <shutdown_init>
d00088e0:                 8a2a                  mv      s4,a0
d00088e2:                 73900993              li      s3,1849
d00088e6:       /-------- 09351f63              bne     a0,s3,d0008984 <rom_main+0x184>
d00088ea:       |     /-- 013a0663              beq     s4,s3,d00088f6 <rom_main+0xf6>
d00088ee:       |     |   0000                  unimp
d00088f0:       |     |   0000                  unimp
d00088f2:       |     |   0000                  unimp
d00088f4:       |     |   0000                  unimp
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:178
  flash_ctrl_init();
d00088f6:       |     \-> 237000ef              jal     ra,d000932c <flash_ctrl_init>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:179
  SEC_MMIO_WRITE_INCREMENT(kFlashCtrlSecMmioInit);
d00088fa:       |         448c                  lw      a1,8(s1)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:182
  rom_epmp_state_init(lc_state);
d00088fc:       |         4008                  lw      a0,0(s0)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:179
  SEC_MMIO_WRITE_INCREMENT(kFlashCtrlSecMmioInit);
d00088fe:       |         058d                  addi    a1,a1,3
d0008900:       |         c48c                  sw      a1,8(s1)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:182
  rom_epmp_state_init(lc_state);
d0008902:       |         615010ef              jal     ra,d000a716 <rom_epmp_state_init>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:185
  HARDENED_RETURN_IF_ERROR(ast_check(lc_state));
d0008906:       |         4008                  lw      a0,0(s0)
d0008908:       |         107000ef              jal     ra,d000920e <ast_check>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
  asm volatile("" : "+r"(val));
d000890c:       |         85aa                  mv      a1,a0
rom_init():
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:185
d000890e:       |  /----- 07359a63              bne     a1,s3,d0008982 <rom_main+0x182>
d0008912:       |  |      73900a13              li      s4,1849
d0008916:       |  |  /-- 01450663              beq     a0,s4,d0008922 <rom_main+0x122>
d000891a:       |  |  |   0000                  unimp
d000891c:       |  |  |   0000                  unimp
d000891e:       |  |  |   0000                  unimp
d0008920:       |  |  |   0000                  unimp
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:189
  uint32_t reset_reasons = rstmgr_reason_get();
d0008922:       |  |  \-> 6ed000ef              jal     ra,d000980e <rstmgr_reason_get>
d0008926:       |  |      892a                  mv      s2,a0
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:192
      otp_read32(OTP_CTRL_PARAM_CREATOR_SW_CFG_RET_RAM_RESET_MASK_OFFSET);
d0008928:       |  |      10000513              li      a0,256
d000892c:       |  |      1d6020ef              jal     ra,d000ab02 <otp_read32>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:191
      (1 << kRstmgrReasonPowerOn) |
d0008930:       |  |      00156513              ori     a0,a0,1
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:193
  if ((reset_reasons & reset_mask) != 0) {
d0008934:       |  |      01257533              and     a0,a0,s2
d0008938:       |  |  /-- c119                  beqz    a0,d000893e <rom_main+0x13e>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:194
    retention_sram_init();
d000893a:       |  |  |   6cb000ef              jal     ra,d0009804 <retention_sram_init>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:197
  retention_sram_get()->reset_reasons = reset_reasons;
d000893e:       |  |  \-> 6c1000ef              jal     ra,d00097fe <retention_sram_get>
d0008942:       |  |      01252023              sw      s2,0(a0)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:198
  rstmgr_reason_clear(reset_reasons);
d0008946:       |  |      854a                  mv      a0,s2
d0008948:       |  |      6fb000ef              jal     ra,d0009842 <rstmgr_reason_clear>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:201
  device_fpga_version_print();
d000894c:       |  |      62c020ef              jal     ra,d000af78 <device_fpga_version_print>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:203
  sec_mmio_check_values(rnd_uint32());
d0008950:       |  |      7d7010ef              jal     ra,d000a926 <rnd_uint32>
d0008954:       |  |      310020ef              jal     ra,d000ac64 <sec_mmio_check_values>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:204
  sec_mmio_check_counters(/*expected_check_count=*/1);
d0008958:       |  |      4505                  li      a0,1
d000895a:       |  |      37a020ef              jal     ra,d000acd4 <sec_mmio_check_counters>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:206
  CFI_FUNC_COUNTER_INCREMENT(rom_counters, kCfiRomInit, 2);
d000895e:       |  |      004aa503              lw      a0,4(s5)
d0008962:       |  |      6585                  lui     a1,0x1
d0008964:       |  |      89058593              addi    a1,a1,-1904 # 890 <_epmp_reset_rx_size+0x90>
d0008968:       |  |  /-- 00b50663              beq     a0,a1,d0008974 <rom_main+0x174>
d000896c:       |  |  |   0000                  unimp
d000896e:       |  |  |   0000                  unimp
d0008970:       |  |  |   0000                  unimp
d0008972:       |  |  |   0000                  unimp
d0008974:       |  |  \-> 004aa503              lw      a0,4(s5)
d0008978:       |  |      05a50513              addi    a0,a0,90
d000897c:       |  |      00aaa223              sw      a0,4(s5)
barrier32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:349
inline void barrier32(uint32_t val) { asm volatile("" ::"r"(val)); }
d0008980:       +--|----- a011                  j       d0008984 <rom_main+0x184>
d0008982:       |  \----> 8a2a                  mv      s4,a0
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
  asm volatile("" : "+r"(val));
d0008984:       \-------> 8552                  mv      a0,s4
rom_main():
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:466
  SHUTDOWN_IF_ERROR(rom_init());
d0008986:          /----- 01351c63              bne     a0,s3,d000899e <rom_main+0x19e>
d000898a:          |      73900513              li      a0,1849
d000898e:          |  /-- 00aa0663              beq     s4,a0,d000899a <rom_main+0x19a>
d0008992:          |  |   0000                  unimp
d0008994:          |  |   0000                  unimp
d0008996:          |  |   0000                  unimp
d0008998:          |  |   0000                  unimp
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:483
  t = spi_test();
d000899a:          |  \-> 2029                  jal     d00089a4 <spi_test>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:484
  while(true);//shutdown_finalize(rom_try_boot());
d000899c:          |  /-- a001                  j       d000899c <rom_main+0x19c>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:466
  SHUTDOWN_IF_ERROR(rom_init());
d000899e:          \----> 8552                  mv      a0,s4
d00089a0:                 5dc020ef              jal     ra,d000af7c <shutdown_finalize>

d00089a4 <spi_test>:
spi_test():
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:588
  CHECK_DIF_OK(dif_spi_host_configure(spi_host, config));
  CHECK_DIF_OK(dif_spi_host_output_set_enabled(spi_host, /*enabled=*/true));
}


bool spi_test(void) {
d00089a4:                 7159                  addi    sp,sp,-112
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:591

  // Setup spi host configuration
  rom_printf("Testing spi_host.\r\n");
d00089a6:                 d686                  sw      ra,108(sp)
d00089a8:                 d4a2                  sw      s0,104(sp)
d00089aa:                 d2a6                  sw      s1,100(sp)
d00089ac:                 00003517              auipc   a0,0x3
d00089b0:                 98850513              addi    a0,a0,-1656 # d000b334 <_text_end+0x120>
d00089b4:                 21fd                  jal     d0008ea2 <rom_printf>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:597
  uintptr_t base_addr;
  uint64_t clkHz;
  base_addr = TOP_EARLGREY_SPI_HOST0_BASE_ADDR;
  clkHz = 10000000;
 
  CHECK_DIF_OK(dif_spi_host_init(mmio_region_from_addr(base_addr), &spi_host));
d00089b6:                 0fff9597              auipc   a1,0xfff9
d00089ba:                 69658593              addi    a1,a1,1686 # e000204c <spi_host>
d00089be:                 c0300537              lui     a0,0xc0300
d00089c2:                 046010ef              jal     ra,d0009a08 <dif_spi_host_init>
d00089c6:                 00003497              auipc   s1,0x3
d00089ca:                 ec248493              addi    s1,s1,-318 # d000b888 <kDeviceLogBypassUartAddress>
d00089ce:       /-------- cd05                  beqz    a0,d0008a06 <spi_test+0x62>
d00089d0:       |         842a                  mv      s0,a0
d00089d2:       |         4088                  lw      a0,0(s1)
d00089d4:       |     /-- c901                  beqz    a0,d00089e4 <spi_test+0x40>
d00089d6:       |     |   03c00513              li      a0,60
d00089da:       |     |   4585                  li      a1,1
d00089dc:       |     |   8622                  mv      a2,s0
d00089de:       |     |   658010ef              jal     ra,d000a036 <base_log_internal_dv>
d00089e2:       |  /--|-- a829                  j       d00089fc <spi_test+0x58>
d00089e4:       |  |  \-> 00003597              auipc   a1,0x3
d00089e8:       |  |      adc58593              addi    a1,a1,-1316 # d000b4c0 <_text_end+0x2ac>
d00089ec:       |  |      1008                  addi    a0,sp,32
d00089ee:       |  |      4651                  li      a2,20
d00089f0:       |  |      330020ef              jal     ra,d000ad20 <memcpy>
d00089f4:       |  |      1008                  addi    a0,sp,32
d00089f6:       |  |      85a2                  mv      a1,s0
d00089f8:       |  |      5a0010ef              jal     ra,d0009f98 <base_log_internal_core>
d00089fc:       |  \----> 6531                  lui     a0,0xc
d00089fe:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_size+0x7aad>
d0008a02:       |         4ea010ef              jal     ra,d0009eec <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:598
  init_spi_host(&spi_host, (uint32_t)clkHz);
d0008a06:       \-------> 0fff9417              auipc   s0,0xfff9
d0008a0a:                 64640413              addi    s0,s0,1606 # e000204c <spi_host>
d0008a0e:                 00989537              lui     a0,0x989
d0008a12:                 68050593              addi    a1,a0,1664 # 989680 <_rom_ext_virtual_size+0x909680>
d0008a16:                 8522                  mv      a0,s0
d0008a18:                 20cd                  jal     d0008afa <init_spi_host>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:608
  for (uint32_t i = 0; i < ARRAYSIZE(expected_data); ++i) {
    expected_data[i] = 0xBAADC0DE;
  }

  uint32_t buf[1];
  dif_spi_host_segment_t segments[] = {
d0008a1a:                 d202                  sw      zero,36(sp)
d0008a1c:                 d802                  sw      zero,48(sp)
d0008a1e:                 d602                  sw      zero,44(sp)
d0008a20:                 d402                  sw      zero,40(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:609
      {
d0008a22:                 d002                  sw      zero,32(sp)
d0008a24:                 450d                  li      a0,3
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:611
          .type = kDifSpiHostSegmentTypeOpcode,
          .opcode = 0x03,
d0008a26:                 02a10223              sb      a0,36(sp)
d0008a2a:                 4505                  li      a0,1
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:613
      },
      {
d0008a2c:                 da2a                  sw      a0,52(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:616
          .type = kDifSpiHostSegmentTypeAddress,
          .address =
              {
d0008a2e:                 dc02                  sw      zero,56(sp)
d0008a30:                 de02                  sw      zero,60(sp)
d0008a32:                 c082                  sw      zero,64(sp)
d0008a34:                 4511                  li      a0,4
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:630
              {
                  .width = kDifSpiHostWidthStandard,
                  .length = 8,
              },
           },*/
      {
d0008a36:                 c4aa                  sw      a0,72(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:633
          .type = kDifSpiHostSegmentTypeRx,
          .rx =
              {
d0008a38:                 c682                  sw      zero,76(sp)
d0008a3a:                 108c                  addi    a1,sp,96
d0008a3c:                 c8ae                  sw      a1,80(sp)
d0008a3e:                 caaa                  sw      a0,84(sp)
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:640
                  .buf = buf,
                  .length = sizeof(buf),
              },
      },
  };
  CHECK_DIF_OK(
d0008a40:                 1010                  addi    a2,sp,32
d0008a42:                 468d                  li      a3,3
d0008a44:                 8522                  mv      a0,s0
d0008a46:                 4581                  li      a1,0
d0008a48:                 2ba010ef              jal     ra,d0009d02 <dif_spi_host_transaction>
d0008a4c:       /-------- cd05                  beqz    a0,d0008a84 <spi_test+0xe0>
d0008a4e:       |         842a                  mv      s0,a0
d0008a50:       |         4088                  lw      a0,0(s1)
d0008a52:       |     /-- c901                  beqz    a0,d0008a62 <spi_test+0xbe>
d0008a54:       |     |   05000513              li      a0,80
d0008a58:       |     |   4585                  li      a1,1
d0008a5a:       |     |   8622                  mv      a2,s0
d0008a5c:       |     |   5da010ef              jal     ra,d000a036 <base_log_internal_dv>
d0008a60:       |  /--|-- a829                  j       d0008a7a <spi_test+0xd6>
d0008a62:       |  |  \-> 00003597              auipc   a1,0x3
d0008a66:       |  |      a7258593              addi    a1,a1,-1422 # d000b4d4 <_text_end+0x2c0>
d0008a6a:       |  |      0028                  addi    a0,sp,8
d0008a6c:       |  |      4651                  li      a2,20
d0008a6e:       |  |      2b2020ef              jal     ra,d000ad20 <memcpy>
d0008a72:       |  |      0028                  addi    a0,sp,8
d0008a74:       |  |      85a2                  mv      a1,s0
d0008a76:       |  |      522010ef              jal     ra,d0009f98 <base_log_internal_core>
d0008a7a:       |  \----> 6531                  lui     a0,0xc
d0008a7c:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_size+0x7aad>
d0008a80:       |         46c010ef              jal     ra,d0009eec <test_status_set>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
d0008a84:       \-------> 5586                  lw      a1,96(sp)
d0008a86:                 baadc537              lui     a0,0xbaadc
d0008a8a:                 0de50613              addi    a2,a0,222 # baadc0de <_stack_end+0xdaabc0de>
spi_test():
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:644
      dif_spi_host_transaction(&spi_host, 0, segments, ARRAYSIZE(segments)));
 
  uint32_t data = read_32(buf);
  if(data==MSG)
d0008a8e:          /----- 00c59863              bne     a1,a2,d0008a9e <spi_test+0xfa>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:645
      rom_printf("Passed: the read msg corresponds: %x\r\n", data);
d0008a92:          |      00003517              auipc   a0,0x3
d0008a96:          |      96550513              addi    a0,a0,-1691 # d000b3f7 <_text_end+0x1e3>
d0008a9a:          |      85b2                  mv      a1,a2
d0008a9c:          |  /-- a029                  j       d0008aa6 <spi_test+0x102>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:648
    
  else
      rom_printf("Failed: the read msg does not corresponds: %x\r\n", data);
d0008a9e:          \--|-> 00003517              auipc   a0,0x3
d0008aa2:             |   98050513              addi    a0,a0,-1664 # d000b41e <_text_end+0x20a>
d0008aa6:             \-> 2ef5                  jal     d0008ea2 <rom_printf>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:651
    

  CHECK_DIF_OK(dif_spi_host_output_set_enabled(&spi_host, false));
d0008aa8:                 0fff9517              auipc   a0,0xfff9
d0008aac:                 5a450513              addi    a0,a0,1444 # e000204c <spi_host>
d0008ab0:                 4581                  li      a1,0
d0008ab2:                 1fc010ef              jal     ra,d0009cae <dif_spi_host_output_set_enabled>
d0008ab6:       /-------- cd05                  beqz    a0,d0008aee <spi_test+0x14a>
d0008ab8:       |         842a                  mv      s0,a0
d0008aba:       |         4088                  lw      a0,0(s1)
d0008abc:       |     /-- c901                  beqz    a0,d0008acc <spi_test+0x128>
d0008abe:       |     |   06400513              li      a0,100
d0008ac2:       |     |   4585                  li      a1,1
d0008ac4:       |     |   8622                  mv      a2,s0
d0008ac6:       |     |   570010ef              jal     ra,d000a036 <base_log_internal_dv>
d0008aca:       |  /--|-- a829                  j       d0008ae4 <spi_test+0x140>
d0008acc:       |  |  \-> 00003597              auipc   a1,0x3
d0008ad0:       |  |      a1c58593              addi    a1,a1,-1508 # d000b4e8 <_text_end+0x2d4>
d0008ad4:       |  |      0028                  addi    a0,sp,8
d0008ad6:       |  |      4651                  li      a2,20
d0008ad8:       |  |      248020ef              jal     ra,d000ad20 <memcpy>
d0008adc:       |  |      0028                  addi    a0,sp,8
d0008ade:       |  |      85a2                  mv      a1,s0
d0008ae0:       |  |      4b8010ef              jal     ra,d0009f98 <base_log_internal_core>
d0008ae4:       |  \----> 6531                  lui     a0,0xc
d0008ae6:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_size+0x7aad>
d0008aea:       |         402010ef              jal     ra,d0009eec <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:652
  return true;
d0008aee:       \-------> 4505                  li      a0,1
d0008af0:                 5496                  lw      s1,100(sp)
d0008af2:                 5426                  lw      s0,104(sp)
d0008af4:                 50b6                  lw      ra,108(sp)
d0008af6:                 6165                  addi    sp,sp,112
d0008af8:                 8082                  ret

d0008afa <init_spi_host>:
init_spi_host():
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:574
                   uint32_t peripheral_clock_freq_hz) {
d0008afa:                 7179                  addi    sp,sp,-48
d0008afc:                 d606                  sw      ra,44(sp)
d0008afe:                 d422                  sw      s0,40(sp)
d0008b00:                 d226                  sw      s1,36(sp)
d0008b02:                 d04a                  sw      s2,32(sp)
d0008b04:                 842a                  mv      s0,a0
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:576
      .spi_clock = peripheral_clock_freq_hz / 2,
d0008b06:                 0015d513              srli    a0,a1,0x1
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:583
  CHECK_DIF_OK(dif_spi_host_configure(spi_host, config));
d0008b0a:                 c42a                  sw      a0,8(sp)
d0008b0c:                 c62e                  sw      a1,12(sp)
d0008b0e:                 01020537              lui     a0,0x1020
d0008b12:                 20250513              addi    a0,a0,514 # 1020202 <_rom_ext_virtual_size+0xfa0202>
d0008b16:                 c82a                  sw      a0,16(sp)
d0008b18:                 10100513              li      a0,257
d0008b1c:                 00a11a23              sh      a0,20(sp)
d0008b20:                 002c                  addi    a1,sp,8
d0008b22:                 8522                  mv      a0,s0
d0008b24:                 108010ef              jal     ra,d0009c2c <dif_spi_host_configure>
d0008b28:                 00003917              auipc   s2,0x3
d0008b2c:                 d6090913              addi    s2,s2,-672 # d000b888 <kDeviceLogBypassUartAddress>
d0008b30:       /-------- cd0d                  beqz    a0,d0008b6a <init_spi_host+0x70>
d0008b32:       |         84aa                  mv      s1,a0
d0008b34:       |         00092503              lw      a0,0(s2)
d0008b38:       |     /-- c901                  beqz    a0,d0008b48 <init_spi_host+0x4e>
d0008b3a:       |     |   01400513              li      a0,20
d0008b3e:       |     |   4585                  li      a1,1
d0008b40:       |     |   8626                  mv      a2,s1
d0008b42:       |     |   4f4010ef              jal     ra,d000a036 <base_log_internal_dv>
d0008b46:       |  /--|-- a829                  j       d0008b60 <init_spi_host+0x66>
d0008b48:       |  |  \-> 00003597              auipc   a1,0x3
d0008b4c:       |  |      95058593              addi    a1,a1,-1712 # d000b498 <_text_end+0x284>
d0008b50:       |  |      0028                  addi    a0,sp,8
d0008b52:       |  |      4651                  li      a2,20
d0008b54:       |  |      1cc020ef              jal     ra,d000ad20 <memcpy>
d0008b58:       |  |      0028                  addi    a0,sp,8
d0008b5a:       |  |      85a6                  mv      a1,s1
d0008b5c:       |  |      43c010ef              jal     ra,d0009f98 <base_log_internal_core>
d0008b60:       |  \----> 6531                  lui     a0,0xc
d0008b62:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_size+0x7aad>
d0008b66:       |         386010ef              jal     ra,d0009eec <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:584
  CHECK_DIF_OK(dif_spi_host_output_set_enabled(spi_host, /*enabled=*/true));
d0008b6a:       \-------> 4585                  li      a1,1
d0008b6c:                 8522                  mv      a0,s0
d0008b6e:                 140010ef              jal     ra,d0009cae <dif_spi_host_output_set_enabled>
d0008b72:       /-------- cd0d                  beqz    a0,d0008bac <init_spi_host+0xb2>
d0008b74:       |         842a                  mv      s0,a0
d0008b76:       |         00092503              lw      a0,0(s2)
d0008b7a:       |     /-- c901                  beqz    a0,d0008b8a <init_spi_host+0x90>
d0008b7c:       |     |   02800513              li      a0,40
d0008b80:       |     |   4585                  li      a1,1
d0008b82:       |     |   8622                  mv      a2,s0
d0008b84:       |     |   4b2010ef              jal     ra,d000a036 <base_log_internal_dv>
d0008b88:       |  /--|-- a829                  j       d0008ba2 <init_spi_host+0xa8>
d0008b8a:       |  |  \-> 00003597              auipc   a1,0x3
d0008b8e:       |  |      92258593              addi    a1,a1,-1758 # d000b4ac <_text_end+0x298>
d0008b92:       |  |      0028                  addi    a0,sp,8
d0008b94:       |  |      4651                  li      a2,20
d0008b96:       |  |      18a020ef              jal     ra,d000ad20 <memcpy>
d0008b9a:       |  |      0028                  addi    a0,sp,8
d0008b9c:       |  |      85a2                  mv      a1,s0
d0008b9e:       |  |      3fa010ef              jal     ra,d0009f98 <base_log_internal_core>
d0008ba2:       |  \----> 6531                  lui     a0,0xc
d0008ba4:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_size+0x7aad>
d0008ba8:       |         344010ef              jal     ra,d0009eec <test_status_set>
/proc/self/cwd/sw/device/silicon_creator/rom/rom.c:585
}
d0008bac:       \-------> 5902                  lw      s2,32(sp)
d0008bae:                 5492                  lw      s1,36(sp)
d0008bb0:                 5422                  lw      s0,40(sp)
d0008bb2:                 50b2                  lw      ra,44(sp)
d0008bb4:                 6145                  addi    sp,sp,48
d0008bb6:                 8082                  ret

d0008bb8 <shutdown_init>:
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:78
    default:
      return 0;
  }
}

rom_error_t shutdown_init(lifecycle_state_t lc_state) {
d0008bb8:                                7119                   addi    sp,sp,-128
d0008bba:                                de86                   sw      ra,124(sp)
d0008bbc:                                dca2                   sw      s0,120(sp)
d0008bbe:                                daa6                   sw      s1,116(sp)
d0008bc0:                                d8ca                   sw      s2,112(sp)
d0008bc2:                                d6ce                   sw      s3,108(sp)
d0008bc4:                                d4d2                   sw      s4,104(sp)
d0008bc6:                                d2d6                   sw      s5,100(sp)
d0008bc8:                                d0da                   sw      s6,96(sp)
d0008bca:                                cede                   sw      s7,92(sp)
d0008bcc:                                cce2                   sw      s8,88(sp)
d0008bce:                                cae6                   sw      s9,84(sp)
d0008bd0:                                c8ea                   sw      s10,80(sp)
d0008bd2:                                c6ee                   sw      s11,76(sp)
d0008bd4:                                892a                   mv      s2,a0
d0008bd6:                                cf8d05b7               lui     a1,0xcf8d0
d0008bda:                                aaa58613               addi    a2,a1,-1366 # cf8cfaaa <_stack_end+0xef8afaaa>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:90
  };

  // Are we in a lifecycle state which needs alert configuration?
  uint32_t lc_shift;
  uint32_t lc_shift_masked;
  switch (launder32(lc_state)) {
d0008bde:                         /----- 02a65563               bge     a2,a0,d0008c08 <shutdown_init+0x50>
d0008be2:                         |      aab58593               addi    a1,a1,-1365
d0008be6:                      /--|----- 04b50063               beq     a0,a1,d0008c26 <shutdown_init+0x6e>
d0008bea:                      |  |      0b5a75b7               lui     a1,0xb5a7
d0008bee:                      |  |      5e058593               addi    a1,a1,1504 # b5a75e0 <_rom_ext_virtual_size+0xb5275e0>
d0008bf2:                   /--|--|----- 04b51963               bne     a0,a1,d0008c44 <shutdown_init+0x8c>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:109
      HARDENED_CHECK_EQ(lc_state, kLcStateProdEnd);
      lc_shift = kLcShiftProdEnd;
      lc_shift_masked = launder32(kLcShiftProdEnd) ^ kLcStateProdEnd;
      break;
    case kLcStateDev:
      HARDENED_CHECK_EQ(lc_state, kLcStateDev);
d0008bf6:                   |  |  |  /-- 00b90663               beq     s2,a1,d0008c02 <shutdown_init+0x4a>
d0008bfa:                   |  |  |  |   0000                   unimp
d0008bfc:                   |  |  |  |   0000                   unimp
d0008bfe:                   |  |  |  |   0000                   unimp
d0008c00:                   |  |  |  |   0000                   unimp
d0008c02:                   |  |  |  \-> 49c1                   li      s3,16
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008c04:                   |  |  |      4541                   li      a0,16
d0008c06:                /--|--|--|----- a8a9                   j       d0008c60 <shutdown_init+0xa8>
d0008c08:                |  |  |  \----> 91b9b5b7               lui     a1,0x91b9b
d0008c0c:                |  |  |         68a58593               addi    a1,a1,1674 # 91b9b68a <_stack_end+0xb1b7b68a>
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:90
  switch (launder32(lc_state)) {
d0008c10:       /--------|--|--|-------- 24b51863               bne     a0,a1,d0008e60 <shutdown_init+0x2a8>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:104
      HARDENED_CHECK_EQ(lc_state, kLcStateProdEnd);
d0008c14:       |        |  |  |     /-- 00b90663               beq     s2,a1,d0008c20 <shutdown_init+0x68>
d0008c18:       |        |  |  |     |   0000                   unimp
d0008c1a:       |        |  |  |     |   0000                   unimp
d0008c1c:       |        |  |  |     |   0000                   unimp
d0008c1e:       |        |  |  |     |   0000                   unimp
d0008c20:       |        |  |  |     \-> 49a1                   li      s3,8
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008c22:       |        |  |  |         4521                   li      a0,8
d0008c24:       |        +--|--|-------- a835                   j       d0008c60 <shutdown_init+0xa8>
d0008c26:       |        |  |  \-------> cf8d0537               lui     a0,0xcf8d0
d0008c2a:       |        |  |            aab50513               addi    a0,a0,-1365 # cf8cfaab <_stack_end+0xef8afaab>
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:114
      lc_shift = kLcShiftDev;
      lc_shift_masked = launder32(kLcShiftDev) ^ kLcStateDev;
      break;
    case kLcStateRma:
      HARDENED_CHECK_EQ(lc_state, kLcStateRma);
d0008c2e:       |        |  |        /-- 00a90663               beq     s2,a0,d0008c3a <shutdown_init+0x82>
d0008c32:       |        |  |        |   0000                   unimp
d0008c34:       |        |  |        |   0000                   unimp
d0008c36:       |        |  |        |   0000                   unimp
d0008c38:       |        |  |        |   0000                   unimp
d0008c3a:       |        |  |        \-> 49e1                   li      s3,24
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008c3c:       |        |  |            45e1                   li      a1,24
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:116
      lc_shift = kLcShiftRma;
      lc_shift_masked = launder32(kLcShiftRma) ^ kLcStateRma;
d0008c3e:       |        |  |            00a5ca33               xor     s4,a1,a0
d0008c42:       |        |  |        /-- a00d                   j       d0008c64 <shutdown_init+0xac>
d0008c44:       |        |  \--------|-> 65f255b7               lui     a1,0x65f25
d0008c48:       |        |           |   20f58593               addi    a1,a1,527 # 65f2520f <_epmp_stack_guard_na4+0x2df1e20f>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:90
  switch (launder32(lc_state)) {
d0008c4c:       |  /-----|-----------|-- 24b51763               bne     a0,a1,d0008e9a <shutdown_init+0x2e2>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008c50:       |  |     |           |   4501                   li      a0,0
d0008c52:       |  |     |           |   4981                   li      s3,0
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:97
      HARDENED_CHECK_EQ(lc_state, kLcStateProd);
d0008c54:       |  |     +-----------|-- 00b90663               beq     s2,a1,d0008c60 <shutdown_init+0xa8>
d0008c58:       |  |     |           |   0000                   unimp
d0008c5a:       |  |     |           |   0000                   unimp
d0008c5c:       |  |     |           |   0000                   unimp
d0008c5e:       |  |     |           |   0000                   unimp
d0008c60:       |  |     \-----------|-> 00b54a33               xor     s4,a0,a1
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:128
  // Each of these OTP words is composed of 4 byte enums with the enable and
  // escalate configs per alert class (a/b/c/d).
  size_t i = 0;
  rom_error_t error = kErrorOk;
  uint32_t class_enable =
      otp_read32(OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_ALERT_CLASS_EN_OFFSET);
d0008c64:       |  |                 \-> 36800513               li      a0,872
d0008c68:       |  |                     69b010ef               jal     ra,d000ab02 <otp_read32>
d0008c6c:       |  |                     842a                   mv      s0,a0
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:130
  uint32_t class_escalate =
      otp_read32(OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_ALERT_ESCALATION_OFFSET);
d0008c6e:       |  |                     36c00513               li      a0,876
d0008c72:       |  |                     691010ef               jal     ra,d000ab02 <otp_read32>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008c76:       |  |                     4581                   li      a1,0
d0008c78:       |  |                     5afd                   li      s5,-1
d0008c7a:       |  |                     460d                   li      a2,3
d0008c7c:       |  |                     5b7d                   li      s6,-1
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:133
  alert_enable_t enable[ALERT_CLASSES];
  alert_escalate_t escalate[ALERT_CLASSES];
  for (i = 0; launder32(i) < ALERT_CLASSES; ++i) {
d0008c7e:       |  |              /----- 02b66e63               bltu    a2,a1,d0008cba <shutdown_init+0x102>
d0008c82:       |  |              |      4601                   li      a2,0
d0008c84:       |  |              |      1874                   addi    a3,sp,60
d0008c86:       |  |              |      1078                   addi    a4,sp,44
d0008c88:       |  |              |      4585                   li      a1,1
d0008c8a:       |  |              |      4791                   li      a5,4
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
d0008c8c:       |  |              |  /-> 00c454b3               srl     s1,s0,a2
d0008c90:       |  |              |  |   0ff4f493               andi    s1,s1,255
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:134
    enable[i] = (alert_enable_t)bitfield_field32_read(
d0008c94:       |  |              |  |   c284                   sw      s1,0(a3)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
d0008c96:       |  |              |  |   00c554b3               srl     s1,a0,a2
d0008c9a:       |  |              |  |   0ff4f493               andi    s1,s1,255
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:136
        class_enable, (bitfield_field32_t){.mask = 0xff, .index = i * 8});
    escalate[i] = (alert_escalate_t)bitfield_field32_read(
d0008c9e:       |  |              |  |   c304                   sw      s1,0(a4)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008ca0:       |  |              |  |   84ae                   mv      s1,a1
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:133
  for (i = 0; launder32(i) < ALERT_CLASSES; ++i) {
d0008ca2:       |  |              |  |   0691                   addi    a3,a3,4
d0008ca4:       |  |              |  |   0711                   addi    a4,a4,4
d0008ca6:       |  |              |  |   0585                   addi    a1,a1,1
d0008ca8:       |  |              |  |   0621                   addi    a2,a2,8
d0008caa:       |  |              |  \-- fef4e1e3               bltu    s1,a5,d0008c8c <shutdown_init+0xd4>
d0008cae:       |  |              |      4515                   li      a0,5
d0008cb0:       |  |              |      73900b13               li      s6,1849
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:139
        class_escalate, (bitfield_field32_t){.mask = 0xff, .index = i * 8});
  }
  if (i != ALERT_CLASSES) {
d0008cb4:       |  |              +----- 00a58363               beq     a1,a0,d0008cba <shutdown_init+0x102>
d0008cb8:       |  |              |      5b7d                   li      s6,-1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008cba:       |  |              \----> 4501                   li      a0,0
d0008cbc:       |  |                     04000593               li      a1,64
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:145
    error = kErrorUnknown;
  }

  // For each alert, read its corresponding OTP word and extract the class
  // configuration for the current lifecycle state.
  for (i = 0; launder32(i) < ALERT_HANDLER_ALERT_CLASS_SHADOWED_MULTIREG_COUNT;
d0008cc0:       |  |  /----------------- 06a5e863               bltu    a1,a0,d0008d30 <shutdown_init+0x178>
d0008cc4:       |  |  |                  4481                   li      s1,0
d0008cc6:       |  |  |                  37000413               li      s0,880
d0008cca:       |  |  |                  03200a93               li      s5,50
d0008cce:       |  |  |                  03c10b93               addi    s7,sp,60
d0008cd2:       |  |  |                  73900c13               li      s8,1849
d0008cd6:       |  |  |                  04100c93               li      s9,65
d0008cda:       |  |  |                  0a700d13               li      s10,167
d0008cde:       |  |  |                  06400d93               li      s11,100
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:148
       ++i) {
    uint32_t value =
        otp_read32(OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_ALERT_CLASSIFICATION_OFFSET +
d0008ce2:       |  |  |  /-------------> 8522                   mv      a0,s0
d0008ce4:       |  |  |  |               61f010ef               jal     ra,d000ab02 <otp_read32>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
d0008ce8:       |  |  |  |               01355533               srl     a0,a0,s3
d0008cec:       |  |  |  |               0ff57593               andi    a1,a0,255
clsindex():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:64
  switch (cls) {
d0008cf0:       |  |  |  |  /----------- 01558a63               beq     a1,s5,d0008d04 <shutdown_init+0x14c>
d0008cf4:       |  |  |  |  |        /-- 01a58663               beq     a1,s10,d0008d00 <shutdown_init+0x148>
d0008cf8:       |  |  |  |  |  /-----|-- 01b59863               bne     a1,s11,d0008d08 <shutdown_init+0x150>
d0008cfc:       |  |  |  |  |  |     |   4505                   li      a0,1
d0008cfe:       |  |  |  |  |  |  /--|-- a031                   j       d0008d0a <shutdown_init+0x152>
d0008d00:       |  |  |  |  |  |  |  \-> 4509                   li      a0,2
d0008d02:       |  |  |  |  |  |  +----- a021                   j       d0008d0a <shutdown_init+0x152>
d0008d04:       |  |  |  |  \--|--|----> 450d                   li      a0,3
d0008d06:       |  |  |  |     |  +----- a011                   j       d0008d0a <shutdown_init+0x152>
d0008d08:       |  |  |  |     \--|----> 4501                   li      a0,0
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:152
                   i * sizeof(uint32_t));
    alert_class_t cls = (alert_class_t)bitfield_field32_read(
        value, (bitfield_field32_t){.mask = 0xff, .index = lc_shift});
    rom_error_t e = alert_configure(i, cls, enable[clsindex(cls)]);
d0008d0a:       |  |  |  |        \----> 050a                   slli    a0,a0,0x2
d0008d0c:       |  |  |  |               955e                   add     a0,a0,s7
d0008d0e:       |  |  |  |               4110                   lw      a2,0(a0)
d0008d10:       |  |  |  |               8526                   mv      a0,s1
d0008d12:       |  |  |  |               2cb9                   jal     d0008f70 <alert_configure>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:153
    if (e != kErrorOk) {
d0008d14:       |  |  |  |           /-- 01850363               beq     a0,s8,d0008d1a <shutdown_init+0x162>
d0008d18:       |  |  |  |           |   8b2a                   mv      s6,a0
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:146
       ++i) {
d0008d1a:       |  |  |  |           \-> 0485                   addi    s1,s1,1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008d1c:       |  |  |  |               8526                   mv      a0,s1
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:145
  for (i = 0; launder32(i) < ALERT_HANDLER_ALERT_CLASS_SHADOWED_MULTIREG_COUNT;
d0008d1e:       |  |  |  |               0411                   addi    s0,s0,4
d0008d20:       |  |  |  \-------------- fd9561e3               bltu    a0,s9,d0008ce2 <shutdown_init+0x12a>
d0008d24:       |  |  |                  04100513               li      a0,65
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:159
      // Keep going if there is an error programming one alert.  We want to
      // program them all.
      error = e;
    }
  }
  if (i != ALERT_HANDLER_ALERT_CLASS_SHADOWED_MULTIREG_COUNT) {
d0008d28:       |  |  |              /-- 00a48363               beq     s1,a0,d0008d2e <shutdown_init+0x176>
d0008d2c:       |  |  |              |   5b7d                   li      s6,-1
d0008d2e:       |  |  |              \-> 8ada                   mv      s5,s6
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008d30:       |  |  \----------------> 4501                   li      a0,0
d0008d32:       |  |                     4619                   li      a2,6
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:165
    error = kErrorUnknown;
  }

  // For each local alert, read its corresponding OTP word and extract the class
  // configuration for the current lifecycle state.
  for (i = 0;
d0008d34:       |  |  /----------------- 06a66663               bltu    a2,a0,d0008da0 <shutdown_init+0x1e8>
d0008d38:       |  |  |                  4481                   li      s1,0
d0008d3a:       |  |  |                  4b000413               li      s0,1200
d0008d3e:       |  |  |                  03200b13               li      s6,50
d0008d42:       |  |  |                  03c10b93               addi    s7,sp,60
d0008d46:       |  |  |                  73900c13               li      s8,1849
d0008d4a:       |  |  |                  4c9d                   li      s9,7
d0008d4c:       |  |  |                  0a700d13               li      s10,167
d0008d50:       |  |  |                  06400d93               li      s11,100
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:168
       launder32(i) < ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_MULTIREG_COUNT;
       ++i) {
    uint32_t value = otp_read32(
d0008d54:       |  |  |  /-------------> 8522                   mv      a0,s0
d0008d56:       |  |  |  |               5ad010ef               jal     ra,d000ab02 <otp_read32>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
d0008d5a:       |  |  |  |               01355533               srl     a0,a0,s3
d0008d5e:       |  |  |  |               0ff57593               andi    a1,a0,255
clsindex():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:64
  switch (cls) {
d0008d62:       |  |  |  |  /----------- 01658a63               beq     a1,s6,d0008d76 <shutdown_init+0x1be>
d0008d66:       |  |  |  |  |        /-- 01a58663               beq     a1,s10,d0008d72 <shutdown_init+0x1ba>
d0008d6a:       |  |  |  |  |  /-----|-- 01b59863               bne     a1,s11,d0008d7a <shutdown_init+0x1c2>
d0008d6e:       |  |  |  |  |  |     |   4505                   li      a0,1
d0008d70:       |  |  |  |  |  |  /--|-- a031                   j       d0008d7c <shutdown_init+0x1c4>
d0008d72:       |  |  |  |  |  |  |  \-> 4509                   li      a0,2
d0008d74:       |  |  |  |  |  |  +----- a021                   j       d0008d7c <shutdown_init+0x1c4>
d0008d76:       |  |  |  |  \--|--|----> 450d                   li      a0,3
d0008d78:       |  |  |  |     |  +----- a011                   j       d0008d7c <shutdown_init+0x1c4>
d0008d7a:       |  |  |  |     \--|----> 4501                   li      a0,0
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:173
        OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_LOCAL_ALERT_CLASSIFICATION_OFFSET +
        i * sizeof(uint32_t));
    alert_class_t cls = (alert_class_t)bitfield_field32_read(
        value, (bitfield_field32_t){.mask = 0xff, .index = lc_shift});
    rom_error_t e = alert_local_configure(i, cls, enable[clsindex(cls)]);
d0008d7c:       |  |  |  |        \----> 050a                   slli    a0,a0,0x2
d0008d7e:       |  |  |  |               955e                   add     a0,a0,s7
d0008d80:       |  |  |  |               4110                   lw      a2,0(a0)
d0008d82:       |  |  |  |               8526                   mv      a0,s1
d0008d84:       |  |  |  |               2475                   jal     d0009030 <alert_local_configure>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:174
    if (e != kErrorOk) {
d0008d86:       |  |  |  |           /-- 01850363               beq     a0,s8,d0008d8c <shutdown_init+0x1d4>
d0008d8a:       |  |  |  |           |   8aaa                   mv      s5,a0
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:167
       ++i) {
d0008d8c:       |  |  |  |           \-> 0485                   addi    s1,s1,1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008d8e:       |  |  |  |               8526                   mv      a0,s1
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:165
  for (i = 0;
d0008d90:       |  |  |  |               0411                   addi    s0,s0,4
d0008d92:       |  |  |  \-------------- fd9561e3               bltu    a0,s9,d0008d54 <shutdown_init+0x19c>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:180
      // Keep going if there is an error programming one alert.  We want to
      // program them all.
      error = e;
    }
  }
  if (i != ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_MULTIREG_COUNT) {
d0008d96:       |  |  |                  ff948513               addi    a0,s1,-7
d0008d9a:       |  |  |                  00153593               seqz    a1,a0
d0008d9e:       |  |  |              /-- a011                   j       d0008da2 <shutdown_init+0x1ea>
d0008da0:       |  |  \--------------|-> 4581                   li      a1,0
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008da2:       |  |                 \-> 4601                   li      a2,0
d0008da4:       |  |                     468d                   li      a3,3
d0008da6:       |  |                     557d                   li      a0,-1
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:197
      kAlertClassB,
      kAlertClassC,
      kAlertClassD,
  };
  alert_class_config_t config;
  for (i = 0; launder32(i) < ALERT_CLASSES; ++i) {
d0008da8:       |  |        /----------- 0cc6ea63               bltu    a3,a2,d0008e7c <shutdown_init+0x2c4>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:185
  if ((lc_shift_masked ^ lc_state) != lc_shift) {
d0008dac:       |  |        |            012a4533               xor     a0,s4,s2
d0008db0:       |  |        |            01354533               xor     a0,a0,s3
d0008db4:       |  |        |            00153513               seqz    a0,a0
d0008db8:       |  |        |            8d6d                   and     a0,a0,a1
d0008dba:       |  |        |        /-- e111                   bnez    a0,d0008dbe <shutdown_init+0x206>
d0008dbc:       |  |        |        |   5afd                   li      s5,-1
d0008dbe:       |  |        |        \-> 4c01                   li      s8,0
d0008dc0:       |  |        |            51000913               li      s2,1296
d0008dc4:       |  |        |            03c10a13               addi    s4,sp,60
d0008dc8:       |  |        |            02c10b13               addi    s6,sp,44
d0008dcc:       |  |        |            4b8d                   li      s7,3
d0008dce:       |  |        |            4491                   li      s1,4
d0008dd0:       |  |        |            00002d17               auipc   s10,0x2
d0008dd4:       |  |        |            72cd0d13               addi    s10,s10,1836 # d000b4fc <_text_end+0x2e8>
d0008dd8:       |  |        |            73900d93               li      s11,1849
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:198
    config.enabled = enable[i];
d0008ddc:       |  |        |  /-------> 002c1993               slli    s3,s8,0x2
d0008de0:       |  |        |  |         013a0533               add     a0,s4,s3
d0008de4:       |  |        |  |         4108                   lw      a0,0(a0)
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:199
    config.escalation = escalate[i];
d0008de6:       |  |        |  |         013b05b3               add     a1,s6,s3
d0008dea:       |  |        |  |         418c                   lw      a1,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:198
    config.enabled = enable[i];
d0008dec:       |  |        |  |         c42a                   sw      a0,8(sp)
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:199
    config.escalation = escalate[i];
d0008dee:       |  |        |  |         c62e                   sw      a1,12(sp)
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:201
    config.accum_threshold =
        otp_read32(OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_ALERT_ACCUM_THRESH_OFFSET +
d0008df0:       |  |        |  |         4f098513               addi    a0,s3,1264
d0008df4:       |  |        |  |         50f010ef               jal     ra,d000ab02 <otp_read32>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:200
    config.accum_threshold =
d0008df8:       |  |        |  |         c82a                   sw      a0,16(sp)
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:204
                   i * sizeof(uint32_t));
    config.timeout_cycles =
        otp_read32(OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_ALERT_TIMEOUT_CYCLES_OFFSET +
d0008dfa:       |  |        |  |         50098513               addi    a0,s3,1280
d0008dfe:       |  |        |  |         505010ef               jal     ra,d000ab02 <otp_read32>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008e02:       |  |        |  |         4581                   li      a1,0
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:203
    config.timeout_cycles =
d0008e04:       |  |        |  |         ca2a                   sw      a0,20(sp)
d0008e06:       |  |        |  |         547d                   li      s0,-1
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:207
                   i * sizeof(uint32_t));
    size_t phase = 0;
    for (; launder32(phase) < ARRAYSIZE(config.phase_cycles); ++phase) {
d0008e08:       |  |        |  |  /----- 02bbe863               bltu    s7,a1,d0008e38 <shutdown_init+0x280>
d0008e0c:       |  |        |  |  |      4c85                   li      s9,1
d0008e0e:       |  |        |  |  |      01810a13               addi    s4,sp,24
d0008e12:       |  |        |  |  |      844a                   mv      s0,s2
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:208
      config.phase_cycles[phase] = otp_read32(
d0008e14:       |  |        |  |  |  /-> 8522                   mv      a0,s0
d0008e16:       |  |        |  |  |  |   4ed010ef               jal     ra,d000ab02 <otp_read32>
d0008e1a:       |  |        |  |  |  |   00aa2023               sw      a0,0(s4)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008e1e:       |  |        |  |  |  |   8566                   mv      a0,s9
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:207
    for (; launder32(phase) < ARRAYSIZE(config.phase_cycles); ++phase) {
d0008e20:       |  |        |  |  |  |   0411                   addi    s0,s0,4
d0008e22:       |  |        |  |  |  |   0c85                   addi    s9,s9,1
d0008e24:       |  |        |  |  |  |   0a11                   addi    s4,s4,4
d0008e26:       |  |        |  |  |  \-- fe9567e3               bltu    a0,s1,d0008e14 <shutdown_init+0x25c>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:212
          OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_ALERT_PHASE_CYCLES_OFFSET +
          (i * ARRAYSIZE(config.phase_cycles) + phase) * sizeof(uint32_t));
    }
    if (phase != ARRAYSIZE(config.phase_cycles)) {
d0008e2a:       |  |        |  |  |      4515                   li      a0,5
d0008e2c:       |  |        |  |  |  /-- 00ac8363               beq     s9,a0,d0008e32 <shutdown_init+0x27a>
d0008e30:       |  |        |  |  |  |   5afd                   li      s5,-1
d0008e32:       |  |        |  |  |  \-> 8456                   mv      s0,s5
d0008e34:       |  |        |  |  |      03c10a13               addi    s4,sp,60
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:216
      error = kErrorUnknown;
    }

    rom_error_t e = alert_class_configure(kClasses[i], &config);
d0008e38:       |  |        |  |  \----> 01a98533               add     a0,s3,s10
d0008e3c:       |  |        |  |         4108                   lw      a0,0(a0)
d0008e3e:       |  |        |  |         002c                   addi    a1,sp,8
d0008e40:       |  |        |  |         247d                   jal     d00090ee <alert_class_configure>
d0008e42:       |  |        |  |         8aa2                   mv      s5,s0
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:217
    if (e != kErrorOk) {
d0008e44:       |  |        |  |     /-- 01b50363               beq     a0,s11,d0008e4a <shutdown_init+0x292>
d0008e48:       |  |        |  |     |   8aaa                   mv      s5,a0
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:197
  for (i = 0; launder32(i) < ALERT_CLASSES; ++i) {
d0008e4a:       |  |        |  |     \-> 0c05                   addi    s8,s8,1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0008e4c:       |  |        |  |         8562                   mv      a0,s8
shutdown_init():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:197
d0008e4e:       |  |        |  |         0941                   addi    s2,s2,16
d0008e50:       |  |        |  \-------- f89566e3               bltu    a0,s1,d0008ddc <shutdown_init+0x224>
d0008e54:       |  |        |            4511                   li      a0,4
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:223
      // Keep going if there is an error programming an alert class. We want to
      // program them all.
      error = e;
    }
  }
  if (i != ALERT_CLASSES) {
d0008e56:       |  |        |        /-- 00ac0363               beq     s8,a0,d0008e5c <shutdown_init+0x2a4>
d0008e5a:       |  |        |        |   5afd                   li      s5,-1
d0008e5c:       |  |        |        \-> 8556                   mv      a0,s5
d0008e5e:       |  |        +----------- a839                   j       d0008e7c <shutdown_init+0x2c4>
d0008e60:       \--|--------|----------> b28665b7               lui     a1,0xb2866
d0008e64:          |        |            fbb58593               addi    a1,a1,-69 # b2865fbb <_stack_end+0xd2845fbb>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:90
  switch (launder32(lc_state)) {
d0008e68:          +--------|----------- 02b51963               bne     a0,a1,d0008e9a <shutdown_init+0x2e2>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:92
      HARDENED_CHECK_EQ(lc_state, kLcStateTest);
d0008e6c:          |        |        /-- 00b90663               beq     s2,a1,d0008e78 <shutdown_init+0x2c0>
d0008e70:          |        |        |   0000                   unimp
d0008e72:          |        |        |   0000                   unimp
d0008e74:          |        |        |   0000                   unimp
d0008e76:          |        |        |   0000                   unimp
d0008e78:          |        |        \-> 73900513               li      a0,1849
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:227
    error = kErrorUnknown;
  }
  return error;
}
d0008e7c:          |        \----------> 4db6                   lw      s11,76(sp)
d0008e7e:          |                     4d46                   lw      s10,80(sp)
d0008e80:          |                     4cd6                   lw      s9,84(sp)
d0008e82:          |                     4c66                   lw      s8,88(sp)
d0008e84:          |                     4bf6                   lw      s7,92(sp)
d0008e86:          |                     5b06                   lw      s6,96(sp)
d0008e88:          |                     5a96                   lw      s5,100(sp)
d0008e8a:          |                     5a26                   lw      s4,104(sp)
d0008e8c:          |                     59b6                   lw      s3,108(sp)
d0008e8e:          |                     5946                   lw      s2,112(sp)
d0008e90:          |                     54d6                   lw      s1,116(sp)
d0008e92:          |                     5466                   lw      s0,120(sp)
d0008e94:          |                     50f6                   lw      ra,124(sp)
d0008e96:          |                     6109                   addi    sp,sp,128
d0008e98:          |                     8082                   ret
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:119
      HARDENED_UNREACHABLE();
d0008e9a:          \-------------------> 0000                   unimp
d0008e9c:                                0000                   unimp
d0008e9e:                                0000                   unimp
d0008ea0:                                0000                   unimp

d0008ea2 <rom_printf>:
rom_printf():
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:13
#include <stdarg.h>
#include <stdint.h>

#include "sw/device/silicon_creator/lib/drivers/uart.h"

rom_error_t rom_printf(const char *format, ...) {
d0008ea2:                          715d                 addi    sp,sp,-80
d0008ea4:                          d606                 sw      ra,44(sp)
d0008ea6:                          d422                 sw      s0,40(sp)
d0008ea8:                          d226                 sw      s1,36(sp)
d0008eaa:                          d04a                 sw      s2,32(sp)
d0008eac:                          ce4e                 sw      s3,28(sp)
d0008eae:                          cc52                 sw      s4,24(sp)
d0008eb0:                          ca56                 sw      s5,20(sp)
d0008eb2:                          c85a                 sw      s6,16(sp)
d0008eb4:                          c65e                 sw      s7,12(sp)
d0008eb6:                          84aa                 mv      s1,a0
d0008eb8:                          c6c6                 sw      a7,76(sp)
d0008eba:                          c4c2                 sw      a6,72(sp)
d0008ebc:                          c2be                 sw      a5,68(sp)
d0008ebe:                          c0ba                 sw      a4,64(sp)
d0008ec0:                          de36                 sw      a3,60(sp)
d0008ec2:                          dc32                 sw      a2,56(sp)
d0008ec4:                          da2e                 sw      a1,52(sp)
d0008ec6:                          1848                 addi    a0,sp,52
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:15
  va_list args;
  va_start(args, format);
d0008ec8:                          c42a                 sw      a0,8(sp)
d0008eca:                          02500a13             li      s4,37
d0008ece:                          014c4537             lui     a0,0x14c4
d0008ed2:                          70d50913             addi    s2,a0,1805 # 14c470d <_rom_ext_virtual_size+0x144470d>
d0008ed6:                          07800993             li      s3,120
d0008eda:                          00002b97             auipc   s7,0x2
d0008ede:                          642b8b93             addi    s7,s7,1602 # d000b51c <rom_printf.kHexTable>
d0008ee2:                          07300a93             li      s5,115
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:17

  while (*format != '\0') {
d0008ee6:       /----------------> 0004c503             lbu     a0,0(s1)
d0008eea:       |              /-- 01450763             beq     a0,s4,d0008ef8 <rom_printf+0x56>
d0008eee:       |  /-----------|-- c13d                 beqz    a0,d0008f54 <rom_printf+0xb2>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:19
    if (*format != '%') {
      uart_putchar(*format++);
d0008ef0:       |  |           |   0485                 addi    s1,s1,1
d0008ef2:       |  |           |   187000ef             jal     ra,d0009878 <uart_putchar>
d0008ef6:       +--|-----------|-- bfc5                 j       d0008ee6 <rom_printf+0x44>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:24
      continue;
    }

    ++format;  // Skip over the '%'.
    switch (*format++) {
d0008ef8:       |  |           \-> 0014c503             lbu     a0,1(s1)
d0008efc:       |  |               00248b13             addi    s6,s1,2
d0008f00:       |  |     /-------- 03350863             beq     a0,s3,d0008f30 <rom_printf+0x8e>
d0008f04:       |  |  /--|-------- 05551a63             bne     a0,s5,d0008f58 <rom_printf+0xb6>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:27
      case 's': {
        // Print a null-terminated string.
        const char *str = va_arg(args, const char *);
d0008f08:       |  |  |  |         4522                 lw      a0,8(sp)
d0008f0a:       |  |  |  |         00450593             addi    a1,a0,4
d0008f0e:       |  |  |  |         c42e                 sw      a1,8(sp)
d0008f10:       |  |  |  |         410c                 lw      a1,0(a0)
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:28
        while (*str != '\0') {
d0008f12:       |  |  |  |         0005c503             lbu     a0,0(a1)
d0008f16:       |  |  |  |         84da                 mv      s1,s6
d0008f18:       +--|--|--|-------- d579                 beqz    a0,d0008ee6 <rom_printf+0x44>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:17
  while (*format != '\0') {
d0008f1a:       |  |  |  |         00158413             addi    s0,a1,1
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:29
          uart_putchar(*str++);
d0008f1e:       |  |  |  |     /-> 0ff57513             andi    a0,a0,255
d0008f22:       |  |  |  |     |   157000ef             jal     ra,d0009878 <uart_putchar>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:28
        while (*str != '\0') {
d0008f26:       |  |  |  |     |   00044503             lbu     a0,0(s0)
d0008f2a:       |  |  |  |     |   0405                 addi    s0,s0,1
d0008f2c:       |  |  |  |     \-- f96d                 bnez    a0,d0008f1e <rom_printf+0x7c>
d0008f2e:       |  |  |  |  /----- a00d                 j       d0008f50 <rom_printf+0xae>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:36
        break;
      }
      case 'x': {
        // Print an `unsigned int` in hexadecimal.
        static const char kHexTable[16] = "0123456789abcdef";
        unsigned int v = va_arg(args, unsigned int);
d0008f30:       |  |  |  \--|----> 4522                 lw      a0,8(sp)
d0008f32:       |  |  |     |      00450593             addi    a1,a0,4
d0008f36:       |  |  |     |      c42e                 sw      a1,8(sp)
d0008f38:       |  |  |     |      4104                 lw      s1,0(a0)
d0008f3a:       |  |  |     |      4421                 li      s0,8
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:39
        for (int i = 0; i < sizeof(v) * 2; ++i) {
          int shift = sizeof(v) * 8 - 4;
          uart_putchar(kHexTable[v >> shift]);
d0008f3c:       |  |  |     |  /-> 01c4d513             srli    a0,s1,0x1c
d0008f40:       |  |  |     |  |   955e                 add     a0,a0,s7
d0008f42:       |  |  |     |  |   00054503             lbu     a0,0(a0)
d0008f46:       |  |  |     |  |   133000ef             jal     ra,d0009878 <uart_putchar>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:37
        for (int i = 0; i < sizeof(v) * 2; ++i) {
d0008f4a:       |  |  |     |  |   147d                 addi    s0,s0,-1
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:40
          v <<= 4;
d0008f4c:       |  |  |     |  |   0492                 slli    s1,s1,0x4
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:37
        for (int i = 0; i < sizeof(v) * 2; ++i) {
d0008f4e:       |  |  |     |  \-- f47d                 bnez    s0,d0008f3c <rom_printf+0x9a>
d0008f50:       |  |  |     \----> 84da                 mv      s1,s6
d0008f52:       \--|--|----------- bf51                 j       d0008ee6 <rom_printf+0x44>
d0008f54:          \--|----------> 73900913             li      s2,1849
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:52
    }
  }

  va_end(args);
  return kErrorOk;
}
d0008f58:             \----------> 854a                 mv      a0,s2
d0008f5a:                          4bb2                 lw      s7,12(sp)
d0008f5c:                          4b42                 lw      s6,16(sp)
d0008f5e:                          4ad2                 lw      s5,20(sp)
d0008f60:                          4a62                 lw      s4,24(sp)
d0008f62:                          49f2                 lw      s3,28(sp)
d0008f64:                          5902                 lw      s2,32(sp)
d0008f66:                          5492                 lw      s1,36(sp)
d0008f68:                          5422                 lw      s0,40(sp)
d0008f6a:                          50b2                 lw      ra,44(sp)
d0008f6c:                          6161                 addi    sp,sp,80
d0008f6e:                          8082                 ret

d0008f70 <alert_configure>:
alert_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:22
enum {
  kBase = TOP_EARLGREY_ALERT_HANDLER_BASE_ADDR,
};

rom_error_t alert_configure(size_t index, alert_class_t cls,
                            alert_enable_t enabled) {
d0008f70:                             04000693                  li      a3,64
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:23
  if (index >= ALERT_HANDLER_ALERT_CLASS_SHADOWED_MULTIREG_COUNT) {
d0008f74:                         /-- 00a6f763                  bgeu    a3,a0,d0008f82 <alert_configure+0x12>
d0008f78:                         |   01415537                  lui     a0,0x1415
d0008f7c:       /-----------------|-> 80350513                  addi    a0,a0,-2045 # 1414803 <_rom_ext_virtual_size+0x1394803>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:73
      break;
    default:
      return kErrorAlertBadEnable;
  }
  return kErrorOk;
}
d0008f80:       |                 |   8082                      ret
d0008f82:       |                 \-> c01506b7                  lui     a3,0xc0150
d0008f86:       |                     22068693                  addi    a3,a3,544 # c0150220 <_stack_end+0xe0130220>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:26
  index *= 4;
d0008f8a:       |                     00251713                  slli    a4,a0,0x2
d0008f8e:       |                     09300793                  li      a5,147
d0008f92:       |                     73900513                  li      a0,1849
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:28
  switch (cls) {
d0008f96:       |                 /-- 02b7d563                  bge     a5,a1,d0008fc0 <alert_configure+0x50>
d0008f9a:       |                 |   09400793                  li      a5,148
d0008f9e:       |  /--------------|-- 08f58563                  beq     a1,a5,d0009028 <alert_configure+0xb8>
d0008fa2:       |  |              |   0a700793                  li      a5,167
d0008fa6:       |  |     /--------|-- 02f58963                  beq     a1,a5,d0008fd8 <alert_configure+0x68>
d0008faa:       |  |     |        |   0ee00793                  li      a5,238
d0008fae:       |  |  /--|--------|-- 06f59363                  bne     a1,a5,d0009014 <alert_configure+0xa4>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:31
          kBase + ALERT_HANDLER_ALERT_CLASS_SHADOWED_0_REG_OFFSET + index,
d0008fb2:       |  |  |  |        |   00d705b3                  add     a1,a4,a3
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:94
 *
 * @param addr the address to write to.
 * @param value the value to write.
 */
inline void abs_mmio_write32_shadowed(uint32_t addr, uint32_t value) {
  *((volatile uint32_t *)addr) = value;
d0008fb6:       |  |  |  |        |   0005a023                  sw      zero,0(a1)
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:95
  *((volatile uint32_t *)addr) = value;
d0008fba:       |  |  |  |        |   0005a023                  sw      zero,0(a1)
d0008fbe:       |  |  |  |  /-----|-- a035                      j       d0008fea <alert_configure+0x7a>
d0008fc0:       |  |  |  |  |     \-> 03200793                  li      a5,50
alert_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:28
  switch (cls) {
d0008fc4:       |  |  |  |  |  /----- 00f58e63                  beq     a1,a5,d0008fe0 <alert_configure+0x70>
d0008fc8:       |  |  |  |  |  |      06400793                  li      a5,100
d0008fcc:       |  |  +--|--|--|----- 04f59463                  bne     a1,a5,d0009014 <alert_configure+0xa4>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:36
          kBase + ALERT_HANDLER_ALERT_CLASS_SHADOWED_0_REG_OFFSET + index,
d0008fd0:       |  |  |  |  |  |      00d705b3                  add     a1,a4,a3
d0008fd4:       |  |  |  |  |  |      4785                      li      a5,1
d0008fd6:       |  |  |  |  |  |  /-- a801                      j       d0008fe6 <alert_configure+0x76>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:41
          kBase + ALERT_HANDLER_ALERT_CLASS_SHADOWED_0_REG_OFFSET + index,
d0008fd8:       |  |  |  \--|--|--|-> 00d705b3                  add     a1,a4,a3
d0008fdc:       |  |  |     |  |  |   4789                      li      a5,2
d0008fde:       |  |  |     |  |  +-- a021                      j       d0008fe6 <alert_configure+0x76>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:46
          kBase + ALERT_HANDLER_ALERT_CLASS_SHADOWED_0_REG_OFFSET + index,
d0008fe0:       |  |  |     |  \--|-> 00d705b3                  add     a1,a4,a3
d0008fe4:       |  |  |     |     |   478d                      li      a5,3
d0008fe6:       |  |  |     |     \-> c19c                      sw      a5,0(a1)
d0008fe8:       |  |  |     |         c19c                      sw      a5,0(a1)
d0008fea:       |  |  |     \-------> 459d                      li      a1,7
d0008fec:       |  |  |           /-- 02b60763                  beq     a2,a1,d000901a <alert_configure+0xaa>
d0008ff0:       |  |  |           |   0a900593                  li      a1,169
d0008ff4:       |  +--|-----------|-- 02b60a63                  beq     a2,a1,d0009028 <alert_configure+0xb8>
d0008ff8:       |  |  |           |   0d200593                  li      a1,210
d0008ffc:       |  |  |        /--|-- 02b61763                  bne     a2,a1,d000902a <alert_configure+0xba>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:61
          kBase + ALERT_HANDLER_ALERT_EN_SHADOWED_0_REG_OFFSET + index, 1);
d0009000:       |  |  |        |  |   00e685b3                  add     a1,a3,a4
d0009004:       |  |  |        |  |   4605                      li      a2,1
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:94
  *((volatile uint32_t *)addr) = value;
d0009006:       |  |  |        |  |   eec5ae23                  sw      a2,-260(a1)
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:95
  *((volatile uint32_t *)addr) = value;
d000900a:       |  |  |        |  |   eec5ae23                  sw      a2,-260(a1)
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d000900e:       |  |  |        |  |   de05ac23                  sw      zero,-520(a1)
alert_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:73
}
d0009012:       |  |  |        |  |   8082                      ret
d0009014:       |  |  \--------|--|-> 02415537                  lui     a0,0x2415
d0009018:       +--|-----------|--|-- b795                      j       d0008f7c <alert_configure+0xc>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:67
          kBase + ALERT_HANDLER_ALERT_EN_SHADOWED_0_REG_OFFSET + index, 1);
d000901a:       |  |           |  \-> 00e685b3                  add     a1,a3,a4
d000901e:       |  |           |      4605                      li      a2,1
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:94
  *((volatile uint32_t *)addr) = value;
d0009020:       |  |           |      eec5ae23                  sw      a2,-260(a1)
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:95
  *((volatile uint32_t *)addr) = value;
d0009024:       |  |           |      eec5ae23                  sw      a2,-260(a1)
alert_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:73
}
d0009028:       |  \-----------|----> 8082                      ret
d000902a:       |              \----> 03415537                  lui     a0,0x3415
d000902e:       \-------------------- b7b9                      j       d0008f7c <alert_configure+0xc>

d0009030 <alert_local_configure>:
alert_local_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:76

rom_error_t alert_local_configure(size_t index, alert_class_t cls,
                                  alert_enable_t enabled) {
d0009030:                             4699                      li      a3,6
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:77
  if (index >= ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_MULTIREG_COUNT) {
d0009032:                         /-- 00a6f763                  bgeu    a3,a0,d0009040 <alert_local_configure+0x10>
d0009036:                         |   01415537                  lui     a0,0x1415
d000903a:       /-----------------|-> 80350513                  addi    a0,a0,-2045 # 1414803 <_rom_ext_virtual_size+0x1394803>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:127
      break;
    default:
      return kErrorAlertBadEnable;
  }
  return kErrorOk;
}
d000903e:       |                 |   8082                      ret
d0009040:       |                 \-> c01506b7                  lui     a3,0xc0150
d0009044:       |                     46068693                  addi    a3,a3,1120 # c0150460 <_stack_end+0xe0130460>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:80
  index *= 4;
d0009048:       |                     00251713                  slli    a4,a0,0x2
d000904c:       |                     09300793                  li      a5,147
d0009050:       |                     73900513                  li      a0,1849
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:82
  switch (cls) {
d0009054:       |                 /-- 02b7d563                  bge     a5,a1,d000907e <alert_local_configure+0x4e>
d0009058:       |                 |   09400793                  li      a5,148
d000905c:       |  /--------------|-- 08f58563                  beq     a1,a5,d00090e6 <alert_local_configure+0xb6>
d0009060:       |  |              |   0a700793                  li      a5,167
d0009064:       |  |     /--------|-- 02f58963                  beq     a1,a5,d0009096 <alert_local_configure+0x66>
d0009068:       |  |     |        |   0ee00793                  li      a5,238
d000906c:       |  |  /--|--------|-- 06f59363                  bne     a1,a5,d00090d2 <alert_local_configure+0xa2>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:85
          kBase + ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_0_REG_OFFSET + index,
d0009070:       |  |  |  |        |   00d705b3                  add     a1,a4,a3
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:94
  *((volatile uint32_t *)addr) = value;
d0009074:       |  |  |  |        |   0005a023                  sw      zero,0(a1)
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:95
  *((volatile uint32_t *)addr) = value;
d0009078:       |  |  |  |        |   0005a023                  sw      zero,0(a1)
d000907c:       |  |  |  |  /-----|-- a035                      j       d00090a8 <alert_local_configure+0x78>
d000907e:       |  |  |  |  |     \-> 03200793                  li      a5,50
alert_local_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:82
  switch (cls) {
d0009082:       |  |  |  |  |  /----- 00f58e63                  beq     a1,a5,d000909e <alert_local_configure+0x6e>
d0009086:       |  |  |  |  |  |      06400793                  li      a5,100
d000908a:       |  |  +--|--|--|----- 04f59463                  bne     a1,a5,d00090d2 <alert_local_configure+0xa2>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:90
          kBase + ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_0_REG_OFFSET + index,
d000908e:       |  |  |  |  |  |      00d705b3                  add     a1,a4,a3
d0009092:       |  |  |  |  |  |      4785                      li      a5,1
d0009094:       |  |  |  |  |  |  /-- a801                      j       d00090a4 <alert_local_configure+0x74>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:95
          kBase + ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_0_REG_OFFSET + index,
d0009096:       |  |  |  \--|--|--|-> 00d705b3                  add     a1,a4,a3
d000909a:       |  |  |     |  |  |   4789                      li      a5,2
d000909c:       |  |  |     |  |  +-- a021                      j       d00090a4 <alert_local_configure+0x74>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:100
          kBase + ALERT_HANDLER_LOC_ALERT_CLASS_SHADOWED_0_REG_OFFSET + index,
d000909e:       |  |  |     |  \--|-> 00d705b3                  add     a1,a4,a3
d00090a2:       |  |  |     |     |   478d                      li      a5,3
d00090a4:       |  |  |     |     \-> c19c                      sw      a5,0(a1)
d00090a6:       |  |  |     |         c19c                      sw      a5,0(a1)
d00090a8:       |  |  |     \-------> 459d                      li      a1,7
d00090aa:       |  |  |           /-- 02b60763                  beq     a2,a1,d00090d8 <alert_local_configure+0xa8>
d00090ae:       |  |  |           |   0a900593                  li      a1,169
d00090b2:       |  +--|-----------|-- 02b60a63                  beq     a2,a1,d00090e6 <alert_local_configure+0xb6>
d00090b6:       |  |  |           |   0d200593                  li      a1,210
d00090ba:       |  |  |        /--|-- 02b61763                  bne     a2,a1,d00090e8 <alert_local_configure+0xb8>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:115
          kBase + ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_0_REG_OFFSET + index, 1);
d00090be:       |  |  |        |  |   00e685b3                  add     a1,a3,a4
d00090c2:       |  |  |        |  |   4605                      li      a2,1
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:94
  *((volatile uint32_t *)addr) = value;
d00090c4:       |  |  |        |  |   fec5a223                  sw      a2,-28(a1)
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:95
  *((volatile uint32_t *)addr) = value;
d00090c8:       |  |  |        |  |   fec5a223                  sw      a2,-28(a1)
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d00090cc:       |  |  |        |  |   fc05a423                  sw      zero,-56(a1)
alert_local_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:127
}
d00090d0:       |  |  |        |  |   8082                      ret
d00090d2:       |  |  \--------|--|-> 02415537                  lui     a0,0x2415
d00090d6:       +--|-----------|--|-- b795                      j       d000903a <alert_local_configure+0xa>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:121
          kBase + ALERT_HANDLER_LOC_ALERT_EN_SHADOWED_0_REG_OFFSET + index, 1);
d00090d8:       |  |           |  \-> 00e685b3                  add     a1,a3,a4
d00090dc:       |  |           |      4605                      li      a2,1
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:94
  *((volatile uint32_t *)addr) = value;
d00090de:       |  |           |      fec5a223                  sw      a2,-28(a1)
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:95
  *((volatile uint32_t *)addr) = value;
d00090e2:       |  |           |      fec5a223                  sw      a2,-28(a1)
alert_local_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:127
}
d00090e6:       |  \-----------|----> 8082                      ret
d00090e8:       |              \----> 03415537                  lui     a0,0x3415
d00090ec:       \-------------------- b7b9                      j       d000903a <alert_local_configure+0xa>

d00090ee <alert_class_configure>:
alert_class_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:130

rom_error_t alert_class_configure(alert_class_t cls,
                                  const alert_class_config_t *config) {
d00090ee:                          862a                 mv      a2,a0
d00090f0:                          02415537             lui     a0,0x2415
d00090f4:                          0a600693             li      a3,166
d00090f8:                          80350513             addi    a0,a0,-2045 # 2414803 <_rom_ext_virtual_size+0x2394803>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:147
      reg, ALERT_HANDLER_CLASSA_CTRL_SHADOWED_MAP_E3_FIELD, 3);

  // All of the alert class register blocks are identical but at different
  // offsets.  We'll treat everything like Class A, but add in the offset
  // to the other classes.
  switch (cls) {
d00090fc:                      /-- 00c6cd63             blt     a3,a2,d0009116 <alert_class_configure+0x28>
d0009100:                      |   03200693             li      a3,50
d0009104:                /-----|-- 02d60363             beq     a2,a3,d000912a <alert_class_configure+0x3c>
d0009108:                |     |   06400693             li      a3,100
d000910c:       /--------|-----|-- 08d61063             bne     a2,a3,d000918c <alert_class_configure+0x9e>
d0009110:       |        |     |   03800813             li      a6,56
d0009114:       |        |  /--|-- a005                 j       d0009134 <alert_class_configure+0x46>
d0009116:       |        |  |  \-> 0a700693             li      a3,167
d000911a:       |        |  |  /-- 00d60b63             beq     a2,a3,d0009130 <alert_class_configure+0x42>
d000911e:       |        |  |  |   0ee00693             li      a3,238
d0009122:       +--------|--|--|-- 06d61563             bne     a2,a3,d000918c <alert_class_configure+0x9e>
d0009126:       |        |  |  |   4801                 li      a6,0
d0009128:       |        |  +--|-- a031                 j       d0009134 <alert_class_configure+0x46>
d000912a:       |        \--|--|-> 0a800813             li      a6,168
d000912e:       |           +--|-- a019                 j       d0009134 <alert_class_configure+0x46>
d0009130:       |           |  \-> 07000813             li      a6,112
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:168
      break;
    case kAlertClassX:
    default:
      return kErrorAlertBadClass;
  }
  switch (config->enabled) {
d0009134:       |           \----> 0005a883             lw      a7,0(a1)
d0009138:       |                  471d                 li      a4,7
d000913a:       |                  6511                 lui     a0,0x4
d000913c:       |        /-------- 02e88163             beq     a7,a4,d000915e <alert_class_configure+0x70>
d0009140:       |        |         0a900713             li      a4,169
d0009144:       |        |  /----- 00e88a63             beq     a7,a4,d0009158 <alert_class_configure+0x6a>
d0009148:       |        |  |      0d200513             li      a0,210
d000914c:       |  /-----|--|----- 0aa89c63             bne     a7,a0,d0009204 <alert_class_configure+0x116>
d0009150:       |  |     |  |      6511                 lui     a0,0x4
d0009152:       |  |     |  |      90350713             addi    a4,a0,-1789 # 3903 <_static_critical_size+0x193f>
d0009156:       |  |     |  |  /-- a031                 j       d0009162 <alert_class_configure+0x74>
d0009158:       |  |     |  \--|-> 90050713             addi    a4,a0,-1792
d000915c:       |  |     |     +-- a019                 j       d0009162 <alert_class_configure+0x74>
d000915e:       |  |     \-----|-> 90150713             addi    a4,a0,-1791
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:182
    case kAlertEnableNone:
      break;
    default:
      return kErrorAlertBadEnable;
  }
  switch (config->escalation) {
d0009162:       |  |           \-> 41dc                 lw      a5,4(a1)
d0009164:       |  |               04415537             lui     a0,0x4415
d0009168:       |  |               0b800693             li      a3,184
d000916c:       |  |               80350513             addi    a0,a0,-2045 # 4414803 <_rom_ext_virtual_size+0x4394803>
d0009170:       |  |           /-- 00f6df63             bge     a3,a5,d000918e <alert_class_configure+0xa0>
d0009174:       |  |           |   0b900693             li      a3,185
d0009178:       |  |  /--------|-- 02d78963             beq     a5,a3,d00091aa <alert_class_configure+0xbc>
d000917c:       |  |  |        |   0cb00693             li      a3,203
d0009180:       |  |  |     /--|-- 02d78363             beq     a5,a3,d00091a6 <alert_class_configure+0xb8>
d0009184:       |  |  |     |  |   0d100693             li      a3,209
d0009188:       |  |  |  /--|--|-- 02d78363             beq     a5,a3,d00091ae <alert_class_configure+0xc0>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:227
    abs_mmio_write32(kBase + ALERT_HANDLER_CLASSA_REGWEN_REG_OFFSET + offset,
                     0);
  }

  return kErrorOk;
}
d000918c:       >--|--|--|--|--|-> 8082                 ret
d000918e:       |  |  |  |  |  \-> 02500693             li      a3,37
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:182
  switch (config->escalation) {
d0009192:       |  |  |  |  |  /-- 00d78863             beq     a5,a3,d00091a2 <alert_class_configure+0xb4>
d0009196:       |  |  |  |  |  |   07600693             li      a3,118
d000919a:       +--|--|--|--|--|-- fed799e3             bne     a5,a3,d000918c <alert_class_configure+0x9e>
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d000919e:       |  |  |  |  |  |   02076713             ori     a4,a4,32
d00091a2:       |  |  |  |  |  \-> 01076713             ori     a4,a4,16
d00091a6:       |  |  |  |  \----> 00876713             ori     a4,a4,8
d00091aa:       |  |  \--|-------> 00476713             ori     a4,a4,4
d00091ae:       |  |     \-------> c0150537             lui     a0,0xc0150
d00091b2:       |  |               49850513             addi    a0,a0,1176 # c0150498 <_stack_end+0xe0130498>
alert_class_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:206
      kBase + ALERT_HANDLER_CLASSA_CTRL_SHADOWED_REG_OFFSET + offset, reg);
d00091b6:       |  |               982a                 add     a6,a6,a0
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:94
  *((volatile uint32_t *)addr) = value;
d00091b8:       |  |               00e82223             sw      a4,4(a6)
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:95
  *((volatile uint32_t *)addr) = value;
d00091bc:       |  |               00e82223             sw      a4,4(a6)
alert_class_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:209
      config->accum_threshold);
d00091c0:       |  |               4588                 lw      a0,8(a1)
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:94
  *((volatile uint32_t *)addr) = value;
d00091c2:       |  |               00a82a23             sw      a0,20(a6)
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:95
  *((volatile uint32_t *)addr) = value;
d00091c6:       |  |               00a82a23             sw      a0,20(a6)
alert_class_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:212
      config->timeout_cycles);
d00091ca:       |  |               45d8                 lw      a4,12(a1)
d00091cc:       |  |               4501                 li      a0,0
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:94
  *((volatile uint32_t *)addr) = value;
d00091ce:       |  |               00e82c23             sw      a4,24(a6)
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:95
  *((volatile uint32_t *)addr) = value;
d00091d2:       |  |               00e82c23             sw      a4,24(a6)
d00091d6:       |  |               02080713             addi    a4,a6,32
alert_class_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:213
  for (size_t i = 0; i < 4; ++i) {
d00091da:       |  |               05c1                 addi    a1,a1,16
d00091dc:       |  |               47c1                 li      a5,16
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:217
        config->phase_cycles[i]);
d00091de:       |  |           /-> 00a58633             add     a2,a1,a0
d00091e2:       |  |           |   4210                 lw      a2,0(a2)
d00091e4:       |  |           |   00a706b3             add     a3,a4,a0
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:94
  *((volatile uint32_t *)addr) = value;
d00091e8:       |  |           |   c290                 sw      a2,0(a3)
alert_class_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:213
  for (size_t i = 0; i < 4; ++i) {
d00091ea:       |  |           |   0511                 addi    a0,a0,4
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:95
  *((volatile uint32_t *)addr) = value;
d00091ec:       |  |           |   c290                 sw      a2,0(a3)
alert_class_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:213
d00091ee:       |  |           \-- fef518e3             bne     a0,a5,d00091de <alert_class_configure+0xf0>
d00091f2:       |  |               0d200593             li      a1,210
d00091f6:       |  |               73900513             li      a0,1849
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:220
  if (config->enabled == kAlertEnableLocked) {
d00091fa:       \--|-------------- f8b899e3             bne     a7,a1,d000918c <alert_class_configure+0x9e>
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d00091fe:          |               00082023             sw      zero,0(a6)
alert_class_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/alert.c:227
}
d0009202:          |               8082                 ret
d0009204:          \-------------> 03415537             lui     a0,0x3415
d0009208:                          80350513             addi    a0,a0,-2045 # 3414803 <_rom_ext_virtual_size+0x3394803>
d000920c:                          8082                 ret

d000920e <ast_check>:
ast_check():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:26

enum {
  kBase = TOP_EARLGREY_SENSOR_CTRL_BASE_ADDR,
};

rom_error_t ast_check(lifecycle_state_t lc_state) {
d000920e:                          1141                 addi    sp,sp,-16
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0009210:                          c606                 sw      ra,12(sp)
d0009212:                          85aa                 mv      a1,a0
d0009214:                          cf8d0637             lui     a2,0xcf8d0
d0009218:                          aaa60693             addi    a3,a2,-1366 # cf8cfaaa <_stack_end+0xef8afaaa>
ast_check():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:30
  // In some lifecycle states we want to continue the boot process even if the
  // AST is not initialized. Note that in these states OTP may not have been
  // configured.
  switch (launder32(lc_state)) {
d000921c:                   /----- 02b6d363             bge     a3,a1,d0009242 <ast_check+0x34>
d0009220:                   |      aab60613             addi    a2,a2,-1365
d0009224:                /--|----- 02c58c63             beq     a1,a2,d000925c <ast_check+0x4e>
d0009228:                |  |      0b5a7637             lui     a2,0xb5a7
d000922c:                |  |      5e060613             addi    a2,a2,1504 # b5a75e0 <_rom_ext_virtual_size+0xb5275e0>
d0009230:             /--|--|----- 04c59163             bne     a1,a2,d0009272 <ast_check+0x64>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:38
      return kErrorOk;
    case kLcStateRma:
      HARDENED_CHECK_EQ(lc_state, kLcStateRma);
      return kErrorOk;
    case kLcStateDev:
      HARDENED_CHECK_EQ(lc_state, kLcStateDev);
d0009234:             |  |  |  /-- 00c50663             beq     a0,a2,d0009240 <ast_check+0x32>
d0009238:             |  |  |  |   0000                 unimp
d000923a:             |  |  |  |   0000                 unimp
d000923c:             |  |  |  |   0000                 unimp
d000923e:             |  |  |  |   0000                 unimp
d0009240:          /--|--|--|--\-X a0a9                 j       d000928a <ast_check+0x7c>
d0009242:          |  |  |  \----> 91b9b637             lui     a2,0x91b9b
d0009246:          |  |  |         68a60613             addi    a2,a2,1674 # 91b9b68a <_stack_end+0xb1b7b68a>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:30
  switch (launder32(lc_state)) {
d000924a:       /--|--|--|-------- 0ac59c63             bne     a1,a2,d0009302 <ast_check+0xf4>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:44
      break;
    case kLcStateProd:
      HARDENED_CHECK_EQ(lc_state, kLcStateProd);
      break;
    case kLcStateProdEnd:
      HARDENED_CHECK_EQ(lc_state, kLcStateProdEnd);
d000924e:       |  |  |  |     /-- 00c50663             beq     a0,a2,d000925a <ast_check+0x4c>
d0009252:       |  |  |  |     |   0000                 unimp
d0009254:       |  |  |  |     |   0000                 unimp
d0009256:       |  |  |  |     |   0000                 unimp
d0009258:       |  |  |  |     |   0000                 unimp
d000925a:       |  +--|--|-----\-X a805                 j       d000928a <ast_check+0x7c>
d000925c:       |  |  |  \-------> cf8d05b7             lui     a1,0xcf8d0
d0009260:       |  |  |            aab58593             addi    a1,a1,-1365 # cf8cfaab <_stack_end+0xef8afaab>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:35
      HARDENED_CHECK_EQ(lc_state, kLcStateRma);
d0009264:       |  |  |        /-- 00b50663             beq     a0,a1,d0009270 <ast_check+0x62>
d0009268:       |  |  |        |   0000                 unimp
d000926a:       |  |  |        |   0000                 unimp
d000926c:       |  |  |        |   0000                 unimp
d000926e:       |  |  |        |   0000                 unimp
d0009270:       |  |  |  /-----\-X a06d                 j       d000931a <ast_check+0x10c>
d0009272:       |  |  \--|-------> 65f25637             lui     a2,0x65f25
d0009276:       |  |     |         20f60613             addi    a2,a2,527 # 65f2520f <_epmp_stack_guard_na4+0x2df1e20f>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:30
  switch (launder32(lc_state)) {
d000927a:       |  |  /--|-------- 0ac59563             bne     a1,a2,d0009324 <ast_check+0x116>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:41
      HARDENED_CHECK_EQ(lc_state, kLcStateProd);
d000927e:       |  +--|--|-------- 00c50663             beq     a0,a2,d000928a <ast_check+0x7c>
d0009282:       |  |  |  |         0000                 unimp
d0009284:       |  |  |  |         0000                 unimp
d0009286:       |  |  |  |         0000                 unimp
d0009288:       |  |  |  |         0000                 unimp
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:52
      HARDENED_UNREACHABLE();
  }

  // OTP can be configured to skip AST initialization. In this situation we do
  // not check that AST_INIT_DONE is set.
  uint32_t en = otp_read32(OTP_CTRL_PARAM_CREATOR_SW_CFG_AST_INIT_EN_OFFSET);
d000928a:       |  \--|--|-------> 0dc00513             li      a0,220
d000928e:       |     |  |         075010ef             jal     ra,d000ab02 <otp_read32>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0009292:       |     |  |         862a                 mv      a2,a0
d0009294:       |     |  |         45a5                 li      a1,9
ast_check():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:53
  if (launder32(en) == kMultiBitBool4False) {
d0009296:       |     |  |  /----- 00b61963             bne     a2,a1,d00092a8 <ast_check+0x9a>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:54
    HARDENED_CHECK_EQ(en, kMultiBitBool4False);
d000929a:       |     |  |  |  /-- 00b50663             beq     a0,a1,d00092a6 <ast_check+0x98>
d000929e:       |     |  |  |  |   0000                 unimp
d00092a0:       |     |  |  |  |   0000                 unimp
d00092a2:       |     |  |  |  |   0000                 unimp
d00092a4:       |     |  |  |  |   0000                 unimp
d00092a6:       |     |  +--|--\-X a895                 j       d000931a <ast_check+0x10c>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:62

  // AST initialization may take up to 100us. It is most likely already complete
  // at this point but for resilience poll for up to 100us.
  uint32_t mcycle;
  rom_error_t res = kErrorAstInitNotDone;
  CSR_WRITE(CSR_REG_MCYCLE, 0);
d00092a8:       |     |  |  \----> b0001073             csrw    mcycle,zero
d00092ac:       |     |  |         00002517             auipc   a0,0x2
d00092b0:       |     |  |         5d450513             addi    a0,a0,1492 # d000b880 <kAstCheckPollCpuCycles>
d00092b4:       |     |  |         00052803             lw      a6,0(a0)
d00092b8:       |     |  |         01415537             lui     a0,0x1415
d00092bc:       |     |  |         30d50693             addi    a3,a0,781 # 141530d <_rom_ext_virtual_size+0x139530d>
d00092c0:       |     |  |         c0490637             lui     a2,0xc0490
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:64
  do {
    CSR_READ(CSR_REG_MCYCLE, &mcycle);
d00092c4:       |     |  |  /----> b0002773             csrr    a4,mcycle
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
d00092c8:       |     |  |  |      5248                 lw      a0,36(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
d00092ca:       |     |  |  |      00157793             andi    a5,a0,1
d00092ce:       |     |  |  |      63100513             li      a0,1585
ast_init_done():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:90

  // The code below reads the AST_INIT_DONE bit twice and modifies `res` with
  // the result of each attempt. `res` should be `kHardenedBoolTrue` if all
  // attempts return true.
  hardened_bool_t res = 0x631;
  res |= done_bit_get() << 3;
d00092d2:       |     |  |  |  /-- c399                 beqz    a5,d00092d8 <ast_check+0xca>
d00092d4:       |     |  |  |  |   63900513             li      a0,1593
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
d00092d8:       |     |  |  |  \-> 525c                 lw      a5,36(a2)
ast_init_done():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:91
  res |= done_bit_get() << 8;
d00092da:       |     |  |  |      07a2                 slli    a5,a5,0x8
d00092dc:       |     |  |  |      1007f793             andi    a5,a5,256
d00092e0:       |     |  |  |      00f565b3             or      a1,a0,a5
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:93

  if (res != kHardenedBoolTrue) {
d00092e4:       |     |  |  |      8c758793             addi    a5,a1,-1849
d00092e8:       |     |  |  |      73900513             li      a0,1849
d00092ec:       |     |  |  |      00f037b3             snez    a5,a5
d00092f0:       |     |  |  |  /-- 00a58363             beq     a1,a0,d00092f6 <ast_check+0xe8>
d00092f4:       |     |  |  |  |   8536                 mv      a0,a3
d00092f6:       |     |  |  |  \-> 010735b3             sltu    a1,a4,a6
d00092fa:       |     |  |  |      8dfd                 and     a1,a1,a5
d00092fc:       |     |  |  |      86aa                 mv      a3,a0
d00092fe:       |     |  |  \----- f1f9                 bnez    a1,d00092c4 <ast_check+0xb6>
d0009300:       |     |  |     /-- a839                 j       d000931e <ast_check+0x110>
d0009302:       \-----|--|-----|-> b2866637             lui     a2,0xb2866
d0009306:             |  |     |   fbb60613             addi    a2,a2,-69 # b2865fbb <_stack_end+0xd2845fbb>
ast_check():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:30
  switch (launder32(lc_state)) {
d000930a:             +--|-----|-- 00c59d63             bne     a1,a2,d0009324 <ast_check+0x116>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:32
      HARDENED_CHECK_EQ(lc_state, kLcStateTest);
d000930e:             |  +-----|-- 00c50663             beq     a0,a2,d000931a <ast_check+0x10c>
d0009312:             |  |     |   0000                 unimp
d0009314:             |  |     |   0000                 unimp
d0009316:             |  |     |   0000                 unimp
d0009318:             |  |     |   0000                 unimp
d000931a:             |  \-----|-> 73900513             li      a0,1849
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:75
}
d000931e:             |        \-> 40b2                 lw      ra,12(sp)
d0009320:             |            0141                 addi    sp,sp,16
d0009322:             |            8082                 ret
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/ast.c:47
      HARDENED_UNREACHABLE();
d0009324:             \----------> 0000                 unimp
d0009326:                          0000                 unimp
d0009328:                          0000                 unimp
d000932a:                          0000                 unimp

d000932c <flash_ctrl_init>:
flash_ctrl_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:295
  const info_cfg_regs_t regs = info_cfg_regs(info_page);
  sec_mmio_write32(regs.cfg_addr, 0);
  sec_mmio_write32(regs.cfg_wen_addr, 0);
}

void flash_ctrl_init(void) {
d000932c:       1101                    addi    sp,sp,-32
d000932e:       ce06                    sw      ra,28(sp)
d0009330:       cc22                    sw      s0,24(sp)
d0009332:       ca26                    sw      s1,20(sp)
d0009334:       c84a                    sw      s2,16(sp)
d0009336:       c1000537                lui     a0,0xc1000
d000933a:       4585                    li      a1,1
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d000933c:       cd0c                    sw      a1,24(a0)
flash_ctrl_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:305
  // Initialize the flash controller.
  abs_mmio_write32(kBase + FLASH_CTRL_INIT_REG_OFFSET,
                   bitfield_bit32_write(0, FLASH_CTRL_INIT_VAL_BIT, true));
  // Configure default scrambling, ECC, and HE settings for the data partition.
  uint32_t otp_val =
      otp_read32(OTP_CTRL_PARAM_CREATOR_SW_CFG_FLASH_DATA_DEFAULT_CFG_OFFSET);
d000933e:       0f000513                li      a0,240
d0009342:       7c0010ef                jal     ra,d000ab02 <otp_read32>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
d0009346:       0ff57593                andi    a1,a0,255
d000934a:       00855613                srli    a2,a0,0x8
d000934e:       0ff67613                andi    a2,a2,255
d0009352:       8141                    srli    a0,a0,0x10
d0009354:       0ff57513                andi    a0,a0,255
flash_ctrl_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:312
      .scrambling =
          bitfield_field32_read(otp_val, FLASH_CTRL_OTP_FIELD_SCRAMBLING),
      .ecc = bitfield_field32_read(otp_val, FLASH_CTRL_OTP_FIELD_ECC),
      .he = bitfield_field32_read(otp_val, FLASH_CTRL_OTP_FIELD_HE),
  };
  flash_ctrl_data_default_cfg_set(data_default_cfg);
d0009358:       c02e                    sw      a1,0(sp)
d000935a:       c232                    sw      a2,4(sp)
d000935c:       c42a                    sw      a0,8(sp)
d000935e:       850a                    mv      a0,sp
d0009360:       20b1                    jal     d00093ac <flash_ctrl_data_default_cfg_set>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:315
  // Configure scrambling, ECC, and HE for `boot_data` pages.
  otp_val =
      otp_read32(OTP_CTRL_PARAM_CREATOR_SW_CFG_FLASH_INFO_BOOT_DATA_CFG_OFFSET);
d0009362:       0f400513                li      a0,244
d0009366:       79c010ef                jal     ra,d000ab02 <otp_read32>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
d000936a:       0ff57913                andi    s2,a0,255
d000936e:       00855593                srli    a1,a0,0x8
d0009372:       0ff5f493                andi    s1,a1,255
d0009376:       8141                    srli    a0,a0,0x10
d0009378:       0ff57413                andi    s0,a0,255
flash_ctrl_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:322
      .scrambling =
          bitfield_field32_read(otp_val, FLASH_CTRL_OTP_FIELD_SCRAMBLING),
      .ecc = bitfield_field32_read(otp_val, FLASH_CTRL_OTP_FIELD_ECC),
      .he = bitfield_field32_read(otp_val, FLASH_CTRL_OTP_FIELD_HE),
  };
  flash_ctrl_info_cfg_set(kFlashCtrlInfoPageBootData0, boot_data_cfg);
d000937c:       c04a                    sw      s2,0(sp)
d000937e:       c226                    sw      s1,4(sp)
d0009380:       c422                    sw      s0,8(sp)
d0009382:       fa38d537                lui     a0,0xfa38d
d0009386:       9f650513                addi    a0,a0,-1546 # fa38c9f6 <_stack_end+0x1a36c9f6>
d000938a:       858a                    mv      a1,sp
d000938c:       209d                    jal     d00093f2 <flash_ctrl_info_cfg_set>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:323
  flash_ctrl_info_cfg_set(kFlashCtrlInfoPageBootData1, boot_data_cfg);
d000938e:       c04a                    sw      s2,0(sp)
d0009390:       c226                    sw      s1,4(sp)
d0009392:       c422                    sw      s0,8(sp)
d0009394:       389c4537                lui     a0,0x389c4
d0009398:       49e50513                addi    a0,a0,1182 # 389c449e <_epmp_stack_guard_na4+0x9bd49e>
d000939c:       858a                    mv      a1,sp
d000939e:       2891                    jal     d00093f2 <flash_ctrl_info_cfg_set>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:324
}
d00093a0:       4942                    lw      s2,16(sp)
d00093a2:       44d2                    lw      s1,20(sp)
d00093a4:       4462                    lw      s0,24(sp)
d00093a6:       40f2                    lw      ra,28(sp)
d00093a8:       6105                    addi    sp,sp,32
d00093aa:       8082                    ret

d00093ac <flash_ctrl_data_default_cfg_set>:
flash_ctrl_data_default_cfg_set():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:495
  reg = bitfield_field32_write(
      reg, FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_ERASE_EN_0_FIELD, perms.erase);
  sec_mmio_write32(cfg_addr, reg);
}

void flash_ctrl_data_default_cfg_set(flash_ctrl_cfg_t cfg) {
d00093ac:       1141                    addi    sp,sp,-16
d00093ae:       c606                    sw      ra,12(sp)
d00093b0:       c422                    sw      s0,8(sp)
d00093b2:       c226                    sw      s1,4(sp)
d00093b4:       842a                    mv      s0,a0
d00093b6:       c1000537                lui     a0,0xc1000
d00093ba:       09050493                addi    s1,a0,144 # c1000090 <_stack_end+0xe0fe0090>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:499
  SEC_MMIO_ASSERT_WRITE_INCREMENT(kFlashCtrlSecMmioDataDefaultCfgSet, 1);

  // Read first to preserve permission bits.
  uint32_t reg = sec_mmio_read32(kBase + FLASH_CTRL_DEFAULT_REGION_REG_OFFSET);
d00093be:       8526                    mv      a0,s1
d00093c0:       7a4010ef                jal     ra,d000ab64 <sec_mmio_read32>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:501
  reg = bitfield_field32_write(reg, FLASH_CTRL_DEFAULT_REGION_SCRAMBLE_EN_FIELD,
                               cfg.scrambling);
d00093c4:       400c                    lw      a1,0(s0)
d00093c6:       ff001637                lui     a2,0xff001
d00093ca:       167d                    addi    a2,a2,-1
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
d00093cc:       8d71                    and     a0,a0,a2
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d00093ce:       05f2                    slli    a1,a1,0x1c
flash_ctrl_data_default_cfg_set():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:503
  reg = bitfield_field32_write(reg, FLASH_CTRL_DEFAULT_REGION_ECC_EN_FIELD,
                               cfg.ecc);
d00093d0:       4050                    lw      a2,4(s0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
d00093d2:       81c1                    srli    a1,a1,0x10
d00093d4:       8d4d                    or      a0,a0,a1
flash_ctrl_data_default_cfg_set():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:505
  reg = bitfield_field32_write(reg, FLASH_CTRL_DEFAULT_REGION_HE_EN_FIELD,
                               cfg.he);
d00093d6:       440c                    lw      a1,8(s0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
d00093d8:       0672                    slli    a2,a2,0x1c
d00093da:       8231                    srli    a2,a2,0xc
d00093dc:       8d51                    or      a0,a0,a2
d00093de:       05f2                    slli    a1,a1,0x1c
d00093e0:       81a1                    srli    a1,a1,0x8
d00093e2:       8dc9                    or      a1,a1,a0
flash_ctrl_data_default_cfg_set():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:506
  sec_mmio_write32(kBase + FLASH_CTRL_DEFAULT_REGION_REG_OFFSET, reg);
d00093e4:       8526                    mv      a0,s1
d00093e6:       4492                    lw      s1,4(sp)
d00093e8:       4422                    lw      s0,8(sp)
d00093ea:       40b2                    lw      ra,12(sp)
d00093ec:       0141                    addi    sp,sp,16
d00093ee:       02b0106f                j       d000ac18 <sec_mmio_write32>

d00093f2 <flash_ctrl_info_cfg_set>:
flash_ctrl_info_cfg_set():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:510
}

void flash_ctrl_info_cfg_set(flash_ctrl_info_page_t info_page,
                             flash_ctrl_cfg_t cfg) {
d00093f2:       1141                    addi    sp,sp,-16
d00093f4:       c606                    sw      ra,12(sp)
d00093f6:       c422                    sw      s0,8(sp)
d00093f8:       c226                    sw      s1,4(sp)
d00093fa:       842e                    mv      s0,a1
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:513
  SEC_MMIO_ASSERT_WRITE_INCREMENT(kFlashCtrlSecMmioInfoCfgSet, 1);

  const uint32_t cfg_addr = info_cfg_regs(info_page).cfg_addr;
d00093fc:       2835                    jal     d0009438 <info_cfg_regs>
d00093fe:       84ae                    mv      s1,a1
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:515
  // Read first to preserve permission bits.
  uint32_t reg = sec_mmio_read32(cfg_addr);
d0009400:       852e                    mv      a0,a1
d0009402:       762010ef                jal     ra,d000ab64 <sec_mmio_read32>
d0009406:       f00105b7                lui     a1,0xf0010
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:520
  reg = bitfield_field32_write(
      reg, FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_EN_0_FIELD, kMultiBitBool4True);
  reg = bitfield_field32_write(
      reg, FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_SCRAMBLE_EN_0_FIELD,
      cfg.scrambling);
d000940a:       4010                    lw      a2,0(s0)
d000940c:       15c1                    addi    a1,a1,-16
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
d000940e:       8d6d                    and     a0,a0,a1
flash_ctrl_info_cfg_set():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:522
  reg = bitfield_field32_write(
      reg, FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_ECC_EN_0_FIELD, cfg.ecc);
d0009410:       404c                    lw      a1,4(s0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009412:       0672                    slli    a2,a2,0x1c
flash_ctrl_info_cfg_set():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:524
  reg = bitfield_field32_write(
      reg, FLASH_CTRL_BANK0_INFO0_PAGE_CFG_0_HE_EN_0_FIELD, cfg.he);
d0009414:       4414                    lw      a3,8(s0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
d0009416:       8231                    srli    a2,a2,0xc
d0009418:       05f2                    slli    a1,a1,0x1c
d000941a:       81a1                    srli    a1,a1,0x8
d000941c:       06f2                    slli    a3,a3,0x1c
d000941e:       8291                    srli    a3,a3,0x4
d0009420:       8d51                    or      a0,a0,a2
d0009422:       8d4d                    or      a0,a0,a1
d0009424:       8d55                    or      a0,a0,a3
d0009426:       00656593                ori     a1,a0,6
flash_ctrl_info_cfg_set():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:525
  sec_mmio_write32(cfg_addr, reg);
d000942a:       8526                    mv      a0,s1
d000942c:       4492                    lw      s1,4(sp)
d000942e:       4422                    lw      s0,8(sp)
d0009430:       40b2                    lw      ra,12(sp)
d0009432:       0141                    addi    sp,sp,16
d0009434:       7e40106f                j       d000ac18 <sec_mmio_write32>

d0009438 <info_cfg_regs>:
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d0009438:                                                  85aa                 mv      a1,a0
d000943a:                                                  f56af637             lui     a2,0xf56af
d000943e:                                                  4ba60613             addi    a2,a2,1210 # f56af4ba <_stack_end+0x1568f4ba>
info_cfg_regs():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d0009442:                                           /----- 04b64563             blt     a2,a1,d000948c <info_cfg_regs+0x54>
d0009446:                                           |      ad887637             lui     a2,0xad887
d000944a:                                           |      d3a60613             addi    a2,a2,-710 # ad886d3a <_stack_end+0xcd866d3a>
d000944e:                                        /--|----- 08b64263             blt     a2,a1,d00094d2 <info_cfg_regs+0x9a>
d0009452:                                        |  |      a4f6f637             lui     a2,0xa4f6f
d0009456:                                        |  |      6c260693             addi    a3,a2,1730 # a4f6f6c2 <_stack_end+0xc4f4f6c2>
d000945a:                                  /-----|--|----- 0eb6d663             bge     a3,a1,d0009546 <info_cfg_regs+0x10e>
d000945e:                                  |     |  |      6c360613             addi    a2,a2,1731
d0009462:                      /-----------|-----|--|----- 16c58e63             beq     a1,a2,d00095de <info_cfg_regs+0x1a6>
d0009466:                      |           |     |  |      ad3b6637             lui     a2,0xad3b6
d000946a:                      |           |     |  |      bee60613             addi    a2,a2,-1042 # ad3b5bee <_stack_end+0xcd395bee>
d000946e:       /--------------|-----------|-----|--|----- 1ec59c63             bne     a1,a2,d0009666 <info_cfg_regs+0x22e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d0009472:       |              |           |     |  |  /-- 00c50663             beq     a0,a2,d000947e <info_cfg_regs+0x46>
d0009476:       |              |           |     |  |  |   0000                 unimp
d0009478:       |              |           |     |  |  |   0000                 unimp
d000947a:       |              |           |     |  |  |   0000                 unimp
d000947c:       |              |           |     |  |  |   0000                 unimp
d000947e:       |              |           |     |  |  \-> c1000537             lui     a0,0xc1000
d0009482:       |              |           |     |  |      0cc50593             addi    a1,a0,204 # c10000cc <_stack_end+0xe0fe00cc>
d0009486:       |              |           |     |  |      0a450513             addi    a0,a0,164
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d000948a:       |              |           |     |  |      8082                 ret
d000948c:       |              |           |     |  \----> 238cf637             lui     a2,0x238cf
d0009490:       |              |           |     |         15b60613             addi    a2,a2,347 # 238cf15b <_rom_ext_virtual_size+0x2384f15b>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d0009494:       |              |           |     |  /----- 06b64c63             blt     a2,a1,d000950c <info_cfg_regs+0xd4>
d0009498:       |              |           |     |  |      fa38d637             lui     a2,0xfa38d
d000949c:       |              |           |     |  |      9f560693             addi    a3,a2,-1547 # fa38c9f5 <_stack_end+0x1a36c9f5>
d00094a0:       |              |           |  /--|--|----- 0cb6d663             bge     a3,a1,d000956c <info_cfg_regs+0x134>
d00094a4:       |              |           |  |  |  |      9f660613             addi    a2,a2,-1546
d00094a8:       |              |  /--------|--|--|--|----- 14c58c63             beq     a1,a2,d0009600 <info_cfg_regs+0x1c8>
d00094ac:       |              |  |        |  |  |  |      10adc637             lui     a2,0x10adc
d00094b0:       |              |  |        |  |  |  |      6aa60613             addi    a2,a2,1706 # 10adc6aa <_rom_ext_virtual_size+0x10a5c6aa>
d00094b4:       |  /-----------|--|--------|--|--|--|----- 1cc59c63             bne     a1,a2,d000968c <info_cfg_regs+0x254>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d00094b8:       |  |           |  |        |  |  |  |  /-- 00c50663             beq     a0,a2,d00094c4 <info_cfg_regs+0x8c>
d00094bc:       |  |           |  |        |  |  |  |  |   0000                 unimp
d00094be:       |  |           |  |        |  |  |  |  |   0000                 unimp
d00094c0:       |  |           |  |        |  |  |  |  |   0000                 unimp
d00094c2:       |  |           |  |        |  |  |  |  |   0000                 unimp
d00094c4:       |  |           |  |        |  |  |  |  \-> c1000537             lui     a0,0xc1000
d00094c8:       |  |           |  |        |  |  |  |      0c450593             addi    a1,a0,196 # c10000c4 <_stack_end+0xe0fe00c4>
d00094cc:       |  |           |  |        |  |  |  |      09c50513             addi    a0,a0,156
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d00094d0:       |  |           |  |        |  |  |  |      8082                 ret
d00094d2:       |  |           |  |        |  |  \--|----> e3ffb637             lui     a2,0xe3ffb
d00094d6:       |  |           |  |        |  |     |      c8560693             addi    a3,a2,-891 # e3ffac85 <_stack_end+0x3fdac85>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d00094da:       |  |           |  |        |  |  /--|----- 0ab6dc63             bge     a3,a1,d0009592 <info_cfg_regs+0x15a>
d00094de:       |  |           |  |        |  |  |  |      c8660613             addi    a2,a2,-890
d00094e2:       |  |           |  |  /-----|--|--|--|----- 14c58063             beq     a1,a2,d0009622 <info_cfg_regs+0x1ea>
d00094e6:       |  |           |  |  |     |  |  |  |      ec309637             lui     a2,0xec309
d00094ea:       |  |           |  |  |     |  |  |  |      46160613             addi    a2,a2,1121 # ec309461 <_stack_end+0xc2e9461>
d00094ee:       |  |  /--------|--|--|-----|--|--|--|----- 1cc59263             bne     a1,a2,d00096b2 <info_cfg_regs+0x27a>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d00094f2:       |  |  |        |  |  |     |  |  |  |  /-- 00c50663             beq     a0,a2,d00094fe <info_cfg_regs+0xc6>
d00094f6:       |  |  |        |  |  |     |  |  |  |  |   0000                 unimp
d00094f8:       |  |  |        |  |  |     |  |  |  |  |   0000                 unimp
d00094fa:       |  |  |        |  |  |     |  |  |  |  |   0000                 unimp
d00094fc:       |  |  |        |  |  |     |  |  |  |  |   0000                 unimp
d00094fe:       |  |  |        |  |  |     |  |  |  |  \-> c1000537             lui     a0,0xc1000
d0009502:       |  |  |        |  |  |     |  |  |  |      14850593             addi    a1,a0,328 # c1000148 <_stack_end+0xe0fe0148>
d0009506:       |  |  |        |  |  |     |  |  |  |      12050513             addi    a0,a0,288
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d000950a:       |  |  |        |  |  |     |  |  |  |      8082                 ret
d000950c:       |  |  |        |  |  |     |  |  |  \----> 5f072637             lui     a2,0x5f072
d0009510:       |  |  |        |  |  |     |  |  |         77d60693             addi    a3,a2,1917 # 5f07277d <_epmp_stack_guard_na4+0x2706b77d>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d0009514:       |  |  |        |  |  |     |  |  |  /----- 0ab6d263             bge     a3,a1,d00095b8 <info_cfg_regs+0x180>
d0009518:       |  |  |        |  |  |     |  |  |  |      77e60613             addi    a2,a2,1918
d000951c:       |  |  |        |  |  |  /--|--|--|--|----- 12c58463             beq     a1,a2,d0009644 <info_cfg_regs+0x20c>
d0009520:       |  |  |        |  |  |  |  |  |  |  |      6c86e637             lui     a2,0x6c86e
d0009524:       |  |  |        |  |  |  |  |  |  |  |      98060613             addi    a2,a2,-1664 # 6c86d980 <_epmp_stack_guard_na4+0x34866980>
d0009528:       |  |  |     /--|--|--|--|--|--|--|--|----- 1ac59863             bne     a1,a2,d00096d8 <info_cfg_regs+0x2a0>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d000952c:       |  |  |     |  |  |  |  |  |  |  |  |  /-- 00c50663             beq     a0,a2,d0009538 <info_cfg_regs+0x100>
d0009530:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d0009532:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d0009534:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d0009536:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d0009538:       |  |  |     |  |  |  |  |  |  |  |  |  \-> c1000537             lui     a0,0xc1000
d000953c:       |  |  |     |  |  |  |  |  |  |  |  |      0d850593             addi    a1,a0,216 # c10000d8 <_stack_end+0xe0fe00d8>
d0009540:       |  |  |     |  |  |  |  |  |  |  |  |      0b050513             addi    a0,a0,176
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d0009544:       |  |  |     |  |  |  |  |  |  |  |  |      8082                 ret
d0009546:       |  |  |     |  |  |  |  |  \--|--|--|----> 9dc42637             lui     a2,0x9dc42
d000954a:       |  |  |     |  |  |  |  |     |  |  |      c3360613             addi    a2,a2,-973 # 9dc41c33 <_stack_end+0xbdc21c33>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d000954e:       |  |  |     |  |  |  |  |  /--|--|--|----- 1ac59863             bne     a1,a2,d00096fe <info_cfg_regs+0x2c6>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d0009552:       |  |  |     |  |  |  |  |  |  |  |  |  /-- 00c50663             beq     a0,a2,d000955e <info_cfg_regs+0x126>
d0009556:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d0009558:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d000955a:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d000955c:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d000955e:       |  |  |     |  |  |  |  |  |  |  |  |  \-> c1000537             lui     a0,0xc1000
d0009562:       |  |  |     |  |  |  |  |  |  |  |  |      0bc50593             addi    a1,a0,188 # c10000bc <_stack_end+0xe0fe00bc>
d0009566:       |  |  |     |  |  |  |  |  |  |  |  |      09450513             addi    a0,a0,148
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d000956a:       |  |  |     |  |  |  |  |  |  |  |  |      8082                 ret
d000956c:       |  |  |     |  |  |  |  |  |  \--|--|----> f56af637             lui     a2,0xf56af
d0009570:       |  |  |     |  |  |  |  |  |     |  |      4bb60613             addi    a2,a2,1211 # f56af4bb <_stack_end+0x1568f4bb>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d0009574:       |  |  |     |  |  |  |  |  |  /--|--|----- 1ac59863             bne     a1,a2,d0009724 <info_cfg_regs+0x2ec>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d0009578:       |  |  |     |  |  |  |  |  |  |  |  |  /-- 00c50663             beq     a0,a2,d0009584 <info_cfg_regs+0x14c>
d000957c:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d000957e:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d0009580:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d0009582:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d0009584:       |  |  |     |  |  |  |  |  |  |  |  |  \-> c1000537             lui     a0,0xc1000
d0009588:       |  |  |     |  |  |  |  |  |  |  |  |      0c050593             addi    a1,a0,192 # c10000c0 <_stack_end+0xe0fe00c0>
d000958c:       |  |  |     |  |  |  |  |  |  |  |  |      09850513             addi    a0,a0,152
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d0009590:       |  |  |     |  |  |  |  |  |  |  |  |      8082                 ret
d0009592:       |  |  |     |  |  |  |  |  |  |  \--|----> ad887637             lui     a2,0xad887
d0009596:       |  |  |     |  |  |  |  |  |  |     |      d3b60613             addi    a2,a2,-709 # ad886d3b <_stack_end+0xcd866d3b>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d000959a:       |  |  |     |  |  |  |  |  |  |  /--|----- 1ac59863             bne     a1,a2,d000974a <info_cfg_regs+0x312>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d000959e:       |  |  |     |  |  |  |  |  |  |  |  |  /-- 00c50663             beq     a0,a2,d00095aa <info_cfg_regs+0x172>
d00095a2:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d00095a4:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d00095a6:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d00095a8:       |  |  |     |  |  |  |  |  |  |  |  |  |   0000                 unimp
d00095aa:       |  |  |     |  |  |  |  |  |  |  |  |  \-> c1000537             lui     a0,0xc1000
d00095ae:       |  |  |     |  |  |  |  |  |  |  |  |      13050593             addi    a1,a0,304 # c1000130 <_stack_end+0xe0fe0130>
d00095b2:       |  |  |     |  |  |  |  |  |  |  |  |      10850513             addi    a0,a0,264
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d00095b6:       |  |  |     |  |  |  |  |  |  |  |  |      8082                 ret
d00095b8:       |  |  |     |  |  |  |  |  |  |  |  \----> 238cf637             lui     a2,0x238cf
d00095bc:       |  |  |     |  |  |  |  |  |  |  |         15c60613             addi    a2,a2,348 # 238cf15c <_rom_ext_virtual_size+0x2384f15c>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d00095c0:       |  |  |  /--|--|--|--|--|--|--|--|-------- 1ac59863             bne     a1,a2,d0009770 <info_cfg_regs+0x338>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d00095c4:       |  |  |  |  |  |  |  |  |  |  |  |     /-- 00c50663             beq     a0,a2,d00095d0 <info_cfg_regs+0x198>
d00095c8:       |  |  |  |  |  |  |  |  |  |  |  |     |   0000                 unimp
d00095ca:       |  |  |  |  |  |  |  |  |  |  |  |     |   0000                 unimp
d00095cc:       |  |  |  |  |  |  |  |  |  |  |  |     |   0000                 unimp
d00095ce:       |  |  |  |  |  |  |  |  |  |  |  |     |   0000                 unimp
d00095d0:       |  |  |  |  |  |  |  |  |  |  |  |     \-> c1000537             lui     a0,0xc1000
d00095d4:       |  |  |  |  |  |  |  |  |  |  |  |         12c50593             addi    a1,a0,300 # c100012c <_stack_end+0xe0fe012c>
d00095d8:       |  |  |  |  |  |  |  |  |  |  |  |         10450513             addi    a0,a0,260
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d00095dc:       |  |  |  |  |  |  |  |  |  |  |  |         8082                 ret
d00095de:       |  |  |  |  |  \--|--|--|--|--|--|-------> a4f6f5b7             lui     a1,0xa4f6f
d00095e2:       |  |  |  |  |     |  |  |  |  |  |         6c358593             addi    a1,a1,1731 # a4f6f6c3 <_stack_end+0xc4f4f6c3>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d00095e6:       |  |  |  |  |     |  |  |  |  |  |     /-- 00b50663             beq     a0,a1,d00095f2 <info_cfg_regs+0x1ba>
d00095ea:       |  |  |  |  |     |  |  |  |  |  |     |   0000                 unimp
d00095ec:       |  |  |  |  |     |  |  |  |  |  |     |   0000                 unimp
d00095ee:       |  |  |  |  |     |  |  |  |  |  |     |   0000                 unimp
d00095f0:       |  |  |  |  |     |  |  |  |  |  |     |   0000                 unimp
d00095f2:       |  |  |  |  |     |  |  |  |  |  |     \-> c1000537             lui     a0,0xc1000
d00095f6:       |  |  |  |  |     |  |  |  |  |  |         0d050593             addi    a1,a0,208 # c10000d0 <_stack_end+0xe0fe00d0>
d00095fa:       |  |  |  |  |     |  |  |  |  |  |         0a850513             addi    a0,a0,168
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d00095fe:       |  |  |  |  |     |  |  |  |  |  |         8082                 ret
d0009600:       |  |  |  |  |     \--|--|--|--|--|-------> fa38d5b7             lui     a1,0xfa38d
d0009604:       |  |  |  |  |        |  |  |  |  |         9f658593             addi    a1,a1,-1546 # fa38c9f6 <_stack_end+0x1a36c9f6>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d0009608:       |  |  |  |  |        |  |  |  |  |     /-- 00b50663             beq     a0,a1,d0009614 <info_cfg_regs+0x1dc>
d000960c:       |  |  |  |  |        |  |  |  |  |     |   0000                 unimp
d000960e:       |  |  |  |  |        |  |  |  |  |     |   0000                 unimp
d0009610:       |  |  |  |  |        |  |  |  |  |     |   0000                 unimp
d0009612:       |  |  |  |  |        |  |  |  |  |     |   0000                 unimp
d0009614:       |  |  |  |  |        |  |  |  |  |     \-> c1000537             lui     a0,0xc1000
d0009618:       |  |  |  |  |        |  |  |  |  |         12450593             addi    a1,a0,292 # c1000124 <_stack_end+0xe0fe0124>
d000961c:       |  |  |  |  |        |  |  |  |  |         0fc50513             addi    a0,a0,252
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d0009620:       |  |  |  |  |        |  |  |  |  |         8082                 ret
d0009622:       |  |  |  |  |        \--|--|--|--|-------> e3ffb5b7             lui     a1,0xe3ffb
d0009626:       |  |  |  |  |           |  |  |  |         c8658593             addi    a1,a1,-890 # e3ffac86 <_stack_end+0x3fdac86>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d000962a:       |  |  |  |  |           |  |  |  |     /-- 00b50663             beq     a0,a1,d0009636 <info_cfg_regs+0x1fe>
d000962e:       |  |  |  |  |           |  |  |  |     |   0000                 unimp
d0009630:       |  |  |  |  |           |  |  |  |     |   0000                 unimp
d0009632:       |  |  |  |  |           |  |  |  |     |   0000                 unimp
d0009634:       |  |  |  |  |           |  |  |  |     |   0000                 unimp
d0009636:       |  |  |  |  |           |  |  |  |     \-> c1000537             lui     a0,0xc1000
d000963a:       |  |  |  |  |           |  |  |  |         13c50593             addi    a1,a0,316 # c100013c <_stack_end+0xe0fe013c>
d000963e:       |  |  |  |  |           |  |  |  |         11450513             addi    a0,a0,276
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d0009642:       |  |  |  |  |           |  |  |  |         8082                 ret
d0009644:       |  |  |  |  |           \--|--|--|-------> 5f0725b7             lui     a1,0x5f072
d0009648:       |  |  |  |  |              |  |  |         77e58593             addi    a1,a1,1918 # 5f07277e <_epmp_stack_guard_na4+0x2706b77e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d000964c:       |  |  |  |  |              |  |  |     /-- 00b50663             beq     a0,a1,d0009658 <info_cfg_regs+0x220>
d0009650:       |  |  |  |  |              |  |  |     |   0000                 unimp
d0009652:       |  |  |  |  |              |  |  |     |   0000                 unimp
d0009654:       |  |  |  |  |              |  |  |     |   0000                 unimp
d0009656:       |  |  |  |  |              |  |  |     |   0000                 unimp
d0009658:       |  |  |  |  |              |  |  |     \-> c1000537             lui     a0,0xc1000
d000965c:       |  |  |  |  |              |  |  |         0e050593             addi    a1,a0,224 # c10000e0 <_stack_end+0xe0fe00e0>
d0009660:       |  |  |  |  |              |  |  |         0b850513             addi    a0,a0,184
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d0009664:       |  |  |  |  |              |  |  |         8082                 ret
d0009666:       \--|--|--|--|--------------|--|--|-------> ad5dd637             lui     a2,0xad5dd
d000966a:          |  |  |  |              |  |  |         31d60613             addi    a2,a2,797 # ad5dd31d <_stack_end+0xcd5bd31d>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d000966e:          |  |  |  |              |  |  |  /----- 12c59463             bne     a1,a2,d0009796 <info_cfg_regs+0x35e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d0009672:          |  |  |  |              |  |  |  |  /-- 00c50663             beq     a0,a2,d000967e <info_cfg_regs+0x246>
d0009676:          |  |  |  |              |  |  |  |  |   0000                 unimp
d0009678:          |  |  |  |              |  |  |  |  |   0000                 unimp
d000967a:          |  |  |  |              |  |  |  |  |   0000                 unimp
d000967c:          |  |  |  |              |  |  |  |  |   0000                 unimp
d000967e:          |  |  |  |              |  |  |  |  \-> c1000537             lui     a0,0xc1000
d0009682:          |  |  |  |              |  |  |  |      13850593             addi    a1,a0,312 # c1000138 <_stack_end+0xe0fe0138>
d0009686:          |  |  |  |              |  |  |  |      11050513             addi    a0,a0,272
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d000968a:          |  |  |  |              |  |  |  |      8082                 ret
d000968c:          \--|--|--|--------------|--|--|--|----> 118b6637             lui     a2,0x118b6
d0009690:             |  |  |              |  |  |  |      dbb60613             addi    a2,a2,-581 # 118b5dbb <_rom_ext_virtual_size+0x11835dbb>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d0009694:             |  |  |              |  |  |  +----- 10c59163             bne     a1,a2,d0009796 <info_cfg_regs+0x35e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d0009698:             |  |  |              |  |  |  |  /-- 00c50663             beq     a0,a2,d00096a4 <info_cfg_regs+0x26c>
d000969c:             |  |  |              |  |  |  |  |   0000                 unimp
d000969e:             |  |  |              |  |  |  |  |   0000                 unimp
d00096a0:             |  |  |              |  |  |  |  |   0000                 unimp
d00096a2:             |  |  |              |  |  |  |  |   0000                 unimp
d00096a4:             |  |  |              |  |  |  |  \-> c1000537             lui     a0,0xc1000
d00096a8:             |  |  |              |  |  |  |      0c850593             addi    a1,a0,200 # c10000c8 <_stack_end+0xe0fe00c8>
d00096ac:             |  |  |              |  |  |  |      0a050513             addi    a0,a0,160
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d00096b0:             |  |  |              |  |  |  |      8082                 ret
d00096b2:             \--|--|--------------|--|--|--|----> f4f49637             lui     a2,0xf4f49
d00096b6:                |  |              |  |  |  |      c3d60613             addi    a2,a2,-963 # f4f48c3d <_stack_end+0x14f28c3d>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d00096ba:                |  |              |  |  |  +----- 0cc59e63             bne     a1,a2,d0009796 <info_cfg_regs+0x35e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d00096be:                |  |              |  |  |  |  /-- 00c50663             beq     a0,a2,d00096ca <info_cfg_regs+0x292>
d00096c2:                |  |              |  |  |  |  |   0000                 unimp
d00096c4:                |  |              |  |  |  |  |   0000                 unimp
d00096c6:                |  |              |  |  |  |  |   0000                 unimp
d00096c8:                |  |              |  |  |  |  |   0000                 unimp
d00096ca:                |  |              |  |  |  |  \-> c1000537             lui     a0,0xc1000
d00096ce:                |  |              |  |  |  |      14050593             addi    a1,a0,320 # c1000140 <_stack_end+0xe0fe0140>
d00096d2:                |  |              |  |  |  |      11850513             addi    a0,a0,280
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d00096d6:                |  |              |  |  |  |      8082                 ret
d00096d8:                |  \--------------|--|--|--|----> 7dfbe637             lui     a2,0x7dfbe
d00096dc:                |                 |  |  |  |      f9b60613             addi    a2,a2,-101 # 7dfbdf9b <_epmp_stack_guard_na4+0x45fb6f9b>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d00096e0:                |                 |  |  |  +----- 0ac59b63             bne     a1,a2,d0009796 <info_cfg_regs+0x35e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d00096e4:                |                 |  |  |  |  /-- 00c50663             beq     a0,a2,d00096f0 <info_cfg_regs+0x2b8>
d00096e8:                |                 |  |  |  |  |   0000                 unimp
d00096ea:                |                 |  |  |  |  |   0000                 unimp
d00096ec:                |                 |  |  |  |  |   0000                 unimp
d00096ee:                |                 |  |  |  |  |   0000                 unimp
d00096f0:                |                 |  |  |  |  \-> c1000537             lui     a0,0xc1000
d00096f4:                |                 |  |  |  |      13450593             addi    a1,a0,308 # c1000134 <_stack_end+0xe0fe0134>
d00096f8:                |                 |  |  |  |      10c50513             addi    a0,a0,268
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d00096fc:                |                 |  |  |  |      8082                 ret
d00096fe:                |                 \--|--|--|----> 9fbb8637             lui     a2,0x9fbb8
d0009702:                |                    |  |  |      40e60613             addi    a2,a2,1038 # 9fbb840e <_stack_end+0xbfb9840e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d0009706:                |                    |  |  +----- 08c59863             bne     a1,a2,d0009796 <info_cfg_regs+0x35e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d000970a:                |                    |  |  |  /-- 00c50663             beq     a0,a2,d0009716 <info_cfg_regs+0x2de>
d000970e:                |                    |  |  |  |   0000                 unimp
d0009710:                |                    |  |  |  |   0000                 unimp
d0009712:                |                    |  |  |  |   0000                 unimp
d0009714:                |                    |  |  |  |   0000                 unimp
d0009716:                |                    |  |  |  \-> c1000537             lui     a0,0xc1000
d000971a:                |                    |  |  |      14450593             addi    a1,a0,324 # c1000144 <_stack_end+0xe0fe0144>
d000971e:                |                    |  |  |      11c50513             addi    a0,a0,284
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d0009722:                |                    |  |  |      8082                 ret
d0009724:                |                    \--|--|----> f646f637             lui     a2,0xf646f
d0009728:                |                       |  |      11b60613             addi    a2,a2,283 # f646f11b <_stack_end+0x1644f11b>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d000972c:                |                       |  +----- 06c59563             bne     a1,a2,d0009796 <info_cfg_regs+0x35e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d0009730:                |                       |  |  /-- 00c50663             beq     a0,a2,d000973c <info_cfg_regs+0x304>
d0009734:                |                       |  |  |   0000                 unimp
d0009736:                |                       |  |  |   0000                 unimp
d0009738:                |                       |  |  |   0000                 unimp
d000973a:                |                       |  |  |   0000                 unimp
d000973c:                |                       |  |  \-> c1000537             lui     a0,0xc1000
d0009740:                |                       |  |      0d450593             addi    a1,a0,212 # c10000d4 <_stack_end+0xe0fe00d4>
d0009744:                |                       |  |      0ac50513             addi    a0,a0,172
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d0009748:                |                       |  |      8082                 ret
d000974a:                |                       \--|----> dd7f3637             lui     a2,0xdd7f3
d000974e:                |                          |      4dc60613             addi    a2,a2,1244 # dd7f34dc <_stack_end+0xfd7d34dc>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d0009752:                |                          +----- 04c59263             bne     a1,a2,d0009796 <info_cfg_regs+0x35e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d0009756:                |                          |  /-- 00c50663             beq     a0,a2,d0009762 <info_cfg_regs+0x32a>
d000975a:                |                          |  |   0000                 unimp
d000975c:                |                          |  |   0000                 unimp
d000975e:                |                          |  |   0000                 unimp
d0009760:                |                          |  |   0000                 unimp
d0009762:                |                          |  \-> c1000537             lui     a0,0xc1000
d0009766:                |                          |      0dc50593             addi    a1,a0,220 # c10000dc <_stack_end+0xe0fe00dc>
d000976a:                |                          |      0b450513             addi    a0,a0,180
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d000976e:                |                          |      8082                 ret
d0009770:                \--------------------------|----> 389c4637             lui     a2,0x389c4
d0009774:                                           |      49e60613             addi    a2,a2,1182 # 389c449e <_epmp_stack_guard_na4+0x9bd49e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:272
  switch (launder32(info_page)) {
d0009778:                                           +----- 00c59f63             bne     a1,a2,d0009796 <info_cfg_regs+0x35e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:273
    FLASH_CTRL_INFO_PAGES_DEFINE(INFO_CFG_REGS_CASE_)
d000977c:                                           |  /-- 00c50663             beq     a0,a2,d0009788 <info_cfg_regs+0x350>
d0009780:                                           |  |   0000                 unimp
d0009782:                                           |  |   0000                 unimp
d0009784:                                           |  |   0000                 unimp
d0009786:                                           |  |   0000                 unimp
d0009788:                                           |  \-> c1000537             lui     a0,0xc1000
d000978c:                                           |      12850593             addi    a1,a0,296 # c1000128 <_stack_end+0xe0fe0128>
d0009790:                                           |      10050513             addi    a0,a0,256
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:279
}
d0009794:                                           |      8082                 ret
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/flash_ctrl.c:275
      HARDENED_UNREACHABLE();
d0009796:                                           \----> 0000                 unimp
d0009798:                                                  0000                 unimp
d000979a:                                                  0000                 unimp
d000979c:                                                  0000                 unimp

d000979e <pinmux_init>:
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:127
  abs_mmio_write32(
      kBase + PINMUX_MIO_OUTSEL_0_REG_OFFSET + output.mio * sizeof(uint32_t),
      output.outsel);
}

void pinmux_init(void) {
d000979e:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:129
  uint32_t bootstrap_en =
      otp_read32(OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_BOOTSTRAP_EN_OFFSET);
d00097a0:              c606                     sw      ra,12(sp)
d00097a2:              36400513                 li      a0,868
d00097a6:              35c010ef                 jal     ra,d000ab02 <otp_read32>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d00097aa:              862a                     mv      a2,a0
d00097ac:              73900593                 li      a1,1849
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:130
  if (launder32(bootstrap_en) == kHardenedBoolTrue) {
d00097b0:       /----- 02b61b63                 bne     a2,a1,d00097e6 <pinmux_init+0x48>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:131
    HARDENED_CHECK_EQ(bootstrap_en, kHardenedBoolTrue);
d00097b4:       |  /-- 00b50663                 beq     a0,a1,d00097c0 <pinmux_init+0x22>
d00097b8:       |  |   0000                     unimp
d00097ba:       |  |   0000                     unimp
d00097bc:       |  |   0000                     unimp
d00097be:       |  |   0000                     unimp
d00097c0:       |  \-> c0460537                 lui     a0,0xc0460
d00097c4:       |      4591                     li      a1,4
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d00097c6:       |      44b52c23                 sw      a1,1112(a0) # c0460458 <_stack_end+0xe0440458>
d00097ca:       |      44b52e23                 sw      a1,1116(a0)
d00097ce:       |      46b52023                 sw      a1,1120(a0)
d00097d2:       |      45e1                     li      a1,24
d00097d4:       |      14b52023                 sw      a1,320(a0)
d00097d8:       |      45e5                     li      a1,25
d00097da:       |      14b52223                 sw      a1,324(a0)
d00097de:       |      14850513                 addi    a0,a0,328
d00097e2:       |      45e9                     li      a1,26
d00097e4:       |      c10c                     sw      a1,0(a0)
d00097e6:       \----> c0460537                 lui     a0,0xc0460
d00097ea:              45ed                     li      a1,27
d00097ec:              18b52823                 sw      a1,400(a0) # c0460190 <_stack_end+0xe0440190>
d00097f0:              02d00593                 li      a1,45
d00097f4:              2eb52823                 sw      a1,752(a0)
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:144
    configure_input(kInputSwStrap2);
  }

  configure_input(kInputUart0);
  configure_output(kOutputUart0);
}
d00097f8:              40b2                     lw      ra,12(sp)
d00097fa:              0141                     addi    sp,sp,16
d00097fc:              8082                     ret

d00097fe <retention_sram_get>:
retention_sram_get():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/retention_sram.c:25
};

retention_sram_t *retention_sram_get(void) {
  static_assert(sizeof(retention_sram_t) == TOP_EARLGREY_RAM_RET_AON_SIZE_BYTES,
                "Unexpected retention SRAM size.");
  return (retention_sram_t *)TOP_EARLGREY_RAM_RET_AON_BASE_ADDR;
d00097fe:       c0600537                lui     a0,0xc0600
d0009802:       8082                    ret

d0009804 <retention_sram_init>:
retention_sram_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/retention_sram.c:32

void retention_sram_clear(void) {
  memset(retention_sram_get(), 0, sizeof(retention_sram_t));
}

void retention_sram_init(void) {
d0009804:       c0500537                lui     a0,0xc0500
d0009808:       4589                    li      a1,2
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d000980a:       c94c                    sw      a1,20(a0)
retention_sram_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/retention_sram.c:35
  uint32_t reg = bitfield_bit32_write(0, SRAM_CTRL_CTRL_INIT_BIT, true);
  abs_mmio_write32(kBase + SRAM_CTRL_CTRL_REG_OFFSET, reg);
}
d000980c:       8082                    ret

d000980e <rstmgr_reason_get>:
rstmgr_reason_get():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rstmgr.c:41
    rstmgr_alert_info.info[i] =
        abs_mmio_read32(kBase + RSTMGR_ALERT_INFO_REG_OFFSET);
  }
}

uint32_t rstmgr_reason_get(void) {
d000980e:              c0410537                 lui     a0,0xc0410
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
d0009812:              494c                     lw      a1,20(a0)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
d0009814:              00f5f613                 andi    a2,a1,15
rstmgr_alert_info_collect():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rstmgr.c:29
  rstmgr_alert_info.length = bitfield_field32_read(
d0009818:              c2c18593                 addi    a1,gp,-980 # e0002474 <rstmgr_alert_info>
d000981c:              c190                     sw      a2,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rstmgr.c:32
  for (uint32_t i = 0; i < rstmgr_alert_info.length; ++i) {
d000981e:       /----- c205                     beqz    a2,d000983e <rstmgr_reason_get+0x30>
d0009820:       |      4601                     li      a2,0
d0009822:       |      4681                     li      a3,0
d0009824:       |      00458713                 addi    a4,a1,4
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009828:       |  /-> 0f067793                 andi    a5,a2,240
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d000982c:       |  |   c91c                     sw      a5,16(a0)
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
d000982e:       |  |   4d1c                     lw      a5,24(a0)
rstmgr_alert_info_collect():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rstmgr.c:36
    rstmgr_alert_info.info[i] =
d0009830:       |  |   c31c                     sw      a5,0(a4)
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rstmgr.c:32
  for (uint32_t i = 0; i < rstmgr_alert_info.length; ++i) {
d0009832:       |  |   419c                     lw      a5,0(a1)
d0009834:       |  |   0685                     addi    a3,a3,1
d0009836:       |  |   0711                     addi    a4,a4,4
d0009838:       |  |   0641                     addi    a2,a2,16
d000983a:       |  \-- fef6e7e3                 bltu    a3,a5,d0009828 <rstmgr_reason_get+0x1a>
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
d000983e:       \----> 4508                     lw      a0,8(a0)
rstmgr_reason_get():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rstmgr.c:72
      "kRstmgrReasonLast value incorrect.");

#undef REASON_ASSERT

  rstmgr_alert_info_collect();
  return abs_mmio_read32(kBase + RSTMGR_RESET_INFO_REG_OFFSET);
d0009840:              8082                     ret

d0009842 <rstmgr_reason_clear>:
rstmgr_reason_clear():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rstmgr.c:75
}

void rstmgr_reason_clear(uint32_t reasons) {
d0009842:       c04105b7                lui     a1,0xc0410
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d0009846:       c588                    sw      a0,8(a1)
rstmgr_reason_clear():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rstmgr.c:77
  abs_mmio_write32(kBase + RSTMGR_RESET_INFO_REG_OFFSET, reasons);
}
d0009848:       8082                    ret

d000984a <uart_init>:
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:37
                   0u);
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_STATE_REG_OFFSET,
                   UINT32_MAX);
}

rom_error_t uart_init(uint32_t precalculated_nco) {
d000984a:       c00005b7                lui     a1,0xc0000
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d000984e:       0005a823                sw      zero,16(a1) # c0000010 <_stack_end+0xdffe0010>
d0009852:       460d                    li      a2,3
d0009854:       d190                    sw      a2,32(a1)
d0009856:       0205a423                sw      zero,40(a1)
d000985a:       0205a823                sw      zero,48(a1)
d000985e:       0005a223                sw      zero,4(a1)
d0009862:       567d                    li      a2,-1
d0009864:       c190                    sw      a2,0(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
d0009866:       0542                    slli    a0,a0,0x10
d0009868:       00156513                ori     a0,a0,1
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d000986c:       c988                    sw      a0,16(a1)
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:51
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_CTRL_REG_OFFSET, reg);

  // Disable interrupts.
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_ENABLE_REG_OFFSET,
                   0u);
  return kErrorOk;
d000986e:       73900513                li      a0,1849
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d0009872:       0005a223                sw      zero,4(a1)
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:51
d0009876:       8082                    ret

d0009878 <uart_putchar>:
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:66
  uint32_t reg =
      abs_mmio_read32(TOP_EARLGREY_UART0_BASE_ADDR + UART_STATUS_REG_OFFSET);
  return bitfield_bit32_read(reg, UART_STATUS_TXIDLE_BIT);
}

void uart_putchar(uint8_t byte) {
d0009878:           c00005b7            lui     a1,0xc0000
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
d000987c:       /-> 49d0                        lw      a2,20(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
d000987e:       |   8a05                        andi    a2,a2,1
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:68
  // If the transmit FIFO is full, wait.
  while (uart_tx_full()) {
d0009880:       \-- fe75                        bnez    a2,d000987c <uart_putchar+0x4>
d0009882:           c00005b7            lui     a1,0xc0000
d0009886:           01c58613            addi    a2,a1,28 # c000001c <_stack_end+0xdffe001c>
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d000988a:           c208                        sw      a0,0(a2)
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
d000988c:       /-> 49c8                        lw      a0,20(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
d000988e:       |   8921                        andi    a0,a0,8
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:74
  }
  uint32_t reg = bitfield_field32_write(0, UART_WDATA_WDATA_FIELD, byte);
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_WDATA_REG_OFFSET, reg);

  // If the transmitter is active, wait.
  while (!uart_tx_idle()) {
d0009890:       \-- dd75                        beqz    a0,d000988c <uart_putchar+0x14>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:76
  }
}
d0009892:           8082                        ret

d0009894 <watchdog_init>:
watchdog_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:25

  kCtrlEnable = 1 << AON_TIMER_WDOG_CTRL_ENABLE_BIT,
  kCtrlDisable = 0 << AON_TIMER_WDOG_CTRL_ENABLE_BIT,
};

void watchdog_init(lifecycle_state_t lc_state) {
d0009894:                          1101                 addi    sp,sp,-32
d0009896:                          ce06                 sw      ra,28(sp)
d0009898:                          cc22                 sw      s0,24(sp)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000989a:                          85aa                 mv      a1,a0
d000989c:                          cf8d0637             lui     a2,0xcf8d0
d00098a0:                          aaa60693             addi    a3,a2,-1366 # cf8cfaaa <_stack_end+0xef8afaaa>
watchdog_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:30
  SEC_MMIO_ASSERT_WRITE_INCREMENT(kWatchdogSecMmioInit,
                                  kWatchdogSecMmioConfigure);
  // Disable the watchdog bite when in test and RMA lifecycle states.
  hardened_bool_t enable = kHardenedBoolTrue;
  switch (launder32(lc_state)) {
d00098a4:                   /----- 02b6d363             bge     a3,a1,d00098ca <watchdog_init+0x36>
d00098a8:                   |      aab60613             addi    a2,a2,-1365
d00098ac:                /--|----- 02c58c63             beq     a1,a2,d00098e4 <watchdog_init+0x50>
d00098b0:                |  |      0b5a7637             lui     a2,0xb5a7
d00098b4:                |  |      5e060613             addi    a2,a2,1504 # b5a75e0 <_rom_ext_virtual_size+0xb5275e0>
d00098b8:             /--|--|----- 04c59163             bne     a1,a2,d00098fa <watchdog_init+0x66>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:36
    case kLcStateTest:
      HARDENED_CHECK_EQ(lc_state, kLcStateTest);
      enable = kHardenedBoolFalse;
      break;
    case kLcStateDev:
      HARDENED_CHECK_EQ(lc_state, kLcStateDev);
d00098bc:             |  |  |  /-- 00c50663             beq     a0,a2,d00098c8 <watchdog_init+0x34>
d00098c0:             |  |  |  |   0000                 unimp
d00098c2:             |  |  |  |   0000                 unimp
d00098c4:             |  |  |  |   0000                 unimp
d00098c6:             |  |  |  |   0000                 unimp
d00098c8:       /-----|--|--|--\-X a0a9                 j       d0009912 <watchdog_init+0x7e>
d00098ca:       |     |  |  \----> 91b9b637             lui     a2,0x91b9b
d00098ce:       |     |  |         68a60613             addi    a2,a2,1674 # 91b9b68a <_stack_end+0xb1b7b68a>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:30
  switch (launder32(lc_state)) {
d00098d2:       |  /--|--|-------- 04c59363             bne     a1,a2,d0009918 <watchdog_init+0x84>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:44
    case kLcStateProd:
      HARDENED_CHECK_EQ(lc_state, kLcStateProd);
      enable = kHardenedBoolTrue;
      break;
    case kLcStateProdEnd:
      HARDENED_CHECK_EQ(lc_state, kLcStateProdEnd);
d00098d6:       |  |  |  |     /-- 00c50663             beq     a0,a2,d00098e2 <watchdog_init+0x4e>
d00098da:       |  |  |  |     |   0000                 unimp
d00098dc:       |  |  |  |     |   0000                 unimp
d00098de:       |  |  |  |     |   0000                 unimp
d00098e0:       |  |  |  |     |   0000                 unimp
d00098e2:       +--|--|--|-----\-X a805                 j       d0009912 <watchdog_init+0x7e>
d00098e4:       |  |  |  \-------> cf8d05b7             lui     a1,0xcf8d0
d00098e8:       |  |  |            aab58593             addi    a1,a1,-1365 # cf8cfaab <_stack_end+0xef8afaab>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:48
      enable = kHardenedBoolTrue;
      break;
    case kLcStateRma:
      HARDENED_CHECK_EQ(lc_state, kLcStateRma);
d00098ec:       |  |  |        /-- 00b50663             beq     a0,a1,d00098f8 <watchdog_init+0x64>
d00098f0:       |  |  |        |   0000                 unimp
d00098f2:       |  |  |        |   0000                 unimp
d00098f4:       |  |  |        |   0000                 unimp
d00098f6:       |  |  |        |   0000                 unimp
d00098f8:       |  |  |     /--\-X a825                 j       d0009930 <watchdog_init+0x9c>
d00098fa:       |  |  \-----|----> 65f25637             lui     a2,0x65f25
d00098fe:       |  |        |      20f60613             addi    a2,a2,527 # 65f2520f <_epmp_stack_guard_na4+0x2df1e20f>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:30
  switch (launder32(lc_state)) {
d0009902:       |  |     /--|----- 06c59563             bne     a1,a2,d000996c <watchdog_init+0xd8>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:40
      HARDENED_CHECK_EQ(lc_state, kLcStateProd);
d0009906:       +--|-----|--|----- 00c50663             beq     a0,a2,d0009912 <watchdog_init+0x7e>
d000990a:       |  |     |  |      0000                 unimp
d000990c:       |  |     |  |      0000                 unimp
d000990e:       |  |     |  |      0000                 unimp
d0009910:       |  |     |  |      0000                 unimp
d0009912:       \--|-----|--|----> 73900413             li      s0,1849
d0009916:          |     |  |  /-- a839                 j       d0009934 <watchdog_init+0xa0>
d0009918:          \-----|--|--|-> b2866637             lui     a2,0xb2866
d000991c:                |  |  |   fbb60613             addi    a2,a2,-69 # b2865fbb <_stack_end+0xd2845fbb>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:30
  switch (launder32(lc_state)) {
d0009920:                +--|--|-- 04c59663             bne     a1,a2,d000996c <watchdog_init+0xd8>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:32
      HARDENED_CHECK_EQ(lc_state, kLcStateTest);
d0009924:                |  +--|-- 00c50663             beq     a0,a2,d0009930 <watchdog_init+0x9c>
d0009928:                |  |  |   0000                 unimp
d000992a:                |  |  |   0000                 unimp
d000992c:                |  |  |   0000                 unimp
d000992e:                |  |  |   0000                 unimp
d0009930:                |  \--|-> 1d400413             li      s0,468
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:55
      break;
    default:
      HARDENED_UNREACHABLE();
  }

  uint32_t threshold = otp_read32(
d0009934:                |     \-> 56000513             li      a0,1376
d0009938:                |         1ca010ef             jal     ra,d000ab02 <otp_read32>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000993c:                |         85aa                 mv      a1,a0
watchdog_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:59
      OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_WATCHDOG_BITE_THRESHOLD_CYCLES_OFFSET);

  // Disable watchdog if `threshold` is less than minimum.
  if (launder32(threshold) < kWatchdogMinThreshold) {
d000993e:                |  /----- e991                 bnez    a1,d0009952 <watchdog_init+0xbe>
d0009940:                |  |      4585                 li      a1,1
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:60
    HARDENED_CHECK_LT(threshold, kWatchdogMinThreshold);
d0009942:                |  |  /-- 00b56663             bltu    a0,a1,d000994e <watchdog_init+0xba>
d0009946:                |  |  |   0000                 unimp
d0009948:                |  |  |   0000                 unimp
d000994a:                |  |  |   0000                 unimp
d000994c:                |  |  |   0000                 unimp
d000994e:                |  |  \-> 1d400413             li      s0,468
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:66
    enable = kHardenedBoolFalse;
  }

  watchdog_configure((watchdog_config_t){
      // 1.125 x bite_threshold
      .bark_threshold = (9 * threshold) / 8,
d0009952:                |  \----> 00351593             slli    a1,a0,0x3
d0009956:                |         95aa                 add     a1,a1,a0
d0009958:                |         818d                 srli    a1,a1,0x3
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:64
  watchdog_configure((watchdog_config_t){
d000995a:                |         c42e                 sw      a1,8(sp)
d000995c:                |         c62a                 sw      a0,12(sp)
d000995e:                |         c822                 sw      s0,16(sp)
d0009960:                |         0028                 addi    a0,sp,8
d0009962:                |         2809                 jal     d0009974 <watchdog_configure>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:70
      .bite_threshold = threshold,
      .enable = enable,
  });
}
d0009964:                |         4462                 lw      s0,24(sp)
d0009966:                |         40f2                 lw      ra,28(sp)
d0009968:                |         6105                 addi    sp,sp,32
d000996a:                |         8082                 ret
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:52
      HARDENED_UNREACHABLE();
d000996c:                \-------> 0000                 unimp
d000996e:                          0000                 unimp
d0009970:                          0000                 unimp
d0009972:                          0000                 unimp

d0009974 <watchdog_configure>:
watchdog_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:72

void watchdog_configure(watchdog_config_t config) {
d0009974:                 1141                  addi    sp,sp,-16
d0009976:                 c606                  sw      ra,12(sp)
d0009978:                 c422                  sw      s0,8(sp)
d000997a:                 c226                  sw      s1,4(sp)
d000997c:                 842a                  mv      s0,a0
d000997e:                 c04004b7              lui     s1,0xc0400
d0009982:                 02c48513              addi    a0,s1,44 # c040002c <_stack_end+0xe03e002c>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:75
  SEC_MMIO_ASSERT_WRITE_INCREMENT(kWatchdogSecMmioConfigure, 4);
  // Tell pwrmgr we want watchdog reset events to reset the chip.
  sec_mmio_write32(
d0009986:                 4589                  li      a1,2
d0009988:                 290010ef              jal     ra,d000ac18 <sec_mmio_write32>
d000998c:                 4505                  li      a0,1
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d000998e:                 cc88                  sw      a0,24(s1)
d0009990:                 c04704b7              lui     s1,0xc0470
d0009994:                 01448513              addi    a0,s1,20 # c0470014 <_stack_end+0xe0450014>
watchdog_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:83
          0, kTopEarlgreyPowerManagerResetRequestsAonTimerAonAonTimerRstReq,
          true));
  abs_mmio_write32(kPwrMgrBase + PWRMGR_CFG_CDC_SYNC_REG_OFFSET, 1);

  // Set the watchdog bite and bark thresholds.
  sec_mmio_write32(kBase + AON_TIMER_WDOG_CTRL_REG_OFFSET, kCtrlDisable);
d0009998:                 4581                  li      a1,0
d000999a:                 27e010ef              jal     ra,d000ac18 <sec_mmio_write32>
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d000999e:                 0204a023              sw      zero,32(s1)
watchdog_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:86
  abs_mmio_write32(kBase + AON_TIMER_WDOG_COUNT_REG_OFFSET, 0);
  abs_mmio_write32(kBase + AON_TIMER_WDOG_BARK_THOLD_REG_OFFSET,
                   config.bark_threshold);
d00099a2:                 4008                  lw      a0,0(s0)
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d00099a4:                 cc88                  sw      a0,24(s1)
watchdog_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:88
  sec_mmio_write32(kBase + AON_TIMER_WDOG_BITE_THOLD_REG_OFFSET,
                   config.bite_threshold);
d00099a6:                 404c                  lw      a1,4(s0)
d00099a8:                 01c48513              addi    a0,s1,28
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:87
  sec_mmio_write32(kBase + AON_TIMER_WDOG_BITE_THOLD_REG_OFFSET,
d00099ac:                 26c010ef              jal     ra,d000ac18 <sec_mmio_write32>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:92

  // Enable or disable the watchdog as requested.
  uint32_t ctrl = kCtrlEnable;
  switch (launder32(config.enable)) {
d00099b0:                 4408                  lw      a0,8(s0)
d00099b2:                 1d400613              li      a2,468
d00099b6:          /----- 00c51b63              bne     a0,a2,d00099cc <watchdog_configure+0x58>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:98
    case kHardenedBoolTrue:
      HARDENED_CHECK_EQ(config.enable, kHardenedBoolTrue);
      ctrl = kCtrlEnable;
      break;
    case kHardenedBoolFalse:
      HARDENED_CHECK_EQ(config.enable, kHardenedBoolFalse);
d00099ba:          |      4408                  lw      a0,8(s0)
d00099bc:          |      4581                  li      a1,0
d00099be:          |  /-- 00c50663              beq     a0,a2,d00099ca <watchdog_configure+0x56>
d00099c2:          |  |   0000                  unimp
d00099c4:          |  |   0000                  unimp
d00099c6:          |  |   0000                  unimp
d00099c8:          |  |   0000                  unimp
d00099ca:       /--|--\-X a829                  j       d00099e4 <watchdog_configure+0x70>
d00099cc:       |  \----> 73900593              li      a1,1849
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:92
  switch (launder32(config.enable)) {
d00099d0:       |  /----- 02b51863              bne     a0,a1,d0009a00 <watchdog_configure+0x8c>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:94
      HARDENED_CHECK_EQ(config.enable, kHardenedBoolTrue);
d00099d4:       |  |      4408                  lw      a0,8(s0)
d00099d6:       |  |  /-- 00b50663              beq     a0,a1,d00099e2 <watchdog_configure+0x6e>
d00099da:       |  |  |   0000                  unimp
d00099dc:       |  |  |   0000                  unimp
d00099de:       |  |  |   0000                  unimp
d00099e0:       |  |  |   0000                  unimp
d00099e2:       |  |  \-> 4585                  li      a1,1
d00099e4:       \--|----> c0470537              lui     a0,0xc0470
d00099e8:          |      0551                  addi    a0,a0,20
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:104
      ctrl = kCtrlDisable;
      break;
    default:
      HARDENED_UNREACHABLE();
  }
  sec_mmio_write32(kBase + AON_TIMER_WDOG_CTRL_REG_OFFSET, ctrl);
d00099ea:          |      22e010ef              jal     ra,d000ac18 <sec_mmio_write32>
d00099ee:          |      c0400537              lui     a0,0xc0400
d00099f2:          |      4585                  li      a1,1
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d00099f4:          |      cd0c                  sw      a1,24(a0)
watchdog_configure():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:109

  // Redundantly re-request the pwrmgr configuration sync since it isn't
  // possible to use sec_mmio for it.
  abs_mmio_write32(kPwrMgrBase + PWRMGR_CFG_CDC_SYNC_REG_OFFSET, 1);
}
d00099f6:          |      4492                  lw      s1,4(sp)
d00099f8:          |      4422                  lw      s0,8(sp)
d00099fa:          |      40b2                  lw      ra,12(sp)
d00099fc:          |      0141                  addi    sp,sp,16
d00099fe:          |      8082                  ret
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/watchdog.c:102
      HARDENED_UNREACHABLE();
d0009a00:          \----> 0000                  unimp
d0009a02:                 0000                  unimp
d0009a04:                 0000                  unimp
d0009a06:                 0000                  unimp

d0009a08 <dif_spi_host_init>:
dif_spi_host_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:19
#include "spi_host_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_host_init(mmio_region_t base_addr,
                               dif_spi_host_t *spi_host) {
  if (spi_host == NULL) {
d0009a08:       /----- c581                     beqz    a1,d0009a10 <dif_spi_host_init+0x8>
d0009a0a:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:23
    return kDifBadArg;
  }

  spi_host->base_addr = base_addr;
d0009a0c:       |      c188                     sw      a0,0(a1)
d0009a0e:       |  /-- a011                     j       d0009a12 <dif_spi_host_init+0xa>
d0009a10:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:26

  return kDifOk;
}
d0009a12:          \-> 8532                     mv      a0,a2
d0009a14:              8082                     ret

d0009a16 <dif_spi_host_fifo_write>:
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:156
  uint32_t val = read_32((const void *)srcaddr);
  mmio_region_write32(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, val);
}

dif_result_t dif_spi_host_fifo_write(const dif_spi_host_t *spi_host,
                                     const void *src, uint16_t len) {
d0009a16:                    468d                       li      a3,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:158
  uintptr_t ptr = (uintptr_t)src;
  if (spi_host == NULL || (src == NULL && len > 0)) {
d0009a18:       /----------- cd45                       beqz    a0,d0009ad0 <dif_spi_host_fifo_write+0xba>
d0009a1a:       |            00b03733           snez    a4,a1
d0009a1e:       |            00163793           seqz    a5,a2
d0009a22:       |            8f5d                       or      a4,a4,a5
d0009a24:       +----------- c755                       beqz    a4,d0009ad0 <dif_spi_host_fifo_write+0xba>
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
d0009a26:       |            0035f693           andi    a3,a1,3
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
    return kDifBadArg;
  }

  // If the pointer starts mis-aligned, write until we are aligned.
  while (misalignment32_of(ptr) && len > 0) {
d0009a2a:       |            00d036b3           snez    a3,a3
d0009a2e:       |            00c03733           snez    a4,a2
d0009a32:       |            8ef9                       and     a3,a3,a4
d0009a34:       |  /-------- ce8d                       beqz    a3,d0009a6e <dif_spi_host_fifo_write+0x58>
d0009a36:       |  |         04800693           li      a3,72
d0009a3a:       |  |         6741                       lui     a4,0x10
d0009a3c:       |  |         fff70813           addi    a6,a4,-1 # ffff <_stack_size+0xbfff>
d0009a40:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
d0009a42:       |  |  |  /-> 4bd8                       lw      a4,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
d0009a44:       |  |  |  |   0ff77713           andi    a4,a4,255
d0009a48:       |  |  |  \-- fed70de3           beq     a4,a3,d0009a42 <dif_spi_host_fifo_write+0x2c>
tx_fifo_write8():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:145
  mmio_region_write8(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, *src);
d0009a4c:       |  |  |      00058883           lb      a7,0(a1)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:165
    tx_fifo_write8(spi_host, ptr);
    ptr += 1;
d0009a50:       |  |  |      0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:166
    len -= 1;
d0009a52:       |  |  |      167d                       addi    a2,a2,-1
d0009a54:       |  |  |      010672b3           and     t0,a2,a6
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
d0009a58:       |  |  |      0035f713           andi    a4,a1,3
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
  while (misalignment32_of(ptr) && len > 0) {
d0009a5c:       |  |  |      00e03333           snez    t1,a4
d0009a60:       |  |  |      00503733           snez    a4,t0
d0009a64:       |  |  |      00e37733           and     a4,t1,a4
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write8(mmio_region_t base, ptrdiff_t offset,
                               uint8_t value) {
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
d0009a68:       |  |  |      03178423           sb      a7,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
d0009a6c:       |  |  \----- fb71                       bnez    a4,d0009a40 <dif_spi_host_fifo_write+0x2a>
d0009a6e:       |  \-------> 66c1                       lui     a3,0x10
d0009a70:       |            fff68893           addi    a7,a3,-1 # ffff <_stack_size+0xbfff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:170
  }

  // Write complete 32-bit words to the fifo.
  while (len > 3) {
d0009a74:       |            01167733           and     a4,a2,a7
d0009a78:       |            4791                       li      a5,4
d0009a7a:       |  /-------- 02f76363           bltu    a4,a5,d0009aa0 <dif_spi_host_fifo_write+0x8a>
d0009a7e:       |  |         04800713           li      a4,72
d0009a82:       |  |         480d                       li      a6,3
d0009a84:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
d0009a86:       |  |  |  /-> 4bd4                       lw      a3,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
d0009a88:       |  |  |  |   0ff6f693           andi    a3,a3,255
d0009a8c:       |  |  |  \-- fee68de3           beq     a3,a4,d0009a86 <dif_spi_host_fifo_write+0x70>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
d0009a90:       |  |  |      4194                       lw      a3,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
d0009a92:       |  |  |      d794                       sw      a3,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:173
    tx_fifo_write32(spi_host, ptr);
    ptr += 4;
    len -= 4;
d0009a94:       |  |  |      1671                       addi    a2,a2,-4
d0009a96:       |  |  |      011676b3           and     a3,a2,a7
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:172
    ptr += 4;
d0009a9a:       |  |  |      0591                       addi    a1,a1,4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:170
  while (len > 3) {
d0009a9c:       |  |  \----- fed864e3           bltu    a6,a3,d0009a84 <dif_spi_host_fifo_write+0x6e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:177
  }

  // Clean up any leftover bytes.
  while (len > 0) {
d0009aa0:       |  \-------> 011676b3           and     a3,a2,a7
d0009aa4:       |  /-------- c68d                       beqz    a3,d0009ace <dif_spi_host_fifo_write+0xb8>
d0009aa6:       |  |         04800693           li      a3,72
d0009aaa:       |  |         6741                       lui     a4,0x10
d0009aac:       |  |         fff70813           addi    a6,a4,-1 # ffff <_stack_size+0xbfff>
d0009ab0:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
d0009ab2:       |  |  |  /-> 4bd8                       lw      a4,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
d0009ab4:       |  |  |  |   0ff77713           andi    a4,a4,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
d0009ab8:       |  |  |  \-- fed70de3           beq     a4,a3,d0009ab2 <dif_spi_host_fifo_write+0x9c>
tx_fifo_write8():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:145
  mmio_region_write8(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, *src);
d0009abc:       |  |  |      00058703           lb      a4,0(a1)
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
d0009ac0:       |  |  |      02e78423           sb      a4,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:180
    tx_fifo_write8(spi_host, ptr);
    ptr += 1;
    len -= 1;
d0009ac4:       |  |  |      167d                       addi    a2,a2,-1
d0009ac6:       |  |  |      01067733           and     a4,a2,a6
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:179
    ptr += 1;
d0009aca:       |  |  |      0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:177
  while (len > 0) {
d0009acc:       |  |  \----- f375                       bnez    a4,d0009ab0 <dif_spi_host_fifo_write+0x9a>
d0009ace:       |  \-------> 4681                       li      a3,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:184
  }

  return kDifOk;
}
d0009ad0:       \----------> 8536                       mv      a0,a3
d0009ad2:                    8082                       ret

d0009ad4 <dif_spi_host_fifo_read>:
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:223
  queue->length -= 4;
  return val;
}

dif_result_t dif_spi_host_fifo_read(const dif_spi_host_t *spi_host, void *dst,
                                    uint16_t len) {
d0009ad4:                       7179                    addi    sp,sp,-48
d0009ad6:                       d606                    sw      ra,44(sp)
d0009ad8:                       d422                    sw      s0,40(sp)
d0009ada:                       d226                    sw      s1,36(sp)
d0009adc:                       d04a                    sw      s2,32(sp)
d0009ade:                       ce4e                    sw      s3,28(sp)
d0009ae0:                       cc52                    sw      s4,24(sp)
d0009ae2:                       ca56                    sw      s5,20(sp)
d0009ae4:                       892a                    mv      s2,a0
d0009ae6:                       450d                    li      a0,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:224
  if (spi_host == NULL || (dst == NULL && len > 0)) {
d0009ae8:       /-------------- 12090963                beqz    s2,d0009c1a <dif_spi_host_fifo_read+0x146>
d0009aec:       |               89b2                    mv      s3,a2
d0009aee:       |               84ae                    mv      s1,a1
d0009af0:       |               00b035b3                snez    a1,a1
d0009af4:       |               00163613                seqz    a2,a2
d0009af8:       |               8dd1                    or      a1,a1,a2
d0009afa:       +-------------- 12058063                beqz    a1,d0009c1a <dif_spi_host_fifo_read+0x146>
d0009afe:       |               00002517                auipc   a0,0x2
d0009b02:       |               a4a50513                addi    a0,a0,-1462 # d000b548 <rom_printf.kHexTable+0x2c>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:231
  }

  uintptr_t ptr = (uintptr_t)dst;
  // We always have to read from the RXFIFO as a 32-bit word.  We use a
  // two-word queue to handle destination and length mis-alignments.
  queue_t queue = {0};
d0009b06:       |               454c                    lw      a1,12(a0)
d0009b08:       |               4510                    lw      a2,8(a0)
d0009b0a:       |               4154                    lw      a3,4(a0)
d0009b0c:       |               c62e                    sw      a1,12(sp)
d0009b0e:       |               6a41                    lui     s4,0x10
d0009b10:       |               c432                    sw      a2,8(sp)
d0009b12:       |               c236                    sw      a3,4(sp)
d0009b14:       |               4108                    lw      a0,0(a0)
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
d0009b16:       |               0034f593                andi    a1,s1,3
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235

  // If the buffer is misaligned, write a byte at a time until we reach
  // alignment.
  while (misalignment32_of(ptr) && len > 0) {
d0009b1a:       |               00b035b3                snez    a1,a1
d0009b1e:       |               01303633                snez    a2,s3
d0009b22:       |               8df1                    and     a1,a1,a2
d0009b24:       |               f00a0413                addi    s0,s4,-256 # ff00 <_stack_size+0xbf00>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:231
  queue_t queue = {0};
d0009b28:       |               c02a                    sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235
  while (misalignment32_of(ptr) && len > 0) {
d0009b2a:       |  /----------- cdb1                    beqz    a1,d0009b86 <dif_spi_host_fifo_read+0xb2>
d0009b2c:       |  |            4501                    li      a0,0
d0009b2e:       |  |            fffa0a93                addi    s5,s4,-1
d0009b32:       |  |     /----- 00a04b63                bgtz    a0,d0009b48 <dif_spi_host_fifo_read+0x74>
d0009b36:       |  |  /--|----> 00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
d0009b3a:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
d0009b3c:       |  |  |  |  |   8de1                    and     a1,a1,s0
d0009b3e:       |  |  |  |  \-- ddf5                    beqz    a1,d0009b3a <dif_spi_host_fifo_read+0x66>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
d0009b40:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:238
    if (queue.length < 1) {
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
d0009b42:       |  |  |  |      850a                    mv      a0,sp
d0009b44:       |  |  |  |      2259                    jal     d0009cca <enqueue_word>
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
d0009b46:       |  |  |  |      4502                    lw      a0,0(sp)
read_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:120
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint64_t));
  uint64_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint64_t));
d0009b48:       |  |  |  >----> 45b2                    lw      a1,12(sp)
d0009b4a:       |  |  |  |      4622                    lw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:208
  uint8_t val = queue->data[0];
d0009b4c:       |  |  |  |      00810683                lb      a3,8(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:210
  write_64(qword >> 8, queue->data);
d0009b50:       |  |  |  |      01859713                slli    a4,a1,0x18
d0009b54:       |  |  |  |      8221                    srli    a2,a2,0x8
d0009b56:       |  |  |  |      8e59                    or      a2,a2,a4
d0009b58:       |  |  |  |      81a1                    srli    a1,a1,0x8
write_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:172
inline void write_64(uint64_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_64()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint64_t));
  __builtin_memcpy(ptr, &value, sizeof(uint64_t));
d0009b5a:       |  |  |  |      c62e                    sw      a1,12(sp)
d0009b5c:       |  |  |  |      c432                    sw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
d0009b5e:       |  |  |  |      157d                    addi    a0,a0,-1
d0009b60:       |  |  |  |      c02a                    sw      a0,0(sp)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:242
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    uint8_t *p = (uint8_t *)ptr;
    *p = dequeue_byte(&queue);
d0009b62:       |  |  |  |      00d48023                sb      a3,0(s1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:243
    ptr += 1;
d0009b66:       |  |  |  |      0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:244
    len -= 1;
d0009b68:       |  |  |  |      19fd                    addi    s3,s3,-1
d0009b6a:       |  |  |  |      0159f533                and     a0,s3,s5
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
d0009b6e:       |  |  |  |      0034f593                andi    a1,s1,3
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235
  while (misalignment32_of(ptr) && len > 0) {
d0009b72:       |  |  |  |      00b035b3                snez    a1,a1
d0009b76:       |  |  |  |      00a03533                snez    a0,a0
d0009b7a:       |  |  |  |      8d6d                    and     a0,a0,a1
d0009b7c:       |  +--|--|----- c509                    beqz    a0,d0009b86 <dif_spi_host_fifo_read+0xb2>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:236
    if (queue.length < 1) {
d0009b7e:       |  |  |  |      4502                    lw      a0,0(sp)
d0009b80:       |  |  |  \----- fca044e3                bgtz    a0,d0009b48 <dif_spi_host_fifo_read+0x74>
d0009b84:       |  |  \-------- bf4d                    j       d0009b36 <dif_spi_host_fifo_read+0x62>
d0009b86:       |  \----------> fffa0513                addi    a0,s4,-1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:248
  }

  // While we can write complete words to memory, operate on 4 bytes at a time.
  while (len > 3) {
d0009b8a:       |               00a9f533                and     a0,s3,a0
d0009b8e:       |               4591                    li      a1,4
d0009b90:       |  /----------- 02b56e63                bltu    a0,a1,d0009bcc <dif_spi_host_fifo_read+0xf8>
d0009b94:       |  |            4a0d                    li      s4,3
d0009b96:       |  |            6541                    lui     a0,0x10
d0009b98:       |  |            fff50a93                addi    s5,a0,-1 # ffff <_stack_size+0xbfff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:249
    if (queue.length < 4) {
d0009b9c:       |  |  /-------> 4502                    lw      a0,0(sp)
d0009b9e:       |  |  |  /----- 00aa4b63                blt     s4,a0,d0009bb4 <dif_spi_host_fifo_read+0xe0>
d0009ba2:       |  |  |  |      00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
d0009ba6:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
d0009ba8:       |  |  |  |  |   8de1                    and     a1,a1,s0
d0009baa:       |  |  |  |  \-- ddf5                    beqz    a1,d0009ba6 <dif_spi_host_fifo_read+0xd2>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
d0009bac:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:251
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
d0009bae:       |  |  |  |      850a                    mv      a0,sp
d0009bb0:       |  |  |  |      2a29                    jal     d0009cca <enqueue_word>
dequeue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:218
  queue->length -= 4;
d0009bb2:       |  |  |  |      4502                    lw      a0,0(sp)
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
d0009bb4:       |  |  |  \----> 45b2                    lw      a1,12(sp)
d0009bb6:       |  |  |         4622                    lw      a2,8(sp)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
d0009bb8:       |  |  |         c42e                    sw      a1,8(sp)
dequeue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:218
d0009bba:       |  |  |         1571                    addi    a0,a0,-4
d0009bbc:       |  |  |         c02a                    sw      a0,0(sp)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
d0009bbe:       |  |  |         c090                    sw      a2,0(s1)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:256
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    write_32(dequeue_word(&queue), (void *)ptr);
    ptr += 4;
    len -= 4;
d0009bc0:       |  |  |         19f1                    addi    s3,s3,-4
d0009bc2:       |  |  |         0159f533                and     a0,s3,s5
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:255
    ptr += 4;
d0009bc6:       |  |  |         0491                    addi    s1,s1,4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:248
  while (len > 3) {
d0009bc8:       |  |  \-------- fcaa6ae3                bltu    s4,a0,d0009b9c <dif_spi_host_fifo_read+0xc8>
d0009bcc:       |  \----------> 6541                    lui     a0,0x10
d0009bce:       |               fff50a13                addi    s4,a0,-1 # ffff <_stack_size+0xbfff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:260
  }

  // Finish up any left over buffer a byte at a time.
  while (len > 0) {
d0009bd2:       |               0149f533                and     a0,s3,s4
d0009bd6:       |  /----------- c129                    beqz    a0,d0009c18 <dif_spi_host_fifo_read+0x144>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:261
    if (queue.length < 1) {
d0009bd8:       |  |  /-------> 4502                    lw      a0,0(sp)
d0009bda:       |  |  |  /----- 00a04b63                bgtz    a0,d0009bf0 <dif_spi_host_fifo_read+0x11c>
d0009bde:       |  |  |  |      00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
d0009be2:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
d0009be4:       |  |  |  |  |   8de1                    and     a1,a1,s0
d0009be6:       |  |  |  |  \-- ddf5                    beqz    a1,d0009be2 <dif_spi_host_fifo_read+0x10e>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
d0009be8:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:263
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
d0009bea:       |  |  |  |      850a                    mv      a0,sp
d0009bec:       |  |  |  |      28f9                    jal     d0009cca <enqueue_word>
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
d0009bee:       |  |  |  |      4502                    lw      a0,0(sp)
read_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:120
  __builtin_memcpy(&val, ptr, sizeof(uint64_t));
d0009bf0:       |  |  |  \----> 45b2                    lw      a1,12(sp)
d0009bf2:       |  |  |         4622                    lw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:208
  uint8_t val = queue->data[0];
d0009bf4:       |  |  |         00810683                lb      a3,8(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:210
  write_64(qword >> 8, queue->data);
d0009bf8:       |  |  |         01859713                slli    a4,a1,0x18
d0009bfc:       |  |  |         8221                    srli    a2,a2,0x8
d0009bfe:       |  |  |         8e59                    or      a2,a2,a4
d0009c00:       |  |  |         81a1                    srli    a1,a1,0x8
write_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:172
  __builtin_memcpy(ptr, &value, sizeof(uint64_t));
d0009c02:       |  |  |         c62e                    sw      a1,12(sp)
d0009c04:       |  |  |         c432                    sw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
d0009c06:       |  |  |         157d                    addi    a0,a0,-1
d0009c08:       |  |  |         c02a                    sw      a0,0(sp)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:267
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    uint8_t *p = (uint8_t *)ptr;
    *p = dequeue_byte(&queue);
d0009c0a:       |  |  |         00d48023                sb      a3,0(s1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:269
    ptr += 1;
    len -= 1;
d0009c0e:       |  |  |         19fd                    addi    s3,s3,-1
d0009c10:       |  |  |         0149f533                and     a0,s3,s4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:268
    ptr += 1;
d0009c14:       |  |  |         0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:260
  while (len > 0) {
d0009c16:       |  |  \-------- f169                    bnez    a0,d0009bd8 <dif_spi_host_fifo_read+0x104>
d0009c18:       |  \----------> 4501                    li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:273
  }

  return kDifOk;
}
d0009c1a:       \-------------> 4ad2                    lw      s5,20(sp)
d0009c1c:                       4a62                    lw      s4,24(sp)
d0009c1e:                       49f2                    lw      s3,28(sp)
d0009c20:                       5902                    lw      s2,32(sp)
d0009c22:                       5492                    lw      s1,36(sp)
d0009c24:                       5422                    lw      s0,40(sp)
d0009c26:                       50b2                    lw      ra,44(sp)
d0009c28:                       6145                    addi    sp,sp,48
d0009c2a:                       8082                    ret

d0009c2c <dif_spi_host_configure>:
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:66
                                    dif_spi_host_config_t config) {
d0009c2c:              460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:67
  if (spi_host == NULL) {
d0009c2e:       /----- cd35                     beqz    a0,d0009caa <dif_spi_host_configure+0x7e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:70
  if (config.peripheral_clock_freq_hz == 0 || config.spi_clock == 0) {
d0009c30:       |      41d4                     lw      a3,4(a1)
d0009c32:       +----- cea5                     beqz    a3,d0009caa <dif_spi_host_configure+0x7e>
d0009c34:       |      4198                     lw      a4,0(a1)
d0009c36:       +----- cb35                     beqz    a4,d0009caa <dif_spi_host_configure+0x7e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:75
      ((config.peripheral_clock_freq_hz / config.spi_clock) / 2) - 1;
d0009c38:       |      02e6d6b3                 divu    a3,a3,a4
d0009c3c:       |      8285                     srli    a3,a3,0x1
d0009c3e:       |      16fd                     addi    a3,a3,-1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:76
  if (divider & ~SPI_HOST_CONFIGOPTS_CLKDIV_0_MASK) {
d0009c40:       |      0106d713                 srli    a4,a3,0x10
d0009c44:       +----- e33d                     bnez    a4,d0009caa <dif_spi_host_configure+0x7e>
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:32
  mmio_region_write32(
d0009c46:       |      4110                     lw      a2,0(a0)
d0009c48:       |      40000737                 lui     a4,0x40000
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
d0009c4c:       |      ca18                     sw      a4,16(a2)
d0009c4e:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
d0009c50:       |  /-> 4a5c                     lw      a5,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
d0009c52:       |  |   8ff9                     and     a5,a5,a4
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:42
  } while (active);
d0009c54:       |  \-- fff5                     bnez    a5,d0009c50 <dif_spi_host_configure+0x24>
d0009c56:       |      6741                     lui     a4,0x10
d0009c58:       |      177d                     addi    a4,a4,-1
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
d0009c5a:       |  /-> 4a5c                     lw      a5,20(a2)
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:51
  } while (txqd != 0 || rxqd != 0);
d0009c5c:       |  |   8ff9                     and     a5,a5,a4
d0009c5e:       |  \-- fff5                     bnez    a5,d0009c5a <dif_spi_host_configure+0x2e>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
d0009c60:       |      00062823                 sw      zero,16(a2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009c64:       |      00858603                 lb      a2,8(a1) # 80000008 <_stack_end+0x9ffe0008>
d0009c68:       |      8ef9                     and     a3,a3,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
d0009c6a:       |      0672                     slli    a2,a2,0x1c
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009c6c:       |      00958703                 lb      a4,9(a1)
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
d0009c70:       |      8231                     srli    a2,a2,0xc
d0009c72:       |      8e55                     or      a2,a2,a3
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:89
                               config.chip_select.lead);
d0009c74:       |      00a5c683                 lbu     a3,10(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
d0009c78:       |      0772                     slli    a4,a4,0x1c
d0009c7a:       |      8321                     srli    a4,a4,0x8
d0009c7c:       |      8e59                     or      a2,a2,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009c7e:       |      8abd                     andi    a3,a3,15
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_bit32_write(uint32_t bitfield,
                                     bitfield_bit32_index_t bit_index,
                                     bool value) {
  return bitfield_field32_write(bitfield, bitfield_bit32_to_field32(bit_index),
                                value ? 0x1u : 0x0u);
d0009c80:       |      00b58703                 lb      a4,11(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009c84:       |      06e2                     slli    a3,a3,0x18
d0009c86:       |      8e55                     or      a2,a2,a3
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
d0009c88:       |      00c58683                 lb      a3,12(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009c8c:       |      0776                     slli    a4,a4,0x1d
d0009c8e:       |      8e59                     or      a2,a2,a4
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
d0009c90:       |      00d58583                 lb      a1,13(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009c94:       |      06fa                     slli    a3,a3,0x1e
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:94
  mmio_region_write32(spi_host->base_addr, SPI_HOST_CONFIGOPTS_REG_OFFSET, reg);
d0009c96:       |      4118                     lw      a4,0(a0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
d0009c98:       |      8e55                     or      a2,a2,a3
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009c9a:       |      05fe                     slli    a1,a1,0x1f
d0009c9c:       |      8dd1                     or      a1,a1,a2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
d0009c9e:       |      cf0c                     sw      a1,24(a4)
spi_host_enable():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:60
  mmio_region_write32(
d0009ca0:       |      4108                     lw      a0,0(a0)
d0009ca2:       |      4601                     li      a2,0
d0009ca4:       |      800005b7                 lui     a1,0x80000
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
d0009ca8:       |      c90c                     sw      a1,16(a0)
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:97
}
d0009caa:       \----> 8532                     mv      a0,a2
d0009cac:              8082                     ret

d0009cae <dif_spi_host_output_set_enabled>:
dif_spi_host_output_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:101
  if (spi_host == NULL) {
d0009cae:       /-- cd01                        beqz    a0,d0009cc6 <dif_spi_host_output_set_enabled+0x18>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:106
      mmio_region_read32(spi_host->base_addr, SPI_HOST_CONTROL_REG_OFFSET);
d0009cb0:       |   4110                        lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
d0009cb2:       |   4a14                        lw      a3,16(a2)
d0009cb4:       |   4501                        li      a0,0
d0009cb6:       |   e0000737            lui     a4,0xe0000
d0009cba:       |   177d                        addi    a4,a4,-1
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
d0009cbc:       |   8ef9                        and     a3,a3,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009cbe:       |   05f6                        slli    a1,a1,0x1d
d0009cc0:       |   8dd5                        or      a1,a1,a3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
d0009cc2:       |   ca0c                        sw      a1,16(a2)
dif_spi_host_output_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:112
}
d0009cc4:       |   8082                        ret
d0009cc6:       \-> 450d                        li      a0,3
d0009cc8:           8082                        ret

d0009cca <enqueue_word>:
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:196
  if (queue->length % sizeof(uint32_t) == 0) {
d0009cca:              4110                     lw      a2,0(a0)
d0009ccc:              00367693                 andi    a3,a2,3
d0009cd0:       /----- c29d                     beqz    a3,d0009cf6 <enqueue_word+0x2c>
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
d0009cd2:       |      00160693                 addi    a3,a2,1
d0009cd6:       |      c114                     sw      a3,0(a0)
d0009cd8:       |      962a                     add     a2,a2,a0
d0009cda:       |      00b60423                 sb      a1,8(a2)
d0009cde:       |      460d                     li      a2,3
d0009ce0:       |  /-> 4114                     lw      a3,0(a0)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:202
      data >>= 8;
d0009ce2:       |  |   81a1                     srli    a1,a1,0x8
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
d0009ce4:       |  |   00168713                 addi    a4,a3,1
d0009ce8:       |  |   c118                     sw      a4,0(a0)
d0009cea:       |  |   96aa                     add     a3,a3,a0
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:200
    for (size_t i = 0; i < sizeof(uint32_t); ++i) {
d0009cec:       |  |   167d                     addi    a2,a2,-1
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
d0009cee:       |  |   00b68423                 sb      a1,8(a3)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:200
    for (size_t i = 0; i < sizeof(uint32_t); ++i) {
d0009cf2:       |  \-- f67d                     bnez    a2,d0009ce0 <enqueue_word+0x16>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:205
}
d0009cf4:       |      8082                     ret
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:197
    write_32(data, queue->data + queue->length);
d0009cf6:       \----> 962a                     add     a2,a2,a0
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
d0009cf8:              c60c                     sw      a1,8(a2)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:198
    queue->length += 4;
d0009cfa:              410c                     lw      a1,0(a0)
d0009cfc:              0591                     addi    a1,a1,4
d0009cfe:              c10c                     sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:205
}
d0009d00:              8082                     ret

d0009d02 <dif_spi_host_transaction>:
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:362
}

dif_result_t dif_spi_host_transaction(const dif_spi_host_t *spi_host,
                                      uint32_t csid,
                                      dif_spi_host_segment_t *segments,
                                      size_t length) {
d0009d02:                          7139                 addi    sp,sp,-64
d0009d04:                          de06                 sw      ra,60(sp)
d0009d06:                          dc22                 sw      s0,56(sp)
d0009d08:                          da26                 sw      s1,52(sp)
d0009d0a:                          d84a                 sw      s2,48(sp)
d0009d0c:                          d64e                 sw      s3,44(sp)
d0009d0e:                          d452                 sw      s4,40(sp)
d0009d10:                          d256                 sw      s5,36(sp)
d0009d12:                          d05a                 sw      s6,32(sp)
d0009d14:                          ce5e                 sw      s7,28(sp)
d0009d16:                          cc62                 sw      s8,24(sp)
d0009d18:                          ca66                 sw      s9,20(sp)
d0009d1a:                          c86a                 sw      s10,16(sp)
d0009d1c:                          c66e                 sw      s11,12(sp)
d0009d1e:                          8a2a                 mv      s4,a0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:364
  // Write to chip select ID.
  mmio_region_write32(spi_host->base_addr, SPI_HOST_CSID_REG_OFFSET, csid);
d0009d20:                          4108                 lw      a0,0(a0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
d0009d22:                          cd4c                 sw      a1,28(a0)
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:368

  // For each segment, write the segment information to the
  // COMMAND register and transmit FIFO.
  for (size_t i = 0; i < length; ++i) {
d0009d24:       /----------------- 1a068263             beqz    a3,d0009ec8 <dif_spi_host_transaction+0x1c6>
d0009d28:       |                  8d36                 mv      s10,a3
d0009d2a:       |                  8932                 mv      s2,a2
d0009d2c:       |                  4401                 li      s0,0
d0009d2e:       |                  fff68a93             addi    s5,a3,-1
d0009d32:       |                  0016b513             seqz    a0,a3
d0009d36:       |                  c02a                 sw      a0,0(sp)
d0009d38:       |                  6505                 lui     a0,0x1
d0009d3a:       |                  c0050b13             addi    s6,a0,-1024 # c00 <_epmp_reset_rx_size+0x400>
d0009d3e:       |                  4851                 li      a6,20
d0009d40:       |                  4c15                 li      s8,5
d0009d42:       |                  00001c97             auipc   s9,0x1
d0009d46:       |                  7eac8c93             addi    s9,s9,2026 # d000b52c <rom_printf.kHexTable+0x10>
d0009d4a:       |                  04800493             li      s1,72
d0009d4e:       |                  6541                 lui     a0,0x10
d0009d50:       |                  f0050593             addi    a1,a0,-256 # ff00 <_stack_size+0xbf00>
d0009d54:       |                  c22e                 sw      a1,4(sp)
d0009d56:       |                  157d                 addi    a0,a0,-1
d0009d58:       |                  c42a                 sw      a0,8(sp)
d0009d5a:       |        /-------> 000a2503             lw      a0,0(s4)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
d0009d5e:       |        |     /-> 494c                 lw      a1,20(a0)
wait_ready():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:120
  } while (!ready);
d0009d60:       |        |     \-- fe05dfe3             bgez    a1,d0009d5e <dif_spi_host_transaction+0x5c>
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:372
    bool last_segment = i == length - 1;
    wait_ready(spi_host);
    dif_spi_host_segment_t *segment = &segments[i];
    switch (segment->type) {
d0009d64:       |        |         030405b3             mul     a1,s0,a6
d0009d68:       |        |         95ca                 add     a1,a1,s2
d0009d6a:       |        |         4190                 lw      a2,0(a1)
d0009d6c:       |  /-----|-------- 16cc6e63             bltu    s8,a2,d0009ee8 <dif_spi_host_transaction+0x1e6>
d0009d70:       |  |     |         060a                 slli    a2,a2,0x2
d0009d72:       |  |     |         9666                 add     a2,a2,s9
d0009d74:       |  |     |         4210                 lw      a2,0(a2)
d0009d76:       |  |     |         015446b3             xor     a3,s0,s5
d0009d7a:       |  |     |         0016bd93             seqz    s11,a3
d0009d7e:       |  |     |         8602                 jr      a2
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
d0009d80:       |  |     |     /-> 4950                 lw      a2,20(a0)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
d0009d82:       |  |     |     |   0ff67613             andi    a2,a2,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
d0009d86:       |  |     |     \-- fe960de3             beq     a2,s1,d0009d80 <dif_spi_host_transaction+0x7e>
issue_opcode():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:292
                     segment->opcode);
d0009d8a:       |  |     |         00458583             lb      a1,4(a1) # 3004 <_static_critical_size+0x1040>
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
d0009d8e:       |  |     |         02b50423             sb      a1,40(a0)
d0009d92:       |  |     |         6589                 lui     a1,0x2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009d94:       |  |     |     /-- 000d9463             bnez    s11,d0009d9c <dif_spi_host_transaction+0x9a>
d0009d98:       |  |     |     |   20058593             addi    a1,a1,512 # 2200 <_static_critical_size+0x23c>
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
d0009d9c:       |  |     |     \-> 000a2503             lw      a0,0(s4)
d0009da0:       |  |     |  /----- a8f1                 j       d0009e7c <dif_spi_host_transaction+0x17a>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
d0009da2:       |  |     |  |  /-> 4950                 lw      a2,20(a0)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
d0009da4:       |  |     |  |  |   0ff67613             andi    a2,a2,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
d0009da8:       |  |     |  |  \-- fe960de3             beq     a2,s1,d0009da2 <dif_spi_host_transaction+0xa0>
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:301
  uint32_t address = bitfield_byteswap32(segment->address.address);
d0009dac:       |  |     |  |      45d4                 lw      a3,12(a1)
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
 * @param bitfield Bitfield to reverse bytes of.
 * @return `bitfield` with the order of bytes reversed.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_byteswap32(uint32_t bitfield) {
  return __builtin_bswap32(bitfield);
d0009dae:       |  |     |  |      0086d613             srli    a2,a3,0x8
d0009db2:       |  |     |  |      4712                 lw      a4,4(sp)
d0009db4:       |  |     |  |      8e79                 and     a2,a2,a4
d0009db6:       |  |     |  |      0186d713             srli    a4,a3,0x18
d0009dba:       |  |     |  |      8f51                 or      a4,a4,a2
d0009dbc:       |  |     |  |      00869793             slli    a5,a3,0x8
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
  if (segment->address.mode == kDifSpiHostAddrMode4b) {
d0009dc0:       |  |     |  |      0085a883             lw      a7,8(a1)
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
d0009dc4:       |  |     |  |      00ff0637             lui     a2,0xff0
d0009dc8:       |  |     |  |      8ff1                 and     a5,a5,a2
d0009dca:       |  |     |  |      06e2                 slli    a3,a3,0x18
d0009dcc:       |  |     |  |      8edd                 or      a3,a3,a5
d0009dce:       |  |     |  |      8ed9                 or      a3,a3,a4
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
d0009dd0:       |  |     |  |      4605                 li      a2,1
d0009dd2:       |  |     |  |  /-- 00c88363             beq     a7,a2,d0009dd8 <dif_spi_host_transaction+0xd6>
d0009dd6:       |  |     |  |  |   82a1                 srli    a3,a3,0x8
d0009dd8:       |  |     |  |  \-> 6709                 lui     a4,0x2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d0009dda:       |  |     |  |  /-- 000d9463             bnez    s11,d0009de2 <dif_spi_host_transaction+0xe0>
d0009dde:       |  |     |  |  |   20070713             addi    a4,a4,512 # 2200 <_static_critical_size+0x23c>
d0009de2:       |  |     |  |  \-> d514                 sw      a3,40(a0)
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:313
  write_command_reg(spi_host, length, segment->address.width,
d0009de4:       |  |     |  |      41c8                 lw      a0,4(a1)
d0009de6:       |  |     |  |      fff88593             addi    a1,a7,-1
d0009dea:       |  |     |  |      0015b593             seqz    a1,a1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
  if (segment->address.mode == kDifSpiHostAddrMode4b) {
d0009dee:       |  |     |  |      8dd9                 or      a1,a1,a4
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
d0009df0:       |  |     |  |      00a51613             slli    a2,a0,0xa
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
d0009df4:       |  |     |  |      000a2503             lw      a0,0(s4)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
d0009df8:       |  |     |  |      01667633             and     a2,a2,s6
d0009dfc:       |  |     |  |      8dd1                 or      a1,a1,a2
d0009dfe:       |  |     |  |      0025e593             ori     a1,a1,2
d0009e02:       |  |     |  +----- a8ad                 j       d0009e7c <dif_spi_host_transaction+0x17a>
issue_dummy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:319
  write_command_reg(spi_host, segment->dummy.length, segment->dummy.width,
d0009e04:       |  |     |  |      4590                 lw      a2,8(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
d0009e06:       |  |     |  |      167d                 addi    a2,a2,-1
d0009e08:       |  |     |  |      1ff67613             andi    a2,a2,511
d0009e0c:       |  |     |  |  /-- 000d9463             bnez    s11,d0009e14 <dif_spi_host_transaction+0x112>
d0009e10:       |  |     |  |  |   20066613             ori     a2,a2,512
d0009e14:       |  |     |  |  \-> 41cc                 lw      a1,4(a1)
d0009e16:       |  |     |  |      05aa                 slli    a1,a1,0xa
d0009e18:       |  |     |  |      0165f5b3             and     a1,a1,s6
d0009e1c:       |  |     |  |      8dd1                 or      a1,a1,a2
d0009e1e:       |  |     |  +----- a8b9                 j       d0009e7c <dif_spi_host_transaction+0x17a>
issue_data_phase():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:332
      width = segment->tx.width;
d0009e20:       |  |     |  |      0045a983             lw      s3,4(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:333
      length = segment->tx.length;
d0009e24:       |  |     |  |      00c5ab83             lw      s7,12(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:335
      spi_host_fifo_write_alias(spi_host, segment->tx.buf, segment->tx.length);
d0009e28:       |  |     |  |      458c                 lw      a1,8(a1)
d0009e2a:       |  |     |  |      4522                 lw      a0,8(sp)
d0009e2c:       |  |     |  |      00abf633             and     a2,s7,a0
d0009e30:       |  |     |  |      8552                 mv      a0,s4
d0009e32:       |  |     |  |      36d5                 jal     d0009a16 <dif_spi_host_fifo_write>
d0009e34:       |  |     |  |      6589                 lui     a1,0x2
d0009e36:       |  |     |  |  /-- a015                 j       d0009e5a <dif_spi_host_transaction+0x158>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:345
      width = segment->rx.width;
d0009e38:       |  |     |  |  |   0045a983             lw      s3,4(a1) # 2004 <_static_critical_size+0x40>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:346
      length = segment->rx.length;
d0009e3c:       |  |     |  |  |   00c5ab83             lw      s7,12(a1)
d0009e40:       |  |     |  |  |   6585                 lui     a1,0x1
d0009e42:       |  |     |  |  +-- a821                 j       d0009e5a <dif_spi_host_transaction+0x158>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:338
      width = segment->bidir.width;
d0009e44:       |  |     |  |  |   0045a983             lw      s3,4(a1) # 1004 <_epmp_reset_rx_size+0x804>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:339
      length = segment->bidir.length;
d0009e48:       |  |     |  |  |   0105ab83             lw      s7,16(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:341
      spi_host_fifo_write_alias(spi_host, segment->bidir.txbuf,
d0009e4c:       |  |     |  |  |   458c                 lw      a1,8(a1)
d0009e4e:       |  |     |  |  |   4522                 lw      a0,8(sp)
d0009e50:       |  |     |  |  |   00abf633             and     a2,s7,a0
d0009e54:       |  |     |  |  |   8552                 mv      a0,s4
d0009e56:       |  |     |  |  |   36c1                 jal     d0009a16 <dif_spi_host_fifo_write>
d0009e58:       |  |     |  |  |   658d                 lui     a1,0x3
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
d0009e5a:       |  |     |  |  \-> fffb8513             addi    a0,s7,-1
d0009e5e:       |  |     |  |      1ff57613             andi    a2,a0,511
d0009e62:       |  |     |  |  /-- 000d9463             bnez    s11,d0009e6a <dif_spi_host_transaction+0x168>
d0009e66:       |  |     |  |  |   20066613             ori     a2,a2,512
d0009e6a:       |  |     |  |  \-> 4851                 li      a6,20
d0009e6c:       |  |     |  |      00a99693             slli    a3,s3,0xa
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
d0009e70:       |  |     |  |      000a2503             lw      a0,0(s4)
d0009e74:       |  |     |  |      0166f6b3             and     a3,a3,s6
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
d0009e78:       |  |     |  |      8dd1                 or      a1,a1,a2
d0009e7a:       |  |     |  |      8dd5                 or      a1,a1,a3
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:368
  for (size_t i = 0; i < length; ++i) {
d0009e7c:       |  |     |  \----> 0405                 addi    s0,s0,1
d0009e7e:       |  |     |         d10c                 sw      a1,32(a0)
d0009e80:       |  |     \-------- eda41de3             bne     s0,s10,d0009d5a <dif_spi_host_transaction+0x58>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:397
        return kDifBadArg;
    }
  }

  // For each segment which receives data, read from the receive FIFO.
  for (size_t i = 0; i < length; ++i) {
d0009e84:       |  |               4502                 lw      a0,0(sp)
d0009e86:       +--|-------------- e129                 bnez    a0,d0009ec8 <dif_spi_host_transaction+0x1c6>
d0009e88:       |  |               4401                 li      s0,0
d0009e8a:       |  |               00c90493             addi    s1,s2,12
d0009e8e:       |  |               4995                 li      s3,5
d0009e90:       |  |               4a91                 li      s5,4
d0009e92:       |  |               4b51                 li      s6,20
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:399
    dif_spi_host_segment_t *segment = &segments[i];
    switch (segment->type) {
d0009e94:       |  |  /----------> ff44a503             lw      a0,-12(s1)
d0009e98:       |  |  |     /----- 01350b63             beq     a0,s3,d0009eae <dif_spi_host_transaction+0x1ac>
d0009e9c:       |  |  |  /--|----- 03551163             bne     a0,s5,d0009ebe <dif_spi_host_transaction+0x1bc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:401
      case kDifSpiHostSegmentTypeRx:
        spi_host_fifo_read_alias(spi_host, segment->rx.buf, segment->rx.length);
d0009ea0:       |  |  |  |  |      03640533             mul     a0,s0,s6
d0009ea4:       |  |  |  |  |      954a                 add     a0,a0,s2
d0009ea6:       |  |  |  |  |      00850593             addi    a1,a0,8
d0009eaa:       |  |  |  |  |      0531                 addi    a0,a0,12
d0009eac:       |  |  |  |  |  /-- a021                 j       d0009eb4 <dif_spi_host_transaction+0x1b2>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:406
        break;
      case kDifSpiHostSegmentTypeBidirectional:
        spi_host_fifo_read_alias(spi_host, segment->bidir.rxbuf,
                                 segment->bidir.length);
        break;
d0009eae:       |  |  |  |  \--|-> 00448513             addi    a0,s1,4
d0009eb2:       |  |  |  |     |   85a6                 mv      a1,s1
d0009eb4:       |  |  |  |     \-> 418c                 lw      a1,0(a1)
d0009eb6:       |  |  |  |         00055603             lhu     a2,0(a0)
d0009eba:       |  |  |  |         8552                 mv      a0,s4
d0009ebc:       |  |  |  |         3921                 jal     d0009ad4 <dif_spi_host_fifo_read>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:397
  for (size_t i = 0; i < length; ++i) {
d0009ebe:       |  |  |  \-------> 0405                 addi    s0,s0,1
d0009ec0:       |  |  |            1d7d                 addi    s10,s10,-1
d0009ec2:       |  |  |            04d1                 addi    s1,s1,20
d0009ec4:       |  |  \----------- fc0d18e3             bnez    s10,d0009e94 <dif_spi_host_transaction+0x192>
d0009ec8:       \--|-------------> 4501                 li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:412
      default:
          /* do nothing */;
    }
  }
  return kDifOk;
}
d0009eca:          |           /-> 4db2                 lw      s11,12(sp)
d0009ecc:          |           |   4d42                 lw      s10,16(sp)
d0009ece:          |           |   4cd2                 lw      s9,20(sp)
d0009ed0:          |           |   4c62                 lw      s8,24(sp)
d0009ed2:          |           |   4bf2                 lw      s7,28(sp)
d0009ed4:          |           |   5b02                 lw      s6,32(sp)
d0009ed6:          |           |   5a92                 lw      s5,36(sp)
d0009ed8:          |           |   5a22                 lw      s4,40(sp)
d0009eda:          |           |   59b2                 lw      s3,44(sp)
d0009edc:          |           |   5942                 lw      s2,48(sp)
d0009ede:          |           |   54d2                 lw      s1,52(sp)
d0009ee0:          |           |   5462                 lw      s0,56(sp)
d0009ee2:          |           |   50f2                 lw      ra,60(sp)
d0009ee4:          |           |   6121                 addi    sp,sp,64
d0009ee6:          |           |   8082                 ret
d0009ee8:          \-----------|-> 450d                 li      a0,3
d0009eea:                      \-- b7c5                 j       d0009eca <dif_spi_host_transaction+0x1c8>

d0009eec <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
d0009eec:                    1101                       addi    sp,sp,-32
d0009eee:                    ce06                       sw      ra,28(sp)
d0009ef0:                    65b1                       lui     a1,0xc
d0009ef2:                    aad58593           addi    a1,a1,-1363 # baad <_stack_size+0x7aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
d0009ef6:             /----- 02b50063           beq     a0,a1,d0009f16 <test_status_set+0x2a>
d0009efa:             |      65a5                       lui     a1,0x9
d0009efc:             |      05b5                       addi    a1,a1,13
d0009efe:          /--|----- 02b50d63           beq     a0,a1,d0009f38 <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
d0009f02:          |  |      00002597           auipc   a1,0x2
d0009f06:          |  |      98258593           addi    a1,a1,-1662 # d000b884 <kDeviceTestStatusAddress>
d0009f0a:          |  |      418c                       lw      a1,0(a1)
d0009f0c:          |  |  /-- c191                       beqz    a1,d0009f10 <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
d0009f0e:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
d0009f10:          |  |  \-> 40f2                       lw      ra,28(sp)
d0009f12:          |  |      6105                       addi    sp,sp,32
d0009f14:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
d0009f16:          |  \----> 00002517           auipc   a0,0x2
d0009f1a:          |         97250513           addi    a0,a0,-1678 # d000b888 <kDeviceLogBypassUartAddress>
d0009f1e:          |         4108                       lw      a0,0(a0)
d0009f20:          |  /----- ed0d                       bnez    a0,d0009f5a <test_status_set+0x6e>
d0009f22:          |  |      00001597           auipc   a1,0x1
d0009f26:          |  |      68658593           addi    a1,a1,1670 # d000b5a8 <rom_printf.kHexTable+0x8c>
d0009f2a:          |  |      0028                       addi    a0,sp,8
d0009f2c:          |  |      4651                       li      a2,20
d0009f2e:          |  |      5f3000ef           jal     ra,d000ad20 <memcpy>
d0009f32:          |  |      0028                       addi    a0,sp,8
d0009f34:          |  |      2095                       jal     d0009f98 <base_log_internal_core>
d0009f36:          |  |  /-- a035                       j       d0009f62 <test_status_set+0x76>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
d0009f38:          \--|--|-> 00002517           auipc   a0,0x2
d0009f3c:             |  |   95050513           addi    a0,a0,-1712 # d000b888 <kDeviceLogBypassUartAddress>
d0009f40:             |  |   4108                       lw      a0,0(a0)
d0009f42:       /-----|--|-- e915                       bnez    a0,d0009f76 <test_status_set+0x8a>
d0009f44:       |     |  |   00001597           auipc   a1,0x1
d0009f48:       |     |  |   65058593           addi    a1,a1,1616 # d000b594 <rom_printf.kHexTable+0x78>
d0009f4c:       |     |  |   0028                       addi    a0,sp,8
d0009f4e:       |     |  |   4651                       li      a2,20
d0009f50:       |     |  |   5d1000ef           jal     ra,d000ad20 <memcpy>
d0009f54:       |     |  |   0028                       addi    a0,sp,8
d0009f56:       |     |  |   2089                       jal     d0009f98 <base_log_internal_core>
d0009f58:       |  /--|--|-- a01d                       j       d0009f7e <test_status_set+0x92>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
d0009f5a:       |  |  \--|-> 08c00513           li      a0,140
d0009f5e:       |  |     |   4581                       li      a1,0
d0009f60:       |  |     |   28d9                       jal     d000a036 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
d0009f62:       |  |     \-> 00002517           auipc   a0,0x2
d0009f66:       |  |         92250513           addi    a0,a0,-1758 # d000b884 <kDeviceTestStatusAddress>
d0009f6a:       |  |         4108                       lw      a0,0(a0)
d0009f6c:       |  |  /----- c115                       beqz    a0,d0009f90 <test_status_set+0xa4>
d0009f6e:       |  |  |      65b1                       lui     a1,0xc
d0009f70:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_stack_size+0x7aad>
d0009f74:       |  |  |  /-- a829                       j       d0009f8e <test_status_set+0xa2>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
d0009f76:       \--|--|--|-> 07800513           li      a0,120
d0009f7a:          |  |  |   4581                       li      a1,0
d0009f7c:          |  |  |   286d                       jal     d000a036 <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
d0009f7e:          \--|--|-> 00002517           auipc   a0,0x2
d0009f82:             |  |   90650513           addi    a0,a0,-1786 # d000b884 <kDeviceTestStatusAddress>
d0009f86:             |  |   4108                       lw      a0,0(a0)
d0009f88:             +--|-- c501                       beqz    a0,d0009f90 <test_status_set+0xa4>
d0009f8a:             |  |   65a5                       lui     a1,0x9
d0009f8c:             |  |   05b5                       addi    a1,a1,13
d0009f8e:             |  \-> c10c                       sw      a1,0(a0)
d0009f90:             \----> 2009                       jal     d0009f92 <abort>

d0009f92 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
d0009f92:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
d0009f96:       \-- bff5                        j       d0009f92 <abort>

d0009f98 <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
d0009f98:              7179                     addi    sp,sp,-48
d0009f9a:              c606                     sw      ra,12(sp)
d0009f9c:              c422                     sw      s0,8(sp)
d0009f9e:              c226                     sw      s1,4(sp)
d0009fa0:              842a                     mv      s0,a0
d0009fa2:              d646                     sw      a7,44(sp)
d0009fa4:              d442                     sw      a6,40(sp)
d0009fa6:              d23e                     sw      a5,36(sp)
d0009fa8:              d03a                     sw      a4,32(sp)
d0009faa:              ce36                     sw      a3,28(sp)
d0009fac:              cc32                     sw      a2,24(sp)
d0009fae:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
d0009fb0:              4148                     lw      a0,4(a0)
d0009fb2:              800005b7                 lui     a1,0x80000
d0009fb6:              fff58613                 addi    a2,a1,-1 # 7fffffff <_stack_end+0x9ffdffff>
d0009fba:              4581                     li      a1,0
d0009fbc:              64f000ef                 jal     ra,d000ae0a <memchr>
d0009fc0:              4054                     lw      a3,4(s0)
d0009fc2:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
d0009fc6:              02f00593                 li      a1,47
d0009fca:              8536                     mv      a0,a3
d0009fcc:              6ed000ef                 jal     ra,d000aeb8 <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
d0009fd0:       /----- c501                     beqz    a0,d0009fd8 <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
d0009fd2:       |      00150693                 addi    a3,a0,1
d0009fd6:       |  /-- a011                     j       d0009fda <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
d0009fd8:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
d0009fda:          \-> 4008                     lw      a0,0(s0)
d0009fdc:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
d0009fde:       /----- 00a5ea63                 bltu    a1,a0,d0009ff2 <base_log_internal_core+0x5a>
d0009fe2:       |      050a                     slli    a0,a0,0x2
d0009fe4:       |      00001597                 auipc   a1,0x1
d0009fe8:       |      5f458593                 addi    a1,a1,1524 # d000b5d8 <rom_printf.kHexTable+0xbc>
d0009fec:       |      952e                     add     a0,a0,a1
d0009fee:       |      410c                     lw      a1,0(a0)
d0009ff0:       |  /-- a029                     j       d0009ffa <base_log_internal_core+0x62>
d0009ff2:       \--|-> 00001597                 auipc   a1,0x1
d0009ff6:          |   5e158593                 addi    a1,a1,1505 # d000b5d3 <rom_printf.kHexTable+0xb7>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
d0009ffa:          \-> 80818493                 addi    s1,gp,-2040 # e0002050 <base_log_internal_core.global_log_counter>
d0009ffe:              0004d603                 lhu     a2,0(s1)
d000a002:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
d000a004:              00001517                 auipc   a0,0x1
d000a008:              5b850513                 addi    a0,a0,1464 # d000b5bc <rom_printf.kHexTable+0xa0>
d000a00c:              208d                     jal     d000a06e <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
d000a00e:              00049503                 lh      a0,0(s1)
d000a012:              0505                     addi    a0,a0,1
d000a014:              00a49023                 sh      a0,0(s1)
d000a018:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
d000a01a:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
d000a01c:              4808                     lw      a0,16(s0)
d000a01e:              084c                     addi    a1,sp,20
d000a020:              28b5                     jal     d000a09c <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
d000a022:              00001517                 auipc   a0,0x1
d000a026:              32350513                 addi    a0,a0,803 # d000b345 <_text_end+0x131>
d000a02a:              2091                     jal     d000a06e <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
d000a02c:              4492                     lw      s1,4(sp)
d000a02e:              4422                     lw      s0,8(sp)
d000a030:              40b2                     lw      ra,12(sp)
d000a032:              6145                     addi    sp,sp,48
d000a034:              8082                     ret

d000a036 <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
d000a036:              1101                     addi    sp,sp,-32
d000a038:              ce46                     sw      a7,28(sp)
d000a03a:              cc42                     sw      a6,24(sp)
d000a03c:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
d000a03e:              00002797                 auipc   a5,0x2
d000a042:              84a78793                 addi    a5,a5,-1974 # d000b888 <kDeviceLogBypassUartAddress>
d000a046:              439c                     lw      a5,0(a5)
d000a048:              c83a                     sw      a4,16(sp)
d000a04a:              c636                     sw      a3,12(sp)
d000a04c:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
d000a04e:              c388                     sw      a0,0(a5)
d000a050:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
d000a052:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
d000a054:       /----- c989                     beqz    a1,d000a066 <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
d000a056:       |  /-> 4512                     lw      a0,4(sp)
d000a058:       |  |   00450613                 addi    a2,a0,4
d000a05c:       |  |   c232                     sw      a2,4(sp)
d000a05e:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
d000a060:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
d000a062:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
d000a064:       |  \-- f9ed                     bnez    a1,d000a056 <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
d000a066:       \----> 6105                     addi    sp,sp,32
d000a068:              8082                     ret

d000a06a <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
d000a06a:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
d000a06c:       8082                    ret

d000a06e <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84
void base_uart_stdout(const dif_uart_t *uart) {
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}

size_t base_printf(const char *format, ...) {
d000a06e:       7179                    addi    sp,sp,-48
d000a070:       c606                    sw      ra,12(sp)
d000a072:       d646                    sw      a7,44(sp)
d000a074:       d442                    sw      a6,40(sp)
d000a076:       d23e                    sw      a5,36(sp)
d000a078:       d03a                    sw      a4,32(sp)
d000a07a:       ce36                    sw      a3,28(sp)
d000a07c:       cc32                    sw      a2,24(sp)
d000a07e:       ca2e                    sw      a1,20(sp)
d000a080:       80c18593                addi    a1,gp,-2036 # e0002054 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
d000a084:       4190                    lw      a2,0(a1)
d000a086:       41cc                    lw      a1,4(a1)
d000a088:       872a                    mv      a4,a0
d000a08a:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
d000a08c:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
d000a08e:       0854                    addi    a3,sp,20
d000a090:       8532                    mv      a0,a2
d000a092:       863a                    mv      a2,a4
d000a094:       2839                    jal     d000a0b2 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
d000a096:       40b2                    lw      ra,12(sp)
d000a098:       6145                    addi    sp,sp,48
d000a09a:       8082                    ret

d000a09c <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
d000a09c:       80c18693                addi    a3,gp,-2036 # e0002054 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
d000a0a0:       4290                    lw      a2,0(a3)
d000a0a2:       42d4                    lw      a3,4(a3)
d000a0a4:       872e                    mv      a4,a1
d000a0a6:       87aa                    mv      a5,a0
d000a0a8:       8532                    mv      a0,a2
d000a0aa:       85b6                    mv      a1,a3
d000a0ac:       863e                    mv      a2,a5
d000a0ae:       86ba                    mv      a3,a4
d000a0b0:       a009                    j       d000a0b2 <base_vfprintf>

d000a0b2 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
d000a0b2:                                                                    715d                       addi    sp,sp,-80
d000a0b4:                                                                    c686                       sw      ra,76(sp)
d000a0b6:                                                                    c4a2                       sw      s0,72(sp)
d000a0b8:                                                                    c2a6                       sw      s1,68(sp)
d000a0ba:                                                                    c0ca                       sw      s2,64(sp)
d000a0bc:                                                                    de4e                       sw      s3,60(sp)
d000a0be:                                                                    dc52                       sw      s4,56(sp)
d000a0c0:                                                                    da56                       sw      s5,52(sp)
d000a0c2:                                                                    d85a                       sw      s6,48(sp)
d000a0c4:                                                                    d65e                       sw      s7,44(sp)
d000a0c6:                                                                    d462                       sw      s8,40(sp)
d000a0c8:                                                                    d266                       sw      s9,36(sp)
d000a0ca:                                                                    d06a                       sw      s10,32(sp)
d000a0cc:                                                                    ce6e                       sw      s11,28(sp)
d000a0ce:                                                                    8cb2                       mv      s9,a2
d000a0d0:                                                                    892a                       mv      s2,a0
d000a0d2:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
d000a0d4:                                                                /-- c199                       beqz    a1,d000a0da <base_vfprintf+0x28>
d000a0d6:                                                                |   89ae                       mv      s3,a1
d000a0d8:                                                             /--|-- a029                       j       d000a0e2 <base_vfprintf+0x30>
d000a0da:                                                             |  \-> 00000997           auipc   s3,0x0
d000a0de:                                                             |      f9098993           addi    s3,s3,-112 # d000a06a <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
d000a0e2:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
d000a0e4:                                                                    000cc503           lbu     a0,0(s9)
d000a0e8:       /----------------------------------------------------------- 42050563           beqz    a0,d000a512 <base_vfprintf+0x460>
d000a0ec:       |                                                            4a81                       li      s5,0
d000a0ee:       |                                                            02500c13           li      s8,37
d000a0f2:       |                                                            4d25                       li      s10,9
d000a0f4:       |                                                            4a29                       li      s4,10
d000a0f6:       |                                                            658d                       lui     a1,0x3
d000a0f8:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_static_critical_size+0xc5e>
d000a0fc:       |                                                            c02e                       sw      a1,0(sp)
d000a0fe:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
d000a100:       |        |                                               /-> 0ff57413           andi    s0,a0,255
d000a104:       |        |                                            /--|-- 01840963           beq     s0,s8,d000a116 <base_vfprintf+0x64>
d000a108:       |        |                                            +--|-- c419                       beqz    s0,d000a116 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
d000a10a:       |        |                                            |  |   009c8533           add     a0,s9,s1
d000a10e:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
d000a112:       |        |                                            |  |   0485                       addi    s1,s1,1
d000a114:       |        |                                            |  \-- b7f5                       j       d000a100 <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
d000a116:       |        |                                            \--/-X c491                       beqz    s1,d000a122 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
d000a118:       |        |                                               |   854a                       mv      a0,s2
d000a11a:       |        |                                               |   85e6                       mv      a1,s9
d000a11c:       |        |                                               |   8626                       mv      a2,s1
d000a11e:       |        |                                               |   9982                       jalr    s3
d000a120:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
d000a122:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,d000a514 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
d000a126:       |  |     |                                                   009c8533           add     a0,s9,s1
d000a12a:       |  |     |                                                   00154603           lbu     a2,1(a0)
d000a12e:       |  |     |                                                   02100713           li      a4,33
d000a132:       |  |     |                                            /----- 00e61863           bne     a2,a4,d000a142 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
d000a136:       |  |     |                                            |      00254583           lbu     a1,2(a0)
d000a13a:       |  |     |                                            |      00250693           addi    a3,a0,2
d000a13e:       |  |     |                                            |      4b05                       li      s6,1
d000a140:       |  |     |                                            |  /-- a029                       j       d000a14a <base_vfprintf+0x98>
d000a142:       |  |     |                                            \--|-> 4b01                       li      s6,0
d000a144:       |  |     |                                               |   00150693           addi    a3,a0,1
d000a148:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
d000a14a:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,d000a500 <base_vfprintf+0x44e>
d000a14e:       |  |  |  |                                                   4481                       li      s1,0
d000a150:       |  |  |  |                                                   4b81                       li      s7,0
d000a152:       |  |  |  |                                                   4501                       li      a0,0
d000a154:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
d000a158:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
d000a15c:       |  |  |  |                                                   00168c93           addi    s9,a3,1
d000a160:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
d000a164:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
d000a168:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
d000a16c:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,d000a1a2 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
d000a170:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
d000a174:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,d000a18a <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
d000a176:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
d000a17a:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
d000a17c:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
d000a180:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
d000a184:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
d000a186:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,d000a160 <base_vfprintf+0xae>
d000a188:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       d000a500 <base_vfprintf+0x44e>
d000a18a:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
d000a18e:       |  |  |  |                                   |     |  |      03000613           li      a2,48
d000a192:       |  |  |  |                                   |     |  |      02000513           li      a0,32
d000a196:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,d000a176 <base_vfprintf+0xc4>
d000a19a:       |  |  |  |                                   |     |         03000513           li      a0,48
d000a19e:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
d000a1a0:       |  |  |  |                                   |     \-------- b7c5                       j       d000a180 <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
d000a1a2:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,d000a1aa <base_vfprintf+0xf8>
d000a1a4:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,d000a1b2 <base_vfprintf+0x100>
d000a1a8:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       d000a534 <base_vfprintf+0x482>
d000a1aa:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
d000a1ae:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,d000a534 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
d000a1b2:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
d000a1b6:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,d000a208 <base_vfprintf+0x156>
d000a1ba:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
d000a1bc:       |  |  |  |  |                                         |      00001597           auipc   a1,0x1
d000a1c0:       |  |  |  |  |                                         |      42c58593           addi    a1,a1,1068 # d000b5e8 <rom_printf.kHexTable+0xcc>
d000a1c4:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
d000a1c6:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
d000a1c8:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
d000a1ca:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,d000a482 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
d000a1ce:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
d000a1d0:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
d000a1d4:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
d000a1d6:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
d000a1da:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,d000a1f2 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
d000a1de:       |  |  |  |  |  |                                      |  |   00001597           auipc   a1,0x1
d000a1e2:       |  |  |  |  |  |                                      |  |   4a158593           addi    a1,a1,1185 # d000b67f <rom_printf.kHexTable+0x163>
d000a1e6:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
d000a1e8:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
d000a1ea:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
d000a1ec:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
d000a1ee:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
d000a1f2:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
d000a1f6:       |  |  |  |  |  |                                      |      00001817           auipc   a6,0x1
d000a1fa:       |  |  |  |  |  |                                      |      4a280813           addi    a6,a6,1186 # d000b698 <kDigitsLow>
d000a1fe:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
d000a200:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
d000a202:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
d000a204:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
d000a206:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       d000a44e <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
d000a208:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
d000a20c:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,d000a246 <base_vfprintf+0x194>
d000a210:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,d000a482 <base_vfprintf+0x3d0>
d000a214:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,d000a482 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
d000a218:       |  |  |  |  |  |        |                                |   00001597           auipc   a1,0x1
d000a21c:       |  |  |  |  |  |        |                                |   46558593           addi    a1,a1,1125 # d000b67d <rom_printf.kHexTable+0x161>
d000a220:       |  |  |  |  |  |        |                             /--|-- a851                       j       d000a2b4 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
d000a222:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,d000a246 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
d000a226:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
d000a228:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
d000a22c:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
d000a22e:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
d000a230:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
d000a234:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
d000a236:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
d000a238:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
d000a23c:       |  |  |  |  |  |        |                             |  |   00001897           auipc   a7,0x1
d000a240:       |  |  |  |  |  |        |                             |  |   48988893           addi    a7,a7,1161 # d000b6c5 <kDigitsHigh>
d000a244:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       d000a428 <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
d000a246:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
d000a248:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
d000a24c:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
d000a24e:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
d000a250:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
d000a254:       |  |  |  |  |  |        |           |                 |      00001817           auipc   a6,0x1
d000a258:       |  |  |  |  |  |        |           |                 |      47180813           addi    a6,a6,1137 # d000b6c5 <kDigitsHigh>
d000a25c:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       d000a448 <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
d000a25e:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,d000a482 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
d000a262:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
d000a264:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
d000a268:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
d000a26a:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
d000a26c:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
d000a270:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
d000a272:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
d000a274:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
d000a278:       |  |  |  |  |  |        |        |  |                 |      00001897           auipc   a7,0x1
d000a27c:       |  |  |  |  |  |        |        |  |                 |      44d88893           addi    a7,a7,1101 # d000b6c5 <kDigitsHigh>
d000a280:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       d000a476 <base_vfprintf+0x3c4>
d000a282:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
d000a284:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
d000a288:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
d000a28a:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
d000a28c:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,d000a49c <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
d000a290:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,d000a4f4 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
d000a294:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00001597           auipc   a1,0x1
d000a298:       |  |  |  |  |  |  |     |  |  |  |  |                 |      3f058593           addi    a1,a1,1008 # d000b684 <rom_printf.kHexTable+0x168>
d000a29c:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
d000a29e:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       d000a48c <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
d000a2a0:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,d000a482 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
d000a2a4:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
d000a2a6:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
d000a2aa:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
d000a2ac:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
d000a2ae:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
d000a2b2:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
d000a2b4:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
d000a2b6:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       d000a48c <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
d000a2b8:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,d000a482 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
d000a2bc:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
d000a2be:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
d000a2c2:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
d000a2c4:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
d000a2c6:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
d000a2ca:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00001817           auipc   a6,0x1
d000a2ce:       |  |  |  |  |  |  |  |  |  |  |  |  |                        3ce80813           addi    a6,a6,974 # d000b698 <kDigitsLow>
d000a2d2:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
d000a2d4:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       d000a44a <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
d000a2d6:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,d000a482 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
d000a2da:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001597           auipc   a1,0x1
d000a2de:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     3a758593           addi    a1,a1,935 # d000b681 <rom_printf.kHexTable+0x165>
d000a2e2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
d000a2e4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
d000a2e6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
d000a2e8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
d000a2ea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
d000a2ee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
d000a2f0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
d000a2f2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
d000a2f6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001817           auipc   a6,0x1
d000a2fa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     3a280813           addi    a6,a6,930 # d000b698 <kDigitsLow>
d000a2fe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
d000a300:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
d000a304:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
d000a306:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
d000a308:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
d000a30a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e31                       jal     d000a626 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
d000a30c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
d000a310:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       d000a492 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
d000a312:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
d000a314:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
d000a318:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
d000a31a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
d000a31c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
d000a31e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
d000a322:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
d000a326:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
d000a328:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
d000a32a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
d000a32c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
d000a330:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e95                       jal     d000a6a4 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
d000a332:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
d000a334:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
d000a336:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
d000a33a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
d000a33e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
d000a340:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
d000a342:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,d000a33a <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
d000a344:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
d000a348:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
d000a34c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  34758593           addi    a1,a1,839 # d000b68f <rom_printf.kHexTable+0x173>
d000a350:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
d000a352:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
d000a354:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
d000a356:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
d000a358:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
d000a35c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
d000a35e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
d000a360:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
d000a364:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
d000a368:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  32c58593           addi    a1,a1,812 # d000b690 <rom_printf.kHexTable+0x174>
d000a36c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
d000a36e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
d000a370:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
d000a372:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
d000a374:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
d000a378:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  30058593           addi    a1,a1,768 # d000b674 <rom_printf.kHexTable+0x158>
d000a37c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
d000a37e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
d000a380:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
d000a382:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
d000a386:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,d000a4ac <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
d000a38a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
d000a38e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               30858593           addi    a1,a1,776 # d000b692 <rom_printf.kHexTable+0x176>
d000a392:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
d000a394:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
d000a396:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
d000a398:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
d000a39c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
d000a39e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
d000a3a0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
d000a3a2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
d000a3a4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
d000a3a6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
d000a3a8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001817           auipc   a6,0x1
d000a3ac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               2f080813           addi    a6,a6,752 # d000b698 <kDigitsLow>
d000a3b0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
d000a3b2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
d000a3b4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
d000a3b6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
d000a3b8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
d000a3ba:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24b5                       jal     d000a626 <write_digits>
d000a3bc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
d000a3be:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
d000a3c2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               2d658593           addi    a1,a1,726 # d000b694 <rom_printf.kHexTable+0x178>
d000a3c6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
d000a3c8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
d000a3ca:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
d000a3cc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
d000a3ce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       d000a4c6 <base_vfprintf+0x414>
d000a3d0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
d000a3d2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
d000a3d6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
d000a3d8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,d000a4de <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
d000a3dc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
d000a3de:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
d000a3e2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
d000a3e4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
d000a3e6:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       d000a48c <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
d000a3e8:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,d000a482 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
d000a3ec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
d000a3ee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
d000a3f2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
d000a3f4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
d000a3f6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
d000a3fa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00001817           auipc   a6,0x1
d000a3fe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         29e80813           addi    a6,a6,670 # d000b698 <kDigitsLow>
d000a402:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
d000a404:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       d000a44a <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
d000a406:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,d000a432 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
d000a40a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
d000a40c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
d000a410:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
d000a412:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
d000a414:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
d000a418:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
d000a41a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
d000a41c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
d000a420:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00001897           auipc   a7,0x1
d000a424:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   27888893           addi    a7,a7,632 # d000b698 <kDigitsLow>
d000a428:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
d000a42a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
d000a42c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
d000a42e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
d000a430:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       d000a47e <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
d000a432:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
d000a434:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
d000a438:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
d000a43a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
d000a43c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
d000a440:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00001817           auipc   a6,0x1
d000a444:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      25880813           addi    a6,a6,600 # d000b698 <kDigitsLow>
d000a448:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
d000a44a:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
d000a44c:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
d000a44e:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
d000a450:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad9                       jal     d000a626 <write_digits>
d000a452:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       d000a490 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
d000a454:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,d000a482 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
d000a458:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
d000a45a:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
d000a45e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
d000a460:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
d000a462:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
d000a466:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
d000a468:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
d000a46a:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
d000a46e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00001897           auipc   a7,0x1
d000a472:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   22a88893           addi    a7,a7,554 # d000b698 <kDigitsLow>
d000a476:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
d000a478:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
d000a47a:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
d000a47c:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
d000a47e:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     d000a540 <hex_dump>
d000a480:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       d000a490 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
d000a482:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00001597           auipc   a1,0x1
d000a486:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   25358593           addi    a1,a1,595 # d000b6d5 <kUnknownSpec>
d000a48a:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
d000a48c:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
d000a48e:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
d000a490:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
d000a492:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
d000a496:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,d000a0fe <base_vfprintf+0x4c>
d000a49a:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       d000a514 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
d000a49c:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
d000a4a0:       |  |  |     |     |  |                 |  |  |  |  |         00001817           auipc   a6,0x1
d000a4a4:       |  |  |     |     |  |                 |  |  |  |  |         1f880813           addi    a6,a6,504 # d000b698 <kDigitsLow>
d000a4a8:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
d000a4aa:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       d000a44a <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
d000a4ac:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
d000a4ae:       |  |  |     |     |  |                    |     |  |         00001817           auipc   a6,0x1
d000a4b2:       |  |  |     |     |  |                    |     |  |         1ea80813           addi    a6,a6,490 # d000b698 <kDigitsLow>
d000a4b6:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
d000a4b8:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
d000a4ba:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
d000a4bc:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
d000a4be:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
d000a4c0:       |  |  |     |     |  |                    |     |  |         229d                       jal     d000a626 <write_digits>
d000a4c2:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
d000a4c6:       |  |  |     |     |  |                    |     |  \-------> 00001597           auipc   a1,0x1
d000a4ca:       |  |  |     |     |  |                    |     |            1d058593           addi    a1,a1,464 # d000b696 <rom_printf.kHexTable+0x17a>
d000a4ce:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
d000a4d0:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
d000a4d2:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
d000a4d4:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
d000a4d8:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
d000a4dc:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       d000a492 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
d000a4de:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
d000a4e0:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
d000a4e2:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
d000a4e6:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
d000a4ea:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
d000a4ec:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,d000a4e2 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
d000a4ee:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
d000a4f2:       |  |  |     |     |  +-------------------------------------- bf69                       j       d000a48c <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
d000a4f4:       |  |  |     |     \--|-------------------------------------> 00001597           auipc   a1,0x1
d000a4f8:       |  |  |     |        |                                       19558593           addi    a1,a1,405 # d000b689 <rom_printf.kHexTable+0x16d>
d000a4fc:       |  |  |     |        |                                       4615                       li      a2,5
d000a4fe:       |  |  |     |        \-------------------------------------- b779                       j       d000a48c <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
d000a500:       |  |  \-----|----------------------------------------------> 00001597           auipc   a1,0x1
d000a504:       |  |        |                                                1a858593           addi    a1,a1,424 # d000b6a8 <kErrorNul>
d000a508:       |  |        |                                                4645                       li      a2,17
d000a50a:       |  |        |                                            /-> 854a                       mv      a0,s2
d000a50c:       |  |        |                                            |   9982                       jalr    s3
d000a50e:       |  |        |                                            |   9aaa                       add     s5,s5,a0
d000a510:       |  +--------|--------------------------------------------|-- a011                       j       d000a514 <base_vfprintf+0x462>
d000a512:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
d000a514:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
d000a516:                   |                                            |   4df2                       lw      s11,28(sp)
d000a518:                   |                                            |   5d02                       lw      s10,32(sp)
d000a51a:                   |                                            |   5c92                       lw      s9,36(sp)
d000a51c:                   |                                            |   5c22                       lw      s8,40(sp)
d000a51e:                   |                                            |   5bb2                       lw      s7,44(sp)
d000a520:                   |                                            |   5b42                       lw      s6,48(sp)
d000a522:                   |                                            |   5ad2                       lw      s5,52(sp)
d000a524:                   |                                            |   5a62                       lw      s4,56(sp)
d000a526:                   |                                            |   59f2                       lw      s3,60(sp)
d000a528:                   |                                            |   4906                       lw      s2,64(sp)
d000a52a:                   |                                            |   4496                       lw      s1,68(sp)
d000a52c:                   |                                            |   4426                       lw      s0,72(sp)
d000a52e:                   |                                            |   40b6                       lw      ra,76(sp)
d000a530:                   |                                            |   6161                       addi    sp,sp,80
d000a532:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
d000a534:                   \--------------------------------------------|-> 00001597           auipc   a1,0x1
d000a538:                                                                |   18558593           addi    a1,a1,389 # d000b6b9 <kErrorTooWide>
d000a53c:                                                                |   4631                       li      a2,12
d000a53e:                                                                \-- b7f1                       j       d000a50a <base_vfprintf+0x458>

d000a540 <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
d000a540:                    715d                       addi    sp,sp,-80
d000a542:                    c686                       sw      ra,76(sp)
d000a544:                    c4a2                       sw      s0,72(sp)
d000a546:                    c2a6                       sw      s1,68(sp)
d000a548:                    c0ca                       sw      s2,64(sp)
d000a54a:                    de4e                       sw      s3,60(sp)
d000a54c:                    dc52                       sw      s4,56(sp)
d000a54e:                    da56                       sw      s5,52(sp)
d000a550:                    d85a                       sw      s6,48(sp)
d000a552:                    d65e                       sw      s7,44(sp)
d000a554:                    d462                       sw      s8,40(sp)
d000a556:                    d266                       sw      s9,36(sp)
d000a558:                    d06a                       sw      s10,32(sp)
d000a55a:                    8bc6                       mv      s7,a7
d000a55c:                    8a42                       mv      s4,a6
d000a55e:                    8b36                       mv      s6,a3
d000a560:                    8ab2                       mv      s5,a2
d000a562:                    892e                       mv      s2,a1
d000a564:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
d000a566:          /-------- 02e6fd63           bgeu    a3,a4,d000a5a0 <hex_dump+0x60>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
d000a56a:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
d000a56e:          |         850a                       mv      a0,sp
d000a570:          |         02000613           li      a2,32
d000a574:          |         85be                       mv      a1,a5
d000a576:          |         033000ef           jal     ra,d000ada8 <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
d000a57a:          +-------- c09d                       beqz    s1,d000a5a0 <hex_dump+0x60>
d000a57c:          |         4c01                       li      s8,0
d000a57e:          |  /----> 02000513           li      a0,32
d000a582:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
d000a584:          |  |  /-- 00a4e463           bltu    s1,a0,d000a58c <hex_dump+0x4c>
d000a588:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
d000a58c:          |  |  \-> 858a                       mv      a1,sp
d000a58e:          |  |      854e                       mv      a0,s3
d000a590:          |  |      8622                       mv      a2,s0
d000a592:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
d000a594:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
d000a596:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
d000a598:          |  \----- f0fd                       bnez    s1,d000a57e <hex_dump+0x3e>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
d000a59a:          |     /-- 000b1663           bnez    s6,d000a5a6 <hex_dump+0x66>
d000a59e:       /--|-----|-- a0ad                       j       d000a608 <hex_dump+0xc8>
d000a5a0:       |  \-----|-> 4c01                       li      s8,0
d000a5a2:       +--------|-- 060b0363           beqz    s6,d000a608 <hex_dump+0xc8>
d000a5a6:       |        \-> 4401                       li      s0,0
d000a5a8:       |            4601                       li      a2,0
d000a5aa:       |            fffb0493           addi    s1,s6,-1
d000a5ae:       |            8b0a                       mv      s6,sp
d000a5b0:       |            02000c93           li      s9,32
d000a5b4:       |            5d7d                       li      s10,-1
d000a5b6:       |     /----> 8526                       mv      a0,s1
d000a5b8:       |     |  /-- 000a1363           bnez    s4,d000a5be <hex_dump+0x7e>
d000a5bc:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
d000a5be:       |     |  \-> 9556                       add     a0,a0,s5
d000a5c0:       |     |      00054503           lbu     a0,0(a0)
d000a5c4:       |     |      00455593           srli    a1,a0,0x4
d000a5c8:       |     |      95de                       add     a1,a1,s7
d000a5ca:       |     |      00058583           lb      a1,0(a1)
d000a5ce:       |     |      00cb06b3           add     a3,s6,a2
d000a5d2:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
d000a5d6:       |     |      893d                       andi    a0,a0,15
d000a5d8:       |     |      955e                       add     a0,a0,s7
d000a5da:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
d000a5de:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
d000a5e0:       |     |      00a680a3           sb      a0,1(a3)
d000a5e4:       |     |  /-- 01961963           bne     a2,s9,d000a5f6 <hex_dump+0xb6>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
d000a5e8:       |     |  |   858a                       mv      a1,sp
d000a5ea:       |     |  |   02000613           li      a2,32
d000a5ee:       |     |  |   854e                       mv      a0,s3
d000a5f0:       |     |  |   9902                       jalr    s2
d000a5f2:       |     |  |   4601                       li      a2,0
d000a5f4:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
d000a5f6:       |     |  \-> 14fd                       addi    s1,s1,-1
d000a5f8:       |     |      0405                       addi    s0,s0,1
d000a5fa:       |     \----- fba49ee3           bne     s1,s10,d000a5b6 <hex_dump+0x76>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
d000a5fe:       +----------- c609                       beqz    a2,d000a608 <hex_dump+0xc8>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
d000a600:       |            858a                       mv      a1,sp
d000a602:       |            854e                       mv      a0,s3
d000a604:       |            9902                       jalr    s2
d000a606:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
d000a608:       \----------> 8562                       mv      a0,s8
d000a60a:                    5d02                       lw      s10,32(sp)
d000a60c:                    5c92                       lw      s9,36(sp)
d000a60e:                    5c22                       lw      s8,40(sp)
d000a610:                    5bb2                       lw      s7,44(sp)
d000a612:                    5b42                       lw      s6,48(sp)
d000a614:                    5ad2                       lw      s5,52(sp)
d000a616:                    5a62                       lw      s4,56(sp)
d000a618:                    59f2                       lw      s3,60(sp)
d000a61a:                    4906                       lw      s2,64(sp)
d000a61c:                    4496                       lw      s1,68(sp)
d000a61e:                    4426                       lw      s0,72(sp)
d000a620:                    40b6                       lw      ra,76(sp)
d000a622:                    6161                       addi    sp,sp,80
d000a624:                    8082                       ret

d000a626 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
d000a626:              7179                     addi    sp,sp,-48
d000a628:              d606                     sw      ra,44(sp)
d000a62a:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
d000a62c:       /----- ca05                     beqz    a2,d000a65c <write_digits+0x36>
d000a62e:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
d000a630:       |      02b10293                 addi    t0,sp,43
d000a634:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
d000a636:       |  |   02f65633                 divu    a2,a2,a5
d000a63a:       |  |   02f605b3                 mul     a1,a2,a5
d000a63e:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
d000a642:       |  |   95c2                     add     a1,a1,a6
d000a644:       |  |   00058e03                 lb      t3,0(a1)
d000a648:       |  |   007285b3                 add     a1,t0,t2
d000a64c:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
d000a650:       |  |   13fd                     addi    t2,t2,-1
d000a652:       |  \-- fef371e3                 bgeu    t1,a5,d000a634 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
d000a656:       |      40700633                 neg     a2,t2
d000a65a:       |  /-- a031                     j       d000a666 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
d000a65c:       \--|-> 00080583                 lb      a1,0(a6)
d000a660:          |   02b105a3                 sb      a1,43(sp)
d000a664:          |   4605                     li      a2,1
d000a666:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
d000a668:          /-- c291                     beqz    a3,d000a66c <write_digits+0x46>
d000a66a:          |   85b6                     mv      a1,a3
d000a66c:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
d000a670:          /-- 00d5e463                 bltu    a1,a3,d000a678 <write_digits+0x52>
d000a674:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
d000a678:       /--\-X 00b67e63                 bgeu    a2,a1,d000a694 <write_digits+0x6e>
d000a67c:       |      40c586b3                 sub     a3,a1,a2
d000a680:       |      007c                     addi    a5,sp,12
d000a682:       |      40c78633                 sub     a2,a5,a2
d000a686:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
d000a688:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
d000a68c:       |  |   16fd                     addi    a3,a3,-1
d000a68e:       |  |   167d                     addi    a2,a2,-1
d000a690:       |  \-- fee5                     bnez    a3,d000a688 <write_digits+0x62>
d000a692:       |      862e                     mv      a2,a1
d000a694:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
d000a696:              8d91                     sub     a1,a1,a2
d000a698:              02058593                 addi    a1,a1,32
d000a69c:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
d000a69e:              50b2                     lw      ra,44(sp)
d000a6a0:              6145                     addi    sp,sp,48
d000a6a2:              8082                     ret

d000a6a4 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
d000a6a4:              00052813                 slti    a6,a0,0
d000a6a8:              41f55793                 srai    a5,a0,0x1f
d000a6ac:              8fe9                     and     a5,a5,a0
d000a6ae:              8bfd                     andi    a5,a5,31
d000a6b0:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
d000a6b4:              00e87833                 and     a6,a6,a4
d000a6b8:              02000713                 li      a4,32
d000a6bc:          /-- 00081363                 bnez    a6,d000a6c2 <status_extract+0x1e>
d000a6c0:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
d000a6c2:          \-> 00271813                 slli    a6,a4,0x2
d000a6c6:              0fff8797                 auipc   a5,0xfff8
d000a6ca:              8fe78793                 addi    a5,a5,-1794 # e0001fc4 <status_codes>
d000a6ce:              97c2                     add     a5,a5,a6
d000a6d0:              439c                     lw      a5,0(a5)
d000a6d2:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
d000a6d4:              00173593                 seqz    a1,a4
d000a6d8:       /----- cb1d                     beqz    a4,d000a70e <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
d000a6da:       |      00555713                 srli    a4,a0,0x5
d000a6de:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
d000a6e2:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
d000a6e4:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
d000a6e8:       |      8a7d                     andi    a2,a2,31
d000a6ea:       |      04066613                 ori     a2,a2,64
d000a6ee:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
d000a6f2:       |      01555613                 srli    a2,a0,0x15
d000a6f6:       |      8a7d                     andi    a2,a2,31
d000a6f8:       |      04066613                 ori     a2,a2,64
d000a6fc:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
d000a700:       |      8169                     srli    a0,a0,0x1a
d000a702:       |      897d                     andi    a0,a0,31
d000a704:       |      04056513                 ori     a0,a0,64
d000a708:       |      00a68123                 sb      a0,2(a3)
d000a70c:       |  /-- a011                     j       d000a710 <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
d000a70e:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
d000a710:          \-> 0015c513                 xori    a0,a1,1
d000a714:              8082                     ret

d000a716 <rom_epmp_state_init>:
rom_epmp_state_init():
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:33
                          TOP_EARLGREY_SRAM_CTRL_RET_AON_RAM_SIZE_BYTES <
                      TOP_EARLGREY_MMIO_BASE_ADDR +
                          TOP_EARLGREY_MMIO_SIZE_BYTES,
              "Retention SRAM must be in the MMIO address space.");

void rom_epmp_state_init(lifecycle_state_t lc_state) {
d000a716:                          1141                 addi    sp,sp,-16
d000a718:                          c606                 sw      ra,12(sp)
d000a71a:                          c422                 sw      s0,8(sp)
d000a71c:                          c226                 sw      s1,4(sp)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000a71e:                          85aa                 mv      a1,a0
d000a720:                          cf8d0637             lui     a2,0xcf8d0
d000a724:                          aaa60693             addi    a3,a2,-1366 # cf8cfaaa <_stack_end+0xef8afaaa>
rom_epmp_state_init():
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:59
  const epmp_region_t ram = {.start = TOP_EARLGREY_RAM_MAIN_BASE_ADDR,
                             .end = TOP_EARLGREY_RAM_MAIN_BASE_ADDR +
                                    TOP_EARLGREY_RAM_MAIN_SIZE_BYTES};

  epmp_perm_t debug_rom_access = kEpmpPermLockedNoAccess;
  switch (launder32(lc_state)) {
d000a728:                   /----- 02b6d363             bge     a3,a1,d000a74e <rom_epmp_state_init+0x38>
d000a72c:                   |      aab60613             addi    a2,a2,-1365
d000a730:                /--|----- 02c58c63             beq     a1,a2,d000a768 <rom_epmp_state_init+0x52>
d000a734:                |  |      0b5a7637             lui     a2,0xb5a7
d000a738:                |  |      5e060613             addi    a2,a2,1504 # b5a75e0 <_rom_ext_virtual_size+0xb5275e0>
d000a73c:             /--|--|----- 04c59163             bne     a1,a2,d000a77e <rom_epmp_state_init+0x68>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:65
    case kLcStateTest:
      HARDENED_CHECK_EQ(lc_state, kLcStateTest);
      debug_rom_access = kEpmpPermLockedReadWriteExecute;
      break;
    case kLcStateDev:
      HARDENED_CHECK_EQ(lc_state, kLcStateDev);
d000a740:             |  |  |  /-- 00c50663             beq     a0,a2,d000a74c <rom_epmp_state_init+0x36>
d000a744:             |  |  |  |   0000                 unimp
d000a746:             |  |  |  |   0000                 unimp
d000a748:             |  |  |  |   0000                 unimp
d000a74a:             |  |  |  |   0000                 unimp
d000a74c:       /-----|--|--|--\-X a0ad                 j       d000a7b6 <rom_epmp_state_init+0xa0>
d000a74e:       |     |  |  \----> 91b9b637             lui     a2,0x91b9b
d000a752:       |     |  |         68a60613             addi    a2,a2,1674 # 91b9b68a <_stack_end+0xb1b7b68a>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:59
  switch (launder32(lc_state)) {
d000a756:       |  /--|--|-------- 04c59463             bne     a1,a2,d000a79e <rom_epmp_state_init+0x88>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:73
    case kLcStateProd:
      HARDENED_CHECK_EQ(lc_state, kLcStateProd);
      debug_rom_access = kEpmpPermLockedNoAccess;
      break;
    case kLcStateProdEnd:
      HARDENED_CHECK_EQ(lc_state, kLcStateProdEnd);
d000a75a:       |  |  |  |     /-- 00c50663             beq     a0,a2,d000a766 <rom_epmp_state_init+0x50>
d000a75e:       |  |  |  |     |   0000                 unimp
d000a760:       |  |  |  |     |   0000                 unimp
d000a762:       |  |  |  |     |   0000                 unimp
d000a764:       |  |  |  |     |   0000                 unimp
d000a766:       |  |  |  |  /--\-X a805                 j       d000a796 <rom_epmp_state_init+0x80>
d000a768:       |  |  |  \--|----> cf8d05b7             lui     a1,0xcf8d0
d000a76c:       |  |  |     |      aab58593             addi    a1,a1,-1365 # cf8cfaab <_stack_end+0xef8afaab>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:77
      debug_rom_access = kEpmpPermLockedNoAccess;
      break;
    case kLcStateRma:
      HARDENED_CHECK_EQ(lc_state, kLcStateRma);
d000a770:       |  |  |     |  /-- 00b50663             beq     a0,a1,d000a77c <rom_epmp_state_init+0x66>
d000a774:       |  |  |     |  |   0000                 unimp
d000a776:       |  |  |     |  |   0000                 unimp
d000a778:       |  |  |     |  |   0000                 unimp
d000a77a:       |  |  |     |  |   0000                 unimp
d000a77c:       +--|--|-----|--\-X a82d                 j       d000a7b6 <rom_epmp_state_init+0xa0>
d000a77e:       |  |  \-----|----> 65f25637             lui     a2,0x65f25
d000a782:       |  |        |      20f60613             addi    a2,a2,527 # 65f2520f <_epmp_stack_guard_na4+0x2df1e20f>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:59
  switch (launder32(lc_state)) {
d000a786:       |  |     /--|----- 0cc59d63             bne     a1,a2,d000a860 <rom_epmp_state_init+0x14a>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:69
      HARDENED_CHECK_EQ(lc_state, kLcStateProd);
d000a78a:       |  |     |  +----- 00c50663             beq     a0,a2,d000a796 <rom_epmp_state_init+0x80>
d000a78e:       |  |     |  |      0000                 unimp
d000a790:       |  |     |  |      0000                 unimp
d000a792:       |  |     |  |      0000                 unimp
d000a794:       |  |     |  |      0000                 unimp
d000a796:       |  |     |  \----> 6529                 lui     a0,0xa
d000a798:       |  |     |         80050493             addi    s1,a0,-2048 # 9800 <_stack_size+0x5800>
d000a79c:       |  |     |     /-- a005                 j       d000a7bc <rom_epmp_state_init+0xa6>
d000a79e:       |  \-----|-----|-> b2866637             lui     a2,0xb2866
d000a7a2:       |        |     |   fbb60613             addi    a2,a2,-69 # b2865fbb <_stack_end+0xd2845fbb>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:59
  switch (launder32(lc_state)) {
d000a7a6:       |        +-----|-- 0ac59d63             bne     a1,a2,d000a860 <rom_epmp_state_init+0x14a>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:61
      HARDENED_CHECK_EQ(lc_state, kLcStateTest);
d000a7aa:       +--------|-----|-- 00c50663             beq     a0,a2,d000a7b6 <rom_epmp_state_init+0xa0>
d000a7ae:       |        |     |   0000                 unimp
d000a7b0:       |        |     |   0000                 unimp
d000a7b2:       |        |     |   0000                 unimp
d000a7b4:       |        |     |   0000                 unimp
d000a7b6:       \--------|-----|-> 6529                 lui     a0,0xa
d000a7b8:                |     |   f0050493             addi    s1,a0,-256 # 9f00 <_stack_size+0x5f00>
d000a7bc:                |     \-> 0fff6417             auipc   s0,0xfff6
d000a7c0:                |         86440413             addi    s0,s0,-1948 # e0000020 <epmp_state>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:89
  // Initialize in-memory copy of ePMP register state.
  //
  // The actual hardware configuration is performed separately, either by reset
  // logic or in assembly. This code must be kept in sync with any changes
  // to the hardware configuration.
  memset(&epmp_state, 0, sizeof(epmp_state));
d000a7c4:                |         05400613             li      a2,84
d000a7c8:                |         8522                 mv      a0,s0
d000a7ca:                |         4581                 li      a1,0
d000a7cc:                |         2bf1                 jal     d000ada8 <memset>
epmp_state_configure_tor():
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:160
 */
inline void epmp_state_configure_tor(uint32_t entry, epmp_region_t region,
                                     epmp_perm_t perm) {
  // Set address registers.
  if (entry > 0) {
    epmp_state.pmpaddr[entry - 1] = region.start >> 2;
d000a7ce:                |         ffffe517             auipc   a0,0xffffe
d000a7d2:                |         83250513             addi    a0,a0,-1998 # d0008000 <_rom_interrupt_vector_asm>
d000a7d6:                |         8109                 srli    a0,a0,0x2
d000a7d8:                |         c808                 sw      a0,16(s0)
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:162
  }
  epmp_state.pmpaddr[entry] = region.end >> 2;
d000a7da:                |         00001517             auipc   a0,0x1
d000a7de:                |         a3a50513             addi    a0,a0,-1478 # d000b214 <_text_end>
d000a7e2:                |         8109                 srli    a0,a0,0x2
d000a7e4:                |         c848                 sw      a0,20(s0)
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:167

  // Set configuration register.
  bitfield_field32_t field = {.mask = 0xff, .index = (entry % 4) * 8};
  epmp_state.pmpcfg[entry / 4] = bitfield_field32_write(
      epmp_state.pmpcfg[entry / 4], field, kEpmpModeTor | perm);
d000a7e6:                |         4008                 lw      a0,0(s0)
d000a7e8:                |         340035b7             lui     a1,0x34003
d000a7ec:                |         15fd                 addi    a1,a1,-1
epmp_state_configure_napot():
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:203
 */
inline void epmp_state_configure_napot(uint32_t entry, epmp_region_t region,
                                       epmp_perm_t perm) {
  // Set address register.
  uint32_t len = (region.end - region.start - 1) >> 3;
  epmp_state.pmpaddr[entry] = (region.start >> 2) | len;
d000a7ee:                |         cc0c                 sw      a1,24(s0)
d000a7f0:                |         ff0005b7             lui     a1,0xff000
d000a7f4:                |         0ff58593             addi    a1,a1,255 # ff0000ff <_stack_end+0x1efe00ff>
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
d000a7f8:                |         8d6d                 and     a0,a0,a1
d000a7fa:                |         009995b7             lui     a1,0x999
d000a7fe:                |         d0058593             addi    a1,a1,-768 # 998d00 <_rom_ext_virtual_size+0x918d00>
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d000a802:                |         8d4d                 or      a0,a0,a1
epmp_state_configure_napot():
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:207

  // Set configuration register.
  bitfield_field32_t field = {.mask = 0xff, .index = (entry % 4) * 8};
  epmp_state.pmpcfg[entry / 4] = bitfield_field32_write(
d000a804:                |         c008                 sw      a0,0(s0)
d000a806:                |         3c020537             lui     a0,0x3c020
d000a80a:                |         157d                 addi    a0,a0,-1
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:203
  epmp_state.pmpaddr[entry] = (region.start >> 2) | len;
d000a80c:                |         d048                 sw      a0,36(s0)
d000a80e:                |         09900513             li      a0,153
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:207
  epmp_state.pmpcfg[entry / 4] = bitfield_field32_write(
d000a812:                |         00a402a3             sb      a0,5(s0)
d000a816:                |         6511                 lui     a0,0x4
epmp_state_configure_tor():
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:160
    epmp_state.pmpaddr[entry - 1] = region.start >> 2;
d000a818:                |         dc08                 sw      a0,56(s0)
d000a81a:                |         34000537             lui     a0,0x34000
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:162
  epmp_state.pmpaddr[entry] = region.end >> 2;
d000a81e:                |         dc48                 sw      a0,60(s0)
d000a820:                |         08b00513             li      a0,139
epmp_state_configure_napot():
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:208
      epmp_state.pmpcfg[entry / 4], field, kEpmpModeNapot | perm);
d000a824:                |         00c44583             lbu     a1,12(s0)
epmp_state_configure_tor():
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:166
  epmp_state.pmpcfg[entry / 4] = bitfield_field32_write(
d000a828:                |         00a405a3             sb      a0,11(s0)
d000a82c:                |         1ff00513             li      a0,511
epmp_state_configure_napot():
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:203
  epmp_state.pmpaddr[entry] = (region.start >> 2) | len;
d000a830:                |         c068                 sw      a0,68(s0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
d000a832:                |         0095e533             or      a0,a1,s1
epmp_state_configure_na4():
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:182
  epmp_state.pmpaddr[entry] = region.start >> 2;
d000a836:                |         10011597             auipc   a1,0x10011
d000a83a:                |         7ca58593             addi    a1,a1,1994 # e001c000 <_stack_start>
d000a83e:                |         8189                 srli    a1,a1,0x2
d000a840:                |         c42c                 sw      a1,72(s0)
d000a842:                |         380045b7             lui     a1,0x38004
d000a846:                |         15fd                 addi    a1,a1,-1
epmp_state_configure_napot():
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:203
  epmp_state.pmpaddr[entry] = (region.start >> 2) | len;
d000a848:                |         c46c                 sw      a1,76(s0)
d000a84a:                |         9b9005b7             lui     a1,0x9b900
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
d000a84e:                |         8d4d                 or      a0,a0,a1
epmp_state_configure_napot():
/proc/self/cwd/./sw/device/silicon_creator/lib/epmp_state.h:207
  epmp_state.pmpcfg[entry / 4] = bitfield_field32_write(
d000a850:                |         c448                 sw      a0,12(s0)
rom_epmp_state_init():
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:97
  epmp_state_configure_napot(5, eflash, kEpmpPermLockedReadOnly);
  epmp_state_configure_tor(11, mmio, kEpmpPermLockedReadWrite);
  epmp_state_configure_napot(13, debug_rom, debug_rom_access);
  epmp_state_configure_na4(14, stack_guard, kEpmpPermLockedNoAccess);
  epmp_state_configure_napot(15, ram, kEpmpPermLockedReadWrite);
  epmp_state.mseccfg = 0x0; //EPMP_MSECCFG_MMWP | EPMP_MSECCFG_RLB;
d000a852:                |         04042823             sw      zero,80(s0)
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:98
}
d000a856:                |         4492                 lw      s1,4(sp)
d000a858:                |         4422                 lw      s0,8(sp)
d000a85a:                |         40b2                 lw      ra,12(sp)
d000a85c:                |         0141                 addi    sp,sp,16
d000a85e:                |         8082                 ret
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:81
      HARDENED_UNREACHABLE();
d000a860:                \-------> 0000                 unimp
d000a862:                          0000                 unimp
d000a864:                          0000                 unimp
d000a866:                          0000                 unimp

d000a868 <rom_epmp_config_debug_rom>:
rom_epmp_config_debug_rom():
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:145
  CSR_CLEAR_BITS(CSR_REG_PMPCFG1, 0xff << 16);
  CSR_SET_BITS(CSR_REG_PMPCFG1,
               ((kEpmpModeNapot | kEpmpPermLockedReadOnly) << 16));
}

void rom_epmp_config_debug_rom(lifecycle_state_t lc_state) {
d000a868:                          1ff00593             li      a1,511
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:159
  //
  //            32          24          16           8           0
  //             +------------+------------+------------+------------+
  // `pmpcfg3` = | `pmp15cfg` | `pmp14cfg` | `pmp13cfg` | `pmp12cfg` |
  //             +------------+------------+------------+------------+
  CSR_WRITE(CSR_REG_PMPADDR13, pmpaddr);
d000a86c:                          3bd59073             csrw    pmpaddr13,a1
d000a870:                          65c1                 lui     a1,0x10
d000a872:                          f0058593             addi    a1,a1,-256 # ff00 <_stack_size+0xbf00>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:160
  CSR_CLEAR_BITS(CSR_REG_PMPCFG3, 0xff00);
d000a876:                          3a35b073             csrc    pmpcfg3,a1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000a87a:                          85aa                 mv      a1,a0
d000a87c:                          cf8d0637             lui     a2,0xcf8d0
d000a880:                          aaa60693             addi    a3,a2,-1366 # cf8cfaaa <_stack_end+0xef8afaaa>
rom_epmp_config_debug_rom():
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:162
  uint32_t pmpcfg;
  switch (launder32(lc_state)) {
d000a884:                   /----- 02b6d363             bge     a3,a1,d000a8aa <rom_epmp_config_debug_rom+0x42>
d000a888:                   |      aab60613             addi    a2,a2,-1365
d000a88c:                /--|----- 02c58c63             beq     a1,a2,d000a8c4 <rom_epmp_config_debug_rom+0x5c>
d000a890:                |  |      0b5a7637             lui     a2,0xb5a7
d000a894:                |  |      5e060613             addi    a2,a2,1504 # b5a75e0 <_rom_ext_virtual_size+0xb5275e0>
d000a898:             /--|--|----- 04c59163             bne     a1,a2,d000a8da <rom_epmp_config_debug_rom+0x72>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:168
    case kLcStateTest:
      HARDENED_CHECK_EQ(lc_state, kLcStateTest);
      pmpcfg = (kEpmpModeNapot | kEpmpPermLockedReadWriteExecute) << 8;
      break;
    case kLcStateDev:
      HARDENED_CHECK_EQ(lc_state, kLcStateDev);
d000a89c:             |  |  |  /-- 00c50663             beq     a0,a2,d000a8a8 <rom_epmp_config_debug_rom+0x40>
d000a8a0:             |  |  |  |   0000                 unimp
d000a8a2:             |  |  |  |   0000                 unimp
d000a8a4:             |  |  |  |   0000                 unimp
d000a8a6:             |  |  |  |   0000                 unimp
d000a8a8:       /-----|--|--|--\-X a0ad                 j       d000a912 <rom_epmp_config_debug_rom+0xaa>
d000a8aa:       |     |  |  \----> 91b9b637             lui     a2,0x91b9b
d000a8ae:       |     |  |         68a60613             addi    a2,a2,1674 # 91b9b68a <_stack_end+0xb1b7b68a>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:162
  switch (launder32(lc_state)) {
d000a8b2:       |  /--|--|-------- 04c59463             bne     a1,a2,d000a8fa <rom_epmp_config_debug_rom+0x92>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:176
    case kLcStateProd:
      HARDENED_CHECK_EQ(lc_state, kLcStateProd);
      pmpcfg = (kEpmpModeNapot | kEpmpPermLockedNoAccess) << 8;
      break;
    case kLcStateProdEnd:
      HARDENED_CHECK_EQ(lc_state, kLcStateProdEnd);
d000a8b6:       |  |  |  |     /-- 00c50663             beq     a0,a2,d000a8c2 <rom_epmp_config_debug_rom+0x5a>
d000a8ba:       |  |  |  |     |   0000                 unimp
d000a8bc:       |  |  |  |     |   0000                 unimp
d000a8be:       |  |  |  |     |   0000                 unimp
d000a8c0:       |  |  |  |     |   0000                 unimp
d000a8c2:       |  |  |  |  /--\-X a805                 j       d000a8f2 <rom_epmp_config_debug_rom+0x8a>
d000a8c4:       |  |  |  \--|----> cf8d05b7             lui     a1,0xcf8d0
d000a8c8:       |  |  |     |      aab58593             addi    a1,a1,-1365 # cf8cfaab <_stack_end+0xef8afaab>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:180
      pmpcfg = (kEpmpModeNapot | kEpmpPermLockedNoAccess) << 8;
      break;
    case kLcStateRma:
      HARDENED_CHECK_EQ(lc_state, kLcStateRma);
d000a8cc:       |  |  |     |  /-- 00b50663             beq     a0,a1,d000a8d8 <rom_epmp_config_debug_rom+0x70>
d000a8d0:       |  |  |     |  |   0000                 unimp
d000a8d2:       |  |  |     |  |   0000                 unimp
d000a8d4:       |  |  |     |  |   0000                 unimp
d000a8d6:       |  |  |     |  |   0000                 unimp
d000a8d8:       +--|--|-----|--\-X a82d                 j       d000a912 <rom_epmp_config_debug_rom+0xaa>
d000a8da:       |  |  \-----|----> 65f25637             lui     a2,0x65f25
d000a8de:       |  |        |      20f60613             addi    a2,a2,527 # 65f2520f <_epmp_stack_guard_na4+0x2df1e20f>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:162
  switch (launder32(lc_state)) {
d000a8e2:       |  |     /--|----- 02c59e63             bne     a1,a2,d000a91e <rom_epmp_config_debug_rom+0xb6>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:172
      HARDENED_CHECK_EQ(lc_state, kLcStateProd);
d000a8e6:       |  |     |  +----- 00c50663             beq     a0,a2,d000a8f2 <rom_epmp_config_debug_rom+0x8a>
d000a8ea:       |  |     |  |      0000                 unimp
d000a8ec:       |  |     |  |      0000                 unimp
d000a8ee:       |  |     |  |      0000                 unimp
d000a8f0:       |  |     |  |      0000                 unimp
d000a8f2:       |  |     |  \----> 6529                 lui     a0,0xa
d000a8f4:       |  |     |         80050513             addi    a0,a0,-2048 # 9800 <_stack_size+0x5800>
d000a8f8:       |  |     |     /-- a005                 j       d000a918 <rom_epmp_config_debug_rom+0xb0>
d000a8fa:       |  \-----|-----|-> b2866637             lui     a2,0xb2866
d000a8fe:       |        |     |   fbb60613             addi    a2,a2,-69 # b2865fbb <_stack_end+0xd2845fbb>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:162
  switch (launder32(lc_state)) {
d000a902:       |        +-----|-- 00c59e63             bne     a1,a2,d000a91e <rom_epmp_config_debug_rom+0xb6>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:164
      HARDENED_CHECK_EQ(lc_state, kLcStateTest);
d000a906:       +--------|-----|-- 00c50663             beq     a0,a2,d000a912 <rom_epmp_config_debug_rom+0xaa>
d000a90a:       |        |     |   0000                 unimp
d000a90c:       |        |     |   0000                 unimp
d000a90e:       |        |     |   0000                 unimp
d000a910:       |        |     |   0000                 unimp
d000a912:       \--------|-----|-> 6529                 lui     a0,0xa
d000a914:                |     |   f0050513             addi    a0,a0,-256 # 9f00 <_stack_size+0x5f00>
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:186
      pmpcfg = (kEpmpModeNapot | kEpmpPermLockedReadWriteExecute) << 8;
      break;
    default:
      HARDENED_UNREACHABLE();
  }
  CSR_SET_BITS(CSR_REG_PMPCFG3, pmpcfg);
d000a918:                |     \-> 3a352073             csrs    pmpcfg3,a0
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:187
}
d000a91c:                |         8082                 ret
/proc/self/cwd/sw/device/silicon_creator/rom/rom_epmp.c:184
      HARDENED_UNREACHABLE();
d000a91e:                \-------> 0000                 unimp
d000a920:                          0000                 unimp
d000a922:                          0000                 unimp
d000a924:                          0000                 unimp

d000a926 <rnd_uint32>:
rnd_uint32():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rnd.c:20

enum {
  kBase = TOP_EARLGREY_RV_CORE_IBEX_CFG_BASE_ADDR,
};

uint32_t rnd_uint32(void) {
d000a926:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rnd.c:21
  if (otp_read32(OTP_CTRL_PARAM_CREATOR_SW_CFG_RNG_EN_OFFSET) ==
d000a928:              c606                     sw      ra,12(sp)
d000a92a:              0f800513                 li      a0,248
d000a92e:              2ad1                     jal     d000ab02 <otp_read32>
d000a930:              73900593                 li      a1,1849
d000a934:       /----- 00b51663                 bne     a0,a1,d000a940 <rnd_uint32+0x1a>
d000a938:       |      c11f0537                 lui     a0,0xc11f0
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
d000a93c:       |  /-> 4d6c                     lw      a1,92(a0)
rnd_uint32():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rnd.c:24
      kHardenedBoolTrue) {
    // When bit-0 is clear an EDN request for new data for RND_DATA is pending.
    while (!abs_mmio_read32(kBase + RV_CORE_IBEX_RND_STATUS_REG_OFFSET)) {
d000a93e:       |  \-- ddfd                     beqz    a1,d000a93c <rnd_uint32+0x16>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rnd.c:28
    }
  }
  uint32_t mcycle;
  CSR_READ(CSR_REG_MCYCLE, &mcycle);
d000a940:       \----> b0002573                 csrr    a0,mcycle
d000a944:              c11f05b7                 lui     a1,0xc11f0
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
d000a948:              4dac                     lw      a1,88(a1)
rnd_uint32():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/rnd.c:29
  return mcycle + abs_mmio_read32(kBase + RV_CORE_IBEX_RND_DATA_REG_OFFSET);
d000a94a:              952e                     add     a0,a0,a1
d000a94c:              40b2                     lw      ra,12(sp)
d000a94e:              0141                     addi    sp,sp,16
d000a950:              8082                     ret

d000a952 <lifecycle_state_get>:
lifecycle_state_get():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:22

enum {
  kBase = TOP_EARLGREY_LC_CTRL_BASE_ADDR,
};

lifecycle_state_t lifecycle_state_get(void) {
d000a952:                                         1141                  addi    sp,sp,-16
d000a954:                                         c606                  sw      ra,12(sp)
d000a956:                                         c0140537              lui     a0,0xc0140
d000a95a:                                         03450513              addi    a0,a0,52 # c0140034 <_stack_end+0xe0120034>
lifecycle_raw_state_get():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:69
  }
}

uint32_t lifecycle_raw_state_get(void) {
  uint32_t value = bitfield_field32_read(
      sec_mmio_read32(kBase + LC_CTRL_LC_STATE_REG_OFFSET),
d000a95e:                                         2419                  jal     d000ab64 <sec_mmio_read32>
d000a960:                                         400005b7              lui     a1,0x40000
d000a964:                                         15fd                  addi    a1,a1,-1
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
d000a966:                                         8d6d                  and     a0,a0,a1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000a968:                                         85aa                  mv      a1,a0
d000a96a:                                         1ad6b637              lui     a2,0x1ad6b
d000a96e:                                         5ac60613              addi    a2,a2,1452 # 1ad6b5ac <_rom_ext_virtual_size+0x1aceb5ac>
lifecycle_state_get():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:25
  switch (launder32(raw_state)) {
d000a972:                                  /----- 02b64b63              blt     a2,a1,d000a9a8 <lifecycle_state_get+0x56>
d000a976:                                  |      0e73a637              lui     a2,0xe73a
d000a97a:                                  |      ce660693              addi    a3,a2,-794 # e739ce6 <_rom_ext_virtual_size+0xe6b9ce6>
d000a97e:                               /--|----- 04b6ce63              blt     a3,a1,d000a9da <lifecycle_state_get+0x88>
d000a982:                               |  |      02108637              lui     a2,0x2108
d000a986:                               |  |      42160613              addi    a2,a2,1057 # 2108421 <_rom_ext_virtual_size+0x2088421>
d000a98a:                         /-----|--|----- 08c58e63              beq     a1,a2,d000aa26 <lifecycle_state_get+0xd4>
d000a98e:                         |     |  |      06319637              lui     a2,0x6319
d000a992:                         |     |  |      c6360613              addi    a2,a2,-925 # 6318c63 <_rom_ext_virtual_size+0x6298c63>
d000a996:          /--------------|-----|--|----- 0ec59063              bne     a1,a2,d000aa76 <lifecycle_state_get+0x124>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:30
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_TEST_UNLOCKED1);
d000a99a:          |              |     |  |  /-- 00c50663              beq     a0,a2,d000a9a6 <lifecycle_state_get+0x54>
d000a99e:          |              |     |  |  |   0000                  unimp
d000a9a0:          |              |     |  |  |   0000                  unimp
d000a9a2:          |              |     |  |  |   0000                  unimp
d000a9a4:          |              |     |  |  |   0000                  unimp
d000a9a6:       /--|--------------|-----|--|--\-X a215                  j       d000aaca <lifecycle_state_get+0x178>
d000a9a8:       |  |              |     |  \----> 2318c637              lui     a2,0x2318c
d000a9ac:       |  |              |     |         63060693              addi    a3,a2,1584 # 2318c630 <_rom_ext_virtual_size+0x2310c630>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:25
  switch (launder32(raw_state)) {
d000a9b0:       |  |              |     |  /----- 04b6c663              blt     a3,a1,d000a9fc <lifecycle_state_get+0xaa>
d000a9b4:       |  |              |     |  |      1ad6b637              lui     a2,0x1ad6b
d000a9b8:       |  |              |     |  |      5ad60613              addi    a2,a2,1453 # 1ad6b5ad <_rom_ext_virtual_size+0x1aceb5ad>
d000a9bc:       |  |              |  /--|--|----- 06c58c63              beq     a1,a2,d000aa34 <lifecycle_state_get+0xe2>
d000a9c0:       |  |              |  |  |  |      1ef7c637              lui     a2,0x1ef7c
d000a9c4:       |  |              |  |  |  |      def60613              addi    a2,a2,-529 # 1ef7bdef <_rom_ext_virtual_size+0x1eefbdef>
d000a9c8:       |  |           /--|--|--|--|----- 0cc59463              bne     a1,a2,d000aa90 <lifecycle_state_get+0x13e>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:48
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_TEST_UNLOCKED7);
d000a9cc:       |  |           |  |  |  |  |  /-- 00c50663              beq     a0,a2,d000a9d8 <lifecycle_state_get+0x86>
d000a9d0:       |  |           |  |  |  |  |  |   0000                  unimp
d000a9d2:       |  |           |  |  |  |  |  |   0000                  unimp
d000a9d4:       |  |           |  |  |  |  |  |   0000                  unimp
d000a9d6:       |  |           |  |  |  |  |  |   0000                  unimp
d000a9d8:       +--|-----------|--|--|--|--|--\-X a8cd                  j       d000aaca <lifecycle_state_get+0x178>
d000a9da:       |  |           |  |  |  \--|----> ce760613              addi    a2,a2,-793
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:25
  switch (launder32(raw_state)) {
d000a9de:       |  |           |  |  |  /--|----- 06c58263              beq     a1,a2,d000aa42 <lifecycle_state_get+0xf0>
d000a9e2:       |  |           |  |  |  |  |      1294a637              lui     a2,0x1294a
d000a9e6:       |  |           |  |  |  |  |      52960613              addi    a2,a2,1321 # 1294a529 <_rom_ext_virtual_size+0x128ca529>
d000a9ea:       |  |        /--|--|--|--|--|----- 0cc59463              bne     a1,a2,d000aab2 <lifecycle_state_get+0x160>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:39
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_TEST_UNLOCKED4);
d000a9ee:       |  |        |  |  |  |  |  |  /-- 00c50663              beq     a0,a2,d000a9fa <lifecycle_state_get+0xa8>
d000a9f2:       |  |        |  |  |  |  |  |  |   0000                  unimp
d000a9f4:       |  |        |  |  |  |  |  |  |   0000                  unimp
d000a9f6:       |  |        |  |  |  |  |  |  |   0000                  unimp
d000a9f8:       |  |        |  |  |  |  |  |  |   0000                  unimp
d000a9fa:       +--|--------|--|--|--|--|--|--\-X a8c1                  j       d000aaca <lifecycle_state_get+0x178>
d000a9fc:       |  |        |  |  |  |  |  \----> 63160613              addi    a2,a2,1585
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:25
  switch (launder32(raw_state)) {
d000aa00:       |  |        |  |  |  |  |  /----- 04c58c63              beq     a1,a2,d000aa58 <lifecycle_state_get+0x106>
d000aa04:       |  |        |  |  |  |  |  |      25295637              lui     a2,0x25295
d000aa08:       |  |        |  |  |  |  |  |      a5260613              addi    a2,a2,-1454 # 25294a52 <_rom_ext_virtual_size+0x25214a52>
d000aa0c:       |  |     /--|--|--|--|--|--|----- 0cc59663              bne     a1,a2,d000aad8 <lifecycle_state_get+0x186>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:57
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_PROD_END);
d000aa10:       |  |     |  |  |  |  |  |  |  /-- 00c50663              beq     a0,a2,d000aa1c <lifecycle_state_get+0xca>
d000aa14:       |  |     |  |  |  |  |  |  |  |   0000                  unimp
d000aa16:       |  |     |  |  |  |  |  |  |  |   0000                  unimp
d000aa18:       |  |     |  |  |  |  |  |  |  |   0000                  unimp
d000aa1a:       |  |     |  |  |  |  |  |  |  |   0000                  unimp
d000aa1c:       |  |     |  |  |  |  |  |  |  \-> 91b9b537              lui     a0,0x91b9b
d000aa20:       |  |     |  |  |  |  |  |  |      68a50513              addi    a0,a0,1674 # 91b9b68a <_stack_end+0xb1b7b68a>
d000aa24:       |  |  /--|--|--|--|--|--|--|----- a07d                  j       d000aad2 <lifecycle_state_get+0x180>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:27
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_TEST_UNLOCKED0);
d000aa26:       |  |  |  |  |  |  \--|--|--|--/-X 00c50663              beq     a0,a2,d000aa32 <lifecycle_state_get+0xe0>
d000aa2a:       |  |  |  |  |  |     |  |  |  |   0000                  unimp
d000aa2c:       |  |  |  |  |  |     |  |  |  |   0000                  unimp
d000aa2e:       |  |  |  |  |  |     |  |  |  |   0000                  unimp
d000aa30:       |  |  |  |  |  |     |  |  |  |   0000                  unimp
d000aa32:       +--|--|--|--|--|-----|--|--|--\-X a861                  j       d000aaca <lifecycle_state_get+0x178>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:45
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_TEST_UNLOCKED6);
d000aa34:       |  |  |  |  |  |     \--|--|--/-X 00c50663              beq     a0,a2,d000aa40 <lifecycle_state_get+0xee>
d000aa38:       |  |  |  |  |  |        |  |  |   0000                  unimp
d000aa3a:       |  |  |  |  |  |        |  |  |   0000                  unimp
d000aa3c:       |  |  |  |  |  |        |  |  |   0000                  unimp
d000aa3e:       |  |  |  |  |  |        |  |  |   0000                  unimp
d000aa40:       +--|--|--|--|--|--------|--|--\-X a069                  j       d000aaca <lifecycle_state_get+0x178>
d000aa42:       |  |  |  |  |  |        \--|----> 0e73a5b7              lui     a1,0xe73a
d000aa46:       |  |  |  |  |  |           |      ce758593              addi    a1,a1,-793 # e739ce7 <_rom_ext_virtual_size+0xe6b9ce7>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:36
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_TEST_UNLOCKED3);
d000aa4a:       |  |  |  |  |  |           |  /-- 00b50663              beq     a0,a1,d000aa56 <lifecycle_state_get+0x104>
d000aa4e:       |  |  |  |  |  |           |  |   0000                  unimp
d000aa50:       |  |  |  |  |  |           |  |   0000                  unimp
d000aa52:       |  |  |  |  |  |           |  |   0000                  unimp
d000aa54:       |  |  |  |  |  |           |  |   0000                  unimp
d000aa56:       +--|--|--|--|--|-----------|--\-X a895                  j       d000aaca <lifecycle_state_get+0x178>
d000aa58:       |  |  |  |  |  |           \----> 2318c5b7              lui     a1,0x2318c
d000aa5c:       |  |  |  |  |  |                  63158593              addi    a1,a1,1585 # 2318c631 <_rom_ext_virtual_size+0x2310c631>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:54
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_PROD);
d000aa60:       |  |  |  |  |  |              /-- 00b50663              beq     a0,a1,d000aa6c <lifecycle_state_get+0x11a>
d000aa64:       |  |  |  |  |  |              |   0000                  unimp
d000aa66:       |  |  |  |  |  |              |   0000                  unimp
d000aa68:       |  |  |  |  |  |              |   0000                  unimp
d000aa6a:       |  |  |  |  |  |              |   0000                  unimp
d000aa6c:       |  |  |  |  |  |              \-> 65f25537              lui     a0,0x65f25
d000aa70:       |  |  |  |  |  |                  20f50513              addi    a0,a0,527 # 65f2520f <_epmp_stack_guard_na4+0x2df1e20f>
d000aa74:       |  |  +--|--|--|----------------- a8b9                  j       d000aad2 <lifecycle_state_get+0x180>
d000aa76:       |  \--|--|--|--|----------------> 0a529637              lui     a2,0xa529
d000aa7a:       |     |  |  |  |                  4a560613              addi    a2,a2,1189 # a5294a5 <_rom_ext_virtual_size+0xa4a94a5>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:25
  switch (launder32(raw_state)) {
d000aa7e:       |     |  |  |  |           /----- 06c59e63              bne     a1,a2,d000aafa <lifecycle_state_get+0x1a8>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:33
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_TEST_UNLOCKED2);
d000aa82:       |     |  |  |  |           |  /-- 00c50663              beq     a0,a2,d000aa8e <lifecycle_state_get+0x13c>
d000aa86:       |     |  |  |  |           |  |   0000                  unimp
d000aa88:       |     |  |  |  |           |  |   0000                  unimp
d000aa8a:       |     |  |  |  |           |  |   0000                  unimp
d000aa8c:       |     |  |  |  |           |  |   0000                  unimp
d000aa8e:       +-----|--|--|--|-----------|--\-X a835                  j       d000aaca <lifecycle_state_get+0x178>
d000aa90:       |     |  |  |  \-----------|----> 21084637              lui     a2,0x21084
d000aa94:       |     |  |  |              |      21060613              addi    a2,a2,528 # 21084210 <_rom_ext_virtual_size+0x21004210>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:25
  switch (launder32(raw_state)) {
d000aa98:       |     |  |  |              +----- 06c59163              bne     a1,a2,d000aafa <lifecycle_state_get+0x1a8>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:51
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_DEV);
d000aa9c:       |     |  |  |              |  /-- 00c50663              beq     a0,a2,d000aaa8 <lifecycle_state_get+0x156>
d000aaa0:       |     |  |  |              |  |   0000                  unimp
d000aaa2:       |     |  |  |              |  |   0000                  unimp
d000aaa4:       |     |  |  |              |  |   0000                  unimp
d000aaa6:       |     |  |  |              |  |   0000                  unimp
d000aaa8:       |     |  |  |              |  \-> 0b5a7537              lui     a0,0xb5a7
d000aaac:       |     |  |  |              |      5e050513              addi    a0,a0,1504 # b5a75e0 <_rom_ext_virtual_size+0xb5275e0>
d000aab0:       |     +--|--|--------------|----- a00d                  j       d000aad2 <lifecycle_state_get+0x180>
d000aab2:       |     |  |  \--------------|----> 16b5b637              lui     a2,0x16b5b
d000aab6:       |     |  |                 |      d6b60613              addi    a2,a2,-661 # 16b5ad6b <_rom_ext_virtual_size+0x16adad6b>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:25
  switch (launder32(raw_state)) {
d000aaba:       |     |  |                 +----- 04c59063              bne     a1,a2,d000aafa <lifecycle_state_get+0x1a8>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:42
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_TEST_UNLOCKED5);
d000aabe:       +-----|--|-----------------|----- 00c50663              beq     a0,a2,d000aaca <lifecycle_state_get+0x178>
d000aac2:       |     |  |                 |      0000                  unimp
d000aac4:       |     |  |                 |      0000                  unimp
d000aac6:       |     |  |                 |      0000                  unimp
d000aac8:       |     |  |                 |      0000                  unimp
d000aaca:       \-----|--|-----------------|----> b2866537              lui     a0,0xb2866
d000aace:             |  |                 |      fbb50513              addi    a0,a0,-69 # b2865fbb <_stack_end+0xd2845fbb>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:65
}
d000aad2:             >--|-----------------|----> 40b2                  lw      ra,12(sp)
d000aad4:             |  |                 |      0141                  addi    sp,sp,16
d000aad6:             |  |                 |      8082                  ret
d000aad8:             |  \-----------------|----> 2739d637              lui     a2,0x2739d
d000aadc:             |                    |      e7360613              addi    a2,a2,-397 # 2739ce73 <_rom_ext_virtual_size+0x2731ce73>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:25
  switch (launder32(raw_state)) {
d000aae0:             |                    +----- 00c59d63              bne     a1,a2,d000aafa <lifecycle_state_get+0x1a8>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:60
      HARDENED_CHECK_EQ(raw_state, LC_CTRL_LC_STATE_STATE_VALUE_RMA);
d000aae4:             |                    |  /-- 00c50663              beq     a0,a2,d000aaf0 <lifecycle_state_get+0x19e>
d000aae8:             |                    |  |   0000                  unimp
d000aaea:             |                    |  |   0000                  unimp
d000aaec:             |                    |  |   0000                  unimp
d000aaee:             |                    |  |   0000                  unimp
d000aaf0:             |                    |  \-> cf8d0537              lui     a0,0xcf8d0
d000aaf4:             |                    |      aab50513              addi    a0,a0,-1365 # cf8cfaab <_stack_end+0xef8afaab>
d000aaf8:             \--------------------|----- bfe9                  j       d000aad2 <lifecycle_state_get+0x180>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/lifecycle.c:63
      HARDENED_UNREACHABLE();
d000aafa:                                  \----> 0000                  unimp
d000aafc:                                         0000                  unimp
d000aafe:                                         0000                  unimp
d000ab00:                                         0000                  unimp

d000ab02 <otp_read32>:
otp_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/otp.c:18
#include "hw/top_earlgrey/sw/autogen/top_earlgrey.h"
#include "otp_ctrl_regs.h"  // Generated.

enum { kBase = TOP_EARLGREY_OTP_CTRL_CORE_BASE_ADDR };

uint32_t otp_read32(uint32_t address) {
d000ab02:       c01315b7                lui     a1,0xc0131
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/otp.c:19
  return sec_mmio_read32(kBase + OTP_CTRL_SW_CFG_WINDOW_REG_OFFSET + address);
d000ab06:       952e                    add     a0,a0,a1
d000ab08:       a8b1                    j       d000ab64 <sec_mmio_read32>

d000ab0a <sec_mmio_init>:
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000ab0a:           4601                        li      a2,0
d000ab0c:           4681                        li      a3,0
d000ab0e:           4701                        li      a4,0
d000ab10:           4501                        li      a0,0
d000ab12:           0fff5597            auipc   a1,0xfff5
d000ab16:           56258593            addi    a1,a1,1378 # e0000074 <sec_mmio_ctx>
sec_mmio_init():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:53
  // mechanism.
  HARDENED_CHECK_LT(i, kSecMmioRegFileSize);
}

void sec_mmio_init(void) {
  sec_mmio_ctx.last_index = launder32(0);
d000ab1a:           c190                        sw      a2,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:54
  sec_mmio_ctx.write_count = launder32(0);
d000ab1c:           c1d4                        sw      a3,4(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:55
  sec_mmio_ctx.check_count = launder32(0);
d000ab1e:           c5d8                        sw      a4,12(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:56
  sec_mmio_ctx.expected_write_count = launder32(0);
d000ab20:           c588                        sw      a0,8(a1)
d000ab22:           3e800613            li      a2,1000
d000ab26:           56fd                        li      a3,-1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:58
  for (size_t i = 0; i < ARRAYSIZE(sec_mmio_ctx.addrs); ++i) {
    sec_mmio_ctx.addrs[i] = UINT32_MAX;
d000ab28:       /-> 7d858713            addi    a4,a1,2008
d000ab2c:       |   7cd72c23            sw      a3,2008(a4)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:59
    sec_mmio_ctx.values[i] = UINT32_MAX;
d000ab30:       |   c994                        sw      a3,16(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:57
  for (size_t i = 0; i < ARRAYSIZE(sec_mmio_ctx.addrs); ++i) {
d000ab32:       |   167d                        addi    a2,a2,-1
d000ab34:       |   0591                        addi    a1,a1,4
d000ab36:       \-- fa6d                        bnez    a2,d000ab28 <sec_mmio_init+0x1e>
d000ab38:           0fff5597            auipc   a1,0xfff5
d000ab3c:           53c58593            addi    a1,a1,1340 # e0000074 <sec_mmio_ctx>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:61
  }
  uint32_t check = kSecMmioValZero ^ sec_mmio_ctx.last_index;
d000ab40:           4190                        lw      a2,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:62
  check ^= sec_mmio_ctx.write_count;
d000ab42:           41d4                        lw      a3,4(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:63
  check ^= sec_mmio_ctx.check_count;
d000ab44:           45cc                        lw      a1,12(a1)
d000ab46:           8e35                        xor     a2,a2,a3
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:64
  check ^= sec_mmio_ctx.expected_write_count;
d000ab48:           8db1                        xor     a1,a1,a2
d000ab4a:           8d2d                        xor     a0,a0,a1
d000ab4c:           3ca595b7            lui     a1,0x3ca59
d000ab50:           65a58593            addi    a1,a1,1626 # 3ca5965a <_epmp_stack_guard_na4+0x4a5265a>
d000ab54:           8d2d                        xor     a0,a0,a1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:65
  HARDENED_CHECK_EQ(check, kSecMmioValZero);
d000ab56:       /-- 00b50663            beq     a0,a1,d000ab62 <sec_mmio_init+0x58>
d000ab5a:       |   0000                        unimp
d000ab5c:       |   0000                        unimp
d000ab5e:       |   0000                        unimp
d000ab60:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:66
}
d000ab62:       \-> 8082                        ret

d000ab64 <sec_mmio_read32>:
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:78
    sec_mmio_ctx.values[i] = UINT32_MAX;
  }
  HARDENED_CHECK_EQ(sec_mmio_ctx.check_count, 0);
}

uint32_t sec_mmio_read32(uint32_t addr) {
d000ab64:           1101                        addi    sp,sp,-32
d000ab66:           ce06                        sw      ra,28(sp)
d000ab68:           cc22                        sw      s0,24(sp)
d000ab6a:           ca26                        sw      s1,20(sp)
d000ab6c:           c84a                        sw      s2,16(sp)
d000ab6e:           c64e                        sw      s3,12(sp)
d000ab70:           842a                        mv      s0,a0
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
d000ab72:           00052903            lw      s2,0(a0)
d000ab76:           21692537            lui     a0,0x21692
d000ab7a:           43650993            addi    s3,a0,1078 # 21692436 <_rom_ext_virtual_size+0x21612436>
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:80
  uint32_t value = abs_mmio_read32(addr);
  uint32_t masked_value = value ^ kSecMmioMaskVal;
d000ab7e:           013944b3            xor     s1,s2,s3
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:82
  barrier32(masked_value);
  upsert_register(addr, masked_value);
d000ab82:           8522                        mv      a0,s0
d000ab84:           85a6                        mv      a1,s1
d000ab86:           2015                        jal     d000abaa <upsert_register>
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
d000ab88:           4008                        lw      a0,0(s0)
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:83
  HARDENED_CHECK_EQ((abs_mmio_read32(addr) ^ kSecMmioMaskVal), masked_value);
d000ab8a:           01354533            xor     a0,a0,s3
d000ab8e:       /-- 00950663            beq     a0,s1,d000ab9a <sec_mmio_read32+0x36>
d000ab92:       |   0000                        unimp
d000ab94:       |   0000                        unimp
d000ab96:       |   0000                        unimp
d000ab98:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:85

  return value;
d000ab9a:       \-> 854a                        mv      a0,s2
d000ab9c:           49b2                        lw      s3,12(sp)
d000ab9e:           4942                        lw      s2,16(sp)
d000aba0:           44d2                        lw      s1,20(sp)
d000aba2:           4462                        lw      s0,24(sp)
d000aba4:           40f2                        lw      ra,28(sp)
d000aba6:           6105                        addi    sp,sp,32
d000aba8:           8082                        ret

d000abaa <upsert_register>:
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:34
  const size_t last_index = sec_mmio_ctx.last_index;
d000abaa:                 0fff5817              auipc   a6,0xfff5
d000abae:                 4ca80813              addi    a6,a6,1226 # e0000074 <sec_mmio_ctx>
d000abb2:                 00082703              lw      a4,0(a6)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000abb6:                 4781                  li      a5,0
d000abb8:                 4681                  li      a3,0
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
  for (; launder32(i) < last_index; ++i) {
d000abba:       /-------- 02e7f163              bgeu    a5,a4,d000abdc <upsert_register+0x32>
d000abbe:       |         4681                  li      a3,0
d000abc0:       |         87c2                  mv      a5,a6
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:37
    if (sec_mmio_ctx.addrs[i] == addr) {
d000abc2:       |  /----> 7d878613              addi    a2,a5,2008
d000abc6:       |  |      7d862603              lw      a2,2008(a2)
d000abca:       |  |  /-- 00a60863              beq     a2,a0,d000abda <upsert_register+0x30>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
  for (; launder32(i) < last_index; ++i) {
d000abce:       |  |  |   0685                  addi    a3,a3,1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000abd0:       |  |  |   8636                  mv      a2,a3
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
d000abd2:       |  |  |   0791                  addi    a5,a5,4
d000abd4:       |  \--|-- fee667e3              bltu    a2,a4,d000abc2 <upsert_register+0x18>
d000abd8:       +-----|-- a011                  j       d000abdc <upsert_register+0x32>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:38
      sec_mmio_ctx.values[i] = value;
d000abda:       |     \-> cb8c                  sw      a1,16(a5)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000abdc:       \-------> 8636                  mv      a2,a3
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:42
  if (launder32(i) == last_index && launder32(i) < kSecMmioRegFileSize) {
d000abde:             /-- 02e61463              bne     a2,a4,d000ac06 <upsert_register+0x5c>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000abe2:             |   8636                  mv      a2,a3
d000abe4:             |   3e700713              li      a4,999
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:42
d000abe8:             +-- 00c76f63              bltu    a4,a2,d000ac06 <upsert_register+0x5c>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:43
    sec_mmio_ctx.addrs[i] = addr;
d000abec:             |   00269613              slli    a2,a3,0x2
d000abf0:             |   9642                  add     a2,a2,a6
d000abf2:             |   7d860713              addi    a4,a2,2008
d000abf6:             |   7ca72c23              sw      a0,2008(a4)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:44
    sec_mmio_ctx.values[i] = value;
d000abfa:             |   ca0c                  sw      a1,16(a2)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:45
    ++sec_mmio_ctx.last_index;
d000abfc:             |   00082503              lw      a0,0(a6)
d000ac00:             |   0505                  addi    a0,a0,1
d000ac02:             |   00a82023              sw      a0,0(a6)
d000ac06:             \-> 3e800513              li      a0,1000
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:49
  HARDENED_CHECK_LT(i, kSecMmioRegFileSize);
d000ac0a:             /-- 00a6e663              bltu    a3,a0,d000ac16 <upsert_register+0x6c>
d000ac0e:             |   0000                  unimp
d000ac10:             |   0000                  unimp
d000ac12:             |   0000                  unimp
d000ac14:             |   0000                  unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:50
}
d000ac16:             \-> 8082                  ret

d000ac18 <sec_mmio_write32>:
sec_mmio_write32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:88
}

void sec_mmio_write32(uint32_t addr, uint32_t value) {
d000ac18:           1141                        addi    sp,sp,-16
d000ac1a:           c606                        sw      ra,12(sp)
d000ac1c:           c422                        sw      s0,8(sp)
d000ac1e:           c226                        sw      s1,4(sp)
d000ac20:           c04a                        sw      s2,0(sp)
d000ac22:           842a                        mv      s0,a0
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d000ac24:           c10c                        sw      a1,0(a0)
d000ac26:           21692537            lui     a0,0x21692
d000ac2a:           43650913            addi    s2,a0,1078 # 21692436 <_rom_ext_virtual_size+0x21612436>
sec_mmio_write32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:90
  abs_mmio_write32(addr, value);
  uint32_t masked_value = value ^ kSecMmioMaskVal;
d000ac2e:           0125c4b3            xor     s1,a1,s2
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:92
  barrier32(masked_value);
  upsert_register(addr, masked_value);
d000ac32:           8522                        mv      a0,s0
d000ac34:           85a6                        mv      a1,s1
d000ac36:           3f95                        jal     d000abaa <upsert_register>
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
d000ac38:           4008                        lw      a0,0(s0)
sec_mmio_write32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:93
  HARDENED_CHECK_EQ((abs_mmio_read32(addr) ^ kSecMmioMaskVal), masked_value);
d000ac3a:           01254533            xor     a0,a0,s2
d000ac3e:       /-- 00950663            beq     a0,s1,d000ac4a <sec_mmio_write32+0x32>
d000ac42:       |   0000                        unimp
d000ac44:       |   0000                        unimp
d000ac46:       |   0000                        unimp
d000ac48:       |   0000                        unimp
d000ac4a:       \-> 0fff5517            auipc   a0,0xfff5
d000ac4e:           42a50513            addi    a0,a0,1066 # e0000074 <sec_mmio_ctx>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:95

  ++sec_mmio_ctx.write_count;
d000ac52:           414c                        lw      a1,4(a0)
d000ac54:           0585                        addi    a1,a1,1
d000ac56:           c14c                        sw      a1,4(a0)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:96
}
d000ac58:           4902                        lw      s2,0(sp)
d000ac5a:           4492                        lw      s1,4(sp)
d000ac5c:           4422                        lw      s0,8(sp)
d000ac5e:           40b2                        lw      ra,12(sp)
d000ac60:           0141                        addi    sp,sp,16
d000ac62:           8082                        ret

d000ac64 <sec_mmio_check_values>:
sec_mmio_check_values():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:111

  ++sec_mmio_ctx.write_count;
}

void sec_mmio_check_values(uint32_t rnd_offset) {
  const uint32_t last_index = sec_mmio_ctx.last_index;
d000ac64:                    0fff5817           auipc   a6,0xfff5
d000ac68:                    41080813           addi    a6,a6,1040 # e0000074 <sec_mmio_ctx>
d000ac6c:                    00082603           lw      a2,0(a6)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000ac70:                    4701                       li      a4,0
d000ac72:                    4681                       li      a3,0
sec_mmio_check_values():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:116
  // Pick a random starting offset.
  uint32_t offset = ((uint64_t)rnd_offset * (uint64_t)last_index) >> 32;
  enum { kStep = 1 };
  size_t i;
  for (i = 0; launder32(i) < last_index; ++i) {
d000ac74:       /----------- 04c77463           bgeu    a4,a2,d000acbc <sec_mmio_check_values+0x58>
d000ac78:       |            4681                       li      a3,0
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:113
  uint32_t offset = ((uint64_t)rnd_offset * (uint64_t)last_index) >> 32;
d000ac7a:       |            02a63733           mulhu   a4,a2,a0
d000ac7e:       |            21692537           lui     a0,0x21692
d000ac82:       |            43650893           addi    a7,a0,1078 # 21692436 <_rom_ext_virtual_size+0x21612436>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:117
    uint32_t read_value = abs_mmio_read32(sec_mmio_ctx.addrs[offset]);
d000ac86:       |  /-------> 00271793           slli    a5,a4,0x2
d000ac8a:       |  |         97c2                       add     a5,a5,a6
d000ac8c:       |  |         7d878593           addi    a1,a5,2008
d000ac90:       |  |         7d85a583           lw      a1,2008(a1)
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
d000ac94:       |  |         418c                       lw      a1,0(a1)
sec_mmio_check_values():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:118
    HARDENED_CHECK_EQ(read_value ^ kSecMmioMaskVal,
d000ac96:       |  |         4b88                       lw      a0,16(a5)
d000ac98:       |  |         4781                       li      a5,0
d000ac9a:       |  |         0115c5b3           xor     a1,a1,a7
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:120
                      sec_mmio_ctx.values[offset]);
    offset += kStep;
d000ac9e:       |  |         0705                       addi    a4,a4,1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:118
    HARDENED_CHECK_EQ(read_value ^ kSecMmioMaskVal,
d000aca0:       |  |  /----- 00a58663           beq     a1,a0,d000acac <sec_mmio_check_values+0x48>
d000aca4:       |  |  |      0000                       unimp
d000aca6:       |  |  |      0000                       unimp
d000aca8:       |  |  |      0000                       unimp
d000acaa:       |  |  |      0000                       unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:121
    if (offset >= last_index) {
d000acac:       |  |  \--/-X 00c76363           bltu    a4,a2,d000acb2 <sec_mmio_check_values+0x4e>
d000acb0:       |  |     |   87b2                       mv      a5,a2
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:116
  for (i = 0; launder32(i) < last_index; ++i) {
d000acb2:       |  |     \-> 0685                       addi    a3,a3,1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000acb4:       |  |         8536                       mv      a0,a3
sec_mmio_check_values():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:121
    if (offset >= last_index) {
d000acb6:       |  |         8f1d                       sub     a4,a4,a5
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:116
  for (i = 0; launder32(i) < last_index; ++i) {
d000acb8:       |  \-------- fcc567e3           bltu    a0,a2,d000ac86 <sec_mmio_check_values+0x22>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:126
      offset -= last_index;
    }
  }
  // Check for loop completion.
  HARDENED_CHECK_EQ(i, last_index);
d000acbc:       \--------/-X 00c68663           beq     a3,a2,d000acc8 <sec_mmio_check_values+0x64>
d000acc0:                |   0000                       unimp
d000acc2:                |   0000                       unimp
d000acc4:                |   0000                       unimp
d000acc6:                |   0000                       unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:127
  ++sec_mmio_ctx.check_count;
d000acc8:                \-> 00c82503           lw      a0,12(a6)
d000accc:                    0505                       addi    a0,a0,1
d000acce:                    00a82623           sw      a0,12(a6)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:128
}
d000acd2:                    8082                       ret

d000acd4 <sec_mmio_check_counters>:
sec_mmio_check_counters():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:130

void sec_mmio_check_counters(uint32_t expected_check_count) {
d000acd4:           3ca595b7            lui     a1,0x3ca59
d000acd8:           65a58593            addi    a1,a1,1626 # 3ca5965a <_epmp_stack_guard_na4+0x4a5265a>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000acdc:           862e                        mv      a2,a1
d000acde:           0fff5697            auipc   a3,0xfff5
d000ace2:           39668693            addi    a3,a3,918 # e0000074 <sec_mmio_ctx>
sec_mmio_check_counters():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:131
  uint32_t result = launder32(kSecMmioValZero) ^ sec_mmio_ctx.write_count;
d000ace6:           42d8                        lw      a4,4(a3)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:132
  result ^= sec_mmio_ctx.expected_write_count;
d000ace8:           469c                        lw      a5,8(a3)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:131
  uint32_t result = launder32(kSecMmioValZero) ^ sec_mmio_ctx.write_count;
d000acea:           8e39                        xor     a2,a2,a4
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:132
  result ^= sec_mmio_ctx.expected_write_count;
d000acec:           8e3d                        xor     a2,a2,a5
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:136

  // Check the expected write count. This is equivalent to
  // sec_mmio_ctx.write_count == sec_mmio_ctx.expected_write_count
  HARDENED_CHECK_EQ(result, kSecMmioValZero);
d000acee:       /-- 00b60663            beq     a2,a1,d000acfa <sec_mmio_check_counters+0x26>
d000acf2:       |   0000                        unimp
d000acf4:       |   0000                        unimp
d000acf6:       |   0000                        unimp
d000acf8:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:141

  // Check the expected check counts. This is equivalent to
  // sec_mmio_ctx.check_count == expected_check_count. This check is expected to
  // fail if the previous check failed.
  result ^= sec_mmio_ctx.check_count;
d000acfa:       \-> 46cc                        lw      a1,12(a3)
d000acfc:           8d31                        xor     a0,a0,a2
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:142
  result ^= expected_check_count;
d000acfe:           8d2d                        xor     a0,a0,a1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:143
  HARDENED_CHECK_EQ(~launder32(result), kSecMmioValOne);
d000ad00:           fff54513            not     a0,a0
d000ad04:           c35a75b7            lui     a1,0xc35a7
d000ad08:           9a558593            addi    a1,a1,-1627 # c35a69a5 <_stack_end+0xe35869a5>
d000ad0c:       /-- 00b50663            beq     a0,a1,d000ad18 <sec_mmio_check_counters+0x44>
d000ad10:       |   0000                        unimp
d000ad12:       |   0000                        unimp
d000ad14:       |   0000                        unimp
d000ad16:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:145

  ++sec_mmio_ctx.check_count;
d000ad18:       \-> 46c8                        lw      a0,12(a3)
d000ad1a:           0505                        addi    a0,a0,1
d000ad1c:           c6c8                        sw      a0,12(a3)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:146
}
d000ad1e:           8082                        ret

d000ad20 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
d000ad20:                       00153693                seqz    a3,a0
d000ad24:                       0015b713                seqz    a4,a1
d000ad28:                       8ed9                    or      a3,a3,a4
d000ad2a:       /-------------- eab5                    bnez    a3,d000ad9e <memcpy+0x7e>
d000ad2c:       |               4711                    li      a4,4
d000ad2e:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
d000ad30:       |        /----- 00e66c63                bltu    a2,a4,d000ad48 <memcpy+0x28>
d000ad34:       |        |      00a5c6b3                xor     a3,a1,a0
d000ad38:       |        |      0036f793                andi    a5,a3,3
d000ad3c:       |        |      8832                    mv      a6,a2
d000ad3e:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
d000ad40:       |        |  /-- eb91                    bnez    a5,d000ad54 <memcpy+0x34>
d000ad42:       |        |  |   40a006b3                neg     a3,a0
d000ad46:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
d000ad48:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
d000ad4c:       |           |   9b71                    andi    a4,a4,-4
d000ad4e:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
d000ad52:       |  /--------|-- c6b9                    beqz    a3,d000ada0 <memcpy+0x80>
d000ad54:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
d000ad56:       |  |        /-> 00f58733                add     a4,a1,a5
d000ad5a:       |  |        |   00070883                lb      a7,0(a4)
d000ad5e:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
d000ad62:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
d000ad64:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
d000ad68:       |  |        \-- fef697e3                bne     a3,a5,d000ad56 <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
d000ad6c:       |  |  /-------- 0106fb63                bgeu    a3,a6,d000ad82 <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
d000ad70:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
d000ad74:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
d000ad76:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
d000ad7a:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
d000ad7c:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
d000ad7e:       |  |  |  +----- ff06e9e3                bltu    a3,a6,d000ad70 <memcpy+0x50>
d000ad82:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,d000ad9e <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
d000ad86:       |  |  |  |      8e15                    sub     a2,a2,a3
d000ad88:       |  |  |  |      00d50733                add     a4,a0,a3
d000ad8c:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
d000ad8e:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
d000ad92:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
d000ad96:       |  |  |  |  |   167d                    addi    a2,a2,-1
d000ad98:       |  |  |  |  |   0705                    addi    a4,a4,1
d000ad9a:       |  |  |  |  |   0585                    addi    a1,a1,1
d000ad9c:       |  |  |  |  \-- fa6d                    bnez    a2,d000ad8e <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
d000ad9e:       \--|--|--|----> 8082                    ret
d000ada0:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
d000ada2:             |  \----- fd06e7e3                bltu    a3,a6,d000ad70 <memcpy+0x50>
d000ada6:             \-------- bff1                    j       d000ad82 <memcpy+0x62>

d000ada8 <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
d000ada8:                 4691                  li      a3,4
d000adaa:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
d000adac:             /-- 00d66663              bltu    a2,a3,d000adb8 <memset+0x10>
d000adb0:             |   40a006b3              neg     a3,a0
d000adb4:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
d000adb8:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
d000adbc:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
d000adc0:          /----- cb01                  beqz    a4,d000add0 <memset+0x28>
d000adc2:          |      87aa                  mv      a5,a0
d000adc4:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
d000adc6:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
d000adca:          |  |   16fd                  addi    a3,a3,-1
d000adcc:          |  |   0785                  addi    a5,a5,1
d000adce:          |  \-- fee5                  bnez    a3,d000adc6 <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
d000add0:       /--\----X 02080263              beqz    a6,d000adf4 <memset+0x4c>
d000add4:       |         00e808b3              add     a7,a6,a4
d000add8:       |         0ff5f813              andi    a6,a1,255
d000addc:       |         010107b7              lui     a5,0x1010
d000ade0:       |         10178793              addi    a5,a5,257 # 1010101 <_rom_ext_virtual_size+0xf90101>
d000ade4:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
d000ade8:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
d000adec:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
d000adee:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
d000adf0:       |     \-- ff176ce3              bltu    a4,a7,d000ade8 <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
d000adf4:       \--/----X 00c77a63              bgeu    a4,a2,d000ae08 <memset+0x60>
d000adf8:          |      8e19                  sub     a2,a2,a4
d000adfa:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
d000adfe:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
d000ae02:          |  |   167d                  addi    a2,a2,-1
d000ae04:          |  |   0685                  addi    a3,a3,1
d000ae06:          |  \-- fe65                  bnez    a2,d000adfe <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
d000ae08:          \----> 8082                  ret

d000ae0a <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
d000ae0a:                             4691                      li      a3,4
d000ae0c:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
d000ae0e:                         /-- 00d66663                  bltu    a2,a3,d000ae1a <memchr+0x10>
d000ae12:                         |   40a006b3                  neg     a3,a0
d000ae16:                         |   0036fe93                  andi    t4,a3,3
d000ae1a:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
d000ae1e:                      /----- 000e8b63                  beqz    t4,d000ae34 <memchr+0x2a>
d000ae22:                      |      85aa                      mv      a1,a0
d000ae24:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
d000ae26:                      |  /-> 0005c683                  lbu     a3,0(a1)
d000ae2a:       /--------------|--|-- 09c68563                  beq     a3,t3,d000aeb4 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
d000ae2e:       |              |  |   17fd                      addi    a5,a5,-1
d000ae30:       |              |  |   0585                      addi    a1,a1,1
d000ae32:       |              |  \-- fbf5                      bnez    a5,d000ae26 <memchr+0x1c>
d000ae34:       |              \----> 41d605b3                  sub     a1,a2,t4
d000ae38:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
d000ae3a:       |  /----------------- c9a9                      beqz    a1,d000ae8c <memchr+0x82>
d000ae3c:       |  |                  01d58833                  add     a6,a1,t4
d000ae40:       |  |                  010105b7                  lui     a1,0x1010
d000ae44:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <_rom_ext_virtual_size+0xf90101>
d000ae48:       |  |                  02be02b3                  mul     t0,t3,a1
d000ae4c:       |  |                  0ff00893                  li      a7,255
d000ae50:       |  |                  65c1                      lui     a1,0x10
d000ae52:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_stack_size+0xbf00>
d000ae56:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
d000ae5a:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
d000ae5e:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
d000ae60:       |  |              |   0056c7b3                  xor     a5,a3,t0
d000ae64:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
d000ae68:       |  |              |   0ff6f713                  andi    a4,a3,255
d000ae6c:       +--|--------------|-- 05170463                  beq     a4,a7,d000aeb4 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
d000ae70:       |  |              |   0076f733                  and     a4,a3,t2
d000ae74:       |  |  /-----------|-- 02770b63                  beq     a4,t2,d000aeaa <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
d000ae78:       |  |  |           |   0066f6b3                  and     a3,a3,t1
d000ae7c:       |  |  |  /--------|-- 02668963                  beq     a3,t1,d000aeae <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
d000ae80:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
d000ae84:       |  |  |  |  /-----|-- c69d                      beqz    a3,d000aeb2 <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
d000ae86:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
d000ae88:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,d000ae5a <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
d000ae8c:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,d000aea6 <memchr+0x9c>
d000ae90:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
d000ae94:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
d000ae98:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
d000ae9c:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,d000aeb4 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
d000aea0:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
d000aea2:       |     |  |  |  |  |   0585                      addi    a1,a1,1
d000aea4:       |     |  |  |  |  \-- fa75                      bnez    a2,d000ae98 <memchr+0x8e>
d000aea6:       |     |  |  |  \----> 4581                      li      a1,0
d000aea8:       +-----|--|--|-------- a031                      j       d000aeb4 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
d000aeaa:       |     \--|--|-------> 0585                      addi    a1,a1,1
d000aeac:       +--------|--|-------- a021                      j       d000aeb4 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
d000aeae:       |        \--|-------> 0589                      addi    a1,a1,2
d000aeb0:       +-----------|-------- a011                      j       d000aeb4 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
d000aeb2:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
d000aeb4:       \-------------------> 852e                      mv      a0,a1
d000aeb6:                             8082                      ret

d000aeb8 <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
d000aeb8:                          4691                 li      a3,4
d000aeba:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
d000aebc:                      /-- 00d66663             bltu    a2,a3,d000aec8 <memrchr+0x10>
d000aec0:                      |   40a006b3             neg     a3,a0
d000aec4:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
d000aec8:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
d000aecc:                          9af1                 andi    a3,a3,-4
d000aece:                          006687b3             add     a5,a3,t1
d000aed2:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
d000aed4:                      /-- 00f66363             bltu    a2,a5,d000aeda <memrchr+0x22>
d000aed8:                      |   86be                 mv      a3,a5
d000aeda:                      \-> 0ff5f393             andi    t2,a1,255
d000aede:                   /--/-X 00c7fd63             bgeu    a5,a2,d000aef8 <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
d000aee2:                   |  |   00c50733             add     a4,a0,a2
d000aee6:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
d000aeea:                   |  |   fff60713             addi    a4,a2,-1
d000aeee:                   |  |   863a                 mv      a2,a4
d000aef0:                   |  \-- fe7597e3             bne     a1,t2,d000aede <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
d000aef4:                   |      953a                 add     a0,a0,a4
d000aef6:                   |      8082                 ret
d000aef8:                   \----> 010105b7             lui     a1,0x1010
d000aefc:                          10158593             addi    a1,a1,257 # 1010101 <_rom_ext_virtual_size+0xf90101>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
d000af00:                          02b382b3             mul     t0,t2,a1
d000af04:                          00ff0837             lui     a6,0xff0
d000af08:                          65c1                 lui     a1,0x10
d000af0a:                          f0058793             addi    a5,a1,-256 # ff00 <_stack_size+0xbf00>
d000af0e:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
d000af12:       /--------------/-X 04d37563             bgeu    t1,a3,d000af5c <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
d000af16:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
d000af1a:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
d000af1e:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
d000af22:       |              |   01875593             srli    a1,a4,0x18
d000af26:       |  /-----------|-- cd95                 beqz    a1,d000af62 <memrchr+0xaa>
d000af28:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
d000af2c:       |  |           |   010775b3             and     a1,a4,a6
d000af30:       |  |  /--------|-- 03058c63             beq     a1,a6,d000af68 <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
d000af34:       |  |  |        |   00f775b3             and     a1,a4,a5
d000af38:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,d000af6e <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
d000af3c:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
d000af40:       |  |  |  |     |   16f1                 addi    a3,a3,-4
d000af42:       |  |  |  |     \-- fd1598e3             bne     a1,a7,d000af12 <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
d000af46:       |  |  |  |         9536                 add     a0,a0,a3
d000af48:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
d000af4a:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
d000af4e:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
d000af52:       |  |  |  |     |   fff68613             addi    a2,a3,-1
d000af56:       |  |  |  |     |   86b2                 mv      a3,a2
d000af58:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,d000af74 <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
d000af5c:       \--|--|--|--|--\-X f6fd                 bnez    a3,d000af4a <memrchr+0x92>
d000af5e:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
d000af60:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
d000af62:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
d000af66:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
d000af68:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
d000af6c:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
d000af6e:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
d000af72:                   |      8082                 ret
d000af74:                   \----> 9532                 add     a0,a0,a2
d000af76:                          8082                 ret

d000af78 <device_fpga_version_print>:
device_fpga_version_print():
/proc/self/cwd/sw/device/lib/arch/device_sim_verilator.c:57

const uintptr_t kDeviceLogBypassUartAddress = 0;

const bool kJitterEnabled = false;

void device_fpga_version_print(void) {}
d000af78:       8082                    ret
d000af7a:       0000                    unimp

Disassembly of section .shutdown:

d000af7c <shutdown_finalize>:
shutdown_finalize():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:504
 * The shutdown_finalize function goes into the .shutdown section which is
 * placed by the linker script after all other executable code.
 */
__attribute__((section(".shutdown")))
#endif
void shutdown_finalize(rom_error_t reason) {
d000af7c:                       c01405b7                lui     a1,0xc0140
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
d000af80:                       59cc                    lw      a1,52(a1)
d000af82:                       40000637                lui     a2,0x40000
d000af86:                       167d                    addi    a2,a2,-1
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
d000af88:                       00c5feb3                and     t4,a1,a2
d000af8c:                       e2291637                lui     a2,0xe2291
d000af90:                       1ad6b6b7                lui     a3,0x1ad6b
d000af94:                       5ac68693                addi    a3,a3,1452 # 1ad6b5ac <_rom_ext_virtual_size+0x1aceb5ac>
d000af98:                       aa560613                addi    a2,a2,-1371 # e2290aa5 <_stack_end+0x2270aa5>
shutdown_redact_policy_inline():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:270
  switch (raw_state) {
d000af9c:                   /-- 03d6cb63                blt     a3,t4,d000afd2 <shutdown_finalize+0x56>
d000afa0:                   |   0e73a6b7                lui     a3,0xe73a
d000afa4:                   |   ce668713                addi    a4,a3,-794 # e739ce6 <_rom_ext_virtual_size+0xe6b9ce6>
d000afa8:             /-----|-- 05d74e63                blt     a4,t4,d000b004 <shutdown_finalize+0x88>
d000afac:             |     |   021086b7                lui     a3,0x2108
d000afb0:             |     |   42168693                addi    a3,a3,1057 # 2108421 <_rom_ext_virtual_size+0x2088421>
d000afb4:       /-----|-----|-- 0ade8263                beq     t4,a3,d000b058 <shutdown_finalize+0xdc>
d000afb8:       |     |     |   063196b7                lui     a3,0x6319
d000afbc:       |     |     |   c6368693                addi    a3,a3,-925 # 6318c63 <_rom_ext_virtual_size+0x6298c63>
d000afc0:       +-----|-----|-- 08de8c63                beq     t4,a3,d000b058 <shutdown_finalize+0xdc>
d000afc4:       |     |     |   0a5296b7                lui     a3,0xa529
d000afc8:       |     |     |   4a568693                addi    a3,a3,1189 # a5294a5 <_rom_ext_virtual_size+0xa4a94a5>
d000afcc:       +-----|-----|-- 08de8663                beq     t4,a3,d000b058 <shutdown_finalize+0xdc>
d000afd0:       |  /--|-----|-- a041                    j       d000b050 <shutdown_finalize+0xd4>
d000afd2:       |  |  |     \-> 2318c6b7                lui     a3,0x2318c
d000afd6:       |  |  |         63068713                addi    a4,a3,1584 # 2318c630 <_rom_ext_virtual_size+0x2310c630>
d000afda:       |  |  |  /----- 05d74663                blt     a4,t4,d000b026 <shutdown_finalize+0xaa>
d000afde:       |  |  |  |      1ad6b6b7                lui     a3,0x1ad6b
d000afe2:       |  |  |  |      5ad68693                addi    a3,a3,1453 # 1ad6b5ad <_rom_ext_virtual_size+0x1aceb5ad>
d000afe6:       +--|--|--|----- 06de8963                beq     t4,a3,d000b058 <shutdown_finalize+0xdc>
d000afea:       |  |  |  |      1ef7c6b7                lui     a3,0x1ef7c
d000afee:       |  |  |  |      def68693                addi    a3,a3,-529 # 1ef7bdef <_rom_ext_virtual_size+0x1eefbdef>
d000aff2:       +--|--|--|----- 06de8363                beq     t4,a3,d000b058 <shutdown_finalize+0xdc>
d000aff6:       |  |  |  |      21084637                lui     a2,0x21084
d000affa:       |  |  |  |      21060613                addi    a2,a2,528 # 21084210 <_rom_ext_virtual_size+0x21004210>
d000affe:       |  |  |  |  /-- 04ce8463                beq     t4,a2,d000b046 <shutdown_finalize+0xca>
d000b002:       |  +--|--|--|-- a0b9                    j       d000b050 <shutdown_finalize+0xd4>
d000b004:       |  |  \--|--|-> ce768693                addi    a3,a3,-793
d000b008:       +--|-----|--|-- 04de8863                beq     t4,a3,d000b058 <shutdown_finalize+0xdc>
d000b00c:       |  |     |  |   1294a6b7                lui     a3,0x1294a
d000b010:       |  |     |  |   52968693                addi    a3,a3,1321 # 1294a529 <_rom_ext_virtual_size+0x128ca529>
d000b014:       +--|-----|--|-- 04de8263                beq     t4,a3,d000b058 <shutdown_finalize+0xdc>
d000b018:       |  |     |  |   16b5b6b7                lui     a3,0x16b5b
d000b01c:       |  |     |  |   d6b68693                addi    a3,a3,-661 # 16b5ad6b <_rom_ext_virtual_size+0x16adad6b>
d000b020:       +--|-----|--|-- 02de8c63                beq     t4,a3,d000b058 <shutdown_finalize+0xdc>
d000b024:       |  +-----|--|-- a035                    j       d000b050 <shutdown_finalize+0xd4>
d000b026:       |  |     \--|-> 63168693                addi    a3,a3,1585
d000b02a:       |  |        +-- 00de8e63                beq     t4,a3,d000b046 <shutdown_finalize+0xca>
d000b02e:       |  |        |   2739d6b7                lui     a3,0x2739d
d000b032:       |  |        |   e7368693                addi    a3,a3,-397 # 2739ce73 <_rom_ext_virtual_size+0x2731ce73>
d000b036:       +--|--------|-- 02de8163                beq     t4,a3,d000b058 <shutdown_finalize+0xdc>
d000b03a:       |  |        |   25295637                lui     a2,0x25295
d000b03e:       |  |        |   a5260613                addi    a2,a2,-1454 # 25294a52 <_rom_ext_virtual_size+0x25214a52>
d000b042:       |  +--------|-- 00ce9763                bne     t4,a2,d000b050 <shutdown_finalize+0xd4>
d000b046:       |  |        \-> c0131637                lui     a2,0xc0131
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
d000b04a:       |  |            36062603                lw      a2,864(a2) # c0131360 <_stack_end+0xe0111360>
d000b04e:       +--|----------- a029                    j       d000b058 <shutdown_finalize+0xdc>
d000b050:       |  \----------> 48eb5637                lui     a2,0x48eb5
d000b054:       |               bd960613                addi    a2,a2,-1063 # 48eb4bd9 <_epmp_stack_guard_na4+0x10eadbd9>
d000b058:       \-------------> 73900693                li      a3,1849
shutdown_redact_inline():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:238
  if (reason == kErrorOk) {
d000b05c:                   /-- 00d51463                bne     a0,a3,d000b064 <shutdown_finalize+0xe8>
d000b060:                   |   4501                    li      a0,0
d000b062:             /-----|-- a835                    j       d000b09e <shutdown_finalize+0x122>
d000b064:             |     \-> e22916b7                lui     a3,0xe2291
d000b068:             |         aa568693                addi    a3,a3,-1371 # e2290aa5 <_stack_end+0x2270aa5>
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:241
  switch (severity) {
d000b06c:             +-------- 02d60963                beq     a2,a3,d000b09e <shutdown_finalize+0x122>
d000b070:             |         3367d6b7                lui     a3,0x3367d
d000b074:             |         3d468693                addi    a3,a3,980 # 3367d3d4 <_rom_ext_virtual_size+0x335fd3d4>
d000b078:             |  /----- 00d60d63                beq     a2,a3,d000b092 <shutdown_finalize+0x116>
d000b07c:             |  |      1e7916b7                lui     a3,0x1e791
d000b080:             |  |      12368693                addi    a3,a3,291 # 1e791123 <_rom_ext_virtual_size+0x1e711123>
d000b084:             |  |  /-- 00d61c63                bne     a2,a3,d000b09c <shutdown_finalize+0x120>
d000b088:             |  |  |   ff000637                lui     a2,0xff000
d000b08c:             |  |  |   0ff60613                addi    a2,a2,255 # ff0000ff <_stack_end+0x1efe00ff>
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
d000b090:             |  |  |   8d71                    and     a0,a0,a2
d000b092:             |  \--|-> 01000637                lui     a2,0x1000
d000b096:             |     |   167d                    addi    a2,a2,-1
d000b098:             |     |   8d71                    and     a0,a0,a2
d000b09a:             +-----|-- a011                    j       d000b09e <shutdown_finalize+0x122>
d000b09c:             |     \-> 557d                    li      a0,-1
d000b09e:             \-------> c00006b7                lui     a3,0xc0000
d000b0a2:                       4609                    li      a2,2
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d000b0a4:                       d290                    sw      a2,32(a3)
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
d000b0a6:                       4a90                    lw      a2,16(a3)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
d000b0a8:                       00166613                ori     a2,a2,1
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d000b0ac:                       ca90                    sw      a2,16(a3)
d000b0ae:                       3a564837                lui     a6,0x3a564
d000b0b2:                       64280613                addi    a2,a6,1602 # 3a564642 <_epmp_stack_guard_na4+0x255d642>
d000b0b6:                       ced0                    sw      a2,28(a3)
d000b0b8:                       003a58b7                lui     a7,0x3a5
d000b0bc:                       64688613                addi    a2,a7,1606 # 3a5646 <_rom_ext_virtual_size+0x325646>
d000b0c0:                       ced0                    sw      a2,28(a3)
d000b0c2:                       6611                    lui     a2,0x4
d000b0c4:                       a5660393                addi    t2,a2,-1450 # 3a56 <_static_critical_size+0x1a92>
d000b0c8:                       0076ae23                sw      t2,28(a3) # c000001c <_stack_end+0xdffe001c>
d000b0cc:                       03a00293                li      t0,58
d000b0d0:                       0056ae23                sw      t0,28(a3)
d000b0d4:                       4e21                    li      t3,8
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000b0d6:                       4721                    li      a4,8
d000b0d8:                       00000617                auipc   a2,0x0
d000b0dc:                       43460613                addi    a2,a2,1076 # d000b50c <_text_end+0x2f8>
shutdown_print():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:352
  for (size_t i = 0; i < launder32(kHexStrLen); ++i) {
d000b0e0:                /----- cf19                    beqz    a4,d000b0fe <shutdown_finalize+0x182>
d000b0e2:                |      4781                    li      a5,0
d000b0e4:                |      4771                    li      a4,28
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
d000b0e6:                |  /-> 00e555b3                srl     a1,a0,a4
d000b0ea:                |  |   89bd                    andi    a1,a1,15
shutdown_print():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:355
    abs_mmio_write32(kUartBase + UART_WDATA_REG_OFFSET, kHexTable[nibble]);
d000b0ec:                |  |   95b2                    add     a1,a1,a2
d000b0ee:                |  |   0005c583                lbu     a1,0(a1) # c0140000 <_stack_end+0xe0120000>
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d000b0f2:                |  |   cecc                    sw      a1,28(a3)
shutdown_print():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:352
  for (size_t i = 0; i < launder32(kHexStrLen); ++i) {
d000b0f4:                |  |   0785                    addi    a5,a5,1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000b0f6:                |  |   45a1                    li      a1,8
shutdown_print():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:352
d000b0f8:                |  |   1771                    addi    a4,a4,-4
d000b0fa:                |  \-- feb7e6e3                bltu    a5,a1,d000b0e6 <shutdown_finalize+0x16a>
d000b0fe:                \----> 4335                    li      t1,13
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d000b100:                       0066ae23                sw      t1,28(a3)
d000b104:                       4529                    li      a0,10
d000b106:                       cec8                    sw      a0,28(a3)
d000b108:                       34c80593                addi    a1,a6,844
d000b10c:                       cecc                    sw      a1,28(a3)
d000b10e:                       64388593                addi    a1,a7,1603
d000b112:                       cecc                    sw      a1,28(a3)
d000b114:                       0076ae23                sw      t2,28(a3)
d000b118:                       0056ae23                sw      t0,28(a3)
shutdown_print():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:352
d000b11c:                /----- 020e0263                beqz    t3,d000b140 <shutdown_finalize+0x1c4>
d000b120:                |      4681                    li      a3,0
d000b122:                |      4771                    li      a4,28
d000b124:                |      c00007b7                lui     a5,0xc0000
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
d000b128:                |  /-> 00eed5b3                srl     a1,t4,a4
d000b12c:                |  |   89bd                    andi    a1,a1,15
shutdown_print():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:355
    abs_mmio_write32(kUartBase + UART_WDATA_REG_OFFSET, kHexTable[nibble]);
d000b12e:                |  |   95b2                    add     a1,a1,a2
d000b130:                |  |   0005c583                lbu     a1,0(a1)
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d000b134:                |  |   cfcc                    sw      a1,28(a5)
shutdown_print():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:352
  for (size_t i = 0; i < launder32(kHexStrLen); ++i) {
d000b136:                |  |   0685                    addi    a3,a3,1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
d000b138:                |  |   45a1                    li      a1,8
shutdown_print():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:352
d000b13a:                |  |   1771                    addi    a4,a4,-4
d000b13c:                |  \-- feb6e6e3                bltu    a3,a1,d000b128 <shutdown_finalize+0x1ac>
d000b140:                \----> c00005b7                lui     a1,0xc0000
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
d000b144:                       0065ae23                sw      t1,28(a1) # c000001c <_stack_end+0xdffe001c>
d000b148:                       cdc8                    sw      a0,28(a1)
shutdown_report_error():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:391
  CSR_WRITE(CSR_REG_MCYCLE, 0);
d000b14a:                       b0001073                csrw    mcycle,zero
d000b14e:                       00000517                auipc   a0,0x0
d000b152:                       72e50513                addi    a0,a0,1838 # d000b87c <kUartTxFifoCpuCycles>
d000b156:                       4108                    lw      a0,0(a0)
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
d000b158:                   /-> 49d0                    lw      a2,20(a1)
shutdown_report_error():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:398
    CSR_READ(CSR_REG_MCYCLE, &mcycle);
d000b15a:                   |   b00026f3                csrr    a3,mcycle
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
d000b15e:                   |   8a21                    andi    a2,a2,8
d000b160:                   |   00163613                seqz    a2,a2
shutdown_report_error():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:399
  } while (mcycle < kUartTxFifoCpuCycles && !tx_idle);
d000b164:                   |   00a6b6b3                sltu    a3,a3,a0
d000b168:                   |   8e75                    and     a2,a2,a3
d000b16a:                   \-- f67d                    bnez    a2,d000b158 <shutdown_finalize+0x1dc>
d000b16c:                       c11f0537                lui     a0,0xc11f0
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d000b170:                       00052423                sw      zero,8(a0) # c11f0008 <_stack_end+0xe11d0008>
d000b174:                       c1140537                lui     a0,0xc1140
d000b178:                       04000593                li      a1,64
abs_mmio_write32_shadowed():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:94
  *((volatile uint32_t *)addr) = value;
d000b17c:                       cd0c                    sw      a1,24(a0)
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:95
  *((volatile uint32_t *)addr) = value;
d000b17e:                       cd0c                    sw      a1,24(a0)
d000b180:                       4585                    li      a1,1
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
d000b182:                       c94c                    sw      a1,20(a0)
d000b184:                       cd4c                    sw      a1,28(a0)
d000b186:                       c0410837                lui     a6,0xc0410
d000b18a:                       4619                    li      a2,6
d000b18c:                       00c82223                sw      a2,4(a6) # c0410004 <_stack_end+0xe03f0004>
d000b190:                       c10006b7                lui     a3,0xc1000
d000b194:                       0006a823                sw      zero,16(a3) # c1000010 <_stack_end+0xe0fe0010>
d000b198:                       c11c06b7                lui     a3,0xc11c0
d000b19c:                       0006a023                sw      zero,0(a3) # c11c0000 <_stack_end+0xe11a0000>
d000b1a0:                       0006a423                sw      zero,8(a3)
d000b1a4:                       80000737                lui     a4,0x80000
d000b1a8:                       177d                    addi    a4,a4,-1
d000b1aa:                       009897b7                lui     a5,0x989
d000b1ae:                       d0078793                addi    a5,a5,-768 # 988d00 <_rom_ext_virtual_size+0x908d00>
d000b1b2:                       4509                    li      a0,2
shutdown_hang():
/proc/self/cwd/sw/device/silicon_creator/lib/shutdown.c:452
  asm volatile(
d000b1b4:                   /-> cacc                    sw      a1,20(a3)
d000b1b6:                   |   00c82223                sw      a2,4(a6)
d000b1ba:                   |   00000297                auipc   t0,0x0
d000b1be:                   |   ffa28293                addi    t0,t0,-6 # d000b1b4 <shutdown_finalize+0x238>
d000b1c2:                   |   0022d293                srli    t0,t0,0x2
d000b1c6:                   |   3b029073                csrw    pmpaddr0,t0
d000b1ca:                   |   00000297                auipc   t0,0x0
d000b1ce:                   |   04a28293                addi    t0,t0,74 # d000b214 <_text_end>
d000b1d2:                   |   0022d293                srli    t0,t0,0x2
d000b1d6:                   |   3b129073                csrw    pmpaddr1,t0
d000b1da:                   |   3b271073                csrw    pmpaddr2,a4
d000b1de:                   |   3a079073                csrw    pmpcfg0,a5
d000b1e2:                   |   3a101073                csrw    pmpcfg1,zero
d000b1e6:                   |   3a201073                csrw    pmpcfg2,zero
d000b1ea:                   |   3a301073                csrw    pmpcfg3,zero
d000b1ee:                   |   74751073                csrw    0x747,a0
d000b1f2:                   |   10500073                wfi
d000b1f6:                   |   10500073                wfi
d000b1fa:                   |   10500073                wfi
d000b1fe:                   |   10500073                wfi
d000b202:                   +-- bf4d                    j       d000b1b4 <shutdown_finalize+0x238>
d000b204:                   |   10500073                wfi
d000b208:                   |   10500073                wfi
d000b20c:                   +-- b765                    j       d000b1b4 <shutdown_finalize+0x238>
d000b20e:                   |   10500073                wfi
d000b212:                   \-- b74d                    j       d000b1b4 <shutdown_finalize+0x238>
