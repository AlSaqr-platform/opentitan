
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/device/tests/hmac_smoketest_prog_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/device/tests/hmac_smoketest_prog_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xf0000480

Program Header:
    LOAD off    0x00000000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00000000 memsz 0x00001fc4 flags rw-
    LOAD off    0x00001000 vaddr 0xf0000000 paddr 0xf0000000 align 2**12
         filesz 0x00004078 memsz 0x00004078 flags rwx
    LOAD off    0x00005fc4 vaddr 0xe0001fc4 paddr 0xf0004078 align 2**12
         filesz 0x000000a4 memsz 0x000001e0 flags rw-
    LOAD off    0x000001a4 vaddr 0xe00021a4 paddr 0xf000411c align 2**12
         filesz 0x00000000 memsz 0x00008000 flags rw-
    LOAD off    0x00000000 vaddr 0xf0079000 paddr 0xf0079000 align 2**12
         filesz 0x00000000 memsz 0x00007000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name                    Size      VMA       LMA       File off  Algn  Flags
  0 .manifest               00000400  f0000000  f0000000  00001000  2**3  CONTENTS, ALLOC, LOAD, DATA
  1 .vectors                00000080  f0000400  f0000400  00001400  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .crt                    000000c6  f0000480  f0000480  00001480  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array             00000000  f0000548  f0000548  00006068  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .text                   00002740  f0000548  f0000548  00001548  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .shutdown               00000000  f0002c88  f0002c88  00006068  2**2  CONTENTS
  6 .rodata                 000013f0  f0002c88  f0002c88  00003c88  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .static_critical        00001fc4  e0000000  e0000000  00001000  2**2  ALLOC
  8 .data                   000000a4  e0001fc4  f0004078  00005fc4  2**2  CONTENTS, ALLOC, LOAD, DATA
  9 .bss                    0000013c  e0002068  f000411c  00006068  2**2  ALLOC
 10 .freertos.heap          00008000  e00021a4  f000411c  000061a4  2**2  ALLOC
 11 .non_volatile_scratch   00005000  f007b000  f007b000  00007000  2**11  ALLOC
 12 .non_volatile_counter_0 00000800  f007a800  f007a800  00007000  2**11  ALLOC
 13 .non_volatile_counter_1 00000800  f007a000  f007a000  00007000  2**11  ALLOC
 14 .non_volatile_counter_2 00000800  f0079800  f0079800  00007000  2**11  ALLOC
 15 .non_volatile_counter_3 00000800  f0079000  f0079000  00007000  2**11  ALLOC
 16 .logs.fields            000002bc  00010000  00010000  00006068  2**2  CONTENTS, READONLY
 17 .riscv.attributes       00000026  00000000  00000000  00006324  2**0  CONTENTS, READONLY
 18 .debug_info             0000c05f  00000000  00000000  0000634a  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev           00002b77  00000000  00000000  000123a9  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges          00000088  00000000  00000000  00014f20  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line             00008c7f  00000000  00000000  00014fa8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc              0000764e  00000000  00000000  0001dc27  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges           00000b50  00000000  00000000  00025275  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str              000043e2  00000000  00000000  00025dc5  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame            000011f0  00000000  00000000  0002a1a8  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
f0000000 l    d  .manifest      00000000 .manifest
f0000400 l    d  .vectors       00000000 .vectors
f0000480 l    d  .crt   00000000 .crt
f0000548 l    d  .init_array    00000000 .init_array
f0000548 l    d  .text  00000000 .text
f0002c88 l    d  .shutdown      00000000 .shutdown
f0002c88 l    d  .rodata        00000000 .rodata
e0000000 l    d  .static_critical       00000000 .static_critical
e0001fc4 l    d  .data  00000000 .data
e0002068 l    d  .bss   00000000 .bss
e00021a4 l    d  .freertos.heap 00000000 .freertos.heap
f007b000 l    d  .non_volatile_scratch  00000000 .non_volatile_scratch
f007a800 l    d  .non_volatile_counter_0        00000000 .non_volatile_counter_0
f007a000 l    d  .non_volatile_counter_1        00000000 .non_volatile_counter_1
f0079800 l    d  .non_volatile_counter_2        00000000 .non_volatile_counter_2
f0079000 l    d  .non_volatile_counter_3        00000000 .non_volatile_counter_3
00010000 l    d  .logs.fields   00000000 .logs.fields
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    df *ABS*  00000000 manifest_def.c
f0000000 l     O .manifest      00000380 kManifest_
00000000 l       .debug_str     00000000 
00001aaf l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00001adc l       .debug_str     00000000 
00001c87 l       .debug_str     00000000 
00001c7e l       .debug_str     00000000 
00001ae7 l       .debug_str     00000000 
00001b95 l       .debug_str     00000000 
00001bc4 l       .debug_str     00000000 
00001bcc l       .debug_str     00000000 
00001be0 l       .debug_str     00000000 
000004f2 l       .debug_str     00000000 
00001beb l       .debug_str     00000000 
00001bf9 l       .debug_str     00000000 
00001c07 l       .debug_str     00000000 
00001c18 l       .debug_str     00000000 
00001c29 l       .debug_str     00000000 
00001c4e l       .debug_str     00000000 
00001c5e l       .debug_str     00000000 
00001c69 l       .debug_str     00000000 
00001c72 l       .debug_str     00000000 
00001b06 l       .debug_str     00000000 
00001af1 l       .debug_str     00000000 
000020f4 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00001ba7 l       .debug_str     00000000 
00001b8c l       .debug_str     00000000 
00001b1d l       .debug_str     00000000 
00001b35 l       .debug_str     00000000 
00001b55 l       .debug_str     00000000 
00001b69 l       .debug_str     00000000 
00001b7b l       .debug_str     00000000 
00001b3f l       .debug_str     00000000 
00001b2b l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000004f9 l       .debug_str     00000000 
00001c37 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
00001c92 l       .debug_str     00000000 
00000560 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_start.o
f0000400 l       .vectors       00000000 
f0000400 l       .vectors       00000000 
f0000480 l       .crt   00000000 
f0000480 l       .crt   00000000 
f00004e4 l       .crt   00000000 init_array_loop_end
f00004d8 l       .crt   00000000 init_array_loop
f00004d8 l       .crt   00000000 
f00004e4 l       .crt   00000000 
00004049 l       .debug_info    00000000 
00000dfa l       .debug_abbrev  00000000 
f0000480 l       .vectors       00000000 
f00004e8 l       .crt   00000000 
000002e0 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 crt.o
f00004e8 l       .crt   00000000 
f00004e8 l       .crt   00000000 
f000050a l       .crt   00000000 
f000050c l       .crt   00000000 
f000050c l       .crt   00000000 
0000458f l       .debug_info    00000000 
00000ef0 l       .debug_abbrev  00000000 
f0000546 l       .crt   00000000 
00000000 l    df *ABS*  00000000 freertos_port.o
f0000548 l       .text  00000000 
f0000548 l       .text  00000000 
f0000598 l       .text  00000000 
f000059c l       .text  00000000 
f000059c l       .text  00000000 
000035d3 l       .debug_info    00000000 
00000ab4 l       .debug_abbrev  00000000 
f00005c0 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.o
f00005c0 l     F .text  00000026 compute_mepc_on_synchronous_irq
f00005c0 l       .text  00000000 
f00005c0 l       .text  00000000 
f00005e4 l       .text  00000000 
f00005e8 l     F .text  0000001e save_current_sp_to_tcb
f00005e8 l       .text  00000000 
f00005e8 l       .text  00000000 
f0000604 l       .text  00000000 
f0000608 l       .text  00000000 
f0000608 l       .text  00000000 
f000064a l       .text  00000000 
f000064c l       .text  00000000 
f000064e l       .text  00000000 
f0000650 l       .text  00000000 
f0000654 l       .text  00000000 
f0000658 l       .text  00000000 
f0000658 l       .text  00000000 
f00006a0 l       .text  00000000 
f00006a2 l       .text  00000000 
f00006a6 l       .text  00000000 
f00006ac l       .text  00000000 
f00006ac l       .text  00000000 
f00006f4 l       .text  00000000 
f00006f6 l       .text  00000000 
f00006fa l       .text  00000000 
f0000700 l       .text  00000000 
f0000700 l       .text  00000000 
f0000748 l       .text  00000000 
f000074a l       .text  00000000 
f000074e l       .text  00000000 
f0000754 l       .text  00000000 
f0000754 l       .text  00000000 
f000079c l       .text  00000000 
f000079e l       .text  00000000 
f00007a2 l       .text  00000000 
f00007a8 l       .text  00000000 
f00007a8 l       .text  00000000 
0000418e l       .debug_info    00000000 
00000e19 l       .debug_abbrev  00000000 
f0000810 l       .text  00000000 
00000000 l    df *ABS*  00000000 hmac_smoketest.c
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000812 l       .text  00000000 
f0000812 l       .text  00000000 
f0000818 l       .text  00000000 
f0000822 l       .text  00000000 
00010000 l     O .logs.fields   00000014 test_main.kLogFields
f0000824 l       .text  00000000 
f0000832 l       .text  00000000 
f0000832 l       .text  00000000 
f0000834 l       .text  00000000 
f0000834 l       .text  00000000 
f000084a l       .text  00000000 
f000084a l       .text  00000000 
f000084e l       .text  00000000 
f000084e l       .text  00000000 
f0000858 l       .text  00000000 
f000085a l       .text  00000000 
f000085c l       .text  00000000 
f000085c l       .text  00000000 
f000085e l       .text  00000000 
00010064 l     O .logs.fields   00000014 test_setup.kLogFields
f000085e l       .text  00000000 
f000086e l       .text  00000000 
f000086e l       .text  00000000 
f0000870 l       .text  00000000 
f0000888 l       .text  00000000 
f0000888 l       .text  00000000 
f000088e l       .text  00000000 
f0000892 l       .text  00000000 
f0000892 l       .text  00000000 
00010014 l     O .logs.fields   00000014 test_main.kLogFields.2
f0000894 l       .text  00000000 
f00008a2 l       .text  00000000 
f0002ef8 l     O .rodata        00000020 kExpectedShaDigest
f00008a2 l       .text  00000000 
f000099e l     F .text  000000fc run_test
f00008b2 l       .text  00000000 
00010028 l     O .logs.fields   00000014 test_main.kLogFields.5
f00008b2 l       .text  00000000 
f00008c0 l       .text  00000000 
f00008c0 l       .text  00000000 
f00008c8 l       .text  00000000 
0001003c l     O .logs.fields   00000014 test_main.kLogFields.8
f00008c8 l       .text  00000000 
f00008d6 l       .text  00000000 
e0001fc4 l     O .data  00000020 kHmacKey
f00008d6 l       .text  00000000 
f0002f40 l     O .rodata        00000020 kExpectedHmacDigest
f00008ea l       .text  00000000 
00010050 l     O .logs.fields   00000014 test_main.kLogFields.11
f00008ea l       .text  00000000 
f00008f8 l       .text  00000000 
f00008f8 l       .text  00000000 
f00008fa l       .text  00000000 
f00008fa l       .text  00000000 
f0000910 l       .text  00000000 
f0000910 l       .text  00000000 
f0000920 l       .text  00000000 
f0000920 l       .text  00000000 
f0000936 l       .text  00000000 
f0000936 l       .text  00000000 
f000093e l       .text  00000000 
f000093e l       .text  00000000 
f0000954 l       .text  00000000 
f0000954 l       .text  00000000 
f0000968 l       .text  00000000 
f0000968 l       .text  00000000 
f000097e l       .text  00000000 
f000097e l       .text  00000000 
f0000992 l       .text  00000000 
f0000992 l       .text  00000000 
f000099e l       .text  00000000 
f000099e l       .text  00000000 
f000099e l       .text  00000000 
f000099e l       .text  00000000 
f000099e l       .text  00000000 
f00009a0 l       .text  00000000 
f00009aa l       .text  00000000 
f00009ac l       .text  00000000 
f00009ae l       .text  00000000 
f00009b6 l       .text  00000000 
f00009b6 l       .text  00000000 
f00009b8 l       .text  00000000 
f00009b8 l       .text  00000000 
f00009c0 l       .text  00000000 
f00009c2 l       .text  00000000 
f00009c4 l       .text  00000000 
f00009c4 l       .text  00000000 
f00009c8 l       .text  00000000 
f00009ca l       .text  00000000 
0001008c l     O .logs.fields   00000014 test_start.kLogFields.16
f00009ca l       .text  00000000 
f00009d4 l       .text  00000000 
f00009d4 l       .text  00000000 
f00009d6 l       .text  00000000 
f00009dc l       .text  00000000 
f00009de l       .text  00000000 
f00009e0 l       .text  00000000 
f00009e0 l       .text  00000000 
f00009e4 l       .text  00000000 
f00009e6 l       .text  00000000 
00010078 l     O .logs.fields   00000014 test_start.kLogFields
f00009e6 l       .text  00000000 
f00009ee l       .text  00000000 
f00009ee l       .text  00000000 
f00009f6 l       .text  00000000 
f00009f8 l       .text  00000000 
f00009f8 l       .text  00000000 
f0000a02 l       .text  00000000 
f0000a02 l       .text  00000000 
f0000a0a l       .text  00000000 
f0000a0a l       .text  00000000 
f0000a1a l       .text  00000000 
f0000a24 l       .text  00000000 
f0002e68 l     O .rodata        0000008e kData
f0000a24 l       .text  00000000 
f0000a34 l       .text  00000000 
f0000a34 l       .text  00000000 
f0000a38 l       .text  00000000 
f0000a38 l       .text  00000000 
f0000a42 l       .text  00000000 
f0000a42 l       .text  00000000 
f0000a48 l       .text  00000000 
f0000a4a l       .text  00000000 
f0000a4a l       .text  00000000 
f0000a4c l       .text  00000000 
f0000a4c l       .text  00000000 
f0000a50 l       .text  00000000 
f0000a52 l       .text  00000000 
000100a0 l     O .logs.fields   00000014 run_hmac.kLogFields
f0000a52 l       .text  00000000 
f0000a62 l       .text  00000000 
f0000a62 l       .text  00000000 
f0000a64 l       .text  00000000 
f0000a7c l       .text  00000000 
f0000a7c l       .text  00000000 
f0000a82 l       .text  00000000 
f0000a86 l       .text  00000000 
f0000a86 l       .text  00000000 
f0000a8c l       .text  00000000 
f0000a8c l       .text  00000000 
f0000a90 l       .text  00000000 
f0000a92 l       .text  00000000 
f0000a9a l       .text  00000000 
f0000a9a l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000002a l       .debug_loc     00000000 
00000066 l       .debug_loc     00000000 
00000097 l       .debug_loc     00000000 
000000f4 l       .debug_loc     00000000 
00000125 l       .debug_loc     00000000 
0000018d l       .debug_loc     00000000 
000001ff l       .debug_loc     00000000 
00000225 l       .debug_loc     00000000 
0000024b l       .debug_loc     00000000 
00000271 l       .debug_loc     00000000 
00000297 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000030 l       .debug_ranges  00000000 
000000a4 l       .debug_str     00000000 
000000f4 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
000000cd l       .debug_str     00000000 
000000de l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
00000107 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
0000019f l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
00002b74 l       .debug_str     00000000 
00000187 l       .debug_str     00000000 
0000018d l       .debug_str     00000000 
00000165 l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
00000134 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
000001ac l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
0000021c l       .debug_str     00000000 
00000b58 l       .debug_str     00000000 
00000b70 l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
000001f2 l       .debug_str     00000000 
000001c3 l       .debug_str     00000000 
000001d9 l       .debug_str     00000000 
00000248 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000285 l       .debug_str     00000000 
00000275 l       .debug_str     00000000 
0000027e l       .debug_str     00000000 
00000297 l       .debug_str     00000000 
000002a0 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002eb l       .debug_str     00000000 
000002fa l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000fee l       .debug_str     00000000 
00000322 l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000350 l       .debug_str     00000000 
00000362 l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000385 l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000397 l       .debug_str     00000000 
000003ad l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
000003ea l       .debug_str     00000000 
000003e1 l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
00000417 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
0000043c l       .debug_str     00000000 
00000552 l       .debug_str     00000000 
000020f4 l       .debug_str     00000000 
00002d23 l       .debug_str     00000000 
00000457 l       .debug_str     00000000 
0000055b l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
00000018 l       .debug_ranges  00000000 
0000044c l       .debug_str     00000000 
0000045b l       .debug_str     00000000 
00000464 l       .debug_str     00000000 
0000047d l       .debug_str     00000000 
00000498 l       .debug_str     00000000 
000004b4 l       .debug_str     00000000 
000004d5 l       .debug_str     00000000 
000004f9 l       .debug_str     00000000 
00000510 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
f000099e l       .text  00000000 
f0000a9a l       .text  00000000 
00000000 l    df *ABS*  00000000 hmac_testutils.c
f0000a9a l       .text  00000000 
f0000a9a l       .text  00000000 
f0000a9a l       .text  00000000 
f0000a9c l       .text  00000000 
f0000aa8 l       .text  00000000 
f0000aac l       .text  00000000 
f0000aac l       .text  00000000 
f0000ab0 l       .text  00000000 
f0000ab0 l       .text  00000000 
f0000ab8 l       .text  00000000 
f0000aba l       .text  00000000 
f0000aba l       .text  00000000 
f0000abc l       .text  00000000 
f0000abc l       .text  00000000 
f0000ac0 l       .text  00000000 
f0000ac2 l       .text  00000000 
000100b4 l     O .logs.fields   00000014 hmac_testutils_check_message_length.kLogFields
f0000ac2 l       .text  00000000 
f0000ad2 l       .text  00000000 
f0000ad2 l       .text  00000000 
f0000ad4 l       .text  00000000 
f0000ad4 l       .text  00000000 
f0000aec l       .text  00000000 
f0000aec l       .text  00000000 
f0000af2 l       .text  00000000 
f0000af6 l       .text  00000000 
f0000af6 l       .text  00000000 
f0000af8 l       .text  00000000 
f0000afa l       .text  00000000 
f0000b04 l       .text  00000000 
f0000b06 l       .text  00000000 
f0000b0a l       .text  00000000 
f0000b0c l       .text  00000000 
000100c8 l     O .logs.fields   00000014 hmac_testutils_check_message_length.kLogFields.2
f0000b0c l       .text  00000000 
f0000b22 l       .text  00000000 
f0000b22 l       .text  00000000 
f0000b24 l       .text  00000000 
f0000b24 l       .text  00000000 
f0000b42 l       .text  00000000 
f0000b42 l       .text  00000000 
f0000b48 l       .text  00000000 
f0000b4c l       .text  00000000 
f0000b4c l       .text  00000000 
f0000b50 l       .text  00000000 
f0000b52 l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b5e l       .text  00000000 
f0000b78 l       .text  00000000 
f0000b78 l       .text  00000000 
f0000b80 l       .text  00000000 
f0000b80 l       .text  00000000 
f0000b8a l       .text  00000000 
f0000b8a l       .text  00000000 
f0000b94 l       .text  00000000 
f0000ba0 l       .text  00000000 
f0000ba2 l       .text  00000000 
f0000ba2 l       .text  00000000 
f0000bb0 l       .text  00000000 
f0000bb0 l       .text  00000000 
f0000bb8 l       .text  00000000 
f0000bc0 l       .text  00000000 
f0000bc0 l       .text  00000000 
f0000bca l       .text  00000000 
f0000bcc l       .text  00000000 
f0000bce l       .text  00000000 
f0000bce l       .text  00000000 
f0000bde l       .text  00000000 
f0000bde l       .text  00000000 
f0000be6 l       .text  00000000 
f0000bea l       .text  00000000 
f0000bec l       .text  00000000 
f0000bf0 l       .text  00000000 
000100dc l     O .logs.fields   00000014 hmac_testutils_fifo_empty_polled.kLogFields
00010140 l     O .logs.fields   00000014 check_fifo_empty.kLogFields
f0000c1c l       .text  00000000 
f0000c1c l       .text  00000000 
f0000c22 l       .text  00000000 
f0000c24 l       .text  00000000 
f0000c26 l       .text  00000000 
f0000c26 l       .text  00000000 
f0000c2a l       .text  00000000 
f0000c34 l       .text  00000000 
f0000c34 l       .text  00000000 
f0000c36 l       .text  00000000 
f0000c48 l       .text  00000000 
f0000c48 l       .text  00000000 
f0000c4e l       .text  00000000 
f0000c4e l       .text  00000000 
f0000c50 l       .text  00000000 
f0000c50 l       .text  00000000 
f0000c52 l       .text  00000000 
f0000c52 l       .text  00000000 
f0000c62 l       .text  00000000 
f0000c62 l       .text  00000000 
f0000c64 l       .text  00000000 
f0000c6a l       .text  00000000 
f0000c6a l       .text  00000000 
f0000c6c l       .text  00000000 
f0000c6c l       .text  00000000 
f0000c70 l       .text  00000000 
f0000c70 l       .text  00000000 
f0000c7e l       .text  00000000 
f0000c80 l       .text  00000000 
f0000c8e l       .text  00000000 
f0000c9a l       .text  00000000 
f0000c9e l       .text  00000000 
f0000cac l       .text  00000000 
f0000cac l       .text  00000000 
f0000cae l       .text  00000000 
f0000cae l       .text  00000000 
f0000cc4 l       .text  00000000 
f0000cc4 l       .text  00000000 
f0000cca l       .text  00000000 
f0000cca l       .text  00000000 
f0000ccc l       .text  00000000 
f0000ccc l       .text  00000000 
f0000cda l       .text  00000000 
f0000cea l       .text  00000000 
f0000cea l       .text  00000000 
f0000cea l       .text  00000000 
f0000cea l       .text  00000000 
f0000cea l       .text  00000000 
f0000cec l       .text  00000000 
f0000d06 l       .text  00000000 
f0000d06 l       .text  00000000 
f0000d0e l       .text  00000000 
f0000d0e l       .text  00000000 
f0000d14 l       .text  00000000 
f0000d14 l       .text  00000000 
f0000d16 l       .text  00000000 
f0000d20 l       .text  00000000 
f0000d2c l       .text  00000000 
f0000d30 l       .text  00000000 
f0000d30 l       .text  00000000 
f0000d40 l       .text  00000000 
f0000d40 l       .text  00000000 
f0000d48 l       .text  00000000 
f0000d50 l       .text  00000000 
f0000d50 l       .text  00000000 
f0000d5a l       .text  00000000 
f0000d5c l       .text  00000000 
f0000d5e l       .text  00000000 
f0000d5e l       .text  00000000 
f0000d6e l       .text  00000000 
f0000d6e l       .text  00000000 
f0000d76 l       .text  00000000 
f0000d7a l       .text  00000000 
f0000d7c l       .text  00000000 
f0000d80 l       .text  00000000 
f0000d82 l       .text  00000000 
000100f0 l     O .logs.fields   00000014 hmac_testutils_finish_polled.kLogFields
00010154 l     O .logs.fields   00000014 check_finished.kLogFields
f0000db0 l       .text  00000000 
f0000db0 l       .text  00000000 
f0000db6 l       .text  00000000 
f0000db6 l       .text  00000000 
f0000dba l       .text  00000000 
f0000dbc l       .text  00000000 
f0000dbc l       .text  00000000 
f0000dbe l       .text  00000000 
f0000dc2 l       .text  00000000 
f0000dcc l       .text  00000000 
f0000dcc l       .text  00000000 
f0000dce l       .text  00000000 
f0000de0 l       .text  00000000 
f0000de0 l       .text  00000000 
f0000de6 l       .text  00000000 
f0000de6 l       .text  00000000 
f0000df6 l       .text  00000000 
f0000df6 l       .text  00000000 
f0000df8 l       .text  00000000 
f0000dfe l       .text  00000000 
f0000dfe l       .text  00000000 
f0000e00 l       .text  00000000 
f0000e00 l       .text  00000000 
f0000e04 l       .text  00000000 
f0000e04 l       .text  00000000 
f0000e12 l       .text  00000000 
f0000e14 l       .text  00000000 
f0000e22 l       .text  00000000 
f0000e2e l       .text  00000000 
f0000e32 l       .text  00000000 
f0000e40 l       .text  00000000 
f0000e40 l       .text  00000000 
f0000e42 l       .text  00000000 
f0000e42 l       .text  00000000 
f0000e58 l       .text  00000000 
f0000e58 l       .text  00000000 
f0000e5e l       .text  00000000 
f0000e5e l       .text  00000000 
f0000e60 l       .text  00000000 
f0000e60 l       .text  00000000 
f0000e6c l       .text  00000000 
f0000e6e l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e80 l       .text  00000000 
f0000e98 l       .text  00000000 
f0000e9a l       .text  00000000 
f0000e9a l       .text  00000000 
f0000ea0 l       .text  00000000 
f0000ea0 l       .text  00000000 
00010118 l     O .logs.fields   00000014 hmac_testutils_finish_and_check_polled.kLogFields.8
00010104 l     O .logs.fields   00000014 hmac_testutils_finish_and_check_polled.kLogFields
f0000ed4 l       .text  00000000 
f0000ed4 l       .text  00000000 
f0000eda l       .text  00000000 
f0000ede l       .text  00000000 
f0000ee2 l       .text  00000000 
f0000ee8 l       .text  00000000 
f0000eec l       .text  00000000 
f0000ef4 l       .text  00000000 
f0000ef4 l       .text  00000000 
f0000f04 l       .text  00000000 
f0000f04 l       .text  00000000 
f0000f06 l       .text  00000000 
f0000f06 l       .text  00000000 
f0000f16 l       .text  00000000 
f0000f16 l       .text  00000000 
f0000f34 l       .text  00000000 
f0000f34 l       .text  00000000 
f0000f36 l       .text  00000000 
f0000f3c l       .text  00000000 
f0000f40 l       .text  00000000 
f0000f40 l       .text  00000000 
f0000f44 l       .text  00000000 
f0000f4a l       .text  00000000 
f0000f4e l       .text  00000000 
f0000f4e l       .text  00000000 
f0000f6a l       .text  00000000 
f0000f6a l       .text  00000000 
f0000f6a l       .text  00000000 
f0000f6a l       .text  00000000 
f0000f6a l       .text  00000000 
f0000f6c l       .text  00000000 
f0000f6c l       .text  00000000 
f0000f80 l       .text  00000000 
f0000f80 l       .text  00000000 
f0000f82 l       .text  00000000 
f0000f84 l       .text  00000000 
f0000f86 l       .text  00000000 
f0000f88 l       .text  00000000 
0001012c l     O .logs.fields   00000014 hmac_testutils_push_message.kLogFields
f0000fb0 l       .text  00000000 
f0000fb0 l       .text  00000000 
f0000fb4 l       .text  00000000 
f0000fb4 l       .text  00000000 
f0000fbc l       .text  00000000 
f0000fbe l       .text  00000000 
f0000fbe l       .text  00000000 
f0000fc2 l       .text  00000000 
f0000fc6 l       .text  00000000 
f0000fd0 l       .text  00000000 
f0000fd0 l       .text  00000000 
f0000fd2 l       .text  00000000 
f0000fd2 l       .text  00000000 
f0000fe4 l       .text  00000000 
f0000fe4 l       .text  00000000 
f0000fea l       .text  00000000 
f0000fea l       .text  00000000 
f0000ff2 l       .text  00000000 
f0000ff4 l       .text  00000000 
f0000ff8 l       .text  00000000 
f0000ff8 l       .text  00000000 
f0000ffa l       .text  00000000 
f0000ffa l       .text  00000000 
f0000ffc l       .text  00000000 
f0000ffc l       .text  00000000 
f0001000 l       .text  00000000 
f0001000 l       .text  00000000 
f0001004 l       .text  00000000 
f0001004 l       .text  00000000 
f000101c l       .text  00000000 
f000101c l       .text  00000000 
000002c8 l       .debug_loc     00000000 
000002e3 l       .debug_loc     00000000 
00000334 l       .debug_loc     00000000 
00000391 l       .debug_loc     00000000 
000003c2 l       .debug_loc     00000000 
000003f3 l       .debug_loc     00000000 
0000040e l       .debug_loc     00000000 
00000464 l       .debug_loc     00000000 
00000480 l       .debug_loc     00000000 
000004a7 l       .debug_loc     00000000 
000004ce l       .debug_loc     00000000 
000004f5 l       .debug_loc     00000000 
0000051b l       .debug_loc     00000000 
00000542 l       .debug_loc     00000000 
00000569 l       .debug_loc     00000000 
00000585 l       .debug_loc     00000000 
000005b6 l       .debug_loc     00000000 
000005e7 l       .debug_loc     00000000 
00000602 l       .debug_loc     00000000 
0000066e l       .debug_loc     00000000 
0000068a l       .debug_loc     00000000 
000006b1 l       .debug_loc     00000000 
000006d8 l       .debug_loc     00000000 
000006fe l       .debug_loc     00000000 
00000725 l       .debug_loc     00000000 
0000074c l       .debug_loc     00000000 
00000768 l       .debug_loc     00000000 
00000783 l       .debug_loc     00000000 
000007a9 l       .debug_loc     00000000 
000007cf l       .debug_loc     00000000 
00000800 l       .debug_loc     00000000 
00000831 l       .debug_loc     00000000 
0000084c l       .debug_loc     00000000 
00000873 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000056b l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000048 l       .debug_ranges  00000000 
00000592 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
0000059b l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000397 l       .debug_str     00000000 
000005ab l       .debug_str     00000000 
00000285 l       .debug_str     00000000 
00000275 l       .debug_str     00000000 
0000027e l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
000005c1 l       .debug_str     00000000 
000004d5 l       .debug_str     00000000 
00000107 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
0000070f l       .debug_str     00000000 
00000718 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
0000019f l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
00002b74 l       .debug_str     00000000 
00000187 l       .debug_str     00000000 
0000018d l       .debug_str     00000000 
00000165 l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
00000134 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
000004b4 l       .debug_str     00000000 
00000722 l       .debug_str     00000000 
000006f2 l       .debug_str     00000000 
000006c4 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
0000072b l       .debug_str     00000000 
00000734 l       .debug_str     00000000 
00000371 l       .debug_str     00000000 
00000498 l       .debug_str     00000000 
000020f4 l       .debug_str     00000000 
00002d23 l       .debug_str     00000000 
00000739 l       .debug_str     00000000 
0000073c l       .debug_str     00000000 
00002e58 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002eb l       .debug_str     00000000 
000002fa l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000fee l       .debug_str     00000000 
00000322 l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000350 l       .debug_str     00000000 
00000362 l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000385 l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000004f9 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
000003e1 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
00000417 l       .debug_str     00000000 
0000043c l       .debug_str     00000000 
000005fd l       .debug_str     00000000 
00000d5e l       .debug_str     00000000 
0000061c l       .debug_str     00000000 
0000060f l       .debug_str     00000000 
00002984 l       .debug_str     00000000 
00000492 l       .debug_str     00000000 
0000062b l       .debug_str     00000000 
0000063c l       .debug_str     00000000 
00000649 l       .debug_str     00000000 
00000654 l       .debug_str     00000000 
0000065e l       .debug_str     00000000 
0000066f l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
000003ea l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
0000067a l       .debug_str     00000000 
00000614 l       .debug_str     00000000 
0000068d l       .debug_str     00000000 
00000699 l       .debug_str     00000000 
000006b5 l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
000006df l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
00000050 l       .debug_frame   00000000 
f0000b5c l       .text  00000000 
f0000cea l       .text  00000000 
f0000e7e l       .text  00000000 
f0000f6a l       .text  00000000 
f000101c l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_hmac_autogen.c
f000101c l       .text  00000000 
f000101c l       .text  00000000 
f000101c l       .text  00000000 
f000101c l       .text  00000000 
f000101e l       .text  00000000 
f0001020 l       .text  00000000 
f0001024 l       .text  00000000 
f0001026 l       .text  00000000 
f0001028 l       .text  00000000 
f000102a l       .text  00000000 
f000102a l       .text  00000000 
0000088e l       .debug_loc     00000000 
000008a9 l       .debug_loc     00000000 
000008c4 l       .debug_loc     00000000 
000008df l       .debug_loc     00000000 
000008fb l       .debug_loc     00000000 
00000917 l       .debug_loc     00000000 
00000932 l       .debug_loc     00000000 
0000094d l       .debug_loc     00000000 
00000968 l       .debug_loc     00000000 
00000983 l       .debug_loc     00000000 
0000099e l       .debug_loc     00000000 
000009b9 l       .debug_loc     00000000 
000009d4 l       .debug_loc     00000000 
000009ef l       .debug_loc     00000000 
00000a15 l       .debug_loc     00000000 
00000a30 l       .debug_loc     00000000 
00000a4b l       .debug_loc     00000000 
00000a69 l       .debug_loc     00000000 
00000a90 l       .debug_loc     00000000 
00000aab l       .debug_loc     00000000 
00000ac6 l       .debug_loc     00000000 
00000ae1 l       .debug_loc     00000000 
00000aff l       .debug_loc     00000000 
00000b26 l       .debug_loc     00000000 
00000b41 l       .debug_loc     00000000 
00000b5c l       .debug_loc     00000000 
00000b77 l       .debug_loc     00000000 
00000b92 l       .debug_loc     00000000 
00000bb8 l       .debug_loc     00000000 
00000bd3 l       .debug_loc     00000000 
00000bee l       .debug_loc     00000000 
00000c14 l       .debug_loc     00000000 
00000c34 l       .debug_loc     00000000 
00000c5a l       .debug_loc     00000000 
00000c78 l       .debug_loc     00000000 
00000c93 l       .debug_loc     00000000 
00000cb9 l       .debug_loc     00000000 
00000cdf l       .debug_loc     00000000 
00000cfa l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000747 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000078 l       .debug_ranges  00000000 
00000774 l       .debug_str     00000000 
000007ae l       .debug_str     00000000 
000007a1 l       .debug_str     00000000 
0000077e l       .debug_str     00000000 
0000078f l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002eb l       .debug_str     00000000 
000002fa l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
000007d5 l       .debug_str     00000000 
000007bd l       .debug_str     00000000 
00000820 l       .debug_str     00000000 
000007e4 l       .debug_str     00000000 
000007f8 l       .debug_str     00000000 
0000080d l       .debug_str     00000000 
00000852 l       .debug_str     00000000 
0000082d l       .debug_str     00000000 
00000840 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
0000085d l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00001ea4 l       .debug_str     00000000 
00000b3f l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
00000871 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00000921 l       .debug_str     00000000 
000007de l       .debug_str     00000000 
00000a39 l       .debug_str     00000000 
00000a43 l       .debug_str     00000000 
00000936 l       .debug_str     00000000 
00000829 l       .debug_str     00000000 
00000e16 l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
0000094c l       .debug_str     00000000 
00000a61 l       .debug_str     00000000 
0000088e l       .debug_str     00000000 
000008a2 l       .debug_str     00000000 
000008ab l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
000008b5 l       .debug_str     00000000 
00000963 l       .debug_str     00000000 
00000970 l       .debug_str     00000000 
00000a88 l       .debug_str     00000000 
00001d5a l       .debug_str     00000000 
0000097b l       .debug_str     00000000 
000008cc l       .debug_str     00000000 
000008a5 l       .debug_str     00000000 
000008f9 l       .debug_str     00000000 
000008e8 l       .debug_str     00000000 
000008e3 l       .debug_str     00000000 
0000090c l       .debug_str     00000000 
00000998 l       .debug_str     00000000 
000009b1 l       .debug_str     00000000 
00001a7e l       .debug_str     00000000 
00000a97 l       .debug_str     00000000 
000009c4 l       .debug_str     00000000 
00001b86 l       .debug_str     00000000 
00000ab2 l       .debug_str     00000000 
00000ac2 l       .debug_str     00000000 
000009dd l       .debug_str     00000000 
00000acd l       .debug_str     00000000 
000009f6 l       .debug_str     00000000 
00000a0f l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
000003ea l       .debug_str     00000000 
000003e1 l       .debug_str     00000000 
00000a28 l       .debug_str     00000000 
00000a52 l       .debug_str     00000000 
00000a6a l       .debug_str     00000000 
00000aa5 l       .debug_str     00000000 
00000ad8 l       .debug_str     00000000 
00000138 l       .debug_frame   00000000 
f000102a l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_hmac.c
f000102a l       .text  00000000 
f000102a l       .text  00000000 
f000102a l       .text  00000000 
f000102a l       .text  00000000 
f0001032 l       .text  00000000 
f0001038 l       .text  00000000 
f000103c l       .text  00000000 
f000103c l       .text  00000000 
f0001040 l       .text  00000000 
f0001040 l       .text  00000000 
f0001042 l       .text  00000000 
f0001042 l       .text  00000000 
f0001044 l       .text  00000000 
f0001046 l       .text  00000000 
f000104a l       .text  00000000 
f000104a l       .text  00000000 
f000104c l       .text  00000000 
f000104c l       .text  00000000 
f000104e l       .text  00000000 
f0001050 l       .text  00000000 
f0001054 l       .text  00000000 
f0001054 l       .text  00000000 
f0001058 l       .text  00000000 
f000105a l       .text  00000000 
f000105c l       .text  00000000 
f000105c l       .text  00000000 
f000105e l       .text  00000000 
f000105e l       .text  00000000 
f0001060 l       .text  00000000 
f0001060 l       .text  00000000 
f0001064 l       .text  00000000 
f0001064 l       .text  00000000 
f0001066 l       .text  00000000 
f0001066 l       .text  00000000 
f000106a l       .text  00000000 
f000106e l       .text  00000000 
f000106e l       .text  00000000 
f0001070 l       .text  00000000 
f0001070 l       .text  00000000 
f0001072 l       .text  00000000 
f0001072 l       .text  00000000 
f0001074 l       .text  00000000 
f0001074 l       .text  00000000 
f0001076 l       .text  00000000 
f0001076 l       .text  00000000 
f000107a l       .text  00000000 
f000107e l       .text  00000000 
f000107e l       .text  00000000 
f0001082 l       .text  00000000 
f0001082 l       .text  00000000 
f0001084 l       .text  00000000 
f0001084 l       .text  00000000 
f0001088 l       .text  00000000 
f0001088 l       .text  00000000 
f0001090 l       .text  00000000 
f0001090 l       .text  00000000 
f0001092 l       .text  00000000 
f0001092 l       .text  00000000 
f0001094 l       .text  00000000 
f0001094 l       .text  00000000 
f0001096 l       .text  00000000 
f0001096 l       .text  00000000 
f0001098 l       .text  00000000 
f0001098 l       .text  00000000 
f000109c l       .text  00000000 
f000109c l       .text  00000000 
f000109e l       .text  00000000 
f000109e l       .text  00000000 
f00010a2 l       .text  00000000 
f00010a2 l       .text  00000000 
f00010a2 l       .text  00000000 
f00010a2 l       .text  00000000 
f00010a2 l       .text  00000000 
f00010a2 l       .text  00000000 
f00010a4 l       .text  00000000 
f00010a6 l       .text  00000000 
f00010a6 l       .text  00000000 
f00010aa l       .text  00000000 
f00010aa l       .text  00000000 
f00010ac l       .text  00000000 
f00010ac l       .text  00000000 
f00010ae l       .text  00000000 
f00010b0 l       .text  00000000 
f00010b4 l       .text  00000000 
f00010b4 l       .text  00000000 
f00010b6 l       .text  00000000 
f00010b6 l       .text  00000000 
f00010b8 l       .text  00000000 
f00010ba l       .text  00000000 
f00010be l       .text  00000000 
f00010be l       .text  00000000 
f00010c0 l       .text  00000000 
f00010c2 l       .text  00000000 
f00010c6 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010c8 l       .text  00000000 
f00010ca l       .text  00000000 
f00010cc l       .text  00000000 
f00010cc l       .text  00000000 
f00010d0 l       .text  00000000 
f00010d0 l       .text  00000000 
f00010d2 l       .text  00000000 
f00010d2 l       .text  00000000 
f00010d8 l       .text  00000000 
f00010d8 l       .text  00000000 
f00010da l       .text  00000000 
f00010da l       .text  00000000 
f00010dc l       .text  00000000 
f00010dc l       .text  00000000 
f00010de l       .text  00000000 
f00010de l       .text  00000000 
f00010e0 l       .text  00000000 
f00010e0 l       .text  00000000 
f00010e4 l       .text  00000000 
f00010e4 l       .text  00000000 
f00010e6 l       .text  00000000 
f00010e6 l       .text  00000000 
f00010ea l       .text  00000000 
f00010ea l       .text  00000000 
f00010ea l       .text  00000000 
f00010ea l       .text  00000000 
f00010ea l       .text  00000000 
f00010ea l       .text  00000000 
f00010f2 l       .text  00000000 
f00010f8 l       .text  00000000 
f00010f8 l       .text  00000000 
f00010fa l       .text  00000000 
f00010fe l       .text  00000000 
f00010fe l       .text  00000000 
f0001102 l       .text  00000000 
f0001102 l       .text  00000000 
f0001106 l       .text  00000000 
f0001106 l       .text  00000000 
f000110a l       .text  00000000 
f000110e l       .text  00000000 
f0001110 l       .text  00000000 
f0001114 l       .text  00000000 
f0001114 l       .text  00000000 
f0001118 l       .text  00000000 
f000111e l       .text  00000000 
f000111e l       .text  00000000 
f0001120 l       .text  00000000 
f0001122 l       .text  00000000 
f0001122 l       .text  00000000 
f0001126 l       .text  00000000 
f0001126 l       .text  00000000 
f000112a l       .text  00000000 
f000112a l       .text  00000000 
f000112e l       .text  00000000 
f0001134 l       .text  00000000 
f0001134 l       .text  00000000 
f0001136 l       .text  00000000 
f0001138 l       .text  00000000 
f000113a l       .text  00000000 
f000113c l       .text  00000000 
f000113c l       .text  00000000 
f000113e l       .text  00000000 
f0001140 l       .text  00000000 
f0001140 l       .text  00000000 
f0001140 l       .text  00000000 
f0001140 l       .text  00000000 
f0001140 l       .text  00000000 
f0001140 l       .text  00000000 
f0001148 l       .text  00000000 
f000114e l       .text  00000000 
f000114e l       .text  00000000 
f0001150 l       .text  00000000 
f0001150 l       .text  00000000 
f0001152 l       .text  00000000 
f0001152 l       .text  00000000 
f0001154 l       .text  00000000 
f0001154 l       .text  00000000 
f0001156 l       .text  00000000 
f0001156 l       .text  00000000 
f0001158 l       .text  00000000 
f0001158 l       .text  00000000 
f000115a l       .text  00000000 
f000115a l       .text  00000000 
f000115e l       .text  00000000 
f000115e l       .text  00000000 
f000115e l       .text  00000000 
f000115e l       .text  00000000 
f000115e l       .text  00000000 
f000115e l       .text  00000000 
f0001166 l       .text  00000000 
f000116c l       .text  00000000 
f000116e l       .text  00000000 
f000116e l       .text  00000000 
f0001170 l       .text  00000000 
f0001170 l       .text  00000000 
f0001172 l       .text  00000000 
f0001172 l       .text  00000000 
f0001174 l       .text  00000000 
f0001178 l       .text  00000000 
f0001178 l       .text  00000000 
f000117c l       .text  00000000 
f000117c l       .text  00000000 
f000117c l       .text  00000000 
f000117c l       .text  00000000 
f000117c l       .text  00000000 
f000117c l       .text  00000000 
f000117e l       .text  00000000 
f0001180 l       .text  00000000 
f0001180 l       .text  00000000 
f0001182 l       .text  00000000 
f0001182 l       .text  00000000 
f0001184 l       .text  00000000 
f0001184 l       .text  00000000 
f0001188 l       .text  00000000 
f0001188 l       .text  00000000 
f000118a l       .text  00000000 
f000118a l       .text  00000000 
f000118c l       .text  00000000 
f000118c l       .text  00000000 
f000118e l       .text  00000000 
f000118e l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f0001198 l       .text  00000000 
f000119e l       .text  00000000 
f00011a0 l       .text  00000000 
f00011a0 l       .text  00000000 
f00011a2 l       .text  00000000 
f00011a2 l       .text  00000000 
f00011a4 l       .text  00000000 
f00011a4 l       .text  00000000 
f00011a6 l       .text  00000000 
f00011a6 l       .text  00000000 
f00011a8 l       .text  00000000 
f00011a8 l       .text  00000000 
f00011aa l       .text  00000000 
f00011aa l       .text  00000000 
f00011ac l       .text  00000000 
f00011ac l       .text  00000000 
f00011b0 l       .text  00000000 
f00011b0 l       .text  00000000 
f00011b2 l       .text  00000000 
f00011b2 l       .text  00000000 
f00011b6 l       .text  00000000 
f00011b6 l       .text  00000000 
f00011b8 l       .text  00000000 
f00011b8 l       .text  00000000 
f00011c0 l       .text  00000000 
f00011c0 l       .text  00000000 
f00011c2 l       .text  00000000 
f00011c2 l       .text  00000000 
f00011c4 l       .text  00000000 
f00011c6 l       .text  00000000 
f00011c6 l       .text  00000000 
f00011c8 l       .text  00000000 
f00011c8 l       .text  00000000 
f00011ca l       .text  00000000 
f00011cc l       .text  00000000 
f00011d0 l       .text  00000000 
f00011d0 l       .text  00000000 
f00011d2 l       .text  00000000 
f00011d2 l       .text  00000000 
f00011d4 l       .text  00000000 
f00011d4 l       .text  00000000 
f00011d6 l       .text  00000000 
f00011d6 l       .text  00000000 
f00011d8 l       .text  00000000 
f00011d8 l       .text  00000000 
f00011da l       .text  00000000 
f00011da l       .text  00000000 
f00011de l       .text  00000000 
f00011de l       .text  00000000 
00000d15 l       .debug_loc     00000000 
00000d30 l       .debug_loc     00000000 
00000d4b l       .debug_loc     00000000 
00000d71 l       .debug_loc     00000000 
00000d91 l       .debug_loc     00000000 
00000dad l       .debug_loc     00000000 
00000dc9 l       .debug_loc     00000000 
00000df1 l       .debug_loc     00000000 
00000e0d l       .debug_loc     00000000 
00000e28 l       .debug_loc     00000000 
00000e4e l       .debug_loc     00000000 
00000e6b l       .debug_loc     00000000 
00000e91 l       .debug_loc     00000000 
00000eac l       .debug_loc     00000000 
00000ece l       .debug_loc     00000000 
00000ee9 l       .debug_loc     00000000 
00000f0b l       .debug_loc     00000000 
00000f26 l       .debug_loc     00000000 
00000f4c l       .debug_loc     00000000 
00000f9a l       .debug_loc     00000000 
00000fb6 l       .debug_loc     00000000 
00000fd2 l       .debug_loc     00000000 
00000ff4 l       .debug_loc     00000000 
0000100f l       .debug_loc     00000000 
0000102b l       .debug_loc     00000000 
0000104d l       .debug_loc     00000000 
0000106f l       .debug_loc     00000000 
0000108a l       .debug_loc     00000000 
000010ac l       .debug_loc     00000000 
000010c7 l       .debug_loc     00000000 
000010e2 l       .debug_loc     00000000 
000010fd l       .debug_loc     00000000 
00001123 l       .debug_loc     00000000 
00001162 l       .debug_loc     00000000 
0000117d l       .debug_loc     00000000 
00001198 l       .debug_loc     00000000 
000011b3 l       .debug_loc     00000000 
000011ce l       .debug_loc     00000000 
000011e9 l       .debug_loc     00000000 
0000120b l       .debug_loc     00000000 
00001226 l       .debug_loc     00000000 
00001241 l       .debug_loc     00000000 
0000125e l       .debug_loc     00000000 
0000127b l       .debug_loc     00000000 
000012a1 l       .debug_loc     00000000 
000012bc l       .debug_loc     00000000 
000012de l       .debug_loc     00000000 
000012f9 l       .debug_loc     00000000 
00001314 l       .debug_loc     00000000 
0000132f l       .debug_loc     00000000 
0000134b l       .debug_loc     00000000 
00001367 l       .debug_loc     00000000 
00001382 l       .debug_loc     00000000 
000013a4 l       .debug_loc     00000000 
000013bf l       .debug_loc     00000000 
000013fa l       .debug_loc     00000000 
00001415 l       .debug_loc     00000000 
00001449 l       .debug_loc     00000000 
0000146b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000af7 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
000001b0 l       .debug_ranges  00000000 
00000317 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002eb l       .debug_str     00000000 
000002fa l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
000001f2 l       .debug_str     00000000 
000001c3 l       .debug_str     00000000 
000001d9 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000397 l       .debug_str     00000000 
00000b14 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00001ea4 l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
00000871 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00000b1e l       .debug_str     00000000 
00000b45 l       .debug_str     00000000 
00000b4c l       .debug_str     00000000 
00000b53 l       .debug_str     00000000 
00000b6b l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000231 l       .debug_str     00000000 
0000021c l       .debug_str     00000000 
00000b58 l       .debug_str     00000000 
00000b70 l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00000b82 l       .debug_str     00000000 
00000b8a l       .debug_str     00000000 
00001a7e l       .debug_str     00000000 
0000085d l       .debug_str     00000000 
00000b3f l       .debug_str     00000000 
000008cc l       .debug_str     00000000 
000008a2 l       .debug_str     00000000 
000008a5 l       .debug_str     00000000 
000008f9 l       .debug_str     00000000 
000008e8 l       .debug_str     00000000 
000008e3 l       .debug_str     00000000 
00001d5a l       .debug_str     00000000 
0000090c l       .debug_str     00000000 
000008ab l       .debug_str     00000000 
000008b5 l       .debug_str     00000000 
00000b8e l       .debug_str     00000000 
00000bae l       .debug_str     00000000 
00000464 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
00000457 l       .debug_str     00000000 
00000abe l       .debug_str     00000000 
00000100 l       .debug_ranges  00000000 
00000c56 l       .debug_str     00000000 
000000e0 l       .debug_ranges  00000000 
00000371 l       .debug_str     00000000 
00000150 l       .debug_ranges  00000000 
00000c4a l       .debug_str     00000000 
00000120 l       .debug_ranges  00000000 
00000138 l       .debug_ranges  00000000 
0000047d l       .debug_str     00000000 
00000bbd l       .debug_str     00000000 
000003ea l       .debug_str     00000000 
000003e1 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
00000bc8 l       .debug_str     00000000 
00000bdd l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
000006df l       .debug_str     00000000 
000020f4 l       .debug_str     00000000 
00002d23 l       .debug_str     00000000 
00000c63 l       .debug_str     00000000 
00000c6e l       .debug_str     00000000 
00000c78 l       .debug_str     00000000 
00000168 l       .debug_ranges  00000000 
00002e84 l       .debug_str     00000000 
00000c88 l       .debug_str     00000000 
00002b65 l       .debug_str     00000000 
00000c09 l       .debug_str     00000000 
00000699 l       .debug_str     00000000 
00000c95 l       .debug_str     00000000 
000005e1 l       .debug_str     00000000 
00000ca1 l       .debug_str     00000000 
00000ca9 l       .debug_str     00000000 
00000cb3 l       .debug_str     00000000 
00000510 l       .debug_str     00000000 
00000c1f l       .debug_str     00000000 
0000088e l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
0000027e l       .debug_str     00000000 
00000cbd l       .debug_str     00000000 
00000664 l       .debug_str     00000000 
00000180 l       .debug_ranges  00000000 
00000198 l       .debug_ranges  00000000 
00000c35 l       .debug_str     00000000 
00000cc2 l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000004f9 l       .debug_str     00000000 
00000285 l       .debug_str     00000000 
00000275 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
0000020c l       .debug_frame   00000000 
f00010a2 l       .text  00000000 
f00010ea l       .text  00000000 
f0001140 l       .text  00000000 
f000115e l       .text  00000000 
f000117c l       .text  00000000 
f0001190 l       .text  00000000 
f00011de l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_main.c
f00011de l       .text  00000000 
f00011de l       .text  00000000 
f00011de l       .text  00000000 
f00011e0 l       .text  00000000 
f00011e0 l       .text  00000000 
f00011e2 l       .text  00000000 
f00011ec l       .text  00000000 
f00011ee l       .text  00000000 
f00011f6 l       .text  00000000 
f00011f6 l       .text  00000000 
f0001200 l       .text  00000000 
00010168 l     O .logs.fields   00000014 ottf_machine_ecall_handler.kLogFields
f0001202 l       .text  00000000 
f0001214 l       .text  00000000 
f0001214 l       .text  00000000 
f000122a l       .text  00000000 
f000122a l       .text  00000000 
f0001230 l       .text  00000000 
f0001230 l       .text  00000000 
e0002068 l     O .bss   00000004 uart0
f0001230 l       .text  00000000 
f0001230 l       .text  00000000 
f0001230 l       .text  00000000 
f0001232 l       .text  00000000 
f000123a l       .text  00000000 
f0001240 l       .text  00000000 
f0001244 l       .text  00000000 
f0001244 l       .text  00000000 
f000124e l       .text  00000000 
f000125e l       .text  00000000 
f000135e l     F .text  000000d2 init_uart
f0001260 l       .text  00000000 
f0001262 l       .text  00000000 
f0001262 l       .text  00000000 
f0001266 l       .text  00000000 
f0001268 l       .text  00000000 
0001017c l     O .logs.fields   00000014 _ottf_main.kLogFields
f000126a l       .text  00000000 
f000127a l       .text  00000000 
f000127a l       .text  00000000 
f000127c l       .text  00000000 
f000127c l       .text  00000000 
f0001294 l       .text  00000000 
f0001294 l       .text  00000000 
f000129e l       .text  00000000 
f00012a0 l       .text  00000000 
f00012a2 l       .text  00000000 
f00012a2 l       .text  00000000 
f00012a6 l       .text  00000000 
f00012a8 l       .text  00000000 
00010190 l     O .logs.fields   00000014 _ottf_main.kLogFields.3
f00012a8 l       .text  00000000 
f00012b8 l       .text  00000000 
f00012b8 l       .text  00000000 
f00012ba l       .text  00000000 
f00012ba l       .text  00000000 
f00012d2 l       .text  00000000 
f00012d2 l       .text  00000000 
f00012d8 l       .text  00000000 
f00012da l       .text  00000000 
f00012da l       .text  00000000 
f00012e0 l       .text  00000000 
f00012f0 l       .text  00000000 
f00012f4 l       .text  00000000 
f00012f6 l       .text  00000000 
f0001430 l     F .text  0000008e test_wrapper
f00012f6 l       .text  00000000 
f0001306 l       .text  00000000 
f0001314 l       .text  00000000 
f0001314 l       .text  00000000 
f0001318 l       .text  00000000 
f0001318 l       .text  00000000 
f000131a l       .text  00000000 
f000131e l       .text  00000000 
f000131e l       .text  00000000 
f0001322 l       .text  00000000 
000101a4 l     O .logs.fields   00000014 _ottf_main.kLogFields.7
f0001324 l       .text  00000000 
f0001332 l       .text  00000000 
f0001332 l       .text  00000000 
f0001334 l       .text  00000000 
f0001334 l       .text  00000000 
f000134a l       .text  00000000 
f000134a l       .text  00000000 
f0001350 l       .text  00000000 
f0001352 l       .text  00000000 
f0001352 l       .text  00000000 
f000135e l       .text  00000000 
f000135e l       .text  00000000 
f000135e l       .text  00000000 
f000135e l       .text  00000000 
f000135e l       .text  00000000 
f0001360 l       .text  00000000 
f0001360 l       .text  00000000 
f0001360 l       .text  00000000 
f0001366 l       .text  00000000 
f0001376 l       .text  00000000 
f0001376 l       .text  00000000 
f000137e l       .text  00000000 
f0001380 l       .text  00000000 
f0001380 l       .text  00000000 
f0001382 l       .text  00000000 
f0001382 l       .text  00000000 
f0001384 l       .text  00000000 
f0001386 l       .text  00000000 
000101b8 l     O .logs.fields   00000014 init_uart.kLogFields
f0001386 l       .text  00000000 
f0001396 l       .text  00000000 
f0001396 l       .text  00000000 
f0001398 l       .text  00000000 
f0001398 l       .text  00000000 
f00013ae l       .text  00000000 
f00013ae l       .text  00000000 
f00013b4 l       .text  00000000 
f00013b6 l       .text  00000000 
f00013b6 l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e4 l       .text  00000000 
f00013e6 l       .text  00000000 
f00013e6 l       .text  00000000 
f00013e8 l       .text  00000000 
f00013ea l       .text  00000000 
000101cc l     O .logs.fields   00000014 init_uart.kLogFields.11
f00013ea l       .text  00000000 
f00013fa l       .text  00000000 
f00013fa l       .text  00000000 
f00013fc l       .text  00000000 
f00013fc l       .text  00000000 
f0001412 l       .text  00000000 
f0001412 l       .text  00000000 
f0001418 l       .text  00000000 
f000141a l       .text  00000000 
f000141a l       .text  00000000 
f0001426 l       .text  00000000 
f0001426 l       .text  00000000 
f0001430 l       .text  00000000 
f0001430 l       .text  00000000 
f0001430 l       .text  00000000 
f0001430 l       .text  00000000 
f0001430 l       .text  00000000 
f0001432 l       .text  00000000 
f0001438 l       .text  00000000 
f000143a l       .text  00000000 
f000143e l       .text  00000000 
f0001442 l       .text  00000000 
f0001442 l       .text  00000000 
f0001444 l       .text  00000000 
f0001448 l       .text  00000000 
f0001448 l       .text  00000000 
f000144a l       .text  00000000 
f000144e l       .text  00000000 
f000144e l       .text  00000000 
f000145e l       .text  00000000 
f000145e l       .text  00000000 
f0001468 l       .text  00000000 
f000146a l       .text  00000000 
f0001472 l       .text  00000000 
f0001476 l       .text  00000000 
f0001478 l       .text  00000000 
f000147a l       .text  00000000 
f000147a l       .text  00000000 
f0001484 l       .text  00000000 
f0001486 l       .text  00000000 
000101e0 l     O .logs.fields   00000014 report_test_status.kLogFields
f0001488 l       .text  00000000 
f0001496 l       .text  00000000 
f0001496 l       .text  00000000 
f0001498 l       .text  00000000 
f00014ae l       .text  00000000 
f00014ae l       .text  00000000 
f00014b0 l       .text  00000000 
f00014b0 l       .text  00000000 
f00014b4 l       .text  00000000 
f00014b4 l       .text  00000000 
f00014be l       .text  00000000 
f00014be l       .text  00000000 
00001491 l       .debug_loc     00000000 
000014ac l       .debug_loc     00000000 
000014c7 l       .debug_loc     00000000 
000014e2 l       .debug_loc     00000000 
000014fd l       .debug_loc     00000000 
0000152e l       .debug_loc     00000000 
00001549 l       .debug_loc     00000000 
0000157a l       .debug_loc     00000000 
000015ab l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000cca l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
000001f8 l       .debug_ranges  00000000 
0000104b l       .debug_str     00000000 
00000107 l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
0000019f l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
00002b74 l       .debug_str     00000000 
00000187 l       .debug_str     00000000 
0000018d l       .debug_str     00000000 
00000165 l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
00000134 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
000010b1 l       .debug_str     00000000 
00000d30 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
00000cfb l       .debug_str     00000000 
00000d0a l       .debug_str     00000000 
00000d01 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00000d15 l       .debug_str     00000000 
00000db2 l       .debug_str     00000000 
00000d9f l       .debug_str     00000000 
00000d50 l       .debug_str     00000000 
000020d0 l       .debug_str     00000000 
00000d6b l       .debug_str     00000000 
00000d83 l       .debug_str     00000000 
00000d94 l       .debug_str     00000000 
00000d3d l       .debug_str     00000000 
00000d2c l       .debug_str     00000000 
000010bc l       .debug_str     00000000 
00000fee l       .debug_str     00000000 
00000322 l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000350 l       .debug_str     00000000 
00000362 l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000385 l       .debug_str     00000000 
00000e0f l       .debug_str     00000000 
00000dc7 l       .debug_str     00000000 
00000dd4 l       .debug_str     00000000 
00000de8 l       .debug_str     00000000 
00000df9 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002eb l       .debug_str     00000000 
000002fa l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000e1b l       .debug_str     00000000 
00000852 l       .debug_str     00000000 
0000082d l       .debug_str     00000000 
00000840 l       .debug_str     00000000 
00000e5a l       .debug_str     00000000 
00000e35 l       .debug_str     00000000 
00000e47 l       .debug_str     00000000 
00000e6a l       .debug_str     00000000 
00000e6b l       .debug_str     00000000 
0000017f l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00000e76 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
00000417 l       .debug_str     00000000 
00000e89 l       .debug_str     00000000 
00000e95 l       .debug_str     00000000 
00000ea4 l       .debug_str     00000000 
00001066 l       .debug_str     00000000 
00001076 l       .debug_str     00000000 
00000eb8 l       .debug_str     00000000 
0000108c l       .debug_str     00000000 
00000ec4 l       .debug_str     00000000 
000010a4 l       .debug_str     00000000 
00000ed2 l       .debug_str     00000000 
00000ee3 l       .debug_str     00000000 
00000f00 l       .debug_str     00000000 
00000f0a l       .debug_str     00000000 
00000f24 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00000ef1 l       .debug_str     00000000 
00000f1b l       .debug_str     00000000 
0000043c l       .debug_str     00000000 
00000f32 l       .debug_str     00000000 
00000f48 l       .debug_str     00000000 
00000f5c l       .debug_str     00000000 
000010c6 l       .debug_str     00000000 
000010d3 l       .debug_str     00000000 
0000031b l       .debug_str     00000000 
00000f70 l       .debug_str     00000000 
00000f7e l       .debug_str     00000000 
00000fc6 l       .debug_str     00000000 
00000f91 l       .debug_str     00000000 
00000f9a l       .debug_str     00000000 
00000fa6 l       .debug_str     00000000 
00000e63 l       .debug_str     00000000 
00000aa5 l       .debug_str     00000000 
00000fb4 l       .debug_str     00000000 
00000fd6 l       .debug_str     00000000 
00000fe7 l       .debug_str     00000000 
00000ffa l       .debug_str     00000000 
00000548 l       .debug_str     00000000 
00001015 l       .debug_str     00000000 
00001031 l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
000002a0 l       .debug_frame   00000000 
f0001230 l       .text  00000000 
f000135e l       .text  00000000 
f0001430 l       .text  00000000 
f00014be l       .text  00000000 
00000000 l    df *ABS*  00000000 coverage_none.c
f00014be l       .text  00000000 
f00014be l       .text  00000000 
f00014be l       .text  00000000 
f00014be l       .text  00000000 
f00014c0 l       .text  00000000 
f00014c0 l       .text  00000000 
00000000 l       .debug_str     00000000 
000010e3 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00001031 l       .debug_str     00000000 
00000378 l       .debug_frame   00000000 
f00014c0 l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_hooks.c
f00014c0 l       .text  00000000 
f00014c0 l       .text  00000000 
f00014c0 l       .text  00000000 
f00014c2 l       .text  00000000 
f00014c2 l       .text  00000000 
f00014c4 l       .text  00000000 
f00014ce l       .text  00000000 
f00014d0 l       .text  00000000 
f00014d0 l       .text  00000000 
f00014e4 l       .text  00000000 
f00014e4 l       .text  00000000 
f00014e6 l       .text  00000000 
000101f4 l     O .logs.fields   00000014 vApplicationMallocFailedHook.kLogFields
f00014e6 l       .text  00000000 
f00014f2 l       .text  00000000 
f00014f2 l       .text  00000000 
f00014f6 l       .text  00000000 
f00014f6 l       .text  00000000 
f00014f8 l       .text  00000000 
f00014f8 l       .text  00000000 
f00014f8 l       .text  00000000 
f00014f8 l       .text  00000000 
f00014f8 l       .text  00000000 
f00014f8 l       .text  00000000 
f00014fa l       .text  00000000 
f00014fa l       .text  00000000 
f00014fc l       .text  00000000 
f00014fc l       .text  00000000 
f0001506 l       .text  00000000 
f0001508 l       .text  00000000 
f0001508 l       .text  00000000 
f000151c l       .text  00000000 
f000151c l       .text  00000000 
f000151e l       .text  00000000 
00010208 l     O .logs.fields   00000014 vApplicationStackOverflowHook.kLogFields
f000151e l       .text  00000000 
f000152a l       .text  00000000 
f000152a l       .text  00000000 
f000152e l       .text  00000000 
f000152e l       .text  00000000 
f0001530 l       .text  00000000 
f0001530 l       .text  00000000 
f0001530 l       .text  00000000 
000015c6 l       .debug_loc     00000000 
000015e1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001118 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000248 l       .debug_ranges  00000000 
00001164 l       .debug_str     00000000 
00000107 l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
0000019f l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
00002b74 l       .debug_str     00000000 
00000187 l       .debug_str     00000000 
0000018d l       .debug_str     00000000 
00000165 l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
00000134 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00001181 l       .debug_str     00000000 
0000119f l       .debug_str     00000000 
000011b2 l       .debug_str     00000000 
00000417 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
0000114e l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
0000115e l       .debug_str     00000000 
000011a5 l       .debug_str     00000000 
00000ea4 l       .debug_str     00000000 
0000039c l       .debug_frame   00000000 
f00014f8 l       .text  00000000 
f0001530 l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_port.c
f0001530 l       .text  00000000 
f0001530 l       .text  00000000 
f0001530 l       .text  00000000 
f0001532 l       .text  00000000 
f0001532 l       .text  00000000 
f0001534 l       .text  00000000 
f0001538 l       .text  00000000 
f0001538 l       .text  00000000 
f000153c l       .text  00000000 
f000153c l       .text  00000000 
f0001540 l       .text  00000000 
f0001540 l       .text  00000000 
f0001544 l       .text  00000000 
f0001544 l       .text  00000000 
f000154c l       .text  00000000 
f000154c l       .text  00000000 
00000000 l       .debug_str     00000000 
000011bd l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
000011f2 l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000397 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00000e6b l       .debug_str     00000000 
0000017f l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00001240 l       .debug_str     00000000 
000011f9 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00001208 l       .debug_str     00000000 
0000121a l       .debug_str     00000000 
0000122c l       .debug_str     00000000 
000003e0 l       .debug_frame   00000000 
f000154c l       .text  00000000 
00000000 l    df *ABS*  00000000 irq.c
f000154c l       .text  00000000 
f000154c l       .text  00000000 
f000154c l       .text  00000000 
f000154c l       .text  00000000 
f000154e l       .text  00000000 
f0001550 l       .text  00000000 
f0001550 l       .text  00000000 
f0001554 l       .text  00000000 
f0001556 l       .text  00000000 
f0001556 l       .text  00000000 
f0001558 l       .text  00000000 
f0001558 l       .text  00000000 
f000155c l       .text  00000000 
f000155e l       .text  00000000 
f000155e l       .text  00000000 
f000155e l       .text  00000000 
f000155e l       .text  00000000 
f000155e l       .text  00000000 
f000155e l       .text  00000000 
f0001560 l       .text  00000000 
f0001562 l       .text  00000000 
f0001566 l       .text  00000000 
f000156a l       .text  00000000 
f000156c l       .text  00000000 
f000156c l       .text  00000000 
f000156e l       .text  00000000 
f0001572 l       .text  00000000 
f0001576 l       .text  00000000 
f0001578 l       .text  00000000 
f0001578 l       .text  00000000 
f0001578 l       .text  00000000 
f0001578 l       .text  00000000 
f0001578 l       .text  00000000 
f0001578 l       .text  00000000 
f000157a l       .text  00000000 
f000157e l       .text  00000000 
f000157e l       .text  00000000 
f0001582 l       .text  00000000 
f0001584 l       .text  00000000 
f0001584 l       .text  00000000 
f0001588 l       .text  00000000 
f0001588 l       .text  00000000 
f000158c l       .text  00000000 
f000158e l       .text  00000000 
f000158e l       .text  00000000 
f000158e l       .text  00000000 
f000158e l       .text  00000000 
f000158e l       .text  00000000 
f000158e l       .text  00000000 
f0001590 l       .text  00000000 
f0001592 l       .text  00000000 
f0001592 l       .text  00000000 
f0001596 l       .text  00000000 
f0001598 l       .text  00000000 
f0001598 l       .text  00000000 
f000159a l       .text  00000000 
f000159a l       .text  00000000 
f000159e l       .text  00000000 
f00015a0 l       .text  00000000 
f00015a0 l       .text  00000000 
000015fc l       .debug_loc     00000000 
0000162c l       .debug_loc     00000000 
0000165c l       .debug_loc     00000000 
0000168c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001254 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000260 l       .debug_ranges  00000000 
00001270 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
00001286 l       .debug_str     00000000 
0000129e l       .debug_str     00000000 
000012b3 l       .debug_str     00000000 
000012c9 l       .debug_str     00000000 
0000114e l       .debug_str     00000000 
000015c0 l       .debug_str     00000000 
00001208 l       .debug_str     00000000 
000008e3 l       .debug_str     00000000 
000011f9 l       .debug_str     00000000 
0000121a l       .debug_str     00000000 
00000b14 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
0000040c l       .debug_frame   00000000 
f000155e l       .text  00000000 
f0001578 l       .text  00000000 
f000158e l       .text  00000000 
f00015a0 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.c
f00015a0 l       .text  00000000 
f00015a0 l       .text  00000000 
f00015a0 l       .text  00000000 
f00015a2 l       .text  00000000 
f00015ac l       .text  00000000 
f00015ae l       .text  00000000 
f00015b0 l       .text  00000000 
f00015b0 l       .text  00000000 
f00015b2 l       .text  00000000 
f00015b4 l       .text  00000000 
f00015b4 l       .text  00000000 
f00015b6 l       .text  00000000 
f00015b6 l       .text  00000000 
f00015c0 l       .text  00000000 
f00015c2 l       .text  00000000 
f00015c2 l       .text  00000000 
f00015c4 l       .text  00000000 
0001021c l     O .logs.fields   00000014 ottf_generic_fault_print.kLogFields
f00015c4 l       .text  00000000 
f00015e4 l       .text  00000000 
f00015e4 l       .text  00000000 
f0001600 l       .text  00000000 
f0001600 l       .text  00000000 
f000160e l       .text  00000000 
f000160e l       .text  00000000 
f000160e l       .text  00000000 
f000160e l       .text  00000000 
f000160e l       .text  00000000 
f0001610 l       .text  00000000 
f0001610 l       .text  00000000 
f0001612 l       .text  00000000 
f0001614 l       .text  00000000 
f0001614 l       .text  00000000 
f0001616 l       .text  00000000 
f0001616 l       .text  00000000 
f0001618 l       .text  00000000 
f000161c l       .text  00000000 
f0001632 l       .text  00000000 
f0001638 l       .text  00000000 
f000163e l       .text  00000000 
f0001644 l       .text  00000000 
f000164a l       .text  00000000 
f0001650 l       .text  00000000 
f0001658 l     F .text  0000001c generic_fault_handler
f0001656 l       .text  00000000 
f0001658 l       .text  00000000 
f0001658 l       .text  00000000 
f0001658 l       .text  00000000 
f0001658 l       .text  00000000 
f0001658 l       .text  00000000 
f0001658 l       .text  00000000 
f000165a l       .text  00000000 
f000165a l       .text  00000000 
f000165c l       .text  00000000 
f000165e l       .text  00000000 
f0001660 l       .text  00000000 
f0001660 l       .text  00000000 
f0001662 l       .text  00000000 
f0001664 l       .text  00000000 
f0003928 l     O .rodata        00000080 exception_reason
f0001670 l       .text  00000000 
f0001672 l       .text  00000000 
f0001672 l       .text  00000000 
f0001674 l       .text  00000000 
f0001674 l       .text  00000000 
f0001674 l       .text  00000000 
f0001674 l       .text  00000000 
f0001674 l       .text  00000000 
f0001674 l       .text  00000000 
f0001676 l       .text  00000000 
f0001676 l       .text  00000000 
f0001678 l       .text  00000000 
f000167a l       .text  00000000 
f000167c l       .text  00000000 
f0001686 l       .text  00000000 
f0001686 l       .text  00000000 
f0001688 l       .text  00000000 
f0001688 l       .text  00000000 
f0001688 l       .text  00000000 
f0001688 l       .text  00000000 
f0001688 l       .text  00000000 
f0001688 l       .text  00000000 
f000168a l       .text  00000000 
f000168a l       .text  00000000 
f000168c l       .text  00000000 
f000168e l       .text  00000000 
f0001690 l       .text  00000000 
f000169a l       .text  00000000 
f000169a l       .text  00000000 
f000169c l       .text  00000000 
f000169c l       .text  00000000 
f000169c l       .text  00000000 
f000169c l       .text  00000000 
f000169c l       .text  00000000 
f000169c l       .text  00000000 
f000169c l       .text  00000000 
f00016a0 l       .text  00000000 
f00016a0 l       .text  00000000 
f00016a0 l       .text  00000000 
f00016a0 l       .text  00000000 
f00016a0 l       .text  00000000 
f00016a2 l       .text  00000000 
f00016a2 l       .text  00000000 
f00016a8 l       .text  00000000 
f00016a8 l       .text  00000000 
f00016a8 l       .text  00000000 
f00016b6 l       .text  00000000 
f00016b6 l       .text  00000000 
f00016be l       .text  00000000 
f00016c0 l       .text  00000000 
f00016c0 l       .text  00000000 
f00016c2 l       .text  00000000 
f00016c2 l       .text  00000000 
f00016c4 l       .text  00000000 
f00016c6 l       .text  00000000 
00010230 l     O .logs.fields   00000014 ottf_external_isr.kLogFields
f00016c6 l       .text  00000000 
f00016d4 l       .text  00000000 
f00016d4 l       .text  00000000 
f00016d6 l       .text  00000000 
f00016d6 l       .text  00000000 
f00016ec l       .text  00000000 
f00016ec l       .text  00000000 
f00016f2 l       .text  00000000 
f00016f4 l       .text  00000000 
f00016f4 l       .text  00000000 
f00016f6 l       .text  00000000 
f00016f6 l       .text  00000000 
f00016f8 l       .text  00000000 
f0001704 l       .text  00000000 
f0001704 l       .text  00000000 
f0001706 l       .text  00000000 
f000170a l       .text  00000000 
f000170a l       .text  00000000 
f000170c l       .text  00000000 
f000170c l       .text  00000000 
f000170e l       .text  00000000 
f000170e l       .text  00000000 
f0001710 l       .text  00000000 
f000171c l       .text  00000000 
f000171e l       .text  00000000 
f000171e l       .text  00000000 
f0001720 l       .text  00000000 
f0001720 l       .text  00000000 
f0001722 l       .text  00000000 
f0001724 l       .text  00000000 
00010244 l     O .logs.fields   00000014 ottf_external_isr.kLogFields.5
f0001724 l       .text  00000000 
f0001732 l       .text  00000000 
f0001732 l       .text  00000000 
f0001734 l       .text  00000000 
f0001734 l       .text  00000000 
f000174a l       .text  00000000 
f000174a l       .text  00000000 
f0001750 l       .text  00000000 
f0001752 l       .text  00000000 
f0001752 l       .text  00000000 
f000175c l       .text  00000000 
f000175e l       .text  00000000 
f0001760 l       .text  00000000 
f0001760 l       .text  00000000 
f000176a l       .text  00000000 
f000176a l       .text  00000000 
f000176c l       .text  00000000 
f000176c l       .text  00000000 
f000176c l       .text  00000000 
f000176c l     F .text  00000014 generic_internal_irq_handler
f000176c l       .text  00000000 
f000176c l       .text  00000000 
f000176c l       .text  00000000 
f000176e l       .text  00000000 
f000176e l       .text  00000000 
f0001770 l       .text  00000000 
f0001772 l       .text  00000000 
f0001774 l       .text  00000000 
f000177e l       .text  00000000 
f000177e l       .text  00000000 
f0001780 l       .text  00000000 
f0001780 l       .text  00000000 
f0001780 l       .text  00000000 
f0001780 l       .text  00000000 
f0001780 l       .text  00000000 
f0001780 l       .text  00000000 
f0001782 l       .text  00000000 
f0001782 l       .text  00000000 
f0001784 l       .text  00000000 
f0001786 l       .text  00000000 
f0001786 l       .text  00000000 
f000178c l       .text  00000000 
f000178c l       .text  00000000 
f0001790 l       .text  00000000 
f0001792 l       .text  00000000 
f0001796 l       .text  00000000 
f000179c l       .text  00000000 
f00017a2 l       .text  00000000 
f00017a2 l       .text  00000000 
f00017a4 l       .text  00000000 
f00017a6 l       .text  00000000 
f00017b0 l       .text  00000000 
f00017b0 l       .text  00000000 
f00017b2 l       .text  00000000 
f00017b2 l       .text  00000000 
f00017b2 l       .text  00000000 
000016bc l       .debug_loc     00000000 
000016e2 l       .debug_loc     00000000 
00001708 l       .debug_loc     00000000 
00001723 l       .debug_loc     00000000 
0000173e l       .debug_loc     00000000 
00001759 l       .debug_loc     00000000 
00001774 l       .debug_loc     00000000 
000017c0 l       .debug_loc     00000000 
000017f3 l       .debug_loc     00000000 
00001824 l       .debug_loc     00000000 
0000183f l       .debug_loc     00000000 
00001870 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000012d1 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000290 l       .debug_ranges  00000000 
000019cf l       .debug_str     00000000 
00000107 l       .debug_str     00000000 
0000133d l       .debug_str     00000000 
00001a70 l       .debug_str     00000000 
00001a77 l       .debug_str     00000000 
00001a7c l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
0000019f l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
00002b74 l       .debug_str     00000000 
00000187 l       .debug_str     00000000 
0000018d l       .debug_str     00000000 
00000165 l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
00000134 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00001302 l       .debug_str     00000000 
00001a4c l       .debug_str     00000000 
00001a82 l       .debug_str     00000000 
00001a8e l       .debug_str     00000000 
000018ca l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
0000130f l       .debug_str     00000000 
00001325 l       .debug_str     00000000 
00001319 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00001333 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00001406 l       .debug_str     00000000 
00001344 l       .debug_str     00000000 
0000135c l       .debug_str     00000000 
00001375 l       .debug_str     00000000 
0000138f l       .debug_str     00000000 
000013a2 l       .debug_str     00000000 
000013ba l       .debug_str     00000000 
000013d3 l       .debug_str     00000000 
000013e5 l       .debug_str     00000000 
000013fa l       .debug_str     00000000 
00001446 l       .debug_str     00000000 
0000140f l       .debug_str     00000000 
0000142b l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002eb l       .debug_str     00000000 
000002fa l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000fee l       .debug_str     00000000 
00000322 l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000350 l       .debug_str     00000000 
00000362 l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000385 l       .debug_str     00000000 
000018b8 l       .debug_str     00000000 
0000145f l       .debug_str     00000000 
00001481 l       .debug_str     00000000 
000014a1 l       .debug_str     00000000 
000014c1 l       .debug_str     00000000 
000014e1 l       .debug_str     00000000 
00001501 l       .debug_str     00000000 
00001520 l       .debug_str     00000000 
00001544 l       .debug_str     00000000 
00001563 l       .debug_str     00000000 
00001582 l       .debug_str     00000000 
000015a1 l       .debug_str     00000000 
000015c3 l       .debug_str     00000000 
000015e5 l       .debug_str     00000000 
00001607 l       .debug_str     00000000 
0000162e l       .debug_str     00000000 
00001651 l       .debug_str     00000000 
00001674 l       .debug_str     00000000 
00001695 l       .debug_str     00000000 
000016b9 l       .debug_str     00000000 
000016e1 l       .debug_str     00000000 
00001706 l       .debug_str     00000000 
0000172c l       .debug_str     00000000 
00001751 l       .debug_str     00000000 
00001774 l       .debug_str     00000000 
00001798 l       .debug_str     00000000 
000017b7 l       .debug_str     00000000 
000017d6 l       .debug_str     00000000 
000017f5 l       .debug_str     00000000 
00001816 l       .debug_str     00000000 
00001836 l       .debug_str     00000000 
0000185b l       .debug_str     00000000 
0000187a l       .debug_str     00000000 
00001899 l       .debug_str     00000000 
00001903 l       .debug_str     00000000 
000018d5 l       .debug_str     00000000 
000018ef l       .debug_str     00000000 
00001915 l       .debug_str     00000000 
00001920 l       .debug_str     00000000 
0000193f l       .debug_str     00000000 
00001953 l       .debug_str     00000000 
00001962 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
00000417 l       .debug_str     00000000 
000019e8 l       .debug_str     00000000 
00001972 l       .debug_str     00000000 
000019ff l       .debug_str     00000000 
0000115e l       .debug_str     00000000 
00001a15 l       .debug_str     00000000 
00001a27 l       .debug_str     00000000 
00001a36 l       .debug_str     00000000 
00001983 l       .debug_str     00000000 
0000043c l       .debug_str     00000000 
00001999 l       .debug_str     00000000 
000019b2 l       .debug_str     00000000 
00001a5e l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00001a9a l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000470 l       .debug_frame   00000000 
f000160e l       .text  00000000 
f0001658 l       .text  00000000 
f0001674 l       .text  00000000 
f0001688 l       .text  00000000 
f000169c l       .text  00000000 
f00016a0 l       .text  00000000 
f000176c l       .text  00000000 
f0001780 l       .text  00000000 
f00017b2 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic.c
f00017b2 l       .text  00000000 
f00017b2 l       .text  00000000 
f00017b2 l       .text  00000000 
f00017b2 l       .text  00000000 
f00017ba l       .text  00000000 
f00017ba l       .text  00000000 
f00017c6 l       .text  00000000 
f00017c6 l       .text  00000000 
f00017c8 l       .text  00000000 
f00017c8 l       .text  00000000 
f00017ce l       .text  00000000 
f00017ce l       .text  00000000 
f00017d0 l       .text  00000000 
f00017d4 l       .text  00000000 
f00017d4 l       .text  00000000 
f00017d6 l       .text  00000000 
f00017d6 l       .text  00000000 
f00017da l       .text  00000000 
f00017da l       .text  00000000 
f00017da l       .text  00000000 
f00017da l       .text  00000000 
f00017da l       .text  00000000 
f00017da l       .text  00000000 
f00017e2 l       .text  00000000 
f00017e2 l       .text  00000000 
f00017e8 l       .text  00000000 
f00017e8 l       .text  00000000 
f00017ea l       .text  00000000 
f00017ea l       .text  00000000 
f00017f2 l       .text  00000000 
f00017f2 l       .text  00000000 
f00017f4 l       .text  00000000 
f00017f4 l       .text  00000000 
f00017f6 l       .text  00000000 
f00017f6 l       .text  00000000 
f00017fa l       .text  00000000 
f00017fa l       .text  00000000 
0000188b l       .debug_loc     00000000 
000018b1 l       .debug_loc     00000000 
000018e4 l       .debug_loc     00000000 
00001906 l       .debug_loc     00000000 
00001921 l       .debug_loc     00000000 
00001943 l       .debug_loc     00000000 
00001976 l       .debug_loc     00000000 
0000199e l       .debug_loc     00000000 
000019c6 l       .debug_loc     00000000 
000019e1 l       .debug_loc     00000000 
00001a11 l       .debug_loc     00000000 
00001a2c l       .debug_loc     00000000 
00001a47 l       .debug_loc     00000000 
00001a62 l       .debug_loc     00000000 
00001a7d l       .debug_loc     00000000 
00001a98 l       .debug_loc     00000000 
00001ab3 l       .debug_loc     00000000 
00001ace l       .debug_loc     00000000 
00001ae9 l       .debug_loc     00000000 
00001b04 l       .debug_loc     00000000 
00001b1f l       .debug_loc     00000000 
00001b3b l       .debug_loc     00000000 
00001b56 l       .debug_loc     00000000 
00001b74 l       .debug_loc     00000000 
00001b9a l       .debug_loc     00000000 
00001bcb l       .debug_loc     00000000 
00001be6 l       .debug_loc     00000000 
00001c01 l       .debug_loc     00000000 
00001c20 l       .debug_loc     00000000 
00001c3f l       .debug_loc     00000000 
00001c5a l       .debug_loc     00000000 
00001c75 l       .debug_loc     00000000 
00001c90 l       .debug_loc     00000000 
00001cb0 l       .debug_loc     00000000 
00001ccb l       .debug_loc     00000000 
00001ce6 l       .debug_loc     00000000 
00001d01 l       .debug_loc     00000000 
00001d1e l       .debug_loc     00000000 
00001d39 l       .debug_loc     00000000 
00001d54 l       .debug_loc     00000000 
00001d6f l       .debug_loc     00000000 
00001d8a l       .debug_loc     00000000 
00001da5 l       .debug_loc     00000000 
00001dc5 l       .debug_loc     00000000 
00001de0 l       .debug_loc     00000000 
00001dfb l       .debug_loc     00000000 
00001e16 l       .debug_loc     00000000 
00001e36 l       .debug_loc     00000000 
00001e51 l       .debug_loc     00000000 
00001e6c l       .debug_loc     00000000 
00001e87 l       .debug_loc     00000000 
00001ea7 l       .debug_loc     00000000 
00001ec2 l       .debug_loc     00000000 
00001edd l       .debug_loc     00000000 
00001ef8 l       .debug_loc     00000000 
00001f18 l       .debug_loc     00000000 
00001f33 l       .debug_loc     00000000 
00001f4e l       .debug_loc     00000000 
00001f69 l       .debug_loc     00000000 
00001f89 l       .debug_loc     00000000 
00001fa4 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001ca3 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000398 l       .debug_ranges  00000000 
00001cc3 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
00001cd9 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002eb l       .debug_str     00000000 
000002fa l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000852 l       .debug_str     00000000 
0000082d l       .debug_str     00000000 
00000840 l       .debug_str     00000000 
0000085d l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00001ea4 l       .debug_str     00000000 
00000b3f l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
00000871 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00001d7a l       .debug_str     00000000 
00001314 l       .debug_str     00000000 
00000371 l       .debug_str     00000000 
00000320 l       .debug_ranges  00000000 
00000308 l       .debug_ranges  00000000 
00001458 l       .debug_str     00000000 
00000350 l       .debug_ranges  00000000 
00001e85 l       .debug_str     00000000 
00000338 l       .debug_ranges  00000000 
00001cef l       .debug_str     00000000 
00000829 l       .debug_str     00000000 
00001d16 l       .debug_str     00000000 
00001d08 l       .debug_str     00000000 
000008ab l       .debug_str     00000000 
000008b5 l       .debug_str     00000000 
00001a9a l       .debug_str     00000000 
00001d26 l       .debug_str     00000000 
00001d3b l       .debug_str     00000000 
00001d51 l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000397 l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
00001d8c l       .debug_str     00000000 
00001b86 l       .debug_str     00000000 
00000abe l       .debug_str     00000000 
00001d0d l       .debug_str     00000000 
00000ac2 l       .debug_str     00000000 
00000368 l       .debug_ranges  00000000 
000008cc l       .debug_str     00000000 
000008a2 l       .debug_str     00000000 
000008a5 l       .debug_str     00000000 
000008f9 l       .debug_str     00000000 
000008e8 l       .debug_str     00000000 
000008e3 l       .debug_str     00000000 
00001d5a l       .debug_str     00000000 
0000090c l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00001da8 l       .debug_str     00000000 
00001e95 l       .debug_str     00000000 
00000380 l       .debug_ranges  00000000 
00001dc4 l       .debug_str     00000000 
00000f29 l       .debug_str     00000000 
00001de1 l       .debug_str     00000000 
00001df8 l       .debug_str     00000000 
00001e9a l       .debug_str     00000000 
00001d60 l       .debug_str     00000000 
0000088e l       .debug_str     00000000 
00001e02 l       .debug_str     00000000 
00000970 l       .debug_str     00000000 
00001983 l       .debug_str     00000000 
00001eab l       .debug_str     00000000 
00001eb6 l       .debug_str     00000000 
00001999 l       .debug_str     00000000 
00001ec9 l       .debug_str     00000000 
00001e1d l       .debug_str     00000000 
00001ed7 l       .debug_str     00000000 
00001e3c l       .debug_str     00000000 
00001e61 l       .debug_str     00000000 
00000bae l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00001325 l       .debug_str     00000000 
00001319 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
00000aa5 l       .debug_str     00000000 
00000584 l       .debug_frame   00000000 
f00017da l       .text  00000000 
f00017fa l       .text  00000000 
00000000 l    df *ABS*  00000000 rand_testutils.c
f00017fa l       .text  00000000 
f00017fa l       .text  00000000 
f00017fa l       .text  00000000 
f00017fc l       .text  00000000 
f0001802 l       .text  00000000 
f0001804 l       .text  00000000 
f0001806 l       .text  00000000 
f0001808 l       .text  00000000 
f0001808 l       .text  00000000 
f0001812 l       .text  00000000 
00010258 l     O .logs.fields   00000014 rand_testutils_init.kLogFields
f0001814 l       .text  00000000 
f0001820 l       .text  00000000 
f0001820 l       .text  00000000 
f0001822 l       .text  00000000 
f0001822 l       .text  00000000 
f0001836 l       .text  00000000 
f0001836 l       .text  00000000 
f000183c l       .text  00000000 
f000183e l       .text  00000000 
f000183e l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f000186a l       .text  00000000 
f0001872 l       .text  00000000 
f0001876 l       .text  00000000 
f0001876 l       .text  00000000 
f000187a l       .text  00000000 
f000187c l       .text  00000000 
f0001884 l       .text  00000000 
f0001884 l       .text  00000000 
0001026c l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields
00010280 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields.3
00001fbf l       .debug_loc     00000000 
00001ffb l       .debug_loc     00000000 
0000202c l       .debug_loc     00000000 
00002068 l       .debug_loc     00000000 
0000208e l       .debug_loc     00000000 
000020b4 l       .debug_loc     00000000 
000020e5 l       .debug_loc     00000000 
00002116 l       .debug_loc     00000000 
0000213c l       .debug_loc     00000000 
00002164 l       .debug_loc     00000000 
0000217f l       .debug_loc     00000000 
0000219a l       .debug_loc     00000000 
000021b5 l       .debug_loc     00000000 
000021d0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000205a l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000410 l       .debug_ranges  00000000 
00000f48 l       .debug_str     00000000 
00000107 l       .debug_str     00000000 
00000d30 l       .debug_str     00000000 
00000d28 l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
0000019f l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
00002b74 l       .debug_str     00000000 
00000187 l       .debug_str     00000000 
0000018d l       .debug_str     00000000 
00000165 l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
00000134 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00002081 l       .debug_str     00000000 
0000209c l       .debug_str     00000000 
0000212b l       .debug_str     00000000 
0000215d l       .debug_str     00000000 
00002161 l       .debug_str     00000000 
00002140 l       .debug_str     00000000 
0000031b l       .debug_str     00000000 
00000fee l       .debug_str     00000000 
00000322 l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000350 l       .debug_str     00000000 
00000362 l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000385 l       .debug_str     00000000 
00000e0f l       .debug_str     00000000 
00000dc7 l       .debug_str     00000000 
00000dd4 l       .debug_str     00000000 
00000de8 l       .debug_str     00000000 
00000df9 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
00000417 l       .debug_str     00000000 
0000043c l       .debug_str     00000000 
00002100 l       .debug_str     00000000 
000020b8 l       .debug_str     00000000 
000020c5 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
000020c9 l       .debug_str     00000000 
00002116 l       .debug_str     00000000 
000020d5 l       .debug_str     00000000 
00000d2c l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00002146 l       .debug_str     00000000 
00002165 l       .debug_str     00000000 
0000216b l       .debug_str     00000000 
000004f2 l       .debug_str     00000000 
0000217c l       .debug_str     00000000 
00002170 l       .debug_str     00000000 
00002175 l       .debug_str     00000000 
00000d83 l       .debug_str     00000000 
000003f8 l       .debug_ranges  00000000 
00000371 l       .debug_str     00000000 
00002188 l       .debug_str     00000000 
000020f9 l       .debug_str     00000000 
00000db2 l       .debug_str     00000000 
00000d9f l       .debug_str     00000000 
00000d50 l       .debug_str     00000000 
000020d0 l       .debug_str     00000000 
00000d6b l       .debug_str     00000000 
00000d94 l       .debug_str     00000000 
00000d3d l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
00000397 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00000648 l       .debug_frame   00000000 
f0001884 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_core_ibex_autogen.c
f0001884 l       .text  00000000 
f0001884 l       .text  00000000 
f0001884 l       .text  00000000 
f0001884 l       .text  00000000 
f0001886 l       .text  00000000 
f0001888 l       .text  00000000 
f000188c l       .text  00000000 
f000188e l       .text  00000000 
f0001890 l       .text  00000000 
f0001892 l       .text  00000000 
f0001892 l       .text  00000000 
000021eb l       .debug_loc     00000000 
00002206 l       .debug_loc     00000000 
00002221 l       .debug_loc     00000000 
0000223c l       .debug_loc     00000000 
00002257 l       .debug_loc     00000000 
00002286 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000218a l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000440 l       .debug_ranges  00000000 
00000317 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002eb l       .debug_str     00000000 
000002fa l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
00002237 l       .debug_str     00000000 
000021bf l       .debug_str     00000000 
000021dd l       .debug_str     00000000 
000021fb l       .debug_str     00000000 
00002219 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000f32 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
00000d30 l       .debug_str     00000000 
000008cc l       .debug_str     00000000 
000008a2 l       .debug_str     00000000 
000008a5 l       .debug_str     00000000 
00000b3f l       .debug_str     00000000 
000008f9 l       .debug_str     00000000 
000008e8 l       .debug_str     00000000 
000008e3 l       .debug_str     00000000 
00001d5a l       .debug_str     00000000 
0000090c l       .debug_str     00000000 
000008ab l       .debug_str     00000000 
000008b5 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
0000085d l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00001ea4 l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
00000871 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
0000224e l       .debug_str     00000000 
000007de l       .debug_str     00000000 
00000a39 l       .debug_str     00000000 
00000a43 l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000d3d l       .debug_str     00000000 
00000d2c l       .debug_str     00000000 
0000226b l       .debug_str     00000000 
000006f0 l       .debug_frame   00000000 
f0001892 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f0001892 l       .text  00000000 
f0001892 l       .text  00000000 
f0001892 l       .text  00000000 
f0001894 l       .text  00000000 
f0001896 l       .text  00000000 
f000189c l       .text  00000000 
f00018a0 l       .text  00000000 
f00018a4 l       .text  00000000 
f00018a8 l       .text  00000000 
f00018a8 l       .text  00000000 
f00018b2 l       .text  00000000 
f00018b4 l       .text  00000000 
f00018b4 l       .text  00000000 
f00018b6 l       .text  00000000 
f00018b6 l       .text  00000000 
f00018bc l       .text  00000000 
f00018bc l       .text  00000000 
f00018c6 l       .text  00000000 
f00018c8 l       .text  00000000 
f00018c8 l       .text  00000000 
f00018dc l       .text  00000000 
f00018dc l       .text  00000000 
f00018de l       .text  00000000 
f00018de l       .text  00000000 
f00018e8 l       .text  00000000 
f00018ea l       .text  00000000 
f00018ea l       .text  00000000 
f00018fe l       .text  00000000 
f00018fe l       .text  00000000 
f0001900 l       .text  00000000 
000102a8 l     O .logs.fields   00000014 test_status_set.kLogFields.2
f0001900 l       .text  00000000 
f000190c l       .text  00000000 
f000190c l       .text  00000000 
f0001916 l       .text  00000000 
f0001918 l       .text  00000000 
f0001918 l       .text  00000000 
00010294 l     O .logs.fields   00000014 test_status_set.kLogFields
f0001920 l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f0001936 l       .text  00000000 
f0001938 l       .text  00000000 
f0001938 l       .text  00000000 
f0001940 l       .text  00000000 
f0001940 l       .text  00000000 
f0001940 l       .text  00000000 
000022a1 l       .debug_loc     00000000 
000022bf l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000028f3 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
0000043c l       .debug_str     00000000 
00000107 l       .debug_str     00000000 
00000fee l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
0000019f l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
00002b74 l       .debug_str     00000000 
00000187 l       .debug_str     00000000 
0000018d l       .debug_str     00000000 
00000165 l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
00000134 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000322 l       .debug_str     00000000 
00000337 l       .debug_str     00000000 
00000350 l       .debug_str     00000000 
00000362 l       .debug_str     00000000 
00000373 l       .debug_str     00000000 
00000385 l       .debug_str     00000000 
00002921 l       .debug_str     00000000 
00002948 l       .debug_str     00000000 
0000293a l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
0000085d l       .debug_str     00000000 
00001ea4 l       .debug_str     00000000 
00000b3f l       .debug_str     00000000 
00000871 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00000417 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
0000115e l       .debug_str     00000000 
00000724 l       .debug_frame   00000000 
f0001940 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
f0001940 l       .text  00000000 
f0001940 l       .text  00000000 
f0001940 l       .text  00000000 
f0001940 l       .text  00000000 
f0001944 l       .text  00000000 
f0001944 l       .text  00000000 
f0001946 l       .text  00000000 
f0001946 l       .text  00000000 
000022d2 l       .debug_loc     00000000 
000022ed l       .debug_loc     00000000 
00002314 l       .debug_loc     00000000 
0000233b l       .debug_loc     00000000 
00002357 l       .debug_loc     00000000 
00002384 l       .debug_loc     00000000 
000023ab l       .debug_loc     00000000 
000023d2 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002960 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000458 l       .debug_ranges  00000000 
000005d8 l       .debug_str     00000000 
000004f9 l       .debug_str     00000000 
0000062b l       .debug_str     00000000 
00000654 l       .debug_str     00000000 
00000649 l       .debug_str     00000000 
0000063c l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
0000299e l       .debug_str     00000000 
00000d66 l       .debug_str     00000000 
00000492 l       .debug_str     00000000 
00002984 l       .debug_str     00000000 
0000297d l       .debug_str     00000000 
0000298b l       .debug_str     00000000 
0000115e l       .debug_str     00000000 
000029af l       .debug_str     00000000 
00000750 l       .debug_frame   00000000 
f0001946 l       .text  00000000 
00000000 l    df *ABS*  00000000 ibex.c
f0001946 l       .text  00000000 
f0001946 l       .text  00000000 
f0001946 l       .text  00000000 
f0001946 l       .text  00000000 
f000194a l       .text  00000000 
f000194a l       .text  00000000 
f000194c l       .text  00000000 
f000194c l       .text  00000000 
f000194c l       .text  00000000 
f000194c l       .text  00000000 
f000194c l       .text  00000000 
f000194c l       .text  00000000 
f0001950 l       .text  00000000 
f0001950 l       .text  00000000 
f0001952 l       .text  00000000 
f0001952 l       .text  00000000 
f0001952 l       .text  00000000 
f0001952 l       .text  00000000 
f0001952 l       .text  00000000 
f0001952 l       .text  00000000 
f0001956 l       .text  00000000 
f0001956 l       .text  00000000 
f0001958 l       .text  00000000 
f0001958 l       .text  00000000 
000023ee l       .debug_loc     00000000 
00002409 l       .debug_loc     00000000 
00002424 l       .debug_loc     00000000 
0000243f l       .debug_loc     00000000 
00002466 l       .debug_loc     00000000 
0000248d l       .debug_loc     00000000 
000024a9 l       .debug_loc     00000000 
000024c4 l       .debug_loc     00000000 
000024e0 l       .debug_loc     00000000 
00002507 l       .debug_loc     00000000 
0000252e l       .debug_loc     00000000 
00002554 l       .debug_loc     00000000 
0000257b l       .debug_loc     00000000 
000025a2 l       .debug_loc     00000000 
000025be l       .debug_loc     00000000 
000025d9 l       .debug_loc     00000000 
00002600 l       .debug_loc     00000000 
00002627 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000029c1 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
000004b0 l       .debug_ranges  00000000 
000005d8 l       .debug_str     00000000 
000004f9 l       .debug_str     00000000 
00001972 l       .debug_str     00000000 
00001a7c l       .debug_str     00000000 
00001962 l       .debug_str     00000000 
00001953 l       .debug_str     00000000 
00001a77 l       .debug_str     00000000 
000029de l       .debug_str     00000000 
0000062b l       .debug_str     00000000 
0000063c l       .debug_str     00000000 
00000649 l       .debug_str     00000000 
00000654 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
000005fd l       .debug_str     00000000 
00000d5e l       .debug_str     00000000 
0000068d l       .debug_str     00000000 
0000067a l       .debug_str     00000000 
00000614 l       .debug_str     00000000 
00000480 l       .debug_ranges  00000000 
000029ee l       .debug_str     00000000 
00000498 l       .debug_ranges  00000000 
0000061c l       .debug_str     00000000 
0000060f l       .debug_str     00000000 
00002984 l       .debug_str     00000000 
00000492 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
000007b0 l       .debug_frame   00000000 
f000194c l       .text  00000000 
f0001952 l       .text  00000000 
f0001958 l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
f0001958 l       .text  00000000 
f0001958 l       .text  00000000 
f0001958 l       .text  00000000 
f000195a l       .text  00000000 
f0001960 l       .text  00000000 
f0001962 l       .text  00000000 
f0001970 l       .text  00000000 
f000197a l       .text  00000000 
f0001980 l       .text  00000000 
f0001980 l       .text  00000000 
f0001982 l       .text  00000000 
f0001986 l       .text  00000000 
f0001986 l       .text  00000000 
f0001990 l       .text  00000000 
f0001990 l       .text  00000000 
f0001992 l       .text  00000000 
f0001996 l       .text  00000000 
f0001996 l       .text  00000000 
f0001998 l       .text  00000000 
f0001998 l       .text  00000000 
f000199a l       .text  00000000 
f000199a l       .text  00000000 
f000199e l       .text  00000000 
f000199e l       .text  00000000 
f00019a4 l       .text  00000000 
f00019b2 l       .text  00000000 
f00019b2 l       .text  00000000 
e0002074 l     O .bss   00000002 base_log_internal_core.global_log_counter
f00019ba l       .text  00000000 
f00019c6 l       .text  00000000 
f00019c8 l       .text  00000000 
f00019d2 l       .text  00000000 
f00019d2 l       .text  00000000 
f00019de l       .text  00000000 
f00019de l       .text  00000000 
f00019e0 l       .text  00000000 
f00019e2 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019f0 l       .text  00000000 
f00019f0 l       .text  00000000 
f00019fa l       .text  00000000 
f00019fa l       .text  00000000 
f00019fa l       .text  00000000 
f00019fa l       .text  00000000 
f00019fa l       .text  00000000 
f00019fc l       .text  00000000 
f0001a02 l       .text  00000000 
f0001a02 l       .text  00000000 
f0001a0c l       .text  00000000 
f0001a0c l       .text  00000000 
f0001a12 l       .text  00000000 
f0001a12 l       .text  00000000 
f0001a16 l       .text  00000000 
f0001a16 l       .text  00000000 
f0001a18 l       .text  00000000 
f0001a18 l       .text  00000000 
f0001a1a l       .text  00000000 
f0001a1a l       .text  00000000 
f0001a1c l       .text  00000000 
f0001a20 l       .text  00000000 
f0001a24 l       .text  00000000 
f0001a26 l       .text  00000000 
f0001a26 l       .text  00000000 
f0001a28 l       .text  00000000 
f0001a28 l       .text  00000000 
f0001a2a l       .text  00000000 
f0001a2a l       .text  00000000 
f0001a2e l       .text  00000000 
f0001a2e l       .text  00000000 
00002643 l       .debug_loc     00000000 
0000266b l       .debug_loc     00000000 
00002686 l       .debug_loc     00000000 
000026c2 l       .debug_loc     00000000 
000026de l       .debug_loc     00000000 
000026f9 l       .debug_loc     00000000 
00002714 l       .debug_loc     00000000 
0000272f l       .debug_loc     00000000 
0000276d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002a03 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
000004f8 l       .debug_ranges  00000000 
00000417 l       .debug_str     00000000 
00002a1f l       .debug_str     00000000 
00002a6d l       .debug_str     00000000 
00002a71 l       .debug_str     00000000 
00002a7f l       .debug_str     00000000 
00000188 l       .debug_str     00000000 
00000f1b l       .debug_str     00000000 
00000e95 l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
00000134 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
00000b14 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00002a32 l       .debug_str     00000000 
0000015c l       .debug_str     00000000 
00000165 l       .debug_str     00000000 
00002a45 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00002a4c l       .debug_str     00000000 
00002a54 l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
00002a60 l       .debug_str     00000000 
0000085d l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00001ea4 l       .debug_str     00000000 
00000b3f l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
00000871 l       .debug_str     00000000 
00000402 l       .debug_str     00000000 
00000187 l       .debug_str     00000000 
00002a9b l       .debug_str     00000000 
00000371 l       .debug_str     00000000 
0000019f l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
00002b74 l       .debug_str     00000000 
0000018d l       .debug_str     00000000 
00002a93 l       .debug_str     00000000 
00002a89 l       .debug_str     00000000 
0000084c l       .debug_frame   00000000 
f00019fa l       .text  00000000 
f0001a2e l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
f0001a2e l     F .text  00000004 base_dev_null
e0002078 l     O .bss   00000008 base_stdout
f0001a2e l       .text  00000000 
f0001a2e l       .text  00000000 
f0001a2e l       .text  00000000 
f0001a30 l       .text  00000000 
f0001a30 l       .text  00000000 
f0001a32 l       .text  00000000 
f0001a32 l       .text  00000000 
f0001a32 l       .text  00000000 
f0001a32 l       .text  00000000 
f0001a32 l       .text  00000000 
f0001a3a l       .text  00000000 
f0001a3a l       .text  00000000 
f0001a3c l       .text  00000000 
f0001a48 l     F .text  00000040 base_dev_uart
f0001a44 l       .text  00000000 
f0001a46 l       .text  00000000 
f0001a46 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a4a l       .text  00000000 
f0001a4a l       .text  00000000 
f0001a54 l       .text  00000000 
f0001a54 l       .text  00000000 
f0001a54 l       .text  00000000 
f0001a56 l       .text  00000000 
f0001a58 l       .text  00000000 
f0001a5a l       .text  00000000 
f0001a5c l       .text  00000000 
f0001a5e l       .text  00000000 
f0001a5e l       .text  00000000 
f0001a66 l       .text  00000000 
f0001a6a l       .text  00000000 
f0001a6a l       .text  00000000 
f0001a6c l       .text  00000000 
f0001a6e l       .text  00000000 
f0001a72 l       .text  00000000 
f0001a72 l       .text  00000000 
f0001a74 l       .text  00000000 
f0001a76 l       .text  00000000 
f0001a78 l       .text  00000000 
f0001a78 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a8a l       .text  00000000 
f0001a8c l       .text  00000000 
f0001a9a l       .text  00000000 
f0001aa2 l       .text  00000000 
f0001aa2 l       .text  00000000 
f0001aa8 l       .text  00000000 
f0001aa8 l       .text  00000000 
f0001aaa l       .text  00000000 
f0001aaa l       .text  00000000 
f0001aac l       .text  00000000 
f0001aac l       .text  00000000 
f0001ab0 l       .text  00000000 
f0001ab2 l       .text  00000000 
f0001ab4 l       .text  00000000 
f0001ab4 l       .text  00000000 
f0001aba l       .text  00000000 
f0001aba l       .text  00000000 
f0001aba l       .text  00000000 
f0001aba l       .text  00000000 
f0001aba l       .text  00000000 
f0001ac2 l       .text  00000000 
f0001ac8 l       .text  00000000 
f0001ac8 l       .text  00000000 
f0001aca l       .text  00000000 
f0001aca l       .text  00000000 
f0001ad0 l       .text  00000000 
f0001ad2 l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001ad6 l       .text  00000000 
f0001af0 l       .text  00000000 
f0001af2 l       .text  00000000 
f0001af4 l       .text  00000000 
f0001af6 l       .text  00000000 
f0001af8 l       .text  00000000 
f0001afa l       .text  00000000 
f0001afc l       .text  00000000 
f0001b04 l       .text  00000000 
f0001b04 l       .text  00000000 
f0001b06 l       .text  00000000 
f0001b06 l       .text  00000000 
f0001b0a l       .text  00000000 
f0001b0e l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b2c l       .text  00000000 
f0001b30 l       .text  00000000 
f0001b34 l       .text  00000000 
f0001b36 l       .text  00000000 
f0001b38 l       .text  00000000 
f0001b38 l       .text  00000000 
f0001b3a l       .text  00000000 
f0001b3c l       .text  00000000 
f0001b42 l       .text  00000000 
f0001b42 l       .text  00000000 
f0001b44 l       .text  00000000 
f0001b44 l       .text  00000000 
f0001b48 l       .text  00000000 
f0001b48 l       .text  00000000 
f0001b54 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b64 l       .text  00000000 
f0001b64 l       .text  00000000 
f0001b6c l       .text  00000000 
f0001b6c l       .text  00000000 
f0001b70 l       .text  00000000 
f0001b70 l       .text  00000000 
f0001b7e l       .text  00000000 
f0001b7e l       .text  00000000 
f0001b82 l       .text  00000000 
f0001b8a l       .text  00000000 
f0001b8e l       .text  00000000 
f0001b8e l       .text  00000000 
f0001b92 l       .text  00000000 
f0001b98 l       .text  00000000 
f0001b9c l       .text  00000000 
f0001b9e l       .text  00000000 
f0001ba2 l       .text  00000000 
f0001ba2 l       .text  00000000 
f0001ba6 l       .text  00000000 
f0001bac l       .text  00000000 
f0001bac l       .text  00000000 
f0001bb0 l       .text  00000000 
f0001bc4 l       .text  00000000 
f0001bc4 l       .text  00000000 
f0001bc6 l       .text  00000000 
f0001bcc l       .text  00000000 
f0001bd0 l       .text  00000000 
f0001bd4 l       .text  00000000 
f0001bd4 l       .text  00000000 
f0001bdc l       .text  00000000 
f0001bde l       .text  00000000 
f0001bec l       .text  00000000 
f0001bec l       .text  00000000 
f0001bf0 l       .text  00000000 
f0001bfc l       .text  00000000 
f0001bfc l       .text  00000000 
f0001c00 l       .text  00000000 
f0001c00 l       .text  00000000 
f0001c0e l       .text  00000000 
f0001c0e l       .text  00000000 
f0001c10 l       .text  00000000 
f0001c14 l       .text  00000000 
f0001c14 l       .text  00000000 
f0001c18 l       .text  00000000 
f0003e6a l     O .rodata        00000010 kDigitsLow
f0001c2a l       .text  00000000 
f0001c2a l       .text  00000000 
f0001c32 l       .text  00000000 
f0001c3a l       .text  00000000 
f0001c3a l       .text  00000000 
f0001c44 l       .text  00000000 
f0001c44 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c52 l       .text  00000000 
f0001c52 l       .text  00000000 
f0001c5a l       .text  00000000 
f0001c5a l       .text  00000000 
f0001c5e l       .text  00000000 
f0003e97 l     O .rodata        00000010 kDigitsHigh
f0001c68 l       .text  00000000 
f0001c68 l       .text  00000000 
f0001c72 l       .text  00000000 
f0001c72 l       .text  00000000 
f0001c76 l       .text  00000000 
f0001c80 l       .text  00000000 
f0001c80 l       .text  00000000 
f0001c84 l       .text  00000000 
f0001c8e l       .text  00000000 
f0001c8e l       .text  00000000 
f0001c96 l       .text  00000000 
f0001c96 l       .text  00000000 
f0001c9a l       .text  00000000 
f0001ca4 l       .text  00000000 
f0001ca4 l       .text  00000000 
f0001cae l       .text  00000000 
f0001cb2 l       .text  00000000 
f0001cb6 l       .text  00000000 
f0001cb6 l       .text  00000000 
f0001cc2 l       .text  00000000 
f0001cc2 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cd0 l       .text  00000000 
f0001cd4 l       .text  00000000 
f0001cd4 l       .text  00000000 
f0001cd6 l       .text  00000000 
f0001cd6 l       .text  00000000 
f0001cda l       .text  00000000 
f0001cda l       .text  00000000 
f0001cde l       .text  00000000 
f0001ce8 l       .text  00000000 
f0001ce8 l       .text  00000000 
f0001cec l       .text  00000000 
f0001cf8 l       .text  00000000 
f0001cf8 l       .text  00000000 
f0001cfc l       .text  00000000 
f0001cfc l       .text  00000000 
f0001d0a l       .text  00000000 
f0001d0a l       .text  00000000 
f0001d14 l       .text  00000000 
f0001d14 l       .text  00000000 
f0001d18 l       .text  00000000 
f0001d18 l       .text  00000000 
f0002046 l     F .text  0000007e write_digits
f0001d2e l       .text  00000000 
f0001d2e l       .text  00000000 
f0001d34 l       .text  00000000 
f0001d34 l       .text  00000000 
f0001d3e l       .text  00000000 
f0001d3e l       .text  00000000 
f0001d40 l       .text  00000000 
f0001d4a l       .text  00000000 
f0001d4a l       .text  00000000 
f0001d54 l       .text  00000000 
f0001d54 l       .text  00000000 
f0001d56 l       .text  00000000 
f0001d56 l       .text  00000000 
f0001d58 l       .text  00000000 
f0001d58 l       .text  00000000 
f0001d5c l       .text  00000000 
f0001d5c l       .text  00000000 
f0001d60 l       .text  00000000 
f0001d62 l       .text  00000000 
f0001d66 l       .text  00000000 
f0001d66 l       .text  00000000 
f0001d6a l       .text  00000000 
f0001d6a l       .text  00000000 
f0001d76 l       .text  00000000 
f0001d76 l       .text  00000000 
f0001d78 l       .text  00000000 
f0001d78 l       .text  00000000 
f0001d7a l       .text  00000000 
f0001d7a l       .text  00000000 
f0001d82 l       .text  00000000 
f0001d82 l       .text  00000000 
f0001d86 l       .text  00000000 
f0001d86 l       .text  00000000 
f0001d94 l       .text  00000000 
f0001d94 l       .text  00000000 
f0001d96 l       .text  00000000 
f0001da4 l       .text  00000000 
f0001da4 l       .text  00000000 
f0001da8 l       .text  00000000 
f0001da8 l       .text  00000000 
f0001dac l       .text  00000000 
f0001dac l       .text  00000000 
f0001dba l       .text  00000000 
f0001dba l       .text  00000000 
f0001dbe l       .text  00000000 
f0001dbe l       .text  00000000 
f0001dc6 l       .text  00000000 
f0001dc6 l       .text  00000000 
f0001dc8 l       .text  00000000 
f0001dc8 l       .text  00000000 
f0001dca l       .text  00000000 
f0001dca l       .text  00000000 
f0001dde l       .text  00000000 
f0001dde l       .text  00000000 
f0001de0 l       .text  00000000 
f0001dee l       .text  00000000 
f0001dee l       .text  00000000 
f0001df0 l       .text  00000000 
f0001df0 l       .text  00000000 
f0001df2 l       .text  00000000 
f0001dfa l       .text  00000000 
f0001dfe l       .text  00000000 
f0001e00 l       .text  00000000 
f0001e0a l       .text  00000000 
f0001e0a l       .text  00000000 
f0001e0e l       .text  00000000 
f0001e18 l       .text  00000000 
f0001e18 l       .text  00000000 
f0001e1c l       .text  00000000 
f0001e28 l       .text  00000000 
f0001e28 l       .text  00000000 
f0001e2c l       .text  00000000 
f0001e2c l       .text  00000000 
f0001e36 l       .text  00000000 
f0001e36 l       .text  00000000 
f0001e3e l       .text  00000000 
f0001e3e l       .text  00000000 
f0001e42 l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e54 l       .text  00000000 
f0001e54 l       .text  00000000 
f0001e5e l       .text  00000000 
f0001e5e l       .text  00000000 
f0001e62 l       .text  00000000 
f0001e6a l       .text  00000000 
f0001e6a l       .text  00000000 
f0001e74 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e7a l       .text  00000000 
f0001e84 l       .text  00000000 
f0001e84 l       .text  00000000 
f0001e8c l       .text  00000000 
f0001e8c l       .text  00000000 
f0001e90 l       .text  00000000 
f0001e98 l       .text  00000000 
f0001e98 l       .text  00000000 
f0001f62 l     F .text  000000e4 hex_dump
f0001ea2 l       .text  00000000 
f0001ea4 l       .text  00000000 
f0003ea7 l     O .rodata        0000000f kUnknownSpec
f0001ea4 l       .text  00000000 
f0001eae l       .text  00000000 
f0001eae l       .text  00000000 
f0001eb2 l       .text  00000000 
f0001eb4 l       .text  00000000 
f0001eb4 l       .text  00000000 
f0001eb8 l       .text  00000000 
f0001ebe l       .text  00000000 
f0001ebe l       .text  00000000 
f0001ec2 l       .text  00000000 
f0001ece l       .text  00000000 
f0001ece l       .text  00000000 
f0001ed0 l       .text  00000000 
f0001ed0 l       .text  00000000 
f0001ee4 l       .text  00000000 
f0001ee4 l       .text  00000000 
f0001ee8 l       .text  00000000 
f0001ef6 l       .text  00000000 
f0001ef6 l       .text  00000000 
f0001efa l       .text  00000000 
f0001efa l       .text  00000000 
f0001f00 l       .text  00000000 
f0001f00 l       .text  00000000 
f0001f02 l       .text  00000000 
f0001f02 l       .text  00000000 
f0001f04 l       .text  00000000 
f0001f04 l       .text  00000000 
f0001f0c l       .text  00000000 
f0001f0e l       .text  00000000 
f0001f10 l       .text  00000000 
f0001f16 l       .text  00000000 
f0001f16 l       .text  00000000 
f0001f22 l       .text  00000000 
f0003e7a l     O .rodata        00000011 kErrorNul
f0001f22 l       .text  00000000 
f0001f2c l       .text  00000000 
f0001f2c l       .text  00000000 
f0001f30 l       .text  00000000 
f0001f34 l       .text  00000000 
f0001f36 l       .text  00000000 
f0001f36 l       .text  00000000 
f0001f46 l       .text  00000000 
f0001f4a l       .text  00000000 
f0001f56 l       .text  00000000 
f0003e8b l     O .rodata        0000000c kErrorTooWide
f0001f56 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f64 l       .text  00000000 
f0001f7c l       .text  00000000 
f0001f7e l       .text  00000000 
f0001f80 l       .text  00000000 
f0001f82 l       .text  00000000 
f0001f84 l       .text  00000000 
f0001f88 l       .text  00000000 
f0001f88 l       .text  00000000 
f0001f8c l       .text  00000000 
f0001f90 l       .text  00000000 
f0001f90 l       .text  00000000 
f0001f9a l       .text  00000000 
f0001f9a l       .text  00000000 
f0001f9c l       .text  00000000 
f0001f9e l       .text  00000000 
f0001fa4 l       .text  00000000 
f0001fa4 l       .text  00000000 
f0001fa8 l       .text  00000000 
f0001fac l       .text  00000000 
f0001fac l       .text  00000000 
f0001fb4 l       .text  00000000 
f0001fb4 l       .text  00000000 
f0001fb6 l       .text  00000000 
f0001fb8 l       .text  00000000 
f0001fb8 l       .text  00000000 
f0001fba l       .text  00000000 
f0001fba l       .text  00000000 
f0001fc0 l       .text  00000000 
f0001fc0 l       .text  00000000 
f0001fc2 l       .text  00000000 
f0001fc2 l       .text  00000000 
f0001fc6 l       .text  00000000 
f0001fca l       .text  00000000 
f0001fd0 l       .text  00000000 
f0001fd0 l       .text  00000000 
f0001fd6 l       .text  00000000 
f0001fde l       .text  00000000 
f0001fde l       .text  00000000 
f0001fe0 l       .text  00000000 
f0001fe4 l       .text  00000000 
f0001fe8 l       .text  00000000 
f0001fee l       .text  00000000 
f0001ff2 l       .text  00000000 
f0001ff6 l       .text  00000000 
f0001ff8 l       .text  00000000 
f0001ffe l       .text  00000000 
f0002000 l       .text  00000000 
f0002008 l       .text  00000000 
f000200e l       .text  00000000 
f0002012 l       .text  00000000 
f0002012 l       .text  00000000 
f0002014 l       .text  00000000 
f0002016 l       .text  00000000 
f0002016 l       .text  00000000 
f0002018 l       .text  00000000 
f000201a l       .text  00000000 
f000201e l       .text  00000000 
f000201e l       .text  00000000 
f0002020 l       .text  00000000 
f0002026 l       .text  00000000 
f0002026 l       .text  00000000 
f0002028 l       .text  00000000 
f0002030 l       .text  00000000 
f0002032 l       .text  00000000 
f0002036 l       .text  00000000 
f0002038 l       .text  00000000 
f000203a l       .text  00000000 
f000203c l       .text  00000000 
f0002046 l       .text  00000000 
f0002046 l       .text  00000000 
f0002046 l       .text  00000000 
f0002046 l       .text  00000000 
f0002046 l       .text  00000000 
f0002048 l       .text  00000000 
f000204a l       .text  00000000 
f000204c l       .text  00000000 
f000204c l       .text  00000000 
f000204e l       .text  00000000 
f0002050 l       .text  00000000 
f0002054 l       .text  00000000 
f0002054 l       .text  00000000 
f0002056 l       .text  00000000 
f0002056 l       .text  00000000 
f0002062 l       .text  00000000 
f0002062 l       .text  00000000 
f0002064 l       .text  00000000 
f0002068 l       .text  00000000 
f0002070 l       .text  00000000 
f0002070 l       .text  00000000 
f0002072 l       .text  00000000 
f0002076 l       .text  00000000 
f000207a l       .text  00000000 
f000207a l       .text  00000000 
f000207c l       .text  00000000 
f000207c l       .text  00000000 
f0002080 l       .text  00000000 
f0002086 l       .text  00000000 
f0002086 l       .text  00000000 
f0002088 l       .text  00000000 
f000208a l       .text  00000000 
f000208c l       .text  00000000 
f0002090 l       .text  00000000 
f0002094 l       .text  00000000 
f0002098 l       .text  00000000 
f0002098 l       .text  00000000 
f00020a2 l       .text  00000000 
f00020a6 l       .text  00000000 
f00020a8 l       .text  00000000 
f00020ac l       .text  00000000 
f00020b0 l       .text  00000000 
f00020b2 l       .text  00000000 
f00020b4 l       .text  00000000 
f00020b6 l       .text  00000000 
f00020b6 l       .text  00000000 
f00020bc l       .text  00000000 
f00020be l       .text  00000000 
f00020be l       .text  00000000 
f00020c4 l       .text  00000000 
f00020c4 l       .text  00000000 
0000278a l       .debug_loc     00000000 
000027b6 l       .debug_loc     00000000 
000027d1 l       .debug_loc     00000000 
000027f7 l       .debug_loc     00000000 
00002823 l       .debug_loc     00000000 
00002854 l       .debug_loc     00000000 
00002885 l       .debug_loc     00000000 
000028c1 l       .debug_loc     00000000 
000028f2 l       .debug_loc     00000000 
00002919 l       .debug_loc     00000000 
0000294a l       .debug_loc     00000000 
00002965 l       .debug_loc     00000000 
00002981 l       .debug_loc     00000000 
0000299c l       .debug_loc     00000000 
000029c2 l       .debug_loc     00000000 
000029e8 l       .debug_loc     00000000 
00002a24 l       .debug_loc     00000000 
00002b2f l       .debug_loc     00000000 
00002c89 l       .debug_loc     00000000 
00002d89 l       .debug_loc     00000000 
00002e94 l       .debug_loc     00000000 
00002eb4 l       .debug_loc     00000000 
00002eda l       .debug_loc     00000000 
00002f0a l       .debug_loc     00000000 
00003142 l       .debug_loc     00000000 
0000315e l       .debug_loc     00000000 
00003179 l       .debug_loc     00000000 
000032ee l       .debug_loc     00000000 
0000343e l       .debug_loc     00000000 
00003552 l       .debug_loc     00000000 
00003578 l       .debug_loc     00000000 
00003593 l       .debug_loc     00000000 
000035ae l       .debug_loc     00000000 
000035c9 l       .debug_loc     00000000 
000035e4 l       .debug_loc     00000000 
000035ff l       .debug_loc     00000000 
0000361b l       .debug_loc     00000000 
00003636 l       .debug_loc     00000000 
00003651 l       .debug_loc     00000000 
0000366c l       .debug_loc     00000000 
00003687 l       .debug_loc     00000000 
000036b9 l       .debug_loc     00000000 
000036ec l       .debug_loc     00000000 
00003707 l       .debug_loc     00000000 
0000375a l       .debug_loc     00000000 
0000378d l       .debug_loc     00000000 
000037a8 l       .debug_loc     00000000 
000037c3 l       .debug_loc     00000000 
000037de l       .debug_loc     00000000 
000037f9 l       .debug_loc     00000000 
00003814 l       .debug_loc     00000000 
0000382f l       .debug_loc     00000000 
0000384a l       .debug_loc     00000000 
00003865 l       .debug_loc     00000000 
00003880 l       .debug_loc     00000000 
0000389b l       .debug_loc     00000000 
000038b6 l       .debug_loc     00000000 
000038d2 l       .debug_loc     00000000 
000038f1 l       .debug_loc     00000000 
0000390c l       .debug_loc     00000000 
0000393d l       .debug_loc     00000000 
00003963 l       .debug_loc     00000000 
00003994 l       .debug_loc     00000000 
000039c5 l       .debug_loc     00000000 
000039e0 l       .debug_loc     00000000 
000039fb l       .debug_loc     00000000 
00003a16 l       .debug_loc     00000000 
00003a47 l       .debug_loc     00000000 
00003a62 l       .debug_loc     00000000 
00003a7d l       .debug_loc     00000000 
00003a99 l       .debug_loc     00000000 
00003abf l       .debug_loc     00000000 
00003af0 l       .debug_loc     00000000 
00003b0b l       .debug_loc     00000000 
00003b26 l       .debug_loc     00000000 
00003b4c l       .debug_loc     00000000 
00003b72 l       .debug_loc     00000000 
00003b8d l       .debug_loc     00000000 
00003ba8 l       .debug_loc     00000000 
00003bc3 l       .debug_loc     00000000 
00003bde l       .debug_loc     00000000 
00003bfd l       .debug_loc     00000000 
00003c18 l       .debug_loc     00000000 
00003c33 l       .debug_loc     00000000 
00003c4f l       .debug_loc     00000000 
00003c6a l       .debug_loc     00000000 
00003c85 l       .debug_loc     00000000 
00003ca4 l       .debug_loc     00000000 
00003cca l       .debug_loc     00000000 
00003cfb l       .debug_loc     00000000 
00003d53 l       .debug_loc     00000000 
00003d9d l       .debug_loc     00000000 
00003def l       .debug_loc     00000000 
00003e2c l       .debug_loc     00000000 
00003e68 l       .debug_loc     00000000 
00003ed2 l       .debug_loc     00000000 
00003f1b l       .debug_loc     00000000 
00003f85 l       .debug_loc     00000000 
00003fab l       .debug_loc     00000000 
00003fc6 l       .debug_loc     00000000 
00003fe1 l       .debug_loc     00000000 
00004008 l       .debug_loc     00000000 
00004050 l       .debug_loc     00000000 
00004076 l       .debug_loc     00000000 
0000409c l       .debug_loc     00000000 
000040c2 l       .debug_loc     00000000 
000040dd l       .debug_loc     00000000 
0000410d l       .debug_loc     00000000 
00004133 l       .debug_loc     00000000 
00004165 l       .debug_loc     00000000 
000041a3 l       .debug_loc     00000000 
000041d2 l       .debug_loc     00000000 
000041ed l       .debug_loc     00000000 
00004220 l       .debug_loc     00000000 
0000423b l       .debug_loc     00000000 
00004277 l       .debug_loc     00000000 
0000429d l       .debug_loc     00000000 
000042b8 l       .debug_loc     00000000 
000042d3 l       .debug_loc     00000000 
000042ee l       .debug_loc     00000000 
00004344 l       .debug_loc     00000000 
00004373 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002aa6 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000648 l       .debug_ranges  00000000 
00002ac4 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00002ae3 l       .debug_str     00000000 
00002afb l       .debug_str     00000000 
00002aef l       .debug_str     00000000 
000020f4 l       .debug_str     00000000 
00002de4 l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
00002b09 l       .debug_str     00000000 
00002b13 l       .debug_str     00000000 
00002e3c l       .debug_str     00000000 
00002b21 l       .debug_str     00000000 
0000367b l       .debug_str     00000000 
00000b3f l       .debug_str     00000000 
000035f4 l       .debug_str     00000000 
00002cf9 l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00002ec3 l       .debug_str     00000000 
00001aff l       .debug_str     00000000 
00002d23 l       .debug_str     00000000 
00002ed3 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00002b2b l       .debug_str     00000000 
00002b37 l       .debug_str     00000000 
00002b44 l       .debug_str     00000000 
00002b93 l       .debug_str     00000000 
00002b82 l       .debug_str     00000000 
00002b5b l       .debug_str     00000000 
00002b6a l       .debug_str     00000000 
00002b79 l       .debug_str     00000000 
00002ba6 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002eb l       .debug_str     00000000 
000002fa l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00002bb1 l       .debug_str     00000000 
00002bba l       .debug_str     00000000 
00002bc5 l       .debug_str     00000000 
00002bcd l       .debug_str     00000000 
00002bd9 l       .debug_str     00000000 
00002be5 l       .debug_str     00000000 
00002bf2 l       .debug_str     00000000 
00002c02 l       .debug_str     00000000 
00002c13 l       .debug_str     00000000 
00002c20 l       .debug_str     00000000 
00002c29 l       .debug_str     00000000 
00002c33 l       .debug_str     00000000 
00002c3d l       .debug_str     00000000 
00002c48 l       .debug_str     00000000 
00002c52 l       .debug_str     00000000 
00002c5d l       .debug_str     00000000 
00002c6b l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000397 l       .debug_str     00000000 
00000d0a l       .debug_str     00000000 
00000d01 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
00002c83 l       .debug_str     00000000 
00002c74 l       .debug_str     00000000 
00002c78 l       .debug_str     00000000 
0000017f l       .debug_str     00000000 
00002da3 l       .debug_str     00000000 
00002c97 l       .debug_str     00000000 
00000fd6 l       .debug_str     00000000 
00000d05 l       .debug_str     00000000 
00002db1 l       .debug_str     00000000 
00000371 l       .debug_str     00000000 
00002ca7 l       .debug_str     00000000 
00002a60 l       .debug_str     00000000 
0000018d l       .debug_str     00000000 
00000188 l       .debug_str     00000000 
00002a93 l       .debug_str     00000000 
00002a89 l       .debug_str     00000000 
00002a54 l       .debug_str     00000000 
00000510 l       .debug_ranges  00000000 
00002dbf l       .debug_str     00000000 
00002e49 l       .debug_str     00000000 
00002e84 l       .debug_str     00000000 
000005f0 l       .debug_ranges  00000000 
00002d3d l       .debug_str     00000000 
00000528 l       .debug_ranges  00000000 
00000550 l       .debug_ranges  00000000 
00000570 l       .debug_ranges  00000000 
00000588 l       .debug_ranges  00000000 
000005c0 l       .debug_ranges  00000000 
000005a8 l       .debug_ranges  00000000 
000005d8 l       .debug_ranges  00000000 
00002cc1 l       .debug_str     00000000 
00002cd7 l       .debug_str     00000000 
000041fb l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00002ce0 l       .debug_str     00000000 
00002d1e l       .debug_str     00000000 
00002d0b l       .debug_str     00000000 
00002ce8 l       .debug_str     00000000 
00000e16 l       .debug_str     00000000 
00002d01 l       .debug_str     00000000 
00002d27 l       .debug_str     00000000 
00002d39 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000b14 l       .debug_str     00000000 
00003049 l       .debug_str     00000000 
00002d48 l       .debug_str     00000000 
00002d42 l       .debug_str     00000000 
00002d4f l       .debug_str     00000000 
00002d57 l       .debug_str     00000000 
00000492 l       .debug_str     00000000 
00002d5b l       .debug_str     00000000 
00001c6e l       .debug_str     00000000 
00003062 l       .debug_str     00000000 
00002d5f l       .debug_str     00000000 
00002e33 l       .debug_str     00000000 
000036d6 l       .debug_str     00000000 
00002eb8 l       .debug_str     00000000 
00002eaf l       .debug_str     00000000 
00002eca l       .debug_str     00000000 
00000a3f l       .debug_str     00000000 
00002dcd l       .debug_str     00000000 
00002ddb l       .debug_str     00000000 
00002e53 l       .debug_str     00000000 
000020f9 l       .debug_str     00000000 
00002de9 l       .debug_str     00000000 
00002d6e l       .debug_str     00000000 
00002b8f l       .debug_str     00000000 
00002df6 l       .debug_str     00000000 
00002e20 l       .debug_str     00000000 
00002e70 l       .debug_str     00000000 
00002b74 l       .debug_str     00000000 
00000630 l       .debug_ranges  00000000 
00002e63 l       .debug_str     00000000 
00002e7f l       .debug_str     00000000 
00002e92 l       .debug_str     00000000 
00002b65 l       .debug_str     00000000 
00000610 l       .debug_ranges  00000000 
00002e5c l       .debug_str     00000000 
00002ea1 l       .debug_str     00000000 
00002eaa l       .debug_str     00000000 
00002d80 l       .debug_str     00000000 
00002d94 l       .debug_str     00000000 
00002e03 l       .debug_str     00000000 
00002e12 l       .debug_str     00000000 
00002d9c l       .debug_str     00000000 
00000890 l       .debug_frame   00000000 
f0001a32 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001aba l       .text  00000000 
f0001ad4 l       .text  00000000 
f0001f62 l       .text  00000000 
f0002046 l       .text  00000000 
f00020c4 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f00020c4 l       .text  00000000 
f00020c4 l       .text  00000000 
f00020c4 l       .text  00000000 
f00020c4 l       .text  00000000 
f00020c8 l       .text  00000000 
f00020d0 l       .text  00000000 
f00020d0 l       .text  00000000 
f00020d4 l       .text  00000000 
f00020d4 l       .text  00000000 
f00020e0 l       .text  00000000 
f00020e2 l       .text  00000000 
f00020e2 l       .text  00000000 
f00020e6 l       .text  00000000 
f00020f2 l       .text  00000000 
f00020f4 l       .text  00000000 
f00020f8 l       .text  00000000 
f00020fa l       .text  00000000 
f00020fa l       .text  00000000 
f00020fe l       .text  00000000 
f00020fe l       .text  00000000 
f0002102 l       .text  00000000 
f0002102 l       .text  00000000 
f0002104 l       .text  00000000 
f0002104 l       .text  00000000 
f0002108 l       .text  00000000 
f0002108 l       .text  00000000 
f000210a l       .text  00000000 
f000210e l       .text  00000000 
f000210e l       .text  00000000 
f0002112 l       .text  00000000 
f0002116 l       .text  00000000 
f000211c l       .text  00000000 
f000211c l       .text  00000000 
f0002120 l       .text  00000000 
f0002122 l       .text  00000000 
f0002122 l       .text  00000000 
f0002128 l       .text  00000000 
f0002128 l       .text  00000000 
f000212e l       .text  00000000 
f000212e l       .text  00000000 
f0002130 l       .text  00000000 
f0002130 l       .text  00000000 
f0002136 l       .text  00000000 
f0002136 l       .text  00000000 
0000438e l       .debug_loc     00000000 
000043a9 l       .debug_loc     00000000 
000043da l       .debug_loc     00000000 
00004400 l       .debug_loc     00000000 
00004426 l       .debug_loc     00000000 
00004441 l       .debug_loc     00000000 
00004463 l       .debug_loc     00000000 
0000448a l       .debug_loc     00000000 
000044b1 l       .debug_loc     00000000 
000044d5 l       .debug_loc     00000000 
00004506 l       .debug_loc     00000000 
00004521 l       .debug_loc     00000000 
00004552 l       .debug_loc     00000000 
000045ac l       .debug_loc     00000000 
000045e8 l       .debug_loc     00000000 
0000460c l       .debug_loc     00000000 
00004631 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002ed9 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
000006f8 l       .debug_ranges  00000000 
00002ef5 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
00002f05 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00003033 l       .debug_str     00000000 
00002f12 l       .debug_str     00000000 
00002f16 l       .debug_str     00000000 
00002f21 l       .debug_str     00000000 
00002f2a l       .debug_str     00000000 
00002f3b l       .debug_str     00000000 
00002f4d l       .debug_str     00000000 
00002f57 l       .debug_str     00000000 
00002f66 l       .debug_str     00000000 
00002f78 l       .debug_str     00000000 
00002f8b l       .debug_str     00000000 
00002f9f l       .debug_str     00000000 
00002fa8 l       .debug_str     00000000 
00002fb4 l       .debug_str     00000000 
00002fc3 l       .debug_str     00000000 
00002fcd l       .debug_str     00000000 
00002fda l       .debug_str     00000000 
00002fe4 l       .debug_str     00000000 
00002ff5 l       .debug_str     00000000 
0000017f l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
00002c6b l       .debug_str     00000000 
00003044 l       .debug_str     00000000 
00003052 l       .debug_str     00000000 
000000de l       .debug_str     00000000 
0000108a l       .debug_str     00000000 
000008cc l       .debug_str     00000000 
000008a2 l       .debug_str     00000000 
000008a5 l       .debug_str     00000000 
00000b3f l       .debug_str     00000000 
000008f9 l       .debug_str     00000000 
000008e8 l       .debug_str     00000000 
000008e3 l       .debug_str     00000000 
00001d5a l       .debug_str     00000000 
00003066 l       .debug_str     00000000 
0000303f l       .debug_str     00000000 
00003074 l       .debug_str     00000000 
00002d5b l       .debug_str     00000000 
000006e0 l       .debug_ranges  00000000 
0000305b l       .debug_str     00000000 
00000110 l       .debug_str     00000000 
00003049 l       .debug_str     00000000 
00002d48 l       .debug_str     00000000 
00000c09 l       .debug_str     00000000 
00002d5f l       .debug_str     00000000 
0000307e l       .debug_str     00000000 
00003062 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00000a84 l       .debug_frame   00000000 
f0002136 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart_autogen.c
f0002136 l       .text  00000000 
f0002136 l       .text  00000000 
f0002136 l       .text  00000000 
f0002136 l       .text  00000000 
f0002138 l       .text  00000000 
f000213a l       .text  00000000 
f000213e l       .text  00000000 
f0002140 l       .text  00000000 
f0002142 l       .text  00000000 
f0002144 l       .text  00000000 
f0002144 l       .text  00000000 
00004653 l       .debug_loc     00000000 
0000466e l       .debug_loc     00000000 
00004689 l       .debug_loc     00000000 
000046a4 l       .debug_loc     00000000 
000046c0 l       .debug_loc     00000000 
000046dc l       .debug_loc     00000000 
000046f7 l       .debug_loc     00000000 
00004712 l       .debug_loc     00000000 
0000472d l       .debug_loc     00000000 
00004748 l       .debug_loc     00000000 
00004763 l       .debug_loc     00000000 
0000477e l       .debug_loc     00000000 
00004799 l       .debug_loc     00000000 
000047b4 l       .debug_loc     00000000 
000047da l       .debug_loc     00000000 
000047f5 l       .debug_loc     00000000 
00004810 l       .debug_loc     00000000 
0000482e l       .debug_loc     00000000 
00004855 l       .debug_loc     00000000 
00004870 l       .debug_loc     00000000 
0000488b l       .debug_loc     00000000 
000048a6 l       .debug_loc     00000000 
000048c4 l       .debug_loc     00000000 
000048eb l       .debug_loc     00000000 
00004906 l       .debug_loc     00000000 
00004921 l       .debug_loc     00000000 
0000493c l       .debug_loc     00000000 
00004957 l       .debug_loc     00000000 
0000497d l       .debug_loc     00000000 
00004998 l       .debug_loc     00000000 
000049b3 l       .debug_loc     00000000 
000049d9 l       .debug_loc     00000000 
000049f9 l       .debug_loc     00000000 
00004a1f l       .debug_loc     00000000 
00004a3d l       .debug_loc     00000000 
00004a58 l       .debug_loc     00000000 
00004a7e l       .debug_loc     00000000 
00004aa4 l       .debug_loc     00000000 
00004abf l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003085 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000710 l       .debug_ranges  00000000 
00000774 l       .debug_str     00000000 
000007ae l       .debug_str     00000000 
000007a1 l       .debug_str     00000000 
0000077e l       .debug_str     00000000 
0000078f l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002eb l       .debug_str     00000000 
000002fa l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
000030ca l       .debug_str     00000000 
000030b2 l       .debug_str     00000000 
00003188 l       .debug_str     00000000 
000030d9 l       .debug_str     00000000 
000030f0 l       .debug_str     00000000 
00003107 l       .debug_str     00000000 
0000311a l       .debug_str     00000000 
00003130 l       .debug_str     00000000 
00003146 l       .debug_str     00000000 
0000315c l       .debug_str     00000000 
00003171 l       .debug_str     00000000 
00000852 l       .debug_str     00000000 
0000082d l       .debug_str     00000000 
00000840 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000f70 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
00000d05 l       .debug_str     00000000 
0000085d l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00001ea4 l       .debug_str     00000000 
00000b3f l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
00000871 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00003195 l       .debug_str     00000000 
000007de l       .debug_str     00000000 
00000a39 l       .debug_str     00000000 
00000a43 l       .debug_str     00000000 
000031aa l       .debug_str     00000000 
00000829 l       .debug_str     00000000 
00000e16 l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
000031c0 l       .debug_str     00000000 
00000a61 l       .debug_str     00000000 
0000088e l       .debug_str     00000000 
000008a2 l       .debug_str     00000000 
000008ab l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
000008b5 l       .debug_str     00000000 
000031d7 l       .debug_str     00000000 
00000970 l       .debug_str     00000000 
00000a88 l       .debug_str     00000000 
00001d5a l       .debug_str     00000000 
000031ef l       .debug_str     00000000 
000008cc l       .debug_str     00000000 
000008a5 l       .debug_str     00000000 
000008f9 l       .debug_str     00000000 
000008e8 l       .debug_str     00000000 
000008e3 l       .debug_str     00000000 
0000090c l       .debug_str     00000000 
0000320c l       .debug_str     00000000 
00003225 l       .debug_str     00000000 
00001a7e l       .debug_str     00000000 
00000a97 l       .debug_str     00000000 
00003238 l       .debug_str     00000000 
00001b86 l       .debug_str     00000000 
00000ab2 l       .debug_str     00000000 
00000ac2 l       .debug_str     00000000 
00003251 l       .debug_str     00000000 
00000acd l       .debug_str     00000000 
0000326a l       .debug_str     00000000 
00003283 l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
00000d0a l       .debug_str     00000000 
00000d01 l       .debug_str     00000000 
0000329c l       .debug_str     00000000 
000032ad l       .debug_str     00000000 
000032bc l       .debug_str     00000000 
00000aa5 l       .debug_str     00000000 
000032da l       .debug_str     00000000 
00000ab8 l       .debug_frame   00000000 
f0002144 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart.c
f0002144 l       .text  00000000 
f0002144 l       .text  00000000 
f0002144 l       .text  00000000 
f0002146 l       .text  00000000 
f0002150 l       .text  00000000 
f0002152 l       .text  00000000 
f0002154 l       .text  00000000 
f0002156 l       .text  00000000 
f0002156 l       .text  00000000 
f0002158 l       .text  00000000 
f000215a l       .text  00000000 
f000215e l       .text  00000000 
f0002160 l       .text  00000000 
f0002162 l       .text  00000000 
f000216a l       .text  00000000 
f0002176 l       .text  00000000 
f0002186 l       .text  00000000 
f000218e l       .text  00000000 
f0002194 l       .text  00000000 
f0002194 l       .text  00000000 
f0002198 l       .text  00000000 
f0002198 l       .text  00000000 
f000219a l       .text  00000000 
f000219c l       .text  00000000 
f000219e l       .text  00000000 
f000219e l       .text  00000000 
f00021a0 l       .text  00000000 
f00021a0 l       .text  00000000 
f00021a4 l       .text  00000000 
f00021a4 l       .text  00000000 
f00021a6 l       .text  00000000 
f00021a8 l       .text  00000000 
f00021a8 l       .text  00000000 
f00021aa l       .text  00000000 
f00021aa l       .text  00000000 
f00021ac l       .text  00000000 
f00021ac l       .text  00000000 
f00021b0 l       .text  00000000 
f00021b0 l       .text  00000000 
f00021b2 l       .text  00000000 
f00021b2 l       .text  00000000 
f00021b6 l       .text  00000000 
f00021b6 l       .text  00000000 
f00021b8 l       .text  00000000 
f00021b8 l       .text  00000000 
f00021bc l       .text  00000000 
f00021bc l       .text  00000000 
f00021be l       .text  00000000 
f00021c0 l       .text  00000000 
f00021c0 l       .text  00000000 
f00021c2 l       .text  00000000 
f00021c2 l       .text  00000000 
f00021c6 l       .text  00000000 
f00021c6 l       .text  00000000 
f00021ca l       .text  00000000 
f00021ca l       .text  00000000 
f00021cc l       .text  00000000 
f00021d0 l       .text  00000000 
f00021d0 l       .text  00000000 
f00021d4 l       .text  00000000 
f00021d4 l       .text  00000000 
f00021d6 l       .text  00000000 
f00021da l       .text  00000000 
f00021dc l       .text  00000000 
f00021dc l       .text  00000000 
f00021de l       .text  00000000 
f00021e2 l       .text  00000000 
f00021e4 l       .text  00000000 
f00021e4 l       .text  00000000 
f00021e6 l       .text  00000000 
f00021e6 l       .text  00000000 
f00021e8 l       .text  00000000 
f00021e8 l       .text  00000000 
f00021ea l       .text  00000000 
f00021ea l       .text  00000000 
f00021ee l       .text  00000000 
f00021ee l       .text  00000000 
f00021fe l       .text  00000000 
f00021fe l       .text  00000000 
f00021fe l       .text  00000000 
f00021fe l       .text  00000000 
f00021fe l       .text  00000000 
f00021fe l       .text  00000000 
f0002200 l       .text  00000000 
f0002202 l       .text  00000000 
f0002202 l       .text  00000000 
f0002204 l       .text  00000000 
f0002204 l       .text  00000000 
f0002206 l       .text  00000000 
f0002206 l       .text  00000000 
f0002208 l       .text  00000000 
f0002208 l       .text  00000000 
f000220a l       .text  00000000 
f000220a l       .text  00000000 
f000220c l       .text  00000000 
f000220c l       .text  00000000 
f000220e l       .text  00000000 
f000220e l       .text  00000000 
f0002210 l       .text  00000000 
f0002212 l       .text  00000000 
f0002212 l       .text  00000000 
f0002214 l       .text  00000000 
f0002214 l       .text  00000000 
f0002216 l       .text  00000000 
f0002216 l       .text  00000000 
f0002218 l       .text  00000000 
f000221a l       .text  00000000 
f000221c l       .text  00000000 
f000221c l       .text  00000000 
f000221e l       .text  00000000 
f000221e l       .text  00000000 
f0002220 l       .text  00000000 
f0002220 l       .text  00000000 
00004ada l       .debug_loc     00000000 
00004b00 l       .debug_loc     00000000 
00004b28 l       .debug_loc     00000000 
00004b57 l       .debug_loc     00000000 
00004b72 l       .debug_loc     00000000 
00004b8e l       .debug_loc     00000000 
00004bc4 l       .debug_loc     00000000 
00004bdf l       .debug_loc     00000000 
00004c06 l       .debug_loc     00000000 
00004c2b l       .debug_loc     00000000 
00004c51 l       .debug_loc     00000000 
00004c77 l       .debug_loc     00000000 
00004c9d l       .debug_loc     00000000 
00004cb8 l       .debug_loc     00000000 
00004cda l       .debug_loc     00000000 
00004d00 l       .debug_loc     00000000 
00004d26 l       .debug_loc     00000000 
00004d4c l       .debug_loc     00000000 
00004d72 l       .debug_loc     00000000 
00004d8d l       .debug_loc     00000000 
00004daf l       .debug_loc     00000000 
00004dd5 l       .debug_loc     00000000 
00004df0 l       .debug_loc     00000000 
00004e17 l       .debug_loc     00000000 
00004e32 l       .debug_loc     00000000 
00004e4d l       .debug_loc     00000000 
00004e68 l       .debug_loc     00000000 
00004e8f l       .debug_loc     00000000 
00004eaa l       .debug_loc     00000000 
00004ec5 l       .debug_loc     00000000 
00004eeb l       .debug_loc     00000000 
00004f06 l       .debug_loc     00000000 
00004f21 l       .debug_loc     00000000 
00004f3c l       .debug_loc     00000000 
00004f62 l       .debug_loc     00000000 
00004f7d l       .debug_loc     00000000 
00004f98 l       .debug_loc     00000000 
00004fb3 l       .debug_loc     00000000 
00004fce l       .debug_loc     00000000 
00004fe9 l       .debug_loc     00000000 
00005004 l       .debug_loc     00000000 
0000501f l       .debug_loc     00000000 
00005042 l       .debug_loc     00000000 
0000505d l       .debug_loc     00000000 
00005078 l       .debug_loc     00000000 
00005093 l       .debug_loc     00000000 
000050ae l       .debug_loc     00000000 
000050d1 l       .debug_loc     00000000 
000050ec l       .debug_loc     00000000 
00005107 l       .debug_loc     00000000 
0000512d l       .debug_loc     00000000 
00005153 l       .debug_loc     00000000 
00005179 l       .debug_loc     00000000 
0000519f l       .debug_loc     00000000 
000051c5 l       .debug_loc     00000000 
000051eb l       .debug_loc     00000000 
00005206 l       .debug_loc     00000000 
0000522c l       .debug_loc     00000000 
0000525b l       .debug_loc     00000000 
00005281 l       .debug_loc     00000000 
0000529c l       .debug_loc     00000000 
000052b7 l       .debug_loc     00000000 
000052d7 l       .debug_loc     00000000 
000052f2 l       .debug_loc     00000000 
0000530d l       .debug_loc     00000000 
0000533e l       .debug_loc     00000000 
0000536f l       .debug_loc     00000000 
00005395 l       .debug_loc     00000000 
000053bb l       .debug_loc     00000000 
000053d7 l       .debug_loc     00000000 
000053f2 l       .debug_loc     00000000 
0000540d l       .debug_loc     00000000 
00005428 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000032f9 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
000007a8 l       .debug_ranges  00000000 
00003316 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
00000317 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000002bb l       .debug_str     00000000 
000002c5 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002eb l       .debug_str     00000000 
000002fa l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000852 l       .debug_str     00000000 
0000082d l       .debug_str     00000000 
00000840 l       .debug_str     00000000 
00000e5a l       .debug_str     00000000 
00000e35 l       .debug_str     00000000 
00000e47 l       .debug_str     00000000 
000033a1 l       .debug_str     00000000 
0000332c l       .debug_str     00000000 
00003343 l       .debug_str     00000000 
0000335a l       .debug_str     00000000 
00003371 l       .debug_str     00000000 
00003389 l       .debug_str     00000000 
000033f1 l       .debug_str     00000000 
000033b4 l       .debug_str     00000000 
000033c8 l       .debug_str     00000000 
000033dc l       .debug_str     00000000 
00003431 l       .debug_str     00000000 
00003405 l       .debug_str     00000000 
0000341c l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000004f9 l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
00003443 l       .debug_str     00000000 
00000d05 l       .debug_str     00000000 
00000abe l       .debug_str     00000000 
00000d0a l       .debug_str     00000000 
00000d01 l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
0000085d l       .debug_str     00000000 
00001ea4 l       .debug_str     00000000 
00000b3f l       .debug_str     00000000 
00000871 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
000008cc l       .debug_str     00000000 
000008a2 l       .debug_str     00000000 
000008a5 l       .debug_str     00000000 
000008f9 l       .debug_str     00000000 
000008e8 l       .debug_str     00000000 
000008e3 l       .debug_str     00000000 
00001d5a l       .debug_str     00000000 
00000f7e l       .debug_str     00000000 
00000b4c l       .debug_str     00000000 
000035e1 l       .debug_str     00000000 
000035e5 l       .debug_str     00000000 
000035f0 l       .debug_str     00000000 
0000068d l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
000034b6 l       .debug_str     00000000 
000033aa l       .debug_str     00000000 
000034d0 l       .debug_str     00000000 
000034ee l       .debug_str     00000000 
000020f4 l       .debug_str     00000000 
0000344e l       .debug_str     00000000 
00002e84 l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000397 l       .debug_str     00000000 
0000345e l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
0000088e l       .debug_str     00000000 
000008ab l       .debug_str     00000000 
000008b5 l       .debug_str     00000000 
0000346b l       .debug_str     00000000 
00002eaa l       .debug_str     00000000 
000034ea l       .debug_str     00000000 
00002e58 l       .debug_str     00000000 
00003502 l       .debug_str     00000000 
0000347e l       .debug_str     00000000 
00003489 l       .debug_str     00000000 
00003497 l       .debug_str     00000000 
000034fe l       .debug_str     00000000 
000034a9 l       .debug_str     00000000 
00002ca7 l       .debug_str     00000000 
00003515 l       .debug_str     00000000 
00000c09 l       .debug_str     00000000 
00003532 l       .debug_str     00000000 
0000360f l       .debug_str     00000000 
0000354e l       .debug_str     00000000 
00003619 l       .debug_str     00000000 
00001d86 l       .debug_str     00000000 
0000090c l       .debug_str     00000000 
0000356a l       .debug_str     00000000 
0000343a l       .debug_str     00000000 
00000fad l       .debug_str     00000000 
00000778 l       .debug_ranges  00000000 
00000790 l       .debug_ranges  00000000 
00003580 l       .debug_str     00000000 
0000364e l       .debug_str     00000000 
0000359b l       .debug_str     00000000 
000035b7 l       .debug_str     00000000 
00002d48 l       .debug_str     00000000 
000003f5 l       .debug_str     00000000 
000035cf l       .debug_str     00000000 
00000fc6 l       .debug_str     00000000 
00000f91 l       .debug_str     00000000 
00000f9a l       .debug_str     00000000 
00000fa6 l       .debug_str     00000000 
00000e63 l       .debug_str     00000000 
00000aa5 l       .debug_str     00000000 
00000fb4 l       .debug_str     00000000 
000035fa l       .debug_str     00000000 
00003624 l       .debug_str     00000000 
0000363a l       .debug_str     00000000 
00000b8c l       .debug_frame   00000000 
f00021fe l       .text  00000000 
f0002220 l       .text  00000000 
00000000 l    df *ABS*  00000000 math.c
f0002220 l       .text  00000000 
f0002220 l       .text  00000000 
f0002220 l       .text  00000000 
f0002222 l       .text  00000000 
f0002228 l       .text  00000000 
f0002234 l       .text  00000000 
f000223c l       .text  00000000 
f000223c l       .text  00000000 
f0002244 l       .text  00000000 
f0002266 l       .text  00000000 
f000226a l       .text  00000000 
f000226a l       .text  00000000 
f000226e l       .text  00000000 
f0002272 l       .text  00000000 
f0002272 l       .text  00000000 
f0002276 l       .text  00000000 
f0002288 l       .text  00000000 
f000228c l       .text  00000000 
f000229c l       .text  00000000 
f000229e l       .text  00000000 
f000229e l       .text  00000000 
f00022ae l       .text  00000000 
f00022b0 l       .text  00000000 
f00022b0 l       .text  00000000 
f00022b4 l       .text  00000000 
f00022b4 l       .text  00000000 
f00022b8 l       .text  00000000 
f00022b8 l       .text  00000000 
f00022ba l       .text  00000000 
f00022c2 l       .text  00000000 
f00022c4 l       .text  00000000 
f00022c6 l       .text  00000000 
f00022d0 l       .text  00000000 
f00022d0 l       .text  00000000 
0000544e l       .debug_loc     00000000 
00005466 l       .debug_loc     00000000 
0000548d l       .debug_loc     00000000 
000054be l       .debug_loc     00000000 
00005511 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000365d l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
0000068d l       .debug_str     00000000 
00000599 l       .debug_str     00000000 
000020c7 l       .debug_str     00000000 
00003677 l       .debug_str     00000000 
00001b26 l       .debug_str     00000000 
0000367f l       .debug_str     00000000 
00003683 l       .debug_str     00000000 
00000371 l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000004f9 l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
00000c90 l       .debug_frame   00000000 
f00022d0 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
f00022d0 l       .text  00000000 
f00022d0 l       .text  00000000 
f00022d0 l       .text  00000000 
f00022d0 l       .text  00000000 
f00022d8 l       .text  00000000 
f00022dc l       .text  00000000 
f00022dc l       .text  00000000 
f00022e0 l       .text  00000000 
f00022e0 l       .text  00000000 
f00022e4 l       .text  00000000 
f00022e4 l       .text  00000000 
f00022f0 l       .text  00000000 
f00022f2 l       .text  00000000 
f00022f2 l       .text  00000000 
f00022f8 l       .text  00000000 
f00022f8 l       .text  00000000 
f00022fc l       .text  00000000 
f00022fe l       .text  00000000 
f0002302 l       .text  00000000 
f0002302 l       .text  00000000 
f0002304 l       .text  00000000 
f0002304 l       .text  00000000 
f0002306 l       .text  00000000 
f0002306 l       .text  00000000 
f000230e l       .text  00000000 
f0002312 l       .text  00000000 
f0002314 l       .text  00000000 
f0002318 l       .text  00000000 
f000231c l       .text  00000000 
f000231c l       .text  00000000 
f0002320 l       .text  00000000 
f0002320 l       .text  00000000 
f0002324 l       .text  00000000 
f0002326 l       .text  00000000 
f0002326 l       .text  00000000 
f000232a l       .text  00000000 
f000232a l       .text  00000000 
f000232c l       .text  00000000 
f000232c l       .text  00000000 
f000232e l       .text  00000000 
f000232e l       .text  00000000 
f0002332 l       .text  00000000 
f0002332 l       .text  00000000 
f0002336 l       .text  00000000 
f0002338 l       .text  00000000 
f000233e l       .text  00000000 
f000233e l       .text  00000000 
f0002342 l       .text  00000000 
f0002346 l       .text  00000000 
f000234e l       .text  00000000 
f000234e l       .text  00000000 
f0002350 l       .text  00000000 
f0002350 l       .text  00000000 
f0002352 l       .text  00000000 
f0002352 l       .text  00000000 
f0002358 l       .text  00000000 
f0002358 l       .text  00000000 
f0002358 l       .text  00000000 
f0002358 l       .text  00000000 
f0002358 l       .text  00000000 
f000235c l       .text  00000000 
f000235c l       .text  00000000 
f0002360 l       .text  00000000 
f0002360 l       .text  00000000 
f0002368 l       .text  00000000 
f0002368 l       .text  00000000 
f000236c l       .text  00000000 
f0002370 l       .text  00000000 
f0002370 l       .text  00000000 
f0002372 l       .text  00000000 
f0002372 l       .text  00000000 
f0002376 l       .text  00000000 
f0002376 l       .text  00000000 
f000237a l       .text  00000000 
f000237a l       .text  00000000 
f000237c l       .text  00000000 
f000237e l       .text  00000000 
f0002380 l       .text  00000000 
f0002380 l       .text  00000000 
f0002384 l       .text  00000000 
f0002388 l       .text  00000000 
f0002398 l       .text  00000000 
f0002398 l       .text  00000000 
f000239c l       .text  00000000 
f000239c l       .text  00000000 
f000239e l       .text  00000000 
f000239e l       .text  00000000 
f00023a0 l       .text  00000000 
f00023a0 l       .text  00000000 
f00023a4 l       .text  00000000 
f00023a4 l       .text  00000000 
f00023aa l       .text  00000000 
f00023ae l       .text  00000000 
f00023ae l       .text  00000000 
f00023b2 l       .text  00000000 
f00023b6 l       .text  00000000 
f00023b8 l       .text  00000000 
f00023ba l       .text  00000000 
f00023ba l       .text  00000000 
f00023ba l       .text  00000000 
f00023ba l       .text  00000000 
f00023ba l       .text  00000000 
f00023be l       .text  00000000 
f00023be l       .text  00000000 
f00023c2 l       .text  00000000 
f00023c2 l       .text  00000000 
f00023ca l       .text  00000000 
f00023ce l       .text  00000000 
f00023d2 l       .text  00000000 
f00023d4 l       .text  00000000 
f00023d6 l       .text  00000000 
f00023d6 l       .text  00000000 
f00023da l       .text  00000000 
f00023de l       .text  00000000 
f00023de l       .text  00000000 
f00023e0 l       .text  00000000 
f00023e2 l       .text  00000000 
f00023e4 l       .text  00000000 
f00023ea l       .text  00000000 
f00023ea l       .text  00000000 
f00023ec l       .text  00000000 
f00023f0 l       .text  00000000 
f00023fc l       .text  00000000 
f000240a l       .text  00000000 
f000240a l       .text  00000000 
f000240e l       .text  00000000 
f0002410 l       .text  00000000 
f0002410 l       .text  00000000 
f0002414 l       .text  00000000 
f0002418 l       .text  00000000 
f0002418 l       .text  00000000 
f000241c l       .text  00000000 
f0002420 l       .text  00000000 
f0002424 l       .text  00000000 
f0002428 l       .text  00000000 
f000242c l       .text  00000000 
f000242c l       .text  00000000 
f0002430 l       .text  00000000 
f0002434 l       .text  00000000 
f0002436 l       .text  00000000 
f0002436 l       .text  00000000 
f0002438 l       .text  00000000 
f000243c l       .text  00000000 
f000243c l       .text  00000000 
f0002444 l       .text  00000000 
f0002448 l       .text  00000000 
f0002448 l       .text  00000000 
f000244c l       .text  00000000 
f0002450 l       .text  00000000 
f0002454 l       .text  00000000 
f0002456 l       .text  00000000 
f000245a l       .text  00000000 
f000245a l       .text  00000000 
f000245e l       .text  00000000 
f000245e l       .text  00000000 
f0002462 l       .text  00000000 
f0002464 l       .text  00000000 
f0002464 l       .text  00000000 
f0002468 l       .text  00000000 
f0002468 l       .text  00000000 
f0002468 l       .text  00000000 
f0002468 l       .text  00000000 
f0002468 l       .text  00000000 
f000246c l       .text  00000000 
f000246c l       .text  00000000 
f0002470 l       .text  00000000 
f0002470 l       .text  00000000 
f0002478 l       .text  00000000 
f0002478 l       .text  00000000 
f000247c l       .text  00000000 
f000247e l       .text  00000000 
f0002482 l       .text  00000000 
f0002482 l       .text  00000000 
f0002484 l       .text  00000000 
f0002484 l       .text  00000000 
f0002488 l       .text  00000000 
f0002488 l       .text  00000000 
f000248e l       .text  00000000 
f000248e l       .text  00000000 
f0002492 l       .text  00000000 
f0002492 l       .text  00000000 
f000249a l       .text  00000000 
f000249e l       .text  00000000 
f000249e l       .text  00000000 
f00024a0 l       .text  00000000 
f00024a4 l       .text  00000000 
f00024a4 l       .text  00000000 
f00024a6 l       .text  00000000 
f00024a8 l       .text  00000000 
f00024a8 l       .text  00000000 
f00024b0 l       .text  00000000 
f00024b0 l       .text  00000000 
f00024b4 l       .text  00000000 
f00024b4 l       .text  00000000 
f00024be l       .text  00000000 
f00024c2 l       .text  00000000 
f00024c2 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024ca l       .text  00000000 
f00024ce l       .text  00000000 
f00024ce l       .text  00000000 
f00024d2 l       .text  00000000 
f00024d6 l       .text  00000000 
f00024d6 l       .text  00000000 
f00024d8 l       .text  00000000 
f00024dc l       .text  00000000 
f00024dc l       .text  00000000 
f00024e0 l       .text  00000000 
f00024e4 l       .text  00000000 
f00024e8 l       .text  00000000 
f00024ec l       .text  00000000 
f00024f0 l       .text  00000000 
f00024f2 l       .text  00000000 
f00024f2 l       .text  00000000 
f00024f6 l       .text  00000000 
f00024f6 l       .text  00000000 
f00024f8 l       .text  00000000 
f00024fa l       .text  00000000 
f00024fa l       .text  00000000 
f0002502 l       .text  00000000 
f0002506 l       .text  00000000 
f0002506 l       .text  00000000 
f0002508 l       .text  00000000 
f000250c l       .text  00000000 
f000250c l       .text  00000000 
f000250e l       .text  00000000 
f0002510 l       .text  00000000 
f0002510 l       .text  00000000 
f0002512 l       .text  00000000 
f0002512 l       .text  00000000 
f0002516 l       .text  00000000 
f0002516 l       .text  00000000 
f0002518 l       .text  00000000 
f0002518 l       .text  00000000 
f000251c l       .text  00000000 
f000251c l       .text  00000000 
f000251e l       .text  00000000 
f000251e l       .text  00000000 
f0002522 l       .text  00000000 
f0002522 l       .text  00000000 
f0002524 l       .text  00000000 
f0002524 l       .text  00000000 
f0002526 l       .text  00000000 
f0002526 l       .text  00000000 
f0002528 l       .text  00000000 
f0002528 l       .text  00000000 
00005544 l       .debug_loc     00000000 
0000556a l       .debug_loc     00000000 
00005590 l       .debug_loc     00000000 
000055b6 l       .debug_loc     00000000 
000055dc l       .debug_loc     00000000 
000055fb l       .debug_loc     00000000 
0000561a l       .debug_loc     00000000 
00005640 l       .debug_loc     00000000 
0000565b l       .debug_loc     00000000 
000056a4 l       .debug_loc     00000000 
000056ca l       .debug_loc     00000000 
000056ec l       .debug_loc     00000000 
00005707 l       .debug_loc     00000000 
00005722 l       .debug_loc     00000000 
0000573d l       .debug_loc     00000000 
00005758 l       .debug_loc     00000000 
00005773 l       .debug_loc     00000000 
0000578e l       .debug_loc     00000000 
000057de l       .debug_loc     00000000 
000057f9 l       .debug_loc     00000000 
00005814 l       .debug_loc     00000000 
00005836 l       .debug_loc     00000000 
00005851 l       .debug_loc     00000000 
0000586c l       .debug_loc     00000000 
00005887 l       .debug_loc     00000000 
000058a2 l       .debug_loc     00000000 
000058bd l       .debug_loc     00000000 
000058dc l       .debug_loc     00000000 
000058fb l       .debug_loc     00000000 
00005921 l       .debug_loc     00000000 
0000593c l       .debug_loc     00000000 
00005985 l       .debug_loc     00000000 
000059ab l       .debug_loc     00000000 
000059c6 l       .debug_loc     00000000 
000059e1 l       .debug_loc     00000000 
000059fc l       .debug_loc     00000000 
00005a17 l       .debug_loc     00000000 
00005a32 l       .debug_loc     00000000 
00005a4d l       .debug_loc     00000000 
00005a68 l       .debug_loc     00000000 
00005a87 l       .debug_loc     00000000 
00005aa6 l       .debug_loc     00000000 
00005ac1 l       .debug_loc     00000000 
00005b08 l       .debug_loc     00000000 
00005b23 l       .debug_loc     00000000 
00005b3e l       .debug_loc     00000000 
00005b64 l       .debug_loc     00000000 
00005b7f l       .debug_loc     00000000 
00005b9a l       .debug_loc     00000000 
00005bb5 l       .debug_loc     00000000 
00005bd0 l       .debug_loc     00000000 
00005beb l       .debug_loc     00000000 
00005c11 l       .debug_loc     00000000 
00005c2c l       .debug_loc     00000000 
00005c52 l       .debug_loc     00000000 
00005c78 l       .debug_loc     00000000 
00005c95 l       .debug_loc     00000000 
00005cf0 l       .debug_loc     00000000 
00005d0b l       .debug_loc     00000000 
00005d31 l       .debug_loc     00000000 
00005d57 l       .debug_loc     00000000 
00005d72 l       .debug_loc     00000000 
00005d98 l       .debug_loc     00000000 
00005df5 l       .debug_loc     00000000 
00005e10 l       .debug_loc     00000000 
00005e2b l       .debug_loc     00000000 
00005e88 l       .debug_loc     00000000 
00005ea5 l       .debug_loc     00000000 
00005ec0 l       .debug_loc     00000000 
00005f07 l       .debug_loc     00000000 
00005f22 l       .debug_loc     00000000 
00005f3d l       .debug_loc     00000000 
00005f58 l       .debug_loc     00000000 
00005f73 l       .debug_loc     00000000 
00005f8e l       .debug_loc     00000000 
00005fb4 l       .debug_loc     00000000 
00005fcf l       .debug_loc     00000000 
00005fea l       .debug_loc     00000000 
00006005 l       .debug_loc     00000000 
00006020 l       .debug_loc     00000000 
0000604d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003688 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
000008a8 l       .debug_ranges  00000000 
000036a4 l       .debug_str     00000000 
000036ae l       .debug_str     00000000 
000036b8 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00000397 l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000b14 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
000036c2 l       .debug_str     00000000 
000037b7 l       .debug_str     00000000 
000037c1 l       .debug_str     00000000 
00002d23 l       .debug_str     00000000 
000036dc l       .debug_str     00000000 
000036e7 l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
00002c6b l       .debug_str     00000000 
000036f3 l       .debug_str     00000000 
00003705 l       .debug_str     00000000 
00003715 l       .debug_str     00000000 
000036ca l       .debug_str     00000000 
00003725 l       .debug_str     00000000 
00000b82 l       .debug_str     00000000 
00000b8a l       .debug_str     00000000 
00001a7e l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
0000372f l       .debug_str     00000000 
00000b3f l       .debug_str     00000000 
000020f9 l       .debug_str     00000000 
0000377d l       .debug_str     00000000 
00003782 l       .debug_str     00000000 
00003786 l       .debug_str     00000000 
0000378c l       .debug_str     00000000 
00003709 l       .debug_str     00000000 
00000371 l       .debug_str     00000000 
00003719 l       .debug_str     00000000 
00000838 l       .debug_ranges  00000000 
00002b65 l       .debug_str     00000000 
00000820 l       .debug_ranges  00000000 
00002d9c l       .debug_str     00000000 
00003791 l       .debug_str     00000000 
00003798 l       .debug_str     00000000 
00000850 l       .debug_ranges  00000000 
0000374b l       .debug_str     00000000 
000037a0 l       .debug_str     00000000 
000037a4 l       .debug_str     00000000 
000037a8 l       .debug_str     00000000 
000037ad l       .debug_str     00000000 
000037b2 l       .debug_str     00000000 
000037bc l       .debug_str     00000000 
00003752 l       .debug_str     00000000 
00001c6e l       .debug_str     00000000 
00002a45 l       .debug_str     00000000 
000037c7 l       .debug_str     00000000 
00000868 l       .debug_ranges  00000000 
000037cc l       .debug_str     00000000 
00003738 l       .debug_str     00000000 
00002eaa l       .debug_str     00000000 
00002a4c l       .debug_str     00000000 
00000880 l       .debug_ranges  00000000 
0000375a l       .debug_str     00000000 
0000295b l       .debug_str     00000000 
0000376c l       .debug_str     00000000 
00003774 l       .debug_str     00000000 
00000871 l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000004f9 l       .debug_str     00000000 
00000cc0 l       .debug_frame   00000000 
f0002358 l       .text  00000000 
f00023ba l       .text  00000000 
f0002468 l       .text  00000000 
f0002528 l       .text  00000000 
00000000 l    df *ABS*  00000000 tasks.c
f0002528 l       .text  00000000 
f0002528 l       .text  00000000 
f0002528 l       .text  00000000 
f000252a l       .text  00000000 
f0002540 l       .text  00000000 
f0002542 l       .text  00000000 
f0002544 l       .text  00000000 
f0002546 l       .text  00000000 
f0002548 l       .text  00000000 
f000254a l       .text  00000000 
f000254a l       .text  00000000 
f000254e l       .text  00000000 
f0002552 l       .text  00000000 
f0002552 l       .text  00000000 
f0002554 l       .text  00000000 
f0002558 l       .text  00000000 
f000255a l       .text  00000000 
f000255a l       .text  00000000 
f0002560 l       .text  00000000 
f0002560 l       .text  00000000 
f0002562 l       .text  00000000 
f0002562 l       .text  00000000 
f0002564 l       .text  00000000 
f0002564 l       .text  00000000 
f0002566 l       .text  00000000 
f0002566 l       .text  00000000 
f000256c l       .text  00000000 
f000256e l       .text  00000000 
f000256e l       .text  00000000 
f0002570 l       .text  00000000 
f0002574 l       .text  00000000 
f0002574 l       .text  00000000 
f000257c l       .text  00000000 
f0002584 l       .text  00000000 
f0002588 l       .text  00000000 
f000258c l       .text  00000000 
f000258c l       .text  00000000 
f0002592 l       .text  00000000 
f0002596 l       .text  00000000 
f000259a l       .text  00000000 
f00025a0 l       .text  00000000 
f00025a0 l       .text  00000000 
f00025a2 l       .text  00000000 
f00025a4 l       .text  00000000 
f00025a4 l       .text  00000000 
f00025a6 l       .text  00000000 
f00025a6 l       .text  00000000 
f00025aa l       .text  00000000 
f00025b0 l       .text  00000000 
f00025b0 l       .text  00000000 
f00025b4 l       .text  00000000 
f00025b6 l       .text  00000000 
f00025b6 l       .text  00000000 
f00025ba l       .text  00000000 
f00025be l       .text  00000000 
f00025c2 l       .text  00000000 
f00025c2 l       .text  00000000 
f00025c6 l       .text  00000000 
f00025c8 l       .text  00000000 
f00025c8 l       .text  00000000 
f00025ce l       .text  00000000 
f00025d6 l       .text  00000000 
f00025da l       .text  00000000 
f00025de l       .text  00000000 
f00025e2 l       .text  00000000 
f00025ec l       .text  00000000 
f00025ec l       .text  00000000 
f00025f0 l       .text  00000000 
f00025f4 l       .text  00000000 
f00025f8 l       .text  00000000 
f00025f8 l       .text  00000000 
f00025fc l       .text  00000000 
e0002094 l     O .bss   00000004 xSchedulerRunning
f00025fc l       .text  00000000 
f0002608 l       .text  00000000 
f0002610 l       .text  00000000 
f0002612 l       .text  00000000 
f0002612 l       .text  00000000 
f0002616 l       .text  00000000 
f000261c l       .text  00000000 
f0002620 l       .text  00000000 
e0002090 l     O .bss   00000004 uxCurrentNumberOfTasks
f0002620 l       .text  00000000 
f000262e l       .text  00000000 
e00020dc l     O .bss   00000064 pxReadyTasksLists
f0002632 l       .text  00000000 
f000263a l       .text  00000000 
f000263c l       .text  00000000 
f000263c l       .text  00000000 
f0002640 l       .text  00000000 
f0002642 l       .text  00000000 
f0002646 l       .text  00000000 
f0002648 l       .text  00000000 
f000264c l       .text  00000000 
f0002650 l       .text  00000000 
f0002656 l       .text  00000000 
f000265a l       .text  00000000 
f000265e l       .text  00000000 
f0002662 l       .text  00000000 
f0002668 l       .text  00000000 
f0002668 l       .text  00000000 
f000266e l       .text  00000000 
f000266e l       .text  00000000 
f0002670 l       .text  00000000 
f0002670 l       .text  00000000 
f0002674 l       .text  00000000 
e000217c l     O .bss   00000014 xDelayedTaskList1
f0002674 l       .text  00000000 
f0002680 l       .text  00000000 
e0002190 l     O .bss   00000014 xDelayedTaskList2
f0002680 l       .text  00000000 
f000268c l       .text  00000000 
e0002168 l     O .bss   00000014 xPendingReadyList
f000268c l       .text  00000000 
f0002696 l       .text  00000000 
e0002140 l     O .bss   00000014 xTasksWaitingTermination
f0002696 l       .text  00000000 
f00026a0 l       .text  00000000 
e0002154 l     O .bss   00000014 xSuspendedTaskList
f00026a0 l       .text  00000000 
f00026aa l       .text  00000000 
e0002098 l     O .bss   00000004 pxDelayedTaskList
f00026aa l       .text  00000000 
e000209c l     O .bss   00000004 pxOverflowDelayedTaskList
f00026b6 l       .text  00000000 
f00026c2 l       .text  00000000 
e0002088 l     O .bss   00000004 uxTaskNumber
f00026c2 l       .text  00000000 
f00026d0 l       .text  00000000 
e0002084 l     O .bss   00000004 uxTopReadyPriority
f00026ea l       .text  00000000 
f00026ea l       .text  00000000 
f00026f2 l       .text  00000000 
f000270c l       .text  00000000 
f0002710 l       .text  00000000 
f0002710 l       .text  00000000 
f0002712 l       .text  00000000 
f0002712 l       .text  00000000 
f0002716 l       .text  00000000 
f0002718 l       .text  00000000 
f0002718 l       .text  00000000 
f000271c l       .text  00000000 
f000271c l       .text  00000000 
f0002724 l       .text  00000000 
f0002738 l       .text  00000000 
f0002738 l       .text  00000000 
e000208c l     O .bss   00000004 uxDeletedTasksWaitingCleanUp
e00020ac l     O .bss   00000004 xNextTaskUnblockTime
f0002738 l       .text  00000000 
f0002738 l       .text  00000000 
f0002738 l       .text  00000000 
f0002738 l       .text  00000000 
f0002742 l       .text  00000000 
f0002744 l       .text  00000000 
f000274e l       .text  00000000 
f0002750 l       .text  00000000 
f0002752 l       .text  00000000 
f0002754 l       .text  00000000 
f000275a l       .text  00000000 
f000275c l       .text  00000000 
f000275e l       .text  00000000 
f0002760 l       .text  00000000 
f0002762 l       .text  00000000 
f0002766 l       .text  00000000 
f0002768 l       .text  00000000 
f0002768 l       .text  00000000 
f0002768 l       .text  00000000 
f0002768 l       .text  00000000 
f0002768 l       .text  00000000 
f000276a l       .text  00000000 
f000276a l       .text  00000000 
f000276e l       .text  00000000 
e00020a0 l     O .bss   00000004 uxSchedulerSuspended
f0002778 l       .text  00000000 
e00020a4 l     O .bss   00000004 xYieldPending
f000277a l       .text  00000000 
f0002788 l       .text  00000000 
f0002794 l       .text  00000000 
f00027a4 l       .text  00000000 
f00027a8 l       .text  00000000 
f00027b4 l       .text  00000000 
f00027b4 l       .text  00000000 
f0002824 l       .text  00000000 
f0002824 l       .text  00000000 
f0002826 l       .text  00000000 
f0002826 l       .text  00000000 
f000282a l       .text  00000000 
f000282a l       .text  00000000 
f0002834 l       .text  00000000 
f0002838 l       .text  00000000 
f000283c l       .text  00000000 
f0002842 l       .text  00000000 
f0002844 l       .text  00000000 
f0002846 l       .text  00000000 
f0002848 l       .text  00000000 
f000284c l       .text  00000000 
f000284c l       .text  00000000 
f0002854 l       .text  00000000 
f0002854 l       .text  00000000 
f0002854 l       .text  00000000 
f0002854 l       .text  00000000 
f0002854 l       .text  00000000 
f0002856 l       .text  00000000 
f0002856 l       .text  00000000 
f0002858 l       .text  00000000 
f00028ba l     F .text  00000082 prvIdleTask
e00020a8 l     O .bss   00000004 xIdleTaskHandle
f000287a l       .text  00000000 
f000287a l       .text  00000000 
f000287c l       .text  00000000 
f000287c l       .text  00000000 
f0002880 l       .text  00000000 
f0002884 l       .text  00000000 
f0002884 l       .text  00000000 
f0002890 l       .text  00000000 
e00020b0 l     O .bss   00000004 xTickCount
f000289a l       .text  00000000 
f00028a6 l       .text  00000000 
f00028aa l       .text  00000000 
f00028aa l       .text  00000000 
f00028b4 l       .text  00000000 
f00028ba l       .text  00000000 
f00028ba l       .text  00000000 
f00028ba l       .text  00000000 
f00028ba l       .text  00000000 
f00028ba l       .text  00000000 
f00028bc l       .text  00000000 
f00028ca l       .text  00000000 
f00028ca l       .text  00000000 
f00028f2 l       .text  00000000 
f00028f2 l       .text  00000000 
f00028f4 l       .text  00000000 
f00028f6 l       .text  00000000 
f00028f6 l       .text  00000000 
f00028fa l       .text  00000000 
f00028fe l       .text  00000000 
f0002900 l       .text  00000000 
f0002904 l       .text  00000000 
f000290a l       .text  00000000 
f000290e l       .text  00000000 
f000290e l       .text  00000000 
f0002914 l       .text  00000000 
f0002914 l       .text  00000000 
f0002918 l       .text  00000000 
f000291a l       .text  00000000 
f000291a l       .text  00000000 
f0002924 l       .text  00000000 
f000292a l       .text  00000000 
f000292c l       .text  00000000 
f000292c l       .text  00000000 
f000292e l       .text  00000000 
f0002930 l       .text  00000000 
f0002930 l       .text  00000000 
f0002934 l       .text  00000000 
f0002934 l       .text  00000000 
f0002936 l       .text  00000000 
f0002936 l       .text  00000000 
f000293c l       .text  00000000 
f000293c l       .text  00000000 
f000293c l       .text  00000000 
f000293c l       .text  00000000 
f000293c l       .text  00000000 
f000293c l       .text  00000000 
f000294a l       .text  00000000 
f000294a l       .text  00000000 
f000294c l       .text  00000000 
f000294c l       .text  00000000 
f000294c l       .text  00000000 
f000294c l       .text  00000000 
f000294c l       .text  00000000 
f000294e l       .text  00000000 
f000294e l       .text  00000000 
f0002956 l       .text  00000000 
f0002956 l       .text  00000000 
f0002956 l       .text  00000000 
f000295a l       .text  00000000 
f000295a l       .text  00000000 
f0002964 l       .text  00000000 
f0002966 l       .text  00000000 
f0002970 l       .text  00000000 
f0002976 l       .text  00000000 
f0002978 l       .text  00000000 
f0002978 l       .text  00000000 
f0002986 l       .text  00000000 
f0002988 l       .text  00000000 
f000298a l       .text  00000000 
f0002994 l       .text  00000000 
f0002996 l       .text  00000000 
f00029a0 l       .text  00000000 
f00029a8 l       .text  00000000 
f00029aa l       .text  00000000 
f00029aa l       .text  00000000 
f00029ac l       .text  00000000 
f00029c6 l       .text  00000000 
f00029c6 l       .text  00000000 
f00029ca l       .text  00000000 
f00029ca l       .text  00000000 
f00029d0 l       .text  00000000 
f00029d6 l       .text  00000000 
f00029d8 l       .text  00000000 
f00029e0 l       .text  00000000 
f00029e2 l       .text  00000000 
f00029ec l       .text  00000000 
f00029ec l       .text  00000000 
f00029ec l       .text  00000000 
f00029ec l       .text  00000000 
f00029f2 l       .text  00000000 
f00029f8 l       .text  00000000 
f00029fa l       .text  00000000 
f00029fe l       .text  00000000 
f0002a02 l       .text  00000000 
f0002a04 l       .text  00000000 
f0002a0a l       .text  00000000 
f0002a0a l       .text  00000000 
f0002a0e l       .text  00000000 
f0002a16 l       .text  00000000 
f0002a16 l       .text  00000000 
f0002a1e l       .text  00000000 
f0002a2e l       .text  00000000 
f0002a32 l       .text  00000000 
f0002a32 l       .text  00000000 
f0002a36 l       .text  00000000 
f0002a38 l       .text  00000000 
f0002a3c l       .text  00000000 
f0002a40 l       .text  00000000 
f0002a40 l       .text  00000000 
f0002a42 l       .text  00000000 
f0002a44 l       .text  00000000 
f0002a44 l       .text  00000000 
f0002a50 l       .text  00000000 
f0002a52 l       .text  00000000 
f0002a52 l       .text  00000000 
f0002a5a l       .text  00000000 
f0002a5c l       .text  00000000 
f0002a66 l       .text  00000000 
e00020b4 l     O .bss   00000004 xPendedTicks
f0002a66 l       .text  00000000 
f0002a70 l       .text  00000000 
f0002a70 l       .text  00000000 
f0002a72 l       .text  00000000 
f0002a72 l       .text  00000000 
f0002a74 l       .text  00000000 
f0002a74 l       .text  00000000 
f0002a76 l       .text  00000000 
f0002a78 l       .text  00000000 
f0002a7c l       .text  00000000 
f0002a7c l       .text  00000000 
f0002a80 l       .text  00000000 
f0002a84 l       .text  00000000 
f0002a84 l       .text  00000000 
f0002a92 l       .text  00000000 
f0002a92 l       .text  00000000 
f0002a92 l       .text  00000000 
f0002a92 l       .text  00000000 
f0002a92 l       .text  00000000 
f0002a92 l       .text  00000000 
f0002a9c l       .text  00000000 
f0002a9e l       .text  00000000 
f0002aae l       .text  00000000 
f0002aae l       .text  00000000 
f0002ab8 l       .text  00000000 
f0002abc l       .text  00000000 
f0002abc l       .text  00000000 
f0002ac0 l       .text  00000000 
f0002ac0 l       .text  00000000 
f0002ad0 l       .text  00000000 
f0002ad4 l       .text  00000000 
f0002ad4 l       .text  00000000 
f0002ad8 l       .text  00000000 
e00020b8 l     O .bss   00000004 xNumOfOverflows
f0002af6 l       .text  00000000 
f0002af6 l       .text  00000000 
f0002afc l       .text  00000000 
f0002afe l       .text  00000000 
f0002afe l       .text  00000000 
f0002b08 l       .text  00000000 
f0002b0e l       .text  00000000 
f0002b0e l       .text  00000000 
f0002b12 l       .text  00000000 
f0002b16 l       .text  00000000 
f0002b1c l       .text  00000000 
f0002b1e l       .text  00000000 
f0002b20 l       .text  00000000 
f0002b32 l       .text  00000000 
f0002b32 l       .text  00000000 
f0002b3a l       .text  00000000 
f0002b3a l       .text  00000000 
f0002b3c l       .text  00000000 
f0002b3c l       .text  00000000 
f0002b40 l       .text  00000000 
f0002b40 l       .text  00000000 
f0002b46 l       .text  00000000 
f0002b4c l       .text  00000000 
f0002b4e l       .text  00000000 
f0002b4e l       .text  00000000 
f0002b52 l       .text  00000000 
f0002b52 l       .text  00000000 
f0002b56 l       .text  00000000 
f0002b58 l       .text  00000000 
f0002b5e l       .text  00000000 
f0002b5e l       .text  00000000 
f0002b60 l       .text  00000000 
f0002b60 l       .text  00000000 
f0002b62 l       .text  00000000 
f0002b62 l       .text  00000000 
f0002b6c l       .text  00000000 
f0002b6e l       .text  00000000 
f0002b6e l       .text  00000000 
f0002b72 l       .text  00000000 
f0002b72 l       .text  00000000 
f0002b76 l       .text  00000000 
f0002b78 l       .text  00000000 
f0002b82 l       .text  00000000 
f0002b82 l       .text  00000000 
f0002b92 l       .text  00000000 
f0002b92 l       .text  00000000 
f0002b9a l       .text  00000000 
f0002baa l       .text  00000000 
f0002bae l       .text  00000000 
f0002bae l       .text  00000000 
f0002bb4 l       .text  00000000 
f0002bb6 l       .text  00000000 
f0002bb6 l       .text  00000000 
f0002bbc l       .text  00000000 
f0002bbc l       .text  00000000 
f0002bc0 l       .text  00000000 
f0002bc0 l       .text  00000000 
0000606d l       .debug_loc     00000000 
000060a9 l       .debug_loc     00000000 
000060cf l       .debug_loc     00000000 
000060ea l       .debug_loc     00000000 
00006126 l       .debug_loc     00000000 
0000614c l       .debug_loc     00000000 
00006172 l       .debug_loc     00000000 
000061a3 l       .debug_loc     00000000 
00006200 l       .debug_loc     00000000 
00006226 l       .debug_loc     00000000 
0000624c l       .debug_loc     00000000 
00006272 l       .debug_loc     00000000 
00006298 l       .debug_loc     00000000 
000062be l       .debug_loc     00000000 
000062e4 l       .debug_loc     00000000 
000062ff l       .debug_loc     00000000 
00006327 l       .debug_loc     00000000 
00006363 l       .debug_loc     00000000 
00006396 l       .debug_loc     00000000 
000063b1 l       .debug_loc     00000000 
000063cc l       .debug_loc     00000000 
000063f2 l       .debug_loc     00000000 
00006439 l       .debug_loc     00000000 
00006496 l       .debug_loc     00000000 
000064e8 l       .debug_loc     00000000 
0000650e l       .debug_loc     00000000 
00006534 l       .debug_loc     00000000 
00006565 l       .debug_loc     00000000 
00006580 l       .debug_loc     00000000 
000065a6 l       .debug_loc     00000000 
000065c1 l       .debug_loc     00000000 
000065dc l       .debug_loc     00000000 
000065f7 l       .debug_loc     00000000 
0000661f l       .debug_loc     00000000 
0000663a l       .debug_loc     00000000 
00006655 l       .debug_loc     00000000 
00006686 l       .debug_loc     00000000 
000066ac l       .debug_loc     00000000 
000066ec l       .debug_loc     00000000 
0000671d l       .debug_loc     00000000 
0000674e l       .debug_loc     00000000 
0000677f l       .debug_loc     00000000 
0000679a l       .debug_loc     00000000 
000067c0 l       .debug_loc     00000000 
0000681d l       .debug_loc     00000000 
00006838 l       .debug_loc     00000000 
0000688a l       .debug_loc     00000000 
000068d1 l       .debug_loc     00000000 
000068f7 l       .debug_loc     00000000 
0000691f l       .debug_loc     00000000 
00006945 l       .debug_loc     00000000 
00006960 l       .debug_loc     00000000 
000069bd l       .debug_loc     00000000 
000069e3 l       .debug_loc     00000000 
00006a40 l       .debug_loc     00000000 
00006a66 l       .debug_loc     00000000 
00006a8e l       .debug_loc     00000000 
00006ae6 l       .debug_loc     00000000 
00006b48 l       .debug_loc     00000000 
00006b63 l       .debug_loc     00000000 
00006b7e l       .debug_loc     00000000 
00006b99 l       .debug_loc     00000000 
00006bb4 l       .debug_loc     00000000 
00006be7 l       .debug_loc     00000000 
00006c33 l       .debug_loc     00000000 
00006c4e l       .debug_loc     00000000 
00006c69 l       .debug_loc     00000000 
00006c84 l       .debug_loc     00000000 
00006c9f l       .debug_loc     00000000 
00006cd3 l       .debug_loc     00000000 
00006d0f l       .debug_loc     00000000 
00006d2a l       .debug_loc     00000000 
00006d45 l       .debug_loc     00000000 
00006d60 l       .debug_loc     00000000 
00006d7b l       .debug_loc     00000000 
00006d96 l       .debug_loc     00000000 
00006db1 l       .debug_loc     00000000 
00006dcc l       .debug_loc     00000000 
00006de7 l       .debug_loc     00000000 
00006e02 l       .debug_loc     00000000 
00006e3e l       .debug_loc     00000000 
00006e74 l       .debug_loc     00000000 
00006ebb l       .debug_loc     00000000 
00006ed6 l       .debug_loc     00000000 
00006f34 l       .debug_loc     00000000 
00006f4f l       .debug_loc     00000000 
00006f81 l       .debug_loc     00000000 
00006fa9 l       .debug_loc     00000000 
00006fc4 l       .debug_loc     00000000 
00006fea l       .debug_loc     00000000 
00007005 l       .debug_loc     00000000 
00007021 l       .debug_loc     00000000 
0000705d l       .debug_loc     00000000 
0000708e l       .debug_loc     00000000 
000070c1 l       .debug_loc     00000000 
000070dc l       .debug_loc     00000000 
000070f7 l       .debug_loc     00000000 
00007128 l       .debug_loc     00000000 
00007159 l       .debug_loc     00000000 
0000718a l       .debug_loc     00000000 
000071be l       .debug_loc     00000000 
000071e4 l       .debug_loc     00000000 
000071ff l       .debug_loc     00000000 
0000721a l       .debug_loc     00000000 
00007235 l       .debug_loc     00000000 
0000725b l       .debug_loc     00000000 
00007276 l       .debug_loc     00000000 
00007291 l       .debug_loc     00000000 
000072ac l       .debug_loc     00000000 
000072c7 l       .debug_loc     00000000 
000072ed l       .debug_loc     00000000 
00007308 l       .debug_loc     00000000 
00007323 l       .debug_loc     00000000 
00007349 l       .debug_loc     00000000 
00007364 l       .debug_loc     00000000 
0000737f l       .debug_loc     00000000 
0000739a l       .debug_loc     00000000 
000073b5 l       .debug_loc     00000000 
00007407 l       .debug_loc     00000000 
00007459 l       .debug_loc     00000000 
0000747f l       .debug_loc     00000000 
0000749a l       .debug_loc     00000000 
000074c1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000037d4 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
000009a0 l       .debug_ranges  00000000 
00001302 l       .debug_str     00000000 
000038de l       .debug_str     00000000 
000038d7 l       .debug_str     00000000 
00000ea4 l       .debug_str     00000000 
000037ee l       .debug_str     00000000 
00003807 l       .debug_str     00000000 
0000414d l       .debug_str     00000000 
000038a3 l       .debug_str     00000000 
000038ae l       .debug_str     00000000 
000011b2 l       .debug_str     00000000 
000038b6 l       .debug_str     00000000 
000038c8 l       .debug_str     00000000 
000037fb l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
00003887 l       .debug_str     00000000 
00003898 l       .debug_str     00000000 
00003816 l       .debug_str     00000000 
0000382c l       .debug_str     00000000 
00003833 l       .debug_str     00000000 
0000383e l       .debug_str     00000000 
00003846 l       .debug_str     00000000 
00003821 l       .debug_str     00000000 
00003892 l       .debug_str     00000000 
00003852 l       .debug_str     00000000 
00003862 l       .debug_str     00000000 
0000386a l       .debug_str     00000000 
00000e6a l       .debug_str     00000000 
00003883 l       .debug_str     00000000 
00003873 l       .debug_str     00000000 
000003a0 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000397 l       .debug_str     00000000 
000038e4 l       .debug_str     00000000 
000038f6 l       .debug_str     00000000 
00003908 l       .debug_str     00000000 
0000390f l       .debug_str     00000000 
00003921 l       .debug_str     00000000 
0000393b l       .debug_str     00000000 
0000394d l       .debug_str     00000000 
00003966 l       .debug_str     00000000 
00003979 l       .debug_str     00000000 
0000398b l       .debug_str     00000000 
0000399d l       .debug_str     00000000 
000039b0 l       .debug_str     00000000 
000039bd l       .debug_str     00000000 
000039da l       .debug_str     00000000 
000039f1 l       .debug_str     00000000 
00000e6b l       .debug_str     00000000 
0000017f l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00003a03 l       .debug_str     00000000 
00003a18 l       .debug_str     00000000 
00003a26 l       .debug_str     00000000 
000011a5 l       .debug_str     00000000 
00003a36 l       .debug_str     00000000 
00003a4b l       .debug_str     00000000 
00003a56 l       .debug_str     00000000 
00003a63 l       .debug_str     00000000 
00003a73 l       .debug_str     00000000 
00003a7c l       .debug_str     00000000 
00003a83 l       .debug_str     00000000 
00003a8c l       .debug_str     00000000 
00003a97 l       .debug_str     00000000 
00003aa0 l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
00003aa9 l       .debug_str     00000000 
00003abe l       .debug_str     00000000 
00003ac9 l       .debug_str     00000000 
00003ad0 l       .debug_str     00000000 
00003add l       .debug_str     00000000 
00003aea l       .debug_str     00000000 
00003af8 l       .debug_str     00000000 
00003b01 l       .debug_str     00000000 
000033c6 l       .debug_str     00000000 
00000ef1 l       .debug_str     00000000 
00003b44 l       .debug_str     00000000 
00003b35 l       .debug_str     00000000 
00003b0a l       .debug_str     00000000 
00003b18 l       .debug_str     00000000 
00003b28 l       .debug_str     00000000 
00003b53 l       .debug_str     00000000 
00003b66 l       .debug_str     00000000 
00003b7f l       .debug_str     00000000 
00000e89 l       .debug_str     00000000 
00003f3c l       .debug_str     00000000 
000040be l       .debug_str     00000000 
00000908 l       .debug_ranges  00000000 
00000928 l       .debug_ranges  00000000 
00003b96 l       .debug_str     00000000 
00003ba3 l       .debug_str     00000000 
00003bad l       .debug_str     00000000 
00003bc1 l       .debug_str     00000000 
00003bd7 l       .debug_str     00000000 
00003cf1 l       .debug_str     00000000 
00003be7 l       .debug_str     00000000 
00003bf4 l       .debug_str     00000000 
00003bfa l       .debug_str     00000000 
00000eb8 l       .debug_str     00000000 
00003f49 l       .debug_str     00000000 
00000940 l       .debug_ranges  00000000 
00003c16 l       .debug_str     00000000 
00003c23 l       .debug_str     00000000 
00003d03 l       .debug_str     00000000 
0000119f l       .debug_str     00000000 
00003f57 l       .debug_str     00000000 
00003f63 l       .debug_str     00000000 
00003f71 l       .debug_str     00000000 
00003f89 l       .debug_str     00000000 
00003d1c l       .debug_str     00000000 
00003f91 l       .debug_str     00000000 
00003d2e l       .debug_str     00000000 
00003f9a l       .debug_str     00000000 
00003d47 l       .debug_str     00000000 
00003fb0 l       .debug_str     00000000 
00003fbe l       .debug_str     00000000 
00003fcd l       .debug_str     00000000 
00003fe3 l       .debug_str     00000000 
00003d58 l       .debug_str     00000000 
00003ff9 l       .debug_str     00000000 
00000e76 l       .debug_str     00000000 
00004008 l       .debug_str     00000000 
00004016 l       .debug_str     00000000 
00001181 l       .debug_str     00000000 
00003c32 l       .debug_str     00000000 
00003d65 l       .debug_str     00000000 
00004022 l       .debug_str     00000000 
00003d71 l       .debug_str     00000000 
00004030 l       .debug_str     00000000 
00000f5c l       .debug_str     00000000 
00001240 l       .debug_str     00000000 
00003c49 l       .debug_str     00000000 
00003d84 l       .debug_str     00000000 
00003d90 l       .debug_str     00000000 
00003c69 l       .debug_str     00000000 
00003da2 l       .debug_str     00000000 
00004047 l       .debug_str     00000000 
00004057 l       .debug_str     00000000 
0000405e l       .debug_str     00000000 
00003db1 l       .debug_str     00000000 
0000406c l       .debug_str     00000000 
0000407c l       .debug_str     00000000 
0000408c l       .debug_str     00000000 
00000958 l       .debug_ranges  00000000 
00000970 l       .debug_ranges  00000000 
00003dc4 l       .debug_str     00000000 
00004093 l       .debug_str     00000000 
00003dd6 l       .debug_str     00000000 
00003def l       .debug_str     00000000 
00000ec4 l       .debug_str     00000000 
0000409a l       .debug_str     00000000 
00003c7b l       .debug_str     00000000 
00003e06 l       .debug_str     00000000 
000040a7 l       .debug_str     00000000 
000040b5 l       .debug_str     00000000 
00003e15 l       .debug_str     00000000 
000040bd l       .debug_str     00000000 
000040c6 l       .debug_str     00000000 
000040d1 l       .debug_str     00000000 
000040dc l       .debug_str     00000000 
000040e6 l       .debug_str     00000000 
00003e36 l       .debug_str     00000000 
000040f0 l       .debug_str     00000000 
00004100 l       .debug_str     00000000 
00003e48 l       .debug_str     00000000 
00003e58 l       .debug_str     00000000 
0000410f l       .debug_str     00000000 
0000415d l       .debug_str     00000000 
00003c8b l       .debug_str     00000000 
00003e6e l       .debug_str     00000000 
0000411b l       .debug_str     00000000 
00004131 l       .debug_str     00000000 
00003e8d l       .debug_str     00000000 
00003eac l       .debug_str     00000000 
0000413d l       .debug_str     00000000 
00003ec5 l       .debug_str     00000000 
0000414c l       .debug_str     00000000 
00000988 l       .debug_ranges  00000000 
00003ee7 l       .debug_str     00000000 
00003cb4 l       .debug_str     00000000 
00003c97 l       .debug_str     00000000 
00003ce7 l       .debug_str     00000000 
00003cdd l       .debug_str     00000000 
00003cbe l       .debug_str     00000000 
00003ccd l       .debug_str     00000000 
00003efc l       .debug_str     00000000 
0000415c l       .debug_str     00000000 
0000416a l       .debug_str     00000000 
00003f11 l       .debug_str     00000000 
00003f22 l       .debug_str     00000000 
00003d11 l       .debug_str     00000000 
00000f1b l       .debug_str     00000000 
00000e95 l       .debug_str     00000000 
00000d84 l       .debug_frame   00000000 
f0002738 l       .text  00000000 
f0002768 l       .text  00000000 
f0002854 l       .text  00000000 
f00028ba l       .text  00000000 
f000293c l       .text  00000000 
f000294c l       .text  00000000 
f0002a92 l       .text  00000000 
f0002bc0 l       .text  00000000 
00000000 l    df *ABS*  00000000 list.c
f0002bc0 l       .text  00000000 
f0002bc0 l       .text  00000000 
f0002bc0 l       .text  00000000 
f0002bc0 l       .text  00000000 
f0002bc4 l       .text  00000000 
f0002bc8 l       .text  00000000 
f0002bca l       .text  00000000 
f0002bcc l       .text  00000000 
f0002bce l       .text  00000000 
f0002bd2 l       .text  00000000 
f0002bd4 l       .text  00000000 
f0002bd4 l       .text  00000000 
f0002bd4 l       .text  00000000 
f0002bd4 l       .text  00000000 
f0002bd4 l       .text  00000000 
f0002bd4 l       .text  00000000 
f0002bd8 l       .text  00000000 
f0002bda l       .text  00000000 
f0002bda l       .text  00000000 
f0002bda l       .text  00000000 
f0002bda l       .text  00000000 
f0002bda l       .text  00000000 
f0002bda l       .text  00000000 
f0002bdc l       .text  00000000 
f0002bde l       .text  00000000 
f0002be0 l       .text  00000000 
f0002be0 l       .text  00000000 
f0002be2 l       .text  00000000 
f0002be4 l       .text  00000000 
f0002be6 l       .text  00000000 
f0002be8 l       .text  00000000 
f0002bec l       .text  00000000 
f0002bee l       .text  00000000 
f0002bf2 l       .text  00000000 
f0002bf4 l       .text  00000000 
f0002bf8 l       .text  00000000 
f0002bfa l       .text  00000000 
f0002bfc l       .text  00000000 
f0002bfc l       .text  00000000 
000074dc l       .debug_loc     00000000 
000074f7 l       .debug_loc     00000000 
00007512 l       .debug_loc     00000000 
0000752d l       .debug_loc     00000000 
00007548 l       .debug_loc     00000000 
0000756e l       .debug_loc     00000000 
00007589 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004177 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000ac8 l       .debug_ranges  00000000 
00003887 l       .debug_str     00000000 
00003898 l       .debug_str     00000000 
00003816 l       .debug_str     00000000 
0000382c l       .debug_str     00000000 
00003833 l       .debug_str     00000000 
0000383e l       .debug_str     00000000 
00003846 l       .debug_str     00000000 
00003821 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
00003892 l       .debug_str     00000000 
00003852 l       .debug_str     00000000 
00003862 l       .debug_str     00000000 
0000386a l       .debug_str     00000000 
00000e6a l       .debug_str     00000000 
00003883 l       .debug_str     00000000 
00003873 l       .debug_str     00000000 
00003bd7 l       .debug_str     00000000 
00004057 l       .debug_str     00000000 
00003bad l       .debug_str     00000000 
00004190 l       .debug_str     00000000 
00003c23 l       .debug_str     00000000 
00004197 l       .debug_str     00000000 
00003c8b l       .debug_str     00000000 
000041a5 l       .debug_str     00000000 
000041b7 l       .debug_str     00000000 
00003c16 l       .debug_str     00000000 
000041c2 l       .debug_str     00000000 
00003908 l       .debug_str     00000000 
000010c4 l       .debug_frame   00000000 
f0002bd4 l       .text  00000000 
f0002bda l       .text  00000000 
f0002bfc l       .text  00000000 
00000000 l    df *ABS*  00000000 heap_1.c
f0002bfc l       .text  00000000 
f0002bfc l       .text  00000000 
f0002bfc l       .text  00000000 
f0002bfe l       .text  00000000 
f0002c06 l       .text  00000000 
f0002c08 l       .text  00000000 
f0002c08 l       .text  00000000 
f0002c0c l       .text  00000000 
f0002c10 l       .text  00000000 
f0002c14 l       .text  00000000 
f0002c16 l       .text  00000000 
f0002c18 l       .text  00000000 
f0002c1a l       .text  00000000 
f0002c1c l       .text  00000000 
e00020bc l     O .bss   00000004 pvPortMalloc.pucAlignedHeap
f0002c1c l       .text  00000000 
f0002c26 l       .text  00000000 
f0002c28 l       .text  00000000 
f0002c28 l       .text  00000000 
f0002c2c l       .text  00000000 
f0002c2c l       .text  00000000 
f0002c36 l       .text  00000000 
f0002c3c l       .text  00000000 
e00020c0 l     O .bss   00000004 xNextFreeByte
f0002c3e l       .text  00000000 
f0002c4a l       .text  00000000 
f0002c4e l       .text  00000000 
f0002c5a l       .text  00000000 
f0002c5e l       .text  00000000 
f0002c5e l       .text  00000000 
f0002c60 l       .text  00000000 
f0002c62 l       .text  00000000 
f0002c62 l       .text  00000000 
f0002c64 l       .text  00000000 
f0002c68 l       .text  00000000 
f0002c6a l       .text  00000000 
f0002c6a l       .text  00000000 
f0002c6c l       .text  00000000 
f0002c6c l       .text  00000000 
f0002c70 l       .text  00000000 
f0002c70 l       .text  00000000 
f0002c72 l       .text  00000000 
f0002c78 l       .text  00000000 
f0002c7e l       .text  00000000 
f0002c7e l       .text  00000000 
f0002c7e l       .text  00000000 
f0002c7e l       .text  00000000 
f0002c7e l       .text  00000000 
f0002c7e l       .text  00000000 
f0002c80 l       .text  00000000 
f0002c80 l       .text  00000000 
000075a4 l       .debug_loc     00000000 
000075e0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000041d1 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000af8 l       .debug_ranges  00000000 
00003b96 l       .debug_str     00000000 
000041fd l       .debug_str     00000000 
00004245 l       .debug_str     00000000 
00004251 l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000397 l       .debug_str     00000000 
0000420c l       .debug_str     00000000 
00002c6d l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00003c7b l       .debug_str     00000000 
00003da2 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00001164 l       .debug_str     00000000 
00003ba3 l       .debug_str     00000000 
0000425a l       .debug_str     00000000 
0000421a l       .debug_str     00000000 
00004230 l       .debug_str     00000000 
00001128 l       .debug_frame   00000000 
f0002c7e l       .text  00000000 
f0002c80 l       .text  00000000 
00000000 l    df *ABS*  00000000 test_hooks_default.c
f0002c80 l       .text  00000000 
f0002c80 l       .text  00000000 
f0002c80 l       .text  00000000 
f0002c80 l       .text  00000000 
f0002c84 l       .text  00000000 
f0002c84 l       .text  00000000 
f0002c84 l       .text  00000000 
f0002c84 l       .text  00000000 
f0002c84 l       .text  00000000 
f0002c84 l       .text  00000000 
f0002c88 l       .text  00000000 
f0002c88 l       .text  00000000 
00000000 l       .debug_str     00000000 
0000425d l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000b20 l       .debug_ranges  00000000 
00000ffa l       .debug_str     00000000 
00001015 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00001188 l       .debug_frame   00000000 
f0002c84 l       .text  00000000 
f0002c88 l       .text  00000000 
00000000 l    df *ABS*  00000000 top_earlgrey.c
00000000 l       .debug_str     00000000 
00002284 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
000022ae l       .debug_str     00000000 
00001920 l       .debug_str     00000000 
000018b8 l       .debug_str     00000000 
0000145f l       .debug_str     00000000 
00001481 l       .debug_str     00000000 
000014a1 l       .debug_str     00000000 
000014c1 l       .debug_str     00000000 
000014e1 l       .debug_str     00000000 
00001501 l       .debug_str     00000000 
00001520 l       .debug_str     00000000 
00001544 l       .debug_str     00000000 
00001563 l       .debug_str     00000000 
00001582 l       .debug_str     00000000 
000015a1 l       .debug_str     00000000 
000015c3 l       .debug_str     00000000 
000015e5 l       .debug_str     00000000 
00001607 l       .debug_str     00000000 
0000162e l       .debug_str     00000000 
00001651 l       .debug_str     00000000 
00001674 l       .debug_str     00000000 
00001695 l       .debug_str     00000000 
000016b9 l       .debug_str     00000000 
000016e1 l       .debug_str     00000000 
00001706 l       .debug_str     00000000 
0000172c l       .debug_str     00000000 
00001751 l       .debug_str     00000000 
00001774 l       .debug_str     00000000 
00001798 l       .debug_str     00000000 
000017b7 l       .debug_str     00000000 
000017d6 l       .debug_str     00000000 
000017f5 l       .debug_str     00000000 
00001816 l       .debug_str     00000000 
00001836 l       .debug_str     00000000 
0000185b l       .debug_str     00000000 
0000187a l       .debug_str     00000000 
00001899 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
000022d9 l       .debug_str     00000000 
000028d3 l       .debug_str     00000000 
000028b5 l       .debug_str     00000000 
000022fb l       .debug_str     00000000 
0000231c l       .debug_str     00000000 
0000233d l       .debug_str     00000000 
0000235e l       .debug_str     00000000 
0000237f l       .debug_str     00000000 
0000239f l       .debug_str     00000000 
000023c4 l       .debug_str     00000000 
000023e4 l       .debug_str     00000000 
00002404 l       .debug_str     00000000 
00002424 l       .debug_str     00000000 
00002447 l       .debug_str     00000000 
0000246a l       .debug_str     00000000 
0000248d l       .debug_str     00000000 
000024af l       .debug_str     00000000 
000024d3 l       .debug_str     00000000 
000024f7 l       .debug_str     00000000 
00002519 l       .debug_str     00000000 
0000253e l       .debug_str     00000000 
00002563 l       .debug_str     00000000 
00002588 l       .debug_str     00000000 
000025b1 l       .debug_str     00000000 
000025d7 l       .debug_str     00000000 
000025f9 l       .debug_str     00000000 
0000261e l       .debug_str     00000000 
00002645 l       .debug_str     00000000 
0000266b l       .debug_str     00000000 
00002695 l       .debug_str     00000000 
000026ba l       .debug_str     00000000 
000026da l       .debug_str     00000000 
000026fc l       .debug_str     00000000 
0000271b l       .debug_str     00000000 
0000273b l       .debug_str     00000000 
0000275b l       .debug_str     00000000 
0000277b l       .debug_str     00000000 
0000279d l       .debug_str     00000000 
000027be l       .debug_str     00000000 
000027e4 l       .debug_str     00000000 
00002804 l       .debug_str     00000000 
00002824 l       .debug_str     00000000 
0000284c l       .debug_str     00000000 
0000286f l       .debug_str     00000000 
00002895 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
0000761f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004293 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00000b38 l       .debug_ranges  00000000 
000042bd l       .debug_str     00000000 
000042c9 l       .debug_str     00000000 
00000e0f l       .debug_str     00000000 
00000dc7 l       .debug_str     00000000 
00000dd4 l       .debug_str     00000000 
00000de8 l       .debug_str     00000000 
00000df9 l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
000042d7 l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000004f9 l       .debug_str     00000000 
000042e7 l       .debug_str     00000000 
00004305 l       .debug_str     00000000 
0000431c l       .debug_str     00000000 
0000432c l       .debug_str     00000000 
0000433c l       .debug_str     00000000 
0000434a l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00004358 l       .debug_str     00000000 
0000436d l       .debug_str     00000000 
00004384 l       .debug_str     00000000 
00000b14 l       .debug_str     00000000 
0000439d l       .debug_str     00000000 
000043b9 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
0000297d l       .debug_str     00000000 
00000d66 l       .debug_str     00000000 
000043c8 l       .debug_str     00000000 
000011bc l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 static_critical_boot_measurements.c
00000000 l       .debug_str     00000000 
00001ee3 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00001f2a l       .debug_str     00000000 
00001f44 l       .debug_str     00000000 
00001f3c l       .debug_str     00000000 
00001c37 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
000020f4 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_epmp_state.c
00000000 l       .debug_str     00000000 
00001f58 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00001f98 l       .debug_str     00000000 
00001fba l       .debug_str     00000000 
00001fa3 l       .debug_str     00000000 
00001faa l       .debug_str     00000000 
00001fb2 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
00001fc7 l       .debug_str     00000000 
00000095 l       .debug_str     00000000 
00002005 l       .debug_str     00000000 
0000204b l       .debug_str     00000000 
00002012 l       .debug_str     00000000 
00002026 l       .debug_str     00000000 
0000201d l       .debug_str     00000000 
00002032 l       .debug_str     00000000 
0000203e l       .debug_str     00000000 
00002045 l       .debug_str     00000000 
0000017e l       .debug_str     00000000 
00000503 l       .debug_str     00000000 
0000024e l       .debug_str     00000000 
f00017fa g     F .text  0000008a rand_testutils_init
f007b000 g       *ABS*  00000000 _non_volatile_scratch_start
f0079800 g       *ABS*  00000000 _non_volatile_counter_3_end
f0079000 g       *ABS*  00000000 _non_volatile_counter_3_start
f0001658  w    F .text  0000001c ottf_instr_misaligned_fault_handler
f000176c  w    F .text  00000014 ottf_external_nmi_handler
e00027c4 g       .data  00000000 __global_pointer$
e0002070 g     O .bss   00000004 ottf_plic
e0000000 g     O .static_critical       00000020 boot_measurements
f0001658  w    F .text  0000001c ottf_instr_access_fault_handler
f0000e7e g     F .text  000000ec hmac_testutils_finish_and_check_polled
f0002468 g     F .text  000000c0 memrchr
f00021fe g     F .text  00000022 dif_uart_byte_send_polled
f0001658  w    F .text  0000001c ottf_user_ecall_handler
f0002c88 g       .shutdown      00000000 _text_end
f00010ea g     F .text  00000056 dif_hmac_fifo_push
f000155e g     F .text  0000001a irq_external_ctrl
f00015a0 g     F .text  0000006e ottf_generic_fault_print
d0010000 g       .manifest      00000000 _chip_info_end
e0002080 g     O .bss   00000004 pxCurrentTCB
f0001780  w    F .text  00000032 ottf_internal_isr
f0001884 g     F .text  0000000e dif_rv_core_ibex_init
f0003a48 g     O .rodata        000002e8 top_earlgrey_plic_interrupt_for_peripheral
f0004060 g     O .rodata        00000008 kClockFreqPeripheralHz
f00017da g     F .text  00000020 dif_rv_plic_irq_complete
f0001530 g     F .text  0000001c xPortStartScheduler
f00022d0 g     F .text  00000088 memcpy
f00016a0  w    F .text  000000cc ottf_external_isr
f0001658  w    F .text  0000001c ottf_illegal_instr_fault_handler
f0002c7e g     F .text  00000002 vPortFree
f000101c g     F .text  0000000e dif_hmac_init
f0002c84  w    F .text  00000004 manufacturer_post_test_hook
00005000 g       *ABS*  00000000 _non_volatile_scratch_size
e0002068 g       .bss   00000000 _bss_start
f0001578 g     F .text  00000016 irq_timer_ctrl
00000400 g       *ABS*  00000000 _manifest_code_start
00000000 g       *ABS*  00000000 __DYNAMIC
f0001952 g     F .text  00000006 ibex_mepc_read
f007b000 g       *ABS*  00000000 _non_volatile_counter_0_end
f0000400 g       .vectors       00000000 _text_start
f0001658  w    F .text  0000001c ottf_load_store_fault_handler
f0002bd4 g     F .text  00000006 vListInitialiseItem
e00021a4 g     O .freertos.heap 00008000 ucHeap
00002c88 g       *ABS*  00000000 _manifest_code_end
f0000400 g     F .vectors       00000080 _ottf_interrupt_vector
f0000548 g       .init_array    00000000 _init_array_end
f00019fa g     F .text  00000034 base_log_internal_dv
f000411c g       *ABS*  00000000 _data_init_end
f0002144 g     F .text  000000ba dif_uart_configure
f0001940 g     F .text  00000006 abort
e0000020 g     O .static_critical       00000054 epmp_state
f0002bfc g     F .text  00000082 pvPortMalloc
f0002bc0 g     F .text  00000014 vListInitialise
f00010a2 g     F .text  00000048 dif_hmac_mode_sha256_start
e00021a4 g       .bss   00000000 _bss_end
f0002c80  w    F .text  00000004 manufacturer_pre_test_hook
f0001190 g     F .text  0000004e dif_hmac_finish
f00011de g     F .text  00000052 ottf_machine_ecall_handler
f0004078 g       *ABS*  00000000 _data_init_start
f000154c g     F .text  00000012 irq_global_ctrl
f00014c0 g     F .text  00000038 vApplicationMallocFailedHook
f0000480 g     F .crt   00000068 _ottf_start
e0001fe4 g     O .data  00000084 status_codes
00001fc4 g       *ABS*  00000000 _static_critical_size
f000158e g     F .text  00000012 irq_software_ctrl
f000050c g     F .crt   0000003a crt_section_copy
f0004068 g     O .rodata        00000008 kUartBaudrate
f00023ba g     F .text  000000ae memchr
f00014be g     F .text  00000002 test_coverage_send_buffer
00000800 g       *ABS*  00000000 _non_volatile_counter_size
00080000 g       *ABS*  00000000 _ottf_size
f0001688  w    F .text  00000014 ottf_timer_isr
f000293c g     F .text  00000010 vTaskSuspendAll
e0001fc4 g       .data  00000000 _data_start
f007a800 g       *ABS*  00000000 _non_volatile_counter_0_start
f0002bda g     F .text  00000022 uxListRemove
f0080000 g       .freertos.heap 00000000 _non_volatile_scratch_end
f007a000 g       *ABS*  00000000 _non_volatile_counter_2_end
f000176c  w    F .text  00000014 ottf_load_integrity_error_handler
f0079800 g       *ABS*  00000000 _non_volatile_counter_2_start
f0002768 g     F .text  000000ec vTaskSwitchContext
f0001658  w    F .text  0000001c ottf_breakpoint_handler
00004000 g       *ABS*  00000000 _stack_size
f0000608 g     F .text  00000050 handler_exception
f0001ad4 g     F .text  0000048e base_vfprintf
f000102a g     F .text  00000078 dif_hmac_mode_hmac_start
e0002068 g       .data  00000000 _data_end
f00014f8 g     F .text  00000038 vApplicationStackOverflowHook
f0001a32 g     F .text  00000016 base_uart_stdout
f0000754 g     F .text  00000052 handler_irq_internal
f0001aba g     F .text  0000001a base_vprintf
f0001674  w    F .text  00000014 ottf_software_isr
e0000074 g     O .static_critical       00001f50 sec_mmio_ctx
f0002358 g     F .text  00000062 memset
f0001946 g     F .text  00000006 ibex_mcause_read
f00006ac g     F .text  00000052 handler_irq_timer
f0000cea g     F .text  00000194 hmac_testutils_finish_polled
e0020000 g       .manifest      00000000 _stack_end
f0001140 g     F .text  0000001e dif_hmac_fifo_count_entries
e00020c4 g     O .bss   00000018 rand_testutils_rng_ctx
e00021a4 g       .freertos.heap 00000000 _freertos_heap_start
f000169c  w    F .text  00000004 ottf_flow_control_isr
e001c000 g       *ABS*  00000000 _stack_start
f00004e8 g     F .crt   00000024 crt_section_clear
f000294c g     F .text  00000146 xTaskResumeAll
f0000658 g     F .text  00000052 handler_irq_software
f0004048 g     O .rodata        00000004 uxTopUsedPriority
f0002854 g     F .text  00000066 vTaskStartScheduler
f0004058 g     O .rodata        00000008 kClockFreqCpuHz
00010000 g       *ABS*  00000000 _dv_log_offset
f0000548 g     F .text  00000052 xPortStartFirstTask
f000160e  w    F .text  0000004a ottf_exception_handler
f0000a9a g     F .text  000000c2 hmac_testutils_check_message_length
d000ff80 g       *ABS*  00000000 _chip_info_start
f0000810 g     F .text  0000018e test_main
f000115e g     F .text  0000001e dif_hmac_get_message_length
f0002a92 g     F .text  0000012e xTaskIncrementTick
f0004070 g     O .rodata        00000004 kDeviceTestStatusAddress
f0002e38 g     O .rodata        00000008 kOttfTestConfig
00000800 g       *ABS*  00000000 _epmp_reset_rx_size
f0002220 g     F .text  000000b0 udiv64_slow
f0001a88 g     F .text  00000032 base_printf
f00017b2 g     F .text  00000028 dif_rv_plic_irq_claim
f0004074 g     O .rodata        00000004 kDeviceLogBypassUartAddress
f0002528 g     F .text  00000210 xTaskCreate
f0004054 g     O .rodata        00000004 kDeviceType
f000194c g     F .text  00000006 ibex_mtval_read
f007a800 g       *ABS*  00000000 _non_volatile_counter_1_end
00000480 g       *ABS*  00000000 _manifest_entry_point
f0001230 g     F .text  0000012e _ottf_main
00000080 g       *ABS*  00000000 _chip_info_size
f0000b5c g     F .text  0000018e hmac_testutils_fifo_empty_polled
f0002738 g     F .text  00000030 vTaskExitCritical
f000059c g     F .text  00000024 pxPortInitialiseStack
f00020c4 g     F .text  00000072 status_extract
f000117c g     F .text  00000014 dif_hmac_process
00000100 g       *ABS*  00000000 _non_volatile_counter_flash_words
f0002136 g     F .text  0000000e dif_uart_init
f007a000 g       *ABS*  00000000 _non_volatile_counter_1_start
f0000000 g       .manifest      00000000 _ottf_start_address
f0000548 g       .init_array    00000000 _init_array_start
f0001892 g     F .text  000000ae test_status_set
f0001958 g     F .text  000000a2 base_log_internal_core
f00007a8 g     F .text  00000068 ottf_isr_exit
f0000700 g     F .text  00000052 handler_irq_external
f0000f6a g     F .text  000000b2 hmac_testutils_push_message



Disassembly of section .vectors:

f0000400 <_ottf_interrupt_vector>:
_ottf_interrupt_vector():
f0000400:       2080006f                j       f0000608 <handler_exception>
f0000404:       c0001073                unimp
f0000408:       c0001073                unimp
f000040c:       24c0006f                j       f0000658 <handler_irq_software>
f0000410:       c0001073                unimp
f0000414:       c0001073                unimp
f0000418:       c0001073                unimp
f000041c:       2900006f                j       f00006ac <handler_irq_timer>
f0000420:       c0001073                unimp
f0000424:       c0001073                unimp
f0000428:       c0001073                unimp
f000042c:       2d40006f                j       f0000700 <handler_irq_external>
f0000430:       c0001073                unimp
f0000434:       c0001073                unimp
f0000438:       c0001073                unimp
f000043c:       c0001073                unimp
f0000440:       c0001073                unimp
f0000444:       c0001073                unimp
f0000448:       c0001073                unimp
f000044c:       c0001073                unimp
f0000450:       c0001073                unimp
f0000454:       c0001073                unimp
f0000458:       c0001073                unimp
f000045c:       c0001073                unimp
f0000460:       c0001073                unimp
f0000464:       c0001073                unimp
f0000468:       c0001073                unimp
f000046c:       c0001073                unimp
f0000470:       c0001073                unimp
f0000474:       c0001073                unimp
f0000478:       c0001073                unimp
f000047c:       2d80006f                j       f0000754 <handler_irq_internal>

Disassembly of section .crt:

f0000480 <_ottf_start>:
_ottf_start():
f0000480:       f0002197                auipc   gp,0xf0002
f0000484:       34418193                addi    gp,gp,836 # e00027c4 <__global_pointer$>
f0000488:       f0020117                auipc   sp,0xf0020
f000048c:       b6810113                addi    sp,sp,-1176 # e001fff0 <_stack_start+0x3ff0>
f0000490:       00000297                auipc   t0,0x0
f0000494:       f7128293                addi    t0,t0,-143 # f0000401 <_ottf_interrupt_vector+0x1>
f0000498:       30529073                csrw    mtvec,t0
f000049c:       f0002517                auipc   a0,0xf0002
f00004a0:       b2850513                addi    a0,a0,-1240 # e0001fc4 <kHmacKey>
f00004a4:       8a418593                addi    a1,gp,-1884 # e0002068 <uart0>
f00004a8:       00004617                auipc   a2,0x4
f00004ac:       bd060613                addi    a2,a2,-1072 # f0004078 <_data_init_start>
f00004b0:       28b1                    jal     f000050c <crt_section_copy>
f00004b2:       f0002517                auipc   a0,0xf0002
f00004b6:       bb650513                addi    a0,a0,-1098 # e0002068 <uart0>
f00004ba:       f0002597                auipc   a1,0xf0002
f00004be:       cea58593                addi    a1,a1,-790 # e00021a4 <ucHeap>
f00004c2:       201d                    jal     f00004e8 <crt_section_clear>
f00004c4:       00000417                auipc   s0,0x0
f00004c8:       08440413                addi    s0,s0,132 # f0000548 <xPortStartFirstTask>
f00004cc:       00000497                auipc   s1,0x0
f00004d0:       07c48493                addi    s1,s1,124 # f0000548 <xPortStartFirstTask>
f00004d4:       00947863                bgeu    s0,s1,f00004e4 <init_array_loop_end>

f00004d8 <init_array_loop>:
f00004d8:       /-> 00042283            lw      t0,0(s0)
f00004dc:       |   9282                        jalr    t0
f00004de:       |   0411                        addi    s0,s0,4
f00004e0:       \-- fe946ce3            bltu    s0,s1,f00004d8 <init_array_loop>

f00004e4 <init_array_loop_end>:
f00004e4:       54d0006f                j       f0001230 <_ottf_main>

f00004e8 <crt_section_clear>:
crt_section_clear():
/proc/self/cwd/sw/device/lib/crt/crt.S:41
  .global crt_section_clear
  .type crt_section_clear, @function
crt_section_clear:

  // Check that start is before end.
  bgeu a0, a1, .L_clear_nothing
f00004e8:       /-------- 00b57e63              bgeu    a0,a1,f0000504 <crt_section_clear+0x1c>
/proc/self/cwd/sw/device/lib/crt/crt.S:44

  // Check that start and end are word aligned.
  or   t0, a0, a1
f00004ec:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:45
  andi t0, t0, 0x3
f00004f0:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:46
  bnez t0, .L_clear_error
f00004f4:       |  /----- 00029b63              bnez    t0,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:51

.L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
f00004f8:       |  |  /-> 00052023              sw      zero,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:52
  addi a0, a0, 4
f00004fc:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:53
  bltu a0, a1, .L_clear_loop
f00004fe:       |  |  \-- feb56de3              bltu    a0,a1,f00004f8 <crt_section_clear+0x10>
/proc/self/cwd/sw/device/lib/crt/crt.S:54
  ret
f0000502:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:59

.L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_clear_error
f0000504:       \--+----X 00b51363              bne     a0,a1,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:60
  ret
f0000508:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:63

.L_clear_error:
  unimp
f000050a:          \----> 0000                  unimp

f000050c <crt_section_copy>:
crt_section_copy():
/proc/self/cwd/sw/device/lib/crt/crt.S:95
  .global crt_section_copy
  .type crt_section_copy, @function
crt_section_copy:

  // Check that start is before end.
  bgeu a0, a1, .L_copy_nothing
f000050c:       /-------- 02b57963              bgeu    a0,a1,f000053e <crt_section_copy+0x32>
/proc/self/cwd/sw/device/lib/crt/crt.S:98

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
f0000510:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:99
  or   t0, t0, a2
f0000514:       |         00c2e2b3              or      t0,t0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:100
  andi t0, t0, 0x3
f0000518:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:101
  bnez t0, .L_copy_error
f000051c:       |  /----- 02029463              bnez    t0,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:118
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
f0000520:       |  |      40c502b3              sub     t0,a0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:119
  sub  t1, a1, a0           // end - start
f0000524:       |  |      40a58333              sub     t1,a1,a0
/proc/self/cwd/sw/device/lib/crt/crt.S:120
  bltu t0, t1, .L_copy_error
f0000528:       |  +----- 0062ee63              bltu    t0,t1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:125

.L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
f000052c:       |  |  /-> 00062283              lw      t0,0(a2)
/proc/self/cwd/sw/device/lib/crt/crt.S:126
  addi a2, a2, 4
f0000530:       |  |  |   0611                  addi    a2,a2,4
/proc/self/cwd/sw/device/lib/crt/crt.S:127
  sw   t0, 0(a0)
f0000532:       |  |  |   00552023              sw      t0,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:128
  addi a0, a0, 4
f0000536:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:129
  bltu a0, a1, .L_copy_loop
f0000538:       |  |  \-- feb56ae3              bltu    a0,a1,f000052c <crt_section_copy+0x20>
/proc/self/cwd/sw/device/lib/crt/crt.S:130
  ret
f000053c:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:135

.L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_copy_error
f000053e:       \--+----X 00b51363              bne     a0,a1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:136
  ret
f0000542:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:139

.L_copy_error:
  unimp
f0000544:          \----> 0000                  unimp

Disassembly of section .text:

f0000548 <xPortStartFirstTask>:
xPortStartFirstTask():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:18
  .global xPortStartFirstTask
  .type xPortStartFirstTask, @function
xPortStartFirstTask:
  // Load the stack pointer for the current TCB (just going to clobber sp here
  // since we are setting it here anyway).
  lw  sp, pxCurrentTCB
f0000548:       f0002117                auipc   sp,0xf0002
f000054c:       b3812103                lw      sp,-1224(sp) # e0002080 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:19
  lw  sp, 0(sp)
f0000550:       4102                    lw      sp,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:23

  // NOTE: for starting the FreeRTOS scheduler, the exception return address is
  // used as the function return address. See pxPortInitialiseStack below.
  lw  ra, 0(sp)
f0000552:       4082                    lw      ra,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:26

  // Restore registers initialized on task start.
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000554:       4332                    lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:27
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000556:       43c2                    lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:28
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000558:       4452                    lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:29
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f000055a:       44e2                    lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:30
  lw   a0,  7 * OTTF_WORD_SIZE(sp) // task parameters (pvParameters)
f000055c:       4572                    lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:31
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f000055e:       5582                    lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:32
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000560:       5612                    lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:33
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000562:       56a2                    lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:34
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000564:       5732                    lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:35
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000566:       57c2                    lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:36
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000568:       5852                    lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:37
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f000056a:       58e2                    lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:38
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f000056c:       5972                    lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:39
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f000056e:       4986                    lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:40
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000570:       4a16                    lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:41
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000572:       4aa6                    lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:42
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000574:       4b36                    lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:43
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000576:       4bc6                    lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:44
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000578:       4c56                    lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:45
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f000057a:       4ce6                    lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:46
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f000057c:       4d76                    lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:47
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f000057e:       5d86                    lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:48
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000580:       5e16                    lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:49
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000582:       5ea6                    lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:50
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000584:       5f36                    lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:51
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000586:       5fc6                    lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:55

  // Initialize t0 to the value of MSTATUS with global interrupts enabled, which
  // is required because this returns with ret, not eret.
  lw t0, 29 * OTTF_WORD_SIZE(sp) // Load the MSTATUS state from the stack.
f0000588:       52d6                    lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:56
  ori t0, t0, 1<<3               // Set MIE field.
f000058a:       0082e293                ori     t0,t0,8
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:57
  csrw mstatus, t0               // Ibex interrupts enabled from here!
f000058e:       30029073                csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:60

  // Restore t0 register from the stack (after using it to manipulate MSTATUS).
  lw t0, 2 * OTTF_WORD_SIZE(sp)
f0000592:       42a2                    lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:63

  // Update the stack pointer (shrinking the stack).
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000594:       07810113                addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:65

  ret
f0000598:       8082                    ret
f000059a:       0001                    nop

f000059c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:133
  .balign 4
  .global pxPortInitialiseStack
  .type pxPortInitialiseStack, @function
pxPortInitialiseStack:
  // Setup the MSTATUS register.
  csrr t0, mstatus
f000059c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:137
  // Ensure interrupts are disabled when the stack is restored within an ISR.
  // Required when a task is created after the scheduler has been started,
  // otherwise interrupts would be disabled anyway.
  andi t0, t0, ~0x8
f00005a0:       ff72f293                andi    t0,t0,-9
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:139
  // Generate the value 0x1880, to set the MPIE and MPP bits in MSTATUS.
  li t1, 0x188 << 4
f00005a4:       6309                    lui     t1,0x2
f00005a6:       88030313                addi    t1,t1,-1920 # 1880 <_epmp_reset_rx_size+0x1080>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:140
  or t0, t0, t1
f00005aa:       0062e2b3                or      t0,t0,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:143

  // Setup the stack frame detailed above (a0 holds the task stack pointer).
  addi a0, a0, -OTTF_CONTEXT_SIZE
f00005ae:       f8850513                addi    a0,a0,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:145
  // Push MSTATUS onto the stack.
  sw t0, 29 * OTTF_WORD_SIZE(a0)
f00005b2:       06552a23                sw      t0,116(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:148

  // Push task parameters (pvParameters that is in x12/a2, on the stack.
  sw a2, 7 * OTTF_WORD_SIZE(a0)
f00005b6:       cd50                    sw      a2,28(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:150
  // Push 0 for the portTASK_RETURN_ADDRESS for now.
  sw zero, 1 * OTTF_WORD_SIZE(a0)
f00005b8:       00052223                sw      zero,4(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:155
  // Push the pointer to the task's entry point (pxCode) onto the stack. This
  // will be loaded into either ra (in xPortStartFirstTask) or mepc (in
  // freertosIrqExit), so that when ret/mret is called control flow will be
  // transferred accordingly.
  sw a1, 0(a0)
f00005bc:       c10c                    sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:157

  ret
f00005be:       8082                    ret

f00005c0 <compute_mepc_on_synchronous_irq>:
compute_mepc_on_synchronous_irq():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:32
   * below will cause another exception.
   */
  .balign 4
  .type compute_mepc_on_synchronous_irq, @function
compute_mepc_on_synchronous_irq:
  csrr t0, mepc
f00005c0:           341022f3            csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:33
  csrr t1, mcause
f00005c4:           34202373            csrr    t1,mcause
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:34
  li t2, 0x01
f00005c8:           4385                        li      t2,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:35
  bne t1, t2, .L_load_mepc
f00005ca:       /-- 00731363            bne     t1,t2,f00005d0 <compute_mepc_on_synchronous_irq+0x10>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:36
  ret
f00005ce:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:38
.L_load_mepc:
  lh t2, 0(t0)
f00005d0:       \-> 00029383            lh      t2,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:39
  li t1, 0x3
f00005d4:           430d                        li      t1,3
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:40
  and t3, t2, t1
f00005d6:           0063fe33            and     t3,t2,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:41
  beq t3, t1, .L_32bit_trap_instr
f00005da:       /-- 006e0463            beq     t3,t1,f00005e2 <compute_mepc_on_synchronous_irq+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:42
  addi t0, t0, OTTF_HALF_WORD_SIZE
f00005de:       |   0289                        addi    t0,t0,2
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:43
  ret
f00005e0:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:45
.L_32bit_trap_instr:
  addi t0, t0, OTTF_WORD_SIZE
f00005e2:       \-> 0291                        addi    t0,t0,4
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:46
  ret
f00005e4:           8082                        ret
f00005e6:           0001                        nop

f00005e8 <save_current_sp_to_tcb>:
save_current_sp_to_tcb():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:61
   * exception, if we attempt to perform a store to said address.
   */
  .balign 4
  .type save_current_sp_to_tcb, @function
save_current_sp_to_tcb:
  la t0, kOttfTestConfig
f00005e8:           00003297            auipc   t0,0x3
f00005ec:           85028293            addi    t0,t0,-1968 # f0002e38 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:62
  lb t1, 0(t0)
f00005f0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:63
  beqz t1, .L_skip_sp_save
f00005f4:       /-- 00030863            beqz    t1,f0000604 <save_current_sp_to_tcb+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:64
  lw t2, pxCurrentTCB
f00005f8:       |   f0002397            auipc   t2,0xf0002
f00005fc:       |   a883a383            lw      t2,-1400(t2) # e0002080 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:65
  sw sp, 0(t2)
f0000600:       |   0023a023            sw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:67
.L_skip_sp_save:
  ret
f0000604:       \-> 8082                        ret
f0000606:           0001                        nop

f0000608 <handler_exception>:
handler_exception():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:80
  .balign 4
  .global handler_exception
  .type handler_exception, @function
handler_exception:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000608:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:81
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000060c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:82
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000060e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:83
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000610:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:84
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000612:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:85
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000614:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:86
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000616:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:87
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000618:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:88
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000061a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:89
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000061c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:90
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000061e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:91
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000620:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:92
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000622:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:93
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000624:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:94
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000626:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:95
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000628:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:96
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000062a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:97
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000062c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:98
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000062e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:99
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000630:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:100
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000632:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:101
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000634:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:102
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000636:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:103
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000638:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:104
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000063a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:105
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000063c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:106
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000063e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:107
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000640:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:108
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000642:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:111

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000644:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:112
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000648:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:116

  // Save MEPC to the stack after updating it to the next instruction (since
  // this is a synchronous IRQ).
  jal compute_mepc_on_synchronous_irq
f000064a:       3f9d                    jal     f00005c0 <compute_mepc_on_synchronous_irq>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:117
  sw t0, 0(sp)
f000064c:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:121

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000064e:       3f69                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:124

  // Jump to the exception handler.
  jal ottf_exception_handler
f0000650:       7bf000ef                jal     ra,f000160e <ottf_exception_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:127

  // Return from ISR.
  j ottf_isr_exit
f0000654:       1540006f                j       f00007a8 <ottf_isr_exit>

f0000658 <handler_irq_software>:
handler_irq_software():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:140
  .balign 4
  .global handler_irq_software
  .type handler_irq_software, @function
handler_irq_software:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000658:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:141
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000065c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:142
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000065e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:143
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000660:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:144
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000662:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:145
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000664:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:146
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000666:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:147
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000668:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:148
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000066a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:149
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000066c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:150
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000066e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:151
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000670:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:152
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000672:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:153
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000674:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:154
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000676:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:155
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000678:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:156
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000067a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:157
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000067c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:158
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000067e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:159
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000680:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:160
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000682:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:161
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000684:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:162
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000686:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:163
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000688:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:164
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000068a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:165
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000068c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:166
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000068e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:167
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000690:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:168
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000692:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:171

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000694:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:172
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000698:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:176

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f000069a:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:177
  sw t0, 0(sp)
f000069e:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:181

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006a0:       37a1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:184

  // Jump to the software ISR.
  jal ottf_software_isr
f00006a2:       7d3000ef                jal     ra,f0001674 <ottf_software_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:187

  // Return from ISR.
  j ottf_isr_exit
f00006a6:       1020006f                j       f00007a8 <ottf_isr_exit>
f00006aa:       0001                    nop

f00006ac <handler_irq_timer>:
handler_irq_timer():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:200
  .balign 4
  .global handler_irq_timer
  .type handler_irq_timer, @function
handler_irq_timer:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f00006ac:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:201
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f00006b0:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:202
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f00006b2:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:203
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f00006b4:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:204
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f00006b6:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:205
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f00006b8:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:206
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f00006ba:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:207
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f00006bc:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:208
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f00006be:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:209
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f00006c0:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:210
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f00006c2:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:211
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f00006c4:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:212
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f00006c6:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:213
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f00006c8:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:214
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f00006ca:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:215
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f00006cc:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:216
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f00006ce:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:217
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f00006d0:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:218
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f00006d2:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:219
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f00006d4:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:220
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f00006d6:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:221
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f00006d8:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:222
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f00006da:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:223
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f00006dc:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:224
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f00006de:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:225
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f00006e0:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:226
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f00006e2:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:227
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f00006e4:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:228
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f00006e6:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:231

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f00006e8:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:232
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f00006ec:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:236

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f00006ee:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:237
  sw t0, 0(sp)
f00006f2:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:241

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006f4:       3dd5                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:244

  // Jump to timer ISR.
  jal ottf_timer_isr
f00006f6:       793000ef                jal     ra,f0001688 <ottf_timer_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:247

  // Return from ISR.
  j ottf_isr_exit
f00006fa:       0ae0006f                j       f00007a8 <ottf_isr_exit>
f00006fe:       0001                    nop

f0000700 <handler_irq_external>:
handler_irq_external():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:260
  .balign 4
  .global handler_irq_external
  .type handler_irq_external, @function
handler_irq_external:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000700:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:261
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000704:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:262
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f0000706:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:263
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000708:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:264
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000070a:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:265
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f000070c:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:266
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f000070e:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:267
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000710:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:268
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000712:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:269
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000714:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:270
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000716:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:271
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000718:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:272
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000071a:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:273
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f000071c:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:274
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f000071e:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:275
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000720:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:276
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000722:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:277
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000724:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:278
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000726:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:279
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000728:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:280
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000072a:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:281
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f000072c:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:282
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f000072e:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:283
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000730:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:284
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000732:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:285
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000734:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:286
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000736:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:287
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000738:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:288
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000073a:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:291

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f000073c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:292
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000740:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:296

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000742:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:297
  sw t0, 0(sp)
f0000746:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:301

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f0000748:       3545                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:304

  // Jump to external ISR.
  jal ottf_external_isr
f000074a:       757000ef                jal     ra,f00016a0 <ottf_external_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:307

  // Return from ISR.
  j ottf_isr_exit
f000074e:       05a0006f                j       f00007a8 <ottf_isr_exit>
f0000752:       0001                    nop

f0000754 <handler_irq_internal>:
handler_irq_internal():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:320
  .balign 4
  .global handler_irq_internal
  .type handler_irq_internal, @function
handler_irq_internal:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000754:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:321
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000758:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:322
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000075a:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:323
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f000075c:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:324
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000075e:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:325
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000760:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:326
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000762:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:327
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000764:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:328
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000766:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:329
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000768:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:330
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000076a:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:331
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f000076c:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:332
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000076e:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:333
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000770:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:334
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000772:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:335
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000774:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:336
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000776:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:337
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000778:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:338
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000077a:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:339
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f000077c:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:340
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000077e:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:341
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000780:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:342
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000782:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:343
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000784:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:344
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000786:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:345
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000788:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:346
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000078a:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:347
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f000078c:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:348
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000078e:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:351

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000790:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:352
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000794:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:356

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000796:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:357
  sw t0, 0(sp)
f000079a:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:361

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000079c:       35b1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:364

  // Jump to the internal ISR.
  jal ottf_internal_isr
f000079e:       7e3000ef                jal     ra,f0001780 <ottf_internal_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:367

  // Return from ISR.
  j ottf_isr_exit
f00007a2:       0060006f                j       f00007a8 <ottf_isr_exit>
f00007a6:       0001                    nop

f00007a8 <ottf_isr_exit>:
ottf_isr_exit():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:384
  // Load the stack pointer for the current task control block (TCB), only if
  // the `enable_concurrency` flag is set in the test configuration struct,
  // meaning a test is run as a FreeRTOS task, where each task maintains its own
  // stack. Otherwise, the test is run on bare-metal, and there is no TCB, and
  // only a single stack/stack pointer.
  la t0, kOttfTestConfig
f00007a8:           00002297            auipc   t0,0x2
f00007ac:           69028293            addi    t0,t0,1680 # f0002e38 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:385
  lb t1, 0(t0)
f00007b0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:386
  beqz t1, .L_skip_sp_restore
f00007b4:       /-- 00030863            beqz    t1,f00007c4 <ottf_isr_exit+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:387
  lw  t2, pxCurrentTCB
f00007b8:       |   f0002397            auipc   t2,0xf0002
f00007bc:       |   8c83a383            lw      t2,-1848(t2) # e0002080 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:388
  lw  sp, 0(t2)
f00007c0:       |   0003a103            lw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:392
.L_skip_sp_restore:

  // Load the correct MEPC for the next instruction in the current task.
  lw t0, 0(sp)
f00007c4:       \-> 4282                        lw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:393
  csrw mepc, t0
f00007c6:           34129073            csrw    mepc,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:396

  // Load MSTATUS for the MPIE bit.
  lw  t0, 29 * OTTF_WORD_SIZE(sp)
f00007ca:           52d6                        lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:397
  csrw mstatus, t0
f00007cc:           30029073            csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:400

  // Restore all registers from the stack.
  lw   ra,  1 * OTTF_WORD_SIZE(sp)
f00007d0:           4092                        lw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:401
  lw   t0,  2 * OTTF_WORD_SIZE(sp)
f00007d2:           42a2                        lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:402
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f00007d4:           4332                        lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:403
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f00007d6:           43c2                        lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:404
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f00007d8:           4452                        lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:405
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f00007da:           44e2                        lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:406
  lw   a0,  7 * OTTF_WORD_SIZE(sp)
f00007dc:           4572                        lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:407
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f00007de:           5582                        lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:408
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f00007e0:           5612                        lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:409
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f00007e2:           56a2                        lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:410
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f00007e4:           5732                        lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:411
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f00007e6:           57c2                        lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:412
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f00007e8:           5852                        lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:413
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f00007ea:           58e2                        lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:414
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f00007ec:           5972                        lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:415
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f00007ee:           4986                        lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:416
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f00007f0:           4a16                        lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:417
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f00007f2:           4aa6                        lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:418
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f00007f4:           4b36                        lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:419
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f00007f6:           4bc6                        lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:420
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f00007f8:           4c56                        lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:421
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f00007fa:           4ce6                        lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:422
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f00007fc:           4d76                        lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:423
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f00007fe:           5d86                        lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:424
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000800:           5e16                        lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:425
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000802:           5ea6                        lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:426
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000804:           5f36                        lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:427
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000806:           5fc6                        lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:428
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000808:           07810113            addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:432

  // This exits the ISR completely, and does not return control flow to the ISR
  // that called this sub-routine.
  mret
f000080c:           30200073            mret

f0000810 <test_main>:
test_main():
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:99
  hmac_testutils_check_message_length(hmac, len * 8);
  run_hmac(hmac);
  hmac_testutils_finish_and_check_polled(hmac, expected_digest);
}

bool test_main(void) {
f0000810:                 7179                  addi    sp,sp,-48
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:100
  LOG_INFO("Running HMAC DIF test...");
f0000812:                 d606                  sw      ra,44(sp)
f0000814:                 d422                  sw      s0,40(sp)
f0000816:                 d226                  sw      s1,36(sp)
f0000818:                 00004517              auipc   a0,0x4
f000081c:                 85c50513              addi    a0,a0,-1956 # f0004074 <kDeviceLogBypassUartAddress>
f0000820:                 4100                  lw      s0,0(a0)
f0000822:             /-- c809                  beqz    s0,f0000834 <test_main+0x24>
f0000824:             |   1000f517              auipc   a0,0x1000f
f0000828:             |   7dc50513              addi    a0,a0,2012 # 10000 <_non_volatile_scratch_end+0xff90000>
f000082c:             |   4581                  li      a1,0
f000082e:             |   1cc010ef              jal     ra,f00019fa <base_log_internal_dv>
f0000832:          /--|-- a821                  j       f000084a <test_main+0x3a>
f0000834:          |  \-> 00002597              auipc   a1,0x2
f0000838:          |      60c58593              addi    a1,a1,1548 # f0002e40 <kOttfTestConfig+0x8>
f000083c:          |      0808                  addi    a0,sp,16
f000083e:          |      4651                  li      a2,20
f0000840:          |      291010ef              jal     ra,f00022d0 <memcpy>
f0000844:          |      0808                  addi    a0,sp,16
f0000846:          |      112010ef              jal     ra,f0001958 <base_log_internal_core>
f000084a:          \----> 00143493              seqz    s1,s0
test_setup():
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:65
  CHECK_DIF_OK(dif_hmac_init(base_addr, hmac));
f000084e:                 c1110537              lui     a0,0xc1110
f0000852:                 002c                  addi    a1,sp,8
f0000854:                 7c8000ef              jal     ra,f000101c <dif_hmac_init>
f0000858:       /-------- cd0d                  beqz    a0,f0000892 <test_main+0x82>
f000085a:       |         842a                  mv      s0,a0
f000085c:       |     /-- e891                  bnez    s1,f0000870 <test_main+0x60>
f000085e:       |     |   10010517              auipc   a0,0x10010
f0000862:       |     |   80650513              addi    a0,a0,-2042 # 10064 <_non_volatile_scratch_end+0xff90064>
f0000866:       |     |   4585                  li      a1,1
f0000868:       |     |   8622                  mv      a2,s0
f000086a:       |     |   190010ef              jal     ra,f00019fa <base_log_internal_dv>
f000086e:       |  /--|-- a829                  j       f0000888 <test_main+0x78>
f0000870:       |  |  \-> 00002597              auipc   a1,0x2
f0000874:       |  |      70458593              addi    a1,a1,1796 # f0002f74 <kExpectedHmacDigest+0x34>
f0000878:       |  |      0808                  addi    a0,sp,16
f000087a:       |  |      4651                  li      a2,20
f000087c:       |  |      255010ef              jal     ra,f00022d0 <memcpy>
f0000880:       |  |      0808                  addi    a0,sp,16
f0000882:       |  |      85a2                  mv      a1,s0
f0000884:       |  |      0d4010ef              jal     ra,f0001958 <base_log_internal_core>
f0000888:       |  \----> 6531                  lui     a0,0xc
f000088a:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000088e:       |         004010ef              jal     ra,f0001892 <test_status_set>
test_main():
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:105

  dif_hmac_t hmac;
  test_setup(mmio_region_from_addr(TOP_EARLGREY_HMAC_BASE_ADDR), &hmac);

  LOG_INFO("Running test SHA256 pass 1...");
f0000892:       \-----/-X e4a5                  bnez    s1,f00008fa <test_main+0xea>
f0000894:             |   1000f517              auipc   a0,0x1000f
f0000898:             |   78050513              addi    a0,a0,1920 # 10014 <_non_volatile_scratch_end+0xff90014>
f000089c:             |   4581                  li      a1,0
f000089e:             |   15c010ef              jal     ra,f00019fa <base_log_internal_dv>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:106
  run_test(&hmac, kData, sizeof(kData), NULL, &kExpectedShaDigest);
f00008a2:             |   00002417              auipc   s0,0x2
f00008a6:             |   65640413              addi    s0,s0,1622 # f0002ef8 <kExpectedShaDigest>
f00008aa:             |   0028                  addi    a0,sp,8
f00008ac:             |   4581                  li      a1,0
f00008ae:             |   8622                  mv      a2,s0
f00008b0:             |   20fd                  jal     f000099e <run_test>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:108

  LOG_INFO("Running test SHA256 pass 2...");
f00008b2:             |   1000f517              auipc   a0,0x1000f
f00008b6:             |   77650513              addi    a0,a0,1910 # 10028 <_non_volatile_scratch_end+0xff90028>
f00008ba:             |   4581                  li      a1,0
f00008bc:             |   13e010ef              jal     ra,f00019fa <base_log_internal_dv>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:109
  run_test(&hmac, kData, sizeof(kData), NULL, &kExpectedShaDigest);
f00008c0:             |   0028                  addi    a0,sp,8
f00008c2:             |   4581                  li      a1,0
f00008c4:             |   8622                  mv      a2,s0
f00008c6:             |   28e1                  jal     f000099e <run_test>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:111

  LOG_INFO("Running test HMAC pass 1...");
f00008c8:             |   1000f517              auipc   a0,0x1000f
f00008cc:             |   77450513              addi    a0,a0,1908 # 1003c <_non_volatile_scratch_end+0xff9003c>
f00008d0:             |   4581                  li      a1,0
f00008d2:             |   128010ef              jal     ra,f00019fa <base_log_internal_dv>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:112
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
f00008d6:             |   f0001597              auipc   a1,0xf0001
f00008da:             |   6ee58593              addi    a1,a1,1774 # e0001fc4 <kHmacKey>
f00008de:             |   00002617              auipc   a2,0x2
f00008e2:             |   66260613              addi    a2,a2,1634 # f0002f40 <kExpectedHmacDigest>
f00008e6:             |   0028                  addi    a0,sp,8
f00008e8:             |   285d                  jal     f000099e <run_test>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:115
           &kExpectedHmacDigest);

  LOG_INFO("Running test HMAC pass 2...");
f00008ea:             |   1000f517              auipc   a0,0x1000f
f00008ee:             |   76650513              addi    a0,a0,1894 # 10050 <_non_volatile_scratch_end+0xff90050>
f00008f2:             |   4581                  li      a1,0
f00008f4:             |   106010ef              jal     ra,f00019fa <base_log_internal_dv>
f00008f8:          /--|-- a059                  j       f000097e <test_main+0x16e>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:105
  LOG_INFO("Running test SHA256 pass 1...");
f00008fa:          |  \-> 00002597              auipc   a1,0x2
f00008fe:          |      55a58593              addi    a1,a1,1370 # f0002e54 <kOttfTestConfig+0x1c>
f0000902:          |      0808                  addi    a0,sp,16
f0000904:          |      4651                  li      a2,20
f0000906:          |      1cb010ef              jal     ra,f00022d0 <memcpy>
f000090a:          |      0808                  addi    a0,sp,16
f000090c:          |      04c010ef              jal     ra,f0001958 <base_log_internal_core>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:106
  run_test(&hmac, kData, sizeof(kData), NULL, &kExpectedShaDigest);
f0000910:          |      00002417              auipc   s0,0x2
f0000914:          |      5e840413              addi    s0,s0,1512 # f0002ef8 <kExpectedShaDigest>
f0000918:          |      0028                  addi    a0,sp,8
f000091a:          |      4581                  li      a1,0
f000091c:          |      8622                  mv      a2,s0
f000091e:          |      2041                  jal     f000099e <run_test>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:108
  LOG_INFO("Running test SHA256 pass 2...");
f0000920:          |      00002597              auipc   a1,0x2
f0000924:          |      5f858593              addi    a1,a1,1528 # f0002f18 <kExpectedShaDigest+0x20>
f0000928:          |      0808                  addi    a0,sp,16
f000092a:          |      4651                  li      a2,20
f000092c:          |      1a5010ef              jal     ra,f00022d0 <memcpy>
f0000930:          |      0808                  addi    a0,sp,16
f0000932:          |      026010ef              jal     ra,f0001958 <base_log_internal_core>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:109
  run_test(&hmac, kData, sizeof(kData), NULL, &kExpectedShaDigest);
f0000936:          |      0028                  addi    a0,sp,8
f0000938:          |      4581                  li      a1,0
f000093a:          |      8622                  mv      a2,s0
f000093c:          |      208d                  jal     f000099e <run_test>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:111
  LOG_INFO("Running test HMAC pass 1...");
f000093e:          |      00002597              auipc   a1,0x2
f0000942:          |      5ee58593              addi    a1,a1,1518 # f0002f2c <kExpectedShaDigest+0x34>
f0000946:          |      0808                  addi    a0,sp,16
f0000948:          |      4651                  li      a2,20
f000094a:          |      187010ef              jal     ra,f00022d0 <memcpy>
f000094e:          |      0808                  addi    a0,sp,16
f0000950:          |      008010ef              jal     ra,f0001958 <base_log_internal_core>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:112
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
f0000954:          |      f0001597              auipc   a1,0xf0001
f0000958:          |      67058593              addi    a1,a1,1648 # e0001fc4 <kHmacKey>
f000095c:          |      00002617              auipc   a2,0x2
f0000960:          |      5e460613              addi    a2,a2,1508 # f0002f40 <kExpectedHmacDigest>
f0000964:          |      0028                  addi    a0,sp,8
f0000966:          |      2825                  jal     f000099e <run_test>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:115
  LOG_INFO("Running test HMAC pass 2...");
f0000968:          |      00002597              auipc   a1,0x2
f000096c:          |      5f858593              addi    a1,a1,1528 # f0002f60 <kExpectedHmacDigest+0x20>
f0000970:          |      0808                  addi    a0,sp,16
f0000972:          |      4651                  li      a2,20
f0000974:          |      15d010ef              jal     ra,f00022d0 <memcpy>
f0000978:          |      0808                  addi    a0,sp,16
f000097a:          |      7df000ef              jal     ra,f0001958 <base_log_internal_core>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:116
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
f000097e:          \----> f0001597              auipc   a1,0xf0001
f0000982:                 64658593              addi    a1,a1,1606 # e0001fc4 <kHmacKey>
f0000986:                 00002617              auipc   a2,0x2
f000098a:                 5ba60613              addi    a2,a2,1466 # f0002f40 <kExpectedHmacDigest>
f000098e:                 0028                  addi    a0,sp,8
f0000990:                 2039                  jal     f000099e <run_test>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:119
           &kExpectedHmacDigest);

  return true;
f0000992:                 4505                  li      a0,1
f0000994:                 5492                  lw      s1,36(sp)
f0000996:                 5422                  lw      s0,40(sp)
f0000998:                 50b2                  lw      ra,44(sp)
f000099a:                 6145                  addi    sp,sp,48
f000099c:                 8082                  ret

f000099e <run_test>:
run_test():
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:90
                     const dif_hmac_digest_t *expected_digest) {
f000099e:                       7179                    addi    sp,sp,-48
f00009a0:                       d606                    sw      ra,44(sp)
f00009a2:                       d422                    sw      s0,40(sp)
f00009a4:                       d226                    sw      s1,36(sp)
f00009a6:                       d04a                    sw      s2,32(sp)
f00009a8:                       ce4e                    sw      s3,28(sp)
f00009aa:                       8932                    mv      s2,a2
f00009ac:                       84aa                    mv      s1,a0
f00009ae:                       00003997                auipc   s3,0x3
f00009b2:                       6c698993                addi    s3,s3,1734 # f0004074 <kDeviceLogBypassUartAddress>
test_start():
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:74
  if (key == NULL) {
f00009b6:                /----- cd99                    beqz    a1,f00009d4 <run_test+0x36>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:77
    CHECK_DIF_OK(dif_hmac_mode_hmac_start(hmac, key, kHmacTransactionConfig));
f00009b8:                |      4605                    li      a2,1
f00009ba:                |      4685                    li      a3,1
f00009bc:                |      8526                    mv      a0,s1
f00009be:                |      25b5                    jal     f000102a <dif_hmac_mode_hmac_start>
f00009c0:       /--------|----- c135                    beqz    a0,f0000a24 <run_test+0x86>
f00009c2:       |        |      842a                    mv      s0,a0
f00009c4:       |        |      0009a503                lw      a0,0(s3)
f00009c8:       |  /-----|----- c905                    beqz    a0,f00009f8 <run_test+0x5a>
f00009ca:       |  |     |      1000f517                auipc   a0,0x1000f
f00009ce:       |  |     |      6c250513                addi    a0,a0,1730 # 1008c <_non_volatile_scratch_end+0xff9008c>
f00009d2:       |  |     |  /-- a831                    j       f00009ee <run_test+0x50>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:75
    CHECK_DIF_OK(dif_hmac_mode_sha256_start(hmac, kHmacTransactionConfig));
f00009d4:       |  |     \--|-> 4585                    li      a1,1
f00009d6:       |  |        |   4605                    li      a2,1
f00009d8:       |  |        |   8526                    mv      a0,s1
f00009da:       |  |        |   25e1                    jal     f00010a2 <dif_hmac_mode_sha256_start>
f00009dc:       +--|--------|-- c521                    beqz    a0,f0000a24 <run_test+0x86>
f00009de:       |  |        |   842a                    mv      s0,a0
f00009e0:       |  |        |   0009a503                lw      a0,0(s3)
f00009e4:       |  |     /--|-- cd19                    beqz    a0,f0000a02 <run_test+0x64>
f00009e6:       |  |     |  |   1000f517                auipc   a0,0x1000f
f00009ea:       |  |     |  |   69250513                addi    a0,a0,1682 # 10078 <_non_volatile_scratch_end+0xff90078>
f00009ee:       |  |     |  \-> 4585                    li      a1,1
f00009f0:       |  |     |      8622                    mv      a2,s0
f00009f2:       |  |     |      008010ef                jal     ra,f00019fa <base_log_internal_dv>
f00009f6:       |  |  /--|----- a015                    j       f0000a1a <run_test+0x7c>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:77
    CHECK_DIF_OK(dif_hmac_mode_hmac_start(hmac, key, kHmacTransactionConfig));
f00009f8:       |  \--|--|----> 00002597                auipc   a1,0x2
f00009fc:       |     |  |      5a458593                addi    a1,a1,1444 # f0002f9c <kExpectedHmacDigest+0x5c>
f0000a00:       |     |  |  /-- a029                    j       f0000a0a <run_test+0x6c>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:75
    CHECK_DIF_OK(dif_hmac_mode_sha256_start(hmac, kHmacTransactionConfig));
f0000a02:       |     |  \--|-> 00002597                auipc   a1,0x2
f0000a06:       |     |     |   58658593                addi    a1,a1,1414 # f0002f88 <kExpectedHmacDigest+0x48>
f0000a0a:       |     |     \-> 0028                    addi    a0,sp,8
f0000a0c:       |     |         4651                    li      a2,20
f0000a0e:       |     |         0c3010ef                jal     ra,f00022d0 <memcpy>
f0000a12:       |     |         0028                    addi    a0,sp,8
f0000a14:       |     |         85a2                    mv      a1,s0
f0000a16:       |     |         743000ef                jal     ra,f0001958 <base_log_internal_core>
f0000a1a:       |     \-------> 6531                    lui     a0,0xc
f0000a1c:       |               aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000a20:       |               673000ef                jal     ra,f0001892 <test_status_set>
run_test():
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:92
  hmac_testutils_push_message(hmac, data, len);
f0000a24:       \-------------> 00002597                auipc   a1,0x2
f0000a28:                       44458593                addi    a1,a1,1092 # f0002e68 <kData>
f0000a2c:                       08e00613                li      a2,142
f0000a30:                       8526                    mv      a0,s1
f0000a32:                       2b25                    jal     f0000f6a <hmac_testutils_push_message>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:93
  hmac_testutils_fifo_empty_polled(hmac);
f0000a34:                       8526                    mv      a0,s1
f0000a36:                       221d                    jal     f0000b5c <hmac_testutils_fifo_empty_polled>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:94
  hmac_testutils_check_message_length(hmac, len * 8);
f0000a38:                       47000593                li      a1,1136
f0000a3c:                       8526                    mv      a0,s1
f0000a3e:                       4601                    li      a2,0
f0000a40:                       28a9                    jal     f0000a9a <hmac_testutils_check_message_length>
run_hmac():
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:85
  CHECK_DIF_OK(dif_hmac_process(hmac));
f0000a42:                       8526                    mv      a0,s1
f0000a44:                       738000ef                jal     ra,f000117c <dif_hmac_process>
f0000a48:             /-------- cd1d                    beqz    a0,f0000a86 <run_test+0xe8>
f0000a4a:             |         842a                    mv      s0,a0
f0000a4c:             |         0009a503                lw      a0,0(s3)
f0000a50:             |     /-- c911                    beqz    a0,f0000a64 <run_test+0xc6>
f0000a52:             |     |   1000f517                auipc   a0,0x1000f
f0000a56:             |     |   64e50513                addi    a0,a0,1614 # 100a0 <_non_volatile_scratch_end+0xff900a0>
f0000a5a:             |     |   4585                    li      a1,1
f0000a5c:             |     |   8622                    mv      a2,s0
f0000a5e:             |     |   79d000ef                jal     ra,f00019fa <base_log_internal_dv>
f0000a62:             |  /--|-- a829                    j       f0000a7c <run_test+0xde>
f0000a64:             |  |  \-> 00002597                auipc   a1,0x2
f0000a68:             |  |      54c58593                addi    a1,a1,1356 # f0002fb0 <kExpectedHmacDigest+0x70>
f0000a6c:             |  |      0028                    addi    a0,sp,8
f0000a6e:             |  |      4651                    li      a2,20
f0000a70:             |  |      061010ef                jal     ra,f00022d0 <memcpy>
f0000a74:             |  |      0028                    addi    a0,sp,8
f0000a76:             |  |      85a2                    mv      a1,s0
f0000a78:             |  |      6e1000ef                jal     ra,f0001958 <base_log_internal_core>
f0000a7c:             |  \----> 6531                    lui     a0,0xc
f0000a7e:             |         aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000a82:             |         611000ef                jal     ra,f0001892 <test_status_set>
run_test():
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:96
  hmac_testutils_finish_and_check_polled(hmac, expected_digest);
f0000a86:             \-------> 8526                    mv      a0,s1
f0000a88:                       85ca                    mv      a1,s2
f0000a8a:                       2ed5                    jal     f0000e7e <hmac_testutils_finish_and_check_polled>
/proc/self/cwd/sw/device/tests/hmac_smoketest.c:97
}
f0000a8c:                       49f2                    lw      s3,28(sp)
f0000a8e:                       5902                    lw      s2,32(sp)
f0000a90:                       5492                    lw      s1,36(sp)
f0000a92:                       5422                    lw      s0,40(sp)
f0000a94:                       50b2                    lw      ra,44(sp)
f0000a96:                       6145                    addi    sp,sp,48
f0000a98:                       8082                    ret

f0000a9a <hmac_testutils_check_message_length>:
hmac_testutils_check_message_length():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:60
            0xBDCCB6C7,
        },
};

void hmac_testutils_check_message_length(const dif_hmac_t *hmac,
                                         uint64_t expected_sent_bits) {
f0000a9a:                 7139                  addi    sp,sp,-64
f0000a9c:                 de06                  sw      ra,60(sp)
f0000a9e:                 dc22                  sw      s0,56(sp)
f0000aa0:                 da26                  sw      s1,52(sp)
f0000aa2:                 d84a                  sw      s2,48(sp)
f0000aa4:                 d64e                  sw      s3,44(sp)
f0000aa6:                 d452                  sw      s4,40(sp)
f0000aa8:                 89b2                  mv      s3,a2
f0000aaa:                 892e                  mv      s2,a1
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:62
  uint64_t sent_bits;
  CHECK_DIF_OK(dif_hmac_get_message_length(hmac, &sent_bits));
f0000aac:                 100c                  addi    a1,sp,32
f0000aae:                 2d45                  jal     f000115e <dif_hmac_get_message_length>
f0000ab0:                 00003a17              auipc   s4,0x3
f0000ab4:                 5c4a0a13              addi    s4,s4,1476 # f0004074 <kDeviceLogBypassUartAddress>
f0000ab8:       /-------- cd1d                  beqz    a0,f0000af6 <hmac_testutils_check_message_length+0x5c>
f0000aba:       |         842a                  mv      s0,a0
f0000abc:       |         000a2503              lw      a0,0(s4)
f0000ac0:       |     /-- c911                  beqz    a0,f0000ad4 <hmac_testutils_check_message_length+0x3a>
f0000ac2:       |     |   1000f517              auipc   a0,0x1000f
f0000ac6:       |     |   5f250513              addi    a0,a0,1522 # 100b4 <_non_volatile_scratch_end+0xff900b4>
f0000aca:       |     |   4585                  li      a1,1
f0000acc:       |     |   8622                  mv      a2,s0
f0000ace:       |     |   72d000ef              jal     ra,f00019fa <base_log_internal_dv>
f0000ad2:       |  /--|-- a829                  j       f0000aec <hmac_testutils_check_message_length+0x52>
f0000ad4:       |  |  \-> 00002597              auipc   a1,0x2
f0000ad8:       |  |      73058593              addi    a1,a1,1840 # f0003204 <kExpectedHmacDigest+0x2c4>
f0000adc:       |  |      0028                  addi    a0,sp,8
f0000ade:       |  |      4651                  li      a2,20
f0000ae0:       |  |      7f0010ef              jal     ra,f00022d0 <memcpy>
f0000ae4:       |  |      0028                  addi    a0,sp,8
f0000ae6:       |  |      85a2                  mv      a1,s0
f0000ae8:       |  |      671000ef              jal     ra,f0001958 <base_log_internal_core>
f0000aec:       |  \----> 6531                  lui     a0,0xc
f0000aee:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000af2:       |         5a1000ef              jal     ra,f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:66

  // 64bit formatting is not supported, so split into hi and lo hex 32bit
  // values. These should appear as 64bit hex values in the debug output.
  CHECK(expected_sent_bits == sent_bits,
f0000af6:       \-------> 5402                  lw      s0,32(sp)
f0000af8:                 5492                  lw      s1,36(sp)
f0000afa:                 01244533              xor     a0,s0,s2
f0000afe:                 0134c5b3              xor     a1,s1,s3
f0000b02:                 8d4d                  or      a0,a0,a1
f0000b04:       /-------- c521                  beqz    a0,f0000b4c <hmac_testutils_check_message_length+0xb2>
f0000b06:       |         000a2503              lw      a0,0(s4)
f0000b0a:       |     /-- cd09                  beqz    a0,f0000b24 <hmac_testutils_check_message_length+0x8a>
f0000b0c:       |     |   1000f517              auipc   a0,0x1000f
f0000b10:       |     |   5bc50513              addi    a0,a0,1468 # 100c8 <_non_volatile_scratch_end+0xff900c8>
f0000b14:       |     |   4591                  li      a1,4
f0000b16:       |     |   864e                  mv      a2,s3
f0000b18:       |     |   86ca                  mv      a3,s2
f0000b1a:       |     |   8726                  mv      a4,s1
f0000b1c:       |     |   87a2                  mv      a5,s0
f0000b1e:       |     |   6dd000ef              jal     ra,f00019fa <base_log_internal_dv>
f0000b22:       |  /--|-- a005                  j       f0000b42 <hmac_testutils_check_message_length+0xa8>
f0000b24:       |  |  \-> 00002597              auipc   a1,0x2
f0000b28:       |  |      6f458593              addi    a1,a1,1780 # f0003218 <kExpectedHmacDigest+0x2d8>
f0000b2c:       |  |      0028                  addi    a0,sp,8
f0000b2e:       |  |      4651                  li      a2,20
f0000b30:       |  |      7a0010ef              jal     ra,f00022d0 <memcpy>
f0000b34:       |  |      0028                  addi    a0,sp,8
f0000b36:       |  |      85ce                  mv      a1,s3
f0000b38:       |  |      864a                  mv      a2,s2
f0000b3a:       |  |      86a6                  mv      a3,s1
f0000b3c:       |  |      8722                  mv      a4,s0
f0000b3e:       |  |      61b000ef              jal     ra,f0001958 <base_log_internal_core>
f0000b42:       |  \----> 6531                  lui     a0,0xc
f0000b44:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000b48:       |         54b000ef              jal     ra,f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:71
        "Message length mismatch. "
        "Expected 0x%08x%08x bits but got 0x%08x%08x bits.",
        (uint32_t)(expected_sent_bits >> 32), (uint32_t)expected_sent_bits,
        (uint32_t)(sent_bits >> 32), (uint32_t)sent_bits);
}
f0000b4c:       \-------> 5a22                  lw      s4,40(sp)
f0000b4e:                 59b2                  lw      s3,44(sp)
f0000b50:                 5942                  lw      s2,48(sp)
f0000b52:                 54d2                  lw      s1,52(sp)
f0000b54:                 5462                  lw      s0,56(sp)
f0000b56:                 50f2                  lw      ra,60(sp)
f0000b58:                 6121                  addi    sp,sp,64
f0000b5a:                 8082                  ret

f0000b5c <hmac_testutils_fifo_empty_polled>:
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:82
  uint32_t fifo_depth;
  CHECK_DIF_OK(dif_hmac_fifo_count_entries(hmac, &fifo_depth));
  return fifo_depth == 0;
}

void hmac_testutils_fifo_empty_polled(const dif_hmac_t *hmac) {
f0000b5c:                    711d                       addi    sp,sp,-96
f0000b5e:                    ce86                       sw      ra,92(sp)
f0000b60:                    cca2                       sw      s0,88(sp)
f0000b62:                    caa6                       sw      s1,84(sp)
f0000b64:                    c8ca                       sw      s2,80(sp)
f0000b66:                    c6ce                       sw      s3,76(sp)
f0000b68:                    c4d2                       sw      s4,72(sp)
f0000b6a:                    c2d6                       sw      s5,68(sp)
f0000b6c:                    c0da                       sw      s6,64(sp)
f0000b6e:                    de5e                       sw      s7,60(sp)
f0000b70:                    dc62                       sw      s8,56(sp)
f0000b72:                    da66                       sw      s9,52(sp)
f0000b74:                    d86a                       sw      s10,48(sp)
f0000b76:                    d66e                       sw      s11,44(sp)
f0000b78:                    00003597           auipc   a1,0x3
f0000b7c:                    4e058593           addi    a1,a1,1248 # f0004058 <kClockFreqCpuHz>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:83
  IBEX_SPIN_FOR(check_fifo_empty(hmac), HMAC_TESTUTILS_FIFO_EMPTY_USEC);
f0000b80:                    0045a903           lw      s2,4(a1)
f0000b84:                    0005aa03           lw      s4,0(a1)
f0000b88:                    8aaa                       mv      s5,a0
f0000b8a:                    055d5537           lui     a0,0x55d5
f0000b8e:                    a8050513           addi    a0,a0,-1408 # 55d4a80 <_ottf_size+0x5554a80>
f0000b92:                    c62a                       sw      a0,12(sp)
f0000b94:                    4581                       li      a1,0
f0000b96:                    8652                       mv      a2,s4
f0000b98:                    86ca                       mv      a3,s2
f0000b9a:                    4701                       li      a4,0
f0000b9c:                    684010ef           jal     ra,f0002220 <udiv64_slow>
f0000ba0:                    0505                       addi    a0,a0,1
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
 * @param timeout_usec Timeout in microseconds.
 * @return The initialized timeout value.
 */
inline ibex_timeout_t ibex_timeout_init(uint32_t timeout_usec) {
  return (ibex_timeout_t){
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
f0000ba2:                    02a905b3           mul     a1,s2,a0
f0000ba6:                    02aa3633           mulhu   a2,s4,a0
f0000baa:                    95b2                       add     a1,a1,a2
f0000bac:                    02aa0533           mul     a0,s4,a0
f0000bb0:                    000f4637           lui     a2,0xf4
f0000bb4:                    24060613           addi    a2,a2,576 # f4240 <_ottf_size+0x74240>
f0000bb8:                    4681                       li      a3,0
f0000bba:                    4701                       li      a4,0
f0000bbc:                    664010ef           jal     ra,f0002220 <udiv64_slow>
f0000bc0:                    00003617           auipc   a2,0x3
f0000bc4:                    4b460613           addi    a2,a2,1204 # f0004074 <kDeviceLogBypassUartAddress>
f0000bc8:                    4210                       lw      a2,0(a2)
f0000bca:                    8baa                       mv      s7,a0
f0000bcc:                    842e                       mv      s0,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
f0000bce:                /-> b8002573           csrr    a0,mcycleh
f0000bd2:                |   b00025f3           csrr    a1,mcycle
f0000bd6:                |   b80026f3           csrr    a3,mcycleh
f0000bda:                \-- fed51ae3           bne     a0,a3,f0000bce <hmac_testutils_fifo_empty_polled+0x72>
f0000bde:                    00163c93           seqz    s9,a2
f0000be2:                    40b00c33           neg     s8,a1
f0000be6:                    00b035b3           snez    a1,a1
f0000bea:                    952e                       add     a0,a0,a1
f0000bec:                    40a009b3           neg     s3,a0
f0000bf0:                    00002517           auipc   a0,0x2
f0000bf4:                    63c50513           addi    a0,a0,1596 # f000322c <kExpectedHmacDigest+0x2ec>
f0000bf8:                    c02a                       sw      a0,0(sp)
f0000bfa:                    6531                       lui     a0,0xc
f0000bfc:                    aad50d93           addi    s11,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000c00:                    1000f517           auipc   a0,0x1000f
f0000c04:                    4dc50513           addi    a0,a0,1244 # 100dc <_non_volatile_scratch_end+0xff900dc>
f0000c08:                    c42a                       sw      a0,8(sp)
f0000c0a:                    00002517           auipc   a0,0x2
f0000c0e:                    68650513           addi    a0,a0,1670 # f0003290 <kExpectedHmacDigest+0x350>
f0000c12:                    c22a                       sw      a0,4(sp)
f0000c14:                    1000fd17           auipc   s10,0x1000f
f0000c18:                    52cd0d13           addi    s10,s10,1324 # 10140 <_non_volatile_scratch_end+0xff90140>
check_fifo_empty():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:78
  CHECK_DIF_OK(dif_hmac_fifo_count_entries(hmac, &fifo_depth));
f0000c1c:       /----------> 102c                       addi    a1,sp,40
f0000c1e:       |            8556                       mv      a0,s5
f0000c20:       |            2305                       jal     f0001140 <dif_hmac_fifo_count_entries>
f0000c22:       |  /-------- c515                       beqz    a0,f0000c4e <hmac_testutils_fifo_empty_polled+0xf2>
f0000c24:       |  |         84aa                       mv      s1,a0
f0000c26:       |  |     /-- 000c9863           bnez    s9,f0000c36 <hmac_testutils_fifo_empty_polled+0xda>
f0000c2a:       |  |     |   4585                       li      a1,1
f0000c2c:       |  |     |   856a                       mv      a0,s10
f0000c2e:       |  |     |   8626                       mv      a2,s1
f0000c30:       |  |     |   5cb000ef           jal     ra,f00019fa <base_log_internal_dv>
f0000c34:       |  |  /--|-- a811                       j       f0000c48 <hmac_testutils_fifo_empty_polled+0xec>
f0000c36:       |  |  |  \-> 0808                       addi    a0,sp,16
f0000c38:       |  |  |      4651                       li      a2,20
f0000c3a:       |  |  |      4592                       lw      a1,4(sp)
f0000c3c:       |  |  |      694010ef           jal     ra,f00022d0 <memcpy>
f0000c40:       |  |  |      0808                       addi    a0,sp,16
f0000c42:       |  |  |      85a6                       mv      a1,s1
f0000c44:       |  |  |      515000ef           jal     ra,f0001958 <base_log_internal_core>
f0000c48:       |  |  \----> 856e                       mv      a0,s11
f0000c4a:       |  |         449000ef           jal     ra,f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:79
  return fifo_depth == 0;
f0000c4e:       |  \-------> 5522                       lw      a0,40(sp)
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:83
  IBEX_SPIN_FOR(check_fifo_empty(hmac), HMAC_TESTUTILS_FIFO_EMPTY_USEC);
f0000c50:       |  /-------- cd35                       beqz    a0,f0000ccc <hmac_testutils_fifo_empty_polled+0x170>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
f0000c52:       |  |     /-> b80025f3           csrr    a1,mcycleh
f0000c56:       |  |     |   b0002573           csrr    a0,mcycle
f0000c5a:       |  |     |   b8002673           csrr    a2,mcycleh
f0000c5e:       |  |     \-- fec59ae3           bne     a1,a2,f0000c52 <hmac_testutils_fifo_empty_polled+0xf6>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000c62:       |  |         9562                       add     a0,a0,s8
f0000c64:       |  |         01853633           sltu    a2,a0,s8
f0000c68:       |  |         964e                       add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
 *
 * @param timeout Holds the counter start value.
 * @return True if the timeout has expired and false otherwise.
 */
inline bool ibex_timeout_check(const ibex_timeout_t *timeout) {
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
f0000c6a:       |  |         95b2                       add     a1,a1,a2
f0000c6c:       |  |  /----- 00858563           beq     a1,s0,f0000c76 <hmac_testutils_fifo_empty_polled+0x11a>
f0000c70:       |  |  |      00b43533           sltu    a0,s0,a1
f0000c74:       |  |  |  /-- a019                       j       f0000c7a <hmac_testutils_fifo_empty_polled+0x11e>
f0000c76:       |  |  \--|-> 00abb533           sltu    a0,s7,a0
f0000c7a:       |  |     \-> 00154513           xori    a0,a0,1
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:83
f0000c7e:       +--|-------- fd59                       bnez    a0,f0000c1c <hmac_testutils_fifo_empty_polled+0xc0>
f0000c80:       |  |         4532                       lw      a0,12(sp)
f0000c82:       |  |         4581                       li      a1,0
f0000c84:       |  |         8652                       mv      a2,s4
f0000c86:       |  |         86ca                       mv      a3,s2
f0000c88:       |  |         4701                       li      a4,0
f0000c8a:       |  |         596010ef           jal     ra,f0002220 <udiv64_slow>
f0000c8e:       |  |         00150493           addi    s1,a0,1
f0000c92:       |  |         00a4b533           sltu    a0,s1,a0
f0000c96:       |  |         00a58b33           add     s6,a1,a0
f0000c9a:       |  |     /-- 000c9a63           bnez    s9,f0000cae <hmac_testutils_fifo_empty_polled+0x152>
f0000c9e:       |  |     |   4589                       li      a1,2
f0000ca0:       |  |     |   4522                       lw      a0,8(sp)
f0000ca2:       |  |     |   8626                       mv      a2,s1
f0000ca4:       |  |     |   86da                       mv      a3,s6
f0000ca6:       |  |     |   875e                       mv      a4,s7
f0000ca8:       |  |     |   553000ef           jal     ra,f00019fa <base_log_internal_dv>
f0000cac:       |  |  /--|-- a821                       j       f0000cc4 <hmac_testutils_fifo_empty_polled+0x168>
f0000cae:       |  |  |  \-> 0808                       addi    a0,sp,16
f0000cb0:       |  |  |      4651                       li      a2,20
f0000cb2:       |  |  |      4582                       lw      a1,0(sp)
f0000cb4:       |  |  |      61c010ef           jal     ra,f00022d0 <memcpy>
f0000cb8:       |  |  |      0808                       addi    a0,sp,16
f0000cba:       |  |  |      8626                       mv      a2,s1
f0000cbc:       |  |  |      86da                       mv      a3,s6
f0000cbe:       |  |  |      875e                       mv      a4,s7
f0000cc0:       |  |  |      499000ef           jal     ra,f0001958 <base_log_internal_core>
f0000cc4:       |  |  \----> 856e                       mv      a0,s11
f0000cc6:       |  |         3cd000ef           jal     ra,f0001892 <test_status_set>
f0000cca:       \--|-------- bf89                       j       f0000c1c <hmac_testutils_fifo_empty_polled+0xc0>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:84
}
f0000ccc:          \-------> 5db2                       lw      s11,44(sp)
f0000cce:                    5d42                       lw      s10,48(sp)
f0000cd0:                    5cd2                       lw      s9,52(sp)
f0000cd2:                    5c62                       lw      s8,56(sp)
f0000cd4:                    5bf2                       lw      s7,60(sp)
f0000cd6:                    4b06                       lw      s6,64(sp)
f0000cd8:                    4a96                       lw      s5,68(sp)
f0000cda:                    4a26                       lw      s4,72(sp)
f0000cdc:                    49b6                       lw      s3,76(sp)
f0000cde:                    4946                       lw      s2,80(sp)
f0000ce0:                    44d6                       lw      s1,84(sp)
f0000ce2:                    4466                       lw      s0,88(sp)
f0000ce4:                    40f6                       lw      ra,92(sp)
f0000ce6:                    6125                       addi    sp,sp,96
f0000ce8:                    8082                       ret

f0000cea <hmac_testutils_finish_polled>:
hmac_testutils_finish_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:95

  return res == kDifOk;
}

void hmac_testutils_finish_polled(const dif_hmac_t *hmac,
                                  dif_hmac_digest_t *digest_out) {
f0000cea:                       7159                    addi    sp,sp,-112
f0000cec:                       d686                    sw      ra,108(sp)
f0000cee:                       d4a2                    sw      s0,104(sp)
f0000cf0:                       d2a6                    sw      s1,100(sp)
f0000cf2:                       d0ca                    sw      s2,96(sp)
f0000cf4:                       cece                    sw      s3,92(sp)
f0000cf6:                       ccd2                    sw      s4,88(sp)
f0000cf8:                       cad6                    sw      s5,84(sp)
f0000cfa:                       c8da                    sw      s6,80(sp)
f0000cfc:                       c6de                    sw      s7,76(sp)
f0000cfe:                       c4e2                    sw      s8,72(sp)
f0000d00:                       c2e6                    sw      s9,68(sp)
f0000d02:                       c0ea                    sw      s10,64(sp)
f0000d04:                       de6e                    sw      s11,60(sp)
f0000d06:                       00003617                auipc   a2,0x3
f0000d0a:                       35260613                addi    a2,a2,850 # f0004058 <kClockFreqCpuHz>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:96
  IBEX_SPIN_FOR(check_finished(hmac, digest_out),
f0000d0e:                       4240                    lw      s0,4(a2)
f0000d10:                       4204                    lw      s1,0(a2)
f0000d12:                       8aae                    mv      s5,a1
f0000d14:                       8b2a                    mv      s6,a0
f0000d16:                       160dc537                lui     a0,0x160dc
f0000d1a:                       08050513                addi    a0,a0,128 # 160dc080 <_ottf_size+0x1605c080>
f0000d1e:                       ce2a                    sw      a0,28(sp)
f0000d20:                       4581                    li      a1,0
f0000d22:                       8626                    mv      a2,s1
f0000d24:                       86a2                    mv      a3,s0
f0000d26:                       4701                    li      a4,0
f0000d28:                       4f8010ef                jal     ra,f0002220 <udiv64_slow>
f0000d2c:                       0505                    addi    a0,a0,1
f0000d2e:                       d222                    sw      s0,36(sp)
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
f0000d30:                       02a405b3                mul     a1,s0,a0
f0000d34:                       02a4b633                mulhu   a2,s1,a0
f0000d38:                       95b2                    add     a1,a1,a2
f0000d3a:                       d026                    sw      s1,32(sp)
f0000d3c:                       02a48533                mul     a0,s1,a0
f0000d40:                       000f4637                lui     a2,0xf4
f0000d44:                       24060613                addi    a2,a2,576 # f4240 <_ottf_size+0x74240>
f0000d48:                       4681                    li      a3,0
f0000d4a:                       4701                    li      a4,0
f0000d4c:                       4d4010ef                jal     ra,f0002220 <udiv64_slow>
f0000d50:                       00003617                auipc   a2,0x3
f0000d54:                       32460613                addi    a2,a2,804 # f0004074 <kDeviceLogBypassUartAddress>
f0000d58:                       4210                    lw      a2,0(a2)
f0000d5a:                       8c2a                    mv      s8,a0
f0000d5c:                       8cae                    mv      s9,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
f0000d5e:                   /-> b8002573                csrr    a0,mcycleh
f0000d62:                   |   b00025f3                csrr    a1,mcycle
f0000d66:                   |   b80026f3                csrr    a3,mcycleh
f0000d6a:                   \-- fed51ae3                bne     a0,a3,f0000d5e <hmac_testutils_finish_polled+0x74>
f0000d6e:                       00163d93                seqz    s11,a2
f0000d72:                       40b00a33                neg     s4,a1
f0000d76:                       00b035b3                snez    a1,a1
f0000d7a:                       952e                    add     a0,a0,a1
f0000d7c:                       40a00933                neg     s2,a0
f0000d80:                       49b9                    li      s3,14
f0000d82:                       00002517                auipc   a0,0x2
f0000d86:                       4be50513                addi    a0,a0,1214 # f0003240 <kExpectedHmacDigest+0x300>
f0000d8a:                       c82a                    sw      a0,16(sp)
f0000d8c:                       6531                    lui     a0,0xc
f0000d8e:                       aad50d13                addi    s10,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000d92:                       1000f517                auipc   a0,0x1000f
f0000d96:                       35e50513                addi    a0,a0,862 # 100f0 <_non_volatile_scratch_end+0xff900f0>
f0000d9a:                       cc2a                    sw      a0,24(sp)
f0000d9c:                       00002517                auipc   a0,0x2
f0000da0:                       50850513                addi    a0,a0,1288 # f00032a4 <kExpectedHmacDigest+0x364>
f0000da4:                       c62a                    sw      a0,12(sp)
f0000da6:                       1000f517                auipc   a0,0x1000f
f0000daa:                       3ae50513                addi    a0,a0,942 # 10154 <_non_volatile_scratch_end+0xff90154>
f0000dae:                       ca2a                    sw      a0,20(sp)
check_finished():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:88
  dif_result_t res = dif_hmac_finish(hmac, digest_out);
f0000db0:       /-------------> 855a                    mv      a0,s6
f0000db2:       |               85d6                    mv      a1,s5
f0000db4:       |               2ef1                    jal     f0001190 <dif_hmac_finish>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:89
  CHECK(res == kDifOk || res == kDifUnavailable, "HMAC error = %d", res);
f0000db6:       |     /-------- 03350863                beq     a0,s3,f0000de6 <hmac_testutils_finish_polled+0xfc>
f0000dba:       |     |         8baa                    mv      s7,a0
f0000dbc:       |  /--|-------- c155                    beqz    a0,f0000e60 <hmac_testutils_finish_polled+0x176>
f0000dbe:       |  |  |     /-- 000d9863                bnez    s11,f0000dce <hmac_testutils_finish_polled+0xe4>
f0000dc2:       |  |  |     |   4585                    li      a1,1
f0000dc4:       |  |  |     |   4552                    lw      a0,20(sp)
f0000dc6:       |  |  |     |   865e                    mv      a2,s7
f0000dc8:       |  |  |     |   433000ef                jal     ra,f00019fa <base_log_internal_dv>
f0000dcc:       |  |  |  /--|-- a811                    j       f0000de0 <hmac_testutils_finish_polled+0xf6>
f0000dce:       |  |  |  |  \-> 1028                    addi    a0,sp,40
f0000dd0:       |  |  |  |      4651                    li      a2,20
f0000dd2:       |  |  |  |      45b2                    lw      a1,12(sp)
f0000dd4:       |  |  |  |      4fc010ef                jal     ra,f00022d0 <memcpy>
f0000dd8:       |  |  |  |      1028                    addi    a0,sp,40
f0000dda:       |  |  |  |      85de                    mv      a1,s7
f0000ddc:       |  |  |  |      37d000ef                jal     ra,f0001958 <base_log_internal_core>
f0000de0:       |  |  |  \----> 856a                    mv      a0,s10
f0000de2:       |  |  |         2b1000ef                jal     ra,f0001892 <test_status_set>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
f0000de6:       |  |  >-------> b80025f3                csrr    a1,mcycleh
f0000dea:       |  |  |         b0002573                csrr    a0,mcycle
f0000dee:       |  |  |         b8002673                csrr    a2,mcycleh
f0000df2:       |  |  \-------- fec59ae3                bne     a1,a2,f0000de6 <hmac_testutils_finish_polled+0xfc>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000df6:       |  |            9552                    add     a0,a0,s4
f0000df8:       |  |            01453633                sltu    a2,a0,s4
f0000dfc:       |  |            964a                    add     a2,a2,s2
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
f0000dfe:       |  |            95b2                    add     a1,a1,a2
f0000e00:       |  |     /----- 01958563                beq     a1,s9,f0000e0a <hmac_testutils_finish_polled+0x120>
f0000e04:       |  |     |      00bcb533                sltu    a0,s9,a1
f0000e08:       |  |     |  /-- a019                    j       f0000e0e <hmac_testutils_finish_polled+0x124>
f0000e0a:       |  |     \--|-> 00ac3533                sltu    a0,s8,a0
f0000e0e:       |  |        \-> 00154513                xori    a0,a0,1
hmac_testutils_finish_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:96
  IBEX_SPIN_FOR(check_finished(hmac, digest_out),
f0000e12:       +--|----------- fd59                    bnez    a0,f0000db0 <hmac_testutils_finish_polled+0xc6>
f0000e14:       |  |            4572                    lw      a0,28(sp)
f0000e16:       |  |            4581                    li      a1,0
f0000e18:       |  |            5602                    lw      a2,32(sp)
f0000e1a:       |  |            5692                    lw      a3,36(sp)
f0000e1c:       |  |            4701                    li      a4,0
f0000e1e:       |  |            402010ef                jal     ra,f0002220 <udiv64_slow>
f0000e22:       |  |            00150413                addi    s0,a0,1
f0000e26:       |  |            00a43533                sltu    a0,s0,a0
f0000e2a:       |  |            00a584b3                add     s1,a1,a0
f0000e2e:       |  |        /-- 000d9a63                bnez    s11,f0000e42 <hmac_testutils_finish_polled+0x158>
f0000e32:       |  |        |   4589                    li      a1,2
f0000e34:       |  |        |   4562                    lw      a0,24(sp)
f0000e36:       |  |        |   8622                    mv      a2,s0
f0000e38:       |  |        |   86a6                    mv      a3,s1
f0000e3a:       |  |        |   8762                    mv      a4,s8
f0000e3c:       |  |        |   3bf000ef                jal     ra,f00019fa <base_log_internal_dv>
f0000e40:       |  |     /--|-- a821                    j       f0000e58 <hmac_testutils_finish_polled+0x16e>
f0000e42:       |  |     |  \-> 1028                    addi    a0,sp,40
f0000e44:       |  |     |      4651                    li      a2,20
f0000e46:       |  |     |      45c2                    lw      a1,16(sp)
f0000e48:       |  |     |      488010ef                jal     ra,f00022d0 <memcpy>
f0000e4c:       |  |     |      1028                    addi    a0,sp,40
f0000e4e:       |  |     |      8622                    mv      a2,s0
f0000e50:       |  |     |      86a6                    mv      a3,s1
f0000e52:       |  |     |      8762                    mv      a4,s8
f0000e54:       |  |     |      305000ef                jal     ra,f0001958 <base_log_internal_core>
f0000e58:       |  |     \----> 856a                    mv      a0,s10
f0000e5a:       |  |            239000ef                jal     ra,f0001892 <test_status_set>
f0000e5e:       \--|----------- bf89                    j       f0000db0 <hmac_testutils_finish_polled+0xc6>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:98
                HMAC_TESTUTILS_FINISH_TIMEOUT_USEC);
}
f0000e60:          \----------> 5df2                    lw      s11,60(sp)
f0000e62:                       4d06                    lw      s10,64(sp)
f0000e64:                       4c96                    lw      s9,68(sp)
f0000e66:                       4c26                    lw      s8,72(sp)
f0000e68:                       4bb6                    lw      s7,76(sp)
f0000e6a:                       4b46                    lw      s6,80(sp)
f0000e6c:                       4ad6                    lw      s5,84(sp)
f0000e6e:                       4a66                    lw      s4,88(sp)
f0000e70:                       49f6                    lw      s3,92(sp)
f0000e72:                       5906                    lw      s2,96(sp)
f0000e74:                       5496                    lw      s1,100(sp)
f0000e76:                       5426                    lw      s0,104(sp)
f0000e78:                       50b6                    lw      ra,108(sp)
f0000e7a:                       6165                    addi    sp,sp,112
f0000e7c:                       8082                    ret

f0000e7e <hmac_testutils_finish_and_check_polled>:
hmac_testutils_finish_and_check_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:101

void hmac_testutils_finish_and_check_polled(const dif_hmac_t *hmac,
                                            const dif_hmac_digest_t *expected) {
f0000e7e:                          7159                 addi    sp,sp,-112
f0000e80:                          d686                 sw      ra,108(sp)
f0000e82:                          d4a2                 sw      s0,104(sp)
f0000e84:                          d2a6                 sw      s1,100(sp)
f0000e86:                          d0ca                 sw      s2,96(sp)
f0000e88:                          cece                 sw      s3,92(sp)
f0000e8a:                          ccd2                 sw      s4,88(sp)
f0000e8c:                          cad6                 sw      s5,84(sp)
f0000e8e:                          c8da                 sw      s6,80(sp)
f0000e90:                          c6de                 sw      s7,76(sp)
f0000e92:                          c4e2                 sw      s8,72(sp)
f0000e94:                          c2e6                 sw      s9,68(sp)
f0000e96:                          c0ea                 sw      s10,64(sp)
f0000e98:                          8c2e                 mv      s8,a1
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:103
  dif_hmac_digest_t digest;
  hmac_testutils_finish_polled(hmac, &digest);
f0000e9a:                          100c                 addi    a1,sp,32
f0000e9c:                          1000                 addi    s0,sp,32
f0000e9e:                          35b1                 jal     f0000cea <hmac_testutils_finish_polled>
f0000ea0:                          00003517             auipc   a0,0x3
f0000ea4:                          1d450513             addi    a0,a0,468 # f0004074 <kDeviceLogBypassUartAddress>
f0000ea8:                          410c                 lw      a1,0(a0)
f0000eaa:                          4481                 li      s1,0
f0000eac:                          4501                 li      a0,0
f0000eae:                          0015bc93             seqz    s9,a1
f0000eb2:                          4d21                 li      s10,8
f0000eb4:                          00002917             auipc   s2,0x2
f0000eb8:                          3b490913             addi    s2,s2,948 # f0003268 <kExpectedHmacDigest+0x328>
f0000ebc:                          1000f997             auipc   s3,0x1000f
f0000ec0:                          25c98993             addi    s3,s3,604 # 10118 <_non_volatile_scratch_end+0xff90118>
f0000ec4:                          00002a17             auipc   s4,0x2
f0000ec8:                          390a0a13             addi    s4,s4,912 # f0003254 <kExpectedHmacDigest+0x314>
f0000ecc:                          1000fa97             auipc   s5,0x1000f
f0000ed0:                          238a8a93             addi    s5,s5,568 # 10104 <_non_volatile_scratch_end+0xff90104>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:104
  CHECK_ARRAYS_EQ(digest.digest, expected->digest, ARRAYSIZE(digest.digest));
f0000ed4:       /----------------> 400c                 lw      a1,0(s0)
f0000ed6:       |                  000c2603             lw      a2,0(s8)
f0000eda:       |  /-------------- 04c58e63             beq     a1,a2,f0000f36 <hmac_testutils_finish_and_check_polled+0xb8>
f0000ede:       |  |               8905                 andi    a0,a0,1
f0000ee0:       |  |           /-- c501                 beqz    a0,f0000ee8 <hmac_testutils_finish_and_check_polled+0x6a>
f0000ee2:       |  |        /--|-- 000c8963             beqz    s9,f0000ef4 <hmac_testutils_finish_and_check_polled+0x76>
f0000ee6:       |  |  /-----|--|-- a805                 j       f0000f16 <hmac_testutils_finish_and_check_polled+0x98>
f0000ee8:       |  |  |  /--|--\-X 000c9f63             bnez    s9,f0000f06 <hmac_testutils_finish_and_check_polled+0x88>
f0000eec:       |  |  |  |  |      8556                 mv      a0,s5
f0000eee:       |  |  |  |  |      4581                 li      a1,0
f0000ef0:       |  |  |  |  |      30b000ef             jal     ra,f00019fa <base_log_internal_dv>
f0000ef4:       |  |  |  |  \----> 4014                 lw      a3,0(s0)
f0000ef6:       |  |  |  |         000c2703             lw      a4,0(s8)
f0000efa:       |  |  |  |         458d                 li      a1,3
f0000efc:       |  |  |  |         854e                 mv      a0,s3
f0000efe:       |  |  |  |         8626                 mv      a2,s1
f0000f00:       |  |  |  |         2fb000ef             jal     ra,f00019fa <base_log_internal_dv>
f0000f04:       |  |  |  |     /-- a805                 j       f0000f34 <hmac_testutils_finish_and_check_polled+0xb6>
f0000f06:       |  |  |  \-----|-> 0028                 addi    a0,sp,8
f0000f08:       |  |  |        |   4651                 li      a2,20
f0000f0a:       |  |  |        |   85d2                 mv      a1,s4
f0000f0c:       |  |  |        |   3c4010ef             jal     ra,f00022d0 <memcpy>
f0000f10:       |  |  |        |   0028                 addi    a0,sp,8
f0000f12:       |  |  |        |   247000ef             jal     ra,f0001958 <base_log_internal_core>
f0000f16:       |  |  \--------|-> 00042b03             lw      s6,0(s0)
f0000f1a:       |  |           |   000c2b83             lw      s7,0(s8)
f0000f1e:       |  |           |   0028                 addi    a0,sp,8
f0000f20:       |  |           |   4651                 li      a2,20
f0000f22:       |  |           |   85ca                 mv      a1,s2
f0000f24:       |  |           |   3ac010ef             jal     ra,f00022d0 <memcpy>
f0000f28:       |  |           |   0028                 addi    a0,sp,8
f0000f2a:       |  |           |   85a6                 mv      a1,s1
f0000f2c:       |  |           |   865a                 mv      a2,s6
f0000f2e:       |  |           |   86de                 mv      a3,s7
f0000f30:       |  |           |   229000ef             jal     ra,f0001958 <base_log_internal_core>
f0000f34:       |  |           \-> 4505                 li      a0,1
f0000f36:       |  \-------------> 0485                 addi    s1,s1,1
f0000f38:       |                  0411                 addi    s0,s0,4
f0000f3a:       |                  0c11                 addi    s8,s8,4
f0000f3c:       \----------------- f9a49ce3             bne     s1,s10,f0000ed4 <hmac_testutils_finish_and_check_polled+0x56>
f0000f40:                          8905                 andi    a0,a0,1
f0000f42:                      /-- c511                 beqz    a0,f0000f4e <hmac_testutils_finish_and_check_polled+0xd0>
f0000f44:                      |   6531                 lui     a0,0xc
f0000f46:                      |   aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000f4a:                      |   149000ef             jal     ra,f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:105
}
f0000f4e:                      \-> 4d06                 lw      s10,64(sp)
f0000f50:                          4c96                 lw      s9,68(sp)
f0000f52:                          4c26                 lw      s8,72(sp)
f0000f54:                          4bb6                 lw      s7,76(sp)
f0000f56:                          4b46                 lw      s6,80(sp)
f0000f58:                          4ad6                 lw      s5,84(sp)
f0000f5a:                          4a66                 lw      s4,88(sp)
f0000f5c:                          49f6                 lw      s3,92(sp)
f0000f5e:                          5906                 lw      s2,96(sp)
f0000f60:                          5496                 lw      s1,100(sp)
f0000f62:                          5426                 lw      s0,104(sp)
f0000f64:                          50b6                 lw      ra,108(sp)
f0000f66:                          6165                 addi    sp,sp,112
f0000f68:                          8082                 ret

f0000f6a <hmac_testutils_push_message>:
hmac_testutils_push_message():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:108

void hmac_testutils_push_message(const dif_hmac_t *hmac, const char *data,
                                 size_t len) {
f0000f6a:                       7139                    addi    sp,sp,-64
f0000f6c:                       de06                    sw      ra,60(sp)
f0000f6e:                       dc22                    sw      s0,56(sp)
f0000f70:                       da26                    sw      s1,52(sp)
f0000f72:                       d84a                    sw      s2,48(sp)
f0000f74:                       d64e                    sw      s3,44(sp)
f0000f76:                       d452                    sw      s4,40(sp)
f0000f78:                       d256                    sw      s5,36(sp)
f0000f7a:                       d05a                    sw      s6,32(sp)
f0000f7c:                       ce5e                    sw      s7,28(sp)
f0000f7e:                       cc62                    sw      s8,24(sp)
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:112
  const char *dp = data;
  size_t sent_bytes;

  while (dp - data < len) {
f0000f80:       /-------------- c251                    beqz    a2,f0001004 <hmac_testutils_push_message+0x9a>
f0000f82:       |               8bb2                    mv      s7,a2
f0000f84:       |               892e                    mv      s2,a1
f0000f86:       |               8b2a                    mv      s6,a0
f0000f88:       |               00003517                auipc   a0,0x3
f0000f8c:       |               0ec50513                addi    a0,a0,236 # f0004074 <kDeviceLogBypassUartAddress>
f0000f90:       |               410c                    lw      a1,0(a0)
f0000f92:       |               4501                    li      a0,0
f0000f94:       |               0015bc13                seqz    s8,a1
f0000f98:       |               00002997                auipc   s3,0x2
f0000f9c:       |               2e498993                addi    s3,s3,740 # f000327c <kExpectedHmacDigest+0x33c>
f0000fa0:       |               65b1                    lui     a1,0xc
f0000fa2:       |               aad58a13                addi    s4,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000fa6:       |               1000fa97                auipc   s5,0x1000f
f0000faa:       |               186a8a93                addi    s5,s5,390 # 1012c <_non_volatile_scratch_end+0xff9012c>
f0000fae:       |               84ca                    mv      s1,s2
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:114
    dif_result_t res =
        dif_hmac_fifo_push(hmac, dp, len - (dp - data), &sent_bytes);
f0000fb0:       |  /----------> 40ab8633                sub     a2,s7,a0
f0000fb4:       |  |            0854                    addi    a3,sp,20
f0000fb6:       |  |            855a                    mv      a0,s6
f0000fb8:       |  |            85a6                    mv      a1,s1
f0000fba:       |  |            2a05                    jal     f00010ea <dif_hmac_fifo_push>
f0000fbc:       |  |            842a                    mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:115
    CHECK(res == kDifOk || res == kDifIpFifoFull, "HMAC error = %d", res);
f0000fbe:       |  |            995d                    andi    a0,a0,-9
f0000fc0:       |  |  /-------- c50d                    beqz    a0,f0000fea <hmac_testutils_push_message+0x80>
f0000fc2:       |  |  |     /-- 000c1863                bnez    s8,f0000fd2 <hmac_testutils_push_message+0x68>
f0000fc6:       |  |  |     |   4585                    li      a1,1
f0000fc8:       |  |  |     |   8556                    mv      a0,s5
f0000fca:       |  |  |     |   8622                    mv      a2,s0
f0000fcc:       |  |  |     |   22f000ef                jal     ra,f00019fa <base_log_internal_dv>
f0000fd0:       |  |  |  /--|-- a811                    j       f0000fe4 <hmac_testutils_push_message+0x7a>
f0000fd2:       |  |  |  |  \-> 850a                    mv      a0,sp
f0000fd4:       |  |  |  |      4651                    li      a2,20
f0000fd6:       |  |  |  |      85ce                    mv      a1,s3
f0000fd8:       |  |  |  |      2f8010ef                jal     ra,f00022d0 <memcpy>
f0000fdc:       |  |  |  |      850a                    mv      a0,sp
f0000fde:       |  |  |  |      85a2                    mv      a1,s0
f0000fe0:       |  |  |  |      179000ef                jal     ra,f0001958 <base_log_internal_core>
f0000fe4:       |  |  |  \----> 8552                    mv      a0,s4
f0000fe6:       |  |  |         0ad000ef                jal     ra,f0001892 <test_status_set>
f0000fea:       |  |  \-------> ff840513                addi    a0,s0,-8
f0000fee:       |  |            00153513                seqz    a0,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:119

    // Wait until the FIFO is drained before pushing more data. This helps
    // to prevent the undesirable back pressure condition.
    if (res == kDifIpFifoFull) {
f0000ff2:       |  |        /-- c119                    beqz    a0,f0000ff8 <hmac_testutils_push_message+0x8e>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:120
      hmac_testutils_fifo_empty_polled(hmac);
f0000ff4:       |  |        |   855a                    mv      a0,s6
f0000ff6:       |  |        |   369d                    jal     f0000b5c <hmac_testutils_fifo_empty_polled>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:123
    }

    dp += sent_bytes;
f0000ff8:       |  |        \-> 4552                    lw      a0,20(sp)
f0000ffa:       |  |            94aa                    add     s1,s1,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:112
  while (dp - data < len) {
f0000ffc:       |  |            41248533                sub     a0,s1,s2
f0001000:       |  \----------- fb7568e3                bltu    a0,s7,f0000fb0 <hmac_testutils_push_message+0x46>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:125
  }
}
f0001004:       \-------------> 4c62                    lw      s8,24(sp)
f0001006:                       4bf2                    lw      s7,28(sp)
f0001008:                       5b02                    lw      s6,32(sp)
f000100a:                       5a92                    lw      s5,36(sp)
f000100c:                       5a22                    lw      s4,40(sp)
f000100e:                       59b2                    lw      s3,44(sp)
f0001010:                       5942                    lw      s2,48(sp)
f0001012:                       54d2                    lw      s1,52(sp)
f0001014:                       5462                    lw      s0,56(sp)
f0001016:                       50f2                    lw      ra,60(sp)
f0001018:                       6121                    addi    sp,sp,64
f000101a:                       8082                    ret

f000101c <dif_hmac_init>:
dif_hmac_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:18

#include "hmac_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_hmac_init(mmio_region_t base_addr, dif_hmac_t *hmac) {
  if (hmac == NULL) {
f000101c:       /----- c581                     beqz    a1,f0001024 <dif_hmac_init+0x8>
f000101e:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:22
    return kDifBadArg;
  }

  hmac->base_addr = base_addr;
f0001020:       |      c188                     sw      a0,0(a1)
f0001022:       |  /-- a011                     j       f0001026 <dif_hmac_init+0xa>
f0001024:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:25

  return kDifOk;
}
f0001026:          \-> 8532                     mv      a0,a2
f0001028:              8082                     ret

f000102a <dif_hmac_mode_hmac_start>:
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:99
}

dif_result_t dif_hmac_mode_hmac_start(const dif_hmac_t *hmac,
                                      const uint8_t *key,
                                      const dif_hmac_transaction_t config) {
  if (hmac == NULL || key == NULL) {
f000102a:                       00153713                seqz    a4,a0
f000102e:                       0015b793                seqz    a5,a1
f0001032:                       8fd9                    or      a5,a5,a4
f0001034:                       470d                    li      a4,3
f0001036:       /-------------- e7a5                    bnez    a5,f000109e <dif_hmac_mode_hmac_start+0x74>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:104
    return kDifBadArg;
  }

  // Read current CFG register value.
  uint32_t reg = mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
f0001038:       |               00052883                lw      a7,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f000103c:       |               0108a803                lw      a6,16(a7)
f0001040:       |               4735                    li      a4,13
dif_hmac_calculate_device_config_value():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:62
  switch (config.message_endianness) {
f0001042:       |  /----------- ca19                    beqz    a2,f0001058 <dif_hmac_mode_hmac_start+0x2e>
f0001044:       |  |            4785                    li      a5,1
f0001046:       +--|----------- 04f61c63                bne     a2,a5,f000109e <dif_hmac_mode_hmac_start+0x74>
f000104a:       |  |            4281                    li      t0,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:75
  switch (config.digest_endianness) {
f000104c:       |  |  /-------- ca81                    beqz    a3,f000105c <dif_hmac_mode_hmac_start+0x32>
f000104e:       |  |  |  /----> 4785                    li      a5,1
f0001050:       +--|--|--|----- 04f69763                bne     a3,a5,f000109e <dif_hmac_mode_hmac_start+0x74>
f0001054:       |  |  |  |      4301                    li      t1,0
f0001056:       |  |  |  |  /-- a021                    j       f000105e <dif_hmac_mode_hmac_start+0x34>
f0001058:       |  \--|--|--|-> 4291                    li      t0,4
f000105a:       |     |  \--|-- faf5                    bnez    a3,f000104e <dif_hmac_mode_hmac_start+0x24>
f000105c:       |     \-----|-> 4321                    li      t1,8
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f000105e:       |           \-> 4198                    lw      a4,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0001060:       |               04e8a023                sw      a4,64(a7)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:113

  // Set the HMAC key.
  // The least significant word is at HMAC_KEY_7_REG_OFFSET.
  // From the HWIP spec: "Order of the secret key is: key[255:0] = {KEY0, KEY1,
  // KEY2, ... , KEY7};"
  for (size_t i = 0; i < HMAC_PARAM_NUM_WORDS; ++i) {
f0001064:       |               0591                    addi    a1,a1,4
f0001066:       |               03c00713                li      a4,60
f000106a:       |               02000793                li      a5,32
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:115
    const uint32_t word_offset = i * sizeof(uint32_t);
    mmio_region_write32(hmac->base_addr, HMAC_KEY_7_REG_OFFSET - word_offset,
f000106e:       |           /-> 4110                    lw      a2,0(a0)
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
f0001070:       |           |   4194                    lw      a3,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001072:       |           |   963a                    add     a2,a2,a4
f0001074:       |           |   c214                    sw      a3,0(a2)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:113
  for (size_t i = 0; i < HMAC_PARAM_NUM_WORDS; ++i) {
f0001076:       |           |   1771                    addi    a4,a4,-4
f0001078:       |           |   0591                    addi    a1,a1,4
f000107a:       |           \-- fef71ae3                bne     a4,a5,f000106e <dif_hmac_mode_hmac_start+0x44>
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
f000107e:       |               ff087593                andi    a1,a6,-16
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:122
  }

  // Set HMAC to process in HMAC mode (not SHA256-only mode).
  reg = bitfield_bit32_write(reg, HMAC_CFG_SHA_EN_BIT, true);
  reg = bitfield_bit32_write(reg, HMAC_CFG_HMAC_EN_BIT, true);
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, reg);
f0001082:       |               4118                    lw      a4,0(a0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0001084:       |               0055e5b3                or      a1,a1,t0
f0001088:       |               0065e5b3                or      a1,a1,t1
f000108c:       |               0035e593                ori     a1,a1,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001090:       |               cb0c                    sw      a1,16(a4)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:125

  // Begin HMAC operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
f0001092:       |               4108                    lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0001094:       |               494c                    lw      a1,20(a0)
f0001096:       |               4701                    li      a4,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0001098:       |               0015e593                ori     a1,a1,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f000109c:       |               c94c                    sw      a1,20(a0)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:128
                                  HMAC_CMD_HASH_START_BIT);
  return kDifOk;
}
f000109e:       \-------------> 853a                    mv      a0,a4
f00010a0:                       8082                    ret

f00010a2 <dif_hmac_mode_sha256_start>:
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:132

dif_result_t dif_hmac_mode_sha256_start(const dif_hmac_t *hmac,
                                        const dif_hmac_transaction_t config) {
  if (hmac == NULL) {
f00010a2:          /-------------- c105                 beqz    a0,f00010c2 <dif_hmac_mode_sha256_start+0x20>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:137
    return kDifBadArg;
  }

  // Read current CFG register value.
  uint32_t reg = mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
f00010a4:          |               4118                 lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00010a6:          |               01072803             lw      a6,16(a4)
f00010aa:          |               46b5                 li      a3,13
dif_hmac_calculate_device_config_value():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:62
  switch (config.message_endianness) {
f00010ac:          |  /----------- cd89                 beqz    a1,f00010c6 <dif_hmac_mode_sha256_start+0x24>
f00010ae:          |  |            4785                 li      a5,1
f00010b0:       /--|--|----------- 02f59b63             bne     a1,a5,f00010e6 <dif_hmac_mode_sha256_start+0x44>
f00010b4:       |  |  |            4581                 li      a1,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:75
  switch (config.digest_endianness) {
f00010b6:       |  |  |  /-------- ca11                 beqz    a2,f00010ca <dif_hmac_mode_sha256_start+0x28>
f00010b8:       |  |  |  |  /----> 4785                 li      a5,1
f00010ba:       +--|--|--|--|----- 02f61663             bne     a2,a5,f00010e6 <dif_hmac_mode_sha256_start+0x44>
f00010be:       |  |  |  |  |      4601                 li      a2,0
f00010c0:       |  |  |  |  |  /-- a031                 j       f00010cc <dif_hmac_mode_sha256_start+0x2a>
f00010c2:       |  \--|--|--|--|-> 468d                 li      a3,3
f00010c4:       +-----|--|--|--|-- a00d                 j       f00010e6 <dif_hmac_mode_sha256_start+0x44>
f00010c6:       |     \--|--|--|-> 4591                 li      a1,4
f00010c8:       |        |  \--|-- fa65                 bnez    a2,f00010b8 <dif_hmac_mode_sha256_start+0x16>
f00010ca:       |        \-----|-> 4621                 li      a2,8
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f00010cc:       |              \-> ff087693             andi    a3,a6,-16
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f00010d0:       |                  8dd5                 or      a1,a1,a3
f00010d2:       |                  8dd1                 or      a1,a1,a2
f00010d4:       |                  0025e593             ori     a1,a1,2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00010d8:       |                  cb0c                 sw      a1,16(a4)
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:150

  // Write new CFG register value.
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, reg);

  // Begin SHA256-only operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
f00010da:       |                  4108                 lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00010dc:       |                  494c                 lw      a1,20(a0)
f00010de:       |                  4681                 li      a3,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f00010e0:       |                  0015e593             ori     a1,a1,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00010e4:       |                  c94c                 sw      a1,20(a0)
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:154
                                  HMAC_CMD_HASH_START_BIT);

  return kDifOk;
}
f00010e6:       \----------------> 8536                 mv      a0,a3
f00010e8:                          8082                 ret

f00010ea <dif_hmac_fifo_push>:
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:158

dif_result_t dif_hmac_fifo_push(const dif_hmac_t *hmac, const void *data,
                                size_t len, size_t *bytes_sent) {
  if (hmac == NULL || data == NULL) {
f00010ea:                       00153713                seqz    a4,a0
f00010ee:                       0015b793                seqz    a5,a1
f00010f2:                       8fd9                    or      a5,a5,a4
f00010f4:                       470d                    li      a4,3
f00010f6:       /-------------- e3b9                    bnez    a5,f000113c <dif_hmac_fifo_push+0x52>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:165
  }

  const uint8_t *data_sent = (const uint8_t *)data;
  size_t bytes_remaining = len;

  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
f00010f8:       |  /----------- ce1d                    beqz    a2,f0001136 <dif_hmac_fifo_push+0x4c>
f00010fa:       |  |            4811                    li      a6,4
f00010fc:       |  |            87b2                    mv      a5,a2
get_status():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
f00010fe:       |  |  /-------> 00052883                lw      a7,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0001102:       |  |  |         0188a703                lw      a4,24(a7)
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:169
    bool word_aligned = (uintptr_t)data_sent % sizeof(uint32_t) == 0;
    size_t bytes_written = 0;

    if (bytes_remaining < sizeof(uint32_t) || !word_aligned) {
f0001106:       |  |  |     /-- 0107e563                bltu    a5,a6,f0001110 <dif_hmac_fifo_push+0x26>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:166
    bool word_aligned = (uintptr_t)data_sent % sizeof(uint32_t) == 0;
f000110a:       |  |  |     |   0035f713                andi    a4,a1,3
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:169
    if (bytes_remaining < sizeof(uint32_t) || !word_aligned) {
f000110e:       |  |  |  /--|-- cf01                    beqz    a4,f0001126 <dif_hmac_fifo_push+0x3c>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:172
      // Individual byte writes are needed if the buffer isn't aligned or there
      // are no more full words to write.
      mmio_region_write8(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, *data_sent);
f0001110:       |  |  |  |  \-> 00058283                lb      t0,0(a1)
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
f0001114:       |  |  |  |      40088713                addi    a4,a7,1024
f0001118:       |  |  |  |      40570023                sb      t0,1024(a4)
f000111c:       |  |  |  |      4705                    li      a4,1
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:181
      uint32_t word = read_32(data_sent);
      mmio_region_write32(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, word);
      bytes_written = sizeof(uint32_t);
    }

    bytes_remaining -= bytes_written;
f000111e:       |  |  |  |  /-> 8f99                    sub     a5,a5,a4
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:182
    data_sent += bytes_written;
f0001120:       |  |  |  |  |   95ba                    add     a1,a1,a4
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:165
  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
f0001122:       |  |  \--|--|-- fff1                    bnez    a5,f00010fe <dif_hmac_fifo_push+0x14>
f0001124:       |  +-----|--|-- a809                    j       f0001136 <dif_hmac_fifo_push+0x4c>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
f0001126:       |  |     \--|-> 0005a283                lw      t0,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f000112a:       |  |        |   40088713                addi    a4,a7,1024
f000112e:       |  |        |   40572023                sw      t0,1024(a4)
f0001132:       |  |        |   4711                    li      a4,4
f0001134:       |  |        \-- b7ed                    j       f000111e <dif_hmac_fifo_push+0x34>
f0001136:       |  \----------> 4701                    li      a4,0
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:185
  }

  if (bytes_sent != NULL) {
f0001138:       +-------------- c291                    beqz    a3,f000113c <dif_hmac_fifo_push+0x52>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:186
    *bytes_sent = len - bytes_remaining;
f000113a:       |               c290                    sw      a2,0(a3)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:194
  if (bytes_remaining > 0) {
    return kDifIpFifoFull;
  }

  return kDifOk;
}
f000113c:       \-------------> 853a                    mv      a0,a4
f000113e:                       8082                    ret

f0001140 <dif_hmac_fifo_count_entries>:
dif_hmac_fifo_count_entries():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:198

dif_result_t dif_hmac_fifo_count_entries(const dif_hmac_t *hmac,
                                         uint32_t *num_entries) {
  if (hmac == NULL || num_entries == NULL) {
f0001140:           00153613            seqz    a2,a0
f0001144:           0015b693            seqz    a3,a1
f0001148:           8ed1                        or      a3,a3,a2
f000114a:           460d                        li      a2,3
f000114c:       /-- e699                        bnez    a3,f000115a <dif_hmac_fifo_count_entries+0x1a>
get_status():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
f000114e:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0001150:       |   4d08                        lw      a0,24(a0)
f0001152:       |   4601                        li      a2,0
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f0001154:       |   8111                        srli    a0,a0,0x4
f0001156:       |   897d                        andi    a0,a0,31
dif_hmac_fifo_count_entries():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:202
    return kDifBadArg;
  }

  *num_entries = get_fifo_entry_count(hmac);
f0001158:       |   c188                        sw      a0,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:205

  return kDifOk;
}
f000115a:       \-> 8532                        mv      a0,a2
f000115c:           8082                        ret

f000115e <dif_hmac_get_message_length>:
dif_hmac_get_message_length():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:209

dif_result_t dif_hmac_get_message_length(const dif_hmac_t *hmac,
                                         uint64_t *msg_len) {
  if (hmac == NULL || msg_len == NULL) {
f000115e:           00153613            seqz    a2,a0
f0001162:           0015b693            seqz    a3,a1
f0001166:           8ed1                        or      a3,a3,a2
f0001168:           460d                        li      a2,3
f000116a:       /-- e699                        bnez    a3,f0001178 <dif_hmac_get_message_length+0x1a>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:214
    return kDifBadArg;
  }

  uint64_t msg_lower =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_LOWER_REG_OFFSET);
f000116c:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f000116e:       |   5174                        lw      a3,100(a0)
dif_hmac_get_message_length():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:216
  uint64_t msg_upper =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_UPPER_REG_OFFSET);
f0001170:       |   5528                        lw      a0,104(a0)
f0001172:       |   4601                        li      a2,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:218

  *msg_len = (msg_upper << 32) | msg_lower;
f0001174:       |   c1c8                        sw      a0,4(a1)
f0001176:       |   c194                        sw      a3,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:221

  return kDifOk;
}
f0001178:       \-> 8532                        mv      a0,a2
f000117a:           8082                        ret

f000117c <dif_hmac_process>:
dif_hmac_process():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:224

dif_result_t dif_hmac_process(const dif_hmac_t *hmac) {
  if (hmac == NULL) {
f000117c:       /-- c901                        beqz    a0,f000118c <dif_hmac_process+0x10>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:228
    return kDifBadArg;
  }

  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
f000117e:       |   410c                        lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001180:       |   49d0                        lw      a2,20(a1)
f0001182:       |   4501                        li      a0,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0001184:       |   00266613            ori     a2,a2,2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0001188:       |   c9d0                        sw      a2,20(a1)
dif_hmac_process():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:231
                                  HMAC_CMD_HASH_PROCESS_BIT);
  return kDifOk;
}
f000118a:       |   8082                        ret
f000118c:       \-> 450d                        li      a0,3
f000118e:           8082                        ret

f0001190 <dif_hmac_finish>:
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:235

dif_result_t dif_hmac_finish(const dif_hmac_t *hmac,
                             dif_hmac_digest_t *digest) {
  if (hmac == NULL || digest == NULL) {
f0001190:                 00153613              seqz    a2,a0
f0001194:                 0015b693              seqz    a3,a1
f0001198:                 8ed1                  or      a3,a3,a2
f000119a:                 460d                  li      a2,3
f000119c:       /-------- ee9d                  bnez    a3,f00011da <dif_hmac_finish+0x4a>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:240
    return kDifBadArg;
  }

  // Check if hmac_done is asserted.
  bool done = mmio_region_get_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
f000119e:       |         4110                  lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00011a0:       |         4218                  lw      a4,0(a2)
f00011a2:       |         4e14                  lw      a3,24(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f00011a4:       |         8b05                  andi    a4,a4,1
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:247

  // Check if fifo_empty is asserted.
  bool fifo_empty = mmio_region_get_bit32(
      hmac->base_addr, HMAC_STATUS_REG_OFFSET, HMAC_STATUS_FIFO_EMPTY_BIT);

  if (done) {
f00011a6:       |     /-- e709                  bnez    a4,f00011b0 <dif_hmac_finish+0x20>
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f00011a8:       |     |   8a85                  andi    a3,a3,1
f00011aa:       |     |   4639                  li      a2,14
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:251
    // Clear hmac_done.
    mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
                                    HMAC_INTR_STATE_HMAC_DONE_BIT);
  } else if (!fifo_empty) {
f00011ac:       |  /--|-- e691                  bnez    a3,f00011b8 <dif_hmac_finish+0x28>
f00011ae:       +--|--|-- a035                  j       f00011da <dif_hmac_finish+0x4a>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f00011b0:       |  |  \-> 4214                  lw      a3,0(a2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f00011b2:       |  |      0016e693              ori     a3,a3,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00011b6:       |  |      c214                  sw      a3,0(a2)
f00011b8:       |  \----> 06000613              li      a2,96
f00011bc:       |         04000693              li      a3,64
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:260
  // Read the digest in reverse to preserve the numerical value.
  // The least significant word is at HMAC_DIGEST_7_REG_OFFSET.
  // From the HWIP spec: "Order of the digest is: digest[255:0] = {DIGEST0,
  // DIGEST1, DIGEST2, ... , DIGEST7};"
  for (size_t i = 0; i < ARRAYSIZE(digest->digest); ++i) {
    digest->digest[i] = mmio_region_read32(
f00011c0:       |     /-> 4118                  lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00011c2:       |     |   9732                  add     a4,a4,a2
f00011c4:       |     |   4318                  lw      a4,0(a4)
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:260
f00011c6:       |     |   c198                  sw      a4,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:259
  for (size_t i = 0; i < ARRAYSIZE(digest->digest); ++i) {
f00011c8:       |     |   1671                  addi    a2,a2,-4
f00011ca:       |     |   0591                  addi    a1,a1,4
f00011cc:       |     \-- fed61ae3              bne     a2,a3,f00011c0 <dif_hmac_finish+0x30>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:267
  }

  // Disable HMAC and SHA256 until the next transaction, clearing the current
  // digest.
  uint32_t device_config =
      mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
f00011d0:       |         4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f00011d2:       |         490c                  lw      a1,16(a0)
f00011d4:       |         4601                  li      a2,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f00011d6:       |         99f1                  andi    a1,a1,-4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00011d8:       |         c90c                  sw      a1,16(a0)
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:275
  device_config =
      bitfield_bit32_write(device_config, HMAC_CFG_HMAC_EN_BIT, false);
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, device_config);

  return kDifOk;
}
f00011da:       \-------> 8532                  mv      a0,a2
f00011dc:                 8082                  ret

f00011de <ottf_machine_ecall_handler>:
ottf_machine_ecall_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:49
// A global random number generator testutil handle.
rand_testutils_rng_t rand_testutils_rng_ctx;

// The OTTF overrides the default machine ecall exception handler to implement
// FreeRTOS context switching, required for supporting cooperative scheduling.
void ottf_machine_ecall_handler(void) {
f00011de:           1101                        addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:50
  if (pxCurrentTCB != NULL) {
f00011e0:           ce06                        sw      ra,28(sp)
f00011e2:           f0001517            auipc   a0,0xf0001
f00011e6:           e9e50513            addi    a0,a0,-354 # e0002080 <pxCurrentTCB>
f00011ea:           4108                        lw      a0,0(a0)
f00011ec:       /-- c509                        beqz    a0,f00011f6 <ottf_machine_ecall_handler+0x18>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:54
    // If the pointer to the current TCB is not NULL, we are operating in
    // concurrency mode. In this case, our default behavior is to assume a
    // context switch has been requested.
    vTaskSwitchContext();
f00011ee:       |   40f2                        lw      ra,28(sp)
f00011f0:       |   6105                        addi    sp,sp,32
f00011f2:       |   5760106f            j       f0002768 <vTaskSwitchContext>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:57
    return;
  }
  LOG_ERROR(
f00011f6:       \-> 00003517            auipc   a0,0x3
f00011fa:           e7e50513            addi    a0,a0,-386 # f0004074 <kDeviceLogBypassUartAddress>
f00011fe:           4108                        lw      a0,0(a0)
f0001200:       /-- c911                        beqz    a0,f0001214 <ottf_machine_ecall_handler+0x36>
f0001202:       |   1000f517            auipc   a0,0x1000f
f0001206:       |   f6650513            addi    a0,a0,-154 # 10168 <_non_volatile_scratch_end+0xff90168>
f000120a:       |   4581                        li      a1,0
f000120c:       |   40f2                        lw      ra,28(sp)
f000120e:       |   6105                        addi    sp,sp,32
f0001210:       |   7ea0006f            j       f00019fa <base_log_internal_dv>
f0001214:       \-> 00002597            auipc   a1,0x2
f0001218:           30858593            addi    a1,a1,776 # f000351c <kExpectedHmacDigest+0x5dc>
f000121c:           0028                        addi    a0,sp,8
f000121e:           4651                        li      a2,20
f0001220:           0b0010ef            jal     ra,f00022d0 <memcpy>
f0001224:           0028                        addi    a0,sp,8
f0001226:           732000ef            jal     ra,f0001958 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:60
      "OTTF currently only supports use of machine-mode ecall for FreeRTOS "
      "context switching.");
}
f000122a:           40f2                        lw      ra,28(sp)
f000122c:           6105                        addi    sp,sp,32
f000122e:           8082                        ret

f0001230 <_ottf_main>:
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:120
  report_test_status(result);
}

dif_uart_t *ottf_console(void) { return &uart0; }

void _ottf_main(void) {
f0001230:                 7179                  addi    sp,sp,-48
f0001232:                 d606                  sw      ra,44(sp)
f0001234:                 d422                  sw      s0,40(sp)
f0001236:                 d226                  sw      s1,36(sp)
f0001238:                 d04a                  sw      s2,32(sp)
f000123a:                 6511                  lui     a0,0x4
f000123c:                 35450513              addi    a0,a0,852 # 4354 <_stack_size+0x354>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:121
  test_status_set(kTestStatusInTest);
f0001240:                 652000ef              jal     ra,f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:124

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
f0001244:                 00003517              auipc   a0,0x3
f0001248:                 e1050513              addi    a0,a0,-496 # f0004054 <kDeviceType>
f000124c:                 4108                  lw      a0,0(a0)
f000124e:                 00003917              auipc   s2,0x3
f0001252:                 e2690913              addi    s2,s2,-474 # f0004074 <kDeviceLogBypassUartAddress>
f0001256:                 00002497              auipc   s1,0x2
f000125a:                 be248493              addi    s1,s1,-1054 # f0002e38 <kOttfTestConfig>
f000125e:          /----- c91d                  beqz    a0,f0001294 <_ottf_main+0x64>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:125
    init_uart();
f0001260:          |      28fd                  jal     f000135e <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:126
    LOG_INFO("Running %s", kOttfTestConfig.file);
f0001262:          |      00092503              lw      a0,0(s2)
f0001266:          |      40c0                  lw      s0,4(s1)
f0001268:          |  /-- c911                  beqz    a0,f000127c <_ottf_main+0x4c>
f000126a:          |  |   1000f517              auipc   a0,0x1000f
f000126e:          |  |   f1250513              addi    a0,a0,-238 # 1017c <_non_volatile_scratch_end+0xff9017c>
f0001272:          |  |   4585                  li      a1,1
f0001274:          |  |   8622                  mv      a2,s0
f0001276:          |  |   784000ef              jal     ra,f00019fa <base_log_internal_dv>
f000127a:          +--|-- a829                  j       f0001294 <_ottf_main+0x64>
f000127c:          |  \-> 00002597              auipc   a1,0x2
f0001280:          |      2b458593              addi    a1,a1,692 # f0003530 <kExpectedHmacDigest+0x5f0>
f0001284:          |      850a                  mv      a0,sp
f0001286:          |      4651                  li      a2,20
f0001288:          |      048010ef              jal     ra,f00022d0 <memcpy>
f000128c:          |      850a                  mv      a0,sp
f000128e:          |      85a2                  mv      a1,s0
f0001290:          |      6c8000ef              jal     ra,f0001958 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:132
  }

  // Initialize a global random number generator testutil context to provide
  // tests with a source of entropy for randomizing test behaviors.
  dif_rv_core_ibex_t rv_core_ibex;
  CHECK_DIF_OK(dif_rv_core_ibex_init(
f0001294:          \----> c11f0537              lui     a0,0xc11f0
f0001298:                 082c                  addi    a1,sp,24
f000129a:                 5ea000ef              jal     ra,f0001884 <dif_rv_core_ibex_init>
f000129e:       /-------- cd15                  beqz    a0,f00012da <_ottf_main+0xaa>
f00012a0:       |         842a                  mv      s0,a0
f00012a2:       |         00092503              lw      a0,0(s2)
f00012a6:       |     /-- c911                  beqz    a0,f00012ba <_ottf_main+0x8a>
f00012a8:       |     |   1000f517              auipc   a0,0x1000f
f00012ac:       |     |   ee850513              addi    a0,a0,-280 # 10190 <_non_volatile_scratch_end+0xff90190>
f00012b0:       |     |   4585                  li      a1,1
f00012b2:       |     |   8622                  mv      a2,s0
f00012b4:       |     |   746000ef              jal     ra,f00019fa <base_log_internal_dv>
f00012b8:       |  /--|-- a829                  j       f00012d2 <_ottf_main+0xa2>
f00012ba:       |  |  \-> 00002597              auipc   a1,0x2
f00012be:       |  |      28a58593              addi    a1,a1,650 # f0003544 <kExpectedHmacDigest+0x604>
f00012c2:       |  |      850a                  mv      a0,sp
f00012c4:       |  |      4651                  li      a2,20
f00012c6:       |  |      00a010ef              jal     ra,f00022d0 <memcpy>
f00012ca:       |  |      850a                  mv      a0,sp
f00012cc:       |  |      85a2                  mv      a1,s0
f00012ce:       |  |      68a000ef              jal     ra,f0001958 <base_log_internal_core>
f00012d2:       |  \----> 6531                  lui     a0,0xc
f00012d4:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00012d8:       |         2b6d                  jal     f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:135
      mmio_region_from_addr(TOP_EARLGREY_RV_CORE_IBEX_CFG_BASE_ADDR),
      &rv_core_ibex));
  rand_testutils_rng_ctx = rand_testutils_init(&rv_core_ibex);
f00012da:       \-------> 850a                  mv      a0,sp
f00012dc:                 082c                  addi    a1,sp,24
f00012de:                 2b31                  jal     f00017fa <rand_testutils_init>
f00012e0:                 f0001517              auipc   a0,0xf0001
f00012e4:                 de450513              addi    a0,a0,-540 # e00020c4 <rand_testutils_rng_ctx>
f00012e8:                 858a                  mv      a1,sp
f00012ea:                 4661                  li      a2,24
f00012ec:                 7e5000ef              jal     ra,f00022d0 <memcpy>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:138

  // Run the test.
  if (kOttfTestConfig.enable_concurrency) {
f00012f0:                 0004c503              lbu     a0,0(s1)
f00012f4:          /----- c11d                  beqz    a0,f000131a <_ottf_main+0xea>
ottf_task_create():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:65
  return xTaskCreate(/*pvTaskCode=*/task_function, /*pcName=*/task_name,
f00012f6:          |      00000517              auipc   a0,0x0
f00012fa:          |      13a50513              addi    a0,a0,314 # f0001430 <test_wrapper>
f00012fe:          |      00002597              auipc   a1,0x2
f0001302:          |      0c858593              addi    a1,a1,200 # f00033c6 <kExpectedHmacDigest+0x486>
f0001306:          |      10000613              li      a2,256
f000130a:          |      4705                  li      a4,1
f000130c:          |      4681                  li      a3,0
f000130e:          |      4781                  li      a5,0
f0001310:          |      218010ef              jal     ra,f0002528 <xTaskCreate>
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:143
    // Run `test_main()` in a FreeRTOS task, allowing other FreeRTOS tasks to
    // be spawned, if requested in the main test task. Note, we spawn the main
    // test task at a priority level of 0.
    ottf_task_create(test_wrapper, "test_main", kOttfFreeRtosMinStackSize, 0);
    vTaskStartScheduler();
f0001314:          |      540010ef              jal     ra,f0002854 <vTaskStartScheduler>
f0001318:          |  /-- a019                  j       f000131e <_ottf_main+0xee>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:146
  } else {
    // Otherwise, launch `test_main()` on bare-metal.
    test_wrapper(NULL);
f000131a:          \--|-> 4501                  li      a0,0
f000131c:             |   2a11                  jal     f0001430 <test_wrapper>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:150
  }

  // Unreachable.
  CHECK(false);
f000131e:             \-> 00092503              lw      a0,0(s2)
f0001322:             /-- c909                  beqz    a0,f0001334 <_ottf_main+0x104>
f0001324:             |   1000f517              auipc   a0,0x1000f
f0001328:             |   e8050513              addi    a0,a0,-384 # 101a4 <_non_volatile_scratch_end+0xff901a4>
f000132c:             |   4581                  li      a1,0
f000132e:             |   6cc000ef              jal     ra,f00019fa <base_log_internal_dv>
f0001332:          /--|-- a821                  j       f000134a <_ottf_main+0x11a>
f0001334:          |  \-> 00002597              auipc   a1,0x2
f0001338:          |      22458593              addi    a1,a1,548 # f0003558 <kExpectedHmacDigest+0x618>
f000133c:          |      850a                  mv      a0,sp
f000133e:          |      4651                  li      a2,20
f0001340:          |      791000ef              jal     ra,f00022d0 <memcpy>
f0001344:          |      850a                  mv      a0,sp
f0001346:          |      612000ef              jal     ra,f0001958 <base_log_internal_core>
f000134a:          \----> 6531                  lui     a0,0xc
f000134c:                 aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001350:                 2389                  jal     f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:151
}
f0001352:                 5902                  lw      s2,32(sp)
f0001354:                 5492                  lw      s1,36(sp)
f0001356:                 5422                  lw      s0,40(sp)
f0001358:                 50b2                  lw      ra,44(sp)
f000135a:                 6145                  addi    sp,sp,48
f000135c:                 8082                  ret

f000135e <init_uart>:
init_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:81
static void init_uart(void) {
f000135e:                 1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:82
  CHECK_DIF_OK(dif_uart_init(
f0001360:                 ce06                  sw      ra,28(sp)
f0001362:                 cc22                  sw      s0,24(sp)
f0001364:                 ca26                  sw      s1,20(sp)
f0001366:                 f0001597              auipc   a1,0xf0001
f000136a:                 d0258593              addi    a1,a1,-766 # e0002068 <uart0>
f000136e:                 c0000537              lui     a0,0xc0000
f0001372:                 5c5000ef              jal     ra,f0002136 <dif_uart_init>
f0001376:                 00003497              auipc   s1,0x3
f000137a:                 cfe48493              addi    s1,s1,-770 # f0004074 <kDeviceLogBypassUartAddress>
f000137e:       /-------- cd05                  beqz    a0,f00013b6 <init_uart+0x58>
f0001380:       |         842a                  mv      s0,a0
f0001382:       |         4088                  lw      a0,0(s1)
f0001384:       |     /-- c911                  beqz    a0,f0001398 <init_uart+0x3a>
f0001386:       |     |   1000f517              auipc   a0,0x1000f
f000138a:       |     |   e3250513              addi    a0,a0,-462 # 101b8 <_non_volatile_scratch_end+0xff901b8>
f000138e:       |     |   4585                  li      a1,1
f0001390:       |     |   8622                  mv      a2,s0
f0001392:       |     |   668000ef              jal     ra,f00019fa <base_log_internal_dv>
f0001396:       |  /--|-- a821                  j       f00013ae <init_uart+0x50>
f0001398:       |  |  \-> 00002597              auipc   a1,0x2
f000139c:       |  |      1d458593              addi    a1,a1,468 # f000356c <kExpectedHmacDigest+0x62c>
f00013a0:       |  |      850a                  mv      a0,sp
f00013a2:       |  |      4651                  li      a2,20
f00013a4:       |  |      72d000ef              jal     ra,f00022d0 <memcpy>
f00013a8:       |  |      850a                  mv      a0,sp
f00013aa:       |  |      85a2                  mv      a1,s0
f00013ac:       |  |      2375                  jal     f0001958 <base_log_internal_core>
f00013ae:       |  \----> 6531                  lui     a0,0xc
f00013b0:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00013b4:       |         29f9                  jal     f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:84
  CHECK_DIF_OK(
f00013b6:       \-------> 00003517              auipc   a0,0x3
f00013ba:                 cb250513              addi    a0,a0,-846 # f0004068 <kUartBaudrate>
f00013be:                 4108                  lw      a0,0(a0)
f00013c0:                 00003597              auipc   a1,0x3
f00013c4:                 ca058593              addi    a1,a1,-864 # f0004060 <kClockFreqPeripheralHz>
f00013c8:                 418c                  lw      a1,0(a1)
f00013ca:                 c02a                  sw      a0,0(sp)
f00013cc:                 c22e                  sw      a1,4(sp)
f00013ce:                 c402                  sw      zero,8(sp)
f00013d0:                 4505                  li      a0,1
f00013d2:                 c62a                  sw      a0,12(sp)
f00013d4:                 f0001517              auipc   a0,0xf0001
f00013d8:                 c9450513              addi    a0,a0,-876 # e0002068 <uart0>
f00013dc:                 858a                  mv      a1,sp
f00013de:                 567000ef              jal     ra,f0002144 <dif_uart_configure>
f00013e2:       /-------- cd05                  beqz    a0,f000141a <init_uart+0xbc>
f00013e4:       |         842a                  mv      s0,a0
f00013e6:       |         4088                  lw      a0,0(s1)
f00013e8:       |     /-- c911                  beqz    a0,f00013fc <init_uart+0x9e>
f00013ea:       |     |   1000f517              auipc   a0,0x1000f
f00013ee:       |     |   de250513              addi    a0,a0,-542 # 101cc <_non_volatile_scratch_end+0xff901cc>
f00013f2:       |     |   4585                  li      a1,1
f00013f4:       |     |   8622                  mv      a2,s0
f00013f6:       |     |   604000ef              jal     ra,f00019fa <base_log_internal_dv>
f00013fa:       |  /--|-- a821                  j       f0001412 <init_uart+0xb4>
f00013fc:       |  |  \-> 00002597              auipc   a1,0x2
f0001400:       |  |      18458593              addi    a1,a1,388 # f0003580 <kExpectedHmacDigest+0x640>
f0001404:       |  |      850a                  mv      a0,sp
f0001406:       |  |      4651                  li      a2,20
f0001408:       |  |      6c9000ef              jal     ra,f00022d0 <memcpy>
f000140c:       |  |      850a                  mv      a0,sp
f000140e:       |  |      85a2                  mv      a1,s0
f0001410:       |  |      23a1                  jal     f0001958 <base_log_internal_core>
f0001412:       |  \----> 6531                  lui     a0,0xc
f0001414:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001418:       |         29ad                  jal     f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:91
  base_uart_stdout(&uart0);
f000141a:       \-------> f0001517              auipc   a0,0xf0001
f000141e:                 c4e50513              addi    a0,a0,-946 # e0002068 <uart0>
f0001422:                 610000ef              jal     ra,f0001a32 <base_uart_stdout>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:92
}
f0001426:                 44d2                  lw      s1,20(sp)
f0001428:                 4462                  lw      s0,24(sp)
f000142a:                 40f2                  lw      ra,28(sp)
f000142c:                 6105                  addi    sp,sp,32
f000142e:                 8082                  ret

f0001430 <test_wrapper>:
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:110
static void test_wrapper(void *task_parameters) {
f0001430:                 1101                  addi    sp,sp,-32
f0001432:                 ce06                  sw      ra,28(sp)
f0001434:                 cc22                  sw      s0,24(sp)
f0001436:                 ca26                  sw      s1,20(sp)
f0001438:                 6531                  lui     a0,0xc
f000143a:                 aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:112
  bool result = manufacturer_pre_test_hook();
f000143e:                 043010ef              jal     ra,f0002c80 <manufacturer_pre_test_hook>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:113
  result = result && test_main();
f0001442:          /----- cd11                  beqz    a0,f000145e <test_wrapper+0x2e>
f0001444:          |      bccff0ef              jal     ra,f0000810 <test_main>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:114
  result = result && manufacturer_post_test_hook();
f0001448:          +----- c919                  beqz    a0,f000145e <test_wrapper+0x2e>
f000144a:          |      03b010ef              jal     ra,f0002c84 <manufacturer_post_test_hook>
f000144e:          |  /-- e509                  bnez    a0,f0001458 <test_wrapper+0x28>
f0001450:          |  |   6531                  lui     a0,0xc
f0001452:          |  |   aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001456:          +--|-- a021                  j       f000145e <test_wrapper+0x2e>
f0001458:          |  \-> 6525                  lui     a0,0x9
f000145a:          |      00d50413              addi    s0,a0,13 # 900d <_non_volatile_scratch_size+0x400d>
report_test_status():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:96
  if (kDeviceType != kDeviceSimDV) {
f000145e:          \----> 00003517              auipc   a0,0x3
f0001462:                 bf650513              addi    a0,a0,-1034 # f0004054 <kDeviceType>
f0001466:                 4108                  lw      a0,0(a0)
f0001468:       /-------- c521                  beqz    a0,f00014b0 <test_wrapper+0x80>
f000146a:       |         00002497              auipc   s1,0x2
f000146e:       |         9ce48493              addi    s1,s1,-1586 # f0002e38 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:97
    if (kOttfTestConfig.can_clobber_uart) {
f0001472:       |         0014c503              lbu     a0,1(s1)
f0001476:       |     /-- c111                  beqz    a0,f000147a <test_wrapper+0x4a>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:98
      init_uart();
f0001478:       |     |   35dd                  jal     f000135e <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:100
    LOG_INFO("Finished %s", kOttfTestConfig.file);
f000147a:       |     \-> 00003517              auipc   a0,0x3
f000147e:       |         bfa50513              addi    a0,a0,-1030 # f0004074 <kDeviceLogBypassUartAddress>
f0001482:       |         4108                  lw      a0,0(a0)
f0001484:       |         40c4                  lw      s1,4(s1)
f0001486:       |     /-- c909                  beqz    a0,f0001498 <test_wrapper+0x68>
f0001488:       |     |   1000f517              auipc   a0,0x1000f
f000148c:       |     |   d5850513              addi    a0,a0,-680 # 101e0 <_non_volatile_scratch_end+0xff901e0>
f0001490:       |     |   4585                  li      a1,1
f0001492:       |     |   8626                  mv      a2,s1
f0001494:       |     |   239d                  jal     f00019fa <base_log_internal_dv>
f0001496:       |  /--|-- a821                  j       f00014ae <test_wrapper+0x7e>
f0001498:       |  |  \-> 00002597              auipc   a1,0x2
f000149c:       |  |      0fc58593              addi    a1,a1,252 # f0003594 <kExpectedHmacDigest+0x654>
f00014a0:       |  |      850a                  mv      a0,sp
f00014a2:       |  |      4651                  li      a2,20
f00014a4:       |  |      62d000ef              jal     ra,f00022d0 <memcpy>
f00014a8:       |  |      850a                  mv      a0,sp
f00014aa:       |  |      85a6                  mv      a1,s1
f00014ac:       |  |      2175                  jal     f0001958 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:101
    test_coverage_send_buffer();
f00014ae:       |  \----> 2801                  jal     f00014be <test_coverage_send_buffer>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:104
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
f00014b0:       \-------> 8522                  mv      a0,s0
f00014b2:                 26c5                  jal     f0001892 <test_status_set>
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:116
}
f00014b4:                 44d2                  lw      s1,20(sp)
f00014b6:                 4462                  lw      s0,24(sp)
f00014b8:                 40f2                  lw      ra,28(sp)
f00014ba:                 6105                  addi    sp,sp,32
f00014bc:                 8082                  ret

f00014be <test_coverage_send_buffer>:
test_coverage_send_buffer():
/proc/self/cwd/sw/device/lib/testing/test_framework/coverage_none.c:9

#include "sw/device/lib/testing/test_framework/coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
f00014be:       8082                    ret

f00014c0 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:18

/**
 * This is called if configUSE_MALLOC_FAILED_HOOK is set to 1 in
 * FreeRTOSConfig.h, and a call to pvPortMalloc() fails.
 */
void vApplicationMallocFailedHook(void) {
f00014c0:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:19
  LOG_INFO("FreeRTOS malloc failed. Increase heap size in FreeRTOSConfig.h");
f00014c2:              ce06                     sw      ra,28(sp)
f00014c4:              00003517                 auipc   a0,0x3
f00014c8:              bb050513                 addi    a0,a0,-1104 # f0004074 <kDeviceLogBypassUartAddress>
f00014cc:              4108                     lw      a0,0(a0)
f00014ce:       /----- ed01                     bnez    a0,f00014e6 <vApplicationMallocFailedHook+0x26>
f00014d0:       |      00002597                 auipc   a1,0x2
f00014d4:       |      18858593                 addi    a1,a1,392 # f0003658 <kExpectedHmacDigest+0x718>
f00014d8:       |      0028                     addi    a0,sp,8
f00014da:       |      4651                     li      a2,20
f00014dc:       |      5f5000ef                 jal     ra,f00022d0 <memcpy>
f00014e0:       |      0028                     addi    a0,sp,8
f00014e2:       |      299d                     jal     f0001958 <base_log_internal_core>
f00014e4:       |  /-- a039                     j       f00014f2 <vApplicationMallocFailedHook+0x32>
f00014e6:       \--|-> 1000f517                 auipc   a0,0x1000f
f00014ea:          |   d0e50513                 addi    a0,a0,-754 # 101f4 <_non_volatile_scratch_end+0xff901f4>
f00014ee:          |   4581                     li      a1,0
f00014f0:          |   2329                     jal     f00019fa <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:20
  irq_global_ctrl(false);
f00014f2:          \-> 4501                     li      a0,0
f00014f4:              28a1                     jal     f000154c <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:21
  abort();
f00014f6:              21a9                     jal     f0001940 <abort>

f00014f8 <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:28

/**
 * This is called if configCHECK_FOR_STACK_OVERFLOW is set to 1 or 2 in
 * FreeRTOSConfig.h, and a task detects a stack overflow.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
f00014f8:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:29
  LOG_INFO("FreeRTOS stack overflow. Increase stack size of task: %s");
f00014fa:              ce06                     sw      ra,28(sp)
f00014fc:              00003517                 auipc   a0,0x3
f0001500:              b7850513                 addi    a0,a0,-1160 # f0004074 <kDeviceLogBypassUartAddress>
f0001504:              4108                     lw      a0,0(a0)
f0001506:       /----- ed01                     bnez    a0,f000151e <vApplicationStackOverflowHook+0x26>
f0001508:       |      00002597                 auipc   a1,0x2
f000150c:       |      16458593                 addi    a1,a1,356 # f000366c <kExpectedHmacDigest+0x72c>
f0001510:       |      0028                     addi    a0,sp,8
f0001512:       |      4651                     li      a2,20
f0001514:       |      5bd000ef                 jal     ra,f00022d0 <memcpy>
f0001518:       |      0028                     addi    a0,sp,8
f000151a:       |      293d                     jal     f0001958 <base_log_internal_core>
f000151c:       |  /-- a039                     j       f000152a <vApplicationStackOverflowHook+0x32>
f000151e:       \--|-> 1000f517                 auipc   a0,0x1000f
f0001522:          |   cea50513                 addi    a0,a0,-790 # 10208 <_non_volatile_scratch_end+0xff90208>
f0001526:          |   4581                     li      a1,0
f0001528:          |   29c9                     jal     f00019fa <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:30
  irq_global_ctrl(false);
f000152a:          \-> 4501                     li      a0,0
f000152c:              2005                     jal     f000154c <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:31
  abort();
f000152e:              2909                     jal     f0001940 <abort>

f0001530 <xPortStartScheduler>:
xPortStartScheduler():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:93
// ----------------------------------------------------------------------------
// Scheduler Setup
// ----------------------------------------------------------------------------
extern void xPortStartFirstTask(void);

BaseType_t xPortStartScheduler(void) {
f0001530:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:97
#if configUSE_PREEMPTION
  vPortSetupTimerInterrupt();
#endif  // configUSE_PREEMPTION
  irq_timer_ctrl(true);
f0001532:       c606                    sw      ra,12(sp)
f0001534:       4505                    li      a0,1
f0001536:       2089                    jal     f0001578 <irq_timer_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:98
  irq_external_ctrl(true);
f0001538:       4505                    li      a0,1
f000153a:       2015                    jal     f000155e <irq_external_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:99
  irq_software_ctrl(true);
f000153c:       4505                    li      a0,1
f000153e:       2881                    jal     f000158e <irq_software_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:103
  // Note: no need to call 'irq_global_ctrl(true)' since the global interrupt
  // enable is set in the xPortStartFirstTask sub-routine in
  // sw/device/lib/testing/test_framework/freertos_port.S.
  xPortStartFirstTask();
f0001540:       808ff0ef                jal     ra,f0000548 <xPortStartFirstTask>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:106

  // Unreachable.
  return pdFAIL;
f0001544:       4501                    li      a0,0
f0001546:       40b2                    lw      ra,12(sp)
f0001548:       0141                    addi    sp,sp,16
f000154a:       8082                    ret

f000154c <irq_global_ctrl>:
irq_global_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:18
void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
}

void irq_global_ctrl(bool en) {
  if (en) {
f000154c:       /-- c509                        beqz    a0,f0001556 <irq_global_ctrl+0xa>
f000154e:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
f0001550:       |   30052073            csrs    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
f0001554:       |   8082                        ret
f0001556:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
f0001558:           30053073            csrc    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
}
f000155c:           8082                        ret

f000155e <irq_external_ctrl>:
irq_external_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
f000155e:       /-- c519                        beqz    a0,f000156c <irq_external_ctrl+0xe>
f0001560:       |   6505                        lui     a0,0x1
f0001562:       |   80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0001566:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f000156a:       |   8082                        ret
f000156c:       \-> 6505                        lui     a0,0x1
f000156e:           80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0001572:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
}
f0001576:           8082                        ret

f0001578 <irq_timer_ctrl>:
irq_timer_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
f0001578:       /-- c511                        beqz    a0,f0001584 <irq_timer_ctrl+0xc>
f000157a:       |   08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
f000157e:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0001582:       |   8082                        ret
f0001584:       \-> 08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0001588:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
}
f000158c:           8082                        ret

f000158e <irq_software_ctrl>:
irq_software_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
f000158e:       /-- c509                        beqz    a0,f0001598 <irq_software_ctrl+0xa>
f0001590:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0001592:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0001596:       |   8082                        ret
f0001598:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f000159a:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
}
f000159e:           8082                        ret

f00015a0 <ottf_generic_fault_print>:
ottf_generic_fault_print():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:56
    "Reserved",
    "Reserved",
    "Reserved",
};

void ottf_generic_fault_print(const char *reason, uint32_t mcause) {
f00015a0:           7179                        addi    sp,sp,-48
f00015a2:           d606                        sw      ra,44(sp)
f00015a4:           d422                        sw      s0,40(sp)
f00015a6:           d226                        sw      s1,36(sp)
f00015a8:           d04a                        sw      s2,32(sp)
f00015aa:           ce4e                        sw      s3,28(sp)
f00015ac:           892e                        mv      s2,a1
f00015ae:           89aa                        mv      s3,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:57
  uint32_t mepc = ibex_mepc_read();
f00015b0:           264d                        jal     f0001952 <ibex_mepc_read>
f00015b2:           84aa                        mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f00015b4:           2e61                        jal     f000194c <ibex_mtval_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f00015b6:           00003597            auipc   a1,0x3
f00015ba:           abe58593            addi    a1,a1,-1346 # f0004074 <kDeviceLogBypassUartAddress>
f00015be:           418c                        lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f00015c0:           842a                        mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f00015c2:       /-- c18d                        beqz    a1,f00015e4 <ottf_generic_fault_print+0x44>
f00015c4:       |   1000f517            auipc   a0,0x1000f
f00015c8:       |   c5850513            addi    a0,a0,-936 # 1021c <_non_volatile_scratch_end+0xff9021c>
f00015cc:       |   4591                        li      a1,4
f00015ce:       |   864e                        mv      a2,s3
f00015d0:       |   86ca                        mv      a3,s2
f00015d2:       |   8726                        mv      a4,s1
f00015d4:       |   87a2                        mv      a5,s0
f00015d6:       |   49f2                        lw      s3,28(sp)
f00015d8:       |   5902                        lw      s2,32(sp)
f00015da:       |   5492                        lw      s1,36(sp)
f00015dc:       |   5422                        lw      s0,40(sp)
f00015de:       |   50b2                        lw      ra,44(sp)
f00015e0:       |   6145                        addi    sp,sp,48
f00015e2:       |   a921                        j       f00019fa <base_log_internal_dv>
f00015e4:       \-> 00002597            auipc   a1,0x2
f00015e8:           30858593            addi    a1,a1,776 # f00038ec <kExpectedHmacDigest+0x9ac>
f00015ec:           0028                        addi    a0,sp,8
f00015ee:           4651                        li      a2,20
f00015f0:           4e1000ef            jal     ra,f00022d0 <memcpy>
f00015f4:           0028                        addi    a0,sp,8
f00015f6:           85ce                        mv      a1,s3
f00015f8:           864a                        mv      a2,s2
f00015fa:           86a6                        mv      a3,s1
f00015fc:           8722                        mv      a4,s0
f00015fe:           2ea9                        jal     f0001958 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:61
            mtval);
}
f0001600:           49f2                        lw      s3,28(sp)
f0001602:           5902                        lw      s2,32(sp)
f0001604:           5492                        lw      s1,36(sp)
f0001606:           5422                        lw      s0,40(sp)
f0001608:           50b2                        lw      ra,44(sp)
f000160a:           6145                        addi    sp,sp,48
f000160c:           8082                        ret

f000160e <ottf_exception_handler>:
ottf_exception_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:79
 */
OT_WEAK
void *pxCurrentTCB = NULL;

OT_WEAK
void ottf_exception_handler(void) {
f000160e:           1141                        addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:80
  uint32_t mcause = ibex_mcause_read();
f0001610:           c606                        sw      ra,12(sp)
f0001612:           2e15                        jal     f0001946 <ibex_mcause_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:82

  switch ((ibex_exc_t)(mcause & kIbexExcMax)) {
f0001614:           897d                        andi    a0,a0,31
f0001616:           45ad                        li      a1,11
f0001618:       /-- 02a5ef63            bltu    a1,a0,f0001656 <ottf_exception_handler+0x48>
f000161c:       |   050a                        slli    a0,a0,0x2
f000161e:       |   00002597            auipc   a1,0x2
f0001622:       |   06258593            addi    a1,a1,98 # f0003680 <kExpectedHmacDigest+0x740>
f0001626:       |   952e                        add     a0,a0,a1
f0001628:       |   4108                        lw      a0,0(a0)
f000162a:       |   8502                        jr      a0
f000162c:       |   40b2                        lw      ra,12(sp)
f000162e:       |   0141                        addi    sp,sp,16
f0001630:       |   a025                        j       f0001658 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:84
    case kIbexExcInstrMisaligned:
      ottf_instr_misaligned_fault_handler();
f0001632:       |   40b2                        lw      ra,12(sp)
f0001634:       |   0141                        addi    sp,sp,16
f0001636:       |   a00d                        j       f0001658 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:87
      break;
    case kIbexExcInstrAccessFault:
      ottf_instr_access_fault_handler();
f0001638:       |   40b2                        lw      ra,12(sp)
f000163a:       |   0141                        addi    sp,sp,16
f000163c:       |   a831                        j       f0001658 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:90
      break;
    case kIbexExcIllegalInstrFault:
      ottf_illegal_instr_fault_handler();
f000163e:       |   40b2                        lw      ra,12(sp)
f0001640:       |   0141                        addi    sp,sp,16
f0001642:       |   a819                        j       f0001658 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:93
      break;
    case kIbexExcBreakpoint:
      ottf_breakpoint_handler();
f0001644:       |   40b2                        lw      ra,12(sp)
f0001646:       |   0141                        addi    sp,sp,16
f0001648:       |   a801                        j       f0001658 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:105
      break;
    case kIbexExcMachineECall:
      ottf_machine_ecall_handler();
      break;
    case kIbexExcUserECall:
      ottf_user_ecall_handler();
f000164a:       |   40b2                        lw      ra,12(sp)
f000164c:       |   0141                        addi    sp,sp,16
f000164e:       |   a029                        j       f0001658 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:102
      ottf_machine_ecall_handler();
f0001650:       |   40b2                        lw      ra,12(sp)
f0001652:       |   0141                        addi    sp,sp,16
f0001654:       |   b669                        j       f00011de <ottf_machine_ecall_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:108
      break;
    default:
      generic_fault_handler();
f0001656:       \-> 2009                        jal     f0001658 <ottf_breakpoint_handler>

f0001658 <ottf_breakpoint_handler>:
generic_fault_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:63
static void generic_fault_handler(void) {
f0001658:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:64
  uint32_t mcause = ibex_mcause_read();
f000165a:       c606                    sw      ra,12(sp)
f000165c:       24ed                    jal     f0001946 <ibex_mcause_read>
f000165e:       85aa                    mv      a1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:65
  ottf_generic_fault_print(exception_reason[mcause & kIbexExcMax], mcause);
f0001660:       897d                    andi    a0,a0,31
f0001662:       050a                    slli    a0,a0,0x2
f0001664:       00002617                auipc   a2,0x2
f0001668:       2c460613                addi    a2,a2,708 # f0003928 <exception_reason>
f000166c:       9532                    add     a0,a0,a2
f000166e:       4108                    lw      a0,0(a0)
f0001670:       3f05                    jal     f00015a0 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:66
  abort();
f0001672:       24f9                    jal     f0001940 <abort>

f0001674 <ottf_software_isr>:
ottf_software_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:141
OT_WEAK
OT_ALIAS("generic_fault_handler")
void ottf_user_ecall_handler(void);

OT_WEAK
void ottf_software_isr(void) {
f0001674:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:142
  ottf_generic_fault_print("Software IRQ", ibex_mcause_read());
f0001676:       c606                    sw      ra,12(sp)
f0001678:       24f9                    jal     f0001946 <ibex_mcause_read>
f000167a:       85aa                    mv      a1,a0
f000167c:       00002517                auipc   a0,0x2
f0001680:       09150513                addi    a0,a0,145 # f000370d <kExpectedHmacDigest+0x7cd>
f0001684:       3f31                    jal     f00015a0 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:143
  abort();
f0001686:       2c6d                    jal     f0001940 <abort>

f0001688 <ottf_timer_isr>:
ottf_timer_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:147
}

OT_WEAK
void ottf_timer_isr(void) {
f0001688:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:148
  ottf_generic_fault_print("Timer IRQ", ibex_mcause_read());
f000168a:       c606                    sw      ra,12(sp)
f000168c:       2c6d                    jal     f0001946 <ibex_mcause_read>
f000168e:       85aa                    mv      a1,a0
f0001690:       00002517                auipc   a0,0x2
f0001694:       08a50513                addi    a0,a0,138 # f000371a <kExpectedHmacDigest+0x7da>
f0001698:       3721                    jal     f00015a0 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:149
  abort();
f000169a:       245d                    jal     f0001940 <abort>

f000169c <ottf_flow_control_isr>:
ottf_flow_control_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:153
}

OT_WEAK
bool ottf_flow_control_isr(void) { return false; }
f000169c:       4501                    li      a0,0
f000169e:       8082                    ret

f00016a0 <ottf_external_isr>:
ottf_external_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:156

OT_WEAK
void ottf_external_isr(void) {
f00016a0:                    7179                       addi    sp,sp,-48
f00016a2:                    d606                       sw      ra,44(sp)
f00016a4:                    d422                       sw      s0,40(sp)
f00016a6:                    d226                       sw      s1,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:159
  const uint32_t kPlicTarget = kTopEarlgreyPlicTargetIbex0;
  dif_rv_plic_irq_id_t plic_irq_id;
  CHECK_DIF_OK(dif_rv_plic_irq_claim(&ottf_plic, kPlicTarget, &plic_irq_id));
f00016a8:                    f0001517           auipc   a0,0xf0001
f00016ac:                    9c850513           addi    a0,a0,-1592 # e0002070 <ottf_plic>
f00016b0:                    1010                       addi    a2,sp,32
f00016b2:                    4581                       li      a1,0
f00016b4:                    28fd                       jal     f00017b2 <dif_rv_plic_irq_claim>
f00016b6:                    00003497           auipc   s1,0x3
f00016ba:                    9be48493           addi    s1,s1,-1602 # f0004074 <kDeviceLogBypassUartAddress>
f00016be:          /-------- c91d                       beqz    a0,f00016f4 <ottf_external_isr+0x54>
f00016c0:          |         842a                       mv      s0,a0
f00016c2:          |         4088                       lw      a0,0(s1)
f00016c4:          |     /-- c909                       beqz    a0,f00016d6 <ottf_external_isr+0x36>
f00016c6:          |     |   1000f517           auipc   a0,0x1000f
f00016ca:          |     |   b6a50513           addi    a0,a0,-1174 # 10230 <_non_volatile_scratch_end+0xff90230>
f00016ce:          |     |   4585                       li      a1,1
f00016d0:          |     |   8622                       mv      a2,s0
f00016d2:          |     |   2625                       jal     f00019fa <base_log_internal_dv>
f00016d4:          |  /--|-- a821                       j       f00016ec <ottf_external_isr+0x4c>
f00016d6:          |  |  \-> 00002597           auipc   a1,0x2
f00016da:          |  |      22a58593           addi    a1,a1,554 # f0003900 <kExpectedHmacDigest+0x9c0>
f00016de:          |  |      0028                       addi    a0,sp,8
f00016e0:          |  |      4651                       li      a2,20
f00016e2:          |  |      3ef000ef           jal     ra,f00022d0 <memcpy>
f00016e6:          |  |      0028                       addi    a0,sp,8
f00016e8:          |  |      85a2                       mv      a1,s0
f00016ea:          |  |      24bd                       jal     f0001958 <base_log_internal_core>
f00016ec:          |  \----> 6531                       lui     a0,0xc
f00016ee:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00016f2:          |         2245                       jal     f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:162

  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
f00016f4:          \-------> 5502                       lw      a0,32(sp)
f00016f6:                    050a                       slli    a0,a0,0x2
f00016f8:                    00002597           auipc   a1,0x2
f00016fc:                    35058593           addi    a1,a1,848 # f0003a48 <top_earlgrey_plic_interrupt_for_peripheral>
f0001700:                    952e                       add     a0,a0,a1
f0001702:                    4108                       lw      a0,0(a0)
f0001704:                    4585                       li      a1,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164

  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f0001706:       /----------- 04b51b63           bne     a0,a1,f000175c <ottf_external_isr+0xbc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:165
      ottf_flow_control_isr()) {
f000170a:       |            3f49                       jal     f000169c <ottf_flow_control_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164
  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f000170c:       +----------- c921                       beqz    a0,f000175c <ottf_external_isr+0xbc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:167
    // Complete the IRQ at PLIC.
    CHECK_DIF_OK(
f000170e:       |            5602                       lw      a2,32(sp)
f0001710:       |            f0001517           auipc   a0,0xf0001
f0001714:       |            96050513           addi    a0,a0,-1696 # e0002070 <ottf_plic>
f0001718:       |            4581                       li      a1,0
f000171a:       |            20c1                       jal     f00017da <dif_rv_plic_irq_complete>
f000171c:       |  /-------- c91d                       beqz    a0,f0001752 <ottf_external_isr+0xb2>
f000171e:       |  |         842a                       mv      s0,a0
f0001720:       |  |         4088                       lw      a0,0(s1)
f0001722:       |  |     /-- c909                       beqz    a0,f0001734 <ottf_external_isr+0x94>
f0001724:       |  |     |   1000f517           auipc   a0,0x1000f
f0001728:       |  |     |   b2050513           addi    a0,a0,-1248 # 10244 <_non_volatile_scratch_end+0xff90244>
f000172c:       |  |     |   4585                       li      a1,1
f000172e:       |  |     |   8622                       mv      a2,s0
f0001730:       |  |     |   24e9                       jal     f00019fa <base_log_internal_dv>
f0001732:       |  |  /--|-- a821                       j       f000174a <ottf_external_isr+0xaa>
f0001734:       |  |  |  \-> 00002597           auipc   a1,0x2
f0001738:       |  |  |      1e058593           addi    a1,a1,480 # f0003914 <kExpectedHmacDigest+0x9d4>
f000173c:       |  |  |      0028                       addi    a0,sp,8
f000173e:       |  |  |      4651                       li      a2,20
f0001740:       |  |  |      391000ef           jal     ra,f00022d0 <memcpy>
f0001744:       |  |  |      0028                       addi    a0,sp,8
f0001746:       |  |  |      85a2                       mv      a1,s0
f0001748:       |  |  |      2c01                       jal     f0001958 <base_log_internal_core>
f000174a:       |  |  \----> 6531                       lui     a0,0xc
f000174c:       |  |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001750:       |  |         2289                       jal     f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:174
    return;
  }

  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
  abort();
}
f0001752:       |  \-------> 5492                       lw      s1,36(sp)
f0001754:       |            5422                       lw      s0,40(sp)
f0001756:       |            50b2                       lw      ra,44(sp)
f0001758:       |            6145                       addi    sp,sp,48
f000175a:       |            8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:172
  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
f000175c:       \----------> 22ed                       jal     f0001946 <ibex_mcause_read>
f000175e:                    85aa                       mv      a1,a0
f0001760:                    00002517           auipc   a0,0x2
f0001764:                    06a50513           addi    a0,a0,106 # f00037ca <kExpectedHmacDigest+0x88a>
f0001768:                    3d25                       jal     f00015a0 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:173
  abort();
f000176a:                    2ad9                       jal     f0001940 <abort>

f000176c <ottf_external_nmi_handler>:
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:176

static void generic_internal_irq_handler(void) {
f000176c:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f000176e:       c606                    sw      ra,12(sp)
f0001770:       2ad9                    jal     f0001946 <ibex_mcause_read>
f0001772:       85aa                    mv      a1,a0
f0001774:       00002517                auipc   a0,0x2
f0001778:       16a50513                addi    a0,a0,362 # f00038de <kExpectedHmacDigest+0x99e>
f000177c:       3515                    jal     f00015a0 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f000177e:       22c9                    jal     f0001940 <abort>

f0001780 <ottf_internal_isr>:
ottf_internal_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:190
OT_WEAK
OT_ALIAS("generic_internal_irq_handler")
void ottf_load_integrity_error_handler(void);

OT_WEAK
void ottf_internal_isr(void) {
f0001780:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:191
  uint32_t mcause = ibex_mcause_read();
f0001782:              c606                     sw      ra,12(sp)
f0001784:              22c9                     jal     f0001946 <ibex_mcause_read>
f0001786:              800005b7                 lui     a1,0x80000
f000178a:              05fd                     addi    a1,a1,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:192
  switch ((ibex_internal_irq_t)(mcause)) {
f000178c:          /-- 00b50863                 beq     a0,a1,f000179c <ottf_internal_isr+0x1c>
f0001790:          |   5581                     li      a1,-32
f0001792:       /--|-- 00b51863                 bne     a0,a1,f00017a2 <ottf_internal_isr+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:194
    case kIbexInternalIrqLoadInteg:
      ottf_load_integrity_error_handler();
f0001796:       |  |   40b2                     lw      ra,12(sp)
f0001798:       |  |   0141                     addi    sp,sp,16
f000179a:       |  |   bfc9                     j       f000176c <ottf_external_nmi_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:197
      break;
    case kIbexInternalIrqNmi:
      ottf_external_nmi_handler();
f000179c:       |  \-> 40b2                     lw      ra,12(sp)
f000179e:       |      0141                     addi    sp,sp,16
f00017a0:       |      b7f1                     j       f000176c <ottf_external_nmi_handler>
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f00017a2:       \----> 2255                     jal     f0001946 <ibex_mcause_read>
f00017a4:              85aa                     mv      a1,a0
f00017a6:              00002517                 auipc   a0,0x2
f00017aa:              13850513                 addi    a0,a0,312 # f00038de <kExpectedHmacDigest+0x99e>
f00017ae:              3bcd                     jal     f00015a0 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f00017b0:              2a41                     jal     f0001940 <abort>

f00017b2 <dif_rv_plic_irq_claim>:
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:245
}

dif_result_t dif_rv_plic_irq_claim(const dif_rv_plic_t *plic,
                                   dif_rv_plic_target_t target,
                                   dif_rv_plic_irq_id_t *claim_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
f00017b2:           00153693            seqz    a3,a0
f00017b6:           00b035b3            snez    a1,a1
f00017ba:           8dd5                        or      a1,a1,a3
f00017bc:           00163693            seqz    a3,a2
f00017c0:           8ecd                        or      a3,a3,a1
f00017c2:           458d                        li      a1,3
f00017c4:       /-- ea89                        bnez    a3,f00017d6 <dif_rv_plic_irq_claim+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
      claim_data == NULL) {
    return kDifBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->base_addr, claim_complete_reg);
f00017c6:       |   4108                        lw      a0,0(a0)
f00017c8:       |   002005b7            lui     a1,0x200
f00017cc:       |   0591                        addi    a1,a1,4
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00017ce:       |   952e                        add     a0,a0,a1
f00017d0:       |   4108                        lw      a0,0(a0)
f00017d2:       |   4581                        li      a1,0
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
f00017d4:       |   c208                        sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:254

  return kDifOk;
}
f00017d6:       \-> 852e                        mv      a0,a1
f00017d8:           8082                        ret

f00017da <dif_rv_plic_irq_complete>:
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:259

dif_result_t dif_rv_plic_irq_complete(const dif_rv_plic_t *plic,
                                      dif_rv_plic_target_t target,
                                      dif_rv_plic_irq_id_t complete_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
f00017da:           00153693            seqz    a3,a0
f00017de:           00b035b3            snez    a1,a1
f00017e2:           8ecd                        or      a3,a3,a1
f00017e4:           458d                        li      a1,3
f00017e6:       /-- ea81                        bnez    a3,f00017f6 <dif_rv_plic_irq_complete+0x1c>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:266
  }

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->base_addr, claim_complete_reg, complete_data);
f00017e8:       |   4108                        lw      a0,0(a0)
f00017ea:       |   4581                        li      a1,0
f00017ec:       |   002006b7            lui     a3,0x200
f00017f0:       |   0691                        addi    a3,a3,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00017f2:       |   9536                        add     a0,a0,a3
f00017f4:       |   c110                        sw      a2,0(a0)
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:269

  return kDifOk;
}
f00017f6:       \-> 852e                        mv      a0,a1
f00017f8:           8082                        ret

f00017fa <rand_testutils_init>:
rand_testutils_init():
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:31
/**
 * The default timeout in usecs for fetching data from the entropy source.
 */
static const uint32_t kEntropyFetchTimeoutMicros = 100000;

rand_testutils_rng_t rand_testutils_init(dif_rv_core_ibex_t *rv_core_ibex) {
f00017fa:                 1101                  addi    sp,sp,-32
f00017fc:                 ce06                  sw      ra,28(sp)
f00017fe:                 cc22                  sw      s0,24(sp)
f0001800:                 ca26                  sw      s1,20(sp)
f0001802:                 84ae                  mv      s1,a1
f0001804:                 842a                  mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:32
  CHECK(rv_core_ibex != NULL);
f0001806:       /-------- ed85                  bnez    a1,f000183e <rand_testutils_init+0x44>
f0001808:       |         00003517              auipc   a0,0x3
f000180c:       |         86c50513              addi    a0,a0,-1940 # f0004074 <kDeviceLogBypassUartAddress>
f0001810:       |         4108                  lw      a0,0(a0)
f0001812:       |     /-- c901                  beqz    a0,f0001822 <rand_testutils_init+0x28>
f0001814:       |     |   1000f517              auipc   a0,0x1000f
f0001818:       |     |   a4450513              addi    a0,a0,-1468 # 10258 <_non_volatile_scratch_end+0xff90258>
f000181c:       |     |   4581                  li      a1,0
f000181e:       |     |   2af1                  jal     f00019fa <base_log_internal_dv>
f0001820:       |  /--|-- a819                  j       f0001836 <rand_testutils_init+0x3c>
f0001822:       |  |  \-> 00002597              auipc   a1,0x2
f0001826:       |  |      21258593              addi    a1,a1,530 # f0003a34 <exception_reason+0x10c>
f000182a:       |  |      850a                  mv      a0,sp
f000182c:       |  |      4651                  li      a2,20
f000182e:       |  |      2a3000ef              jal     ra,f00022d0 <memcpy>
f0001832:       |  |      850a                  mv      a0,sp
f0001834:       |  |      2215                  jal     f0001958 <base_log_internal_core>
f0001836:       |  \----> 6531                  lui     a0,0xc
f0001838:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000183c:       |         2899                  jal     f0001892 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  // For the simulation platforms (DV and Verilator), the LFSR reseed frequency
  // is arbitrarily set to 255. The test may choose to update this value if
  // needed.
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f000183e:       \-------> c004                  sw      s1,0(s0)
f0001840:                 6561                  lui     a0,0x18
f0001842:                 6a050513              addi    a0,a0,1696 # 186a0 <test_status_set.kLogFields.2+0x83f8>
f0001846:                 c048                  sw      a0,4(s0)
f0001848:                 deadc537              lui     a0,0xdeadc
f000184c:                 eef50513              addi    a0,a0,-273 # deadbeef <_non_volatile_scratch_end+0xeea5beef>
f0001850:                 c408                  sw      a0,8(s0)
f0001852:                 80000537              lui     a0,0x80000
f0001856:                 05750513              addi    a0,a0,87 # 80000057 <_non_volatile_scratch_end+0x8ff80057>
f000185a:                 c448                  sw      a0,12(s0)
f000185c:                 10000513              li      a0,256
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
      .polynomial_coefficients = kLfsrPolynomialCoefficients,
      .reseed_frequency = 256,
      .op_counter = UINT32_MAX};
  // For non-runtime-sensitive simulations (for example, using FPGA or the
  // debug board), always fetch random data from the hardware.
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0001860:                 00002597              auipc   a1,0x2
f0001864:                 7f458593              addi    a1,a1,2036 # f0004054 <kDeviceType>
f0001868:                 418c                  lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f000186a:                 c808                  sw      a0,16(s0)
f000186c:                 557d                  li      a0,-1
f000186e:                 4609                  li      a2,2
f0001870:                 c848                  sw      a0,20(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0001872:             /-- 00c5e463              bltu    a1,a2,f000187a <rand_testutils_init+0x80>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:46
    ctx.reseed_frequency = 0;
f0001876:             |   00042823              sw      zero,16(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:48
  }
  return ctx;
f000187a:             \-> 44d2                  lw      s1,20(sp)
f000187c:                 4462                  lw      s0,24(sp)
f000187e:                 40f2                  lw      ra,28(sp)
f0001880:                 6105                  addi    sp,sp,32
f0001882:                 8082                  ret

f0001884 <dif_rv_core_ibex_init>:
dif_rv_core_ibex_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:19
#include "rv_core_ibex_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_core_ibex_init(mmio_region_t base_addr,
                                   dif_rv_core_ibex_t *rv_core_ibex) {
  if (rv_core_ibex == NULL) {
f0001884:       /----- c581                     beqz    a1,f000188c <dif_rv_core_ibex_init+0x8>
f0001886:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:23
    return kDifBadArg;
  }

  rv_core_ibex->base_addr = base_addr;
f0001888:       |      c188                     sw      a0,0(a1)
f000188a:       |  /-- a011                     j       f000188e <dif_rv_core_ibex_init+0xa>
f000188c:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:26

  return kDifOk;
}
f000188e:          \-> 8532                     mv      a0,a2
f0001890:              8082                     ret

f0001892 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
f0001892:                    1101                       addi    sp,sp,-32
f0001894:                    ce06                       sw      ra,28(sp)
f0001896:                    65b1                       lui     a1,0xc
f0001898:                    aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
f000189c:             /----- 02b50063           beq     a0,a1,f00018bc <test_status_set+0x2a>
f00018a0:             |      65a5                       lui     a1,0x9
f00018a2:             |      05b5                       addi    a1,a1,13
f00018a4:          /--|----- 02b50d63           beq     a0,a1,f00018de <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f00018a8:          |  |      00002597           auipc   a1,0x2
f00018ac:          |  |      7c858593           addi    a1,a1,1992 # f0004070 <kDeviceTestStatusAddress>
f00018b0:          |  |      418c                       lw      a1,0(a1)
f00018b2:          |  |  /-- c191                       beqz    a1,f00018b6 <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00018b4:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
f00018b6:          |  |  \-> 40f2                       lw      ra,28(sp)
f00018b8:          |  |      6105                       addi    sp,sp,32
f00018ba:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f00018bc:          |  \----> 00002517           auipc   a0,0x2
f00018c0:          |         7b850513           addi    a0,a0,1976 # f0004074 <kDeviceLogBypassUartAddress>
f00018c4:          |         4108                       lw      a0,0(a0)
f00018c6:          |  /----- ed0d                       bnez    a0,f0001900 <test_status_set+0x6e>
f00018c8:          |  |      00002597           auipc   a1,0x2
f00018cc:          |  |      4b858593           addi    a1,a1,1208 # f0003d80 <top_earlgrey_plic_interrupt_for_peripheral+0x338>
f00018d0:          |  |      0028                       addi    a0,sp,8
f00018d2:          |  |      4651                       li      a2,20
f00018d4:          |  |      1fd000ef           jal     ra,f00022d0 <memcpy>
f00018d8:          |  |      0028                       addi    a0,sp,8
f00018da:          |  |      28bd                       jal     f0001958 <base_log_internal_core>
f00018dc:          |  |  /-- a805                       j       f000190c <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f00018de:          \--|--|-> 00002517           auipc   a0,0x2
f00018e2:             |  |   79650513           addi    a0,a0,1942 # f0004074 <kDeviceLogBypassUartAddress>
f00018e6:             |  |   4108                       lw      a0,0(a0)
f00018e8:       /-----|--|-- ed05                       bnez    a0,f0001920 <test_status_set+0x8e>
f00018ea:       |     |  |   00002597           auipc   a1,0x2
f00018ee:       |     |  |   48258593           addi    a1,a1,1154 # f0003d6c <top_earlgrey_plic_interrupt_for_peripheral+0x324>
f00018f2:       |     |  |   0028                       addi    a0,sp,8
f00018f4:       |     |  |   4651                       li      a2,20
f00018f6:       |     |  |   1db000ef           jal     ra,f00022d0 <memcpy>
f00018fa:       |     |  |   0028                       addi    a0,sp,8
f00018fc:       |     |  |   28b1                       jal     f0001958 <base_log_internal_core>
f00018fe:       |  /--|--|-- a03d                       j       f000192c <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0001900:       |  |  \--|-> 1000f517           auipc   a0,0x1000f
f0001904:       |  |     |   9a850513           addi    a0,a0,-1624 # 102a8 <_non_volatile_scratch_end+0xff902a8>
f0001908:       |  |     |   4581                       li      a1,0
f000190a:       |  |     |   28c5                       jal     f00019fa <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f000190c:       |  |     \-> 00002517           auipc   a0,0x2
f0001910:       |  |         76450513           addi    a0,a0,1892 # f0004070 <kDeviceTestStatusAddress>
f0001914:       |  |         4108                       lw      a0,0(a0)
f0001916:       |  |  /----- c505                       beqz    a0,f000193e <test_status_set+0xac>
f0001918:       |  |  |      65b1                       lui     a1,0xc
f000191a:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000191e:       |  |  |  /-- a839                       j       f000193c <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0001920:       \--|--|--|-> 1000f517           auipc   a0,0x1000f
f0001924:          |  |  |   97450513           addi    a0,a0,-1676 # 10294 <_non_volatile_scratch_end+0xff90294>
f0001928:          |  |  |   4581                       li      a1,0
f000192a:          |  |  |   28c1                       jal     f00019fa <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f000192c:          \--|--|-> 00002517           auipc   a0,0x2
f0001930:             |  |   74450513           addi    a0,a0,1860 # f0004070 <kDeviceTestStatusAddress>
f0001934:             |  |   4108                       lw      a0,0(a0)
f0001936:             +--|-- c501                       beqz    a0,f000193e <test_status_set+0xac>
f0001938:             |  |   65a5                       lui     a1,0x9
f000193a:             |  |   05b5                       addi    a1,a1,13
f000193c:             |  \-> c10c                       sw      a1,0(a0)
f000193e:             \----> 2009                       jal     f0001940 <abort>

f0001940 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
f0001940:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
f0001944:       \-- bff5                        j       f0001940 <abort>

f0001946 <ibex_mcause_read>:
ibex_mcause_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:11

#include "sw/device/lib/base/csr.h"

uint32_t ibex_mcause_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MCAUSE, &mtval);
f0001946:       34202573                csrr    a0,mcause
/proc/self/cwd/sw/device/lib/runtime/ibex.c:12
  return mtval;
f000194a:       8082                    ret

f000194c <ibex_mtval_read>:
ibex_mtval_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:17
}

uint32_t ibex_mtval_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MTVAL, &mtval);
f000194c:       34302573                csrr    a0,mtval
/proc/self/cwd/sw/device/lib/runtime/ibex.c:18
  return mtval;
f0001950:       8082                    ret

f0001952 <ibex_mepc_read>:
ibex_mepc_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:23
}

uint32_t ibex_mepc_read(void) {
  uint32_t mepc;
  CSR_READ(CSR_REG_MEPC, &mepc);
f0001952:       34102573                csrr    a0,mepc
/proc/self/cwd/sw/device/lib/runtime/ibex.c:24
  return mepc;
f0001956:       8082                    ret

f0001958 <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
f0001958:              7179                     addi    sp,sp,-48
f000195a:              c606                     sw      ra,12(sp)
f000195c:              c422                     sw      s0,8(sp)
f000195e:              c226                     sw      s1,4(sp)
f0001960:              842a                     mv      s0,a0
f0001962:              d646                     sw      a7,44(sp)
f0001964:              d442                     sw      a6,40(sp)
f0001966:              d23e                     sw      a5,36(sp)
f0001968:              d03a                     sw      a4,32(sp)
f000196a:              ce36                     sw      a3,28(sp)
f000196c:              cc32                     sw      a2,24(sp)
f000196e:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
f0001970:              4148                     lw      a0,4(a0)
f0001972:              800005b7                 lui     a1,0x80000
f0001976:              fff58613                 addi    a2,a1,-1 # 7fffffff <_non_volatile_scratch_end+0x8ff7ffff>
f000197a:              4581                     li      a1,0
f000197c:              23f000ef                 jal     ra,f00023ba <memchr>
f0001980:              4054                     lw      a3,4(s0)
f0001982:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
f0001986:              02f00593                 li      a1,47
f000198a:              8536                     mv      a0,a3
f000198c:              2dd000ef                 jal     ra,f0002468 <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
f0001990:       /----- c501                     beqz    a0,f0001998 <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
f0001992:       |      00150693                 addi    a3,a0,1
f0001996:       |  /-- a011                     j       f000199a <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
f0001998:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f000199a:          \-> 4008                     lw      a0,0(s0)
f000199c:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
f000199e:       /----- 00a5ea63                 bltu    a1,a0,f00019b2 <base_log_internal_core+0x5a>
f00019a2:       |      050a                     slli    a0,a0,0x2
f00019a4:       |      00002597                 auipc   a1,0x2
f00019a8:       |      40c58593                 addi    a1,a1,1036 # f0003db0 <top_earlgrey_plic_interrupt_for_peripheral+0x368>
f00019ac:       |      952e                     add     a0,a0,a1
f00019ae:       |      410c                     lw      a1,0(a0)
f00019b0:       |  /-- a029                     j       f00019ba <base_log_internal_core+0x62>
f00019b2:       \--|-> 00002597                 auipc   a1,0x2
f00019b6:          |   3fa58593                 addi    a1,a1,1018 # f0003dac <top_earlgrey_plic_interrupt_for_peripheral+0x364>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
f00019ba:          \-> f0000497                 auipc   s1,0xf0000
f00019be:              6ba48493                 addi    s1,s1,1722 # e0002074 <base_log_internal_core.global_log_counter>
f00019c2:              0004d603                 lhu     a2,0(s1)
f00019c6:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f00019c8:              00002517                 auipc   a0,0x2
f00019cc:              3cc50513                 addi    a0,a0,972 # f0003d94 <top_earlgrey_plic_interrupt_for_peripheral+0x34c>
f00019d0:              2865                     jal     f0001a88 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
f00019d2:              00049503                 lh      a0,0(s1)
f00019d6:              0505                     addi    a0,a0,1
f00019d8:              00a49023                 sh      a0,0(s1)
f00019dc:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
f00019de:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
f00019e0:              4808                     lw      a0,16(s0)
f00019e2:              084c                     addi    a1,sp,20
f00019e4:              28d9                     jal     f0001aba <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
f00019e6:              00002517                 auipc   a0,0x2
f00019ea:              3bd50513                 addi    a0,a0,957 # f0003da3 <top_earlgrey_plic_interrupt_for_peripheral+0x35b>
f00019ee:              2869                     jal     f0001a88 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
f00019f0:              4492                     lw      s1,4(sp)
f00019f2:              4422                     lw      s0,8(sp)
f00019f4:              40b2                     lw      ra,12(sp)
f00019f6:              6145                     addi    sp,sp,48
f00019f8:              8082                     ret

f00019fa <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
f00019fa:              1101                     addi    sp,sp,-32
f00019fc:              ce46                     sw      a7,28(sp)
f00019fe:              cc42                     sw      a6,24(sp)
f0001a00:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
f0001a02:              00002797                 auipc   a5,0x2
f0001a06:              67278793                 addi    a5,a5,1650 # f0004074 <kDeviceLogBypassUartAddress>
f0001a0a:              439c                     lw      a5,0(a5)
f0001a0c:              c83a                     sw      a4,16(sp)
f0001a0e:              c636                     sw      a3,12(sp)
f0001a10:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001a12:              c388                     sw      a0,0(a5)
f0001a14:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
f0001a16:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001a18:       /----- c989                     beqz    a1,f0001a2a <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
f0001a1a:       |  /-> 4512                     lw      a0,4(sp)
f0001a1c:       |  |   00450613                 addi    a2,a0,4
f0001a20:       |  |   c232                     sw      a2,4(sp)
f0001a22:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001a24:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001a26:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
f0001a28:       |  \-- f9ed                     bnez    a1,f0001a1a <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
f0001a2a:       \----> 6105                     addi    sp,sp,32
f0001a2c:              8082                     ret

f0001a2e <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
f0001a2e:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
f0001a30:       8082                    ret

f0001a32 <base_uart_stdout>:
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:79
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
f0001a32:       f0000597                auipc   a1,0xf0000
f0001a36:       64658593                addi    a1,a1,1606 # e0002078 <base_stdout>
base_set_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:66
  base_stdout = out;
f0001a3a:       c188                    sw      a0,0(a1)
f0001a3c:       00000517                auipc   a0,0x0
f0001a40:       00c50513                addi    a0,a0,12 # f0001a48 <base_dev_uart>
f0001a44:       c1c8                    sw      a0,4(a1)
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:82
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
f0001a46:       8082                    ret

f0001a48 <base_dev_uart>:
base_dev_uart():
/proc/self/cwd/sw/device/lib/runtime/print.c:69
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
f0001a48:                 1101                  addi    sp,sp,-32
f0001a4a:                 ce06                  sw      ra,28(sp)
f0001a4c:                 cc22                  sw      s0,24(sp)
f0001a4e:                 ca26                  sw      s1,20(sp)
f0001a50:                 c84a                  sw      s2,16(sp)
f0001a52:                 c64e                  sw      s3,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001a54:       /-------- c20d                  beqz    a2,f0001a76 <base_dev_uart+0x2e>
f0001a56:       |         8432                  mv      s0,a2
f0001a58:       |         892e                  mv      s2,a1
f0001a5a:       |         89aa                  mv      s3,a0
f0001a5c:       |         4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:72
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifOk) {
f0001a5e:       |  /----> 00990533              add     a0,s2,s1
f0001a62:       |  |      00054583              lbu     a1,0(a0)
f0001a66:       |  |      854e                  mv      a0,s3
f0001a68:       |  |      2f59                  jal     f00021fe <dif_uart_byte_send_polled>
f0001a6a:       |  |  /-- e519                  bnez    a0,f0001a78 <base_dev_uart+0x30>
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001a6c:       |  |  |   0485                  addi    s1,s1,1
f0001a6e:       |  \--|-- fe9418e3              bne     s0,s1,f0001a5e <base_dev_uart+0x16>
f0001a72:       |     |   84a2                  mv      s1,s0
f0001a74:       |     +-- a011                  j       f0001a78 <base_dev_uart+0x30>
f0001a76:       \-----|-> 4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:77
}
f0001a78:             \-> 8526                  mv      a0,s1
f0001a7a:                 49b2                  lw      s3,12(sp)
f0001a7c:                 4942                  lw      s2,16(sp)
f0001a7e:                 44d2                  lw      s1,20(sp)
f0001a80:                 4462                  lw      s0,24(sp)
f0001a82:                 40f2                  lw      ra,28(sp)
f0001a84:                 6105                  addi    sp,sp,32
f0001a86:                 8082                  ret

f0001a88 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84

size_t base_printf(const char *format, ...) {
f0001a88:       7179                    addi    sp,sp,-48
f0001a8a:       c606                    sw      ra,12(sp)
f0001a8c:       d646                    sw      a7,44(sp)
f0001a8e:       d442                    sw      a6,40(sp)
f0001a90:       d23e                    sw      a5,36(sp)
f0001a92:       d03a                    sw      a4,32(sp)
f0001a94:       ce36                    sw      a3,28(sp)
f0001a96:       cc32                    sw      a2,24(sp)
f0001a98:       ca2e                    sw      a1,20(sp)
f0001a9a:       f0000597                auipc   a1,0xf0000
f0001a9e:       5de58593                addi    a1,a1,1502 # e0002078 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
f0001aa2:       4190                    lw      a2,0(a1)
f0001aa4:       41cc                    lw      a1,4(a1)
f0001aa6:       872a                    mv      a4,a0
f0001aa8:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
f0001aaa:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f0001aac:       0854                    addi    a3,sp,20
f0001aae:       8532                    mv      a0,a2
f0001ab0:       863a                    mv      a2,a4
f0001ab2:       200d                    jal     f0001ad4 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
f0001ab4:       40b2                    lw      ra,12(sp)
f0001ab6:       6145                    addi    sp,sp,48
f0001ab8:       8082                    ret

f0001aba <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
f0001aba:       f0000697                auipc   a3,0xf0000
f0001abe:       5be68693                addi    a3,a3,1470 # e0002078 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f0001ac2:       4290                    lw      a2,0(a3)
f0001ac4:       42d4                    lw      a3,4(a3)
f0001ac6:       872e                    mv      a4,a1
f0001ac8:       87aa                    mv      a5,a0
f0001aca:       8532                    mv      a0,a2
f0001acc:       85b6                    mv      a1,a3
f0001ace:       863e                    mv      a2,a5
f0001ad0:       86ba                    mv      a3,a4
f0001ad2:       a009                    j       f0001ad4 <base_vfprintf>

f0001ad4 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
f0001ad4:                                                                    715d                       addi    sp,sp,-80
f0001ad6:                                                                    c686                       sw      ra,76(sp)
f0001ad8:                                                                    c4a2                       sw      s0,72(sp)
f0001ada:                                                                    c2a6                       sw      s1,68(sp)
f0001adc:                                                                    c0ca                       sw      s2,64(sp)
f0001ade:                                                                    de4e                       sw      s3,60(sp)
f0001ae0:                                                                    dc52                       sw      s4,56(sp)
f0001ae2:                                                                    da56                       sw      s5,52(sp)
f0001ae4:                                                                    d85a                       sw      s6,48(sp)
f0001ae6:                                                                    d65e                       sw      s7,44(sp)
f0001ae8:                                                                    d462                       sw      s8,40(sp)
f0001aea:                                                                    d266                       sw      s9,36(sp)
f0001aec:                                                                    d06a                       sw      s10,32(sp)
f0001aee:                                                                    ce6e                       sw      s11,28(sp)
f0001af0:                                                                    8cb2                       mv      s9,a2
f0001af2:                                                                    892a                       mv      s2,a0
f0001af4:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
f0001af6:                                                                /-- c199                       beqz    a1,f0001afc <base_vfprintf+0x28>
f0001af8:                                                                |   89ae                       mv      s3,a1
f0001afa:                                                             /--|-- a029                       j       f0001b04 <base_vfprintf+0x30>
f0001afc:                                                             |  \-> 00000997           auipc   s3,0x0
f0001b00:                                                             |      f3298993           addi    s3,s3,-206 # f0001a2e <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
f0001b04:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
f0001b06:                                                                    000cc503           lbu     a0,0(s9)
f0001b0a:       /----------------------------------------------------------- 42050563           beqz    a0,f0001f34 <base_vfprintf+0x460>
f0001b0e:       |                                                            4a81                       li      s5,0
f0001b10:       |                                                            02500c13           li      s8,37
f0001b14:       |                                                            4d25                       li      s10,9
f0001b16:       |                                                            4a29                       li      s4,10
f0001b18:       |                                                            658d                       lui     a1,0x3
f0001b1a:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_static_critical_size+0xc5e>
f0001b1e:       |                                                            c02e                       sw      a1,0(sp)
f0001b20:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
f0001b22:       |        |                                               /-> 0ff57413           andi    s0,a0,255
f0001b26:       |        |                                            /--|-- 01840963           beq     s0,s8,f0001b38 <base_vfprintf+0x64>
f0001b2a:       |        |                                            +--|-- c419                       beqz    s0,f0001b38 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
f0001b2c:       |        |                                            |  |   009c8533           add     a0,s9,s1
f0001b30:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
f0001b34:       |        |                                            |  |   0485                       addi    s1,s1,1
f0001b36:       |        |                                            |  \-- b7f5                       j       f0001b22 <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
f0001b38:       |        |                                            \--/-X c491                       beqz    s1,f0001b44 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
f0001b3a:       |        |                                               |   854a                       mv      a0,s2
f0001b3c:       |        |                                               |   85e6                       mv      a1,s9
f0001b3e:       |        |                                               |   8626                       mv      a2,s1
f0001b40:       |        |                                               |   9982                       jalr    s3
f0001b42:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
f0001b44:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,f0001f36 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
f0001b48:       |  |     |                                                   009c8533           add     a0,s9,s1
f0001b4c:       |  |     |                                                   00154603           lbu     a2,1(a0)
f0001b50:       |  |     |                                                   02100713           li      a4,33
f0001b54:       |  |     |                                            /----- 00e61863           bne     a2,a4,f0001b64 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001b58:       |  |     |                                            |      00254583           lbu     a1,2(a0)
f0001b5c:       |  |     |                                            |      00250693           addi    a3,a0,2
f0001b60:       |  |     |                                            |      4b05                       li      s6,1
f0001b62:       |  |     |                                            |  /-- a029                       j       f0001b6c <base_vfprintf+0x98>
f0001b64:       |  |     |                                            \--|-> 4b01                       li      s6,0
f0001b66:       |  |     |                                               |   00150693           addi    a3,a0,1
f0001b6a:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001b6c:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,f0001f22 <base_vfprintf+0x44e>
f0001b70:       |  |  |  |                                                   4481                       li      s1,0
f0001b72:       |  |  |  |                                                   4b81                       li      s7,0
f0001b74:       |  |  |  |                                                   4501                       li      a0,0
f0001b76:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
f0001b7a:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
f0001b7e:       |  |  |  |                                                   00168c93           addi    s9,a3,1
f0001b82:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
f0001b86:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001b8a:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
f0001b8e:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,f0001bc4 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
f0001b92:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
f0001b96:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,f0001bac <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
f0001b98:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
f0001b9c:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
f0001b9e:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001ba2:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001ba6:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
f0001ba8:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,f0001b82 <base_vfprintf+0xae>
f0001baa:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       f0001f22 <base_vfprintf+0x44e>
f0001bac:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
f0001bb0:       |  |  |  |                                   |     |  |      03000613           li      a2,48
f0001bb4:       |  |  |  |                                   |     |  |      02000513           li      a0,32
f0001bb8:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,f0001b98 <base_vfprintf+0xc4>
f0001bbc:       |  |  |  |                                   |     |         03000513           li      a0,48
f0001bc0:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
f0001bc2:       |  |  |  |                                   |     \-------- b7c5                       j       f0001ba2 <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
f0001bc4:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,f0001bcc <base_vfprintf+0xf8>
f0001bc6:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,f0001bd4 <base_vfprintf+0x100>
f0001bca:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       f0001f56 <base_vfprintf+0x482>
f0001bcc:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
f0001bd0:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,f0001f56 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001bd4:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
f0001bd8:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,f0001c2a <base_vfprintf+0x156>
f0001bdc:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
f0001bde:       |  |  |  |  |                                         |      00002597           auipc   a1,0x2
f0001be2:       |  |  |  |  |                                         |      1e258593           addi    a1,a1,482 # f0003dc0 <top_earlgrey_plic_interrupt_for_peripheral+0x378>
f0001be6:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
f0001be8:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
f0001bea:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
f0001bec:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,f0001ea4 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
f0001bf0:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
f0001bf2:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
f0001bf6:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
f0001bf8:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
f0001bfc:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,f0001c14 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
f0001c00:       |  |  |  |  |  |                                      |  |   00002597           auipc   a1,0x2
f0001c04:       |  |  |  |  |  |                                      |  |   25758593           addi    a1,a1,599 # f0003e57 <top_earlgrey_plic_interrupt_for_peripheral+0x40f>
f0001c08:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
f0001c0a:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
f0001c0c:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
f0001c0e:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
f0001c10:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001c14:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
f0001c18:       |  |  |  |  |  |                                      |      00002817           auipc   a6,0x2
f0001c1c:       |  |  |  |  |  |                                      |      25280813           addi    a6,a6,594 # f0003e6a <kDigitsLow>
f0001c20:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
f0001c22:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
f0001c24:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
f0001c26:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
f0001c28:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       f0001e70 <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001c2a:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
f0001c2e:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,f0001c68 <base_vfprintf+0x194>
f0001c32:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,f0001ea4 <base_vfprintf+0x3d0>
f0001c36:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,f0001ea4 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
f0001c3a:       |  |  |  |  |  |        |                                |   00002597           auipc   a1,0x2
f0001c3e:       |  |  |  |  |  |        |                                |   21b58593           addi    a1,a1,539 # f0003e55 <top_earlgrey_plic_interrupt_for_peripheral+0x40d>
f0001c42:       |  |  |  |  |  |        |                             /--|-- a851                       j       f0001cd6 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
f0001c44:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,f0001c68 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
f0001c48:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
f0001c4a:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
f0001c4e:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001c50:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
f0001c52:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
f0001c56:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001c58:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001c5a:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
f0001c5e:       |  |  |  |  |  |        |                             |  |   00002897           auipc   a7,0x2
f0001c62:       |  |  |  |  |  |        |                             |  |   23988893           addi    a7,a7,569 # f0003e97 <kDigitsHigh>
f0001c66:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       f0001e4a <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
f0001c68:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
f0001c6a:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
f0001c6e:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
f0001c70:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
f0001c72:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
f0001c76:       |  |  |  |  |  |        |           |                 |      00002817           auipc   a6,0x2
f0001c7a:       |  |  |  |  |  |        |           |                 |      22180813           addi    a6,a6,545 # f0003e97 <kDigitsHigh>
f0001c7e:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       f0001e6a <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
f0001c80:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,f0001ea4 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
f0001c84:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
f0001c86:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
f0001c8a:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f0001c8c:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
f0001c8e:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
f0001c92:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f0001c94:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001c96:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
f0001c9a:       |  |  |  |  |  |        |        |  |                 |      00002897           auipc   a7,0x2
f0001c9e:       |  |  |  |  |  |        |        |  |                 |      1fd88893           addi    a7,a7,509 # f0003e97 <kDigitsHigh>
f0001ca2:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       f0001e98 <base_vfprintf+0x3c4>
f0001ca4:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
f0001ca6:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
f0001caa:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
f0001cac:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
f0001cae:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,f0001ebe <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
f0001cb2:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,f0001f16 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
f0001cb6:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00002597           auipc   a1,0x2
f0001cba:       |  |  |  |  |  |  |     |  |  |  |  |                 |      1a658593           addi    a1,a1,422 # f0003e5c <top_earlgrey_plic_interrupt_for_peripheral+0x414>
f0001cbe:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
f0001cc0:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       f0001eae <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
f0001cc2:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,f0001ea4 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
f0001cc6:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
f0001cc8:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
f0001ccc:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
f0001cce:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
f0001cd0:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
f0001cd4:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
f0001cd6:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
f0001cd8:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       f0001eae <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
f0001cda:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,f0001ea4 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
f0001cde:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
f0001ce0:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
f0001ce4:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
f0001ce6:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
f0001ce8:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
f0001cec:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00002817           auipc   a6,0x2
f0001cf0:       |  |  |  |  |  |  |  |  |  |  |  |  |                        17e80813           addi    a6,a6,382 # f0003e6a <kDigitsLow>
f0001cf4:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
f0001cf6:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       f0001e6c <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
f0001cf8:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,f0001ea4 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001cfc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00002597           auipc   a1,0x2
f0001d00:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     15d58593           addi    a1,a1,349 # f0003e59 <top_earlgrey_plic_interrupt_for_peripheral+0x411>
f0001d04:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
f0001d06:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001d08:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
f0001d0a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
f0001d0c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
f0001d10:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
f0001d12:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001d14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
f0001d18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00002817           auipc   a6,0x2
f0001d1c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     15280813           addi    a6,a6,338 # f0003e6a <kDigitsLow>
f0001d20:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
f0001d22:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
f0001d26:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
f0001d28:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001d2a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
f0001d2c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     f0002046 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
f0001d2e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
f0001d32:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       f0001eb4 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
f0001d34:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
f0001d36:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
f0001d3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
f0001d3c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
f0001d3e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
f0001d40:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
f0001d44:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
f0001d48:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001d4a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
f0001d4c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
f0001d4e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
f0001d52:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     f00020c4 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
f0001d54:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001d56:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001d58:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
f0001d5c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
f0001d60:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001d62:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
f0001d64:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,f0001d5c <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001d66:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
f0001d6a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001d6e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0f758593           addi    a1,a1,247 # f0003e61 <top_earlgrey_plic_interrupt_for_peripheral+0x419>
f0001d72:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001d74:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001d76:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001d78:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001d7a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
f0001d7e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001d80:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001d82:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
f0001d86:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001d8a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0dc58593           addi    a1,a1,220 # f0003e62 <top_earlgrey_plic_interrupt_for_peripheral+0x41a>
f0001d8e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001d90:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
f0001d92:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001d94:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
f0001d96:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001d9a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0b658593           addi    a1,a1,182 # f0003e4c <top_earlgrey_plic_interrupt_for_peripheral+0x404>
f0001d9e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
f0001da0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001da2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001da4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
f0001da8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,f0001ece <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
f0001dac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002597           auipc   a1,0x2
f0001db0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               0b858593           addi    a1,a1,184 # f0003e64 <top_earlgrey_plic_interrupt_for_peripheral+0x41c>
f0001db4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001db6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001db8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001dba:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001dbe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
f0001dc0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
f0001dc2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001dc4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001dc6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001dc8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001dca:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002817           auipc   a6,0x2
f0001dce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               0a080813           addi    a6,a6,160 # f0003e6a <kDigitsLow>
f0001dd2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
f0001dd4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001dd6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
f0001dd8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
f0001dda:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
f0001ddc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     f0002046 <write_digits>
f0001dde:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
f0001de0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002597           auipc   a1,0x2
f0001de4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               08658593           addi    a1,a1,134 # f0003e66 <top_earlgrey_plic_interrupt_for_peripheral+0x41e>
f0001de8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001dea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001dec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001dee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
f0001df0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       f0001ee8 <base_vfprintf+0x414>
f0001df2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
f0001df4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
f0001df8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
f0001dfa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,f0001f00 <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
f0001dfe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f0001e00:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
f0001e04:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0001e06:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
f0001e08:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       f0001eae <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
f0001e0a:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,f0001ea4 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
f0001e0e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
f0001e10:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
f0001e14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0001e16:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001e18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
f0001e1c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00002817           auipc   a6,0x2
f0001e20:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         04e80813           addi    a6,a6,78 # f0003e6a <kDigitsLow>
f0001e24:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
f0001e26:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       f0001e6c <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
f0001e28:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,f0001e54 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
f0001e2c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
f0001e2e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
f0001e32:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0001e34:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
f0001e36:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
f0001e3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0001e3c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001e3e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
f0001e42:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00002897           auipc   a7,0x2
f0001e46:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   02888893           addi    a7,a7,40 # f0003e6a <kDigitsLow>
f0001e4a:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
f0001e4c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
f0001e4e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
f0001e50:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
f0001e52:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       f0001ea0 <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
f0001e54:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
f0001e56:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
f0001e5a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
f0001e5c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
f0001e5e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
f0001e62:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00002817           auipc   a6,0x2
f0001e66:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00880813           addi    a6,a6,8 # f0003e6a <kDigitsLow>
f0001e6a:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
f0001e6c:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
f0001e6e:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
f0001e70:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
f0001e72:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     f0002046 <write_digits>
f0001e74:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       f0001eb2 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
f0001e76:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,f0001ea4 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
f0001e7a:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
f0001e7c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
f0001e80:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f0001e82:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
f0001e84:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
f0001e88:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f0001e8a:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001e8c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
f0001e90:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00002897           auipc   a7,0x2
f0001e94:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   fda88893           addi    a7,a7,-38 # f0003e6a <kDigitsLow>
f0001e98:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
f0001e9a:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
f0001e9c:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
f0001e9e:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
f0001ea0:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     f0001f62 <hex_dump>
f0001ea2:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       f0001eb2 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
f0001ea4:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00002597           auipc   a1,0x2
f0001ea8:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   00358593           addi    a1,a1,3 # f0003ea7 <kUnknownSpec>
f0001eac:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
f0001eae:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
f0001eb0:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
f0001eb2:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
f0001eb4:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
f0001eb8:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,f0001b20 <base_vfprintf+0x4c>
f0001ebc:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       f0001f36 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
f0001ebe:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
f0001ec2:       |  |  |     |     |  |                 |  |  |  |  |         00002817           auipc   a6,0x2
f0001ec6:       |  |  |     |     |  |                 |  |  |  |  |         fa880813           addi    a6,a6,-88 # f0003e6a <kDigitsLow>
f0001eca:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
f0001ecc:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       f0001e6c <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001ece:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
f0001ed0:       |  |  |     |     |  |                    |     |  |         00002817           auipc   a6,0x2
f0001ed4:       |  |  |     |     |  |                    |     |  |         f9a80813           addi    a6,a6,-102 # f0003e6a <kDigitsLow>
f0001ed8:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
f0001eda:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
f0001edc:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
f0001ede:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
f0001ee0:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
f0001ee2:       |  |  |     |     |  |                    |     |  |         2295                       jal     f0002046 <write_digits>
f0001ee4:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
f0001ee8:       |  |  |     |     |  |                    |     |  \-------> 00002597           auipc   a1,0x2
f0001eec:       |  |  |     |     |  |                    |     |            f8058593           addi    a1,a1,-128 # f0003e68 <top_earlgrey_plic_interrupt_for_peripheral+0x420>
f0001ef0:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
f0001ef2:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
f0001ef4:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
f0001ef6:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
f0001efa:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
f0001efe:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       f0001eb4 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f0001f00:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
f0001f02:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f0001f04:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
f0001f08:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
f0001f0c:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f0001f0e:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,f0001f04 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
f0001f10:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
f0001f14:       |  |  |     |     |  +-------------------------------------- bf69                       j       f0001eae <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
f0001f16:       |  |  |     |     \--|-------------------------------------> 00001597           auipc   a1,0x1
f0001f1a:       |  |  |     |        |                                       4c658593           addi    a1,a1,1222 # f00033dc <kExpectedHmacDigest+0x49c>
f0001f1e:       |  |  |     |        |                                       4615                       li      a2,5
f0001f20:       |  |  |     |        \-------------------------------------- b779                       j       f0001eae <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
f0001f22:       |  |  \-----|----------------------------------------------> 00002597           auipc   a1,0x2
f0001f26:       |  |        |                                                f5858593           addi    a1,a1,-168 # f0003e7a <kErrorNul>
f0001f2a:       |  |        |                                                4645                       li      a2,17
f0001f2c:       |  |        |                                            /-> 854a                       mv      a0,s2
f0001f2e:       |  |        |                                            |   9982                       jalr    s3
f0001f30:       |  |        |                                            |   9aaa                       add     s5,s5,a0
f0001f32:       |  +--------|--------------------------------------------|-- a011                       j       f0001f36 <base_vfprintf+0x462>
f0001f34:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
f0001f36:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
f0001f38:                   |                                            |   4df2                       lw      s11,28(sp)
f0001f3a:                   |                                            |   5d02                       lw      s10,32(sp)
f0001f3c:                   |                                            |   5c92                       lw      s9,36(sp)
f0001f3e:                   |                                            |   5c22                       lw      s8,40(sp)
f0001f40:                   |                                            |   5bb2                       lw      s7,44(sp)
f0001f42:                   |                                            |   5b42                       lw      s6,48(sp)
f0001f44:                   |                                            |   5ad2                       lw      s5,52(sp)
f0001f46:                   |                                            |   5a62                       lw      s4,56(sp)
f0001f48:                   |                                            |   59f2                       lw      s3,60(sp)
f0001f4a:                   |                                            |   4906                       lw      s2,64(sp)
f0001f4c:                   |                                            |   4496                       lw      s1,68(sp)
f0001f4e:                   |                                            |   4426                       lw      s0,72(sp)
f0001f50:                   |                                            |   40b6                       lw      ra,76(sp)
f0001f52:                   |                                            |   6161                       addi    sp,sp,80
f0001f54:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
f0001f56:                   \--------------------------------------------|-> 00002597           auipc   a1,0x2
f0001f5a:                                                                |   f3558593           addi    a1,a1,-203 # f0003e8b <kErrorTooWide>
f0001f5e:                                                                |   4631                       li      a2,12
f0001f60:                                                                \-- b7f1                       j       f0001f2c <base_vfprintf+0x458>

f0001f62 <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
f0001f62:                    715d                       addi    sp,sp,-80
f0001f64:                    c686                       sw      ra,76(sp)
f0001f66:                    c4a2                       sw      s0,72(sp)
f0001f68:                    c2a6                       sw      s1,68(sp)
f0001f6a:                    c0ca                       sw      s2,64(sp)
f0001f6c:                    de4e                       sw      s3,60(sp)
f0001f6e:                    dc52                       sw      s4,56(sp)
f0001f70:                    da56                       sw      s5,52(sp)
f0001f72:                    d85a                       sw      s6,48(sp)
f0001f74:                    d65e                       sw      s7,44(sp)
f0001f76:                    d462                       sw      s8,40(sp)
f0001f78:                    d266                       sw      s9,36(sp)
f0001f7a:                    d06a                       sw      s10,32(sp)
f0001f7c:                    8bc6                       mv      s7,a7
f0001f7e:                    8a42                       mv      s4,a6
f0001f80:                    8b36                       mv      s6,a3
f0001f82:                    8ab2                       mv      s5,a2
f0001f84:                    892e                       mv      s2,a1
f0001f86:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
f0001f88:          /-------- 02e6fc63           bgeu    a3,a4,f0001fc0 <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
f0001f8c:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
f0001f90:          |         850a                       mv      a0,sp
f0001f92:          |         02000613           li      a2,32
f0001f96:          |         85be                       mv      a1,a5
f0001f98:          |         26c1                       jal     f0002358 <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f0001f9a:          +-------- c09d                       beqz    s1,f0001fc0 <hex_dump+0x5e>
f0001f9c:          |         4c01                       li      s8,0
f0001f9e:          |  /----> 02000513           li      a0,32
f0001fa2:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
f0001fa4:          |  |  /-- 00a4e463           bltu    s1,a0,f0001fac <hex_dump+0x4a>
f0001fa8:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f0001fac:          |  |  \-> 858a                       mv      a1,sp
f0001fae:          |  |      854e                       mv      a0,s3
f0001fb0:          |  |      8622                       mv      a2,s0
f0001fb2:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
f0001fb4:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f0001fb6:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f0001fb8:          |  \----- f0fd                       bnez    s1,f0001f9e <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f0001fba:          |     /-- 000b1663           bnez    s6,f0001fc6 <hex_dump+0x64>
f0001fbe:       /--|-----|-- a0ad                       j       f0002028 <hex_dump+0xc6>
f0001fc0:       |  \-----|-> 4c01                       li      s8,0
f0001fc2:       +--------|-- 060b0363           beqz    s6,f0002028 <hex_dump+0xc6>
f0001fc6:       |        \-> 4401                       li      s0,0
f0001fc8:       |            4601                       li      a2,0
f0001fca:       |            fffb0493           addi    s1,s6,-1
f0001fce:       |            8b0a                       mv      s6,sp
f0001fd0:       |            02000c93           li      s9,32
f0001fd4:       |            5d7d                       li      s10,-1
f0001fd6:       |     /----> 8526                       mv      a0,s1
f0001fd8:       |     |  /-- 000a1363           bnez    s4,f0001fde <hex_dump+0x7c>
f0001fdc:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
f0001fde:       |     |  \-> 9556                       add     a0,a0,s5
f0001fe0:       |     |      00054503           lbu     a0,0(a0)
f0001fe4:       |     |      00455593           srli    a1,a0,0x4
f0001fe8:       |     |      95de                       add     a1,a1,s7
f0001fea:       |     |      00058583           lb      a1,0(a1)
f0001fee:       |     |      00cb06b3           add     a3,s6,a2
f0001ff2:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f0001ff6:       |     |      893d                       andi    a0,a0,15
f0001ff8:       |     |      955e                       add     a0,a0,s7
f0001ffa:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
f0001ffe:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f0002000:       |     |      00a680a3           sb      a0,1(a3)
f0002004:       |     |  /-- 01961963           bne     a2,s9,f0002016 <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
f0002008:       |     |  |   858a                       mv      a1,sp
f000200a:       |     |  |   02000613           li      a2,32
f000200e:       |     |  |   854e                       mv      a0,s3
f0002010:       |     |  |   9902                       jalr    s2
f0002012:       |     |  |   4601                       li      a2,0
f0002014:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f0002016:       |     |  \-> 14fd                       addi    s1,s1,-1
f0002018:       |     |      0405                       addi    s0,s0,1
f000201a:       |     \----- fba49ee3           bne     s1,s10,f0001fd6 <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
f000201e:       +----------- c609                       beqz    a2,f0002028 <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
f0002020:       |            858a                       mv      a1,sp
f0002022:       |            854e                       mv      a0,s3
f0002024:       |            9902                       jalr    s2
f0002026:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
f0002028:       \----------> 8562                       mv      a0,s8
f000202a:                    5d02                       lw      s10,32(sp)
f000202c:                    5c92                       lw      s9,36(sp)
f000202e:                    5c22                       lw      s8,40(sp)
f0002030:                    5bb2                       lw      s7,44(sp)
f0002032:                    5b42                       lw      s6,48(sp)
f0002034:                    5ad2                       lw      s5,52(sp)
f0002036:                    5a62                       lw      s4,56(sp)
f0002038:                    59f2                       lw      s3,60(sp)
f000203a:                    4906                       lw      s2,64(sp)
f000203c:                    4496                       lw      s1,68(sp)
f000203e:                    4426                       lw      s0,72(sp)
f0002040:                    40b6                       lw      ra,76(sp)
f0002042:                    6161                       addi    sp,sp,80
f0002044:                    8082                       ret

f0002046 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
f0002046:              7179                     addi    sp,sp,-48
f0002048:              d606                     sw      ra,44(sp)
f000204a:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
f000204c:       /----- ca05                     beqz    a2,f000207c <write_digits+0x36>
f000204e:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f0002050:       |      02b10293                 addi    t0,sp,43
f0002054:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
f0002056:       |  |   02f65633                 divu    a2,a2,a5
f000205a:       |  |   02f605b3                 mul     a1,a2,a5
f000205e:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
f0002062:       |  |   95c2                     add     a1,a1,a6
f0002064:       |  |   00058e03                 lb      t3,0(a1)
f0002068:       |  |   007285b3                 add     a1,t0,t2
f000206c:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f0002070:       |  |   13fd                     addi    t2,t2,-1
f0002072:       |  \-- fef371e3                 bgeu    t1,a5,f0002054 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0002076:       |      40700633                 neg     a2,t2
f000207a:       |  /-- a031                     j       f0002086 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
f000207c:       \--|-> 00080583                 lb      a1,0(a6)
f0002080:          |   02b105a3                 sb      a1,43(sp)
f0002084:          |   4605                     li      a2,1
f0002086:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0002088:          /-- c291                     beqz    a3,f000208c <write_digits+0x46>
f000208a:          |   85b6                     mv      a1,a3
f000208c:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
f0002090:          /-- 00d5e463                 bltu    a1,a3,f0002098 <write_digits+0x52>
f0002094:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f0002098:       /--\-X 00b67e63                 bgeu    a2,a1,f00020b4 <write_digits+0x6e>
f000209c:       |      40c586b3                 sub     a3,a1,a2
f00020a0:       |      007c                     addi    a5,sp,12
f00020a2:       |      40c78633                 sub     a2,a5,a2
f00020a6:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
f00020a8:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f00020ac:       |  |   16fd                     addi    a3,a3,-1
f00020ae:       |  |   167d                     addi    a2,a2,-1
f00020b0:       |  \-- fee5                     bnez    a3,f00020a8 <write_digits+0x62>
f00020b2:       |      862e                     mv      a2,a1
f00020b4:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
f00020b6:              8d91                     sub     a1,a1,a2
f00020b8:              02058593                 addi    a1,a1,32
f00020bc:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
f00020be:              50b2                     lw      ra,44(sp)
f00020c0:              6145                     addi    sp,sp,48
f00020c2:              8082                     ret

f00020c4 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
f00020c4:              00052813                 slti    a6,a0,0
f00020c8:              41f55793                 srai    a5,a0,0x1f
f00020cc:              8fe9                     and     a5,a5,a0
f00020ce:              8bfd                     andi    a5,a5,31
f00020d0:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
f00020d4:              00e87833                 and     a6,a6,a4
f00020d8:              02000713                 li      a4,32
f00020dc:          /-- 00081363                 bnez    a6,f00020e2 <status_extract+0x1e>
f00020e0:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
f00020e2:          \-> 00271813                 slli    a6,a4,0x2
f00020e6:              f0000797                 auipc   a5,0xf0000
f00020ea:              efe78793                 addi    a5,a5,-258 # e0001fe4 <status_codes>
f00020ee:              97c2                     add     a5,a5,a6
f00020f0:              439c                     lw      a5,0(a5)
f00020f2:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
f00020f4:              00173593                 seqz    a1,a4
f00020f8:       /----- cb1d                     beqz    a4,f000212e <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f00020fa:       |      00555713                 srli    a4,a0,0x5
f00020fe:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
f0002102:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
f0002104:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
f0002108:       |      8a7d                     andi    a2,a2,31
f000210a:       |      04066613                 ori     a2,a2,64
f000210e:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
f0002112:       |      01555613                 srli    a2,a0,0x15
f0002116:       |      8a7d                     andi    a2,a2,31
f0002118:       |      04066613                 ori     a2,a2,64
f000211c:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
f0002120:       |      8169                     srli    a0,a0,0x1a
f0002122:       |      897d                     andi    a0,a0,31
f0002124:       |      04056513                 ori     a0,a0,64
f0002128:       |      00a68123                 sb      a0,2(a3)
f000212c:       |  /-- a011                     j       f0002130 <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
f000212e:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
f0002130:          \-> 0015c513                 xori    a0,a1,1
f0002134:              8082                     ret

f0002136 <dif_uart_init>:
dif_uart_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:18

#include "uart_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_init(mmio_region_t base_addr, dif_uart_t *uart) {
  if (uart == NULL) {
f0002136:       /----- c581                     beqz    a1,f000213e <dif_uart_init+0x8>
f0002138:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:22
    return kDifBadArg;
  }

  uart->base_addr = base_addr;
f000213a:       |      c188                     sw      a0,0(a1)
f000213c:       |  /-- a011                     j       f0002140 <dif_uart_init+0xa>
f000213e:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:25

  return kDifOk;
}
f0002140:          \-> 8532                     mv      a0,a2
f0002142:              8082                     ret

f0002144 <dif_uart_configure>:
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:91

  return bytes_read;
}

dif_result_t dif_uart_configure(const dif_uart_t *uart,
                                dif_uart_config_t config) {
f0002144:              1101                     addi    sp,sp,-32
f0002146:              ce06                     sw      ra,28(sp)
f0002148:              cc22                     sw      s0,24(sp)
f000214a:              ca26                     sw      s1,20(sp)
f000214c:              c84a                     sw      s2,16(sp)
f000214e:              c64e                     sw      s3,12(sp)
f0002150:              448d                     li      s1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:92
  if (uart == NULL) {
f0002152:       /----- cd51                     beqz    a0,f00021ee <dif_uart_configure+0xaa>
f0002154:       |      892e                     mv      s2,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:96
    return kDifBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
f0002156:       |      4194                     lw      a3,0(a1)
f0002158:       +----- cad9                     beqz    a3,f00021ee <dif_uart_configure+0xaa>
f000215a:       |      00492603                 lw      a2,4(s2)
f000215e:       +----- ca41                     beqz    a2,f00021ee <dif_uart_configure+0xaa>
f0002160:       |      842a                     mv      s0,a0
f0002162:       |      0016e537                 lui     a0,0x16e
f0002166:       |      36050513                 addi    a0,a0,864 # 16e360 <_ottf_size+0xee360>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:118
  // 2^4 should be multiplied.
  // If uart baud rate is 1.5Mbps and IO is 24Mhz, NCO is 0x10000, which is over
  // the NCO width, use NCO = 0xffff for this case since the error is tolerable.
  // Refer to #4263
  uint64_t nco =
      ((uint64_t)config.baudrate == 1500000 && config.clk_freq_hz == 24000000)
f000216a:       |      8d35                     xor     a0,a0,a3
f000216c:       |      016e35b7                 lui     a1,0x16e3
f0002170:       |      60058593                 addi    a1,a1,1536 # 16e3600 <_ottf_size+0x1663600>
f0002174:       |      8db1                     xor     a1,a1,a2
f0002176:       |      00b56733                 or      a4,a0,a1
f000217a:       |      6541                     lui     a0,0x10
f000217c:       |      fff50993                 addi    s3,a0,-1 # ffff <_non_volatile_scratch_size+0xafff>
f0002180:       |      4581                     li      a1,0
f0002182:       |      854e                     mv      a0,s3
f0002184:       |  /-- cb01                     beqz    a4,f0002194 <dif_uart_configure+0x50>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:120
          ? 0xffff
          : udiv64_slow((uint64_t)config.baudrate << (nco_width + 4),
f0002186:       |  |   01469513                 slli    a0,a3,0x14
f000218a:       |  |   00c6d593                 srli    a1,a3,0xc
f000218e:       |  |   4681                     li      a3,0
f0002190:       |  |   4701                     li      a4,0
f0002192:       |  |   2079                     jal     f0002220 <udiv64_slow>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:122
                        config.clk_freq_hz, NULL);
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
f0002194:       |  \-> 01357633                 and     a2,a0,s3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:125

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
f0002198:       |      8d31                     xor     a0,a0,a2
f000219a:       |      8d4d                     or      a0,a0,a1
f000219c:       +----- e929                     bnez    a0,f00021ee <dif_uart_configure+0xaa>
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:47
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, 0u);
f000219e:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00021a0:       |      00052823                 sw      zero,16(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:53
  mmio_region_write32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
f00021a4:       |      4008                     lw      a0,0(s0)
f00021a6:       |      458d                     li      a1,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00021a8:       |      d10c                     sw      a1,32(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:55
  mmio_region_write32(uart->base_addr, UART_OVRD_REG_OFFSET, 0u);
f00021aa:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00021ac:       |      02052423                 sw      zero,40(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:56
  mmio_region_write32(uart->base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
f00021b0:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00021b2:       |      02052823                 sw      zero,48(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:57
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f00021b6:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00021b8:       |      00052223                 sw      zero,4(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:58
  mmio_region_write32(uart->base_addr, UART_INTR_STATE_REG_OFFSET,
f00021bc:       |      4008                     lw      a0,0(s0)
f00021be:       |      55fd                     li      a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00021c0:       |      c10c                     sw      a1,0(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifToggleEnabled) {
f00021c2:       |      00892683                 lw      a3,8(s2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f00021c6:       |      01061513                 slli    a0,a2,0x10
f00021ca:       |      4605                     li      a2,1
f00021cc:       |      04300593                 li      a1,67
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
f00021d0:       |  /-- 00c68363                 beq     a3,a2,f00021d6 <dif_uart_configure+0x92>
f00021d4:       |  |   458d                     li      a1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
f00021d6:       |  \-> 00c92603                 lw      a2,12(s2)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  if (config.parity_enable == kDifToggleEnabled) {
f00021da:       |      8d4d                     or      a0,a0,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
  if (config.parity == kDifUartParityOdd) {
f00021dc:       |  /-- e219                     bnez    a2,f00021e2 <dif_uart_configure+0x9e>
f00021de:       |  |   08056513                 ori     a0,a0,128
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:143
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, reg);
f00021e2:       |  \-> 400c                     lw      a1,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00021e4:       |      c988                     sw      a0,16(a1)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:146

  // Disable interrupts.
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f00021e6:       |      4008                     lw      a0,0(s0)
f00021e8:       |      4481                     li      s1,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00021ea:       |      00052223                 sw      zero,4(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:149

  return kDifOk;
}
f00021ee:       \----> 8526                     mv      a0,s1
f00021f0:              49b2                     lw      s3,12(sp)
f00021f2:              4942                     lw      s2,16(sp)
f00021f4:              44d2                     lw      s1,20(sp)
f00021f6:              4462                     lw      s0,24(sp)
f00021f8:              40f2                     lw      ra,28(sp)
f00021fa:              6105                     addi    sp,sp,32
f00021fc:              8082                     ret

f00021fe <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:256

  return kDifOk;
}

dif_result_t dif_uart_byte_send_polled(const dif_uart_t *uart, uint8_t byte) {
  if (uart == NULL) {
f00021fe:       /----- cd19                     beqz    a0,f000221c <dif_uart_byte_send_polled+0x1e>
f0002200:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0002202:       |  /-> 4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f0002204:       |  |   8a85                     andi    a3,a3,1
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:261
    return kDifBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
f0002206:       |  \-- fef5                     bnez    a3,f0002202 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0002208:       |      4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f000220a:       |      8a85                     andi    a3,a3,1
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:68
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
f000220c:       |  /-- e299                     bnez    a3,f0002212 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f000220e:       |  |   ce4c                     sw      a1,28(a2)
f0002210:       |  |   4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0002212:       |  >-> 4a48                     lw      a0,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0002214:       |  |   8921                     andi    a0,a0,8
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:268

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
f0002216:       |  \-- dd75                     beqz    a0,f0002212 <dif_uart_byte_send_polled+0x14>
f0002218:       |      4501                     li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:272
  }

  return kDifOk;
}
f000221a:       |      8082                     ret
f000221c:       \----> 450d                     li      a0,3
f000221e:              8082                     ret

f0002220 <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:9

#include "sw/device/lib/base/math.h"

#include <stddef.h>

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
f0002220:                 1141                  addi    sp,sp,-16
f0002222:                 c622                  sw      s0,12(sp)
f0002224:                 c426                  sw      s1,8(sp)
f0002226:                 c24a                  sw      s2,4(sp)
f0002228:                 4881                  li      a7,0
f000222a:                 4801                  li      a6,0
f000222c:                 4e01                  li      t3,0
f000222e:                 4e81                  li      t4,0
f0002230:                 03f00793              li      a5,63
f0002234:                 42fd                  li      t0,31
f0002236:                 00159313              slli    t1,a1,0x1
f000223a:                 53fd                  li      t2,-1
/proc/self/cwd/sw/device/lib/base/math.c:23
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
f000223c:       /-------> fe078493              addi    s1,a5,-32
f0002240:       |     /-- 0004c563              bltz    s1,f000224a <udiv64_slow+0x2a>
f0002244:       |     |   0095df33              srl     t5,a1,s1
f0002248:       |  /--|-- a809                  j       f000225a <udiv64_slow+0x3a>
f000224a:       |  |  \-> 00f554b3              srl     s1,a0,a5
f000224e:       |  |      40f28433              sub     s0,t0,a5
f0002252:       |  |      00831433              sll     s0,t1,s0
f0002256:       |  |      0084ef33              or      t5,s1,s0
f000225a:       |  \----> 01fe5493              srli    s1,t3,0x1f
f000225e:       |         001e9413              slli    s0,t4,0x1
f0002262:       |         00946eb3              or      t4,s0,s1
f0002266:       |         001e1493              slli    s1,t3,0x1
f000226a:       |         001f7413              andi    s0,t5,1
f000226e:       |         00946f33              or      t5,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:29

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
f0002272:       |  /----- 00de8563              beq     t4,a3,f000227c <udiv64_slow+0x5c>
f0002276:       |  |      00debe33              sltu    t3,t4,a3
f000227a:       |  |  /-- a019                  j       f0002280 <udiv64_slow+0x60>
f000227c:       |  \--|-> 00cf3e33              sltu    t3,t5,a2
f0002280:       |     \-> 001e4f93              xori    t6,t3,1
f0002284:       |         4901                  li      s2,0
f0002286:       |         4481                  li      s1,0
f0002288:       |     /-- 000e1463              bnez    t3,f0002290 <udiv64_slow+0x70>
f000228c:       |     |   8936                  mv      s2,a3
f000228e:       |     |   84b2                  mv      s1,a2
f0002290:       |     \-> 01f8de13              srli    t3,a7,0x1f
f0002294:       |         00181413              slli    s0,a6,0x1
f0002298:       |         01c46833              or      a6,s0,t3
f000229c:       |         0886                  slli    a7,a7,0x1
f000229e:       |         409f0e33              sub     t3,t5,s1
f00022a2:       |         009f34b3              sltu    s1,t5,s1
f00022a6:       |         412e8433              sub     s0,t4,s2
f00022aa:       |         40940eb3              sub     t4,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f00022ae:       |         17fd                  addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/base/math.c:29
    if (rem >= b) {
f00022b0:       |         01f8e8b3              or      a7,a7,t6
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f00022b4:       \-------- f87794e3              bne     a5,t2,f000223c <udiv64_slow+0x1c>
/proc/self/cwd/sw/device/lib/base/math.c:35
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
f00022b8:             /-- c709                  beqz    a4,f00022c2 <udiv64_slow+0xa2>
/proc/self/cwd/sw/device/lib/base/math.c:36
    *rem_out = rem;
f00022ba:             |   01c72023              sw      t3,0(a4)
f00022be:             |   01d72223              sw      t4,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:38
  }
  return quot;
f00022c2:             \-> 8546                  mv      a0,a7
f00022c4:                 85c2                  mv      a1,a6
f00022c6:                 4912                  lw      s2,4(sp)
f00022c8:                 44a2                  lw      s1,8(sp)
f00022ca:                 4432                  lw      s0,12(sp)
f00022cc:                 0141                  addi    sp,sp,16
f00022ce:                 8082                  ret

f00022d0 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
f00022d0:                       00153693                seqz    a3,a0
f00022d4:                       0015b713                seqz    a4,a1
f00022d8:                       8ed9                    or      a3,a3,a4
f00022da:       /-------------- eab5                    bnez    a3,f000234e <memcpy+0x7e>
f00022dc:       |               4711                    li      a4,4
f00022de:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00022e0:       |        /----- 00e66c63                bltu    a2,a4,f00022f8 <memcpy+0x28>
f00022e4:       |        |      00a5c6b3                xor     a3,a1,a0
f00022e8:       |        |      0036f793                andi    a5,a3,3
f00022ec:       |        |      8832                    mv      a6,a2
f00022ee:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
f00022f0:       |        |  /-- eb91                    bnez    a5,f0002304 <memcpy+0x34>
f00022f2:       |        |  |   40a006b3                neg     a3,a0
f00022f6:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f00022f8:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f00022fc:       |           |   9b71                    andi    a4,a4,-4
f00022fe:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f0002302:       |  /--------|-- c6b9                    beqz    a3,f0002350 <memcpy+0x80>
f0002304:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f0002306:       |  |        /-> 00f58733                add     a4,a1,a5
f000230a:       |  |        |   00070883                lb      a7,0(a4)
f000230e:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f0002312:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f0002314:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f0002318:       |  |        \-- fef697e3                bne     a3,a5,f0002306 <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f000231c:       |  |  /-------- 0106fb63                bgeu    a3,a6,f0002332 <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002320:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0002324:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
 */
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002326:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f000232a:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f000232c:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f000232e:       |  |  |  +----- ff06e9e3                bltu    a3,a6,f0002320 <memcpy+0x50>
f0002332:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,f000234e <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
f0002336:       |  |  |  |      8e15                    sub     a2,a2,a3
f0002338:       |  |  |  |      00d50733                add     a4,a0,a3
f000233c:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
f000233e:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
f0002342:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
f0002346:       |  |  |  |  |   167d                    addi    a2,a2,-1
f0002348:       |  |  |  |  |   0705                    addi    a4,a4,1
f000234a:       |  |  |  |  |   0585                    addi    a1,a1,1
f000234c:       |  |  |  |  \-- fa6d                    bnez    a2,f000233e <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
f000234e:       \--|--|--|----> 8082                    ret
f0002350:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002352:             |  \----- fd06e7e3                bltu    a3,a6,f0002320 <memcpy+0x50>
f0002356:             \-------- bff1                    j       f0002332 <memcpy+0x62>

f0002358 <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
f0002358:                 4691                  li      a3,4
f000235a:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f000235c:             /-- 00d66663              bltu    a2,a3,f0002368 <memset+0x10>
f0002360:             |   40a006b3              neg     a3,a0
f0002364:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002368:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f000236c:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f0002370:          /----- cb01                  beqz    a4,f0002380 <memset+0x28>
f0002372:          |      87aa                  mv      a5,a0
f0002374:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
f0002376:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
f000237a:          |  |   16fd                  addi    a3,a3,-1
f000237c:          |  |   0785                  addi    a5,a5,1
f000237e:          |  \-- fee5                  bnez    a3,f0002376 <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002380:       /--\----X 02080263              beqz    a6,f00023a4 <memset+0x4c>
f0002384:       |         00e808b3              add     a7,a6,a4
f0002388:       |         0ff5f813              andi    a6,a1,255
f000238c:       |         010107b7              lui     a5,0x1010
f0002390:       |         10178793              addi    a5,a5,257 # 1010101 <_ottf_size+0xf90101>
f0002394:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002398:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f000239c:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f000239e:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f00023a0:       |     \-- ff176ce3              bltu    a4,a7,f0002398 <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
f00023a4:       \--/----X 00c77a63              bgeu    a4,a2,f00023b8 <memset+0x60>
f00023a8:          |      8e19                  sub     a2,a2,a4
f00023aa:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
f00023ae:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
f00023b2:          |  |   167d                  addi    a2,a2,-1
f00023b4:          |  |   0685                  addi    a3,a3,1
f00023b6:          |  \-- fe65                  bnez    a2,f00023ae <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
f00023b8:          \----> 8082                  ret

f00023ba <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
f00023ba:                             4691                      li      a3,4
f00023bc:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00023be:                         /-- 00d66663                  bltu    a2,a3,f00023ca <memchr+0x10>
f00023c2:                         |   40a006b3                  neg     a3,a0
f00023c6:                         |   0036fe93                  andi    t4,a3,3
f00023ca:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f00023ce:                      /----- 000e8b63                  beqz    t4,f00023e4 <memchr+0x2a>
f00023d2:                      |      85aa                      mv      a1,a0
f00023d4:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
f00023d6:                      |  /-> 0005c683                  lbu     a3,0(a1)
f00023da:       /--------------|--|-- 09c68563                  beq     a3,t3,f0002464 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
f00023de:       |              |  |   17fd                      addi    a5,a5,-1
f00023e0:       |              |  |   0585                      addi    a1,a1,1
f00023e2:       |              |  \-- fbf5                      bnez    a5,f00023d6 <memchr+0x1c>
f00023e4:       |              \----> 41d605b3                  sub     a1,a2,t4
f00023e8:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00023ea:       |  /----------------- c9a9                      beqz    a1,f000243c <memchr+0x82>
f00023ec:       |  |                  01d58833                  add     a6,a1,t4
f00023f0:       |  |                  010105b7                  lui     a1,0x1010
f00023f4:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
f00023f8:       |  |                  02be02b3                  mul     t0,t3,a1
f00023fc:       |  |                  0ff00893                  li      a7,255
f0002400:       |  |                  65c1                      lui     a1,0x10
f0002402:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f0002406:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f000240a:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f000240e:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
f0002410:       |  |              |   0056c7b3                  xor     a5,a3,t0
f0002414:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f0002418:       |  |              |   0ff6f713                  andi    a4,a3,255
f000241c:       +--|--------------|-- 05170463                  beq     a4,a7,f0002464 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f0002420:       |  |              |   0076f733                  and     a4,a3,t2
f0002424:       |  |  /-----------|-- 02770b63                  beq     a4,t2,f000245a <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f0002428:       |  |  |           |   0066f6b3                  and     a3,a3,t1
f000242c:       |  |  |  /--------|-- 02668963                  beq     a3,t1,f000245e <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f0002430:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
f0002434:       |  |  |  |  /-----|-- c69d                      beqz    a3,f0002462 <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002436:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
f0002438:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,f000240a <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
f000243c:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,f0002456 <memchr+0x9c>
f0002440:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
f0002444:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
f0002448:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
f000244c:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,f0002464 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
f0002450:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
f0002452:       |     |  |  |  |  |   0585                      addi    a1,a1,1
f0002454:       |     |  |  |  |  \-- fa75                      bnez    a2,f0002448 <memchr+0x8e>
f0002456:       |     |  |  |  \----> 4581                      li      a1,0
f0002458:       +-----|--|--|-------- a031                      j       f0002464 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
f000245a:       |     \--|--|-------> 0585                      addi    a1,a1,1
f000245c:       +--------|--|-------- a021                      j       f0002464 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
f000245e:       |        \--|-------> 0589                      addi    a1,a1,2
f0002460:       +-----------|-------- a011                      j       f0002464 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
f0002462:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f0002464:       \-------------------> 852e                      mv      a0,a1
f0002466:                             8082                      ret

f0002468 <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
f0002468:                          4691                 li      a3,4
f000246a:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f000246c:                      /-- 00d66663             bltu    a2,a3,f0002478 <memrchr+0x10>
f0002470:                      |   40a006b3             neg     a3,a0
f0002474:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002478:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f000247c:                          9af1                 andi    a3,a3,-4
f000247e:                          006687b3             add     a5,a3,t1
f0002482:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
f0002484:                      /-- 00f66363             bltu    a2,a5,f000248a <memrchr+0x22>
f0002488:                      |   86be                 mv      a3,a5
f000248a:                      \-> 0ff5f393             andi    t2,a1,255
f000248e:                   /--/-X 00c7fd63             bgeu    a5,a2,f00024a8 <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
f0002492:                   |  |   00c50733             add     a4,a0,a2
f0002496:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
f000249a:                   |  |   fff60713             addi    a4,a2,-1
f000249e:                   |  |   863a                 mv      a2,a4
f00024a0:                   |  \-- fe7597e3             bne     a1,t2,f000248e <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f00024a4:                   |      953a                 add     a0,a0,a4
f00024a6:                   |      8082                 ret
f00024a8:                   \----> 010105b7             lui     a1,0x1010
f00024ac:                          10158593             addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
f00024b0:                          02b382b3             mul     t0,t2,a1
f00024b4:                          00ff0837             lui     a6,0xff0
f00024b8:                          65c1                 lui     a1,0x10
f00024ba:                          f0058793             addi    a5,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f00024be:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
f00024c2:       /--------------/-X 04d37563             bgeu    t1,a3,f000250c <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00024c6:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f00024ca:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
f00024ce:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f00024d2:       |              |   01875593             srli    a1,a4,0x18
f00024d6:       |  /-----------|-- cd95                 beqz    a1,f0002512 <memrchr+0xaa>
f00024d8:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f00024dc:       |  |           |   010775b3             and     a1,a4,a6
f00024e0:       |  |  /--------|-- 03058c63             beq     a1,a6,f0002518 <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f00024e4:       |  |  |        |   00f775b3             and     a1,a4,a5
f00024e8:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,f000251e <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f00024ec:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
f00024f0:       |  |  |  |     |   16f1                 addi    a3,a3,-4
f00024f2:       |  |  |  |     \-- fd1598e3             bne     a1,a7,f00024c2 <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f00024f6:       |  |  |  |         9536                 add     a0,a0,a3
f00024f8:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
f00024fa:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
f00024fe:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
f0002502:       |  |  |  |     |   fff68613             addi    a2,a3,-1
f0002506:       |  |  |  |     |   86b2                 mv      a3,a2
f0002508:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,f0002524 <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
f000250c:       \--|--|--|--|--\-X f6fd                 bnez    a3,f00024fa <memrchr+0x92>
f000250e:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002510:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
f0002512:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002516:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
f0002518:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f000251c:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
f000251e:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002522:                   |      8082                 ret
f0002524:                   \----> 9532                 add     a0,a0,a2
f0002526:                          8082                 ret

f0002528 <xTaskCreate>:
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:734
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
f0002528:                    7179                       addi    sp,sp,-48
f000252a:                    d606                       sw      ra,44(sp)
f000252c:                    d422                       sw      s0,40(sp)
f000252e:                    d226                       sw      s1,36(sp)
f0002530:                    d04a                       sw      s2,32(sp)
f0002532:                    ce4e                       sw      s3,28(sp)
f0002534:                    cc52                       sw      s4,24(sp)
f0002536:                    ca56                       sw      s5,20(sp)
f0002538:                    c85a                       sw      s6,16(sp)
f000253a:                    c65e                       sw      s7,12(sp)
f000253c:                    c462                       sw      s8,8(sp)
f000253e:                    c266                       sw      s9,4(sp)
f0002540:                    8abe                       mv      s5,a5
f0002542:                    8b3a                       mv      s6,a4
f0002544:                    89b6                       mv      s3,a3
f0002546:                    84ae                       mv      s1,a1
f0002548:                    8a2a                       mv      s4,a0
/proc/self/cwd/external/freertos/tasks.c:768
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
f000254a:                    00261913           slli    s2,a2,0x2
f000254e:                    854a                       mv      a0,s2
f0002550:                    2575                       jal     f0002bfc <pvPortMalloc>
f0002552:                    5bfd                       li      s7,-1
/proc/self/cwd/external/freertos/tasks.c:770

                if( pxStack != NULL )
f0002554:       /----------- 1c050463           beqz    a0,f000271c <xTaskCreate+0x1f4>
f0002558:       |            842a                       mv      s0,a0
/proc/self/cwd/external/freertos/tasks.c:773
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
f000255a:       |            04c00513           li      a0,76
f000255e:       |            2d79                       jal     f0002bfc <pvPortMalloc>
/proc/self/cwd/external/freertos/tasks.c:775

                    if( pxNewTCB != NULL )
f0002560:       |  /-------- c121                       beqz    a0,f00025a0 <xTaskCreate+0x78>
f0002562:       |  |         8c2a                       mv      s8,a0
/proc/self/cwd/external/freertos/tasks.c:778
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
f0002564:       |  |         d900                       sw      s0,48(a0)
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:860
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
f0002566:       |  |         00890533           add     a0,s2,s0
f000256a:       |  |         1571                       addi    a0,a0,-4
/proc/self/cwd/external/freertos/tasks.c:888
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
f000256c:       |  |  /----- cc8d                       beqz    s1,f00025a6 <xTaskCreate+0x7e>
f000256e:       |  |  |      4601                       li      a2,0
/proc/self/cwd/external/freertos/tasks.c:890
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
f0002570:       |  |  |      034c0593           addi    a1,s8,52
/proc/self/cwd/external/freertos/tasks.c:892
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
f0002574:       |  |  |  /-> 00c486b3           add     a3,s1,a2
f0002578:       |  |  |  |   00068703           lb      a4,0(a3)
f000257c:       |  |  |  |   00c587b3           add     a5,a1,a2
f0002580:       |  |  |  |   00e78023           sb      a4,0(a5)
/proc/self/cwd/external/freertos/tasks.c:897

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
f0002584:       |  |  |  |   0006c683           lbu     a3,0(a3)
f0002588:       |  |  |  |   0016b693           seqz    a3,a3
f000258c:       |  |  |  |   ff160713           addi    a4,a2,-15
f0002590:       |  |  |  |   0605                       addi    a2,a2,1
f0002592:       |  |  |  |   00173713           seqz    a4,a4
f0002596:       |  |  |  |   8ed9                       or      a3,a3,a4
f0002598:       |  |  |  \-- def1                       beqz    a3,f0002574 <xTaskCreate+0x4c>
/proc/self/cwd/external/freertos/tasks.c:909
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
f000259a:       |  |  |      040c01a3           sb      zero,67(s8)
f000259e:       |  |  |  /-- a031                       j       f00025aa <xTaskCreate+0x82>
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:784
                        vPortFreeStack( pxStack );
f00025a0:       |  \--|--|-> 8522                       mv      a0,s0
f00025a2:       |     |  |   2df1                       jal     f0002c7e <vPortFree>
f00025a4:       +-----|--|-- aaa5                       j       f000271c <xTaskCreate+0x1f4>
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:915
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
f00025a6:       |     \--|-> 020c0a23           sb      zero,52(s8)
f00025aa:       |        \-> 4591                       li      a1,4
f00025ac:       |            ff057493           andi    s1,a0,-16
/proc/self/cwd/external/freertos/tasks.c:921
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
f00025b0:       |        /-- 00bb6363           bltu    s6,a1,f00025b6 <xTaskCreate+0x8e>
f00025b4:       |        |   4b11                       li      s6,4
/proc/self/cwd/external/freertos/tasks.c:930
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
f00025b6:       |        \-> 036c2623           sw      s6,44(s8)
/proc/self/cwd/external/freertos/tasks.c:938
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
f00025ba:       |            004c0913           addi    s2,s8,4
f00025be:       |            854a                       mv      a0,s2
f00025c0:       |            2d11                       jal     f0002bd4 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:939
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
f00025c2:       |            018c0513           addi    a0,s8,24
f00025c6:       |            2539                       jal     f0002bd4 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:943

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
f00025c8:       |            018c2823           sw      s8,16(s8)
f00025cc:       |            4515                       li      a0,5
/proc/self/cwd/external/freertos/tasks.c:946

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
f00025ce:       |            41650533           sub     a0,a0,s6
f00025d2:       |            00ac2c23           sw      a0,24(s8)
/proc/self/cwd/external/freertos/tasks.c:947
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
f00025d6:       |            038c2223           sw      s8,36(s8)
/proc/self/cwd/external/freertos/tasks.c:951

    #if ( portCRITICAL_NESTING_IN_TCB == 1 )
        {
            pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
f00025da:       |            040c2223           sw      zero,68(s8)
/proc/self/cwd/external/freertos/tasks.c:1002
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
f00025de:       |            040c0423           sb      zero,72(s8)
/proc/self/cwd/external/freertos/tasks.c:1052
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
f00025e2:       |            8526                       mv      a0,s1
f00025e4:       |            85d2                       mv      a1,s4
f00025e6:       |            864e                       mv      a2,s3
f00025e8:       |            fb5fd0ef           jal     ra,f000059c <pxPortInitialiseStack>
f00025ec:       |            00ac2023           sw      a0,0(s8)
/proc/self/cwd/external/freertos/tasks.c:1058
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
f00025f0:       |        /-- 000a8463           beqz    s5,f00025f8 <xTaskCreate+0xd0>
/proc/self/cwd/external/freertos/tasks.c:1062
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
f00025f4:       |        |   018aa023           sw      s8,0(s5)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskEnterCritical( void )
    {
        portDISABLE_INTERRUPTS();
f00025f8:       |        \-> 30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347

        if( xSchedulerRunning != pdFALSE )
f00025fc:       |            f0000a97           auipc   s5,0xf0000
f0002600:       |            a98a8a93           addi    s5,s5,-1384 # e0002094 <xSchedulerRunning>
f0002604:       |            000aa503           lw      a0,0(s5)
f0002608:       |            f0000b17           auipc   s6,0xf0000
f000260c:       |            a78b0b13           addi    s6,s6,-1416 # e0002080 <pxCurrentTCB>
f0002610:       |        /-- c901                       beqz    a0,f0002620 <xTaskCreate+0xf8>
/proc/self/cwd/external/freertos/tasks.c:4349
        {
            ( pxCurrentTCB->uxCriticalNesting )++;
f0002612:       |        |   000b2503           lw      a0,0(s6)
f0002616:       |        |   416c                       lw      a1,68(a0)
f0002618:       |        |   0585                       addi    a1,a1,1
f000261a:       |        |   c16c                       sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
             * function so  assert() if it is being called from an interrupt
             * context.  Only API functions that end in "FromISR" can be used in an
             * interrupt.  Only assert if the critical nesting count is 1 to
             * protect against recursive calls if the assert function also uses a
             * critical section. */
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f000261c:       |        |   000b2503           lw      a0,0(s6)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1077
        uxCurrentNumberOfTasks++;
f0002620:       |        \-> f0000517           auipc   a0,0xf0000
f0002624:       |            a7050513           addi    a0,a0,-1424 # e0002090 <uxCurrentNumberOfTasks>
f0002628:       |            410c                       lw      a1,0(a0)
f000262a:       |            0585                       addi    a1,a1,1
f000262c:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1079
        if( pxCurrentTCB == NULL )
f000262e:       |            000b2583           lw      a1,0(s6)
f0002632:       |            f0000c97           auipc   s9,0xf0000
f0002636:       |            aaac8c93           addi    s9,s9,-1366 # e00020dc <pxReadyTasksLists>
f000263a:       |        /-- cd91                       beqz    a1,f0002656 <xTaskCreate+0x12e>
/proc/self/cwd/external/freertos/tasks.c:1102
            if( xSchedulerRunning == pdFALSE )
f000263c:       |        |   000aa503           lw      a0,0(s5)
f0002640:       |     /--|-- e149                       bnez    a0,f00026c2 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1104
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
f0002642:       |     |  |   000b2503           lw      a0,0(s6)
f0002646:       |     |  |   5548                       lw      a0,44(a0)
f0002648:       |     |  |   02cc2583           lw      a1,44(s8)
f000264c:       |     +--|-- 06a5eb63           bltu    a1,a0,f00026c2 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1106
                    pxCurrentTCB = pxNewTCB;
f0002650:       |     |  |   018b2023           sw      s8,0(s6)
f0002654:       |     +--|-- a0bd                       j       f00026c2 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1083
            pxCurrentTCB = pxNewTCB;
f0002656:       |     |  \-> 018b2023           sw      s8,0(s6)
/proc/self/cwd/external/freertos/tasks.c:1085
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
f000265a:       |     |      4108                       lw      a0,0(a0)
f000265c:       |     |      4585                       li      a1,1
f000265e:       |     +----- 06b51263           bne     a0,a1,f00026c2 <xTaskCreate+0x19a>
f0002662:       |     |      4401                       li      s0,0
f0002664:       |     |      06400493           li      s1,100
prvInitialiseTaskLists():
/proc/self/cwd/external/freertos/tasks.c:3665
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
f0002668:       |     |  /-> 01940533           add     a0,s0,s9
f000266c:       |     |  |   2b91                       jal     f0002bc0 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3663
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
f000266e:       |     |  |   0451                       addi    s0,s0,20
f0002670:       |     |  \-- fe941ce3           bne     s0,s1,f0002668 <xTaskCreate+0x140>
/proc/self/cwd/external/freertos/tasks.c:3668
    vListInitialise( &xDelayedTaskList1 );
f0002674:       |     |      f0000997           auipc   s3,0xf0000
f0002678:       |     |      b0898993           addi    s3,s3,-1272 # e000217c <xDelayedTaskList1>
f000267c:       |     |      854e                       mv      a0,s3
f000267e:       |     |      2389                       jal     f0002bc0 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3669
    vListInitialise( &xDelayedTaskList2 );
f0002680:       |     |      f0000a17           auipc   s4,0xf0000
f0002684:       |     |      b10a0a13           addi    s4,s4,-1264 # e0002190 <xDelayedTaskList2>
f0002688:       |     |      8552                       mv      a0,s4
f000268a:       |     |      2b1d                       jal     f0002bc0 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3670
    vListInitialise( &xPendingReadyList );
f000268c:       |     |      f0000517           auipc   a0,0xf0000
f0002690:       |     |      adc50513           addi    a0,a0,-1316 # e0002168 <xPendingReadyList>
f0002694:       |     |      2335                       jal     f0002bc0 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3674
            vListInitialise( &xTasksWaitingTermination );
f0002696:       |     |      f0000517           auipc   a0,0xf0000
f000269a:       |     |      aaa50513           addi    a0,a0,-1366 # e0002140 <xTasksWaitingTermination>
f000269e:       |     |      230d                       jal     f0002bc0 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3680
            vListInitialise( &xSuspendedTaskList );
f00026a0:       |     |      f0000517           auipc   a0,0xf0000
f00026a4:       |     |      ab450513           addi    a0,a0,-1356 # e0002154 <xSuspendedTaskList>
f00026a8:       |     |      2b21                       jal     f0002bc0 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3686
    pxDelayedTaskList = &xDelayedTaskList1;
f00026aa:       |     |      f0000517           auipc   a0,0xf0000
f00026ae:       |     |      9ee50513           addi    a0,a0,-1554 # e0002098 <pxDelayedTaskList>
f00026b2:       |     |      01352023           sw      s3,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3687
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
f00026b6:       |     |      f0000517           auipc   a0,0xf0000
f00026ba:       |     |      9e650513           addi    a0,a0,-1562 # e000209c <pxOverflowDelayedTaskList>
f00026be:       |     |      01452023           sw      s4,0(a0)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1119
        uxTaskNumber++;
f00026c2:       |     \----> f0000517           auipc   a0,0xf0000
f00026c6:       |            9c650513           addi    a0,a0,-1594 # e0002088 <uxTaskNumber>
f00026ca:       |            410c                       lw      a1,0(a0)
f00026cc:       |            0585                       addi    a1,a1,1
f00026ce:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1129
        prvAddTaskToReadyList( pxNewTCB );
f00026d0:       |            02cc2503           lw      a0,44(s8)
f00026d4:       |            f0000597           auipc   a1,0xf0000
f00026d8:       |            9b058593           addi    a1,a1,-1616 # e0002084 <uxTopReadyPriority>
f00026dc:       |            4190                       lw      a2,0(a1)
f00026de:       |            4b85                       li      s7,1
f00026e0:       |            00ab96b3           sll     a3,s7,a0
f00026e4:       |            8e55                       or      a2,a2,a3
f00026e6:       |            c190                       sw      a2,0(a1)
f00026e8:       |            45d1                       li      a1,20
f00026ea:       |            02b50533           mul     a0,a0,a1
f00026ee:       |            9566                       add     a0,a0,s9
f00026f0:       |            414c                       lw      a1,4(a0)
f00026f2:       |            00bc2423           sw      a1,8(s8)
f00026f6:       |            4590                       lw      a2,8(a1)
f00026f8:       |            00cc2623           sw      a2,12(s8)
f00026fc:       |            4590                       lw      a2,8(a1)
f00026fe:       |            01262223           sw      s2,4(a2)
f0002702:       |            0125a423           sw      s2,8(a1)
f0002706:       |            00ac2a23           sw      a0,20(s8)
f000270a:       |            410c                       lw      a1,0(a0)
f000270c:       |            0585                       addi    a1,a1,1
f000270e:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1133
    taskEXIT_CRITICAL();
f0002710:       |            2025                       jal     f0002738 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:1135
    if( xSchedulerRunning != pdFALSE )
f0002712:       |            000aa503           lw      a0,0(s5)
f0002716:       +----------- c119                       beqz    a0,f000271c <xTaskCreate+0x1f4>
/proc/self/cwd/external/freertos/tasks.c:1139
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
f0002718:       |            000b2503           lw      a0,0(s6)
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:813
        return xReturn;
f000271c:       \----------> 855e                       mv      a0,s7
f000271e:                    4c92                       lw      s9,4(sp)
f0002720:                    4c22                       lw      s8,8(sp)
f0002722:                    4bb2                       lw      s7,12(sp)
f0002724:                    4b42                       lw      s6,16(sp)
f0002726:                    4ad2                       lw      s5,20(sp)
f0002728:                    4a62                       lw      s4,24(sp)
f000272a:                    49f2                       lw      s3,28(sp)
f000272c:                    5902                       lw      s2,32(sp)
f000272e:                    5492                       lw      s1,36(sp)
f0002730:                    5422                       lw      s0,40(sp)
f0002732:                    50b2                       lw      ra,44(sp)
f0002734:                    6145                       addi    sp,sp,48
f0002736:                    8082                       ret

f0002738 <vTaskExitCritical>:
vTaskExitCritical():
/proc/self/cwd/external/freertos/tasks.c:4375

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskExitCritical( void )
    {
        if( xSchedulerRunning != pdFALSE )
f0002738:              f0000517                 auipc   a0,0xf0000
f000273c:              95c50513                 addi    a0,a0,-1700 # e0002094 <xSchedulerRunning>
f0002740:              4108                     lw      a0,0(a0)
f0002742:       /----- cd19                     beqz    a0,f0002760 <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4377
        {
            if( pxCurrentTCB->uxCriticalNesting > 0U )
f0002744:       |      f0000517                 auipc   a0,0xf0000
f0002748:       |      93c50513                 addi    a0,a0,-1732 # e0002080 <pxCurrentTCB>
f000274c:       |      410c                     lw      a1,0(a0)
f000274e:       |      41ec                     lw      a1,68(a1)
f0002750:       +----- c981                     beqz    a1,f0002760 <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4379
            {
                ( pxCurrentTCB->uxCriticalNesting )--;
f0002752:       |      410c                     lw      a1,0(a0)
f0002754:       |      41f0                     lw      a2,68(a1)
f0002756:       |      167d                     addi    a2,a2,-1
f0002758:       |      c1f0                     sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4381

                if( pxCurrentTCB->uxCriticalNesting == 0U )
f000275a:       |      4108                     lw      a0,0(a0)
f000275c:       |      4168                     lw      a0,68(a0)
f000275e:       |  /-- c111                     beqz    a0,f0002762 <vTaskExitCritical+0x2a>
/proc/self/cwd/external/freertos/tasks.c:4399
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
f0002760:       \--|-> 8082                     ret
/proc/self/cwd/external/freertos/tasks.c:4383
                    portENABLE_INTERRUPTS();
f0002762:          \-> 30046073                 csrsi   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4399
    }
f0002766:              8082                     ret

f0002768 <vTaskSwitchContext>:
vTaskSwitchContext():
/proc/self/cwd/external/freertos/tasks.c:3015
{
f0002768:              1141                     addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:3016
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
f000276a:              c606                     sw      ra,12(sp)
f000276c:              c422                     sw      s0,8(sp)
f000276e:              f0000517                 auipc   a0,0xf0000
f0002772:              93250513                 addi    a0,a0,-1742 # e00020a0 <uxSchedulerSuspended>
f0002776:              4108                     lw      a0,0(a0)
f0002778:          /-- c901                     beqz    a0,f0002788 <vTaskSwitchContext+0x20>
/proc/self/cwd/external/freertos/tasks.c:3020
        xYieldPending = pdTRUE;
f000277a:          |   f0000517                 auipc   a0,0xf0000
f000277e:          |   92a50513                 addi    a0,a0,-1750 # e00020a4 <xYieldPending>
f0002782:          |   4585                     li      a1,1
f0002784:          |   c10c                     sw      a1,0(a0)
f0002786:       /--|-- a0d9                     j       f000284c <vTaskSwitchContext+0xe4>
/proc/self/cwd/external/freertos/tasks.c:3024
        xYieldPending = pdFALSE;
f0002788:       |  \-> f0000517                 auipc   a0,0xf0000
f000278c:       |      91c50513                 addi    a0,a0,-1764 # e00020a4 <xYieldPending>
f0002790:       |      00052023                 sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3056
        taskCHECK_FOR_STACK_OVERFLOW();
f0002794:       |      f0000417                 auipc   s0,0xf0000
f0002798:       |      8ec40413                 addi    s0,s0,-1812 # e0002080 <pxCurrentTCB>
f000279c:       |      4008                     lw      a0,0(s0)
f000279e:       |      4108                     lw      a0,0(a0)
f00027a0:       |      400c                     lw      a1,0(s0)
f00027a2:       |      598c                     lw      a1,48(a1)
f00027a4:       |  /-- 00a5e863                 bltu    a1,a0,f00027b4 <vTaskSwitchContext+0x4c>
f00027a8:       |  |   4008                     lw      a0,0(s0)
f00027aa:       |  |   400c                     lw      a1,0(s0)
f00027ac:       |  |   03458593                 addi    a1,a1,52
f00027b0:       |  |   d49fe0ef                 jal     ra,f00014f8 <vApplicationStackOverflowHook>
/proc/self/cwd/external/freertos/tasks.c:3067
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f00027b4:       |  \-> f0000517                 auipc   a0,0xf0000
f00027b8:       |      8d050513                 addi    a0,a0,-1840 # e0002084 <uxTopReadyPriority>
f00027bc:       |      4108                     lw      a0,0(a0)
f00027be:       |      00155593                 srli    a1,a0,0x1
f00027c2:       |      8d4d                     or      a0,a0,a1
f00027c4:       |      00255593                 srli    a1,a0,0x2
f00027c8:       |      8d4d                     or      a0,a0,a1
f00027ca:       |      00455593                 srli    a1,a0,0x4
f00027ce:       |      8d4d                     or      a0,a0,a1
f00027d0:       |      00855593                 srli    a1,a0,0x8
f00027d4:       |      8d4d                     or      a0,a0,a1
f00027d6:       |      01055593                 srli    a1,a0,0x10
f00027da:       |      8d4d                     or      a0,a0,a1
f00027dc:       |      fff54513                 not     a0,a0
f00027e0:       |      00155593                 srli    a1,a0,0x1
f00027e4:       |      55555637                 lui     a2,0x55555
f00027e8:       |      55560613                 addi    a2,a2,1365 # 55555555 <_ottf_size+0x554d5555>
f00027ec:       |      8df1                     and     a1,a1,a2
f00027ee:       |      8d0d                     sub     a0,a0,a1
f00027f0:       |      333335b7                 lui     a1,0x33333
f00027f4:       |      33358593                 addi    a1,a1,819 # 33333333 <_ottf_size+0x332b3333>
f00027f8:       |      00b57633                 and     a2,a0,a1
f00027fc:       |      8109                     srli    a0,a0,0x2
f00027fe:       |      8d6d                     and     a0,a0,a1
f0002800:       |      9532                     add     a0,a0,a2
f0002802:       |      00455593                 srli    a1,a0,0x4
f0002806:       |      952e                     add     a0,a0,a1
f0002808:       |      0f0f15b7                 lui     a1,0xf0f1
f000280c:       |      f0f58593                 addi    a1,a1,-241 # f0f0f0f <_ottf_size+0xf070f0f>
f0002810:       |      8d6d                     and     a0,a0,a1
f0002812:       |      010105b7                 lui     a1,0x1010
f0002816:       |      10158593                 addi    a1,a1,257 # 1010101 <_ottf_size+0xf90101>
f000281a:       |      02b50533                 mul     a0,a0,a1
f000281e:       |      8161                     srli    a0,a0,0x18
f0002820:       |      01f54513                 xori    a0,a0,31
f0002824:       |      45d1                     li      a1,20
f0002826:       |      02b50533                 mul     a0,a0,a1
f000282a:       |      f0000597                 auipc   a1,0xf0000
f000282e:       |      8b258593                 addi    a1,a1,-1870 # e00020dc <pxReadyTasksLists>
f0002832:       |      95aa                     add     a1,a1,a0
f0002834:       |      41c8                     lw      a0,4(a1)
f0002836:       |      4148                     lw      a0,4(a0)
f0002838:       |      00858613                 addi    a2,a1,8
f000283c:       |      c1c8                     sw      a0,4(a1)
f000283e:       |  /-- 00c51563                 bne     a0,a2,f0002848 <vTaskSwitchContext+0xe0>
f0002842:       |  |   4148                     lw      a0,4(a0)
f0002844:       |  |   0591                     addi    a1,a1,4
f0002846:       |  |   c188                     sw      a0,0(a1)
f0002848:       |  \-> 4548                     lw      a0,12(a0)
f000284a:       |      c008                     sw      a0,0(s0)
/proc/self/cwd/external/freertos/tasks.c:3087
}
f000284c:       \----> 4422                     lw      s0,8(sp)
f000284e:              40b2                     lw      ra,12(sp)
f0002850:              0141                     addi    sp,sp,16
f0002852:              8082                     ret

f0002854 <vTaskStartScheduler>:
vTaskStartScheduler():
/proc/self/cwd/external/freertos/tasks.c:1991
{
f0002854:           1141                        addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:2024
            xReturn = xTaskCreate( prvIdleTask,
f0002856:           c606                        sw      ra,12(sp)
f0002858:           00000517            auipc   a0,0x0
f000285c:           06250513            addi    a0,a0,98 # f00028ba <prvIdleTask>
f0002860:           00001597            auipc   a1,0x1
f0002864:           7ec58593            addi    a1,a1,2028 # f000404c <uxTopUsedPriority+0x4>
f0002868:           f0000797            auipc   a5,0xf0000
f000286c:           84078793            addi    a5,a5,-1984 # e00020a8 <xIdleTaskHandle>
f0002870:           10000613            li      a2,256
f0002874:           4681                        li      a3,0
f0002876:           4701                        li      a4,0
f0002878:           3945                        jal     f0002528 <xTaskCreate>
f000287a:           4585                        li      a1,1
/proc/self/cwd/external/freertos/tasks.c:2046
    if( xReturn == pdPASS )
f000287c:       /-- 02b51763            bne     a0,a1,f00028aa <vTaskStartScheduler+0x56>
/proc/self/cwd/external/freertos/tasks.c:2062
        portDISABLE_INTERRUPTS();
f0002880:       |   30047073            csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:2074
        xNextTaskUnblockTime = portMAX_DELAY;
f0002884:       |   f0000517            auipc   a0,0xf0000
f0002888:       |   82850513            addi    a0,a0,-2008 # e00020ac <xNextTaskUnblockTime>
f000288c:       |   567d                        li      a2,-1
f000288e:       |   c110                        sw      a2,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2075
        xSchedulerRunning = pdTRUE;
f0002890:       |   f0000517            auipc   a0,0xf0000
f0002894:       |   80450513            addi    a0,a0,-2044 # e0002094 <xSchedulerRunning>
f0002898:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2076
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
f000289a:       |   f0000517            auipc   a0,0xf0000
f000289e:       |   81650513            addi    a0,a0,-2026 # e00020b0 <xTickCount>
f00028a2:       |   00052023            sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2090
        if( xPortStartScheduler() != pdFALSE )
f00028a6:       |   c8bfe0ef            jal     ra,f0001530 <xPortStartScheduler>
/proc/self/cwd/external/freertos/tasks.c:2114
    ( void ) uxTopUsedPriority;
f00028aa:       \-> 00001517            auipc   a0,0x1
f00028ae:           79e50513            addi    a0,a0,1950 # f0004048 <uxTopUsedPriority>
f00028b2:           4108                        lw      a0,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2115
}
f00028b4:           40b2                        lw      ra,12(sp)
f00028b6:           0141                        addi    sp,sp,16
f00028b8:           8082                        ret

f00028ba <prvIdleTask>:
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3435
{
f00028ba:                 1101                  addi    sp,sp,-32
f00028bc:                 ce06                  sw      ra,28(sp)
f00028be:                 cc22                  sw      s0,24(sp)
f00028c0:                 ca26                  sw      s1,20(sp)
f00028c2:                 c84a                  sw      s2,16(sp)
f00028c4:                 c64e                  sw      s3,12(sp)
f00028c6:                 c452                  sw      s4,8(sp)
f00028c8:                 c256                  sw      s5,4(sp)
f00028ca:                 effff497              auipc   s1,0xeffff
f00028ce:                 7c248493              addi    s1,s1,1986 # e000208c <uxDeletedTasksWaitingCleanUp>
f00028d2:                 effff917              auipc   s2,0xeffff
f00028d6:                 7c290913              addi    s2,s2,1986 # e0002094 <xSchedulerRunning>
f00028da:                 f0000997              auipc   s3,0xf0000
f00028de:                 86698993              addi    s3,s3,-1946 # e0002140 <xTasksWaitingTermination>
f00028e2:                 effffa17              auipc   s4,0xeffff
f00028e6:                 7aea0a13              addi    s4,s4,1966 # e0002090 <uxCurrentNumberOfTasks>
f00028ea:                 effffa97              auipc   s5,0xeffff
f00028ee:                 796a8a93              addi    s5,s5,1942 # e0002080 <pxCurrentTCB>
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3701
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
f00028f2:       /-------> 4088                  lw      a0,0(s1)
f00028f4:       |  /----- c129                  beqz    a0,f0002936 <prvIdleTask+0x7c>
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f00028f6:       |  |      30047073              csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f00028fa:       |  |      00092503              lw      a0,0(s2)
f00028fe:       |  |  /-- c901                  beqz    a0,f000290e <prvIdleTask+0x54>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f0002900:       |  |  |   000aa503              lw      a0,0(s5)
f0002904:       |  |  |   416c                  lw      a1,68(a0)
f0002906:       |  |  |   0585                  addi    a1,a1,1
f0002908:       |  |  |   c16c                  sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f000290a:       |  |  |   000aa503              lw      a0,0(s5)
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3705
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f000290e:       |  |  \-> 00c9a503              lw      a0,12(s3)
f0002912:       |  |      4540                  lw      s0,12(a0)
/proc/self/cwd/external/freertos/tasks.c:3706
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
f0002914:       |  |      00440513              addi    a0,s0,4
f0002918:       |  |      24c9                  jal     f0002bda <uxListRemove>
/proc/self/cwd/external/freertos/tasks.c:3707
                    --uxCurrentNumberOfTasks;
f000291a:       |  |      000a2503              lw      a0,0(s4)
f000291e:       |  |      157d                  addi    a0,a0,-1
f0002920:       |  |      00aa2023              sw      a0,0(s4)
/proc/self/cwd/external/freertos/tasks.c:3708
                    --uxDeletedTasksWaitingCleanUp;
f0002924:       |  |      4088                  lw      a0,0(s1)
f0002926:       |  |      157d                  addi    a0,a0,-1
f0002928:       |  |      c088                  sw      a0,0(s1)
/proc/self/cwd/external/freertos/tasks.c:3710
                taskEXIT_CRITICAL();
f000292a:       |  |      3539                  jal     f0002738 <vTaskExitCritical>
prvDeleteTCB():
/proc/self/cwd/external/freertos/tasks.c:3964
                vPortFreeStack( pxTCB->pxStack );
f000292c:       |  |      5808                  lw      a0,48(s0)
f000292e:       |  |      2e81                  jal     f0002c7e <vPortFree>
/proc/self/cwd/external/freertos/tasks.c:3965
                vPortFree( pxTCB );
f0002930:       |  |      8522                  mv      a0,s0
f0002932:       |  |      26b1                  jal     f0002c7e <vPortFree>
f0002934:       +--|----- bf7d                  j       f00028f2 <prvIdleTask+0x38>
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3459
                taskYIELD();
f0002936:       |  \----> 00000073              ecall
f000293a:       \-------- bf65                  j       f00028f2 <prvIdleTask+0x38>

f000293c <vTaskSuspendAll>:
vTaskSuspendAll():
/proc/self/cwd/external/freertos/tasks.c:2142
    ++uxSchedulerSuspended;
f000293c:       effff517                auipc   a0,0xeffff
f0002940:       76450513                addi    a0,a0,1892 # e00020a0 <uxSchedulerSuspended>
f0002944:       410c                    lw      a1,0(a0)
f0002946:       0585                    addi    a1,a1,1
f0002948:       c10c                    sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2147
}
f000294a:       8082                    ret

f000294c <xTaskResumeAll>:
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2214
{
f000294c:                    1141                       addi    sp,sp,-16
f000294e:                    c606                       sw      ra,12(sp)
f0002950:                    c422                       sw      s0,8(sp)
f0002952:                    c226                       sw      s1,4(sp)
f0002954:                    c04a                       sw      s2,0(sp)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f0002956:                    30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f000295a:                    effff517           auipc   a0,0xeffff
f000295e:                    73a50513           addi    a0,a0,1850 # e0002094 <xSchedulerRunning>
f0002962:                    4108                       lw      a0,0(a0)
f0002964:                /-- c911                       beqz    a0,f0002978 <xTaskResumeAll+0x2c>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f0002966:                |   effff517           auipc   a0,0xeffff
f000296a:                |   71a50513           addi    a0,a0,1818 # e0002080 <pxCurrentTCB>
f000296e:                |   410c                       lw      a1,0(a0)
f0002970:                |   41f0                       lw      a2,68(a1)
f0002972:                |   0605                       addi    a2,a2,1
f0002974:                |   c1f0                       sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0002976:                |   4108                       lw      a0,0(a0)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2229
        --uxSchedulerSuspended;
f0002978:                \-> effff517           auipc   a0,0xeffff
f000297c:                    72850513           addi    a0,a0,1832 # e00020a0 <uxSchedulerSuspended>
f0002980:                    410c                       lw      a1,0(a0)
f0002982:                    15fd                       addi    a1,a1,-1
f0002984:                    c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2231
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f0002986:                    4108                       lw      a0,0(a0)
f0002988:       /----------- ed65                       bnez    a0,f0002a80 <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2233
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
f000298a:       |            effff517           auipc   a0,0xeffff
f000298e:       |            70650513           addi    a0,a0,1798 # e0002090 <uxCurrentNumberOfTasks>
f0002992:       |            4108                       lw      a0,0(a0)
f0002994:       +----------- c575                       beqz    a0,f0002a80 <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f0002996:       |            effff517           auipc   a0,0xeffff
f000299a:       |            7d250513           addi    a0,a0,2002 # e0002168 <xPendingReadyList>
f000299e:       |            410c                       lw      a1,0(a0)
f00029a0:       |            effff917           auipc   s2,0xeffff
f00029a4:       |            70490913           addi    s2,s2,1796 # e00020a4 <xYieldPending>
f00029a8:       |  /-------- cddd                       beqz    a1,f0002a66 <xTaskResumeAll+0x11a>
f00029aa:       |  |         4885                       li      a7,1
f00029ac:       |  |         effff617           auipc   a2,0xeffff
f00029b0:       |  |         6d860613           addi    a2,a2,1752 # e0002084 <uxTopReadyPriority>
f00029b4:       |  |         4851                       li      a6,20
f00029b6:       |  |         effff297           auipc   t0,0xeffff
f00029ba:       |  |         72628293           addi    t0,t0,1830 # e00020dc <pxReadyTasksLists>
f00029be:       |  |         effff317           auipc   t1,0xeffff
f00029c2:       |  |         6c230313           addi    t1,t1,1730 # e0002080 <pxCurrentTCB>
/proc/self/cwd/external/freertos/tasks.c:2239
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f00029c6:       |  |  /----> 454c                       lw      a1,12(a0)
f00029c8:       |  |  |      45c0                       lw      s0,12(a1)
/proc/self/cwd/external/freertos/tasks.c:2240
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f00029ca:       |  |  |      500c                       lw      a1,32(s0)
f00029cc:       |  |  |      4c58                       lw      a4,28(s0)
f00029ce:       |  |  |      5404                       lw      s1,40(s0)
f00029d0:       |  |  |      c70c                       sw      a1,8(a4)
f00029d2:       |  |  |      5014                       lw      a3,32(s0)
f00029d4:       |  |  |      c2d8                       sw      a4,4(a3)
f00029d6:       |  |  |      40cc                       lw      a1,4(s1)
f00029d8:       |  |  |      01840713           addi    a4,s0,24
f00029dc:       |  |  |  /-- 00e59363           bne     a1,a4,f00029e2 <xTaskResumeAll+0x96>
f00029e0:       |  |  |  |   c0d4                       sw      a3,4(s1)
f00029e2:       |  |  |  \-> 02042423           sw      zero,40(s0)
f00029e6:       |  |  |      408c                       lw      a1,0(s1)
f00029e8:       |  |  |      15fd                       addi    a1,a1,-1
f00029ea:       |  |  |      c08c                       sw      a1,0(s1)
/proc/self/cwd/external/freertos/tasks.c:2242
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f00029ec:       |  |  |      444c                       lw      a1,12(s0)
f00029ee:       |  |  |      4418                       lw      a4,8(s0)
f00029f0:       |  |  |      4854                       lw      a3,20(s0)
f00029f2:       |  |  |      c70c                       sw      a1,8(a4)
f00029f4:       |  |  |      444c                       lw      a1,12(s0)
f00029f6:       |  |  |      c1d8                       sw      a4,4(a1)
f00029f8:       |  |  |      42d8                       lw      a4,4(a3)
f00029fa:       |  |  |      00440493           addi    s1,s0,4
f00029fe:       |  |  |  /-- 00971363           bne     a4,s1,f0002a04 <xTaskResumeAll+0xb8>
f0002a02:       |  |  |  |   c2cc                       sw      a1,4(a3)
f0002a04:       |  |  |  \-> 428c                       lw      a1,0(a3)
f0002a06:       |  |  |      15fd                       addi    a1,a1,-1
f0002a08:       |  |  |      c28c                       sw      a1,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2243
                    prvAddTaskToReadyList( pxTCB );
f0002a0a:       |  |  |      544c                       lw      a1,44(s0)
f0002a0c:       |  |  |      4214                       lw      a3,0(a2)
f0002a0e:       |  |  |      00b89733           sll     a4,a7,a1
f0002a12:       |  |  |      8ed9                       or      a3,a3,a4
f0002a14:       |  |  |      c214                       sw      a3,0(a2)
f0002a16:       |  |  |      030586b3           mul     a3,a1,a6
f0002a1a:       |  |  |      9696                       add     a3,a3,t0
f0002a1c:       |  |  |      42d8                       lw      a4,4(a3)
f0002a1e:       |  |  |      c418                       sw      a4,8(s0)
f0002a20:       |  |  |      471c                       lw      a5,8(a4)
f0002a22:       |  |  |      c45c                       sw      a5,12(s0)
f0002a24:       |  |  |      471c                       lw      a5,8(a4)
f0002a26:       |  |  |      c3c4                       sw      s1,4(a5)
f0002a28:       |  |  |      c704                       sw      s1,8(a4)
f0002a2a:       |  |  |      c854                       sw      a3,20(s0)
f0002a2c:       |  |  |      4298                       lw      a4,0(a3)
f0002a2e:       |  |  |      0705                       addi    a4,a4,1
f0002a30:       |  |  |      c298                       sw      a4,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2247
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
f0002a32:       |  |  |      00032683           lw      a3,0(t1)
f0002a36:       |  |  |      56d4                       lw      a3,44(a3)
f0002a38:       |  |  |  /-- 00d5e463           bltu    a1,a3,f0002a40 <xTaskResumeAll+0xf4>
/proc/self/cwd/external/freertos/tasks.c:2249
                        xYieldPending = pdTRUE;
f0002a3c:       |  |  |  |   01192023           sw      a7,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f0002a40:       |  |  |  \-> 410c                       lw      a1,0(a0)
f0002a42:       |  |  \----- f1d1                       bnez    a1,f00029c6 <xTaskResumeAll+0x7a>
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002a44:       |  |         effff517           auipc   a0,0xeffff
f0002a48:       |  |         65450513           addi    a0,a0,1620 # e0002098 <pxDelayedTaskList>
f0002a4c:       |  |         410c                       lw      a1,0(a0)
f0002a4e:       |  |         418c                       lw      a1,0(a1)
f0002a50:       |  |  /----- c589                       beqz    a1,f0002a5a <xTaskResumeAll+0x10e>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f0002a52:       |  |  |      4108                       lw      a0,0(a0)
f0002a54:       |  |  |      4548                       lw      a0,12(a0)
f0002a56:       |  |  |      4108                       lw      a0,0(a0)
f0002a58:       |  |  |  /-- a011                       j       f0002a5c <xTaskResumeAll+0x110>
f0002a5a:       |  |  \--|-> 557d                       li      a0,-1
f0002a5c:       |  |     \-> effff597           auipc   a1,0xeffff
f0002a60:       |  |         65058593           addi    a1,a1,1616 # e00020ac <xNextTaskUnblockTime>
f0002a64:       |  |         c188                       sw      a0,0(a1)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2273
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
f0002a66:       |  \-------> effff417           auipc   s0,0xeffff
f0002a6a:       |            64e40413           addi    s0,s0,1614 # e00020b4 <xPendedTicks>
f0002a6e:       |            4004                       lw      s1,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2275
                    if( xPendedCounts > ( TickType_t ) 0U )
f0002a70:       |     /----- c491                       beqz    s1,f0002a7c <xTaskResumeAll+0x130>
/proc/self/cwd/external/freertos/tasks.c:2279
                            if( xTaskIncrementTick() != pdFALSE )
f0002a72:       |     |  /-> 2005                       jal     f0002a92 <xTaskIncrementTick>
/proc/self/cwd/external/freertos/tasks.c:2288
                            --xPendedCounts;
f0002a74:       |     |  |   14fd                       addi    s1,s1,-1
/proc/self/cwd/external/freertos/tasks.c:2289
                        } while( xPendedCounts > ( TickType_t ) 0U );
f0002a76:       |     |  \-- fcf5                       bnez    s1,f0002a72 <xTaskResumeAll+0x126>
/proc/self/cwd/external/freertos/tasks.c:2291
                        xPendedTicks = 0;
f0002a78:       |     |      00042023           sw      zero,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2299
                if( xYieldPending != pdFALSE )
f0002a7c:       |     \----> 00092503           lw      a0,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2319
    taskEXIT_CRITICAL();
f0002a80:       \----------> cb9ff0ef           jal     ra,f0002738 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:2321
    return xAlreadyYielded;
f0002a84:                    4501                       li      a0,0
f0002a86:                    4902                       lw      s2,0(sp)
f0002a88:                    4492                       lw      s1,4(sp)
f0002a8a:                    4422                       lw      s0,8(sp)
f0002a8c:                    40b2                       lw      ra,12(sp)
f0002a8e:                    0141                       addi    sp,sp,16
f0002a90:                    8082                       ret

f0002a92 <xTaskIncrementTick>:
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2740
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f0002a92:                          effff517             auipc   a0,0xeffff
f0002a96:                          60e50513             addi    a0,a0,1550 # e00020a0 <uxSchedulerSuspended>
f0002a9a:                          4108                 lw      a0,0(a0)
f0002a9c:                      /-- c909                 beqz    a0,f0002aae <xTaskIncrementTick+0x1c>
/proc/self/cwd/external/freertos/tasks.c:2887
        ++xPendedTicks;
f0002a9e:                      |   effff517             auipc   a0,0xeffff
f0002aa2:                      |   61650513             addi    a0,a0,1558 # e00020b4 <xPendedTicks>
f0002aa6:                      |   410c                 lw      a1,0(a0)
f0002aa8:                      |   0585                 addi    a1,a1,1
f0002aaa:                      |   c10c                 sw      a1,0(a0)
f0002aac:       /--------------|-- aa01                 j       f0002bbc <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2744
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
f0002aae:       |              \-> effff517             auipc   a0,0xeffff
f0002ab2:       |                  60250513             addi    a0,a0,1538 # e00020b0 <xTickCount>
f0002ab6:       |                  410c                 lw      a1,0(a0)
f0002ab8:       |                  00158393             addi    t2,a1,1
/proc/self/cwd/external/freertos/tasks.c:2748
        xTickCount = xConstTickCount;
f0002abc:       |                  00752023             sw      t2,0(a0)
f0002ac0:       |                  effffe17             auipc   t3,0xeffff
f0002ac4:       |                  5d8e0e13             addi    t3,t3,1496 # e0002098 <pxDelayedTaskList>
f0002ac8:       |                  effff817             auipc   a6,0xeffff
f0002acc:       |                  5e480813             addi    a6,a6,1508 # e00020ac <xNextTaskUnblockTime>
/proc/self/cwd/external/freertos/tasks.c:2750
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
f0002ad0:       |        /-------- 02b3ff63             bgeu    t2,a1,f0002b0e <xTaskIncrementTick+0x7c>
/proc/self/cwd/external/freertos/tasks.c:2752
            taskSWITCH_DELAYED_LISTS();
f0002ad4:       |        |         000e2503             lw      a0,0(t3)
f0002ad8:       |        |         effff597             auipc   a1,0xeffff
f0002adc:       |        |         5c458593             addi    a1,a1,1476 # e000209c <pxOverflowDelayedTaskList>
f0002ae0:       |        |         4194                 lw      a3,0(a1)
f0002ae2:       |        |         00de2023             sw      a3,0(t3)
f0002ae6:       |        |         c188                 sw      a0,0(a1)
f0002ae8:       |        |         effff517             auipc   a0,0xeffff
f0002aec:       |        |         5d050513             addi    a0,a0,1488 # e00020b8 <xNumOfOverflows>
f0002af0:       |        |         410c                 lw      a1,0(a0)
f0002af2:       |        |         0585                 addi    a1,a1,1
f0002af4:       |        |         c10c                 sw      a1,0(a0)
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002af6:       |        |         000e2503             lw      a0,0(t3)
f0002afa:       |        |         4108                 lw      a0,0(a0)
f0002afc:       |        |  /----- c511                 beqz    a0,f0002b08 <xTaskIncrementTick+0x76>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f0002afe:       |        |  |      000e2503             lw      a0,0(t3)
f0002b02:       |        |  |      4548                 lw      a0,12(a0)
f0002b04:       |        |  |      4108                 lw      a0,0(a0)
f0002b06:       |        |  |  /-- a011                 j       f0002b0a <xTaskIncrementTick+0x78>
f0002b08:       |        |  \--|-> 557d                 li      a0,-1
f0002b0a:       |        |     \-> 00a82023             sw      a0,0(a6)
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2763
        if( xConstTickCount >= xNextTaskUnblockTime )
f0002b0e:       |        \-------> 00082503             lw      a0,0(a6)
f0002b12:       +----------------- 0aa3e563             bltu    t2,a0,f0002bbc <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002b16:       |                  000e2503             lw      a0,0(t3)
f0002b1a:       |                  4108                 lw      a0,0(a0)
f0002b1c:       |  /-------------- cd49                 beqz    a0,f0002bb6 <xTaskIncrementTick+0x124>
f0002b1e:       |  |               4885                 li      a7,1
f0002b20:       |  |               effffe97             auipc   t4,0xeffff
f0002b24:       |  |               564e8e93             addi    t4,t4,1380 # e0002084 <uxTopReadyPriority>
f0002b28:       |  |               42d1                 li      t0,20
f0002b2a:       |  |               effff317             auipc   t1,0xeffff
f0002b2e:       |  |               5b230313             addi    t1,t1,1458 # e00020dc <pxReadyTasksLists>
/proc/self/cwd/external/freertos/tasks.c:2783
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0002b32:       |  |  /----------> 000e2503             lw      a0,0(t3)
f0002b36:       |  |  |            4548                 lw      a0,12(a0)
f0002b38:       |  |  |            4554                 lw      a3,12(a0)
/proc/self/cwd/external/freertos/tasks.c:2784
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
f0002b3a:       |  |  |            42c8                 lw      a0,4(a3)
/proc/self/cwd/external/freertos/tasks.c:2786
                    if( xConstTickCount < xItemValue )
f0002b3c:       |  |  |  /-------- 06a3ee63             bltu    t2,a0,f0002bb8 <xTaskIncrementTick+0x126>
/proc/self/cwd/external/freertos/tasks.c:2802
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f0002b40:       |  |  |  |         46cc                 lw      a1,12(a3)
f0002b42:       |  |  |  |         469c                 lw      a5,8(a3)
f0002b44:       |  |  |  |         4ac8                 lw      a0,20(a3)
f0002b46:       |  |  |  |         c78c                 sw      a1,8(a5)
f0002b48:       |  |  |  |         46cc                 lw      a1,12(a3)
f0002b4a:       |  |  |  |         c1dc                 sw      a5,4(a1)
f0002b4c:       |  |  |  |         4150                 lw      a2,4(a0)
f0002b4e:       |  |  |  |         00468793             addi    a5,a3,4
f0002b52:       |  |  |  |     /-- 00f61363             bne     a2,a5,f0002b58 <xTaskIncrementTick+0xc6>
f0002b56:       |  |  |  |     |   c14c                 sw      a1,4(a0)
f0002b58:       |  |  |  |     \-> 410c                 lw      a1,0(a0)
f0002b5a:       |  |  |  |         15fd                 addi    a1,a1,-1
f0002b5c:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f0002b5e:       |  |  |  |         5688                 lw      a0,40(a3)
f0002b60:       |  |  |  |  /----- c10d                 beqz    a0,f0002b82 <xTaskIncrementTick+0xf0>
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f0002b62:       |  |  |  |  |      528c                 lw      a1,32(a3)
f0002b64:       |  |  |  |  |      4ed0                 lw      a2,28(a3)
f0002b66:       |  |  |  |  |      c60c                 sw      a1,8(a2)
f0002b68:       |  |  |  |  |      528c                 lw      a1,32(a3)
f0002b6a:       |  |  |  |  |      c1d0                 sw      a2,4(a1)
f0002b6c:       |  |  |  |  |      4150                 lw      a2,4(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f0002b6e:       |  |  |  |  |      01868713             addi    a4,a3,24
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f0002b72:       |  |  |  |  |  /-- 00e61363             bne     a2,a4,f0002b78 <xTaskIncrementTick+0xe6>
f0002b76:       |  |  |  |  |  |   c14c                 sw      a1,4(a0)
f0002b78:       |  |  |  |  |  \-> 0206a423             sw      zero,40(a3)
f0002b7c:       |  |  |  |  |      410c                 lw      a1,0(a0)
f0002b7e:       |  |  |  |  |      15fd                 addi    a1,a1,-1
f0002b80:       |  |  |  |  |      c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2817
                    prvAddTaskToReadyList( pxTCB );
f0002b82:       |  |  |  |  \----> 56c8                 lw      a0,44(a3)
f0002b84:       |  |  |  |         000ea583             lw      a1,0(t4)
f0002b88:       |  |  |  |         00a89633             sll     a2,a7,a0
f0002b8c:       |  |  |  |         8dd1                 or      a1,a1,a2
f0002b8e:       |  |  |  |         00bea023             sw      a1,0(t4)
f0002b92:       |  |  |  |         02550533             mul     a0,a0,t0
f0002b96:       |  |  |  |         951a                 add     a0,a0,t1
f0002b98:       |  |  |  |         414c                 lw      a1,4(a0)
f0002b9a:       |  |  |  |         c68c                 sw      a1,8(a3)
f0002b9c:       |  |  |  |         4590                 lw      a2,8(a1)
f0002b9e:       |  |  |  |         c6d0                 sw      a2,12(a3)
f0002ba0:       |  |  |  |         4590                 lw      a2,8(a1)
f0002ba2:       |  |  |  |         c25c                 sw      a5,4(a2)
f0002ba4:       |  |  |  |         c59c                 sw      a5,8(a1)
f0002ba6:       |  |  |  |         cac8                 sw      a0,20(a3)
f0002ba8:       |  |  |  |         410c                 lw      a1,0(a0)
f0002baa:       |  |  |  |         0585                 addi    a1,a1,1
f0002bac:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002bae:       |  |  |  |         000e2503             lw      a0,0(t3)
f0002bb2:       |  |  |  |         4108                 lw      a0,0(a0)
f0002bb4:       |  |  \--|-------- fd3d                 bnez    a0,f0002b32 <xTaskIncrementTick+0xa0>
f0002bb6:       |  \-----|-------> 557d                 li      a0,-1
f0002bb8:       |        \-------> 00a82023             sw      a0,0(a6)
/proc/self/cwd/external/freertos/tasks.c:2898
    return xSwitchRequired;
f0002bbc:       \----------------> 4501                 li      a0,0
f0002bbe:                          8082                 ret

f0002bc0 <vListInitialise>:
vListInitialise():
/proc/self/cwd/external/freertos/list.c:55
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0002bc0:       00850593                addi    a1,a0,8
f0002bc4:       c14c                    sw      a1,4(a0)
f0002bc6:       567d                    li      a2,-1
/proc/self/cwd/external/freertos/list.c:59

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
f0002bc8:       c510                    sw      a2,8(a0)
/proc/self/cwd/external/freertos/list.c:63

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0002bca:       c54c                    sw      a1,12(a0)
/proc/self/cwd/external/freertos/list.c:64
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0002bcc:       c90c                    sw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:66

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
f0002bce:       00052023                sw      zero,0(a0)
/proc/self/cwd/external/freertos/list.c:72

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
f0002bd2:       8082                    ret

f0002bd4 <vListInitialiseItem>:
vListInitialiseItem():
/proc/self/cwd/external/freertos/list.c:78
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
f0002bd4:       00052823                sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:84

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
f0002bd8:       8082                    ret

f0002bda <uxListRemove>:
uxListRemove():
/proc/self/cwd/external/freertos/list.c:194
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0002bda:           4510                        lw      a2,8(a0)
f0002bdc:           4154                        lw      a3,4(a0)
/proc/self/cwd/external/freertos/list.c:192
    List_t * const pxList = pxItemToRemove->pxContainer;
f0002bde:           490c                        lw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:194
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0002be0:           c690                        sw      a2,8(a3)
/proc/self/cwd/external/freertos/list.c:195
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
f0002be2:           4510                        lw      a2,8(a0)
f0002be4:           c254                        sw      a3,4(a2)
/proc/self/cwd/external/freertos/list.c:201

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
f0002be6:           41d4                        lw      a3,4(a1)
f0002be8:       /-- 00a69363            bne     a3,a0,f0002bee <uxListRemove+0x14>
/proc/self/cwd/external/freertos/list.c:203
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
f0002bec:       |   c1d0                        sw      a2,4(a1)
/proc/self/cwd/external/freertos/list.c:210
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
f0002bee:       \-> 00052823            sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:211
    ( pxList->uxNumberOfItems )--;
f0002bf2:           4188                        lw      a0,0(a1)
f0002bf4:           157d                        addi    a0,a0,-1
f0002bf6:           c188                        sw      a0,0(a1)
/proc/self/cwd/external/freertos/list.c:213

    return pxList->uxNumberOfItems;
f0002bf8:           4188                        lw      a0,0(a1)
f0002bfa:           8082                        ret

f0002bfc <pvPortMalloc>:
pvPortMalloc():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:72
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
f0002bfc:                 1141                  addi    sp,sp,-16
f0002bfe:                 c606                  sw      ra,12(sp)
f0002c00:                 c422                  sw      s0,8(sp)
f0002c02:                 c226                  sw      s1,4(sp)
f0002c04:                 c04a                  sw      s2,0(sp)
f0002c06:                 842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:79
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
f0002c08:                 9941                  andi    a0,a0,-16
f0002c0a:                 0541                  addi    a0,a0,16
f0002c0c:                 00f47593              andi    a1,s0,15
f0002c10:          /----- 00a46363              bltu    s0,a0,f0002c16 <pvPortMalloc+0x1a>
f0002c14:          |      4501                  li      a0,0
f0002c16:          \--/-X c191                  beqz    a1,f0002c1a <pvPortMalloc+0x1e>
f0002c18:             |   842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:94
                }
            }
        }
    #endif

    vTaskSuspendAll();
f0002c1a:             \-> 330d                  jal     f000293c <vTaskSuspendAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:96
    {
        if( pucAlignedHeap == NULL )
f0002c1c:                 effff517              auipc   a0,0xeffff
f0002c20:                 4a050513              addi    a0,a0,1184 # e00020bc <pvPortMalloc.pucAlignedHeap>
f0002c24:                 4104                  lw      s1,0(a0)
f0002c26:             /-- c099                  beqz    s1,f0002c2c <pvPortMalloc+0x30>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
f0002c28:          /--|-- e819                  bnez    s0,f0002c3e <pvPortMalloc+0x42>
f0002c2a:       /--|--|-- a081                  j       f0002c6a <pvPortMalloc+0x6e>
f0002c2c:       |  |  \-> effff597              auipc   a1,0xeffff
f0002c30:       |  |      57858593              addi    a1,a1,1400 # e00021a4 <ucHeap>
f0002c34:       |  |      05c1                  addi    a1,a1,16
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:99
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
f0002c36:       |  |      ff05f493              andi    s1,a1,-16
f0002c3a:       |  |      c104                  sw      s1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
        if( ( xWantedSize > 0 ) && /* valid size */
f0002c3c:       +--|----- c41d                  beqz    s0,f0002c6a <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:104
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
f0002c3e:       |  \----> effff517              auipc   a0,0xeffff
f0002c42:       |         48250513              addi    a0,a0,1154 # e00020c0 <xNextFreeByte>
f0002c46:       |         00052903              lw      s2,0(a0)
f0002c4a:       |         008905b3              add     a1,s2,s0
f0002c4e:       |         0045d613              srli    a2,a1,0x4
f0002c52:       |         7ff63613              sltiu   a2,a2,2047
f0002c56:       |         00b936b3              sltu    a3,s2,a1
f0002c5a:       |         8e75                  and     a2,a2,a3
f0002c5c:       +-------- c619                  beqz    a2,f0002c6a <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:110
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
            xNextFreeByte += xWantedSize;
f0002c5e:       |         c10c                  sw      a1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
f0002c60:       |         31f5                  jal     f000294c <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:119

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
f0002c62:       |     /-- c489                  beqz    s1,f0002c6c <pvPortMalloc+0x70>
f0002c64:       |     |   01248533              add     a0,s1,s2
f0002c68:       |  /--|-- a029                  j       f0002c72 <pvPortMalloc+0x76>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
    ( void ) xTaskResumeAll();
f0002c6a:       \--|--|-> 31cd                  jal     f000294c <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:122
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
f0002c6c:          |  \-> 855fe0ef              jal     ra,f00014c0 <vApplicationMallocFailedHook>
f0002c70:          |      4501                  li      a0,0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:127
            }
        }
    #endif

    return pvReturn;
f0002c72:          \----> 4902                  lw      s2,0(sp)
f0002c74:                 4492                  lw      s1,4(sp)
f0002c76:                 4422                  lw      s0,8(sp)
f0002c78:                 40b2                  lw      ra,12(sp)
f0002c7a:                 0141                  addi    sp,sp,16
f0002c7c:                 8082                  ret

f0002c7e <vPortFree>:
vPortFree():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:140
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
f0002c7e:       8082                    ret

f0002c80 <manufacturer_pre_test_hook>:
manufacturer_pre_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:14
// The default test hooks do nothing, but exist as the OTTF expects some hooks
// to exist. Additionally, they are weak symbols so they may be overridden by
// other custom test hooks.

OT_WEAK
bool manufacturer_pre_test_hook(void) { return true; }
f0002c80:       4505                    li      a0,1
f0002c82:       8082                    ret

f0002c84 <manufacturer_post_test_hook>:
manufacturer_post_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:17

OT_WEAK
bool manufacturer_post_test_hook(void) { return true; }
f0002c84:       4505                    li      a0,1
f0002c86:       8082                    ret
