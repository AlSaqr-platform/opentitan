
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest_prog_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest_prog_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xf0000480

Program Header:
    LOAD off    0x00000000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00000000 memsz 0x00001fc4 flags rw-
    LOAD off    0x00001000 vaddr 0xf0000000 paddr 0xf0000000 align 2**12
         filesz 0x00003ec0 memsz 0x00003ec0 flags rwx
    LOAD off    0x00004fc4 vaddr 0xe0001fc4 paddr 0xf0003ec0 align 2**12
         filesz 0x000000a4 memsz 0x000001e0 flags rw-
    LOAD off    0x000001a4 vaddr 0xe00021a4 paddr 0xf0003f64 align 2**12
         filesz 0x00000000 memsz 0x00008000 flags rw-
    LOAD off    0x00000000 vaddr 0xf0039000 paddr 0xf0039000 align 2**12
         filesz 0x00000000 memsz 0x00007000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name                    Size      VMA       LMA       File off  Algn  Flags
  0 .manifest               00000400  f0000000  f0000000  00001000  2**3  CONTENTS, ALLOC, LOAD, DATA
  1 .vectors                00000080  f0000400  f0000400  00001400  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .crt                    000000c6  f0000480  f0000480  00001480  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array             00000000  f0000548  f0000548  00005068  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .text                   00002654  f0000548  f0000548  00001548  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .shutdown               00000000  f0002b9c  f0002b9c  00005068  2**2  CONTENTS
  6 .rodata                 00001320  f0002ba0  f0002ba0  00003ba0  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .static_critical        00001fc4  e0000000  e0000000  00001000  2**2  ALLOC
  8 .data                   000000a4  e0001fc4  f0003ec0  00004fc4  2**2  CONTENTS, ALLOC, LOAD, DATA
  9 .bss                    0000013c  e0002068  f0003f64  00005068  2**2  ALLOC
 10 .freertos.heap          00008000  e00021a4  f0003f64  000051a4  2**2  ALLOC
 11 .non_volatile_scratch   00005000  f003b000  f003b000  00006000  2**11  ALLOC
 12 .non_volatile_counter_0 00000800  f003a800  f003a800  00006000  2**11  ALLOC
 13 .non_volatile_counter_1 00000800  f003a000  f003a000  00006000  2**11  ALLOC
 14 .non_volatile_counter_2 00000800  f0039800  f0039800  00006000  2**11  ALLOC
 15 .non_volatile_counter_3 00000800  f0039000  f0039000  00006000  2**11  ALLOC
 16 .logs.fields            00000258  00010000  00010000  00005068  2**2  CONTENTS, READONLY
 17 .riscv.attributes       00000026  00000000  00000000  000052c0  2**0  CONTENTS, READONLY
 18 .debug_info             0000bf4d  00000000  00000000  000052e6  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev           00002b7e  00000000  00000000  00011233  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges          00000088  00000000  00000000  00013db1  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line             00008c43  00000000  00000000  00013e39  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc              00007643  00000000  00000000  0001ca7c  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges           00000b50  00000000  00000000  000240bf  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str              00004400  00000000  00000000  00024c0f  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame            000011f0  00000000  00000000  00029010  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
f0000000 l    d  .manifest      00000000 .manifest
f0000400 l    d  .vectors       00000000 .vectors
f0000480 l    d  .crt   00000000 .crt
f0000548 l    d  .init_array    00000000 .init_array
f0000548 l    d  .text  00000000 .text
f0002b9c l    d  .shutdown      00000000 .shutdown
f0002ba0 l    d  .rodata        00000000 .rodata
e0000000 l    d  .static_critical       00000000 .static_critical
e0001fc4 l    d  .data  00000000 .data
e0002068 l    d  .bss   00000000 .bss
e00021a4 l    d  .freertos.heap 00000000 .freertos.heap
f003b000 l    d  .non_volatile_scratch  00000000 .non_volatile_scratch
f003a800 l    d  .non_volatile_counter_0        00000000 .non_volatile_counter_0
f003a000 l    d  .non_volatile_counter_1        00000000 .non_volatile_counter_1
f0039800 l    d  .non_volatile_counter_2        00000000 .non_volatile_counter_2
f0039000 l    d  .non_volatile_counter_3        00000000 .non_volatile_counter_3
00010000 l    d  .logs.fields   00000000 .logs.fields
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    df *ABS*  00000000 manifest_def.c
f0000000 l     O .manifest      00000380 kManifest_
00000000 l       .debug_str     00000000 
00001acd l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00001afa l       .debug_str     00000000 
00001ca5 l       .debug_str     00000000 
00001c9c l       .debug_str     00000000 
00001b05 l       .debug_str     00000000 
00001bb3 l       .debug_str     00000000 
00001be2 l       .debug_str     00000000 
00001bea l       .debug_str     00000000 
00001bfe l       .debug_str     00000000 
00000510 l       .debug_str     00000000 
00001c09 l       .debug_str     00000000 
00001c17 l       .debug_str     00000000 
00001c25 l       .debug_str     00000000 
00001c36 l       .debug_str     00000000 
00001c47 l       .debug_str     00000000 
00001c6c l       .debug_str     00000000 
00001c7c l       .debug_str     00000000 
00001c87 l       .debug_str     00000000 
00001c90 l       .debug_str     00000000 
00001b24 l       .debug_str     00000000 
00001b0f l       .debug_str     00000000 
00002112 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00001bc5 l       .debug_str     00000000 
00001baa l       .debug_str     00000000 
00001b3b l       .debug_str     00000000 
00001b53 l       .debug_str     00000000 
00001b73 l       .debug_str     00000000 
00001b87 l       .debug_str     00000000 
00001b99 l       .debug_str     00000000 
00001b5d l       .debug_str     00000000 
00001b49 l       .debug_str     00000000 
000005f6 l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
00001c55 l       .debug_str     00000000 
00001c40 l       .debug_str     00000000 
00001cb0 l       .debug_str     00000000 
00000560 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_start.o
f0000400 l       .vectors       00000000 
f0000400 l       .vectors       00000000 
f0000480 l       .crt   00000000 
f0000480 l       .crt   00000000 
f00004e4 l       .crt   00000000 init_array_loop_end
f00004d8 l       .crt   00000000 init_array_loop
f00004d8 l       .crt   00000000 
f00004e4 l       .crt   00000000 
00003f37 l       .debug_info    00000000 
00000e01 l       .debug_abbrev  00000000 
f0000480 l       .vectors       00000000 
f00004e8 l       .crt   00000000 
000002e0 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 crt.o
f00004e8 l       .crt   00000000 
f00004e8 l       .crt   00000000 
f000050a l       .crt   00000000 
f000050c l       .crt   00000000 
f000050c l       .crt   00000000 
0000447d l       .debug_info    00000000 
00000ef7 l       .debug_abbrev  00000000 
f0000546 l       .crt   00000000 
00000000 l    df *ABS*  00000000 freertos_port.o
f0000548 l       .text  00000000 
f0000548 l       .text  00000000 
f0000598 l       .text  00000000 
f000059c l       .text  00000000 
f000059c l       .text  00000000 
000034c1 l       .debug_info    00000000 
00000abb l       .debug_abbrev  00000000 
f00005c0 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.o
f00005c0 l     F .text  00000026 compute_mepc_on_synchronous_irq
f00005c0 l       .text  00000000 
f00005c0 l       .text  00000000 
f00005e4 l       .text  00000000 
f00005e8 l     F .text  0000001e save_current_sp_to_tcb
f00005e8 l       .text  00000000 
f00005e8 l       .text  00000000 
f0000604 l       .text  00000000 
f0000608 l       .text  00000000 
f0000608 l       .text  00000000 
f000064a l       .text  00000000 
f000064c l       .text  00000000 
f000064e l       .text  00000000 
f0000650 l       .text  00000000 
f0000654 l       .text  00000000 
f0000658 l       .text  00000000 
f0000658 l       .text  00000000 
f00006a0 l       .text  00000000 
f00006a2 l       .text  00000000 
f00006a6 l       .text  00000000 
f00006ac l       .text  00000000 
f00006ac l       .text  00000000 
f00006f4 l       .text  00000000 
f00006f6 l       .text  00000000 
f00006fa l       .text  00000000 
f0000700 l       .text  00000000 
f0000700 l       .text  00000000 
f0000748 l       .text  00000000 
f000074a l       .text  00000000 
f000074e l       .text  00000000 
f0000754 l       .text  00000000 
f0000754 l       .text  00000000 
f000079c l       .text  00000000 
f000079e l       .text  00000000 
f00007a2 l       .text  00000000 
f00007a8 l       .text  00000000 
f00007a8 l       .text  00000000 
0000407c l       .debug_info    00000000 
00000e20 l       .debug_abbrev  00000000 
f0000810 l       .text  00000000 
00000000 l    df *ABS*  00000000 flash_hmac_smoketest.c
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000812 l       .text  00000000 
f0000812 l       .text  00000000 
f0000812 l       .text  00000000 
f0000818 l       .text  00000000 
f0000818 l       .text  00000000 
f0000818 l       .text  00000000 
f0000822 l       .text  00000000 
f0000824 l       .text  00000000 
f0000826 l       .text  00000000 
f0000826 l       .text  00000000 
f0000830 l       .text  00000000 
00010000 l     O .logs.fields   00000014 test_setup.kLogFields
f0000832 l       .text  00000000 
f0000842 l       .text  00000000 
f0000842 l       .text  00000000 
f0000844 l       .text  00000000 
f000085c l       .text  00000000 
f000085c l       .text  00000000 
f0000862 l       .text  00000000 
f0000866 l       .text  00000000 
f0002d78 l     O .rodata        00000020 kExpectedShaDigest
f0000866 l       .text  00000000 
f00008b2 l     F .text  000000fc run_test
f0000876 l       .text  00000000 
f0000876 l       .text  00000000 
f000087e l       .text  00000000 
e0001fc4 l     O .data  00000020 kHmacKey
f000087e l       .text  00000000 
f0002d98 l     O .rodata        00000020 kExpectedHmacDigest
f0000896 l       .text  00000000 
f0000896 l       .text  00000000 
f000089e l       .text  00000000 
f000089e l       .text  00000000 
f00008a4 l       .text  00000000 
f00008a6 l       .text  00000000 
f00008a8 l       .text  00000000 
f00008b2 l       .text  00000000 
f00008b2 l       .text  00000000 
f00008b2 l       .text  00000000 
f00008b2 l       .text  00000000 
f00008b2 l       .text  00000000 
f00008b4 l       .text  00000000 
f00008be l       .text  00000000 
f00008c0 l       .text  00000000 
f00008c2 l       .text  00000000 
f00008ca l       .text  00000000 
f00008ca l       .text  00000000 
f00008cc l       .text  00000000 
f00008cc l       .text  00000000 
f00008d4 l       .text  00000000 
f00008d6 l       .text  00000000 
f00008d8 l       .text  00000000 
f00008d8 l       .text  00000000 
f00008dc l       .text  00000000 
f00008de l       .text  00000000 
00010028 l     O .logs.fields   00000014 test_start.kLogFields.3
f00008de l       .text  00000000 
f00008e8 l       .text  00000000 
f00008e8 l       .text  00000000 
f00008ea l       .text  00000000 
f00008f0 l       .text  00000000 
f00008f2 l       .text  00000000 
f00008f4 l       .text  00000000 
f00008f4 l       .text  00000000 
f00008f8 l       .text  00000000 
f00008fa l       .text  00000000 
00010014 l     O .logs.fields   00000014 test_start.kLogFields
f00008fa l       .text  00000000 
f0000902 l       .text  00000000 
f0000902 l       .text  00000000 
f000090a l       .text  00000000 
f000090c l       .text  00000000 
f000090c l       .text  00000000 
f0000916 l       .text  00000000 
f0000916 l       .text  00000000 
f000091e l       .text  00000000 
f000091e l       .text  00000000 
f000092e l       .text  00000000 
f0000938 l       .text  00000000 
f0002ce8 l     O .rodata        0000008e kData
f0000938 l       .text  00000000 
f0000948 l       .text  00000000 
f0000948 l       .text  00000000 
f000094c l       .text  00000000 
f000094c l       .text  00000000 
f0000956 l       .text  00000000 
f0000956 l       .text  00000000 
f000095c l       .text  00000000 
f000095e l       .text  00000000 
f000095e l       .text  00000000 
f0000960 l       .text  00000000 
f0000960 l       .text  00000000 
f0000964 l       .text  00000000 
f0000966 l       .text  00000000 
0001003c l     O .logs.fields   00000014 run_hmac.kLogFields
f0000966 l       .text  00000000 
f0000976 l       .text  00000000 
f0000976 l       .text  00000000 
f0000978 l       .text  00000000 
f0000990 l       .text  00000000 
f0000990 l       .text  00000000 
f0000996 l       .text  00000000 
f000099a l       .text  00000000 
f000099a l       .text  00000000 
f00009a0 l       .text  00000000 
f00009a0 l       .text  00000000 
f00009a4 l       .text  00000000 
f00009a6 l       .text  00000000 
f00009ae l       .text  00000000 
f00009ae l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000003c l       .debug_loc     00000000 
00000066 l       .debug_loc     00000000 
0000008c l       .debug_loc     00000000 
000000e9 l       .debug_loc     00000000 
0000011a l       .debug_loc     00000000 
00000182 l       .debug_loc     00000000 
000001f4 l       .debug_loc     00000000 
0000021a l       .debug_loc     00000000 
00000240 l       .debug_loc     00000000 
00000266 l       .debug_loc     00000000 
0000028c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000030 l       .debug_ranges  00000000 
000000c2 l       .debug_str     00000000 
00000112 l       .debug_str     00000000 
00000101 l       .debug_str     00000000 
000000d2 l       .debug_str     00000000 
000000eb l       .debug_str     00000000 
000000fc l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
00000125 l       .debug_str     00000000 
000001bd l       .debug_str     00000000 
000001b2 l       .debug_str     00000000 
0000017a l       .debug_str     00000000 
00000192 l       .debug_str     00000000 
00002b92 l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00000176 l       .debug_str     00000000 
00000130 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
00000152 l       .debug_str     00000000 
00000164 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
000001ca l       .debug_str     00000000 
0000024f l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000b76 l       .debug_str     00000000 
00000b8e l       .debug_str     00000000 
00000224 l       .debug_str     00000000 
00000210 l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
000001f7 l       .debug_str     00000000 
00000266 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
000002a3 l       .debug_str     00000000 
00000293 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
000002b5 l       .debug_str     00000000 
000002be l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
000002d2 l       .debug_str     00000000 
000002d9 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002ee l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000318 l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
0000100c l       .debug_str     00000000 
00000340 l       .debug_str     00000000 
00000355 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
00000380 l       .debug_str     00000000 
00000391 l       .debug_str     00000000 
000003a3 l       .debug_str     00000000 
000003c3 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
000003cb l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
00000403 l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
00000408 l       .debug_str     00000000 
000003ff l       .debug_str     00000000 
00000413 l       .debug_str     00000000 
00000566 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00000420 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
00000443 l       .debug_str     00000000 
0000045a l       .debug_str     00000000 
00000570 l       .debug_str     00000000 
00002112 l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
00000579 l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
00000018 l       .debug_ranges  00000000 
0000046a l       .debug_str     00000000 
00000479 l       .debug_str     00000000 
00000482 l       .debug_str     00000000 
0000049b l       .debug_str     00000000 
000004b6 l       .debug_str     00000000 
000004d2 l       .debug_str     00000000 
000004f3 l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
0000052e l       .debug_str     00000000 
0000053f l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
f00008b2 l       .text  00000000 
f00009ae l       .text  00000000 
00000000 l    df *ABS*  00000000 hmac_testutils.c
f00009ae l       .text  00000000 
f00009ae l       .text  00000000 
f00009ae l       .text  00000000 
f00009b0 l       .text  00000000 
f00009bc l       .text  00000000 
f00009c0 l       .text  00000000 
f00009c0 l       .text  00000000 
f00009c4 l       .text  00000000 
f00009c4 l       .text  00000000 
f00009cc l       .text  00000000 
f00009ce l       .text  00000000 
f00009ce l       .text  00000000 
f00009d0 l       .text  00000000 
f00009d0 l       .text  00000000 
f00009d4 l       .text  00000000 
f00009d6 l       .text  00000000 
00010050 l     O .logs.fields   00000014 hmac_testutils_check_message_length.kLogFields
f00009d6 l       .text  00000000 
f00009e6 l       .text  00000000 
f00009e6 l       .text  00000000 
f00009e8 l       .text  00000000 
f00009e8 l       .text  00000000 
f0000a00 l       .text  00000000 
f0000a00 l       .text  00000000 
f0000a06 l       .text  00000000 
f0000a0a l       .text  00000000 
f0000a0a l       .text  00000000 
f0000a0c l       .text  00000000 
f0000a0e l       .text  00000000 
f0000a18 l       .text  00000000 
f0000a1a l       .text  00000000 
f0000a1e l       .text  00000000 
f0000a20 l       .text  00000000 
00010064 l     O .logs.fields   00000014 hmac_testutils_check_message_length.kLogFields.2
f0000a20 l       .text  00000000 
f0000a36 l       .text  00000000 
f0000a36 l       .text  00000000 
f0000a38 l       .text  00000000 
f0000a38 l       .text  00000000 
f0000a56 l       .text  00000000 
f0000a56 l       .text  00000000 
f0000a5c l       .text  00000000 
f0000a60 l       .text  00000000 
f0000a60 l       .text  00000000 
f0000a64 l       .text  00000000 
f0000a66 l       .text  00000000 
f0000a70 l       .text  00000000 
f0000a70 l       .text  00000000 
f0000a70 l       .text  00000000 
f0000a70 l       .text  00000000 
f0000a70 l       .text  00000000 
f0000a72 l       .text  00000000 
f0000a8c l       .text  00000000 
f0000a8c l       .text  00000000 
f0000a94 l       .text  00000000 
f0000a94 l       .text  00000000 
f0000a9e l       .text  00000000 
f0000a9e l       .text  00000000 
f0000aa8 l       .text  00000000 
f0000ab4 l       .text  00000000 
f0000ab6 l       .text  00000000 
f0000ab6 l       .text  00000000 
f0000ac4 l       .text  00000000 
f0000ac4 l       .text  00000000 
f0000acc l       .text  00000000 
f0000ad4 l       .text  00000000 
f0000ad4 l       .text  00000000 
f0000ade l       .text  00000000 
f0000ae0 l       .text  00000000 
f0000ae2 l       .text  00000000 
f0000ae2 l       .text  00000000 
f0000af2 l       .text  00000000 
f0000af2 l       .text  00000000 
f0000afa l       .text  00000000 
f0000afe l       .text  00000000 
f0000b00 l       .text  00000000 
f0000b04 l       .text  00000000 
00010078 l     O .logs.fields   00000014 hmac_testutils_fifo_empty_polled.kLogFields
000100dc l     O .logs.fields   00000014 check_fifo_empty.kLogFields
f0000b30 l       .text  00000000 
f0000b30 l       .text  00000000 
f0000b36 l       .text  00000000 
f0000b38 l       .text  00000000 
f0000b3a l       .text  00000000 
f0000b3a l       .text  00000000 
f0000b3e l       .text  00000000 
f0000b48 l       .text  00000000 
f0000b48 l       .text  00000000 
f0000b4a l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b62 l       .text  00000000 
f0000b62 l       .text  00000000 
f0000b64 l       .text  00000000 
f0000b64 l       .text  00000000 
f0000b66 l       .text  00000000 
f0000b66 l       .text  00000000 
f0000b76 l       .text  00000000 
f0000b76 l       .text  00000000 
f0000b78 l       .text  00000000 
f0000b7e l       .text  00000000 
f0000b7e l       .text  00000000 
f0000b80 l       .text  00000000 
f0000b80 l       .text  00000000 
f0000b84 l       .text  00000000 
f0000b84 l       .text  00000000 
f0000b92 l       .text  00000000 
f0000b94 l       .text  00000000 
f0000ba2 l       .text  00000000 
f0000bae l       .text  00000000 
f0000bb2 l       .text  00000000 
f0000bc0 l       .text  00000000 
f0000bc0 l       .text  00000000 
f0000bc2 l       .text  00000000 
f0000bc2 l       .text  00000000 
f0000bd8 l       .text  00000000 
f0000bd8 l       .text  00000000 
f0000bde l       .text  00000000 
f0000bde l       .text  00000000 
f0000be0 l       .text  00000000 
f0000be0 l       .text  00000000 
f0000bee l       .text  00000000 
f0000bfe l       .text  00000000 
f0000bfe l       .text  00000000 
f0000bfe l       .text  00000000 
f0000bfe l       .text  00000000 
f0000bfe l       .text  00000000 
f0000c00 l       .text  00000000 
f0000c1a l       .text  00000000 
f0000c1a l       .text  00000000 
f0000c22 l       .text  00000000 
f0000c22 l       .text  00000000 
f0000c28 l       .text  00000000 
f0000c28 l       .text  00000000 
f0000c2a l       .text  00000000 
f0000c34 l       .text  00000000 
f0000c40 l       .text  00000000 
f0000c44 l       .text  00000000 
f0000c44 l       .text  00000000 
f0000c54 l       .text  00000000 
f0000c54 l       .text  00000000 
f0000c5c l       .text  00000000 
f0000c64 l       .text  00000000 
f0000c64 l       .text  00000000 
f0000c6e l       .text  00000000 
f0000c70 l       .text  00000000 
f0000c72 l       .text  00000000 
f0000c72 l       .text  00000000 
f0000c82 l       .text  00000000 
f0000c82 l       .text  00000000 
f0000c8a l       .text  00000000 
f0000c8e l       .text  00000000 
f0000c90 l       .text  00000000 
f0000c94 l       .text  00000000 
f0000c96 l       .text  00000000 
0001008c l     O .logs.fields   00000014 hmac_testutils_finish_polled.kLogFields
000100f0 l     O .logs.fields   00000014 check_finished.kLogFields
f0000cc4 l       .text  00000000 
f0000cc4 l       .text  00000000 
f0000cca l       .text  00000000 
f0000cca l       .text  00000000 
f0000cce l       .text  00000000 
f0000cd0 l       .text  00000000 
f0000cd0 l       .text  00000000 
f0000cd2 l       .text  00000000 
f0000cd6 l       .text  00000000 
f0000ce0 l       .text  00000000 
f0000ce0 l       .text  00000000 
f0000ce2 l       .text  00000000 
f0000cf4 l       .text  00000000 
f0000cf4 l       .text  00000000 
f0000cfa l       .text  00000000 
f0000cfa l       .text  00000000 
f0000d0a l       .text  00000000 
f0000d0a l       .text  00000000 
f0000d0c l       .text  00000000 
f0000d12 l       .text  00000000 
f0000d12 l       .text  00000000 
f0000d14 l       .text  00000000 
f0000d14 l       .text  00000000 
f0000d18 l       .text  00000000 
f0000d18 l       .text  00000000 
f0000d26 l       .text  00000000 
f0000d28 l       .text  00000000 
f0000d36 l       .text  00000000 
f0000d42 l       .text  00000000 
f0000d46 l       .text  00000000 
f0000d54 l       .text  00000000 
f0000d54 l       .text  00000000 
f0000d56 l       .text  00000000 
f0000d56 l       .text  00000000 
f0000d6c l       .text  00000000 
f0000d6c l       .text  00000000 
f0000d72 l       .text  00000000 
f0000d72 l       .text  00000000 
f0000d74 l       .text  00000000 
f0000d74 l       .text  00000000 
f0000d80 l       .text  00000000 
f0000d82 l       .text  00000000 
f0000d92 l       .text  00000000 
f0000d92 l       .text  00000000 
f0000d92 l       .text  00000000 
f0000d92 l       .text  00000000 
f0000d92 l       .text  00000000 
f0000d94 l       .text  00000000 
f0000dac l       .text  00000000 
f0000dae l       .text  00000000 
f0000dae l       .text  00000000 
f0000db4 l       .text  00000000 
f0000db4 l       .text  00000000 
000100b4 l     O .logs.fields   00000014 hmac_testutils_finish_and_check_polled.kLogFields.8
000100a0 l     O .logs.fields   00000014 hmac_testutils_finish_and_check_polled.kLogFields
f0000de8 l       .text  00000000 
f0000de8 l       .text  00000000 
f0000dee l       .text  00000000 
f0000df2 l       .text  00000000 
f0000df6 l       .text  00000000 
f0000dfc l       .text  00000000 
f0000e00 l       .text  00000000 
f0000e08 l       .text  00000000 
f0000e08 l       .text  00000000 
f0000e18 l       .text  00000000 
f0000e18 l       .text  00000000 
f0000e1a l       .text  00000000 
f0000e1a l       .text  00000000 
f0000e2a l       .text  00000000 
f0000e2a l       .text  00000000 
f0000e48 l       .text  00000000 
f0000e48 l       .text  00000000 
f0000e4a l       .text  00000000 
f0000e50 l       .text  00000000 
f0000e54 l       .text  00000000 
f0000e54 l       .text  00000000 
f0000e58 l       .text  00000000 
f0000e5e l       .text  00000000 
f0000e62 l       .text  00000000 
f0000e62 l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e7e l       .text  00000000 
f0000e80 l       .text  00000000 
f0000e80 l       .text  00000000 
f0000e94 l       .text  00000000 
f0000e94 l       .text  00000000 
f0000e96 l       .text  00000000 
f0000e98 l       .text  00000000 
f0000e9a l       .text  00000000 
f0000e9c l       .text  00000000 
000100c8 l     O .logs.fields   00000014 hmac_testutils_push_message.kLogFields
f0000ec4 l       .text  00000000 
f0000ec4 l       .text  00000000 
f0000ec8 l       .text  00000000 
f0000ec8 l       .text  00000000 
f0000ed0 l       .text  00000000 
f0000ed2 l       .text  00000000 
f0000ed2 l       .text  00000000 
f0000ed6 l       .text  00000000 
f0000eda l       .text  00000000 
f0000ee4 l       .text  00000000 
f0000ee4 l       .text  00000000 
f0000ee6 l       .text  00000000 
f0000ee6 l       .text  00000000 
f0000ef8 l       .text  00000000 
f0000ef8 l       .text  00000000 
f0000efe l       .text  00000000 
f0000efe l       .text  00000000 
f0000f06 l       .text  00000000 
f0000f08 l       .text  00000000 
f0000f0c l       .text  00000000 
f0000f0c l       .text  00000000 
f0000f0e l       .text  00000000 
f0000f0e l       .text  00000000 
f0000f10 l       .text  00000000 
f0000f10 l       .text  00000000 
f0000f14 l       .text  00000000 
f0000f14 l       .text  00000000 
f0000f18 l       .text  00000000 
f0000f18 l       .text  00000000 
f0000f30 l       .text  00000000 
f0000f30 l       .text  00000000 
000002bd l       .debug_loc     00000000 
000002d8 l       .debug_loc     00000000 
00000329 l       .debug_loc     00000000 
00000386 l       .debug_loc     00000000 
000003b7 l       .debug_loc     00000000 
000003e8 l       .debug_loc     00000000 
00000403 l       .debug_loc     00000000 
00000459 l       .debug_loc     00000000 
00000475 l       .debug_loc     00000000 
0000049c l       .debug_loc     00000000 
000004c3 l       .debug_loc     00000000 
000004ea l       .debug_loc     00000000 
00000510 l       .debug_loc     00000000 
00000537 l       .debug_loc     00000000 
0000055e l       .debug_loc     00000000 
0000057a l       .debug_loc     00000000 
000005ab l       .debug_loc     00000000 
000005dc l       .debug_loc     00000000 
000005f7 l       .debug_loc     00000000 
00000663 l       .debug_loc     00000000 
0000067f l       .debug_loc     00000000 
000006a6 l       .debug_loc     00000000 
000006cd l       .debug_loc     00000000 
000006f3 l       .debug_loc     00000000 
0000071a l       .debug_loc     00000000 
00000741 l       .debug_loc     00000000 
0000075d l       .debug_loc     00000000 
00000778 l       .debug_loc     00000000 
0000079e l       .debug_loc     00000000 
000007c4 l       .debug_loc     00000000 
000007f5 l       .debug_loc     00000000 
00000826 l       .debug_loc     00000000 
00000841 l       .debug_loc     00000000 
00000868 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000589 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000048 l       .debug_ranges  00000000 
000005b0 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
000005b9 l       .debug_str     00000000 
000003c3 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
000005c9 l       .debug_str     00000000 
000002a3 l       .debug_str     00000000 
00000293 l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000005df l       .debug_str     00000000 
000004f3 l       .debug_str     00000000 
00000125 l       .debug_str     00000000 
00000403 l       .debug_str     00000000 
0000072d l       .debug_str     00000000 
00000736 l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
000001b2 l       .debug_str     00000000 
000001bd l       .debug_str     00000000 
0000017a l       .debug_str     00000000 
00000192 l       .debug_str     00000000 
00002b92 l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00000176 l       .debug_str     00000000 
00000130 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
00000152 l       .debug_str     00000000 
00000164 l       .debug_str     00000000 
000004d2 l       .debug_str     00000000 
00000740 l       .debug_str     00000000 
00000710 l       .debug_str     00000000 
000006e2 l       .debug_str     00000000 
0000053f l       .debug_str     00000000 
00000749 l       .debug_str     00000000 
00000752 l       .debug_str     00000000 
0000038f l       .debug_str     00000000 
000004b6 l       .debug_str     00000000 
00002112 l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
00000757 l       .debug_str     00000000 
0000075a l       .debug_str     00000000 
00002e76 l       .debug_str     00000000 
000002d2 l       .debug_str     00000000 
000002d9 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002ee l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000318 l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
0000100c l       .debug_str     00000000 
00000340 l       .debug_str     00000000 
00000355 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
00000380 l       .debug_str     00000000 
00000391 l       .debug_str     00000000 
000003a3 l       .debug_str     00000000 
000005f6 l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
000005ff l       .debug_str     00000000 
000003ff l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
00000443 l       .debug_str     00000000 
0000045a l       .debug_str     00000000 
0000061b l       .debug_str     00000000 
00000d7c l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
0000062d l       .debug_str     00000000 
000029a2 l       .debug_str     00000000 
000004b0 l       .debug_str     00000000 
00000649 l       .debug_str     00000000 
0000065a l       .debug_str     00000000 
00000667 l       .debug_str     00000000 
00000672 l       .debug_str     00000000 
0000067c l       .debug_str     00000000 
0000068d l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
00000408 l       .debug_str     00000000 
00000413 l       .debug_str     00000000 
00000698 l       .debug_str     00000000 
00000632 l       .debug_str     00000000 
000006ab l       .debug_str     00000000 
000006b7 l       .debug_str     00000000 
000006d3 l       .debug_str     00000000 
000006ed l       .debug_str     00000000 
000006fd l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
00000050 l       .debug_frame   00000000 
f0000a70 l       .text  00000000 
f0000bfe l       .text  00000000 
f0000d92 l       .text  00000000 
f0000e7e l       .text  00000000 
f0000f30 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_hmac_autogen.c
f0000f30 l       .text  00000000 
f0000f30 l       .text  00000000 
f0000f30 l       .text  00000000 
f0000f30 l       .text  00000000 
f0000f32 l       .text  00000000 
f0000f34 l       .text  00000000 
f0000f38 l       .text  00000000 
f0000f3a l       .text  00000000 
f0000f3c l       .text  00000000 
f0000f3e l       .text  00000000 
f0000f3e l       .text  00000000 
00000883 l       .debug_loc     00000000 
0000089e l       .debug_loc     00000000 
000008b9 l       .debug_loc     00000000 
000008d4 l       .debug_loc     00000000 
000008f0 l       .debug_loc     00000000 
0000090c l       .debug_loc     00000000 
00000927 l       .debug_loc     00000000 
00000942 l       .debug_loc     00000000 
0000095d l       .debug_loc     00000000 
00000978 l       .debug_loc     00000000 
00000993 l       .debug_loc     00000000 
000009ae l       .debug_loc     00000000 
000009c9 l       .debug_loc     00000000 
000009e4 l       .debug_loc     00000000 
00000a0a l       .debug_loc     00000000 
00000a25 l       .debug_loc     00000000 
00000a40 l       .debug_loc     00000000 
00000a5e l       .debug_loc     00000000 
00000a85 l       .debug_loc     00000000 
00000aa0 l       .debug_loc     00000000 
00000abb l       .debug_loc     00000000 
00000ad6 l       .debug_loc     00000000 
00000af4 l       .debug_loc     00000000 
00000b1b l       .debug_loc     00000000 
00000b36 l       .debug_loc     00000000 
00000b51 l       .debug_loc     00000000 
00000b6c l       .debug_loc     00000000 
00000b87 l       .debug_loc     00000000 
00000bad l       .debug_loc     00000000 
00000bc8 l       .debug_loc     00000000 
00000be3 l       .debug_loc     00000000 
00000c09 l       .debug_loc     00000000 
00000c29 l       .debug_loc     00000000 
00000c4f l       .debug_loc     00000000 
00000c6d l       .debug_loc     00000000 
00000c88 l       .debug_loc     00000000 
00000cae l       .debug_loc     00000000 
00000cd4 l       .debug_loc     00000000 
00000cef l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000765 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000078 l       .debug_ranges  00000000 
00000792 l       .debug_str     00000000 
000007cc l       .debug_str     00000000 
000007bf l       .debug_str     00000000 
0000079c l       .debug_str     00000000 
000007ad l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
000002d2 l       .debug_str     00000000 
000002d9 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002ee l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000318 l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
000007f3 l       .debug_str     00000000 
000007db l       .debug_str     00000000 
0000083e l       .debug_str     00000000 
00000802 l       .debug_str     00000000 
00000816 l       .debug_str     00000000 
0000082b l       .debug_str     00000000 
00000870 l       .debug_str     00000000 
0000084b l       .debug_str     00000000 
0000085e l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000420 l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
00000403 l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
00001ec2 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
0000088f l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
0000093f l       .debug_str     00000000 
000007fc l       .debug_str     00000000 
00000a57 l       .debug_str     00000000 
00000a61 l       .debug_str     00000000 
00000954 l       .debug_str     00000000 
00000847 l       .debug_str     00000000 
00000e34 l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
0000096a l       .debug_str     00000000 
00000a7f l       .debug_str     00000000 
000008ac l       .debug_str     00000000 
000008c0 l       .debug_str     00000000 
000008c9 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
000008d3 l       .debug_str     00000000 
00000981 l       .debug_str     00000000 
0000098e l       .debug_str     00000000 
00000aa6 l       .debug_str     00000000 
00001d78 l       .debug_str     00000000 
00000999 l       .debug_str     00000000 
000008ea l       .debug_str     00000000 
000008c3 l       .debug_str     00000000 
00000917 l       .debug_str     00000000 
00000906 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
0000092a l       .debug_str     00000000 
000009b6 l       .debug_str     00000000 
000009cf l       .debug_str     00000000 
00001a9c l       .debug_str     00000000 
00000ab5 l       .debug_str     00000000 
000009e2 l       .debug_str     00000000 
00001ba4 l       .debug_str     00000000 
00000ad0 l       .debug_str     00000000 
00000ae0 l       .debug_str     00000000 
000009fb l       .debug_str     00000000 
00000aeb l       .debug_str     00000000 
00000a14 l       .debug_str     00000000 
00000a2d l       .debug_str     00000000 
00000413 l       .debug_str     00000000 
00000408 l       .debug_str     00000000 
000003ff l       .debug_str     00000000 
00000a46 l       .debug_str     00000000 
00000a70 l       .debug_str     00000000 
00000a88 l       .debug_str     00000000 
00000ac3 l       .debug_str     00000000 
00000af6 l       .debug_str     00000000 
00000138 l       .debug_frame   00000000 
f0000f3e l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_hmac.c
f0000f3e l       .text  00000000 
f0000f3e l       .text  00000000 
f0000f3e l       .text  00000000 
f0000f3e l       .text  00000000 
f0000f46 l       .text  00000000 
f0000f4c l       .text  00000000 
f0000f50 l       .text  00000000 
f0000f50 l       .text  00000000 
f0000f54 l       .text  00000000 
f0000f54 l       .text  00000000 
f0000f56 l       .text  00000000 
f0000f56 l       .text  00000000 
f0000f58 l       .text  00000000 
f0000f5a l       .text  00000000 
f0000f5e l       .text  00000000 
f0000f5e l       .text  00000000 
f0000f60 l       .text  00000000 
f0000f60 l       .text  00000000 
f0000f62 l       .text  00000000 
f0000f64 l       .text  00000000 
f0000f68 l       .text  00000000 
f0000f68 l       .text  00000000 
f0000f6c l       .text  00000000 
f0000f6e l       .text  00000000 
f0000f70 l       .text  00000000 
f0000f70 l       .text  00000000 
f0000f72 l       .text  00000000 
f0000f72 l       .text  00000000 
f0000f74 l       .text  00000000 
f0000f74 l       .text  00000000 
f0000f78 l       .text  00000000 
f0000f78 l       .text  00000000 
f0000f7a l       .text  00000000 
f0000f7a l       .text  00000000 
f0000f7e l       .text  00000000 
f0000f82 l       .text  00000000 
f0000f82 l       .text  00000000 
f0000f84 l       .text  00000000 
f0000f84 l       .text  00000000 
f0000f86 l       .text  00000000 
f0000f86 l       .text  00000000 
f0000f88 l       .text  00000000 
f0000f88 l       .text  00000000 
f0000f8a l       .text  00000000 
f0000f8a l       .text  00000000 
f0000f8e l       .text  00000000 
f0000f92 l       .text  00000000 
f0000f92 l       .text  00000000 
f0000f96 l       .text  00000000 
f0000f96 l       .text  00000000 
f0000f98 l       .text  00000000 
f0000f98 l       .text  00000000 
f0000f9c l       .text  00000000 
f0000f9c l       .text  00000000 
f0000fa4 l       .text  00000000 
f0000fa4 l       .text  00000000 
f0000fa6 l       .text  00000000 
f0000fa6 l       .text  00000000 
f0000fa8 l       .text  00000000 
f0000fa8 l       .text  00000000 
f0000faa l       .text  00000000 
f0000faa l       .text  00000000 
f0000fac l       .text  00000000 
f0000fac l       .text  00000000 
f0000fb0 l       .text  00000000 
f0000fb0 l       .text  00000000 
f0000fb2 l       .text  00000000 
f0000fb2 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fb8 l       .text  00000000 
f0000fba l       .text  00000000 
f0000fba l       .text  00000000 
f0000fbe l       .text  00000000 
f0000fbe l       .text  00000000 
f0000fc0 l       .text  00000000 
f0000fc0 l       .text  00000000 
f0000fc2 l       .text  00000000 
f0000fc4 l       .text  00000000 
f0000fc8 l       .text  00000000 
f0000fc8 l       .text  00000000 
f0000fca l       .text  00000000 
f0000fca l       .text  00000000 
f0000fcc l       .text  00000000 
f0000fce l       .text  00000000 
f0000fd2 l       .text  00000000 
f0000fd2 l       .text  00000000 
f0000fd4 l       .text  00000000 
f0000fd6 l       .text  00000000 
f0000fda l       .text  00000000 
f0000fdc l       .text  00000000 
f0000fdc l       .text  00000000 
f0000fde l       .text  00000000 
f0000fe0 l       .text  00000000 
f0000fe0 l       .text  00000000 
f0000fe4 l       .text  00000000 
f0000fe4 l       .text  00000000 
f0000fe6 l       .text  00000000 
f0000fe6 l       .text  00000000 
f0000fec l       .text  00000000 
f0000fec l       .text  00000000 
f0000fee l       .text  00000000 
f0000fee l       .text  00000000 
f0000ff0 l       .text  00000000 
f0000ff0 l       .text  00000000 
f0000ff2 l       .text  00000000 
f0000ff2 l       .text  00000000 
f0000ff4 l       .text  00000000 
f0000ff4 l       .text  00000000 
f0000ff8 l       .text  00000000 
f0000ff8 l       .text  00000000 
f0000ffa l       .text  00000000 
f0000ffa l       .text  00000000 
f0000ffe l       .text  00000000 
f0000ffe l       .text  00000000 
f0000ffe l       .text  00000000 
f0000ffe l       .text  00000000 
f0000ffe l       .text  00000000 
f0000ffe l       .text  00000000 
f0001006 l       .text  00000000 
f000100c l       .text  00000000 
f000100c l       .text  00000000 
f000100e l       .text  00000000 
f0001012 l       .text  00000000 
f0001012 l       .text  00000000 
f0001016 l       .text  00000000 
f0001016 l       .text  00000000 
f000101a l       .text  00000000 
f000101a l       .text  00000000 
f000101e l       .text  00000000 
f0001022 l       .text  00000000 
f0001024 l       .text  00000000 
f0001028 l       .text  00000000 
f0001028 l       .text  00000000 
f000102c l       .text  00000000 
f0001032 l       .text  00000000 
f0001032 l       .text  00000000 
f0001034 l       .text  00000000 
f0001036 l       .text  00000000 
f0001036 l       .text  00000000 
f000103a l       .text  00000000 
f000103a l       .text  00000000 
f000103e l       .text  00000000 
f000103e l       .text  00000000 
f0001042 l       .text  00000000 
f0001048 l       .text  00000000 
f0001048 l       .text  00000000 
f000104a l       .text  00000000 
f000104c l       .text  00000000 
f000104e l       .text  00000000 
f0001050 l       .text  00000000 
f0001050 l       .text  00000000 
f0001052 l       .text  00000000 
f0001054 l       .text  00000000 
f0001054 l       .text  00000000 
f0001054 l       .text  00000000 
f0001054 l       .text  00000000 
f0001054 l       .text  00000000 
f0001054 l       .text  00000000 
f000105c l       .text  00000000 
f0001062 l       .text  00000000 
f0001062 l       .text  00000000 
f0001064 l       .text  00000000 
f0001064 l       .text  00000000 
f0001066 l       .text  00000000 
f0001066 l       .text  00000000 
f0001068 l       .text  00000000 
f0001068 l       .text  00000000 
f000106a l       .text  00000000 
f000106a l       .text  00000000 
f000106c l       .text  00000000 
f000106c l       .text  00000000 
f000106e l       .text  00000000 
f000106e l       .text  00000000 
f0001072 l       .text  00000000 
f0001072 l       .text  00000000 
f0001072 l       .text  00000000 
f0001072 l       .text  00000000 
f0001072 l       .text  00000000 
f0001072 l       .text  00000000 
f000107a l       .text  00000000 
f0001080 l       .text  00000000 
f0001082 l       .text  00000000 
f0001082 l       .text  00000000 
f0001084 l       .text  00000000 
f0001084 l       .text  00000000 
f0001086 l       .text  00000000 
f0001086 l       .text  00000000 
f0001088 l       .text  00000000 
f000108c l       .text  00000000 
f000108c l       .text  00000000 
f0001090 l       .text  00000000 
f0001090 l       .text  00000000 
f0001090 l       .text  00000000 
f0001090 l       .text  00000000 
f0001090 l       .text  00000000 
f0001090 l       .text  00000000 
f0001092 l       .text  00000000 
f0001094 l       .text  00000000 
f0001094 l       .text  00000000 
f0001096 l       .text  00000000 
f0001096 l       .text  00000000 
f0001098 l       .text  00000000 
f0001098 l       .text  00000000 
f000109c l       .text  00000000 
f000109c l       .text  00000000 
f000109e l       .text  00000000 
f000109e l       .text  00000000 
f00010a0 l       .text  00000000 
f00010a0 l       .text  00000000 
f00010a2 l       .text  00000000 
f00010a2 l       .text  00000000 
f00010a4 l       .text  00000000 
f00010a4 l       .text  00000000 
f00010a4 l       .text  00000000 
f00010a4 l       .text  00000000 
f00010a4 l       .text  00000000 
f00010a4 l       .text  00000000 
f00010ac l       .text  00000000 
f00010b2 l       .text  00000000 
f00010b4 l       .text  00000000 
f00010b4 l       .text  00000000 
f00010b6 l       .text  00000000 
f00010b6 l       .text  00000000 
f00010b8 l       .text  00000000 
f00010b8 l       .text  00000000 
f00010ba l       .text  00000000 
f00010ba l       .text  00000000 
f00010bc l       .text  00000000 
f00010bc l       .text  00000000 
f00010be l       .text  00000000 
f00010be l       .text  00000000 
f00010c0 l       .text  00000000 
f00010c0 l       .text  00000000 
f00010c4 l       .text  00000000 
f00010c4 l       .text  00000000 
f00010c6 l       .text  00000000 
f00010c6 l       .text  00000000 
f00010ca l       .text  00000000 
f00010ca l       .text  00000000 
f00010cc l       .text  00000000 
f00010cc l       .text  00000000 
f00010d4 l       .text  00000000 
f00010d4 l       .text  00000000 
f00010d6 l       .text  00000000 
f00010d6 l       .text  00000000 
f00010d8 l       .text  00000000 
f00010da l       .text  00000000 
f00010da l       .text  00000000 
f00010dc l       .text  00000000 
f00010dc l       .text  00000000 
f00010de l       .text  00000000 
f00010e0 l       .text  00000000 
f00010e4 l       .text  00000000 
f00010e4 l       .text  00000000 
f00010e6 l       .text  00000000 
f00010e6 l       .text  00000000 
f00010e8 l       .text  00000000 
f00010e8 l       .text  00000000 
f00010ea l       .text  00000000 
f00010ea l       .text  00000000 
f00010ec l       .text  00000000 
f00010ec l       .text  00000000 
f00010ee l       .text  00000000 
f00010ee l       .text  00000000 
f00010f2 l       .text  00000000 
f00010f2 l       .text  00000000 
00000d0a l       .debug_loc     00000000 
00000d25 l       .debug_loc     00000000 
00000d40 l       .debug_loc     00000000 
00000d66 l       .debug_loc     00000000 
00000d86 l       .debug_loc     00000000 
00000da2 l       .debug_loc     00000000 
00000dbe l       .debug_loc     00000000 
00000de6 l       .debug_loc     00000000 
00000e02 l       .debug_loc     00000000 
00000e1d l       .debug_loc     00000000 
00000e43 l       .debug_loc     00000000 
00000e60 l       .debug_loc     00000000 
00000e86 l       .debug_loc     00000000 
00000ea1 l       .debug_loc     00000000 
00000ec3 l       .debug_loc     00000000 
00000ede l       .debug_loc     00000000 
00000f00 l       .debug_loc     00000000 
00000f1b l       .debug_loc     00000000 
00000f41 l       .debug_loc     00000000 
00000f8f l       .debug_loc     00000000 
00000fab l       .debug_loc     00000000 
00000fc7 l       .debug_loc     00000000 
00000fe9 l       .debug_loc     00000000 
00001004 l       .debug_loc     00000000 
00001020 l       .debug_loc     00000000 
00001042 l       .debug_loc     00000000 
00001064 l       .debug_loc     00000000 
0000107f l       .debug_loc     00000000 
000010a1 l       .debug_loc     00000000 
000010bc l       .debug_loc     00000000 
000010d7 l       .debug_loc     00000000 
000010f2 l       .debug_loc     00000000 
00001118 l       .debug_loc     00000000 
00001157 l       .debug_loc     00000000 
00001172 l       .debug_loc     00000000 
0000118d l       .debug_loc     00000000 
000011a8 l       .debug_loc     00000000 
000011c3 l       .debug_loc     00000000 
000011de l       .debug_loc     00000000 
00001200 l       .debug_loc     00000000 
0000121b l       .debug_loc     00000000 
00001236 l       .debug_loc     00000000 
00001253 l       .debug_loc     00000000 
00001270 l       .debug_loc     00000000 
00001296 l       .debug_loc     00000000 
000012b1 l       .debug_loc     00000000 
000012d3 l       .debug_loc     00000000 
000012ee l       .debug_loc     00000000 
00001309 l       .debug_loc     00000000 
00001324 l       .debug_loc     00000000 
00001340 l       .debug_loc     00000000 
0000135c l       .debug_loc     00000000 
00001377 l       .debug_loc     00000000 
00001399 l       .debug_loc     00000000 
000013b4 l       .debug_loc     00000000 
000013ef l       .debug_loc     00000000 
0000140a l       .debug_loc     00000000 
0000143e l       .debug_loc     00000000 
00001460 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000b15 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000001b0 l       .debug_ranges  00000000 
00000335 l       .debug_str     00000000 
000002d2 l       .debug_str     00000000 
000002d9 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002ee l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000318 l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
00000210 l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
000001f7 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
000003c3 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
00000b32 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
00001ec2 l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
0000088f l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
00000b3c l       .debug_str     00000000 
00000b63 l       .debug_str     00000000 
00000b6a l       .debug_str     00000000 
00000b71 l       .debug_str     00000000 
00000b89 l       .debug_str     00000000 
00000413 l       .debug_str     00000000 
0000024f l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000b76 l       .debug_str     00000000 
00000b8e l       .debug_str     00000000 
00000224 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
00000ba0 l       .debug_str     00000000 
00000ba8 l       .debug_str     00000000 
00001a9c l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
000008ea l       .debug_str     00000000 
000008c0 l       .debug_str     00000000 
000008c3 l       .debug_str     00000000 
00000917 l       .debug_str     00000000 
00000906 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
00001d78 l       .debug_str     00000000 
0000092a l       .debug_str     00000000 
000008c9 l       .debug_str     00000000 
000008d3 l       .debug_str     00000000 
00000bac l       .debug_str     00000000 
00000bcc l       .debug_str     00000000 
00000482 l       .debug_str     00000000 
00000403 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
00000adc l       .debug_str     00000000 
00000100 l       .debug_ranges  00000000 
00000c74 l       .debug_str     00000000 
000000e0 l       .debug_ranges  00000000 
0000038f l       .debug_str     00000000 
00000150 l       .debug_ranges  00000000 
00000c68 l       .debug_str     00000000 
00000120 l       .debug_ranges  00000000 
00000138 l       .debug_ranges  00000000 
0000049b l       .debug_str     00000000 
00000bdb l       .debug_str     00000000 
00000408 l       .debug_str     00000000 
000003ff l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
00000be6 l       .debug_str     00000000 
00000bfb l       .debug_str     00000000 
00000c14 l       .debug_str     00000000 
000006fd l       .debug_str     00000000 
00002112 l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
00000c81 l       .debug_str     00000000 
00000c8c l       .debug_str     00000000 
00000c96 l       .debug_str     00000000 
00000168 l       .debug_ranges  00000000 
00002ea2 l       .debug_str     00000000 
00000ca6 l       .debug_str     00000000 
00002b83 l       .debug_str     00000000 
00000c27 l       .debug_str     00000000 
000006b7 l       .debug_str     00000000 
00000cb3 l       .debug_str     00000000 
000005ff l       .debug_str     00000000 
00000cbf l       .debug_str     00000000 
00000cc7 l       .debug_str     00000000 
00000cd1 l       .debug_str     00000000 
0000052e l       .debug_str     00000000 
00000c3d l       .debug_str     00000000 
000008ac l       .debug_str     00000000 
000006ed l       .debug_str     00000000 
0000029c l       .debug_str     00000000 
00000cdb l       .debug_str     00000000 
00000682 l       .debug_str     00000000 
00000180 l       .debug_ranges  00000000 
00000198 l       .debug_ranges  00000000 
00000c53 l       .debug_str     00000000 
00000ce0 l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
000005f6 l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
000002a3 l       .debug_str     00000000 
00000293 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
0000020c l       .debug_frame   00000000 
f0000fb6 l       .text  00000000 
f0000ffe l       .text  00000000 
f0001054 l       .text  00000000 
f0001072 l       .text  00000000 
f0001090 l       .text  00000000 
f00010a4 l       .text  00000000 
f00010f2 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_main.c
f00010f2 l       .text  00000000 
f00010f2 l       .text  00000000 
f00010f2 l       .text  00000000 
f00010f4 l       .text  00000000 
f00010f4 l       .text  00000000 
f00010f6 l       .text  00000000 
f0001100 l       .text  00000000 
f0001102 l       .text  00000000 
f000110a l       .text  00000000 
f000110a l       .text  00000000 
f0001114 l       .text  00000000 
00010104 l     O .logs.fields   00000014 ottf_machine_ecall_handler.kLogFields
f0001116 l       .text  00000000 
f0001128 l       .text  00000000 
f0001128 l       .text  00000000 
f000113e l       .text  00000000 
f000113e l       .text  00000000 
f0001144 l       .text  00000000 
f0001144 l       .text  00000000 
e0002068 l     O .bss   00000004 uart0
f0001144 l       .text  00000000 
f0001144 l       .text  00000000 
f0001144 l       .text  00000000 
f0001146 l       .text  00000000 
f000114e l       .text  00000000 
f0001154 l       .text  00000000 
f0001158 l       .text  00000000 
f0001158 l       .text  00000000 
f0001162 l       .text  00000000 
f0001172 l       .text  00000000 
f0001272 l     F .text  000000d2 init_uart
f0001174 l       .text  00000000 
f0001176 l       .text  00000000 
f0001176 l       .text  00000000 
f000117a l       .text  00000000 
f000117c l       .text  00000000 
00010118 l     O .logs.fields   00000014 _ottf_main.kLogFields
f000117e l       .text  00000000 
f000118e l       .text  00000000 
f000118e l       .text  00000000 
f0001190 l       .text  00000000 
f0001190 l       .text  00000000 
f00011a8 l       .text  00000000 
f00011a8 l       .text  00000000 
f00011b2 l       .text  00000000 
f00011b4 l       .text  00000000 
f00011b6 l       .text  00000000 
f00011b6 l       .text  00000000 
f00011ba l       .text  00000000 
f00011bc l       .text  00000000 
0001012c l     O .logs.fields   00000014 _ottf_main.kLogFields.3
f00011bc l       .text  00000000 
f00011cc l       .text  00000000 
f00011cc l       .text  00000000 
f00011ce l       .text  00000000 
f00011ce l       .text  00000000 
f00011e6 l       .text  00000000 
f00011e6 l       .text  00000000 
f00011ec l       .text  00000000 
f00011ee l       .text  00000000 
f00011ee l       .text  00000000 
f00011f4 l       .text  00000000 
f0001204 l       .text  00000000 
f0001208 l       .text  00000000 
f000120a l       .text  00000000 
f0001344 l     F .text  0000008e test_wrapper
f000120a l       .text  00000000 
f000121a l       .text  00000000 
f0001228 l       .text  00000000 
f0001228 l       .text  00000000 
f000122c l       .text  00000000 
f000122c l       .text  00000000 
f000122e l       .text  00000000 
f0001232 l       .text  00000000 
f0001232 l       .text  00000000 
f0001236 l       .text  00000000 
00010140 l     O .logs.fields   00000014 _ottf_main.kLogFields.7
f0001238 l       .text  00000000 
f0001246 l       .text  00000000 
f0001246 l       .text  00000000 
f0001248 l       .text  00000000 
f0001248 l       .text  00000000 
f000125e l       .text  00000000 
f000125e l       .text  00000000 
f0001264 l       .text  00000000 
f0001266 l       .text  00000000 
f0001266 l       .text  00000000 
f0001272 l       .text  00000000 
f0001272 l       .text  00000000 
f0001272 l       .text  00000000 
f0001272 l       .text  00000000 
f0001272 l       .text  00000000 
f0001274 l       .text  00000000 
f0001274 l       .text  00000000 
f0001274 l       .text  00000000 
f000127a l       .text  00000000 
f000128a l       .text  00000000 
f000128a l       .text  00000000 
f0001292 l       .text  00000000 
f0001294 l       .text  00000000 
f0001294 l       .text  00000000 
f0001296 l       .text  00000000 
f0001296 l       .text  00000000 
f0001298 l       .text  00000000 
f000129a l       .text  00000000 
00010154 l     O .logs.fields   00000014 init_uart.kLogFields
f000129a l       .text  00000000 
f00012aa l       .text  00000000 
f00012aa l       .text  00000000 
f00012ac l       .text  00000000 
f00012ac l       .text  00000000 
f00012c2 l       .text  00000000 
f00012c2 l       .text  00000000 
f00012c8 l       .text  00000000 
f00012ca l       .text  00000000 
f00012ca l       .text  00000000 
f00012f6 l       .text  00000000 
f00012f8 l       .text  00000000 
f00012fa l       .text  00000000 
f00012fa l       .text  00000000 
f00012fc l       .text  00000000 
f00012fe l       .text  00000000 
00010168 l     O .logs.fields   00000014 init_uart.kLogFields.11
f00012fe l       .text  00000000 
f000130e l       .text  00000000 
f000130e l       .text  00000000 
f0001310 l       .text  00000000 
f0001310 l       .text  00000000 
f0001326 l       .text  00000000 
f0001326 l       .text  00000000 
f000132c l       .text  00000000 
f000132e l       .text  00000000 
f000132e l       .text  00000000 
f000133a l       .text  00000000 
f000133a l       .text  00000000 
f0001344 l       .text  00000000 
f0001344 l       .text  00000000 
f0001344 l       .text  00000000 
f0001344 l       .text  00000000 
f0001344 l       .text  00000000 
f0001346 l       .text  00000000 
f000134c l       .text  00000000 
f000134e l       .text  00000000 
f0001352 l       .text  00000000 
f0001356 l       .text  00000000 
f0001356 l       .text  00000000 
f0001358 l       .text  00000000 
f000135c l       .text  00000000 
f000135c l       .text  00000000 
f000135e l       .text  00000000 
f0001362 l       .text  00000000 
f0001362 l       .text  00000000 
f0001372 l       .text  00000000 
f0001372 l       .text  00000000 
f000137c l       .text  00000000 
f000137e l       .text  00000000 
f0001386 l       .text  00000000 
f000138a l       .text  00000000 
f000138c l       .text  00000000 
f000138e l       .text  00000000 
f000138e l       .text  00000000 
f0001398 l       .text  00000000 
f000139a l       .text  00000000 
0001017c l     O .logs.fields   00000014 report_test_status.kLogFields
f000139c l       .text  00000000 
f00013aa l       .text  00000000 
f00013aa l       .text  00000000 
f00013ac l       .text  00000000 
f00013c2 l       .text  00000000 
f00013c2 l       .text  00000000 
f00013c4 l       .text  00000000 
f00013c4 l       .text  00000000 
f00013c8 l       .text  00000000 
f00013c8 l       .text  00000000 
f00013d2 l       .text  00000000 
f00013d2 l       .text  00000000 
00001486 l       .debug_loc     00000000 
000014a1 l       .debug_loc     00000000 
000014bc l       .debug_loc     00000000 
000014d7 l       .debug_loc     00000000 
000014f2 l       .debug_loc     00000000 
00001523 l       .debug_loc     00000000 
0000153e l       .debug_loc     00000000 
0000156f l       .debug_loc     00000000 
000015a0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000ce8 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000001f8 l       .debug_ranges  00000000 
00001069 l       .debug_str     00000000 
00000125 l       .debug_str     00000000 
000001b2 l       .debug_str     00000000 
000001bd l       .debug_str     00000000 
0000017a l       .debug_str     00000000 
00000192 l       .debug_str     00000000 
00002b92 l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00000176 l       .debug_str     00000000 
00000130 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
00000152 l       .debug_str     00000000 
00000164 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
000010cf l       .debug_str     00000000 
00000d4e l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
00000d19 l       .debug_str     00000000 
00000d28 l       .debug_str     00000000 
00000d1f l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
00000d33 l       .debug_str     00000000 
00000dd0 l       .debug_str     00000000 
00000dbd l       .debug_str     00000000 
00000d6e l       .debug_str     00000000 
000020ee l       .debug_str     00000000 
00000d89 l       .debug_str     00000000 
00000da1 l       .debug_str     00000000 
00000db2 l       .debug_str     00000000 
00000d5b l       .debug_str     00000000 
00000d4a l       .debug_str     00000000 
000010da l       .debug_str     00000000 
0000100c l       .debug_str     00000000 
00000340 l       .debug_str     00000000 
00000355 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
00000380 l       .debug_str     00000000 
00000391 l       .debug_str     00000000 
000003a3 l       .debug_str     00000000 
00000e2d l       .debug_str     00000000 
00000de5 l       .debug_str     00000000 
00000df2 l       .debug_str     00000000 
00000e06 l       .debug_str     00000000 
00000e17 l       .debug_str     00000000 
000002d2 l       .debug_str     00000000 
000002d9 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002ee l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000318 l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000e39 l       .debug_str     00000000 
00000870 l       .debug_str     00000000 
0000084b l       .debug_str     00000000 
0000085e l       .debug_str     00000000 
00000e78 l       .debug_str     00000000 
00000e53 l       .debug_str     00000000 
00000e65 l       .debug_str     00000000 
00000e88 l       .debug_str     00000000 
00000e89 l       .debug_str     00000000 
0000019d l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
00000e94 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
00000443 l       .debug_str     00000000 
00000ea7 l       .debug_str     00000000 
00000eb3 l       .debug_str     00000000 
00000ec2 l       .debug_str     00000000 
00001084 l       .debug_str     00000000 
00001094 l       .debug_str     00000000 
00000ed6 l       .debug_str     00000000 
000010aa l       .debug_str     00000000 
00000ee2 l       .debug_str     00000000 
000010c2 l       .debug_str     00000000 
00000ef0 l       .debug_str     00000000 
00000f01 l       .debug_str     00000000 
00000f1e l       .debug_str     00000000 
00000f28 l       .debug_str     00000000 
00000f42 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
00000f0f l       .debug_str     00000000 
00000f39 l       .debug_str     00000000 
0000045a l       .debug_str     00000000 
00000f50 l       .debug_str     00000000 
00000f66 l       .debug_str     00000000 
00000f7a l       .debug_str     00000000 
000010e4 l       .debug_str     00000000 
000010f1 l       .debug_str     00000000 
00000339 l       .debug_str     00000000 
00000f8e l       .debug_str     00000000 
00000f9c l       .debug_str     00000000 
00000fe4 l       .debug_str     00000000 
00000faf l       .debug_str     00000000 
00000fb8 l       .debug_str     00000000 
00000fc4 l       .debug_str     00000000 
00000e81 l       .debug_str     00000000 
00000ac3 l       .debug_str     00000000 
00000fd2 l       .debug_str     00000000 
00000ff4 l       .debug_str     00000000 
00001005 l       .debug_str     00000000 
00001018 l       .debug_str     00000000 
00000566 l       .debug_str     00000000 
00001033 l       .debug_str     00000000 
0000104f l       .debug_str     00000000 
00000413 l       .debug_str     00000000 
000002a0 l       .debug_frame   00000000 
f0001144 l       .text  00000000 
f0001272 l       .text  00000000 
f0001344 l       .text  00000000 
f00013d2 l       .text  00000000 
00000000 l    df *ABS*  00000000 coverage_none.c
f00013d2 l       .text  00000000 
f00013d2 l       .text  00000000 
f00013d2 l       .text  00000000 
f00013d2 l       .text  00000000 
f00013d4 l       .text  00000000 
f00013d4 l       .text  00000000 
00000000 l       .debug_str     00000000 
00001101 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
0000104f l       .debug_str     00000000 
00000378 l       .debug_frame   00000000 
f00013d4 l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_hooks.c
f00013d4 l       .text  00000000 
f00013d4 l       .text  00000000 
f00013d4 l       .text  00000000 
f00013d6 l       .text  00000000 
f00013d6 l       .text  00000000 
f00013d8 l       .text  00000000 
f00013e2 l       .text  00000000 
f00013e4 l       .text  00000000 
f00013e4 l       .text  00000000 
f00013f8 l       .text  00000000 
f00013f8 l       .text  00000000 
f00013fa l       .text  00000000 
00010190 l     O .logs.fields   00000014 vApplicationMallocFailedHook.kLogFields
f00013fa l       .text  00000000 
f0001406 l       .text  00000000 
f0001406 l       .text  00000000 
f000140a l       .text  00000000 
f000140a l       .text  00000000 
f000140c l       .text  00000000 
f000140c l       .text  00000000 
f000140c l       .text  00000000 
f000140c l       .text  00000000 
f000140c l       .text  00000000 
f000140c l       .text  00000000 
f000140e l       .text  00000000 
f000140e l       .text  00000000 
f0001410 l       .text  00000000 
f0001410 l       .text  00000000 
f000141a l       .text  00000000 
f000141c l       .text  00000000 
f000141c l       .text  00000000 
f0001430 l       .text  00000000 
f0001430 l       .text  00000000 
f0001432 l       .text  00000000 
000101a4 l     O .logs.fields   00000014 vApplicationStackOverflowHook.kLogFields
f0001432 l       .text  00000000 
f000143e l       .text  00000000 
f000143e l       .text  00000000 
f0001442 l       .text  00000000 
f0001442 l       .text  00000000 
f0001444 l       .text  00000000 
f0001444 l       .text  00000000 
f0001444 l       .text  00000000 
000015bb l       .debug_loc     00000000 
000015d6 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001136 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000248 l       .debug_ranges  00000000 
00001182 l       .debug_str     00000000 
00000125 l       .debug_str     00000000 
000001b2 l       .debug_str     00000000 
000001bd l       .debug_str     00000000 
0000017a l       .debug_str     00000000 
00000192 l       .debug_str     00000000 
00002b92 l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00000176 l       .debug_str     00000000 
00000130 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
00000152 l       .debug_str     00000000 
00000164 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
0000119f l       .debug_str     00000000 
000011bd l       .debug_str     00000000 
000011d0 l       .debug_str     00000000 
00000443 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
0000116c l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
0000117c l       .debug_str     00000000 
000011c3 l       .debug_str     00000000 
00000ec2 l       .debug_str     00000000 
0000039c l       .debug_frame   00000000 
f000140c l       .text  00000000 
f0001444 l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_port.c
f0001444 l       .text  00000000 
f0001444 l       .text  00000000 
f0001444 l       .text  00000000 
f0001446 l       .text  00000000 
f0001446 l       .text  00000000 
f0001448 l       .text  00000000 
f000144c l       .text  00000000 
f000144c l       .text  00000000 
f0001450 l       .text  00000000 
f0001450 l       .text  00000000 
f0001454 l       .text  00000000 
f0001454 l       .text  00000000 
f0001458 l       .text  00000000 
f0001458 l       .text  00000000 
f0001460 l       .text  00000000 
f0001460 l       .text  00000000 
00000000 l       .debug_str     00000000 
000011db l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00001210 l       .debug_str     00000000 
000003c3 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000e89 l       .debug_str     00000000 
0000019d l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
0000125e l       .debug_str     00000000 
00001217 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
00001226 l       .debug_str     00000000 
00001238 l       .debug_str     00000000 
0000124a l       .debug_str     00000000 
000003e0 l       .debug_frame   00000000 
f0001460 l       .text  00000000 
00000000 l    df *ABS*  00000000 irq.c
f0001460 l       .text  00000000 
f0001460 l       .text  00000000 
f0001460 l       .text  00000000 
f0001460 l       .text  00000000 
f0001462 l       .text  00000000 
f0001464 l       .text  00000000 
f0001464 l       .text  00000000 
f0001468 l       .text  00000000 
f000146a l       .text  00000000 
f000146a l       .text  00000000 
f000146c l       .text  00000000 
f000146c l       .text  00000000 
f0001470 l       .text  00000000 
f0001472 l       .text  00000000 
f0001472 l       .text  00000000 
f0001472 l       .text  00000000 
f0001472 l       .text  00000000 
f0001472 l       .text  00000000 
f0001472 l       .text  00000000 
f0001474 l       .text  00000000 
f0001476 l       .text  00000000 
f000147a l       .text  00000000 
f000147e l       .text  00000000 
f0001480 l       .text  00000000 
f0001480 l       .text  00000000 
f0001482 l       .text  00000000 
f0001486 l       .text  00000000 
f000148a l       .text  00000000 
f000148c l       .text  00000000 
f000148c l       .text  00000000 
f000148c l       .text  00000000 
f000148c l       .text  00000000 
f000148c l       .text  00000000 
f000148c l       .text  00000000 
f000148e l       .text  00000000 
f0001492 l       .text  00000000 
f0001492 l       .text  00000000 
f0001496 l       .text  00000000 
f0001498 l       .text  00000000 
f0001498 l       .text  00000000 
f000149c l       .text  00000000 
f000149c l       .text  00000000 
f00014a0 l       .text  00000000 
f00014a2 l       .text  00000000 
f00014a2 l       .text  00000000 
f00014a2 l       .text  00000000 
f00014a2 l       .text  00000000 
f00014a2 l       .text  00000000 
f00014a2 l       .text  00000000 
f00014a4 l       .text  00000000 
f00014a6 l       .text  00000000 
f00014a6 l       .text  00000000 
f00014aa l       .text  00000000 
f00014ac l       .text  00000000 
f00014ac l       .text  00000000 
f00014ae l       .text  00000000 
f00014ae l       .text  00000000 
f00014b2 l       .text  00000000 
f00014b4 l       .text  00000000 
f00014b4 l       .text  00000000 
000015f1 l       .debug_loc     00000000 
00001621 l       .debug_loc     00000000 
00001651 l       .debug_loc     00000000 
00001681 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001272 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000260 l       .debug_ranges  00000000 
0000128e l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000012a4 l       .debug_str     00000000 
000012bc l       .debug_str     00000000 
000012d1 l       .debug_str     00000000 
000012e7 l       .debug_str     00000000 
0000116c l       .debug_str     00000000 
000015de l       .debug_str     00000000 
00001226 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
00001217 l       .debug_str     00000000 
00001238 l       .debug_str     00000000 
00000b32 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
0000040c l       .debug_frame   00000000 
f0001472 l       .text  00000000 
f000148c l       .text  00000000 
f00014a2 l       .text  00000000 
f00014b4 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.c
f00014b4 l       .text  00000000 
f00014b4 l       .text  00000000 
f00014b4 l       .text  00000000 
f00014b6 l       .text  00000000 
f00014c0 l       .text  00000000 
f00014c2 l       .text  00000000 
f00014c4 l       .text  00000000 
f00014c4 l       .text  00000000 
f00014c6 l       .text  00000000 
f00014c8 l       .text  00000000 
f00014c8 l       .text  00000000 
f00014ca l       .text  00000000 
f00014ca l       .text  00000000 
f00014d4 l       .text  00000000 
f00014d6 l       .text  00000000 
f00014d6 l       .text  00000000 
f00014d8 l       .text  00000000 
000101b8 l     O .logs.fields   00000014 ottf_generic_fault_print.kLogFields
f00014d8 l       .text  00000000 
f00014f8 l       .text  00000000 
f00014f8 l       .text  00000000 
f0001514 l       .text  00000000 
f0001514 l       .text  00000000 
f0001522 l       .text  00000000 
f0001522 l       .text  00000000 
f0001522 l       .text  00000000 
f0001522 l       .text  00000000 
f0001522 l       .text  00000000 
f0001524 l       .text  00000000 
f0001524 l       .text  00000000 
f0001526 l       .text  00000000 
f0001528 l       .text  00000000 
f0001528 l       .text  00000000 
f000152a l       .text  00000000 
f000152a l       .text  00000000 
f000152c l       .text  00000000 
f0001530 l       .text  00000000 
f0001546 l       .text  00000000 
f000154c l       .text  00000000 
f0001552 l       .text  00000000 
f0001558 l       .text  00000000 
f000155e l       .text  00000000 
f0001564 l       .text  00000000 
f000156c l     F .text  0000001c generic_fault_handler
f000156a l       .text  00000000 
f000156c l       .text  00000000 
f000156c l       .text  00000000 
f000156c l       .text  00000000 
f000156c l       .text  00000000 
f000156c l       .text  00000000 
f000156c l       .text  00000000 
f000156e l       .text  00000000 
f000156e l       .text  00000000 
f0001570 l       .text  00000000 
f0001572 l       .text  00000000 
f0001574 l       .text  00000000 
f0001574 l       .text  00000000 
f0001576 l       .text  00000000 
f0001578 l       .text  00000000 
f000376c l     O .rodata        00000080 exception_reason
f0001584 l       .text  00000000 
f0001586 l       .text  00000000 
f0001586 l       .text  00000000 
f0001588 l       .text  00000000 
f0001588 l       .text  00000000 
f0001588 l       .text  00000000 
f0001588 l       .text  00000000 
f0001588 l       .text  00000000 
f0001588 l       .text  00000000 
f000158a l       .text  00000000 
f000158a l       .text  00000000 
f000158c l       .text  00000000 
f000158e l       .text  00000000 
f0001590 l       .text  00000000 
f000159a l       .text  00000000 
f000159a l       .text  00000000 
f000159c l       .text  00000000 
f000159c l       .text  00000000 
f000159c l       .text  00000000 
f000159c l       .text  00000000 
f000159c l       .text  00000000 
f000159c l       .text  00000000 
f000159e l       .text  00000000 
f000159e l       .text  00000000 
f00015a0 l       .text  00000000 
f00015a2 l       .text  00000000 
f00015a4 l       .text  00000000 
f00015ae l       .text  00000000 
f00015ae l       .text  00000000 
f00015b0 l       .text  00000000 
f00015b0 l       .text  00000000 
f00015b0 l       .text  00000000 
f00015b0 l       .text  00000000 
f00015b0 l       .text  00000000 
f00015b0 l       .text  00000000 
f00015b0 l       .text  00000000 
f00015b4 l       .text  00000000 
f00015b4 l       .text  00000000 
f00015b4 l       .text  00000000 
f00015b4 l       .text  00000000 
f00015b4 l       .text  00000000 
f00015b6 l       .text  00000000 
f00015b6 l       .text  00000000 
f00015bc l       .text  00000000 
f00015bc l       .text  00000000 
f00015bc l       .text  00000000 
f00015ca l       .text  00000000 
f00015ca l       .text  00000000 
f00015d2 l       .text  00000000 
f00015d4 l       .text  00000000 
f00015d4 l       .text  00000000 
f00015d6 l       .text  00000000 
f00015d6 l       .text  00000000 
f00015d8 l       .text  00000000 
f00015da l       .text  00000000 
000101cc l     O .logs.fields   00000014 ottf_external_isr.kLogFields
f00015da l       .text  00000000 
f00015e8 l       .text  00000000 
f00015e8 l       .text  00000000 
f00015ea l       .text  00000000 
f00015ea l       .text  00000000 
f0001600 l       .text  00000000 
f0001600 l       .text  00000000 
f0001606 l       .text  00000000 
f0001608 l       .text  00000000 
f0001608 l       .text  00000000 
f000160a l       .text  00000000 
f000160a l       .text  00000000 
f000160c l       .text  00000000 
f0001618 l       .text  00000000 
f0001618 l       .text  00000000 
f000161a l       .text  00000000 
f000161e l       .text  00000000 
f000161e l       .text  00000000 
f0001620 l       .text  00000000 
f0001620 l       .text  00000000 
f0001622 l       .text  00000000 
f0001622 l       .text  00000000 
f0001624 l       .text  00000000 
f0001630 l       .text  00000000 
f0001632 l       .text  00000000 
f0001632 l       .text  00000000 
f0001634 l       .text  00000000 
f0001634 l       .text  00000000 
f0001636 l       .text  00000000 
f0001638 l       .text  00000000 
000101e0 l     O .logs.fields   00000014 ottf_external_isr.kLogFields.5
f0001638 l       .text  00000000 
f0001646 l       .text  00000000 
f0001646 l       .text  00000000 
f0001648 l       .text  00000000 
f0001648 l       .text  00000000 
f000165e l       .text  00000000 
f000165e l       .text  00000000 
f0001664 l       .text  00000000 
f0001666 l       .text  00000000 
f0001666 l       .text  00000000 
f0001670 l       .text  00000000 
f0001672 l       .text  00000000 
f0001674 l       .text  00000000 
f0001674 l       .text  00000000 
f000167e l       .text  00000000 
f000167e l       .text  00000000 
f0001680 l       .text  00000000 
f0001680 l       .text  00000000 
f0001680 l       .text  00000000 
f0001680 l     F .text  00000014 generic_internal_irq_handler
f0001680 l       .text  00000000 
f0001680 l       .text  00000000 
f0001680 l       .text  00000000 
f0001682 l       .text  00000000 
f0001682 l       .text  00000000 
f0001684 l       .text  00000000 
f0001686 l       .text  00000000 
f0001688 l       .text  00000000 
f0001692 l       .text  00000000 
f0001692 l       .text  00000000 
f0001694 l       .text  00000000 
f0001694 l       .text  00000000 
f0001694 l       .text  00000000 
f0001694 l       .text  00000000 
f0001694 l       .text  00000000 
f0001694 l       .text  00000000 
f0001696 l       .text  00000000 
f0001696 l       .text  00000000 
f0001698 l       .text  00000000 
f000169a l       .text  00000000 
f000169a l       .text  00000000 
f00016a0 l       .text  00000000 
f00016a0 l       .text  00000000 
f00016a4 l       .text  00000000 
f00016a6 l       .text  00000000 
f00016aa l       .text  00000000 
f00016b0 l       .text  00000000 
f00016b6 l       .text  00000000 
f00016b6 l       .text  00000000 
f00016b8 l       .text  00000000 
f00016ba l       .text  00000000 
f00016c4 l       .text  00000000 
f00016c4 l       .text  00000000 
f00016c6 l       .text  00000000 
f00016c6 l       .text  00000000 
f00016c6 l       .text  00000000 
000016b1 l       .debug_loc     00000000 
000016d7 l       .debug_loc     00000000 
000016fd l       .debug_loc     00000000 
00001718 l       .debug_loc     00000000 
00001733 l       .debug_loc     00000000 
0000174e l       .debug_loc     00000000 
00001769 l       .debug_loc     00000000 
000017b5 l       .debug_loc     00000000 
000017e8 l       .debug_loc     00000000 
00001819 l       .debug_loc     00000000 
00001834 l       .debug_loc     00000000 
00001865 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000012ef l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000290 l       .debug_ranges  00000000 
000019ed l       .debug_str     00000000 
00000125 l       .debug_str     00000000 
0000135b l       .debug_str     00000000 
00001a8e l       .debug_str     00000000 
00001a95 l       .debug_str     00000000 
00001a9a l       .debug_str     00000000 
000001b2 l       .debug_str     00000000 
000001bd l       .debug_str     00000000 
0000017a l       .debug_str     00000000 
00000192 l       .debug_str     00000000 
00002b92 l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00000176 l       .debug_str     00000000 
00000130 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
00000152 l       .debug_str     00000000 
00000164 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00001320 l       .debug_str     00000000 
00001a6a l       .debug_str     00000000 
00001aa0 l       .debug_str     00000000 
00001aac l       .debug_str     00000000 
000018e8 l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
0000132d l       .debug_str     00000000 
00001343 l       .debug_str     00000000 
00001337 l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
00001351 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00001424 l       .debug_str     00000000 
00001362 l       .debug_str     00000000 
0000137a l       .debug_str     00000000 
00001393 l       .debug_str     00000000 
000013ad l       .debug_str     00000000 
000013c0 l       .debug_str     00000000 
000013d8 l       .debug_str     00000000 
000013f1 l       .debug_str     00000000 
00001403 l       .debug_str     00000000 
00001418 l       .debug_str     00000000 
00001464 l       .debug_str     00000000 
0000142d l       .debug_str     00000000 
00001449 l       .debug_str     00000000 
000002d2 l       .debug_str     00000000 
000002d9 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002ee l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000318 l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
0000100c l       .debug_str     00000000 
00000340 l       .debug_str     00000000 
00000355 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
00000380 l       .debug_str     00000000 
00000391 l       .debug_str     00000000 
000003a3 l       .debug_str     00000000 
000018d6 l       .debug_str     00000000 
0000147d l       .debug_str     00000000 
0000149f l       .debug_str     00000000 
000014bf l       .debug_str     00000000 
000014df l       .debug_str     00000000 
000014ff l       .debug_str     00000000 
0000151f l       .debug_str     00000000 
0000153e l       .debug_str     00000000 
00001562 l       .debug_str     00000000 
00001581 l       .debug_str     00000000 
000015a0 l       .debug_str     00000000 
000015bf l       .debug_str     00000000 
000015e1 l       .debug_str     00000000 
00001603 l       .debug_str     00000000 
00001625 l       .debug_str     00000000 
0000164c l       .debug_str     00000000 
0000166f l       .debug_str     00000000 
00001692 l       .debug_str     00000000 
000016b3 l       .debug_str     00000000 
000016d7 l       .debug_str     00000000 
000016ff l       .debug_str     00000000 
00001724 l       .debug_str     00000000 
0000174a l       .debug_str     00000000 
0000176f l       .debug_str     00000000 
00001792 l       .debug_str     00000000 
000017b6 l       .debug_str     00000000 
000017d5 l       .debug_str     00000000 
000017f4 l       .debug_str     00000000 
00001813 l       .debug_str     00000000 
00001834 l       .debug_str     00000000 
00001854 l       .debug_str     00000000 
00001879 l       .debug_str     00000000 
00001898 l       .debug_str     00000000 
000018b7 l       .debug_str     00000000 
00001921 l       .debug_str     00000000 
000018f3 l       .debug_str     00000000 
0000190d l       .debug_str     00000000 
00001933 l       .debug_str     00000000 
0000193e l       .debug_str     00000000 
0000195d l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
00001980 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
00000443 l       .debug_str     00000000 
00001a06 l       .debug_str     00000000 
00001990 l       .debug_str     00000000 
00001a1d l       .debug_str     00000000 
0000117c l       .debug_str     00000000 
00001a33 l       .debug_str     00000000 
00001a45 l       .debug_str     00000000 
00001a54 l       .debug_str     00000000 
000019a1 l       .debug_str     00000000 
0000045a l       .debug_str     00000000 
000019b7 l       .debug_str     00000000 
000019d0 l       .debug_str     00000000 
00001a7c l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
00001ab8 l       .debug_str     00000000 
00000413 l       .debug_str     00000000 
00000470 l       .debug_frame   00000000 
f0001522 l       .text  00000000 
f000156c l       .text  00000000 
f0001588 l       .text  00000000 
f000159c l       .text  00000000 
f00015b0 l       .text  00000000 
f00015b4 l       .text  00000000 
f0001680 l       .text  00000000 
f0001694 l       .text  00000000 
f00016c6 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic.c
f00016c6 l       .text  00000000 
f00016c6 l       .text  00000000 
f00016c6 l       .text  00000000 
f00016c6 l       .text  00000000 
f00016ce l       .text  00000000 
f00016ce l       .text  00000000 
f00016da l       .text  00000000 
f00016da l       .text  00000000 
f00016dc l       .text  00000000 
f00016dc l       .text  00000000 
f00016e2 l       .text  00000000 
f00016e2 l       .text  00000000 
f00016e4 l       .text  00000000 
f00016e8 l       .text  00000000 
f00016e8 l       .text  00000000 
f00016ea l       .text  00000000 
f00016ea l       .text  00000000 
f00016ee l       .text  00000000 
f00016ee l       .text  00000000 
f00016ee l       .text  00000000 
f00016ee l       .text  00000000 
f00016ee l       .text  00000000 
f00016ee l       .text  00000000 
f00016f6 l       .text  00000000 
f00016f6 l       .text  00000000 
f00016fc l       .text  00000000 
f00016fc l       .text  00000000 
f00016fe l       .text  00000000 
f00016fe l       .text  00000000 
f0001706 l       .text  00000000 
f0001706 l       .text  00000000 
f0001708 l       .text  00000000 
f0001708 l       .text  00000000 
f000170a l       .text  00000000 
f000170a l       .text  00000000 
f000170e l       .text  00000000 
f000170e l       .text  00000000 
00001880 l       .debug_loc     00000000 
000018a6 l       .debug_loc     00000000 
000018d9 l       .debug_loc     00000000 
000018fb l       .debug_loc     00000000 
00001916 l       .debug_loc     00000000 
00001938 l       .debug_loc     00000000 
0000196b l       .debug_loc     00000000 
00001993 l       .debug_loc     00000000 
000019bb l       .debug_loc     00000000 
000019d6 l       .debug_loc     00000000 
00001a06 l       .debug_loc     00000000 
00001a21 l       .debug_loc     00000000 
00001a3c l       .debug_loc     00000000 
00001a57 l       .debug_loc     00000000 
00001a72 l       .debug_loc     00000000 
00001a8d l       .debug_loc     00000000 
00001aa8 l       .debug_loc     00000000 
00001ac3 l       .debug_loc     00000000 
00001ade l       .debug_loc     00000000 
00001af9 l       .debug_loc     00000000 
00001b14 l       .debug_loc     00000000 
00001b30 l       .debug_loc     00000000 
00001b4b l       .debug_loc     00000000 
00001b69 l       .debug_loc     00000000 
00001b8f l       .debug_loc     00000000 
00001bc0 l       .debug_loc     00000000 
00001bdb l       .debug_loc     00000000 
00001bf6 l       .debug_loc     00000000 
00001c15 l       .debug_loc     00000000 
00001c34 l       .debug_loc     00000000 
00001c4f l       .debug_loc     00000000 
00001c6a l       .debug_loc     00000000 
00001c85 l       .debug_loc     00000000 
00001ca5 l       .debug_loc     00000000 
00001cc0 l       .debug_loc     00000000 
00001cdb l       .debug_loc     00000000 
00001cf6 l       .debug_loc     00000000 
00001d13 l       .debug_loc     00000000 
00001d2e l       .debug_loc     00000000 
00001d49 l       .debug_loc     00000000 
00001d64 l       .debug_loc     00000000 
00001d7f l       .debug_loc     00000000 
00001d9a l       .debug_loc     00000000 
00001dba l       .debug_loc     00000000 
00001dd5 l       .debug_loc     00000000 
00001df0 l       .debug_loc     00000000 
00001e0b l       .debug_loc     00000000 
00001e2b l       .debug_loc     00000000 
00001e46 l       .debug_loc     00000000 
00001e61 l       .debug_loc     00000000 
00001e7c l       .debug_loc     00000000 
00001e9c l       .debug_loc     00000000 
00001eb7 l       .debug_loc     00000000 
00001ed2 l       .debug_loc     00000000 
00001eed l       .debug_loc     00000000 
00001f0d l       .debug_loc     00000000 
00001f28 l       .debug_loc     00000000 
00001f43 l       .debug_loc     00000000 
00001f5e l       .debug_loc     00000000 
00001f7e l       .debug_loc     00000000 
00001f99 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001cc1 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000398 l       .debug_ranges  00000000 
00001ce1 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
00001cf7 l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
000002d2 l       .debug_str     00000000 
000002d9 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002ee l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000318 l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000870 l       .debug_str     00000000 
0000084b l       .debug_str     00000000 
0000085e l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
00001ec2 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
0000088f l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
00001d98 l       .debug_str     00000000 
00001332 l       .debug_str     00000000 
0000038f l       .debug_str     00000000 
00000320 l       .debug_ranges  00000000 
00000308 l       .debug_ranges  00000000 
00001476 l       .debug_str     00000000 
00000350 l       .debug_ranges  00000000 
00001ea3 l       .debug_str     00000000 
00000338 l       .debug_ranges  00000000 
00001d0d l       .debug_str     00000000 
00000847 l       .debug_str     00000000 
00001d34 l       .debug_str     00000000 
00001d26 l       .debug_str     00000000 
000008c9 l       .debug_str     00000000 
000008d3 l       .debug_str     00000000 
00001ab8 l       .debug_str     00000000 
00001d44 l       .debug_str     00000000 
00001d59 l       .debug_str     00000000 
00001d6f l       .debug_str     00000000 
000003c3 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
00001daa l       .debug_str     00000000 
00001ba4 l       .debug_str     00000000 
00000adc l       .debug_str     00000000 
00001d2b l       .debug_str     00000000 
00000ae0 l       .debug_str     00000000 
00000368 l       .debug_ranges  00000000 
000008ea l       .debug_str     00000000 
000008c0 l       .debug_str     00000000 
000008c3 l       .debug_str     00000000 
00000917 l       .debug_str     00000000 
00000906 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
00001d78 l       .debug_str     00000000 
0000092a l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
00001dc6 l       .debug_str     00000000 
00001eb3 l       .debug_str     00000000 
00000380 l       .debug_ranges  00000000 
00001de2 l       .debug_str     00000000 
00000f47 l       .debug_str     00000000 
00001dff l       .debug_str     00000000 
00001e16 l       .debug_str     00000000 
00001eb8 l       .debug_str     00000000 
00001d7e l       .debug_str     00000000 
000008ac l       .debug_str     00000000 
00001e20 l       .debug_str     00000000 
0000098e l       .debug_str     00000000 
000019a1 l       .debug_str     00000000 
00001ec9 l       .debug_str     00000000 
00001ed4 l       .debug_str     00000000 
000019b7 l       .debug_str     00000000 
00001ee7 l       .debug_str     00000000 
00001e3b l       .debug_str     00000000 
00001ef5 l       .debug_str     00000000 
00001e5a l       .debug_str     00000000 
00001e7f l       .debug_str     00000000 
00000bcc l       .debug_str     00000000 
00000413 l       .debug_str     00000000 
00001343 l       .debug_str     00000000 
00001337 l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
00000ac3 l       .debug_str     00000000 
00000584 l       .debug_frame   00000000 
f00016ee l       .text  00000000 
f000170e l       .text  00000000 
00000000 l    df *ABS*  00000000 rand_testutils.c
f000170e l       .text  00000000 
f000170e l       .text  00000000 
f000170e l       .text  00000000 
f0001710 l       .text  00000000 
f0001716 l       .text  00000000 
f0001718 l       .text  00000000 
f000171a l       .text  00000000 
f000171c l       .text  00000000 
f000171c l       .text  00000000 
f0001726 l       .text  00000000 
000101f4 l     O .logs.fields   00000014 rand_testutils_init.kLogFields
f0001728 l       .text  00000000 
f0001734 l       .text  00000000 
f0001734 l       .text  00000000 
f0001736 l       .text  00000000 
f0001736 l       .text  00000000 
f000174a l       .text  00000000 
f000174a l       .text  00000000 
f0001750 l       .text  00000000 
f0001752 l       .text  00000000 
f0001752 l       .text  00000000 
f0001774 l       .text  00000000 
f0001774 l       .text  00000000 
f000177e l       .text  00000000 
f0001786 l       .text  00000000 
f000178a l       .text  00000000 
f000178a l       .text  00000000 
f000178e l       .text  00000000 
f0001790 l       .text  00000000 
f0001798 l       .text  00000000 
f0001798 l       .text  00000000 
00010208 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields
0001021c l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields.3
00001fb4 l       .debug_loc     00000000 
00001ff0 l       .debug_loc     00000000 
00002021 l       .debug_loc     00000000 
0000205d l       .debug_loc     00000000 
00002083 l       .debug_loc     00000000 
000020a9 l       .debug_loc     00000000 
000020da l       .debug_loc     00000000 
0000210b l       .debug_loc     00000000 
00002131 l       .debug_loc     00000000 
00002159 l       .debug_loc     00000000 
00002174 l       .debug_loc     00000000 
0000218f l       .debug_loc     00000000 
000021aa l       .debug_loc     00000000 
000021c5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002078 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000410 l       .debug_ranges  00000000 
00000f66 l       .debug_str     00000000 
00000125 l       .debug_str     00000000 
00000d4e l       .debug_str     00000000 
00000d46 l       .debug_str     00000000 
000001b2 l       .debug_str     00000000 
000001bd l       .debug_str     00000000 
0000017a l       .debug_str     00000000 
00000192 l       .debug_str     00000000 
00002b92 l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00000176 l       .debug_str     00000000 
00000130 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
00000152 l       .debug_str     00000000 
00000164 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
0000209f l       .debug_str     00000000 
000020ba l       .debug_str     00000000 
00002149 l       .debug_str     00000000 
0000217b l       .debug_str     00000000 
0000217f l       .debug_str     00000000 
0000215e l       .debug_str     00000000 
00000339 l       .debug_str     00000000 
0000100c l       .debug_str     00000000 
00000340 l       .debug_str     00000000 
00000355 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
00000380 l       .debug_str     00000000 
00000391 l       .debug_str     00000000 
000003a3 l       .debug_str     00000000 
00000e2d l       .debug_str     00000000 
00000de5 l       .debug_str     00000000 
00000df2 l       .debug_str     00000000 
00000e06 l       .debug_str     00000000 
00000e17 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
00000443 l       .debug_str     00000000 
0000045a l       .debug_str     00000000 
0000211e l       .debug_str     00000000 
000020d6 l       .debug_str     00000000 
000020e3 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
000020e7 l       .debug_str     00000000 
00002134 l       .debug_str     00000000 
000020f3 l       .debug_str     00000000 
00000d4a l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
00002164 l       .debug_str     00000000 
00002183 l       .debug_str     00000000 
00002189 l       .debug_str     00000000 
00000510 l       .debug_str     00000000 
0000219a l       .debug_str     00000000 
0000218e l       .debug_str     00000000 
00002193 l       .debug_str     00000000 
00000da1 l       .debug_str     00000000 
000003f8 l       .debug_ranges  00000000 
0000038f l       .debug_str     00000000 
000021a6 l       .debug_str     00000000 
00002117 l       .debug_str     00000000 
00000dd0 l       .debug_str     00000000 
00000dbd l       .debug_str     00000000 
00000d6e l       .debug_str     00000000 
000020ee l       .debug_str     00000000 
00000d89 l       .debug_str     00000000 
00000db2 l       .debug_str     00000000 
00000d5b l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000648 l       .debug_frame   00000000 
f0001798 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_core_ibex_autogen.c
f0001798 l       .text  00000000 
f0001798 l       .text  00000000 
f0001798 l       .text  00000000 
f0001798 l       .text  00000000 
f000179a l       .text  00000000 
f000179c l       .text  00000000 
f00017a0 l       .text  00000000 
f00017a2 l       .text  00000000 
f00017a4 l       .text  00000000 
f00017a6 l       .text  00000000 
f00017a6 l       .text  00000000 
000021e0 l       .debug_loc     00000000 
000021fb l       .debug_loc     00000000 
00002216 l       .debug_loc     00000000 
00002231 l       .debug_loc     00000000 
0000224c l       .debug_loc     00000000 
0000227b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000021a8 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000440 l       .debug_ranges  00000000 
00000335 l       .debug_str     00000000 
000002d2 l       .debug_str     00000000 
000002d9 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002ee l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000318 l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
00002255 l       .debug_str     00000000 
000021dd l       .debug_str     00000000 
000021fb l       .debug_str     00000000 
00002219 l       .debug_str     00000000 
00002237 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000f50 l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
00000d4e l       .debug_str     00000000 
000008ea l       .debug_str     00000000 
000008c0 l       .debug_str     00000000 
000008c3 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
00000917 l       .debug_str     00000000 
00000906 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
00001d78 l       .debug_str     00000000 
0000092a l       .debug_str     00000000 
000008c9 l       .debug_str     00000000 
000008d3 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
00001ec2 l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
0000088f l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
0000226c l       .debug_str     00000000 
000007fc l       .debug_str     00000000 
00000a57 l       .debug_str     00000000 
00000a61 l       .debug_str     00000000 
00000413 l       .debug_str     00000000 
00000d5b l       .debug_str     00000000 
00000d4a l       .debug_str     00000000 
00002289 l       .debug_str     00000000 
000006f0 l       .debug_frame   00000000 
f00017a6 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f00017a6 l       .text  00000000 
f00017a6 l       .text  00000000 
f00017a6 l       .text  00000000 
f00017a8 l       .text  00000000 
f00017aa l       .text  00000000 
f00017b0 l       .text  00000000 
f00017b4 l       .text  00000000 
f00017b8 l       .text  00000000 
f00017bc l       .text  00000000 
f00017bc l       .text  00000000 
f00017c6 l       .text  00000000 
f00017c8 l       .text  00000000 
f00017c8 l       .text  00000000 
f00017ca l       .text  00000000 
f00017ca l       .text  00000000 
f00017d0 l       .text  00000000 
f00017d0 l       .text  00000000 
f00017da l       .text  00000000 
f00017dc l       .text  00000000 
f00017dc l       .text  00000000 
f00017f0 l       .text  00000000 
f00017f0 l       .text  00000000 
f00017f2 l       .text  00000000 
f00017f2 l       .text  00000000 
f00017fc l       .text  00000000 
f00017fe l       .text  00000000 
f00017fe l       .text  00000000 
f0001812 l       .text  00000000 
f0001812 l       .text  00000000 
f0001814 l       .text  00000000 
00010244 l     O .logs.fields   00000014 test_status_set.kLogFields.2
f0001814 l       .text  00000000 
f0001820 l       .text  00000000 
f0001820 l       .text  00000000 
f000182a l       .text  00000000 
f000182c l       .text  00000000 
f000182c l       .text  00000000 
00010230 l     O .logs.fields   00000014 test_status_set.kLogFields
f0001834 l       .text  00000000 
f0001840 l       .text  00000000 
f0001840 l       .text  00000000 
f000184a l       .text  00000000 
f000184c l       .text  00000000 
f000184c l       .text  00000000 
f0001854 l       .text  00000000 
f0001854 l       .text  00000000 
f0001854 l       .text  00000000 
00002296 l       .debug_loc     00000000 
000022b4 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002911 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
0000045a l       .debug_str     00000000 
00000125 l       .debug_str     00000000 
0000100c l       .debug_str     00000000 
000001b2 l       .debug_str     00000000 
000001bd l       .debug_str     00000000 
0000017a l       .debug_str     00000000 
00000192 l       .debug_str     00000000 
00002b92 l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00000176 l       .debug_str     00000000 
00000130 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
00000152 l       .debug_str     00000000 
00000164 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000340 l       .debug_str     00000000 
00000355 l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
00000380 l       .debug_str     00000000 
00000391 l       .debug_str     00000000 
000003a3 l       .debug_str     00000000 
0000293f l       .debug_str     00000000 
00002966 l       .debug_str     00000000 
00002958 l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
00001ec2 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
0000088f l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
00000443 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
0000117c l       .debug_str     00000000 
00000724 l       .debug_frame   00000000 
f0001854 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
f0001854 l       .text  00000000 
f0001854 l       .text  00000000 
f0001854 l       .text  00000000 
f0001854 l       .text  00000000 
f0001858 l       .text  00000000 
f0001858 l       .text  00000000 
f000185a l       .text  00000000 
f000185a l       .text  00000000 
000022c7 l       .debug_loc     00000000 
000022e2 l       .debug_loc     00000000 
00002309 l       .debug_loc     00000000 
00002330 l       .debug_loc     00000000 
0000234c l       .debug_loc     00000000 
00002379 l       .debug_loc     00000000 
000023a0 l       .debug_loc     00000000 
000023c7 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000297e l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000458 l       .debug_ranges  00000000 
000005f6 l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
00000649 l       .debug_str     00000000 
00000672 l       .debug_str     00000000 
00000667 l       .debug_str     00000000 
0000065a l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000029bc l       .debug_str     00000000 
00000d84 l       .debug_str     00000000 
000004b0 l       .debug_str     00000000 
000029a2 l       .debug_str     00000000 
0000299b l       .debug_str     00000000 
000029a9 l       .debug_str     00000000 
0000117c l       .debug_str     00000000 
000029cd l       .debug_str     00000000 
00000750 l       .debug_frame   00000000 
f000185a l       .text  00000000 
00000000 l    df *ABS*  00000000 ibex.c
f000185a l       .text  00000000 
f000185a l       .text  00000000 
f000185a l       .text  00000000 
f000185a l       .text  00000000 
f000185e l       .text  00000000 
f000185e l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f0001864 l       .text  00000000 
f0001864 l       .text  00000000 
f0001866 l       .text  00000000 
f0001866 l       .text  00000000 
f0001866 l       .text  00000000 
f0001866 l       .text  00000000 
f0001866 l       .text  00000000 
f0001866 l       .text  00000000 
f000186a l       .text  00000000 
f000186a l       .text  00000000 
f000186c l       .text  00000000 
f000186c l       .text  00000000 
000023e3 l       .debug_loc     00000000 
000023fe l       .debug_loc     00000000 
00002419 l       .debug_loc     00000000 
00002434 l       .debug_loc     00000000 
0000245b l       .debug_loc     00000000 
00002482 l       .debug_loc     00000000 
0000249e l       .debug_loc     00000000 
000024b9 l       .debug_loc     00000000 
000024d5 l       .debug_loc     00000000 
000024fc l       .debug_loc     00000000 
00002523 l       .debug_loc     00000000 
00002549 l       .debug_loc     00000000 
00002570 l       .debug_loc     00000000 
00002597 l       .debug_loc     00000000 
000025b3 l       .debug_loc     00000000 
000025ce l       .debug_loc     00000000 
000025f5 l       .debug_loc     00000000 
0000261c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000029df l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000004b0 l       .debug_ranges  00000000 
000005f6 l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
00001990 l       .debug_str     00000000 
00001a9a l       .debug_str     00000000 
00001980 l       .debug_str     00000000 
00001971 l       .debug_str     00000000 
00001a95 l       .debug_str     00000000 
000029fc l       .debug_str     00000000 
00000649 l       .debug_str     00000000 
0000065a l       .debug_str     00000000 
00000667 l       .debug_str     00000000 
00000672 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
0000061b l       .debug_str     00000000 
00000d7c l       .debug_str     00000000 
000006ab l       .debug_str     00000000 
00000698 l       .debug_str     00000000 
00000632 l       .debug_str     00000000 
00000480 l       .debug_ranges  00000000 
00002a0c l       .debug_str     00000000 
00000498 l       .debug_ranges  00000000 
0000063a l       .debug_str     00000000 
0000062d l       .debug_str     00000000 
000029a2 l       .debug_str     00000000 
000004b0 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
000007b0 l       .debug_frame   00000000 
f0001860 l       .text  00000000 
f0001866 l       .text  00000000 
f000186c l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
f000186c l       .text  00000000 
f000186c l       .text  00000000 
f000186c l       .text  00000000 
f000186e l       .text  00000000 
f0001874 l       .text  00000000 
f0001876 l       .text  00000000 
f0001884 l       .text  00000000 
f000188e l       .text  00000000 
f0001894 l       .text  00000000 
f0001894 l       .text  00000000 
f0001896 l       .text  00000000 
f000189a l       .text  00000000 
f000189a l       .text  00000000 
f00018a4 l       .text  00000000 
f00018a4 l       .text  00000000 
f00018a6 l       .text  00000000 
f00018aa l       .text  00000000 
f00018aa l       .text  00000000 
f00018ac l       .text  00000000 
f00018ac l       .text  00000000 
f00018ae l       .text  00000000 
f00018ae l       .text  00000000 
f00018b2 l       .text  00000000 
f00018b2 l       .text  00000000 
f00018b8 l       .text  00000000 
f00018c6 l       .text  00000000 
f00018c6 l       .text  00000000 
e0002074 l     O .bss   00000002 base_log_internal_core.global_log_counter
f00018ce l       .text  00000000 
f00018da l       .text  00000000 
f00018dc l       .text  00000000 
f00018e6 l       .text  00000000 
f00018e6 l       .text  00000000 
f00018f2 l       .text  00000000 
f00018f2 l       .text  00000000 
f00018f4 l       .text  00000000 
f00018f6 l       .text  00000000 
f00018fa l       .text  00000000 
f00018fa l       .text  00000000 
f0001904 l       .text  00000000 
f0001904 l       .text  00000000 
f000190e l       .text  00000000 
f000190e l       .text  00000000 
f000190e l       .text  00000000 
f000190e l       .text  00000000 
f000190e l       .text  00000000 
f0001910 l       .text  00000000 
f0001916 l       .text  00000000 
f0001916 l       .text  00000000 
f0001920 l       .text  00000000 
f0001920 l       .text  00000000 
f0001926 l       .text  00000000 
f0001926 l       .text  00000000 
f000192a l       .text  00000000 
f000192a l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192e l       .text  00000000 
f000192e l       .text  00000000 
f0001930 l       .text  00000000 
f0001934 l       .text  00000000 
f0001938 l       .text  00000000 
f000193a l       .text  00000000 
f000193a l       .text  00000000 
f000193c l       .text  00000000 
f000193c l       .text  00000000 
f000193e l       .text  00000000 
f000193e l       .text  00000000 
f0001942 l       .text  00000000 
f0001942 l       .text  00000000 
00002638 l       .debug_loc     00000000 
00002660 l       .debug_loc     00000000 
0000267b l       .debug_loc     00000000 
000026b7 l       .debug_loc     00000000 
000026d3 l       .debug_loc     00000000 
000026ee l       .debug_loc     00000000 
00002709 l       .debug_loc     00000000 
00002724 l       .debug_loc     00000000 
00002762 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002a21 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000004f8 l       .debug_ranges  00000000 
00000443 l       .debug_str     00000000 
00002a3d l       .debug_str     00000000 
00002a8b l       .debug_str     00000000 
00002a8f l       .debug_str     00000000 
00002a9d l       .debug_str     00000000 
000001a6 l       .debug_str     00000000 
00000f39 l       .debug_str     00000000 
00000eb3 l       .debug_str     00000000 
00000176 l       .debug_str     00000000 
00000130 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
00000152 l       .debug_str     00000000 
00000164 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
00000b32 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00002a50 l       .debug_str     00000000 
0000017a l       .debug_str     00000000 
00000183 l       .debug_str     00000000 
00002a63 l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
00002a6a l       .debug_str     00000000 
00002a72 l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
00001ec2 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
0000088f l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
000001a5 l       .debug_str     00000000 
00002ab9 l       .debug_str     00000000 
0000038f l       .debug_str     00000000 
000001bd l       .debug_str     00000000 
000001b2 l       .debug_str     00000000 
00000192 l       .debug_str     00000000 
00002b92 l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
00002ab1 l       .debug_str     00000000 
00002aa7 l       .debug_str     00000000 
0000084c l       .debug_frame   00000000 
f000190e l       .text  00000000 
f0001942 l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
f0001942 l     F .text  00000004 base_dev_null
e0002078 l     O .bss   00000008 base_stdout
f0001942 l       .text  00000000 
f0001942 l       .text  00000000 
f0001942 l       .text  00000000 
f0001944 l       .text  00000000 
f0001944 l       .text  00000000 
f0001946 l       .text  00000000 
f0001946 l       .text  00000000 
f0001946 l       .text  00000000 
f0001946 l       .text  00000000 
f0001946 l       .text  00000000 
f000194e l       .text  00000000 
f000194e l       .text  00000000 
f0001950 l       .text  00000000 
f000195c l     F .text  00000040 base_dev_uart
f0001958 l       .text  00000000 
f000195a l       .text  00000000 
f000195a l       .text  00000000 
f000195c l       .text  00000000 
f000195c l       .text  00000000 
f000195c l       .text  00000000 
f000195c l       .text  00000000 
f000195c l       .text  00000000 
f000195e l       .text  00000000 
f000195e l       .text  00000000 
f0001968 l       .text  00000000 
f0001968 l       .text  00000000 
f0001968 l       .text  00000000 
f000196a l       .text  00000000 
f000196c l       .text  00000000 
f000196e l       .text  00000000 
f0001970 l       .text  00000000 
f0001972 l       .text  00000000 
f0001972 l       .text  00000000 
f000197a l       .text  00000000 
f000197e l       .text  00000000 
f000197e l       .text  00000000 
f0001980 l       .text  00000000 
f0001982 l       .text  00000000 
f0001986 l       .text  00000000 
f0001986 l       .text  00000000 
f0001988 l       .text  00000000 
f000198a l       .text  00000000 
f000198c l       .text  00000000 
f000198c l       .text  00000000 
f000199c l       .text  00000000 
f000199c l       .text  00000000 
f000199c l       .text  00000000 
f000199c l       .text  00000000 
f000199c l       .text  00000000 
f000199e l       .text  00000000 
f00019a0 l       .text  00000000 
f00019ae l       .text  00000000 
f00019b6 l       .text  00000000 
f00019b6 l       .text  00000000 
f00019bc l       .text  00000000 
f00019bc l       .text  00000000 
f00019be l       .text  00000000 
f00019be l       .text  00000000 
f00019c0 l       .text  00000000 
f00019c0 l       .text  00000000 
f00019c4 l       .text  00000000 
f00019c6 l       .text  00000000 
f00019c8 l       .text  00000000 
f00019c8 l       .text  00000000 
f00019ce l       .text  00000000 
f00019ce l       .text  00000000 
f00019ce l       .text  00000000 
f00019ce l       .text  00000000 
f00019ce l       .text  00000000 
f00019d6 l       .text  00000000 
f00019dc l       .text  00000000 
f00019dc l       .text  00000000 
f00019de l       .text  00000000 
f00019de l       .text  00000000 
f00019e4 l       .text  00000000 
f00019e6 l       .text  00000000 
f00019e8 l       .text  00000000 
f00019e8 l       .text  00000000 
f00019e8 l       .text  00000000 
f00019e8 l       .text  00000000 
f00019e8 l       .text  00000000 
f00019e8 l       .text  00000000 
f00019ea l       .text  00000000 
f0001a04 l       .text  00000000 
f0001a06 l       .text  00000000 
f0001a08 l       .text  00000000 
f0001a0a l       .text  00000000 
f0001a0c l       .text  00000000 
f0001a0e l       .text  00000000 
f0001a10 l       .text  00000000 
f0001a18 l       .text  00000000 
f0001a18 l       .text  00000000 
f0001a1a l       .text  00000000 
f0001a1a l       .text  00000000 
f0001a1e l       .text  00000000 
f0001a22 l       .text  00000000 
f0001a36 l       .text  00000000 
f0001a36 l       .text  00000000 
f0001a40 l       .text  00000000 
f0001a44 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a4a l       .text  00000000 
f0001a4c l       .text  00000000 
f0001a4c l       .text  00000000 
f0001a4e l       .text  00000000 
f0001a50 l       .text  00000000 
f0001a56 l       .text  00000000 
f0001a56 l       .text  00000000 
f0001a58 l       .text  00000000 
f0001a58 l       .text  00000000 
f0001a5c l       .text  00000000 
f0001a5c l       .text  00000000 
f0001a68 l       .text  00000000 
f0001a6c l       .text  00000000 
f0001a6c l       .text  00000000 
f0001a78 l       .text  00000000 
f0001a78 l       .text  00000000 
f0001a80 l       .text  00000000 
f0001a80 l       .text  00000000 
f0001a84 l       .text  00000000 
f0001a84 l       .text  00000000 
f0001a92 l       .text  00000000 
f0001a92 l       .text  00000000 
f0001a96 l       .text  00000000 
f0001a9e l       .text  00000000 
f0001aa2 l       .text  00000000 
f0001aa2 l       .text  00000000 
f0001aa6 l       .text  00000000 
f0001aac l       .text  00000000 
f0001ab0 l       .text  00000000 
f0001ab2 l       .text  00000000 
f0001ab6 l       .text  00000000 
f0001ab6 l       .text  00000000 
f0001aba l       .text  00000000 
f0001ac0 l       .text  00000000 
f0001ac0 l       .text  00000000 
f0001ac4 l       .text  00000000 
f0001ad8 l       .text  00000000 
f0001ad8 l       .text  00000000 
f0001ada l       .text  00000000 
f0001ae0 l       .text  00000000 
f0001ae4 l       .text  00000000 
f0001ae8 l       .text  00000000 
f0001ae8 l       .text  00000000 
f0001af0 l       .text  00000000 
f0001af2 l       .text  00000000 
f0001b00 l       .text  00000000 
f0001b00 l       .text  00000000 
f0001b04 l       .text  00000000 
f0001b10 l       .text  00000000 
f0001b10 l       .text  00000000 
f0001b14 l       .text  00000000 
f0001b14 l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b24 l       .text  00000000 
f0001b28 l       .text  00000000 
f0001b28 l       .text  00000000 
f0001b2c l       .text  00000000 
f0003cae l     O .rodata        00000010 kDigitsLow
f0001b3e l       .text  00000000 
f0001b3e l       .text  00000000 
f0001b46 l       .text  00000000 
f0001b4e l       .text  00000000 
f0001b4e l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b5c l       .text  00000000 
f0001b5c l       .text  00000000 
f0001b66 l       .text  00000000 
f0001b66 l       .text  00000000 
f0001b6e l       .text  00000000 
f0001b6e l       .text  00000000 
f0001b72 l       .text  00000000 
f0003cdb l     O .rodata        00000010 kDigitsHigh
f0001b7c l       .text  00000000 
f0001b7c l       .text  00000000 
f0001b86 l       .text  00000000 
f0001b86 l       .text  00000000 
f0001b8a l       .text  00000000 
f0001b94 l       .text  00000000 
f0001b94 l       .text  00000000 
f0001b98 l       .text  00000000 
f0001ba2 l       .text  00000000 
f0001ba2 l       .text  00000000 
f0001baa l       .text  00000000 
f0001baa l       .text  00000000 
f0001bae l       .text  00000000 
f0001bb8 l       .text  00000000 
f0001bb8 l       .text  00000000 
f0001bc2 l       .text  00000000 
f0001bc6 l       .text  00000000 
f0001bca l       .text  00000000 
f0001bca l       .text  00000000 
f0001bd6 l       .text  00000000 
f0001bd6 l       .text  00000000 
f0001bda l       .text  00000000 
f0001be4 l       .text  00000000 
f0001be8 l       .text  00000000 
f0001be8 l       .text  00000000 
f0001bea l       .text  00000000 
f0001bea l       .text  00000000 
f0001bee l       .text  00000000 
f0001bee l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bfc l       .text  00000000 
f0001bfc l       .text  00000000 
f0001c00 l       .text  00000000 
f0001c0c l       .text  00000000 
f0001c0c l       .text  00000000 
f0001c10 l       .text  00000000 
f0001c10 l       .text  00000000 
f0001c1e l       .text  00000000 
f0001c1e l       .text  00000000 
f0001c28 l       .text  00000000 
f0001c28 l       .text  00000000 
f0001c2c l       .text  00000000 
f0001c2c l       .text  00000000 
f0001f5a l     F .text  0000007e write_digits
f0001c42 l       .text  00000000 
f0001c42 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c52 l       .text  00000000 
f0001c52 l       .text  00000000 
f0001c54 l       .text  00000000 
f0001c5e l       .text  00000000 
f0001c5e l       .text  00000000 
f0001c68 l       .text  00000000 
f0001c68 l       .text  00000000 
f0001c6a l       .text  00000000 
f0001c6a l       .text  00000000 
f0001c6c l       .text  00000000 
f0001c6c l       .text  00000000 
f0001c70 l       .text  00000000 
f0001c70 l       .text  00000000 
f0001c74 l       .text  00000000 
f0001c76 l       .text  00000000 
f0001c7a l       .text  00000000 
f0001c7a l       .text  00000000 
f0001c7e l       .text  00000000 
f0001c7e l       .text  00000000 
f0001c8a l       .text  00000000 
f0001c8a l       .text  00000000 
f0001c8c l       .text  00000000 
f0001c8c l       .text  00000000 
f0001c8e l       .text  00000000 
f0001c8e l       .text  00000000 
f0001c96 l       .text  00000000 
f0001c96 l       .text  00000000 
f0001c9a l       .text  00000000 
f0001c9a l       .text  00000000 
f0001ca8 l       .text  00000000 
f0001ca8 l       .text  00000000 
f0001caa l       .text  00000000 
f0001cb8 l       .text  00000000 
f0001cb8 l       .text  00000000 
f0001cbc l       .text  00000000 
f0001cbc l       .text  00000000 
f0001cc0 l       .text  00000000 
f0001cc0 l       .text  00000000 
f0001cce l       .text  00000000 
f0001cce l       .text  00000000 
f0001cd2 l       .text  00000000 
f0001cd2 l       .text  00000000 
f0001cda l       .text  00000000 
f0001cda l       .text  00000000 
f0001cdc l       .text  00000000 
f0001cdc l       .text  00000000 
f0001cde l       .text  00000000 
f0001cde l       .text  00000000 
f0001cf2 l       .text  00000000 
f0001cf2 l       .text  00000000 
f0001cf4 l       .text  00000000 
f0001d02 l       .text  00000000 
f0001d02 l       .text  00000000 
f0001d04 l       .text  00000000 
f0001d04 l       .text  00000000 
f0001d06 l       .text  00000000 
f0001d0e l       .text  00000000 
f0001d12 l       .text  00000000 
f0001d14 l       .text  00000000 
f0001d1e l       .text  00000000 
f0001d1e l       .text  00000000 
f0001d22 l       .text  00000000 
f0001d2c l       .text  00000000 
f0001d2c l       .text  00000000 
f0001d30 l       .text  00000000 
f0001d3c l       .text  00000000 
f0001d3c l       .text  00000000 
f0001d40 l       .text  00000000 
f0001d40 l       .text  00000000 
f0001d4a l       .text  00000000 
f0001d4a l       .text  00000000 
f0001d52 l       .text  00000000 
f0001d52 l       .text  00000000 
f0001d56 l       .text  00000000 
f0001d5e l       .text  00000000 
f0001d5e l       .text  00000000 
f0001d68 l       .text  00000000 
f0001d68 l       .text  00000000 
f0001d72 l       .text  00000000 
f0001d72 l       .text  00000000 
f0001d76 l       .text  00000000 
f0001d7e l       .text  00000000 
f0001d7e l       .text  00000000 
f0001d88 l       .text  00000000 
f0001d8a l       .text  00000000 
f0001d8a l       .text  00000000 
f0001d8e l       .text  00000000 
f0001d98 l       .text  00000000 
f0001d98 l       .text  00000000 
f0001da0 l       .text  00000000 
f0001da0 l       .text  00000000 
f0001da4 l       .text  00000000 
f0001dac l       .text  00000000 
f0001dac l       .text  00000000 
f0001e76 l     F .text  000000e4 hex_dump
f0001db6 l       .text  00000000 
f0001db8 l       .text  00000000 
f0003ceb l     O .rodata        0000000f kUnknownSpec
f0001db8 l       .text  00000000 
f0001dc2 l       .text  00000000 
f0001dc2 l       .text  00000000 
f0001dc6 l       .text  00000000 
f0001dc8 l       .text  00000000 
f0001dc8 l       .text  00000000 
f0001dcc l       .text  00000000 
f0001dd2 l       .text  00000000 
f0001dd2 l       .text  00000000 
f0001dd6 l       .text  00000000 
f0001de2 l       .text  00000000 
f0001de2 l       .text  00000000 
f0001de4 l       .text  00000000 
f0001de4 l       .text  00000000 
f0001df8 l       .text  00000000 
f0001df8 l       .text  00000000 
f0001dfc l       .text  00000000 
f0001e0a l       .text  00000000 
f0001e0a l       .text  00000000 
f0001e0e l       .text  00000000 
f0001e0e l       .text  00000000 
f0001e14 l       .text  00000000 
f0001e14 l       .text  00000000 
f0001e16 l       .text  00000000 
f0001e16 l       .text  00000000 
f0001e18 l       .text  00000000 
f0001e18 l       .text  00000000 
f0001e20 l       .text  00000000 
f0001e22 l       .text  00000000 
f0001e24 l       .text  00000000 
f0001e2a l       .text  00000000 
f0001e2a l       .text  00000000 
f0001e36 l       .text  00000000 
f0003cbe l     O .rodata        00000011 kErrorNul
f0001e36 l       .text  00000000 
f0001e40 l       .text  00000000 
f0001e40 l       .text  00000000 
f0001e44 l       .text  00000000 
f0001e48 l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e4a l       .text  00000000 
f0001e5a l       .text  00000000 
f0001e5e l       .text  00000000 
f0001e6a l       .text  00000000 
f0003ccf l     O .rodata        0000000c kErrorTooWide
f0001e6a l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e78 l       .text  00000000 
f0001e90 l       .text  00000000 
f0001e92 l       .text  00000000 
f0001e94 l       .text  00000000 
f0001e96 l       .text  00000000 
f0001e98 l       .text  00000000 
f0001e9c l       .text  00000000 
f0001e9c l       .text  00000000 
f0001ea0 l       .text  00000000 
f0001ea4 l       .text  00000000 
f0001ea4 l       .text  00000000 
f0001eae l       .text  00000000 
f0001eae l       .text  00000000 
f0001eb0 l       .text  00000000 
f0001eb2 l       .text  00000000 
f0001eb8 l       .text  00000000 
f0001eb8 l       .text  00000000 
f0001ebc l       .text  00000000 
f0001ec0 l       .text  00000000 
f0001ec0 l       .text  00000000 
f0001ec8 l       .text  00000000 
f0001ec8 l       .text  00000000 
f0001eca l       .text  00000000 
f0001ecc l       .text  00000000 
f0001ecc l       .text  00000000 
f0001ece l       .text  00000000 
f0001ece l       .text  00000000 
f0001ed4 l       .text  00000000 
f0001ed4 l       .text  00000000 
f0001ed6 l       .text  00000000 
f0001ed6 l       .text  00000000 
f0001eda l       .text  00000000 
f0001ede l       .text  00000000 
f0001ee4 l       .text  00000000 
f0001ee4 l       .text  00000000 
f0001eea l       .text  00000000 
f0001ef2 l       .text  00000000 
f0001ef2 l       .text  00000000 
f0001ef4 l       .text  00000000 
f0001ef8 l       .text  00000000 
f0001efc l       .text  00000000 
f0001f02 l       .text  00000000 
f0001f06 l       .text  00000000 
f0001f0a l       .text  00000000 
f0001f0c l       .text  00000000 
f0001f12 l       .text  00000000 
f0001f14 l       .text  00000000 
f0001f1c l       .text  00000000 
f0001f22 l       .text  00000000 
f0001f26 l       .text  00000000 
f0001f26 l       .text  00000000 
f0001f28 l       .text  00000000 
f0001f2a l       .text  00000000 
f0001f2a l       .text  00000000 
f0001f2c l       .text  00000000 
f0001f2e l       .text  00000000 
f0001f32 l       .text  00000000 
f0001f32 l       .text  00000000 
f0001f34 l       .text  00000000 
f0001f3a l       .text  00000000 
f0001f3a l       .text  00000000 
f0001f3c l       .text  00000000 
f0001f44 l       .text  00000000 
f0001f46 l       .text  00000000 
f0001f4a l       .text  00000000 
f0001f4c l       .text  00000000 
f0001f4e l       .text  00000000 
f0001f50 l       .text  00000000 
f0001f5a l       .text  00000000 
f0001f5a l       .text  00000000 
f0001f5a l       .text  00000000 
f0001f5a l       .text  00000000 
f0001f5a l       .text  00000000 
f0001f5c l       .text  00000000 
f0001f5e l       .text  00000000 
f0001f60 l       .text  00000000 
f0001f60 l       .text  00000000 
f0001f62 l       .text  00000000 
f0001f64 l       .text  00000000 
f0001f68 l       .text  00000000 
f0001f68 l       .text  00000000 
f0001f6a l       .text  00000000 
f0001f6a l       .text  00000000 
f0001f76 l       .text  00000000 
f0001f76 l       .text  00000000 
f0001f78 l       .text  00000000 
f0001f7c l       .text  00000000 
f0001f84 l       .text  00000000 
f0001f84 l       .text  00000000 
f0001f86 l       .text  00000000 
f0001f8a l       .text  00000000 
f0001f8e l       .text  00000000 
f0001f8e l       .text  00000000 
f0001f90 l       .text  00000000 
f0001f90 l       .text  00000000 
f0001f94 l       .text  00000000 
f0001f9a l       .text  00000000 
f0001f9a l       .text  00000000 
f0001f9c l       .text  00000000 
f0001f9e l       .text  00000000 
f0001fa0 l       .text  00000000 
f0001fa4 l       .text  00000000 
f0001fa8 l       .text  00000000 
f0001fac l       .text  00000000 
f0001fac l       .text  00000000 
f0001fb6 l       .text  00000000 
f0001fba l       .text  00000000 
f0001fbc l       .text  00000000 
f0001fc0 l       .text  00000000 
f0001fc4 l       .text  00000000 
f0001fc6 l       .text  00000000 
f0001fc8 l       .text  00000000 
f0001fca l       .text  00000000 
f0001fca l       .text  00000000 
f0001fd0 l       .text  00000000 
f0001fd2 l       .text  00000000 
f0001fd2 l       .text  00000000 
f0001fd8 l       .text  00000000 
f0001fd8 l       .text  00000000 
0000277f l       .debug_loc     00000000 
000027ab l       .debug_loc     00000000 
000027c6 l       .debug_loc     00000000 
000027ec l       .debug_loc     00000000 
00002818 l       .debug_loc     00000000 
00002849 l       .debug_loc     00000000 
0000287a l       .debug_loc     00000000 
000028b6 l       .debug_loc     00000000 
000028e7 l       .debug_loc     00000000 
0000290e l       .debug_loc     00000000 
0000293f l       .debug_loc     00000000 
0000295a l       .debug_loc     00000000 
00002976 l       .debug_loc     00000000 
00002991 l       .debug_loc     00000000 
000029b7 l       .debug_loc     00000000 
000029dd l       .debug_loc     00000000 
00002a19 l       .debug_loc     00000000 
00002b24 l       .debug_loc     00000000 
00002c7e l       .debug_loc     00000000 
00002d7e l       .debug_loc     00000000 
00002e89 l       .debug_loc     00000000 
00002ea9 l       .debug_loc     00000000 
00002ecf l       .debug_loc     00000000 
00002eff l       .debug_loc     00000000 
00003137 l       .debug_loc     00000000 
00003153 l       .debug_loc     00000000 
0000316e l       .debug_loc     00000000 
000032e3 l       .debug_loc     00000000 
00003433 l       .debug_loc     00000000 
00003547 l       .debug_loc     00000000 
0000356d l       .debug_loc     00000000 
00003588 l       .debug_loc     00000000 
000035a3 l       .debug_loc     00000000 
000035be l       .debug_loc     00000000 
000035d9 l       .debug_loc     00000000 
000035f4 l       .debug_loc     00000000 
00003610 l       .debug_loc     00000000 
0000362b l       .debug_loc     00000000 
00003646 l       .debug_loc     00000000 
00003661 l       .debug_loc     00000000 
0000367c l       .debug_loc     00000000 
000036ae l       .debug_loc     00000000 
000036e1 l       .debug_loc     00000000 
000036fc l       .debug_loc     00000000 
0000374f l       .debug_loc     00000000 
00003782 l       .debug_loc     00000000 
0000379d l       .debug_loc     00000000 
000037b8 l       .debug_loc     00000000 
000037d3 l       .debug_loc     00000000 
000037ee l       .debug_loc     00000000 
00003809 l       .debug_loc     00000000 
00003824 l       .debug_loc     00000000 
0000383f l       .debug_loc     00000000 
0000385a l       .debug_loc     00000000 
00003875 l       .debug_loc     00000000 
00003890 l       .debug_loc     00000000 
000038ab l       .debug_loc     00000000 
000038c7 l       .debug_loc     00000000 
000038e6 l       .debug_loc     00000000 
00003901 l       .debug_loc     00000000 
00003932 l       .debug_loc     00000000 
00003958 l       .debug_loc     00000000 
00003989 l       .debug_loc     00000000 
000039ba l       .debug_loc     00000000 
000039d5 l       .debug_loc     00000000 
000039f0 l       .debug_loc     00000000 
00003a0b l       .debug_loc     00000000 
00003a3c l       .debug_loc     00000000 
00003a57 l       .debug_loc     00000000 
00003a72 l       .debug_loc     00000000 
00003a8e l       .debug_loc     00000000 
00003ab4 l       .debug_loc     00000000 
00003ae5 l       .debug_loc     00000000 
00003b00 l       .debug_loc     00000000 
00003b1b l       .debug_loc     00000000 
00003b41 l       .debug_loc     00000000 
00003b67 l       .debug_loc     00000000 
00003b82 l       .debug_loc     00000000 
00003b9d l       .debug_loc     00000000 
00003bb8 l       .debug_loc     00000000 
00003bd3 l       .debug_loc     00000000 
00003bf2 l       .debug_loc     00000000 
00003c0d l       .debug_loc     00000000 
00003c28 l       .debug_loc     00000000 
00003c44 l       .debug_loc     00000000 
00003c5f l       .debug_loc     00000000 
00003c7a l       .debug_loc     00000000 
00003c99 l       .debug_loc     00000000 
00003cbf l       .debug_loc     00000000 
00003cf0 l       .debug_loc     00000000 
00003d48 l       .debug_loc     00000000 
00003d92 l       .debug_loc     00000000 
00003de4 l       .debug_loc     00000000 
00003e21 l       .debug_loc     00000000 
00003e5d l       .debug_loc     00000000 
00003ec7 l       .debug_loc     00000000 
00003f10 l       .debug_loc     00000000 
00003f7a l       .debug_loc     00000000 
00003fa0 l       .debug_loc     00000000 
00003fbb l       .debug_loc     00000000 
00003fd6 l       .debug_loc     00000000 
00003ffd l       .debug_loc     00000000 
00004045 l       .debug_loc     00000000 
0000406b l       .debug_loc     00000000 
00004091 l       .debug_loc     00000000 
000040b7 l       .debug_loc     00000000 
000040d2 l       .debug_loc     00000000 
00004102 l       .debug_loc     00000000 
00004128 l       .debug_loc     00000000 
0000415a l       .debug_loc     00000000 
00004198 l       .debug_loc     00000000 
000041c7 l       .debug_loc     00000000 
000041e2 l       .debug_loc     00000000 
00004215 l       .debug_loc     00000000 
00004230 l       .debug_loc     00000000 
0000426c l       .debug_loc     00000000 
00004292 l       .debug_loc     00000000 
000042ad l       .debug_loc     00000000 
000042c8 l       .debug_loc     00000000 
000042e3 l       .debug_loc     00000000 
00004339 l       .debug_loc     00000000 
00004368 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002ac4 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000648 l       .debug_ranges  00000000 
00002ae2 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00002b01 l       .debug_str     00000000 
00002b19 l       .debug_str     00000000 
00002b0d l       .debug_str     00000000 
00002112 l       .debug_str     00000000 
00002e02 l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
00002b27 l       .debug_str     00000000 
00002b31 l       .debug_str     00000000 
00002e5a l       .debug_str     00000000 
00002b3f l       .debug_str     00000000 
00003699 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
00003612 l       .debug_str     00000000 
00002d17 l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
00002ee1 l       .debug_str     00000000 
00001b1d l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
00002ef1 l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
00002b49 l       .debug_str     00000000 
00002b55 l       .debug_str     00000000 
00002b62 l       .debug_str     00000000 
00002bb1 l       .debug_str     00000000 
00002ba0 l       .debug_str     00000000 
00002b79 l       .debug_str     00000000 
00002b88 l       .debug_str     00000000 
00002b97 l       .debug_str     00000000 
00002bc4 l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
000002d2 l       .debug_str     00000000 
000002d9 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002ee l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000318 l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00002bcf l       .debug_str     00000000 
00002bd8 l       .debug_str     00000000 
00002be3 l       .debug_str     00000000 
00002beb l       .debug_str     00000000 
00002bf7 l       .debug_str     00000000 
00002c03 l       .debug_str     00000000 
00002c10 l       .debug_str     00000000 
00002c20 l       .debug_str     00000000 
00002c31 l       .debug_str     00000000 
00002c3e l       .debug_str     00000000 
00002c47 l       .debug_str     00000000 
00002c51 l       .debug_str     00000000 
00002c5b l       .debug_str     00000000 
00002c66 l       .debug_str     00000000 
00002c70 l       .debug_str     00000000 
00002c7b l       .debug_str     00000000 
00002c89 l       .debug_str     00000000 
000003c3 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
00000d28 l       .debug_str     00000000 
00000d1f l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
00002ca1 l       .debug_str     00000000 
00002c92 l       .debug_str     00000000 
00002c96 l       .debug_str     00000000 
0000019d l       .debug_str     00000000 
00002dc1 l       .debug_str     00000000 
00002cb5 l       .debug_str     00000000 
00000ff4 l       .debug_str     00000000 
00000d23 l       .debug_str     00000000 
00002dcf l       .debug_str     00000000 
0000038f l       .debug_str     00000000 
00002cc5 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
000001a6 l       .debug_str     00000000 
00002ab1 l       .debug_str     00000000 
00002aa7 l       .debug_str     00000000 
00002a72 l       .debug_str     00000000 
00000510 l       .debug_ranges  00000000 
00002ddd l       .debug_str     00000000 
00002e67 l       .debug_str     00000000 
00002ea2 l       .debug_str     00000000 
000005f0 l       .debug_ranges  00000000 
00002d5b l       .debug_str     00000000 
00000528 l       .debug_ranges  00000000 
00000550 l       .debug_ranges  00000000 
00000570 l       .debug_ranges  00000000 
00000588 l       .debug_ranges  00000000 
000005c0 l       .debug_ranges  00000000 
000005a8 l       .debug_ranges  00000000 
000005d8 l       .debug_ranges  00000000 
00002cdf l       .debug_str     00000000 
00002cf5 l       .debug_str     00000000 
00004219 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
00002cfe l       .debug_str     00000000 
00002d3c l       .debug_str     00000000 
00002d29 l       .debug_str     00000000 
00002d06 l       .debug_str     00000000 
00000e34 l       .debug_str     00000000 
00002d1f l       .debug_str     00000000 
00002d45 l       .debug_str     00000000 
00002d57 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000b32 l       .debug_str     00000000 
00003067 l       .debug_str     00000000 
00002d66 l       .debug_str     00000000 
00002d60 l       .debug_str     00000000 
00002d6d l       .debug_str     00000000 
00002d75 l       .debug_str     00000000 
000004b0 l       .debug_str     00000000 
00002d79 l       .debug_str     00000000 
00001c8c l       .debug_str     00000000 
00003080 l       .debug_str     00000000 
00002d7d l       .debug_str     00000000 
00002e51 l       .debug_str     00000000 
000036f4 l       .debug_str     00000000 
00002ed6 l       .debug_str     00000000 
00002ecd l       .debug_str     00000000 
00002ee8 l       .debug_str     00000000 
00000a5d l       .debug_str     00000000 
00002deb l       .debug_str     00000000 
00002df9 l       .debug_str     00000000 
00002e71 l       .debug_str     00000000 
00002117 l       .debug_str     00000000 
00002e07 l       .debug_str     00000000 
00002d8c l       .debug_str     00000000 
00002bad l       .debug_str     00000000 
00002e14 l       .debug_str     00000000 
00002e3e l       .debug_str     00000000 
00002e8e l       .debug_str     00000000 
00002b92 l       .debug_str     00000000 
00000630 l       .debug_ranges  00000000 
00002e81 l       .debug_str     00000000 
00002e9d l       .debug_str     00000000 
00002eb0 l       .debug_str     00000000 
00002b83 l       .debug_str     00000000 
00000610 l       .debug_ranges  00000000 
00002e7a l       .debug_str     00000000 
00002ebf l       .debug_str     00000000 
00002ec8 l       .debug_str     00000000 
00002d9e l       .debug_str     00000000 
00002db2 l       .debug_str     00000000 
00002e21 l       .debug_str     00000000 
00002e30 l       .debug_str     00000000 
00002dba l       .debug_str     00000000 
00000890 l       .debug_frame   00000000 
f0001946 l       .text  00000000 
f000195c l       .text  00000000 
f000199c l       .text  00000000 
f00019ce l       .text  00000000 
f00019e8 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001f5a l       .text  00000000 
f0001fd8 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f0001fd8 l       .text  00000000 
f0001fd8 l       .text  00000000 
f0001fd8 l       .text  00000000 
f0001fd8 l       .text  00000000 
f0001fdc l       .text  00000000 
f0001fe4 l       .text  00000000 
f0001fe4 l       .text  00000000 
f0001fe8 l       .text  00000000 
f0001fe8 l       .text  00000000 
f0001ff4 l       .text  00000000 
f0001ff6 l       .text  00000000 
f0001ff6 l       .text  00000000 
f0001ffa l       .text  00000000 
f0002006 l       .text  00000000 
f0002008 l       .text  00000000 
f000200c l       .text  00000000 
f000200e l       .text  00000000 
f000200e l       .text  00000000 
f0002012 l       .text  00000000 
f0002012 l       .text  00000000 
f0002016 l       .text  00000000 
f0002016 l       .text  00000000 
f0002018 l       .text  00000000 
f0002018 l       .text  00000000 
f000201c l       .text  00000000 
f000201c l       .text  00000000 
f000201e l       .text  00000000 
f0002022 l       .text  00000000 
f0002022 l       .text  00000000 
f0002026 l       .text  00000000 
f000202a l       .text  00000000 
f0002030 l       .text  00000000 
f0002030 l       .text  00000000 
f0002034 l       .text  00000000 
f0002036 l       .text  00000000 
f0002036 l       .text  00000000 
f000203c l       .text  00000000 
f000203c l       .text  00000000 
f0002042 l       .text  00000000 
f0002042 l       .text  00000000 
f0002044 l       .text  00000000 
f0002044 l       .text  00000000 
f000204a l       .text  00000000 
f000204a l       .text  00000000 
00004383 l       .debug_loc     00000000 
0000439e l       .debug_loc     00000000 
000043cf l       .debug_loc     00000000 
000043f5 l       .debug_loc     00000000 
0000441b l       .debug_loc     00000000 
00004436 l       .debug_loc     00000000 
00004458 l       .debug_loc     00000000 
0000447f l       .debug_loc     00000000 
000044a6 l       .debug_loc     00000000 
000044ca l       .debug_loc     00000000 
000044fb l       .debug_loc     00000000 
00004516 l       .debug_loc     00000000 
00004547 l       .debug_loc     00000000 
000045a1 l       .debug_loc     00000000 
000045dd l       .debug_loc     00000000 
00004601 l       .debug_loc     00000000 
00004626 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002ef7 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000006f8 l       .debug_ranges  00000000 
00002f13 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
00002f23 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00003051 l       .debug_str     00000000 
00002f30 l       .debug_str     00000000 
00002f34 l       .debug_str     00000000 
00002f3f l       .debug_str     00000000 
00002f48 l       .debug_str     00000000 
00002f59 l       .debug_str     00000000 
00002f6b l       .debug_str     00000000 
00002f75 l       .debug_str     00000000 
00002f84 l       .debug_str     00000000 
00002f96 l       .debug_str     00000000 
00002fa9 l       .debug_str     00000000 
00002fbd l       .debug_str     00000000 
00002fc6 l       .debug_str     00000000 
00002fd2 l       .debug_str     00000000 
00002fe1 l       .debug_str     00000000 
00002feb l       .debug_str     00000000 
00002ff8 l       .debug_str     00000000 
00003002 l       .debug_str     00000000 
00003013 l       .debug_str     00000000 
0000019d l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
00002c89 l       .debug_str     00000000 
00003062 l       .debug_str     00000000 
00003070 l       .debug_str     00000000 
000000fc l       .debug_str     00000000 
000010a8 l       .debug_str     00000000 
000008ea l       .debug_str     00000000 
000008c0 l       .debug_str     00000000 
000008c3 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
00000917 l       .debug_str     00000000 
00000906 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
00001d78 l       .debug_str     00000000 
00003084 l       .debug_str     00000000 
0000305d l       .debug_str     00000000 
00003092 l       .debug_str     00000000 
00002d79 l       .debug_str     00000000 
000006e0 l       .debug_ranges  00000000 
00003079 l       .debug_str     00000000 
0000012e l       .debug_str     00000000 
00003067 l       .debug_str     00000000 
00002d66 l       .debug_str     00000000 
00000c27 l       .debug_str     00000000 
00002d7d l       .debug_str     00000000 
0000309c l       .debug_str     00000000 
00003080 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
00000a84 l       .debug_frame   00000000 
f000204a l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart_autogen.c
f000204a l       .text  00000000 
f000204a l       .text  00000000 
f000204a l       .text  00000000 
f000204a l       .text  00000000 
f000204c l       .text  00000000 
f000204e l       .text  00000000 
f0002052 l       .text  00000000 
f0002054 l       .text  00000000 
f0002056 l       .text  00000000 
f0002058 l       .text  00000000 
f0002058 l       .text  00000000 
00004648 l       .debug_loc     00000000 
00004663 l       .debug_loc     00000000 
0000467e l       .debug_loc     00000000 
00004699 l       .debug_loc     00000000 
000046b5 l       .debug_loc     00000000 
000046d1 l       .debug_loc     00000000 
000046ec l       .debug_loc     00000000 
00004707 l       .debug_loc     00000000 
00004722 l       .debug_loc     00000000 
0000473d l       .debug_loc     00000000 
00004758 l       .debug_loc     00000000 
00004773 l       .debug_loc     00000000 
0000478e l       .debug_loc     00000000 
000047a9 l       .debug_loc     00000000 
000047cf l       .debug_loc     00000000 
000047ea l       .debug_loc     00000000 
00004805 l       .debug_loc     00000000 
00004823 l       .debug_loc     00000000 
0000484a l       .debug_loc     00000000 
00004865 l       .debug_loc     00000000 
00004880 l       .debug_loc     00000000 
0000489b l       .debug_loc     00000000 
000048b9 l       .debug_loc     00000000 
000048e0 l       .debug_loc     00000000 
000048fb l       .debug_loc     00000000 
00004916 l       .debug_loc     00000000 
00004931 l       .debug_loc     00000000 
0000494c l       .debug_loc     00000000 
00004972 l       .debug_loc     00000000 
0000498d l       .debug_loc     00000000 
000049a8 l       .debug_loc     00000000 
000049ce l       .debug_loc     00000000 
000049ee l       .debug_loc     00000000 
00004a14 l       .debug_loc     00000000 
00004a32 l       .debug_loc     00000000 
00004a4d l       .debug_loc     00000000 
00004a73 l       .debug_loc     00000000 
00004a99 l       .debug_loc     00000000 
00004ab4 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000030a3 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000710 l       .debug_ranges  00000000 
00000792 l       .debug_str     00000000 
000007cc l       .debug_str     00000000 
000007bf l       .debug_str     00000000 
0000079c l       .debug_str     00000000 
000007ad l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
000002d2 l       .debug_str     00000000 
000002d9 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002ee l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000318 l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
000030e8 l       .debug_str     00000000 
000030d0 l       .debug_str     00000000 
000031a6 l       .debug_str     00000000 
000030f7 l       .debug_str     00000000 
0000310e l       .debug_str     00000000 
00003125 l       .debug_str     00000000 
00003138 l       .debug_str     00000000 
0000314e l       .debug_str     00000000 
00003164 l       .debug_str     00000000 
0000317a l       .debug_str     00000000 
0000318f l       .debug_str     00000000 
00000870 l       .debug_str     00000000 
0000084b l       .debug_str     00000000 
0000085e l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000f8e l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
00000d23 l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
00001ec2 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
0000088f l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
000031b3 l       .debug_str     00000000 
000007fc l       .debug_str     00000000 
00000a57 l       .debug_str     00000000 
00000a61 l       .debug_str     00000000 
000031c8 l       .debug_str     00000000 
00000847 l       .debug_str     00000000 
00000e34 l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
000031de l       .debug_str     00000000 
00000a7f l       .debug_str     00000000 
000008ac l       .debug_str     00000000 
000008c0 l       .debug_str     00000000 
000008c9 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
000008d3 l       .debug_str     00000000 
000031f5 l       .debug_str     00000000 
0000098e l       .debug_str     00000000 
00000aa6 l       .debug_str     00000000 
00001d78 l       .debug_str     00000000 
0000320d l       .debug_str     00000000 
000008ea l       .debug_str     00000000 
000008c3 l       .debug_str     00000000 
00000917 l       .debug_str     00000000 
00000906 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
0000092a l       .debug_str     00000000 
0000322a l       .debug_str     00000000 
00003243 l       .debug_str     00000000 
00001a9c l       .debug_str     00000000 
00000ab5 l       .debug_str     00000000 
00003256 l       .debug_str     00000000 
00001ba4 l       .debug_str     00000000 
00000ad0 l       .debug_str     00000000 
00000ae0 l       .debug_str     00000000 
0000326f l       .debug_str     00000000 
00000aeb l       .debug_str     00000000 
00003288 l       .debug_str     00000000 
000032a1 l       .debug_str     00000000 
00000413 l       .debug_str     00000000 
00000d28 l       .debug_str     00000000 
00000d1f l       .debug_str     00000000 
000032ba l       .debug_str     00000000 
000032cb l       .debug_str     00000000 
000032da l       .debug_str     00000000 
00000ac3 l       .debug_str     00000000 
000032f8 l       .debug_str     00000000 
00000ab8 l       .debug_frame   00000000 
f0002058 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart.c
f0002058 l       .text  00000000 
f0002058 l       .text  00000000 
f0002058 l       .text  00000000 
f000205a l       .text  00000000 
f0002064 l       .text  00000000 
f0002066 l       .text  00000000 
f0002068 l       .text  00000000 
f000206a l       .text  00000000 
f000206a l       .text  00000000 
f000206c l       .text  00000000 
f000206e l       .text  00000000 
f0002072 l       .text  00000000 
f0002074 l       .text  00000000 
f0002076 l       .text  00000000 
f000207e l       .text  00000000 
f000208a l       .text  00000000 
f000209a l       .text  00000000 
f00020a2 l       .text  00000000 
f00020a8 l       .text  00000000 
f00020a8 l       .text  00000000 
f00020ac l       .text  00000000 
f00020ac l       .text  00000000 
f00020ae l       .text  00000000 
f00020b0 l       .text  00000000 
f00020b2 l       .text  00000000 
f00020b2 l       .text  00000000 
f00020b4 l       .text  00000000 
f00020b4 l       .text  00000000 
f00020b8 l       .text  00000000 
f00020b8 l       .text  00000000 
f00020ba l       .text  00000000 
f00020bc l       .text  00000000 
f00020bc l       .text  00000000 
f00020be l       .text  00000000 
f00020be l       .text  00000000 
f00020c0 l       .text  00000000 
f00020c0 l       .text  00000000 
f00020c4 l       .text  00000000 
f00020c4 l       .text  00000000 
f00020c6 l       .text  00000000 
f00020c6 l       .text  00000000 
f00020ca l       .text  00000000 
f00020ca l       .text  00000000 
f00020cc l       .text  00000000 
f00020cc l       .text  00000000 
f00020d0 l       .text  00000000 
f00020d0 l       .text  00000000 
f00020d2 l       .text  00000000 
f00020d4 l       .text  00000000 
f00020d4 l       .text  00000000 
f00020d6 l       .text  00000000 
f00020d6 l       .text  00000000 
f00020da l       .text  00000000 
f00020da l       .text  00000000 
f00020de l       .text  00000000 
f00020de l       .text  00000000 
f00020e0 l       .text  00000000 
f00020e4 l       .text  00000000 
f00020e4 l       .text  00000000 
f00020e8 l       .text  00000000 
f00020e8 l       .text  00000000 
f00020ea l       .text  00000000 
f00020ee l       .text  00000000 
f00020f0 l       .text  00000000 
f00020f0 l       .text  00000000 
f00020f2 l       .text  00000000 
f00020f6 l       .text  00000000 
f00020f8 l       .text  00000000 
f00020f8 l       .text  00000000 
f00020fa l       .text  00000000 
f00020fa l       .text  00000000 
f00020fc l       .text  00000000 
f00020fc l       .text  00000000 
f00020fe l       .text  00000000 
f00020fe l       .text  00000000 
f0002102 l       .text  00000000 
f0002102 l       .text  00000000 
f0002112 l       .text  00000000 
f0002112 l       .text  00000000 
f0002112 l       .text  00000000 
f0002112 l       .text  00000000 
f0002112 l       .text  00000000 
f0002112 l       .text  00000000 
f0002114 l       .text  00000000 
f0002116 l       .text  00000000 
f0002116 l       .text  00000000 
f0002118 l       .text  00000000 
f0002118 l       .text  00000000 
f000211a l       .text  00000000 
f000211a l       .text  00000000 
f000211c l       .text  00000000 
f000211c l       .text  00000000 
f000211e l       .text  00000000 
f000211e l       .text  00000000 
f0002120 l       .text  00000000 
f0002120 l       .text  00000000 
f0002122 l       .text  00000000 
f0002122 l       .text  00000000 
f0002124 l       .text  00000000 
f0002126 l       .text  00000000 
f0002126 l       .text  00000000 
f0002128 l       .text  00000000 
f0002128 l       .text  00000000 
f000212a l       .text  00000000 
f000212a l       .text  00000000 
f000212c l       .text  00000000 
f000212e l       .text  00000000 
f0002130 l       .text  00000000 
f0002130 l       .text  00000000 
f0002132 l       .text  00000000 
f0002132 l       .text  00000000 
f0002134 l       .text  00000000 
f0002134 l       .text  00000000 
00004acf l       .debug_loc     00000000 
00004af5 l       .debug_loc     00000000 
00004b1d l       .debug_loc     00000000 
00004b4c l       .debug_loc     00000000 
00004b67 l       .debug_loc     00000000 
00004b83 l       .debug_loc     00000000 
00004bb9 l       .debug_loc     00000000 
00004bd4 l       .debug_loc     00000000 
00004bfb l       .debug_loc     00000000 
00004c20 l       .debug_loc     00000000 
00004c46 l       .debug_loc     00000000 
00004c6c l       .debug_loc     00000000 
00004c92 l       .debug_loc     00000000 
00004cad l       .debug_loc     00000000 
00004ccf l       .debug_loc     00000000 
00004cf5 l       .debug_loc     00000000 
00004d1b l       .debug_loc     00000000 
00004d41 l       .debug_loc     00000000 
00004d67 l       .debug_loc     00000000 
00004d82 l       .debug_loc     00000000 
00004da4 l       .debug_loc     00000000 
00004dca l       .debug_loc     00000000 
00004de5 l       .debug_loc     00000000 
00004e0c l       .debug_loc     00000000 
00004e27 l       .debug_loc     00000000 
00004e42 l       .debug_loc     00000000 
00004e5d l       .debug_loc     00000000 
00004e84 l       .debug_loc     00000000 
00004e9f l       .debug_loc     00000000 
00004eba l       .debug_loc     00000000 
00004ee0 l       .debug_loc     00000000 
00004efb l       .debug_loc     00000000 
00004f16 l       .debug_loc     00000000 
00004f31 l       .debug_loc     00000000 
00004f57 l       .debug_loc     00000000 
00004f72 l       .debug_loc     00000000 
00004f8d l       .debug_loc     00000000 
00004fa8 l       .debug_loc     00000000 
00004fc3 l       .debug_loc     00000000 
00004fde l       .debug_loc     00000000 
00004ff9 l       .debug_loc     00000000 
00005014 l       .debug_loc     00000000 
00005037 l       .debug_loc     00000000 
00005052 l       .debug_loc     00000000 
0000506d l       .debug_loc     00000000 
00005088 l       .debug_loc     00000000 
000050a3 l       .debug_loc     00000000 
000050c6 l       .debug_loc     00000000 
000050e1 l       .debug_loc     00000000 
000050fc l       .debug_loc     00000000 
00005122 l       .debug_loc     00000000 
00005148 l       .debug_loc     00000000 
0000516e l       .debug_loc     00000000 
00005194 l       .debug_loc     00000000 
000051ba l       .debug_loc     00000000 
000051e0 l       .debug_loc     00000000 
000051fb l       .debug_loc     00000000 
00005221 l       .debug_loc     00000000 
00005250 l       .debug_loc     00000000 
00005276 l       .debug_loc     00000000 
00005291 l       .debug_loc     00000000 
000052ac l       .debug_loc     00000000 
000052cc l       .debug_loc     00000000 
000052e7 l       .debug_loc     00000000 
00005302 l       .debug_loc     00000000 
00005333 l       .debug_loc     00000000 
00005364 l       .debug_loc     00000000 
0000538a l       .debug_loc     00000000 
000053b0 l       .debug_loc     00000000 
000053cc l       .debug_loc     00000000 
000053e7 l       .debug_loc     00000000 
00005402 l       .debug_loc     00000000 
0000541d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003317 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000007a8 l       .debug_ranges  00000000 
00003334 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
000002d2 l       .debug_str     00000000 
000002d9 l       .debug_str     00000000 
000002e3 l       .debug_str     00000000 
000002ee l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
00000318 l       .debug_str     00000000 
00000327 l       .debug_str     00000000 
00000870 l       .debug_str     00000000 
0000084b l       .debug_str     00000000 
0000085e l       .debug_str     00000000 
00000e78 l       .debug_str     00000000 
00000e53 l       .debug_str     00000000 
00000e65 l       .debug_str     00000000 
000033bf l       .debug_str     00000000 
0000334a l       .debug_str     00000000 
00003361 l       .debug_str     00000000 
00003378 l       .debug_str     00000000 
0000338f l       .debug_str     00000000 
000033a7 l       .debug_str     00000000 
0000340f l       .debug_str     00000000 
000033d2 l       .debug_str     00000000 
000033e6 l       .debug_str     00000000 
000033fa l       .debug_str     00000000 
0000344f l       .debug_str     00000000 
00003423 l       .debug_str     00000000 
0000343a l       .debug_str     00000000 
000005f6 l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
00003461 l       .debug_str     00000000 
00000d23 l       .debug_str     00000000 
00000adc l       .debug_str     00000000 
00000d28 l       .debug_str     00000000 
00000d1f l       .debug_str     00000000 
000003d6 l       .debug_str     00000000 
000003f1 l       .debug_str     00000000 
000003e5 l       .debug_str     00000000 
000003e0 l       .debug_str     00000000 
0000087b l       .debug_str     00000000 
00001ec2 l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
0000088f l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
000008ea l       .debug_str     00000000 
000008c0 l       .debug_str     00000000 
000008c3 l       .debug_str     00000000 
00000917 l       .debug_str     00000000 
00000906 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
00001d78 l       .debug_str     00000000 
00000f9c l       .debug_str     00000000 
00000b6a l       .debug_str     00000000 
000035ff l       .debug_str     00000000 
00003603 l       .debug_str     00000000 
0000360e l       .debug_str     00000000 
000006ab l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
000034d4 l       .debug_str     00000000 
000033c8 l       .debug_str     00000000 
000034ee l       .debug_str     00000000 
0000350c l       .debug_str     00000000 
00002112 l       .debug_str     00000000 
0000346c l       .debug_str     00000000 
00002ea2 l       .debug_str     00000000 
000003c3 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
0000347c l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
000008ac l       .debug_str     00000000 
000008c9 l       .debug_str     00000000 
000008d3 l       .debug_str     00000000 
00003489 l       .debug_str     00000000 
00002ec8 l       .debug_str     00000000 
00003508 l       .debug_str     00000000 
00002e76 l       .debug_str     00000000 
00003520 l       .debug_str     00000000 
0000349c l       .debug_str     00000000 
000034a7 l       .debug_str     00000000 
000034b5 l       .debug_str     00000000 
0000351c l       .debug_str     00000000 
000034c7 l       .debug_str     00000000 
00002cc5 l       .debug_str     00000000 
00003533 l       .debug_str     00000000 
00000c27 l       .debug_str     00000000 
00003550 l       .debug_str     00000000 
0000362d l       .debug_str     00000000 
0000356c l       .debug_str     00000000 
00003637 l       .debug_str     00000000 
00001da4 l       .debug_str     00000000 
0000092a l       .debug_str     00000000 
00003588 l       .debug_str     00000000 
00003458 l       .debug_str     00000000 
00000fcb l       .debug_str     00000000 
00000778 l       .debug_ranges  00000000 
00000790 l       .debug_ranges  00000000 
0000359e l       .debug_str     00000000 
0000366c l       .debug_str     00000000 
000035b9 l       .debug_str     00000000 
000035d5 l       .debug_str     00000000 
00002d66 l       .debug_str     00000000 
00000413 l       .debug_str     00000000 
000035ed l       .debug_str     00000000 
00000fe4 l       .debug_str     00000000 
00000faf l       .debug_str     00000000 
00000fb8 l       .debug_str     00000000 
00000fc4 l       .debug_str     00000000 
00000e81 l       .debug_str     00000000 
00000ac3 l       .debug_str     00000000 
00000fd2 l       .debug_str     00000000 
00003618 l       .debug_str     00000000 
00003642 l       .debug_str     00000000 
00003658 l       .debug_str     00000000 
00000b8c l       .debug_frame   00000000 
f0002112 l       .text  00000000 
f0002134 l       .text  00000000 
00000000 l    df *ABS*  00000000 math.c
f0002134 l       .text  00000000 
f0002134 l       .text  00000000 
f0002134 l       .text  00000000 
f0002136 l       .text  00000000 
f000213c l       .text  00000000 
f0002148 l       .text  00000000 
f0002150 l       .text  00000000 
f0002150 l       .text  00000000 
f0002158 l       .text  00000000 
f000217a l       .text  00000000 
f000217e l       .text  00000000 
f000217e l       .text  00000000 
f0002182 l       .text  00000000 
f0002186 l       .text  00000000 
f0002186 l       .text  00000000 
f000218a l       .text  00000000 
f000219c l       .text  00000000 
f00021a0 l       .text  00000000 
f00021b0 l       .text  00000000 
f00021b2 l       .text  00000000 
f00021b2 l       .text  00000000 
f00021c2 l       .text  00000000 
f00021c4 l       .text  00000000 
f00021c4 l       .text  00000000 
f00021c8 l       .text  00000000 
f00021c8 l       .text  00000000 
f00021cc l       .text  00000000 
f00021cc l       .text  00000000 
f00021ce l       .text  00000000 
f00021d6 l       .text  00000000 
f00021d8 l       .text  00000000 
f00021da l       .text  00000000 
f00021e4 l       .text  00000000 
f00021e4 l       .text  00000000 
00005443 l       .debug_loc     00000000 
0000545b l       .debug_loc     00000000 
00005482 l       .debug_loc     00000000 
000054b3 l       .debug_loc     00000000 
00005506 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000367b l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000006ab l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
000020e5 l       .debug_str     00000000 
00003695 l       .debug_str     00000000 
00001b44 l       .debug_str     00000000 
0000369d l       .debug_str     00000000 
000036a1 l       .debug_str     00000000 
0000038f l       .debug_str     00000000 
000005f6 l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
00000c90 l       .debug_frame   00000000 
f00021e4 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
f00021e4 l       .text  00000000 
f00021e4 l       .text  00000000 
f00021e4 l       .text  00000000 
f00021e4 l       .text  00000000 
f00021ec l       .text  00000000 
f00021f0 l       .text  00000000 
f00021f0 l       .text  00000000 
f00021f4 l       .text  00000000 
f00021f4 l       .text  00000000 
f00021f8 l       .text  00000000 
f00021f8 l       .text  00000000 
f0002204 l       .text  00000000 
f0002206 l       .text  00000000 
f0002206 l       .text  00000000 
f000220c l       .text  00000000 
f000220c l       .text  00000000 
f0002210 l       .text  00000000 
f0002212 l       .text  00000000 
f0002216 l       .text  00000000 
f0002216 l       .text  00000000 
f0002218 l       .text  00000000 
f0002218 l       .text  00000000 
f000221a l       .text  00000000 
f000221a l       .text  00000000 
f0002222 l       .text  00000000 
f0002226 l       .text  00000000 
f0002228 l       .text  00000000 
f000222c l       .text  00000000 
f0002230 l       .text  00000000 
f0002230 l       .text  00000000 
f0002234 l       .text  00000000 
f0002234 l       .text  00000000 
f0002238 l       .text  00000000 
f000223a l       .text  00000000 
f000223a l       .text  00000000 
f000223e l       .text  00000000 
f000223e l       .text  00000000 
f0002240 l       .text  00000000 
f0002240 l       .text  00000000 
f0002242 l       .text  00000000 
f0002242 l       .text  00000000 
f0002246 l       .text  00000000 
f0002246 l       .text  00000000 
f000224a l       .text  00000000 
f000224c l       .text  00000000 
f0002252 l       .text  00000000 
f0002252 l       .text  00000000 
f0002256 l       .text  00000000 
f000225a l       .text  00000000 
f0002262 l       .text  00000000 
f0002262 l       .text  00000000 
f0002264 l       .text  00000000 
f0002264 l       .text  00000000 
f0002266 l       .text  00000000 
f0002266 l       .text  00000000 
f000226c l       .text  00000000 
f000226c l       .text  00000000 
f000226c l       .text  00000000 
f000226c l       .text  00000000 
f000226c l       .text  00000000 
f0002270 l       .text  00000000 
f0002270 l       .text  00000000 
f0002274 l       .text  00000000 
f0002274 l       .text  00000000 
f000227c l       .text  00000000 
f000227c l       .text  00000000 
f0002280 l       .text  00000000 
f0002284 l       .text  00000000 
f0002284 l       .text  00000000 
f0002286 l       .text  00000000 
f0002286 l       .text  00000000 
f000228a l       .text  00000000 
f000228a l       .text  00000000 
f000228e l       .text  00000000 
f000228e l       .text  00000000 
f0002290 l       .text  00000000 
f0002292 l       .text  00000000 
f0002294 l       .text  00000000 
f0002294 l       .text  00000000 
f0002298 l       .text  00000000 
f000229c l       .text  00000000 
f00022ac l       .text  00000000 
f00022ac l       .text  00000000 
f00022b0 l       .text  00000000 
f00022b0 l       .text  00000000 
f00022b2 l       .text  00000000 
f00022b2 l       .text  00000000 
f00022b4 l       .text  00000000 
f00022b4 l       .text  00000000 
f00022b8 l       .text  00000000 
f00022b8 l       .text  00000000 
f00022be l       .text  00000000 
f00022c2 l       .text  00000000 
f00022c2 l       .text  00000000 
f00022c6 l       .text  00000000 
f00022ca l       .text  00000000 
f00022cc l       .text  00000000 
f00022ce l       .text  00000000 
f00022ce l       .text  00000000 
f00022ce l       .text  00000000 
f00022ce l       .text  00000000 
f00022ce l       .text  00000000 
f00022d2 l       .text  00000000 
f00022d2 l       .text  00000000 
f00022d6 l       .text  00000000 
f00022d6 l       .text  00000000 
f00022de l       .text  00000000 
f00022e2 l       .text  00000000 
f00022e6 l       .text  00000000 
f00022e8 l       .text  00000000 
f00022ea l       .text  00000000 
f00022ea l       .text  00000000 
f00022ee l       .text  00000000 
f00022f2 l       .text  00000000 
f00022f2 l       .text  00000000 
f00022f4 l       .text  00000000 
f00022f6 l       .text  00000000 
f00022f8 l       .text  00000000 
f00022fe l       .text  00000000 
f00022fe l       .text  00000000 
f0002300 l       .text  00000000 
f0002304 l       .text  00000000 
f0002310 l       .text  00000000 
f000231e l       .text  00000000 
f000231e l       .text  00000000 
f0002322 l       .text  00000000 
f0002324 l       .text  00000000 
f0002324 l       .text  00000000 
f0002328 l       .text  00000000 
f000232c l       .text  00000000 
f000232c l       .text  00000000 
f0002330 l       .text  00000000 
f0002334 l       .text  00000000 
f0002338 l       .text  00000000 
f000233c l       .text  00000000 
f0002340 l       .text  00000000 
f0002340 l       .text  00000000 
f0002344 l       .text  00000000 
f0002348 l       .text  00000000 
f000234a l       .text  00000000 
f000234a l       .text  00000000 
f000234c l       .text  00000000 
f0002350 l       .text  00000000 
f0002350 l       .text  00000000 
f0002358 l       .text  00000000 
f000235c l       .text  00000000 
f000235c l       .text  00000000 
f0002360 l       .text  00000000 
f0002364 l       .text  00000000 
f0002368 l       .text  00000000 
f000236a l       .text  00000000 
f000236e l       .text  00000000 
f000236e l       .text  00000000 
f0002372 l       .text  00000000 
f0002372 l       .text  00000000 
f0002376 l       .text  00000000 
f0002378 l       .text  00000000 
f0002378 l       .text  00000000 
f000237c l       .text  00000000 
f000237c l       .text  00000000 
f000237c l       .text  00000000 
f000237c l       .text  00000000 
f000237c l       .text  00000000 
f0002380 l       .text  00000000 
f0002380 l       .text  00000000 
f0002384 l       .text  00000000 
f0002384 l       .text  00000000 
f000238c l       .text  00000000 
f000238c l       .text  00000000 
f0002390 l       .text  00000000 
f0002392 l       .text  00000000 
f0002396 l       .text  00000000 
f0002396 l       .text  00000000 
f0002398 l       .text  00000000 
f0002398 l       .text  00000000 
f000239c l       .text  00000000 
f000239c l       .text  00000000 
f00023a2 l       .text  00000000 
f00023a2 l       .text  00000000 
f00023a6 l       .text  00000000 
f00023a6 l       .text  00000000 
f00023ae l       .text  00000000 
f00023b2 l       .text  00000000 
f00023b2 l       .text  00000000 
f00023b4 l       .text  00000000 
f00023b8 l       .text  00000000 
f00023b8 l       .text  00000000 
f00023ba l       .text  00000000 
f00023bc l       .text  00000000 
f00023bc l       .text  00000000 
f00023c4 l       .text  00000000 
f00023c4 l       .text  00000000 
f00023c8 l       .text  00000000 
f00023c8 l       .text  00000000 
f00023d2 l       .text  00000000 
f00023d6 l       .text  00000000 
f00023d6 l       .text  00000000 
f00023da l       .text  00000000 
f00023da l       .text  00000000 
f00023de l       .text  00000000 
f00023e2 l       .text  00000000 
f00023e2 l       .text  00000000 
f00023e6 l       .text  00000000 
f00023ea l       .text  00000000 
f00023ea l       .text  00000000 
f00023ec l       .text  00000000 
f00023f0 l       .text  00000000 
f00023f0 l       .text  00000000 
f00023f4 l       .text  00000000 
f00023f8 l       .text  00000000 
f00023fc l       .text  00000000 
f0002400 l       .text  00000000 
f0002404 l       .text  00000000 
f0002406 l       .text  00000000 
f0002406 l       .text  00000000 
f000240a l       .text  00000000 
f000240a l       .text  00000000 
f000240c l       .text  00000000 
f000240e l       .text  00000000 
f000240e l       .text  00000000 
f0002416 l       .text  00000000 
f000241a l       .text  00000000 
f000241a l       .text  00000000 
f000241c l       .text  00000000 
f0002420 l       .text  00000000 
f0002420 l       .text  00000000 
f0002422 l       .text  00000000 
f0002424 l       .text  00000000 
f0002424 l       .text  00000000 
f0002426 l       .text  00000000 
f0002426 l       .text  00000000 
f000242a l       .text  00000000 
f000242a l       .text  00000000 
f000242c l       .text  00000000 
f000242c l       .text  00000000 
f0002430 l       .text  00000000 
f0002430 l       .text  00000000 
f0002432 l       .text  00000000 
f0002432 l       .text  00000000 
f0002436 l       .text  00000000 
f0002436 l       .text  00000000 
f0002438 l       .text  00000000 
f0002438 l       .text  00000000 
f000243a l       .text  00000000 
f000243a l       .text  00000000 
f000243c l       .text  00000000 
f000243c l       .text  00000000 
00005539 l       .debug_loc     00000000 
0000555f l       .debug_loc     00000000 
00005585 l       .debug_loc     00000000 
000055ab l       .debug_loc     00000000 
000055d1 l       .debug_loc     00000000 
000055f0 l       .debug_loc     00000000 
0000560f l       .debug_loc     00000000 
00005635 l       .debug_loc     00000000 
00005650 l       .debug_loc     00000000 
00005699 l       .debug_loc     00000000 
000056bf l       .debug_loc     00000000 
000056e1 l       .debug_loc     00000000 
000056fc l       .debug_loc     00000000 
00005717 l       .debug_loc     00000000 
00005732 l       .debug_loc     00000000 
0000574d l       .debug_loc     00000000 
00005768 l       .debug_loc     00000000 
00005783 l       .debug_loc     00000000 
000057d3 l       .debug_loc     00000000 
000057ee l       .debug_loc     00000000 
00005809 l       .debug_loc     00000000 
0000582b l       .debug_loc     00000000 
00005846 l       .debug_loc     00000000 
00005861 l       .debug_loc     00000000 
0000587c l       .debug_loc     00000000 
00005897 l       .debug_loc     00000000 
000058b2 l       .debug_loc     00000000 
000058d1 l       .debug_loc     00000000 
000058f0 l       .debug_loc     00000000 
00005916 l       .debug_loc     00000000 
00005931 l       .debug_loc     00000000 
0000597a l       .debug_loc     00000000 
000059a0 l       .debug_loc     00000000 
000059bb l       .debug_loc     00000000 
000059d6 l       .debug_loc     00000000 
000059f1 l       .debug_loc     00000000 
00005a0c l       .debug_loc     00000000 
00005a27 l       .debug_loc     00000000 
00005a42 l       .debug_loc     00000000 
00005a5d l       .debug_loc     00000000 
00005a7c l       .debug_loc     00000000 
00005a9b l       .debug_loc     00000000 
00005ab6 l       .debug_loc     00000000 
00005afd l       .debug_loc     00000000 
00005b18 l       .debug_loc     00000000 
00005b33 l       .debug_loc     00000000 
00005b59 l       .debug_loc     00000000 
00005b74 l       .debug_loc     00000000 
00005b8f l       .debug_loc     00000000 
00005baa l       .debug_loc     00000000 
00005bc5 l       .debug_loc     00000000 
00005be0 l       .debug_loc     00000000 
00005c06 l       .debug_loc     00000000 
00005c21 l       .debug_loc     00000000 
00005c47 l       .debug_loc     00000000 
00005c6d l       .debug_loc     00000000 
00005c8a l       .debug_loc     00000000 
00005ce5 l       .debug_loc     00000000 
00005d00 l       .debug_loc     00000000 
00005d26 l       .debug_loc     00000000 
00005d4c l       .debug_loc     00000000 
00005d67 l       .debug_loc     00000000 
00005d8d l       .debug_loc     00000000 
00005dea l       .debug_loc     00000000 
00005e05 l       .debug_loc     00000000 
00005e20 l       .debug_loc     00000000 
00005e7d l       .debug_loc     00000000 
00005e9a l       .debug_loc     00000000 
00005eb5 l       .debug_loc     00000000 
00005efc l       .debug_loc     00000000 
00005f17 l       .debug_loc     00000000 
00005f32 l       .debug_loc     00000000 
00005f4d l       .debug_loc     00000000 
00005f68 l       .debug_loc     00000000 
00005f83 l       .debug_loc     00000000 
00005fa9 l       .debug_loc     00000000 
00005fc4 l       .debug_loc     00000000 
00005fdf l       .debug_loc     00000000 
00005ffa l       .debug_loc     00000000 
00006015 l       .debug_loc     00000000 
00006042 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000036a6 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000008a8 l       .debug_ranges  00000000 
000036c2 l       .debug_str     00000000 
000036cc l       .debug_str     00000000 
000036d6 l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
000003c3 l       .debug_str     00000000 
00000b32 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000036e0 l       .debug_str     00000000 
000037d5 l       .debug_str     00000000 
000037df l       .debug_str     00000000 
00002d41 l       .debug_str     00000000 
000036fa l       .debug_str     00000000 
00003705 l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
00002c89 l       .debug_str     00000000 
00003711 l       .debug_str     00000000 
00003723 l       .debug_str     00000000 
00003733 l       .debug_str     00000000 
000036e8 l       .debug_str     00000000 
00003743 l       .debug_str     00000000 
00000ba0 l       .debug_str     00000000 
00000ba8 l       .debug_str     00000000 
00001a9c l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
0000374d l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
00002117 l       .debug_str     00000000 
0000379b l       .debug_str     00000000 
000037a0 l       .debug_str     00000000 
000037a4 l       .debug_str     00000000 
000037aa l       .debug_str     00000000 
00003727 l       .debug_str     00000000 
0000038f l       .debug_str     00000000 
00003737 l       .debug_str     00000000 
00000838 l       .debug_ranges  00000000 
00002b83 l       .debug_str     00000000 
00000820 l       .debug_ranges  00000000 
00002dba l       .debug_str     00000000 
000037af l       .debug_str     00000000 
000037b6 l       .debug_str     00000000 
00000850 l       .debug_ranges  00000000 
00003769 l       .debug_str     00000000 
000037be l       .debug_str     00000000 
000037c2 l       .debug_str     00000000 
000037c6 l       .debug_str     00000000 
000037cb l       .debug_str     00000000 
000037d0 l       .debug_str     00000000 
000037da l       .debug_str     00000000 
00003770 l       .debug_str     00000000 
00001c8c l       .debug_str     00000000 
00002a63 l       .debug_str     00000000 
000037e5 l       .debug_str     00000000 
00000868 l       .debug_ranges  00000000 
000037ea l       .debug_str     00000000 
00003756 l       .debug_str     00000000 
00002ec8 l       .debug_str     00000000 
00002a6a l       .debug_str     00000000 
00000880 l       .debug_ranges  00000000 
00003778 l       .debug_str     00000000 
00002979 l       .debug_str     00000000 
0000378a l       .debug_str     00000000 
00003792 l       .debug_str     00000000 
0000088f l       .debug_str     00000000 
000005f6 l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
00000cc0 l       .debug_frame   00000000 
f000226c l       .text  00000000 
f00022ce l       .text  00000000 
f000237c l       .text  00000000 
f000243c l       .text  00000000 
00000000 l    df *ABS*  00000000 tasks.c
f000243c l       .text  00000000 
f000243c l       .text  00000000 
f000243c l       .text  00000000 
f000243e l       .text  00000000 
f0002454 l       .text  00000000 
f0002456 l       .text  00000000 
f0002458 l       .text  00000000 
f000245a l       .text  00000000 
f000245c l       .text  00000000 
f000245e l       .text  00000000 
f000245e l       .text  00000000 
f0002462 l       .text  00000000 
f0002466 l       .text  00000000 
f0002466 l       .text  00000000 
f0002468 l       .text  00000000 
f000246c l       .text  00000000 
f000246e l       .text  00000000 
f000246e l       .text  00000000 
f0002474 l       .text  00000000 
f0002474 l       .text  00000000 
f0002476 l       .text  00000000 
f0002476 l       .text  00000000 
f0002478 l       .text  00000000 
f0002478 l       .text  00000000 
f000247a l       .text  00000000 
f000247a l       .text  00000000 
f0002480 l       .text  00000000 
f0002482 l       .text  00000000 
f0002482 l       .text  00000000 
f0002484 l       .text  00000000 
f0002488 l       .text  00000000 
f0002488 l       .text  00000000 
f0002490 l       .text  00000000 
f0002498 l       .text  00000000 
f000249c l       .text  00000000 
f00024a0 l       .text  00000000 
f00024a0 l       .text  00000000 
f00024a6 l       .text  00000000 
f00024aa l       .text  00000000 
f00024ae l       .text  00000000 
f00024b4 l       .text  00000000 
f00024b4 l       .text  00000000 
f00024b6 l       .text  00000000 
f00024b8 l       .text  00000000 
f00024b8 l       .text  00000000 
f00024ba l       .text  00000000 
f00024ba l       .text  00000000 
f00024be l       .text  00000000 
f00024c4 l       .text  00000000 
f00024c4 l       .text  00000000 
f00024c8 l       .text  00000000 
f00024ca l       .text  00000000 
f00024ca l       .text  00000000 
f00024ce l       .text  00000000 
f00024d2 l       .text  00000000 
f00024d6 l       .text  00000000 
f00024d6 l       .text  00000000 
f00024da l       .text  00000000 
f00024dc l       .text  00000000 
f00024dc l       .text  00000000 
f00024e2 l       .text  00000000 
f00024ea l       .text  00000000 
f00024ee l       .text  00000000 
f00024f2 l       .text  00000000 
f00024f6 l       .text  00000000 
f0002500 l       .text  00000000 
f0002500 l       .text  00000000 
f0002504 l       .text  00000000 
f0002508 l       .text  00000000 
f000250c l       .text  00000000 
f000250c l       .text  00000000 
f0002510 l       .text  00000000 
e0002094 l     O .bss   00000004 xSchedulerRunning
f0002510 l       .text  00000000 
f000251c l       .text  00000000 
f0002524 l       .text  00000000 
f0002526 l       .text  00000000 
f0002526 l       .text  00000000 
f000252a l       .text  00000000 
f0002530 l       .text  00000000 
f0002534 l       .text  00000000 
e0002090 l     O .bss   00000004 uxCurrentNumberOfTasks
f0002534 l       .text  00000000 
f0002542 l       .text  00000000 
e00020dc l     O .bss   00000064 pxReadyTasksLists
f0002546 l       .text  00000000 
f000254e l       .text  00000000 
f0002550 l       .text  00000000 
f0002550 l       .text  00000000 
f0002554 l       .text  00000000 
f0002556 l       .text  00000000 
f000255a l       .text  00000000 
f000255c l       .text  00000000 
f0002560 l       .text  00000000 
f0002564 l       .text  00000000 
f000256a l       .text  00000000 
f000256e l       .text  00000000 
f0002572 l       .text  00000000 
f0002576 l       .text  00000000 
f000257c l       .text  00000000 
f000257c l       .text  00000000 
f0002582 l       .text  00000000 
f0002582 l       .text  00000000 
f0002584 l       .text  00000000 
f0002584 l       .text  00000000 
f0002588 l       .text  00000000 
e000217c l     O .bss   00000014 xDelayedTaskList1
f0002588 l       .text  00000000 
f0002594 l       .text  00000000 
e0002190 l     O .bss   00000014 xDelayedTaskList2
f0002594 l       .text  00000000 
f00025a0 l       .text  00000000 
e0002168 l     O .bss   00000014 xPendingReadyList
f00025a0 l       .text  00000000 
f00025aa l       .text  00000000 
e0002140 l     O .bss   00000014 xTasksWaitingTermination
f00025aa l       .text  00000000 
f00025b4 l       .text  00000000 
e0002154 l     O .bss   00000014 xSuspendedTaskList
f00025b4 l       .text  00000000 
f00025be l       .text  00000000 
e0002098 l     O .bss   00000004 pxDelayedTaskList
f00025be l       .text  00000000 
e000209c l     O .bss   00000004 pxOverflowDelayedTaskList
f00025ca l       .text  00000000 
f00025d6 l       .text  00000000 
e0002088 l     O .bss   00000004 uxTaskNumber
f00025d6 l       .text  00000000 
f00025e4 l       .text  00000000 
e0002084 l     O .bss   00000004 uxTopReadyPriority
f00025fe l       .text  00000000 
f00025fe l       .text  00000000 
f0002606 l       .text  00000000 
f0002620 l       .text  00000000 
f0002624 l       .text  00000000 
f0002624 l       .text  00000000 
f0002626 l       .text  00000000 
f0002626 l       .text  00000000 
f000262a l       .text  00000000 
f000262c l       .text  00000000 
f000262c l       .text  00000000 
f0002630 l       .text  00000000 
f0002630 l       .text  00000000 
f0002638 l       .text  00000000 
f000264c l       .text  00000000 
f000264c l       .text  00000000 
e000208c l     O .bss   00000004 uxDeletedTasksWaitingCleanUp
e00020ac l     O .bss   00000004 xNextTaskUnblockTime
f000264c l       .text  00000000 
f000264c l       .text  00000000 
f000264c l       .text  00000000 
f000264c l       .text  00000000 
f0002656 l       .text  00000000 
f0002658 l       .text  00000000 
f0002662 l       .text  00000000 
f0002664 l       .text  00000000 
f0002666 l       .text  00000000 
f0002668 l       .text  00000000 
f000266e l       .text  00000000 
f0002670 l       .text  00000000 
f0002672 l       .text  00000000 
f0002674 l       .text  00000000 
f0002676 l       .text  00000000 
f000267a l       .text  00000000 
f000267c l       .text  00000000 
f000267c l       .text  00000000 
f000267c l       .text  00000000 
f000267c l       .text  00000000 
f000267c l       .text  00000000 
f000267e l       .text  00000000 
f000267e l       .text  00000000 
f0002682 l       .text  00000000 
e00020a0 l     O .bss   00000004 uxSchedulerSuspended
f000268c l       .text  00000000 
e00020a4 l     O .bss   00000004 xYieldPending
f000268e l       .text  00000000 
f000269c l       .text  00000000 
f00026a8 l       .text  00000000 
f00026b8 l       .text  00000000 
f00026bc l       .text  00000000 
f00026c8 l       .text  00000000 
f00026c8 l       .text  00000000 
f0002738 l       .text  00000000 
f0002738 l       .text  00000000 
f000273a l       .text  00000000 
f000273a l       .text  00000000 
f000273e l       .text  00000000 
f000273e l       .text  00000000 
f0002748 l       .text  00000000 
f000274c l       .text  00000000 
f0002750 l       .text  00000000 
f0002756 l       .text  00000000 
f0002758 l       .text  00000000 
f000275a l       .text  00000000 
f000275c l       .text  00000000 
f0002760 l       .text  00000000 
f0002760 l       .text  00000000 
f0002768 l       .text  00000000 
f0002768 l       .text  00000000 
f0002768 l       .text  00000000 
f0002768 l       .text  00000000 
f0002768 l       .text  00000000 
f000276a l       .text  00000000 
f000276a l       .text  00000000 
f000276c l       .text  00000000 
f00027ce l     F .text  00000082 prvIdleTask
e00020a8 l     O .bss   00000004 xIdleTaskHandle
f000278e l       .text  00000000 
f000278e l       .text  00000000 
f0002790 l       .text  00000000 
f0002790 l       .text  00000000 
f0002794 l       .text  00000000 
f0002798 l       .text  00000000 
f0002798 l       .text  00000000 
f00027a4 l       .text  00000000 
e00020b0 l     O .bss   00000004 xTickCount
f00027ae l       .text  00000000 
f00027ba l       .text  00000000 
f00027be l       .text  00000000 
f00027be l       .text  00000000 
f00027c8 l       .text  00000000 
f00027ce l       .text  00000000 
f00027ce l       .text  00000000 
f00027ce l       .text  00000000 
f00027ce l       .text  00000000 
f00027ce l       .text  00000000 
f00027d0 l       .text  00000000 
f00027de l       .text  00000000 
f00027de l       .text  00000000 
f0002806 l       .text  00000000 
f0002806 l       .text  00000000 
f0002808 l       .text  00000000 
f000280a l       .text  00000000 
f000280a l       .text  00000000 
f000280e l       .text  00000000 
f0002812 l       .text  00000000 
f0002814 l       .text  00000000 
f0002818 l       .text  00000000 
f000281e l       .text  00000000 
f0002822 l       .text  00000000 
f0002822 l       .text  00000000 
f0002828 l       .text  00000000 
f0002828 l       .text  00000000 
f000282c l       .text  00000000 
f000282e l       .text  00000000 
f000282e l       .text  00000000 
f0002838 l       .text  00000000 
f000283e l       .text  00000000 
f0002840 l       .text  00000000 
f0002840 l       .text  00000000 
f0002842 l       .text  00000000 
f0002844 l       .text  00000000 
f0002844 l       .text  00000000 
f0002848 l       .text  00000000 
f0002848 l       .text  00000000 
f000284a l       .text  00000000 
f000284a l       .text  00000000 
f0002850 l       .text  00000000 
f0002850 l       .text  00000000 
f0002850 l       .text  00000000 
f0002850 l       .text  00000000 
f0002850 l       .text  00000000 
f0002850 l       .text  00000000 
f000285e l       .text  00000000 
f000285e l       .text  00000000 
f0002860 l       .text  00000000 
f0002860 l       .text  00000000 
f0002860 l       .text  00000000 
f0002860 l       .text  00000000 
f0002860 l       .text  00000000 
f0002862 l       .text  00000000 
f0002862 l       .text  00000000 
f000286a l       .text  00000000 
f000286a l       .text  00000000 
f000286a l       .text  00000000 
f000286e l       .text  00000000 
f000286e l       .text  00000000 
f0002878 l       .text  00000000 
f000287a l       .text  00000000 
f0002884 l       .text  00000000 
f000288a l       .text  00000000 
f000288c l       .text  00000000 
f000288c l       .text  00000000 
f000289a l       .text  00000000 
f000289c l       .text  00000000 
f000289e l       .text  00000000 
f00028a8 l       .text  00000000 
f00028aa l       .text  00000000 
f00028b4 l       .text  00000000 
f00028bc l       .text  00000000 
f00028be l       .text  00000000 
f00028be l       .text  00000000 
f00028c0 l       .text  00000000 
f00028da l       .text  00000000 
f00028da l       .text  00000000 
f00028de l       .text  00000000 
f00028de l       .text  00000000 
f00028e4 l       .text  00000000 
f00028ea l       .text  00000000 
f00028ec l       .text  00000000 
f00028f4 l       .text  00000000 
f00028f6 l       .text  00000000 
f0002900 l       .text  00000000 
f0002900 l       .text  00000000 
f0002900 l       .text  00000000 
f0002900 l       .text  00000000 
f0002906 l       .text  00000000 
f000290c l       .text  00000000 
f000290e l       .text  00000000 
f0002912 l       .text  00000000 
f0002916 l       .text  00000000 
f0002918 l       .text  00000000 
f000291e l       .text  00000000 
f000291e l       .text  00000000 
f0002922 l       .text  00000000 
f000292a l       .text  00000000 
f000292a l       .text  00000000 
f0002932 l       .text  00000000 
f0002942 l       .text  00000000 
f0002946 l       .text  00000000 
f0002946 l       .text  00000000 
f000294a l       .text  00000000 
f000294c l       .text  00000000 
f0002950 l       .text  00000000 
f0002954 l       .text  00000000 
f0002954 l       .text  00000000 
f0002956 l       .text  00000000 
f0002958 l       .text  00000000 
f0002958 l       .text  00000000 
f0002964 l       .text  00000000 
f0002966 l       .text  00000000 
f0002966 l       .text  00000000 
f000296e l       .text  00000000 
f0002970 l       .text  00000000 
f000297a l       .text  00000000 
e00020b4 l     O .bss   00000004 xPendedTicks
f000297a l       .text  00000000 
f0002984 l       .text  00000000 
f0002984 l       .text  00000000 
f0002986 l       .text  00000000 
f0002986 l       .text  00000000 
f0002988 l       .text  00000000 
f0002988 l       .text  00000000 
f000298a l       .text  00000000 
f000298c l       .text  00000000 
f0002990 l       .text  00000000 
f0002990 l       .text  00000000 
f0002994 l       .text  00000000 
f0002996 l       .text  00000000 
f0002996 l       .text  00000000 
f00029a4 l       .text  00000000 
f00029a4 l       .text  00000000 
f00029a4 l       .text  00000000 
f00029a4 l       .text  00000000 
f00029a4 l       .text  00000000 
f00029a4 l       .text  00000000 
f00029ae l       .text  00000000 
f00029b0 l       .text  00000000 
f00029c0 l       .text  00000000 
f00029c0 l       .text  00000000 
f00029ca l       .text  00000000 
f00029ce l       .text  00000000 
f00029ce l       .text  00000000 
f00029d2 l       .text  00000000 
f00029d2 l       .text  00000000 
f00029e2 l       .text  00000000 
f00029e6 l       .text  00000000 
f00029e6 l       .text  00000000 
f00029ea l       .text  00000000 
e00020b8 l     O .bss   00000004 xNumOfOverflows
f0002a08 l       .text  00000000 
f0002a08 l       .text  00000000 
f0002a0e l       .text  00000000 
f0002a10 l       .text  00000000 
f0002a10 l       .text  00000000 
f0002a1a l       .text  00000000 
f0002a20 l       .text  00000000 
f0002a20 l       .text  00000000 
f0002a24 l       .text  00000000 
f0002a28 l       .text  00000000 
f0002a2e l       .text  00000000 
f0002a30 l       .text  00000000 
f0002a32 l       .text  00000000 
f0002a44 l       .text  00000000 
f0002a44 l       .text  00000000 
f0002a4c l       .text  00000000 
f0002a4c l       .text  00000000 
f0002a4e l       .text  00000000 
f0002a4e l       .text  00000000 
f0002a52 l       .text  00000000 
f0002a52 l       .text  00000000 
f0002a58 l       .text  00000000 
f0002a5e l       .text  00000000 
f0002a60 l       .text  00000000 
f0002a60 l       .text  00000000 
f0002a64 l       .text  00000000 
f0002a64 l       .text  00000000 
f0002a68 l       .text  00000000 
f0002a6a l       .text  00000000 
f0002a70 l       .text  00000000 
f0002a70 l       .text  00000000 
f0002a72 l       .text  00000000 
f0002a72 l       .text  00000000 
f0002a74 l       .text  00000000 
f0002a74 l       .text  00000000 
f0002a7e l       .text  00000000 
f0002a80 l       .text  00000000 
f0002a80 l       .text  00000000 
f0002a84 l       .text  00000000 
f0002a84 l       .text  00000000 
f0002a88 l       .text  00000000 
f0002a8a l       .text  00000000 
f0002a94 l       .text  00000000 
f0002a94 l       .text  00000000 
f0002aa4 l       .text  00000000 
f0002aa4 l       .text  00000000 
f0002aac l       .text  00000000 
f0002abc l       .text  00000000 
f0002ac0 l       .text  00000000 
f0002ac0 l       .text  00000000 
f0002ac6 l       .text  00000000 
f0002ac8 l       .text  00000000 
f0002ac8 l       .text  00000000 
f0002ace l       .text  00000000 
f0002ace l       .text  00000000 
f0002ad2 l       .text  00000000 
f0002ad2 l       .text  00000000 
00006062 l       .debug_loc     00000000 
0000609e l       .debug_loc     00000000 
000060c4 l       .debug_loc     00000000 
000060df l       .debug_loc     00000000 
0000611b l       .debug_loc     00000000 
00006141 l       .debug_loc     00000000 
00006167 l       .debug_loc     00000000 
00006198 l       .debug_loc     00000000 
000061f5 l       .debug_loc     00000000 
0000621b l       .debug_loc     00000000 
00006241 l       .debug_loc     00000000 
00006267 l       .debug_loc     00000000 
0000628d l       .debug_loc     00000000 
000062b3 l       .debug_loc     00000000 
000062d9 l       .debug_loc     00000000 
000062f4 l       .debug_loc     00000000 
0000631c l       .debug_loc     00000000 
00006358 l       .debug_loc     00000000 
0000638b l       .debug_loc     00000000 
000063a6 l       .debug_loc     00000000 
000063c1 l       .debug_loc     00000000 
000063e7 l       .debug_loc     00000000 
0000642e l       .debug_loc     00000000 
0000648b l       .debug_loc     00000000 
000064dd l       .debug_loc     00000000 
00006503 l       .debug_loc     00000000 
00006529 l       .debug_loc     00000000 
0000655a l       .debug_loc     00000000 
00006575 l       .debug_loc     00000000 
0000659b l       .debug_loc     00000000 
000065b6 l       .debug_loc     00000000 
000065d1 l       .debug_loc     00000000 
000065ec l       .debug_loc     00000000 
00006614 l       .debug_loc     00000000 
0000662f l       .debug_loc     00000000 
0000664a l       .debug_loc     00000000 
0000667b l       .debug_loc     00000000 
000066a1 l       .debug_loc     00000000 
000066e1 l       .debug_loc     00000000 
00006712 l       .debug_loc     00000000 
00006743 l       .debug_loc     00000000 
00006774 l       .debug_loc     00000000 
0000678f l       .debug_loc     00000000 
000067b5 l       .debug_loc     00000000 
00006812 l       .debug_loc     00000000 
0000682d l       .debug_loc     00000000 
0000687f l       .debug_loc     00000000 
000068c6 l       .debug_loc     00000000 
000068ec l       .debug_loc     00000000 
00006914 l       .debug_loc     00000000 
0000693a l       .debug_loc     00000000 
00006955 l       .debug_loc     00000000 
000069b2 l       .debug_loc     00000000 
000069d8 l       .debug_loc     00000000 
00006a35 l       .debug_loc     00000000 
00006a5b l       .debug_loc     00000000 
00006a83 l       .debug_loc     00000000 
00006adb l       .debug_loc     00000000 
00006b3d l       .debug_loc     00000000 
00006b58 l       .debug_loc     00000000 
00006b73 l       .debug_loc     00000000 
00006b8e l       .debug_loc     00000000 
00006ba9 l       .debug_loc     00000000 
00006bdc l       .debug_loc     00000000 
00006c28 l       .debug_loc     00000000 
00006c43 l       .debug_loc     00000000 
00006c5e l       .debug_loc     00000000 
00006c79 l       .debug_loc     00000000 
00006c94 l       .debug_loc     00000000 
00006cc8 l       .debug_loc     00000000 
00006d04 l       .debug_loc     00000000 
00006d1f l       .debug_loc     00000000 
00006d3a l       .debug_loc     00000000 
00006d55 l       .debug_loc     00000000 
00006d70 l       .debug_loc     00000000 
00006d8b l       .debug_loc     00000000 
00006da6 l       .debug_loc     00000000 
00006dc1 l       .debug_loc     00000000 
00006ddc l       .debug_loc     00000000 
00006df7 l       .debug_loc     00000000 
00006e33 l       .debug_loc     00000000 
00006e69 l       .debug_loc     00000000 
00006eb0 l       .debug_loc     00000000 
00006ecb l       .debug_loc     00000000 
00006f29 l       .debug_loc     00000000 
00006f44 l       .debug_loc     00000000 
00006f76 l       .debug_loc     00000000 
00006f9e l       .debug_loc     00000000 
00006fb9 l       .debug_loc     00000000 
00006fdf l       .debug_loc     00000000 
00006ffa l       .debug_loc     00000000 
00007016 l       .debug_loc     00000000 
00007052 l       .debug_loc     00000000 
00007083 l       .debug_loc     00000000 
000070b6 l       .debug_loc     00000000 
000070d1 l       .debug_loc     00000000 
000070ec l       .debug_loc     00000000 
0000711d l       .debug_loc     00000000 
0000714e l       .debug_loc     00000000 
0000717f l       .debug_loc     00000000 
000071b3 l       .debug_loc     00000000 
000071d9 l       .debug_loc     00000000 
000071f4 l       .debug_loc     00000000 
0000720f l       .debug_loc     00000000 
0000722a l       .debug_loc     00000000 
00007250 l       .debug_loc     00000000 
0000726b l       .debug_loc     00000000 
00007286 l       .debug_loc     00000000 
000072a1 l       .debug_loc     00000000 
000072bc l       .debug_loc     00000000 
000072e2 l       .debug_loc     00000000 
000072fd l       .debug_loc     00000000 
00007318 l       .debug_loc     00000000 
0000733e l       .debug_loc     00000000 
00007359 l       .debug_loc     00000000 
00007374 l       .debug_loc     00000000 
0000738f l       .debug_loc     00000000 
000073aa l       .debug_loc     00000000 
000073fc l       .debug_loc     00000000 
0000744e l       .debug_loc     00000000 
00007474 l       .debug_loc     00000000 
0000748f l       .debug_loc     00000000 
000074b6 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000037f2 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000009a0 l       .debug_ranges  00000000 
00001320 l       .debug_str     00000000 
000038fc l       .debug_str     00000000 
000038f5 l       .debug_str     00000000 
00000ec2 l       .debug_str     00000000 
0000380c l       .debug_str     00000000 
00003825 l       .debug_str     00000000 
0000416b l       .debug_str     00000000 
000038c1 l       .debug_str     00000000 
000038cc l       .debug_str     00000000 
000011d0 l       .debug_str     00000000 
000038d4 l       .debug_str     00000000 
000038e6 l       .debug_str     00000000 
00003819 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000038a5 l       .debug_str     00000000 
000038b6 l       .debug_str     00000000 
00003834 l       .debug_str     00000000 
0000384a l       .debug_str     00000000 
00003851 l       .debug_str     00000000 
0000385c l       .debug_str     00000000 
00003864 l       .debug_str     00000000 
0000383f l       .debug_str     00000000 
000038b0 l       .debug_str     00000000 
00003870 l       .debug_str     00000000 
00003880 l       .debug_str     00000000 
00003888 l       .debug_str     00000000 
00000e88 l       .debug_str     00000000 
000038a1 l       .debug_str     00000000 
00003891 l       .debug_str     00000000 
000003be l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
000003c3 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
00003902 l       .debug_str     00000000 
00003914 l       .debug_str     00000000 
00003926 l       .debug_str     00000000 
0000392d l       .debug_str     00000000 
0000393f l       .debug_str     00000000 
00003959 l       .debug_str     00000000 
0000396b l       .debug_str     00000000 
00003984 l       .debug_str     00000000 
00003997 l       .debug_str     00000000 
000039a9 l       .debug_str     00000000 
000039bb l       .debug_str     00000000 
000039ce l       .debug_str     00000000 
000039db l       .debug_str     00000000 
000039f8 l       .debug_str     00000000 
00003a0f l       .debug_str     00000000 
00000e89 l       .debug_str     00000000 
0000019d l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
00003a21 l       .debug_str     00000000 
00003a36 l       .debug_str     00000000 
00003a44 l       .debug_str     00000000 
000011c3 l       .debug_str     00000000 
00003a54 l       .debug_str     00000000 
00003a69 l       .debug_str     00000000 
00003a74 l       .debug_str     00000000 
00003a81 l       .debug_str     00000000 
00003a91 l       .debug_str     00000000 
00003a9a l       .debug_str     00000000 
00003aa1 l       .debug_str     00000000 
00003aaa l       .debug_str     00000000 
00003ab5 l       .debug_str     00000000 
00003abe l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
00003ac7 l       .debug_str     00000000 
00003adc l       .debug_str     00000000 
00003ae7 l       .debug_str     00000000 
00003aee l       .debug_str     00000000 
00003afb l       .debug_str     00000000 
00003b08 l       .debug_str     00000000 
00003b16 l       .debug_str     00000000 
00003b1f l       .debug_str     00000000 
000033e4 l       .debug_str     00000000 
00000f0f l       .debug_str     00000000 
00003b62 l       .debug_str     00000000 
00003b53 l       .debug_str     00000000 
00003b28 l       .debug_str     00000000 
00003b36 l       .debug_str     00000000 
00003b46 l       .debug_str     00000000 
00003b71 l       .debug_str     00000000 
00003b84 l       .debug_str     00000000 
00003b9d l       .debug_str     00000000 
00000ea7 l       .debug_str     00000000 
00003f5a l       .debug_str     00000000 
000040dc l       .debug_str     00000000 
00000908 l       .debug_ranges  00000000 
00000928 l       .debug_ranges  00000000 
00003bb4 l       .debug_str     00000000 
00003bc1 l       .debug_str     00000000 
00003bcb l       .debug_str     00000000 
00003bdf l       .debug_str     00000000 
00003bf5 l       .debug_str     00000000 
00003d0f l       .debug_str     00000000 
00003c05 l       .debug_str     00000000 
00003c12 l       .debug_str     00000000 
00003c18 l       .debug_str     00000000 
00000ed6 l       .debug_str     00000000 
00003f67 l       .debug_str     00000000 
00000940 l       .debug_ranges  00000000 
00003c34 l       .debug_str     00000000 
00003c41 l       .debug_str     00000000 
00003d21 l       .debug_str     00000000 
000011bd l       .debug_str     00000000 
00003f75 l       .debug_str     00000000 
00003f81 l       .debug_str     00000000 
00003f8f l       .debug_str     00000000 
00003fa7 l       .debug_str     00000000 
00003d3a l       .debug_str     00000000 
00003faf l       .debug_str     00000000 
00003d4c l       .debug_str     00000000 
00003fb8 l       .debug_str     00000000 
00003d65 l       .debug_str     00000000 
00003fce l       .debug_str     00000000 
00003fdc l       .debug_str     00000000 
00003feb l       .debug_str     00000000 
00004001 l       .debug_str     00000000 
00003d76 l       .debug_str     00000000 
00004017 l       .debug_str     00000000 
00000e94 l       .debug_str     00000000 
00004026 l       .debug_str     00000000 
00004034 l       .debug_str     00000000 
0000119f l       .debug_str     00000000 
00003c50 l       .debug_str     00000000 
00003d83 l       .debug_str     00000000 
00004040 l       .debug_str     00000000 
00003d8f l       .debug_str     00000000 
0000404e l       .debug_str     00000000 
00000f7a l       .debug_str     00000000 
0000125e l       .debug_str     00000000 
00003c67 l       .debug_str     00000000 
00003da2 l       .debug_str     00000000 
00003dae l       .debug_str     00000000 
00003c87 l       .debug_str     00000000 
00003dc0 l       .debug_str     00000000 
00004065 l       .debug_str     00000000 
00004075 l       .debug_str     00000000 
0000407c l       .debug_str     00000000 
00003dcf l       .debug_str     00000000 
0000408a l       .debug_str     00000000 
0000409a l       .debug_str     00000000 
000040aa l       .debug_str     00000000 
00000958 l       .debug_ranges  00000000 
00000970 l       .debug_ranges  00000000 
00003de2 l       .debug_str     00000000 
000040b1 l       .debug_str     00000000 
00003df4 l       .debug_str     00000000 
00003e0d l       .debug_str     00000000 
00000ee2 l       .debug_str     00000000 
000040b8 l       .debug_str     00000000 
00003c99 l       .debug_str     00000000 
00003e24 l       .debug_str     00000000 
000040c5 l       .debug_str     00000000 
000040d3 l       .debug_str     00000000 
00003e33 l       .debug_str     00000000 
000040db l       .debug_str     00000000 
000040e4 l       .debug_str     00000000 
000040ef l       .debug_str     00000000 
000040fa l       .debug_str     00000000 
00004104 l       .debug_str     00000000 
00003e54 l       .debug_str     00000000 
0000410e l       .debug_str     00000000 
0000411e l       .debug_str     00000000 
00003e66 l       .debug_str     00000000 
00003e76 l       .debug_str     00000000 
0000412d l       .debug_str     00000000 
0000417b l       .debug_str     00000000 
00003ca9 l       .debug_str     00000000 
00003e8c l       .debug_str     00000000 
00004139 l       .debug_str     00000000 
0000414f l       .debug_str     00000000 
00003eab l       .debug_str     00000000 
00003eca l       .debug_str     00000000 
0000415b l       .debug_str     00000000 
00003ee3 l       .debug_str     00000000 
0000416a l       .debug_str     00000000 
00000988 l       .debug_ranges  00000000 
00003f05 l       .debug_str     00000000 
00003cd2 l       .debug_str     00000000 
00003cb5 l       .debug_str     00000000 
00003d05 l       .debug_str     00000000 
00003cfb l       .debug_str     00000000 
00003cdc l       .debug_str     00000000 
00003ceb l       .debug_str     00000000 
00003f1a l       .debug_str     00000000 
0000417a l       .debug_str     00000000 
00004188 l       .debug_str     00000000 
00003f2f l       .debug_str     00000000 
00003f40 l       .debug_str     00000000 
00003d2f l       .debug_str     00000000 
00000f39 l       .debug_str     00000000 
00000eb3 l       .debug_str     00000000 
00000d84 l       .debug_frame   00000000 
f000264c l       .text  00000000 
f000267c l       .text  00000000 
f0002768 l       .text  00000000 
f00027ce l       .text  00000000 
f0002850 l       .text  00000000 
f0002860 l       .text  00000000 
f00029a4 l       .text  00000000 
f0002ad2 l       .text  00000000 
00000000 l    df *ABS*  00000000 list.c
f0002ad2 l       .text  00000000 
f0002ad2 l       .text  00000000 
f0002ad2 l       .text  00000000 
f0002ad2 l       .text  00000000 
f0002ad6 l       .text  00000000 
f0002ada l       .text  00000000 
f0002adc l       .text  00000000 
f0002ade l       .text  00000000 
f0002ae0 l       .text  00000000 
f0002ae4 l       .text  00000000 
f0002ae6 l       .text  00000000 
f0002ae6 l       .text  00000000 
f0002ae6 l       .text  00000000 
f0002ae6 l       .text  00000000 
f0002ae6 l       .text  00000000 
f0002ae6 l       .text  00000000 
f0002aea l       .text  00000000 
f0002aec l       .text  00000000 
f0002aec l       .text  00000000 
f0002aec l       .text  00000000 
f0002aec l       .text  00000000 
f0002aec l       .text  00000000 
f0002aec l       .text  00000000 
f0002aee l       .text  00000000 
f0002af0 l       .text  00000000 
f0002af2 l       .text  00000000 
f0002af2 l       .text  00000000 
f0002af4 l       .text  00000000 
f0002af6 l       .text  00000000 
f0002af8 l       .text  00000000 
f0002afa l       .text  00000000 
f0002afe l       .text  00000000 
f0002b00 l       .text  00000000 
f0002b04 l       .text  00000000 
f0002b06 l       .text  00000000 
f0002b0a l       .text  00000000 
f0002b0c l       .text  00000000 
f0002b0e l       .text  00000000 
f0002b0e l       .text  00000000 
000074d1 l       .debug_loc     00000000 
000074ec l       .debug_loc     00000000 
00007507 l       .debug_loc     00000000 
00007522 l       .debug_loc     00000000 
0000753d l       .debug_loc     00000000 
00007563 l       .debug_loc     00000000 
0000757e l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004195 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000ac8 l       .debug_ranges  00000000 
000038a5 l       .debug_str     00000000 
000038b6 l       .debug_str     00000000 
00003834 l       .debug_str     00000000 
0000384a l       .debug_str     00000000 
00003851 l       .debug_str     00000000 
0000385c l       .debug_str     00000000 
00003864 l       .debug_str     00000000 
0000383f l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000038b0 l       .debug_str     00000000 
00003870 l       .debug_str     00000000 
00003880 l       .debug_str     00000000 
00003888 l       .debug_str     00000000 
00000e88 l       .debug_str     00000000 
000038a1 l       .debug_str     00000000 
00003891 l       .debug_str     00000000 
00003bf5 l       .debug_str     00000000 
00004075 l       .debug_str     00000000 
00003bcb l       .debug_str     00000000 
000041ae l       .debug_str     00000000 
00003c41 l       .debug_str     00000000 
000041b5 l       .debug_str     00000000 
00003ca9 l       .debug_str     00000000 
000041c3 l       .debug_str     00000000 
000041d5 l       .debug_str     00000000 
00003c34 l       .debug_str     00000000 
000041e0 l       .debug_str     00000000 
00003926 l       .debug_str     00000000 
000010c4 l       .debug_frame   00000000 
f0002ae6 l       .text  00000000 
f0002aec l       .text  00000000 
f0002b0e l       .text  00000000 
00000000 l    df *ABS*  00000000 heap_1.c
f0002b0e l       .text  00000000 
f0002b0e l       .text  00000000 
f0002b0e l       .text  00000000 
f0002b10 l       .text  00000000 
f0002b18 l       .text  00000000 
f0002b1a l       .text  00000000 
f0002b1a l       .text  00000000 
f0002b1e l       .text  00000000 
f0002b22 l       .text  00000000 
f0002b26 l       .text  00000000 
f0002b28 l       .text  00000000 
f0002b2a l       .text  00000000 
f0002b2c l       .text  00000000 
f0002b2e l       .text  00000000 
e00020bc l     O .bss   00000004 pvPortMalloc.pucAlignedHeap
f0002b2e l       .text  00000000 
f0002b38 l       .text  00000000 
f0002b3a l       .text  00000000 
f0002b3a l       .text  00000000 
f0002b3e l       .text  00000000 
f0002b3e l       .text  00000000 
f0002b48 l       .text  00000000 
f0002b4e l       .text  00000000 
e00020c0 l     O .bss   00000004 xNextFreeByte
f0002b50 l       .text  00000000 
f0002b5c l       .text  00000000 
f0002b60 l       .text  00000000 
f0002b6c l       .text  00000000 
f0002b70 l       .text  00000000 
f0002b70 l       .text  00000000 
f0002b72 l       .text  00000000 
f0002b74 l       .text  00000000 
f0002b74 l       .text  00000000 
f0002b76 l       .text  00000000 
f0002b7a l       .text  00000000 
f0002b7c l       .text  00000000 
f0002b7c l       .text  00000000 
f0002b7e l       .text  00000000 
f0002b7e l       .text  00000000 
f0002b82 l       .text  00000000 
f0002b82 l       .text  00000000 
f0002b84 l       .text  00000000 
f0002b8a l       .text  00000000 
f0002b90 l       .text  00000000 
f0002b90 l       .text  00000000 
f0002b90 l       .text  00000000 
f0002b90 l       .text  00000000 
f0002b90 l       .text  00000000 
f0002b90 l       .text  00000000 
f0002b92 l       .text  00000000 
f0002b92 l       .text  00000000 
00007599 l       .debug_loc     00000000 
000075d5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000041ef l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000af8 l       .debug_ranges  00000000 
00003bb4 l       .debug_str     00000000 
0000421b l       .debug_str     00000000 
00004263 l       .debug_str     00000000 
0000426f l       .debug_str     00000000 
000003c3 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
0000422a l       .debug_str     00000000 
00002c8b l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00003c99 l       .debug_str     00000000 
00003dc0 l       .debug_str     00000000 
0000052a l       .debug_str     00000000 
00001182 l       .debug_str     00000000 
00003bc1 l       .debug_str     00000000 
00004278 l       .debug_str     00000000 
00004238 l       .debug_str     00000000 
0000424e l       .debug_str     00000000 
00001128 l       .debug_frame   00000000 
f0002b90 l       .text  00000000 
f0002b92 l       .text  00000000 
00000000 l    df *ABS*  00000000 test_hooks_default.c
f0002b92 l       .text  00000000 
f0002b92 l       .text  00000000 
f0002b92 l       .text  00000000 
f0002b92 l       .text  00000000 
f0002b96 l       .text  00000000 
f0002b96 l       .text  00000000 
f0002b96 l       .text  00000000 
f0002b96 l       .text  00000000 
f0002b96 l       .text  00000000 
f0002b96 l       .text  00000000 
f0002b9a l       .text  00000000 
f0002b9a l       .text  00000000 
00000000 l       .debug_str     00000000 
0000427b l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000b20 l       .debug_ranges  00000000 
00001018 l       .debug_str     00000000 
00001033 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
00001188 l       .debug_frame   00000000 
f0002b96 l       .text  00000000 
f0002b9a l       .text  00000000 
00000000 l    df *ABS*  00000000 top_earlgrey.c
00000000 l       .debug_str     00000000 
000022a2 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
000022cc l       .debug_str     00000000 
0000193e l       .debug_str     00000000 
000018d6 l       .debug_str     00000000 
0000147d l       .debug_str     00000000 
0000149f l       .debug_str     00000000 
000014bf l       .debug_str     00000000 
000014df l       .debug_str     00000000 
000014ff l       .debug_str     00000000 
0000151f l       .debug_str     00000000 
0000153e l       .debug_str     00000000 
00001562 l       .debug_str     00000000 
00001581 l       .debug_str     00000000 
000015a0 l       .debug_str     00000000 
000015bf l       .debug_str     00000000 
000015e1 l       .debug_str     00000000 
00001603 l       .debug_str     00000000 
00001625 l       .debug_str     00000000 
0000164c l       .debug_str     00000000 
0000166f l       .debug_str     00000000 
00001692 l       .debug_str     00000000 
000016b3 l       .debug_str     00000000 
000016d7 l       .debug_str     00000000 
000016ff l       .debug_str     00000000 
00001724 l       .debug_str     00000000 
0000174a l       .debug_str     00000000 
0000176f l       .debug_str     00000000 
00001792 l       .debug_str     00000000 
000017b6 l       .debug_str     00000000 
000017d5 l       .debug_str     00000000 
000017f4 l       .debug_str     00000000 
00001813 l       .debug_str     00000000 
00001834 l       .debug_str     00000000 
00001854 l       .debug_str     00000000 
00001879 l       .debug_str     00000000 
00001898 l       .debug_str     00000000 
000018b7 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
000022f7 l       .debug_str     00000000 
000028f1 l       .debug_str     00000000 
000028d3 l       .debug_str     00000000 
00002319 l       .debug_str     00000000 
0000233a l       .debug_str     00000000 
0000235b l       .debug_str     00000000 
0000237c l       .debug_str     00000000 
0000239d l       .debug_str     00000000 
000023bd l       .debug_str     00000000 
000023e2 l       .debug_str     00000000 
00002402 l       .debug_str     00000000 
00002422 l       .debug_str     00000000 
00002442 l       .debug_str     00000000 
00002465 l       .debug_str     00000000 
00002488 l       .debug_str     00000000 
000024ab l       .debug_str     00000000 
000024cd l       .debug_str     00000000 
000024f1 l       .debug_str     00000000 
00002515 l       .debug_str     00000000 
00002537 l       .debug_str     00000000 
0000255c l       .debug_str     00000000 
00002581 l       .debug_str     00000000 
000025a6 l       .debug_str     00000000 
000025cf l       .debug_str     00000000 
000025f5 l       .debug_str     00000000 
00002617 l       .debug_str     00000000 
0000263c l       .debug_str     00000000 
00002663 l       .debug_str     00000000 
00002689 l       .debug_str     00000000 
000026b3 l       .debug_str     00000000 
000026d8 l       .debug_str     00000000 
000026f8 l       .debug_str     00000000 
0000271a l       .debug_str     00000000 
00002739 l       .debug_str     00000000 
00002759 l       .debug_str     00000000 
00002779 l       .debug_str     00000000 
00002799 l       .debug_str     00000000 
000027bb l       .debug_str     00000000 
000027dc l       .debug_str     00000000 
00002802 l       .debug_str     00000000 
00002822 l       .debug_str     00000000 
00002842 l       .debug_str     00000000 
0000286a l       .debug_str     00000000 
0000288d l       .debug_str     00000000 
000028b3 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
00007614 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000042b1 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00000b38 l       .debug_ranges  00000000 
000042db l       .debug_str     00000000 
000042e7 l       .debug_str     00000000 
00000e2d l       .debug_str     00000000 
00000de5 l       .debug_str     00000000 
00000df2 l       .debug_str     00000000 
00000e06 l       .debug_str     00000000 
00000e17 l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
000042f5 l       .debug_str     00000000 
000005f6 l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
00004305 l       .debug_str     00000000 
00004323 l       .debug_str     00000000 
0000433a l       .debug_str     00000000 
0000434a l       .debug_str     00000000 
0000435a l       .debug_str     00000000 
00004368 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00004376 l       .debug_str     00000000 
0000438b l       .debug_str     00000000 
000043a2 l       .debug_str     00000000 
00000b32 l       .debug_str     00000000 
000043bb l       .debug_str     00000000 
000043d7 l       .debug_str     00000000 
000000e5 l       .debug_str     00000000 
0000299b l       .debug_str     00000000 
00000d84 l       .debug_str     00000000 
000043e6 l       .debug_str     00000000 
000011bc l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 static_critical_boot_measurements.c
00000000 l       .debug_str     00000000 
00001f01 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00001f48 l       .debug_str     00000000 
00001f62 l       .debug_str     00000000 
00001f5a l       .debug_str     00000000 
00001c55 l       .debug_str     00000000 
00001c40 l       .debug_str     00000000 
00002112 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_epmp_state.c
00000000 l       .debug_str     00000000 
00001f76 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00001fb6 l       .debug_str     00000000 
00001fd8 l       .debug_str     00000000 
00001fc1 l       .debug_str     00000000 
00001fc8 l       .debug_str     00000000 
00001fd0 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
00001fe5 l       .debug_str     00000000 
000000b3 l       .debug_str     00000000 
00002023 l       .debug_str     00000000 
00002069 l       .debug_str     00000000 
00002030 l       .debug_str     00000000 
00002044 l       .debug_str     00000000 
0000203b l       .debug_str     00000000 
00002050 l       .debug_str     00000000 
0000205c l       .debug_str     00000000 
00002063 l       .debug_str     00000000 
0000019c l       .debug_str     00000000 
00000521 l       .debug_str     00000000 
0000026c l       .debug_str     00000000 
f000170e g     F .text  0000008a rand_testutils_init
f003b000 g       *ABS*  00000000 _non_volatile_scratch_start
f0039800 g       *ABS*  00000000 _non_volatile_counter_3_end
f0039000 g       *ABS*  00000000 _non_volatile_counter_3_start
f000156c  w    F .text  0000001c ottf_instr_misaligned_fault_handler
f0001680  w    F .text  00000014 ottf_external_nmi_handler
e00027c4 g       .data  00000000 __global_pointer$
e0002070 g     O .bss   00000004 ottf_plic
e0000000 g     O .static_critical       00000020 boot_measurements
f000156c  w    F .text  0000001c ottf_instr_access_fault_handler
f0000d92 g     F .text  000000ec hmac_testutils_finish_and_check_polled
f000237c g     F .text  000000c0 memrchr
f0002112 g     F .text  00000022 dif_uart_byte_send_polled
f000156c  w    F .text  0000001c ottf_user_ecall_handler
f0002b9c g       .shutdown      00000000 _text_end
f0000ffe g     F .text  00000056 dif_hmac_fifo_push
f0001472 g     F .text  0000001a irq_external_ctrl
f00014b4 g     F .text  0000006e ottf_generic_fault_print
d0010000 g       .manifest      00000000 _chip_info_end
e0002080 g     O .bss   00000004 pxCurrentTCB
f0001694  w    F .text  00000032 ottf_internal_isr
f0001798 g     F .text  0000000e dif_rv_core_ibex_init
f000388c g     O .rodata        000002e8 top_earlgrey_plic_interrupt_for_peripheral
f0003ea8 g     O .rodata        00000008 kClockFreqPeripheralHz
f00016ee g     F .text  00000020 dif_rv_plic_irq_complete
f0001444 g     F .text  0000001c xPortStartScheduler
f00021e4 g     F .text  00000088 memcpy
f00015b4  w    F .text  000000cc ottf_external_isr
f000156c  w    F .text  0000001c ottf_illegal_instr_fault_handler
f0002b90 g     F .text  00000002 vPortFree
f0000f30 g     F .text  0000000e dif_hmac_init
f0002b96  w    F .text  00000004 manufacturer_post_test_hook
00005000 g       *ABS*  00000000 _non_volatile_scratch_size
e0002068 g       .bss   00000000 _bss_start
f000148c g     F .text  00000016 irq_timer_ctrl
00000400 g       *ABS*  00000000 _manifest_code_start
00000000 g       *ABS*  00000000 __DYNAMIC
f0001866 g     F .text  00000006 ibex_mepc_read
f003b000 g       *ABS*  00000000 _non_volatile_counter_0_end
f0000400 g       .vectors       00000000 _text_start
f000156c  w    F .text  0000001c ottf_load_store_fault_handler
f0002ae6 g     F .text  00000006 vListInitialiseItem
e00021a4 g     O .freertos.heap 00008000 ucHeap
00002b9c g       *ABS*  00000000 _manifest_code_end
f0000400 g     F .vectors       00000080 _ottf_interrupt_vector
f0000548 g       .init_array    00000000 _init_array_end
f000190e g     F .text  00000034 base_log_internal_dv
f0003f64 g       *ABS*  00000000 _data_init_end
f0002058 g     F .text  000000ba dif_uart_configure
f0001854 g     F .text  00000006 abort
e0000020 g     O .static_critical       00000054 epmp_state
f0002b0e g     F .text  00000082 pvPortMalloc
f0002ad2 g     F .text  00000014 vListInitialise
f0000fb6 g     F .text  00000048 dif_hmac_mode_sha256_start
e00021a4 g       .bss   00000000 _bss_end
f0002b92  w    F .text  00000004 manufacturer_pre_test_hook
f00010a4 g     F .text  0000004e dif_hmac_finish
f00010f2 g     F .text  00000052 ottf_machine_ecall_handler
f0003ec0 g       *ABS*  00000000 _data_init_start
f0001460 g     F .text  00000012 irq_global_ctrl
f00013d4 g     F .text  00000038 vApplicationMallocFailedHook
f0000480 g     F .crt   00000068 _ottf_start
e0001fe4 g     O .data  00000084 status_codes
00001fc4 g       *ABS*  00000000 _static_critical_size
f00014a2 g     F .text  00000012 irq_software_ctrl
f000050c g     F .crt   0000003a crt_section_copy
f0003eb0 g     O .rodata        00000008 kUartBaudrate
f00022ce g     F .text  000000ae memchr
f00013d2 g     F .text  00000002 test_coverage_send_buffer
00000800 g       *ABS*  00000000 _non_volatile_counter_size
00040000 g       *ABS*  00000000 _ottf_size
f000159c  w    F .text  00000014 ottf_timer_isr
f0002850 g     F .text  00000010 vTaskSuspendAll
e0001fc4 g       .data  00000000 _data_start
f003a800 g       *ABS*  00000000 _non_volatile_counter_0_start
f0002aec g     F .text  00000022 uxListRemove
f0040000 g       .freertos.heap 00000000 _non_volatile_scratch_end
f003a000 g       *ABS*  00000000 _non_volatile_counter_2_end
f0001680  w    F .text  00000014 ottf_load_integrity_error_handler
f0039800 g       *ABS*  00000000 _non_volatile_counter_2_start
f000267c g     F .text  000000ec vTaskSwitchContext
f000156c  w    F .text  0000001c ottf_breakpoint_handler
00004000 g       *ABS*  00000000 _stack_size
f0000608 g     F .text  00000050 handler_exception
f00019e8 g     F .text  0000048e base_vfprintf
f0000f3e g     F .text  00000078 dif_hmac_mode_hmac_start
e0002068 g       .data  00000000 _data_end
f000140c g     F .text  00000038 vApplicationStackOverflowHook
f0001946 g     F .text  00000016 base_uart_stdout
f0000754 g     F .text  00000052 handler_irq_internal
f00019ce g     F .text  0000001a base_vprintf
f0001588  w    F .text  00000014 ottf_software_isr
e0000074 g     O .static_critical       00001f50 sec_mmio_ctx
f000226c g     F .text  00000062 memset
f000185a g     F .text  00000006 ibex_mcause_read
f00006ac g     F .text  00000052 handler_irq_timer
f0000bfe g     F .text  00000194 hmac_testutils_finish_polled
e0020000 g       .manifest      00000000 _stack_end
f0001054 g     F .text  0000001e dif_hmac_fifo_count_entries
e00020c4 g     O .bss   00000018 rand_testutils_rng_ctx
e00021a4 g       .freertos.heap 00000000 _freertos_heap_start
f00015b0  w    F .text  00000004 ottf_flow_control_isr
e001c000 g       *ABS*  00000000 _stack_start
f00004e8 g     F .crt   00000024 crt_section_clear
f0002860 g     F .text  00000144 xTaskResumeAll
f0000658 g     F .text  00000052 handler_irq_software
f0003e8c g     O .rodata        00000004 uxTopUsedPriority
f0002768 g     F .text  00000066 vTaskStartScheduler
f0003ea0 g     O .rodata        00000008 kClockFreqCpuHz
00010000 g       *ABS*  00000000 _dv_log_offset
f0000548 g     F .text  00000052 xPortStartFirstTask
f0001522  w    F .text  0000004a ottf_exception_handler
f00009ae g     F .text  000000c2 hmac_testutils_check_message_length
d000ff80 g       *ABS*  00000000 _chip_info_start
f0000810 g     F .text  000000a2 test_main
f0001072 g     F .text  0000001e dif_hmac_get_message_length
f00029a4 g     F .text  0000012e xTaskIncrementTick
f0003eb8 g     O .rodata        00000004 kDeviceTestStatusAddress
f0002ce0 g     O .rodata        00000008 kOttfTestConfig
00000800 g       *ABS*  00000000 _epmp_reset_rx_size
f0002134 g     F .text  000000b0 udiv64_slow
f000199c g     F .text  00000032 base_printf
f00016c6 g     F .text  00000028 dif_rv_plic_irq_claim
f0003ebc g     O .rodata        00000004 kDeviceLogBypassUartAddress
f000243c g     F .text  00000210 xTaskCreate
f0003e98 g     O .rodata        00000004 kDeviceType
f0001860 g     F .text  00000006 ibex_mtval_read
f003a800 g       *ABS*  00000000 _non_volatile_counter_1_end
00000480 g       *ABS*  00000000 _manifest_entry_point
f0001144 g     F .text  0000012e _ottf_main
00000080 g       *ABS*  00000000 _chip_info_size
f0000a70 g     F .text  0000018e hmac_testutils_fifo_empty_polled
f000264c g     F .text  00000030 vTaskExitCritical
f000059c g     F .text  00000024 pxPortInitialiseStack
f0001fd8 g     F .text  00000072 status_extract
f0001090 g     F .text  00000014 dif_hmac_process
00000100 g       *ABS*  00000000 _non_volatile_counter_flash_words
f000204a g     F .text  0000000e dif_uart_init
f003a000 g       *ABS*  00000000 _non_volatile_counter_1_start
f0000000 g       .manifest      00000000 _ottf_start_address
f0000548 g       .init_array    00000000 _init_array_start
f00017a6 g     F .text  000000ae test_status_set
f000186c g     F .text  000000a2 base_log_internal_core
f00007a8 g     F .text  00000068 ottf_isr_exit
f0000700 g     F .text  00000052 handler_irq_external
f0000e7e g     F .text  000000b2 hmac_testutils_push_message



Disassembly of section .vectors:

f0000400 <_ottf_interrupt_vector>:
_ottf_interrupt_vector():
f0000400:       2080006f                j       f0000608 <handler_exception>
f0000404:       c0001073                unimp
f0000408:       c0001073                unimp
f000040c:       24c0006f                j       f0000658 <handler_irq_software>
f0000410:       c0001073                unimp
f0000414:       c0001073                unimp
f0000418:       c0001073                unimp
f000041c:       2900006f                j       f00006ac <handler_irq_timer>
f0000420:       c0001073                unimp
f0000424:       c0001073                unimp
f0000428:       c0001073                unimp
f000042c:       2d40006f                j       f0000700 <handler_irq_external>
f0000430:       c0001073                unimp
f0000434:       c0001073                unimp
f0000438:       c0001073                unimp
f000043c:       c0001073                unimp
f0000440:       c0001073                unimp
f0000444:       c0001073                unimp
f0000448:       c0001073                unimp
f000044c:       c0001073                unimp
f0000450:       c0001073                unimp
f0000454:       c0001073                unimp
f0000458:       c0001073                unimp
f000045c:       c0001073                unimp
f0000460:       c0001073                unimp
f0000464:       c0001073                unimp
f0000468:       c0001073                unimp
f000046c:       c0001073                unimp
f0000470:       c0001073                unimp
f0000474:       c0001073                unimp
f0000478:       c0001073                unimp
f000047c:       2d80006f                j       f0000754 <handler_irq_internal>

Disassembly of section .crt:

f0000480 <_ottf_start>:
_ottf_start():
f0000480:       f0002197                auipc   gp,0xf0002
f0000484:       34418193                addi    gp,gp,836 # e00027c4 <__global_pointer$>
f0000488:       f0020117                auipc   sp,0xf0020
f000048c:       b6810113                addi    sp,sp,-1176 # e001fff0 <_stack_start+0x3ff0>
f0000490:       00000297                auipc   t0,0x0
f0000494:       f7128293                addi    t0,t0,-143 # f0000401 <_ottf_interrupt_vector+0x1>
f0000498:       30529073                csrw    mtvec,t0
f000049c:       f0002517                auipc   a0,0xf0002
f00004a0:       b2850513                addi    a0,a0,-1240 # e0001fc4 <kHmacKey>
f00004a4:       8a418593                addi    a1,gp,-1884 # e0002068 <uart0>
f00004a8:       00004617                auipc   a2,0x4
f00004ac:       a1860613                addi    a2,a2,-1512 # f0003ec0 <_data_init_start>
f00004b0:       28b1                    jal     f000050c <crt_section_copy>
f00004b2:       f0002517                auipc   a0,0xf0002
f00004b6:       bb650513                addi    a0,a0,-1098 # e0002068 <uart0>
f00004ba:       f0002597                auipc   a1,0xf0002
f00004be:       cea58593                addi    a1,a1,-790 # e00021a4 <ucHeap>
f00004c2:       201d                    jal     f00004e8 <crt_section_clear>
f00004c4:       00000417                auipc   s0,0x0
f00004c8:       08440413                addi    s0,s0,132 # f0000548 <xPortStartFirstTask>
f00004cc:       00000497                auipc   s1,0x0
f00004d0:       07c48493                addi    s1,s1,124 # f0000548 <xPortStartFirstTask>
f00004d4:       00947863                bgeu    s0,s1,f00004e4 <init_array_loop_end>

f00004d8 <init_array_loop>:
f00004d8:       /-> 00042283            lw      t0,0(s0)
f00004dc:       |   9282                        jalr    t0
f00004de:       |   0411                        addi    s0,s0,4
f00004e0:       \-- fe946ce3            bltu    s0,s1,f00004d8 <init_array_loop>

f00004e4 <init_array_loop_end>:
f00004e4:       4610006f                j       f0001144 <_ottf_main>

f00004e8 <crt_section_clear>:
crt_section_clear():
/proc/self/cwd/sw/device/lib/crt/crt.S:41
  .global crt_section_clear
  .type crt_section_clear, @function
crt_section_clear:

  // Check that start is before end.
  bgeu a0, a1, .L_clear_nothing
f00004e8:       /-------- 00b57e63              bgeu    a0,a1,f0000504 <crt_section_clear+0x1c>
/proc/self/cwd/sw/device/lib/crt/crt.S:44

  // Check that start and end are word aligned.
  or   t0, a0, a1
f00004ec:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:45
  andi t0, t0, 0x3
f00004f0:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:46
  bnez t0, .L_clear_error
f00004f4:       |  /----- 00029b63              bnez    t0,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:51

.L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
f00004f8:       |  |  /-> 00052023              sw      zero,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:52
  addi a0, a0, 4
f00004fc:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:53
  bltu a0, a1, .L_clear_loop
f00004fe:       |  |  \-- feb56de3              bltu    a0,a1,f00004f8 <crt_section_clear+0x10>
/proc/self/cwd/sw/device/lib/crt/crt.S:54
  ret
f0000502:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:59

.L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_clear_error
f0000504:       \--+----X 00b51363              bne     a0,a1,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:60
  ret
f0000508:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:63

.L_clear_error:
  unimp
f000050a:          \----> 0000                  unimp

f000050c <crt_section_copy>:
crt_section_copy():
/proc/self/cwd/sw/device/lib/crt/crt.S:95
  .global crt_section_copy
  .type crt_section_copy, @function
crt_section_copy:

  // Check that start is before end.
  bgeu a0, a1, .L_copy_nothing
f000050c:       /-------- 02b57963              bgeu    a0,a1,f000053e <crt_section_copy+0x32>
/proc/self/cwd/sw/device/lib/crt/crt.S:98

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
f0000510:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:99
  or   t0, t0, a2
f0000514:       |         00c2e2b3              or      t0,t0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:100
  andi t0, t0, 0x3
f0000518:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:101
  bnez t0, .L_copy_error
f000051c:       |  /----- 02029463              bnez    t0,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:118
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
f0000520:       |  |      40c502b3              sub     t0,a0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:119
  sub  t1, a1, a0           // end - start
f0000524:       |  |      40a58333              sub     t1,a1,a0
/proc/self/cwd/sw/device/lib/crt/crt.S:120
  bltu t0, t1, .L_copy_error
f0000528:       |  +----- 0062ee63              bltu    t0,t1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:125

.L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
f000052c:       |  |  /-> 00062283              lw      t0,0(a2)
/proc/self/cwd/sw/device/lib/crt/crt.S:126
  addi a2, a2, 4
f0000530:       |  |  |   0611                  addi    a2,a2,4
/proc/self/cwd/sw/device/lib/crt/crt.S:127
  sw   t0, 0(a0)
f0000532:       |  |  |   00552023              sw      t0,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:128
  addi a0, a0, 4
f0000536:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:129
  bltu a0, a1, .L_copy_loop
f0000538:       |  |  \-- feb56ae3              bltu    a0,a1,f000052c <crt_section_copy+0x20>
/proc/self/cwd/sw/device/lib/crt/crt.S:130
  ret
f000053c:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:135

.L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_copy_error
f000053e:       \--+----X 00b51363              bne     a0,a1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:136
  ret
f0000542:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:139

.L_copy_error:
  unimp
f0000544:          \----> 0000                  unimp

Disassembly of section .text:

f0000548 <xPortStartFirstTask>:
xPortStartFirstTask():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:18
  .global xPortStartFirstTask
  .type xPortStartFirstTask, @function
xPortStartFirstTask:
  // Load the stack pointer for the current TCB (just going to clobber sp here
  // since we are setting it here anyway).
  lw  sp, pxCurrentTCB
f0000548:       f0002117                auipc   sp,0xf0002
f000054c:       b3812103                lw      sp,-1224(sp) # e0002080 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:19
  lw  sp, 0(sp)
f0000550:       4102                    lw      sp,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:23

  // NOTE: for starting the FreeRTOS scheduler, the exception return address is
  // used as the function return address. See pxPortInitialiseStack below.
  lw  ra, 0(sp)
f0000552:       4082                    lw      ra,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:26

  // Restore registers initialized on task start.
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000554:       4332                    lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:27
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000556:       43c2                    lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:28
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000558:       4452                    lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:29
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f000055a:       44e2                    lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:30
  lw   a0,  7 * OTTF_WORD_SIZE(sp) // task parameters (pvParameters)
f000055c:       4572                    lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:31
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f000055e:       5582                    lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:32
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000560:       5612                    lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:33
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000562:       56a2                    lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:34
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000564:       5732                    lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:35
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000566:       57c2                    lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:36
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000568:       5852                    lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:37
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f000056a:       58e2                    lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:38
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f000056c:       5972                    lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:39
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f000056e:       4986                    lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:40
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000570:       4a16                    lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:41
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000572:       4aa6                    lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:42
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000574:       4b36                    lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:43
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000576:       4bc6                    lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:44
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000578:       4c56                    lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:45
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f000057a:       4ce6                    lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:46
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f000057c:       4d76                    lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:47
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f000057e:       5d86                    lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:48
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000580:       5e16                    lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:49
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000582:       5ea6                    lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:50
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000584:       5f36                    lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:51
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000586:       5fc6                    lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:55

  // Initialize t0 to the value of MSTATUS with global interrupts enabled, which
  // is required because this returns with ret, not eret.
  lw t0, 29 * OTTF_WORD_SIZE(sp) // Load the MSTATUS state from the stack.
f0000588:       52d6                    lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:56
  ori t0, t0, 1<<3               // Set MIE field.
f000058a:       0082e293                ori     t0,t0,8
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:57
  csrw mstatus, t0               // Ibex interrupts enabled from here!
f000058e:       30029073                csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:60

  // Restore t0 register from the stack (after using it to manipulate MSTATUS).
  lw t0, 2 * OTTF_WORD_SIZE(sp)
f0000592:       42a2                    lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:63

  // Update the stack pointer (shrinking the stack).
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000594:       07810113                addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:65

  ret
f0000598:       8082                    ret
f000059a:       0001                    nop

f000059c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:133
  .balign 4
  .global pxPortInitialiseStack
  .type pxPortInitialiseStack, @function
pxPortInitialiseStack:
  // Setup the MSTATUS register.
  csrr t0, mstatus
f000059c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:137
  // Ensure interrupts are disabled when the stack is restored within an ISR.
  // Required when a task is created after the scheduler has been started,
  // otherwise interrupts would be disabled anyway.
  andi t0, t0, ~0x8
f00005a0:       ff72f293                andi    t0,t0,-9
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:139
  // Generate the value 0x1880, to set the MPIE and MPP bits in MSTATUS.
  li t1, 0x188 << 4
f00005a4:       6309                    lui     t1,0x2
f00005a6:       88030313                addi    t1,t1,-1920 # 1880 <_epmp_reset_rx_size+0x1080>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:140
  or t0, t0, t1
f00005aa:       0062e2b3                or      t0,t0,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:143

  // Setup the stack frame detailed above (a0 holds the task stack pointer).
  addi a0, a0, -OTTF_CONTEXT_SIZE
f00005ae:       f8850513                addi    a0,a0,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:145
  // Push MSTATUS onto the stack.
  sw t0, 29 * OTTF_WORD_SIZE(a0)
f00005b2:       06552a23                sw      t0,116(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:148

  // Push task parameters (pvParameters that is in x12/a2, on the stack.
  sw a2, 7 * OTTF_WORD_SIZE(a0)
f00005b6:       cd50                    sw      a2,28(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:150
  // Push 0 for the portTASK_RETURN_ADDRESS for now.
  sw zero, 1 * OTTF_WORD_SIZE(a0)
f00005b8:       00052223                sw      zero,4(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:155
  // Push the pointer to the task's entry point (pxCode) onto the stack. This
  // will be loaded into either ra (in xPortStartFirstTask) or mepc (in
  // freertosIrqExit), so that when ret/mret is called control flow will be
  // transferred accordingly.
  sw a1, 0(a0)
f00005bc:       c10c                    sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:157

  ret
f00005be:       8082                    ret

f00005c0 <compute_mepc_on_synchronous_irq>:
compute_mepc_on_synchronous_irq():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:32
   * below will cause another exception.
   */
  .balign 4
  .type compute_mepc_on_synchronous_irq, @function
compute_mepc_on_synchronous_irq:
  csrr t0, mepc
f00005c0:           341022f3            csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:33
  csrr t1, mcause
f00005c4:           34202373            csrr    t1,mcause
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:34
  li t2, 0x01
f00005c8:           4385                        li      t2,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:35
  bne t1, t2, .L_load_mepc
f00005ca:       /-- 00731363            bne     t1,t2,f00005d0 <compute_mepc_on_synchronous_irq+0x10>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:36
  ret
f00005ce:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:38
.L_load_mepc:
  lh t2, 0(t0)
f00005d0:       \-> 00029383            lh      t2,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:39
  li t1, 0x3
f00005d4:           430d                        li      t1,3
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:40
  and t3, t2, t1
f00005d6:           0063fe33            and     t3,t2,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:41
  beq t3, t1, .L_32bit_trap_instr
f00005da:       /-- 006e0463            beq     t3,t1,f00005e2 <compute_mepc_on_synchronous_irq+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:42
  addi t0, t0, OTTF_HALF_WORD_SIZE
f00005de:       |   0289                        addi    t0,t0,2
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:43
  ret
f00005e0:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:45
.L_32bit_trap_instr:
  addi t0, t0, OTTF_WORD_SIZE
f00005e2:       \-> 0291                        addi    t0,t0,4
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:46
  ret
f00005e4:           8082                        ret
f00005e6:           0001                        nop

f00005e8 <save_current_sp_to_tcb>:
save_current_sp_to_tcb():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:61
   * exception, if we attempt to perform a store to said address.
   */
  .balign 4
  .type save_current_sp_to_tcb, @function
save_current_sp_to_tcb:
  la t0, kOttfTestConfig
f00005e8:           00002297            auipc   t0,0x2
f00005ec:           6f828293            addi    t0,t0,1784 # f0002ce0 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:62
  lb t1, 0(t0)
f00005f0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:63
  beqz t1, .L_skip_sp_save
f00005f4:       /-- 00030863            beqz    t1,f0000604 <save_current_sp_to_tcb+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:64
  lw t2, pxCurrentTCB
f00005f8:       |   f0002397            auipc   t2,0xf0002
f00005fc:       |   a883a383            lw      t2,-1400(t2) # e0002080 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:65
  sw sp, 0(t2)
f0000600:       |   0023a023            sw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:67
.L_skip_sp_save:
  ret
f0000604:       \-> 8082                        ret
f0000606:           0001                        nop

f0000608 <handler_exception>:
handler_exception():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:80
  .balign 4
  .global handler_exception
  .type handler_exception, @function
handler_exception:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000608:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:81
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000060c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:82
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000060e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:83
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000610:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:84
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000612:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:85
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000614:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:86
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000616:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:87
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000618:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:88
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000061a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:89
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000061c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:90
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000061e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:91
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000620:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:92
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000622:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:93
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000624:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:94
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000626:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:95
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000628:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:96
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000062a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:97
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000062c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:98
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000062e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:99
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000630:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:100
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000632:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:101
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000634:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:102
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000636:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:103
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000638:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:104
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000063a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:105
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000063c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:106
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000063e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:107
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000640:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:108
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000642:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:111

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000644:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:112
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000648:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:116

  // Save MEPC to the stack after updating it to the next instruction (since
  // this is a synchronous IRQ).
  jal compute_mepc_on_synchronous_irq
f000064a:       3f9d                    jal     f00005c0 <compute_mepc_on_synchronous_irq>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:117
  sw t0, 0(sp)
f000064c:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:121

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000064e:       3f69                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:124

  // Jump to the exception handler.
  jal ottf_exception_handler
f0000650:       6d3000ef                jal     ra,f0001522 <ottf_exception_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:127

  // Return from ISR.
  j ottf_isr_exit
f0000654:       1540006f                j       f00007a8 <ottf_isr_exit>

f0000658 <handler_irq_software>:
handler_irq_software():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:140
  .balign 4
  .global handler_irq_software
  .type handler_irq_software, @function
handler_irq_software:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000658:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:141
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000065c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:142
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000065e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:143
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000660:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:144
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000662:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:145
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000664:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:146
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000666:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:147
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000668:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:148
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000066a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:149
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000066c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:150
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000066e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:151
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000670:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:152
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000672:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:153
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000674:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:154
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000676:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:155
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000678:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:156
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000067a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:157
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000067c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:158
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000067e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:159
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000680:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:160
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000682:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:161
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000684:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:162
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000686:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:163
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000688:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:164
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000068a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:165
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000068c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:166
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000068e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:167
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000690:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:168
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000692:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:171

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000694:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:172
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000698:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:176

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f000069a:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:177
  sw t0, 0(sp)
f000069e:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:181

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006a0:       37a1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:184

  // Jump to the software ISR.
  jal ottf_software_isr
f00006a2:       6e7000ef                jal     ra,f0001588 <ottf_software_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:187

  // Return from ISR.
  j ottf_isr_exit
f00006a6:       1020006f                j       f00007a8 <ottf_isr_exit>
f00006aa:       0001                    nop

f00006ac <handler_irq_timer>:
handler_irq_timer():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:200
  .balign 4
  .global handler_irq_timer
  .type handler_irq_timer, @function
handler_irq_timer:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f00006ac:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:201
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f00006b0:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:202
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f00006b2:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:203
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f00006b4:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:204
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f00006b6:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:205
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f00006b8:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:206
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f00006ba:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:207
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f00006bc:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:208
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f00006be:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:209
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f00006c0:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:210
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f00006c2:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:211
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f00006c4:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:212
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f00006c6:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:213
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f00006c8:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:214
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f00006ca:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:215
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f00006cc:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:216
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f00006ce:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:217
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f00006d0:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:218
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f00006d2:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:219
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f00006d4:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:220
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f00006d6:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:221
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f00006d8:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:222
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f00006da:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:223
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f00006dc:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:224
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f00006de:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:225
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f00006e0:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:226
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f00006e2:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:227
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f00006e4:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:228
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f00006e6:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:231

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f00006e8:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:232
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f00006ec:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:236

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f00006ee:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:237
  sw t0, 0(sp)
f00006f2:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:241

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006f4:       3dd5                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:244

  // Jump to timer ISR.
  jal ottf_timer_isr
f00006f6:       6a7000ef                jal     ra,f000159c <ottf_timer_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:247

  // Return from ISR.
  j ottf_isr_exit
f00006fa:       0ae0006f                j       f00007a8 <ottf_isr_exit>
f00006fe:       0001                    nop

f0000700 <handler_irq_external>:
handler_irq_external():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:260
  .balign 4
  .global handler_irq_external
  .type handler_irq_external, @function
handler_irq_external:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000700:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:261
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000704:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:262
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f0000706:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:263
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000708:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:264
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000070a:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:265
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f000070c:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:266
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f000070e:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:267
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000710:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:268
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000712:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:269
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000714:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:270
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000716:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:271
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000718:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:272
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000071a:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:273
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f000071c:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:274
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f000071e:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:275
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000720:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:276
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000722:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:277
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000724:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:278
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000726:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:279
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000728:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:280
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000072a:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:281
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f000072c:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:282
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f000072e:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:283
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000730:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:284
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000732:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:285
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000734:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:286
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000736:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:287
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000738:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:288
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000073a:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:291

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f000073c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:292
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000740:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:296

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000742:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:297
  sw t0, 0(sp)
f0000746:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:301

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f0000748:       3545                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:304

  // Jump to external ISR.
  jal ottf_external_isr
f000074a:       66b000ef                jal     ra,f00015b4 <ottf_external_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:307

  // Return from ISR.
  j ottf_isr_exit
f000074e:       05a0006f                j       f00007a8 <ottf_isr_exit>
f0000752:       0001                    nop

f0000754 <handler_irq_internal>:
handler_irq_internal():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:320
  .balign 4
  .global handler_irq_internal
  .type handler_irq_internal, @function
handler_irq_internal:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000754:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:321
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000758:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:322
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000075a:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:323
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f000075c:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:324
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000075e:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:325
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000760:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:326
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000762:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:327
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000764:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:328
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000766:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:329
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000768:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:330
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000076a:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:331
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f000076c:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:332
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000076e:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:333
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000770:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:334
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000772:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:335
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000774:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:336
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000776:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:337
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000778:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:338
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000077a:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:339
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f000077c:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:340
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000077e:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:341
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000780:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:342
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000782:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:343
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000784:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:344
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000786:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:345
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000788:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:346
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000078a:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:347
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f000078c:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:348
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000078e:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:351

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000790:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:352
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000794:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:356

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000796:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:357
  sw t0, 0(sp)
f000079a:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:361

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000079c:       35b1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:364

  // Jump to the internal ISR.
  jal ottf_internal_isr
f000079e:       6f7000ef                jal     ra,f0001694 <ottf_internal_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:367

  // Return from ISR.
  j ottf_isr_exit
f00007a2:       0060006f                j       f00007a8 <ottf_isr_exit>
f00007a6:       0001                    nop

f00007a8 <ottf_isr_exit>:
ottf_isr_exit():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:384
  // Load the stack pointer for the current task control block (TCB), only if
  // the `enable_concurrency` flag is set in the test configuration struct,
  // meaning a test is run as a FreeRTOS task, where each task maintains its own
  // stack. Otherwise, the test is run on bare-metal, and there is no TCB, and
  // only a single stack/stack pointer.
  la t0, kOttfTestConfig
f00007a8:           00002297            auipc   t0,0x2
f00007ac:           53828293            addi    t0,t0,1336 # f0002ce0 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:385
  lb t1, 0(t0)
f00007b0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:386
  beqz t1, .L_skip_sp_restore
f00007b4:       /-- 00030863            beqz    t1,f00007c4 <ottf_isr_exit+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:387
  lw  t2, pxCurrentTCB
f00007b8:       |   f0002397            auipc   t2,0xf0002
f00007bc:       |   8c83a383            lw      t2,-1848(t2) # e0002080 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:388
  lw  sp, 0(t2)
f00007c0:       |   0003a103            lw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:392
.L_skip_sp_restore:

  // Load the correct MEPC for the next instruction in the current task.
  lw t0, 0(sp)
f00007c4:       \-> 4282                        lw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:393
  csrw mepc, t0
f00007c6:           34129073            csrw    mepc,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:396

  // Load MSTATUS for the MPIE bit.
  lw  t0, 29 * OTTF_WORD_SIZE(sp)
f00007ca:           52d6                        lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:397
  csrw mstatus, t0
f00007cc:           30029073            csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:400

  // Restore all registers from the stack.
  lw   ra,  1 * OTTF_WORD_SIZE(sp)
f00007d0:           4092                        lw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:401
  lw   t0,  2 * OTTF_WORD_SIZE(sp)
f00007d2:           42a2                        lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:402
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f00007d4:           4332                        lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:403
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f00007d6:           43c2                        lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:404
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f00007d8:           4452                        lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:405
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f00007da:           44e2                        lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:406
  lw   a0,  7 * OTTF_WORD_SIZE(sp)
f00007dc:           4572                        lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:407
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f00007de:           5582                        lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:408
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f00007e0:           5612                        lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:409
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f00007e2:           56a2                        lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:410
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f00007e4:           5732                        lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:411
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f00007e6:           57c2                        lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:412
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f00007e8:           5852                        lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:413
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f00007ea:           58e2                        lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:414
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f00007ec:           5972                        lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:415
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f00007ee:           4986                        lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:416
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f00007f0:           4a16                        lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:417
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f00007f2:           4aa6                        lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:418
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f00007f4:           4b36                        lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:419
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f00007f6:           4bc6                        lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:420
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f00007f8:           4c56                        lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:421
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f00007fa:           4ce6                        lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:422
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f00007fc:           4d76                        lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:423
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f00007fe:           5d86                        lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:424
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000800:           5e16                        lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:425
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000802:           5ea6                        lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:426
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000804:           5f36                        lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:427
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000806:           5fc6                        lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:428
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000808:           07810113            addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:432

  // This exits the ISR completely, and does not return control flow to the ISR
  // that called this sub-routine.
  mret
f000080c:           30200073            mret

f0000810 <test_main>:
test_main():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:100
  hmac_testutils_check_message_length(hmac, len * 8);
  run_hmac(hmac);
  hmac_testutils_finish_and_check_polled(hmac, expected_digest);
}

bool test_main(void) {
f0000810:                 7179                  addi    sp,sp,-48
test_setup():
f0000812:                 d606                  sw      ra,44(sp)
f0000814:                 d422                  sw      s0,40(sp)
f0000816:                 d226                  sw      s1,36(sp)
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:66
  CHECK_DIF_OK(dif_hmac_init(base_addr, hmac));
f0000818:                 c1110537              lui     a0,0xc1110
f000081c:                 002c                  addi    a1,sp,8
f000081e:                 712000ef              jal     ra,f0000f30 <dif_hmac_init>
f0000822:       /-------- c131                  beqz    a0,f0000866 <test_main+0x56>
f0000824:       |         842a                  mv      s0,a0
f0000826:       |         00003517              auipc   a0,0x3
f000082a:       |         69650513              addi    a0,a0,1686 # f0003ebc <kDeviceLogBypassUartAddress>
f000082e:       |         4108                  lw      a0,0(a0)
f0000830:       |     /-- c911                  beqz    a0,f0000844 <test_main+0x34>
f0000832:       |     |   1000f517              auipc   a0,0x1000f
f0000836:       |     |   7ce50513              addi    a0,a0,1998 # 10000 <_non_volatile_scratch_end+0xffd0000>
f000083a:       |     |   4585                  li      a1,1
f000083c:       |     |   8622                  mv      a2,s0
f000083e:       |     |   0d0010ef              jal     ra,f000190e <base_log_internal_dv>
f0000842:       |  /--|-- a829                  j       f000085c <test_main+0x4c>
f0000844:       |  |  \-> 00002597              auipc   a1,0x2
f0000848:       |  |      57458593              addi    a1,a1,1396 # f0002db8 <kExpectedHmacDigest+0x20>
f000084c:       |  |      0808                  addi    a0,sp,16
f000084e:       |  |      4651                  li      a2,20
f0000850:       |  |      195010ef              jal     ra,f00021e4 <memcpy>
f0000854:       |  |      0808                  addi    a0,sp,16
f0000856:       |  |      85a2                  mv      a1,s0
f0000858:       |  |      014010ef              jal     ra,f000186c <base_log_internal_core>
f000085c:       |  \----> 6531                  lui     a0,0xc
f000085e:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000862:       |         745000ef              jal     ra,f00017a6 <test_status_set>
test_main():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:108
  int volatile * a;
  dif_hmac_t hmac;
  test_setup(mmio_region_from_addr(TOP_EARLGREY_HMAC_BASE_ADDR), &hmac);
  
  //LOG_INFO("Running test SHA256 pass 1...");
  run_test(&hmac, kData, sizeof(kData), NULL, &kExpectedShaDigest);
f0000866:       \-------> 00002417              auipc   s0,0x2
f000086a:                 51240413              addi    s0,s0,1298 # f0002d78 <kExpectedShaDigest>
f000086e:                 0028                  addi    a0,sp,8
f0000870:                 4581                  li      a1,0
f0000872:                 8622                  mv      a2,s0
f0000874:                 283d                  jal     f00008b2 <run_test>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:111

  //LOG_INFO("Running test SHA256 pass 2...");
  run_test(&hmac, kData, sizeof(kData), NULL, &kExpectedShaDigest);
f0000876:                 0028                  addi    a0,sp,8
f0000878:                 4581                  li      a1,0
f000087a:                 8622                  mv      a2,s0
f000087c:                 281d                  jal     f00008b2 <run_test>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:114

  //LOG_INFO("Running test HMAC pass 1...");
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
f000087e:                 f0001417              auipc   s0,0xf0001
f0000882:                 74640413              addi    s0,s0,1862 # e0001fc4 <kHmacKey>
f0000886:                 00002497              auipc   s1,0x2
f000088a:                 51248493              addi    s1,s1,1298 # f0002d98 <kExpectedHmacDigest>
f000088e:                 0028                  addi    a0,sp,8
f0000890:                 85a2                  mv      a1,s0
f0000892:                 8626                  mv      a2,s1
f0000894:                 2839                  jal     f00008b2 <run_test>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:118
           &kExpectedHmacDigest);

  //LOG_INFO("Running test HMAC pass 2...");
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
f0000896:                 0028                  addi    a0,sp,8
f0000898:                 85a2                  mv      a1,s0
f000089a:                 8626                  mv      a2,s1
f000089c:                 2819                  jal     f00008b2 <run_test>
f000089e:                 c11c05b7              lui     a1,0xc11c0
f00008a2:                 4605                  li      a2,1
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:123
           &kExpectedHmacDigest);
  a = (int *) 0xc11c0018;
  *a = 0x1;
  
  return true;
f00008a4:                 4505                  li      a0,1
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:121
  *a = 0x1;
f00008a6:                 cd90                  sw      a2,24(a1)
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:123
  return true;
f00008a8:                 5492                  lw      s1,36(sp)
f00008aa:                 5422                  lw      s0,40(sp)
f00008ac:                 50b2                  lw      ra,44(sp)
f00008ae:                 6145                  addi    sp,sp,48
f00008b0:                 8082                  ret

f00008b2 <run_test>:
run_test():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:91
                     const dif_hmac_digest_t *expected_digest) {
f00008b2:                       7179                    addi    sp,sp,-48
f00008b4:                       d606                    sw      ra,44(sp)
f00008b6:                       d422                    sw      s0,40(sp)
f00008b8:                       d226                    sw      s1,36(sp)
f00008ba:                       d04a                    sw      s2,32(sp)
f00008bc:                       ce4e                    sw      s3,28(sp)
f00008be:                       8932                    mv      s2,a2
f00008c0:                       84aa                    mv      s1,a0
f00008c2:                       00003997                auipc   s3,0x3
f00008c6:                       5fa98993                addi    s3,s3,1530 # f0003ebc <kDeviceLogBypassUartAddress>
test_start():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:75
  if (key == NULL) {
f00008ca:                /----- cd99                    beqz    a1,f00008e8 <run_test+0x36>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:78
    CHECK_DIF_OK(dif_hmac_mode_hmac_start(hmac, key, kHmacTransactionConfig));
f00008cc:                |      4605                    li      a2,1
f00008ce:                |      4685                    li      a3,1
f00008d0:                |      8526                    mv      a0,s1
f00008d2:                |      25b5                    jal     f0000f3e <dif_hmac_mode_hmac_start>
f00008d4:       /--------|----- c135                    beqz    a0,f0000938 <run_test+0x86>
f00008d6:       |        |      842a                    mv      s0,a0
f00008d8:       |        |      0009a503                lw      a0,0(s3)
f00008dc:       |  /-----|----- c905                    beqz    a0,f000090c <run_test+0x5a>
f00008de:       |  |     |      1000f517                auipc   a0,0x1000f
f00008e2:       |  |     |      74a50513                addi    a0,a0,1866 # 10028 <_non_volatile_scratch_end+0xffd0028>
f00008e6:       |  |     |  /-- a831                    j       f0000902 <run_test+0x50>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:76
    CHECK_DIF_OK(dif_hmac_mode_sha256_start(hmac, kHmacTransactionConfig));
f00008e8:       |  |     \--|-> 4585                    li      a1,1
f00008ea:       |  |        |   4605                    li      a2,1
f00008ec:       |  |        |   8526                    mv      a0,s1
f00008ee:       |  |        |   25e1                    jal     f0000fb6 <dif_hmac_mode_sha256_start>
f00008f0:       +--|--------|-- c521                    beqz    a0,f0000938 <run_test+0x86>
f00008f2:       |  |        |   842a                    mv      s0,a0
f00008f4:       |  |        |   0009a503                lw      a0,0(s3)
f00008f8:       |  |     /--|-- cd19                    beqz    a0,f0000916 <run_test+0x64>
f00008fa:       |  |     |  |   1000f517                auipc   a0,0x1000f
f00008fe:       |  |     |  |   71a50513                addi    a0,a0,1818 # 10014 <_non_volatile_scratch_end+0xffd0014>
f0000902:       |  |     |  \-> 4585                    li      a1,1
f0000904:       |  |     |      8622                    mv      a2,s0
f0000906:       |  |     |      008010ef                jal     ra,f000190e <base_log_internal_dv>
f000090a:       |  |  /--|----- a015                    j       f000092e <run_test+0x7c>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:78
    CHECK_DIF_OK(dif_hmac_mode_hmac_start(hmac, key, kHmacTransactionConfig));
f000090c:       |  \--|--|----> 00002597                auipc   a1,0x2
f0000910:       |     |  |      4d458593                addi    a1,a1,1236 # f0002de0 <kExpectedHmacDigest+0x48>
f0000914:       |     |  |  /-- a029                    j       f000091e <run_test+0x6c>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:76
    CHECK_DIF_OK(dif_hmac_mode_sha256_start(hmac, kHmacTransactionConfig));
f0000916:       |     |  \--|-> 00002597                auipc   a1,0x2
f000091a:       |     |     |   4b658593                addi    a1,a1,1206 # f0002dcc <kExpectedHmacDigest+0x34>
f000091e:       |     |     \-> 0028                    addi    a0,sp,8
f0000920:       |     |         4651                    li      a2,20
f0000922:       |     |         0c3010ef                jal     ra,f00021e4 <memcpy>
f0000926:       |     |         0028                    addi    a0,sp,8
f0000928:       |     |         85a2                    mv      a1,s0
f000092a:       |     |         743000ef                jal     ra,f000186c <base_log_internal_core>
f000092e:       |     \-------> 6531                    lui     a0,0xc
f0000930:       |               aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000934:       |               673000ef                jal     ra,f00017a6 <test_status_set>
run_test():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:93
  hmac_testutils_push_message(hmac, data, len);
f0000938:       \-------------> 00002597                auipc   a1,0x2
f000093c:                       3b058593                addi    a1,a1,944 # f0002ce8 <kData>
f0000940:                       08e00613                li      a2,142
f0000944:                       8526                    mv      a0,s1
f0000946:                       2b25                    jal     f0000e7e <hmac_testutils_push_message>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:94
  hmac_testutils_fifo_empty_polled(hmac);
f0000948:                       8526                    mv      a0,s1
f000094a:                       221d                    jal     f0000a70 <hmac_testutils_fifo_empty_polled>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:95
  hmac_testutils_check_message_length(hmac, len * 8);
f000094c:                       47000593                li      a1,1136
f0000950:                       8526                    mv      a0,s1
f0000952:                       4601                    li      a2,0
f0000954:                       28a9                    jal     f00009ae <hmac_testutils_check_message_length>
run_hmac():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:86
  CHECK_DIF_OK(dif_hmac_process(hmac));
f0000956:                       8526                    mv      a0,s1
f0000958:                       738000ef                jal     ra,f0001090 <dif_hmac_process>
f000095c:             /-------- cd1d                    beqz    a0,f000099a <run_test+0xe8>
f000095e:             |         842a                    mv      s0,a0
f0000960:             |         0009a503                lw      a0,0(s3)
f0000964:             |     /-- c911                    beqz    a0,f0000978 <run_test+0xc6>
f0000966:             |     |   1000f517                auipc   a0,0x1000f
f000096a:             |     |   6d650513                addi    a0,a0,1750 # 1003c <_non_volatile_scratch_end+0xffd003c>
f000096e:             |     |   4585                    li      a1,1
f0000970:             |     |   8622                    mv      a2,s0
f0000972:             |     |   79d000ef                jal     ra,f000190e <base_log_internal_dv>
f0000976:             |  /--|-- a829                    j       f0000990 <run_test+0xde>
f0000978:             |  |  \-> 00002597                auipc   a1,0x2
f000097c:             |  |      47c58593                addi    a1,a1,1148 # f0002df4 <kExpectedHmacDigest+0x5c>
f0000980:             |  |      0028                    addi    a0,sp,8
f0000982:             |  |      4651                    li      a2,20
f0000984:             |  |      061010ef                jal     ra,f00021e4 <memcpy>
f0000988:             |  |      0028                    addi    a0,sp,8
f000098a:             |  |      85a2                    mv      a1,s0
f000098c:             |  |      6e1000ef                jal     ra,f000186c <base_log_internal_core>
f0000990:             |  \----> 6531                    lui     a0,0xc
f0000992:             |         aad50513                addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000996:             |         611000ef                jal     ra,f00017a6 <test_status_set>
run_test():
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:97
  hmac_testutils_finish_and_check_polled(hmac, expected_digest);
f000099a:             \-------> 8526                    mv      a0,s1
f000099c:                       85ca                    mv      a1,s2
f000099e:                       2ed5                    jal     f0000d92 <hmac_testutils_finish_and_check_polled>
/proc/self/cwd/sw/tests/opentitan/flash_hmac_smoketest/flash_hmac_smoketest.c:98
}
f00009a0:                       49f2                    lw      s3,28(sp)
f00009a2:                       5902                    lw      s2,32(sp)
f00009a4:                       5492                    lw      s1,36(sp)
f00009a6:                       5422                    lw      s0,40(sp)
f00009a8:                       50b2                    lw      ra,44(sp)
f00009aa:                       6145                    addi    sp,sp,48
f00009ac:                       8082                    ret

f00009ae <hmac_testutils_check_message_length>:
hmac_testutils_check_message_length():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:60
            0xBDCCB6C7,
        },
};

void hmac_testutils_check_message_length(const dif_hmac_t *hmac,
                                         uint64_t expected_sent_bits) {
f00009ae:                 7139                  addi    sp,sp,-64
f00009b0:                 de06                  sw      ra,60(sp)
f00009b2:                 dc22                  sw      s0,56(sp)
f00009b4:                 da26                  sw      s1,52(sp)
f00009b6:                 d84a                  sw      s2,48(sp)
f00009b8:                 d64e                  sw      s3,44(sp)
f00009ba:                 d452                  sw      s4,40(sp)
f00009bc:                 89b2                  mv      s3,a2
f00009be:                 892e                  mv      s2,a1
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:62
  uint64_t sent_bits;
  CHECK_DIF_OK(dif_hmac_get_message_length(hmac, &sent_bits));
f00009c0:                 100c                  addi    a1,sp,32
f00009c2:                 2d45                  jal     f0001072 <dif_hmac_get_message_length>
f00009c4:                 00003a17              auipc   s4,0x3
f00009c8:                 4f8a0a13              addi    s4,s4,1272 # f0003ebc <kDeviceLogBypassUartAddress>
f00009cc:       /-------- cd1d                  beqz    a0,f0000a0a <hmac_testutils_check_message_length+0x5c>
f00009ce:       |         842a                  mv      s0,a0
f00009d0:       |         000a2503              lw      a0,0(s4)
f00009d4:       |     /-- c911                  beqz    a0,f00009e8 <hmac_testutils_check_message_length+0x3a>
f00009d6:       |     |   1000f517              auipc   a0,0x1000f
f00009da:       |     |   67a50513              addi    a0,a0,1658 # 10050 <_non_volatile_scratch_end+0xffd0050>
f00009de:       |     |   4585                  li      a1,1
f00009e0:       |     |   8622                  mv      a2,s0
f00009e2:       |     |   72d000ef              jal     ra,f000190e <base_log_internal_dv>
f00009e6:       |  /--|-- a829                  j       f0000a00 <hmac_testutils_check_message_length+0x52>
f00009e8:       |  |  \-> 00002597              auipc   a1,0x2
f00009ec:       |  |      66058593              addi    a1,a1,1632 # f0003048 <kExpectedHmacDigest+0x2b0>
f00009f0:       |  |      0028                  addi    a0,sp,8
f00009f2:       |  |      4651                  li      a2,20
f00009f4:       |  |      7f0010ef              jal     ra,f00021e4 <memcpy>
f00009f8:       |  |      0028                  addi    a0,sp,8
f00009fa:       |  |      85a2                  mv      a1,s0
f00009fc:       |  |      671000ef              jal     ra,f000186c <base_log_internal_core>
f0000a00:       |  \----> 6531                  lui     a0,0xc
f0000a02:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000a06:       |         5a1000ef              jal     ra,f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:66

  // 64bit formatting is not supported, so split into hi and lo hex 32bit
  // values. These should appear as 64bit hex values in the debug output.
  CHECK(expected_sent_bits == sent_bits,
f0000a0a:       \-------> 5402                  lw      s0,32(sp)
f0000a0c:                 5492                  lw      s1,36(sp)
f0000a0e:                 01244533              xor     a0,s0,s2
f0000a12:                 0134c5b3              xor     a1,s1,s3
f0000a16:                 8d4d                  or      a0,a0,a1
f0000a18:       /-------- c521                  beqz    a0,f0000a60 <hmac_testutils_check_message_length+0xb2>
f0000a1a:       |         000a2503              lw      a0,0(s4)
f0000a1e:       |     /-- cd09                  beqz    a0,f0000a38 <hmac_testutils_check_message_length+0x8a>
f0000a20:       |     |   1000f517              auipc   a0,0x1000f
f0000a24:       |     |   64450513              addi    a0,a0,1604 # 10064 <_non_volatile_scratch_end+0xffd0064>
f0000a28:       |     |   4591                  li      a1,4
f0000a2a:       |     |   864e                  mv      a2,s3
f0000a2c:       |     |   86ca                  mv      a3,s2
f0000a2e:       |     |   8726                  mv      a4,s1
f0000a30:       |     |   87a2                  mv      a5,s0
f0000a32:       |     |   6dd000ef              jal     ra,f000190e <base_log_internal_dv>
f0000a36:       |  /--|-- a005                  j       f0000a56 <hmac_testutils_check_message_length+0xa8>
f0000a38:       |  |  \-> 00002597              auipc   a1,0x2
f0000a3c:       |  |      62458593              addi    a1,a1,1572 # f000305c <kExpectedHmacDigest+0x2c4>
f0000a40:       |  |      0028                  addi    a0,sp,8
f0000a42:       |  |      4651                  li      a2,20
f0000a44:       |  |      7a0010ef              jal     ra,f00021e4 <memcpy>
f0000a48:       |  |      0028                  addi    a0,sp,8
f0000a4a:       |  |      85ce                  mv      a1,s3
f0000a4c:       |  |      864a                  mv      a2,s2
f0000a4e:       |  |      86a6                  mv      a3,s1
f0000a50:       |  |      8722                  mv      a4,s0
f0000a52:       |  |      61b000ef              jal     ra,f000186c <base_log_internal_core>
f0000a56:       |  \----> 6531                  lui     a0,0xc
f0000a58:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000a5c:       |         54b000ef              jal     ra,f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:71
        "Message length mismatch. "
        "Expected 0x%08x%08x bits but got 0x%08x%08x bits.",
        (uint32_t)(expected_sent_bits >> 32), (uint32_t)expected_sent_bits,
        (uint32_t)(sent_bits >> 32), (uint32_t)sent_bits);
}
f0000a60:       \-------> 5a22                  lw      s4,40(sp)
f0000a62:                 59b2                  lw      s3,44(sp)
f0000a64:                 5942                  lw      s2,48(sp)
f0000a66:                 54d2                  lw      s1,52(sp)
f0000a68:                 5462                  lw      s0,56(sp)
f0000a6a:                 50f2                  lw      ra,60(sp)
f0000a6c:                 6121                  addi    sp,sp,64
f0000a6e:                 8082                  ret

f0000a70 <hmac_testutils_fifo_empty_polled>:
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:82
  uint32_t fifo_depth;
  CHECK_DIF_OK(dif_hmac_fifo_count_entries(hmac, &fifo_depth));
  return fifo_depth == 0;
}

void hmac_testutils_fifo_empty_polled(const dif_hmac_t *hmac) {
f0000a70:                    711d                       addi    sp,sp,-96
f0000a72:                    ce86                       sw      ra,92(sp)
f0000a74:                    cca2                       sw      s0,88(sp)
f0000a76:                    caa6                       sw      s1,84(sp)
f0000a78:                    c8ca                       sw      s2,80(sp)
f0000a7a:                    c6ce                       sw      s3,76(sp)
f0000a7c:                    c4d2                       sw      s4,72(sp)
f0000a7e:                    c2d6                       sw      s5,68(sp)
f0000a80:                    c0da                       sw      s6,64(sp)
f0000a82:                    de5e                       sw      s7,60(sp)
f0000a84:                    dc62                       sw      s8,56(sp)
f0000a86:                    da66                       sw      s9,52(sp)
f0000a88:                    d86a                       sw      s10,48(sp)
f0000a8a:                    d66e                       sw      s11,44(sp)
f0000a8c:                    00003597           auipc   a1,0x3
f0000a90:                    41458593           addi    a1,a1,1044 # f0003ea0 <kClockFreqCpuHz>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:83
  IBEX_SPIN_FOR(check_fifo_empty(hmac), HMAC_TESTUTILS_FIFO_EMPTY_USEC);
f0000a94:                    0045a903           lw      s2,4(a1)
f0000a98:                    0005aa03           lw      s4,0(a1)
f0000a9c:                    8aaa                       mv      s5,a0
f0000a9e:                    055d5537           lui     a0,0x55d5
f0000aa2:                    a8050513           addi    a0,a0,-1408 # 55d4a80 <_ottf_size+0x5594a80>
f0000aa6:                    c62a                       sw      a0,12(sp)
f0000aa8:                    4581                       li      a1,0
f0000aaa:                    8652                       mv      a2,s4
f0000aac:                    86ca                       mv      a3,s2
f0000aae:                    4701                       li      a4,0
f0000ab0:                    684010ef           jal     ra,f0002134 <udiv64_slow>
f0000ab4:                    0505                       addi    a0,a0,1
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
 * @param timeout_usec Timeout in microseconds.
 * @return The initialized timeout value.
 */
inline ibex_timeout_t ibex_timeout_init(uint32_t timeout_usec) {
  return (ibex_timeout_t){
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
f0000ab6:                    02a905b3           mul     a1,s2,a0
f0000aba:                    02aa3633           mulhu   a2,s4,a0
f0000abe:                    95b2                       add     a1,a1,a2
f0000ac0:                    02aa0533           mul     a0,s4,a0
f0000ac4:                    000f4637           lui     a2,0xf4
f0000ac8:                    24060613           addi    a2,a2,576 # f4240 <_ottf_size+0xb4240>
f0000acc:                    4681                       li      a3,0
f0000ace:                    4701                       li      a4,0
f0000ad0:                    664010ef           jal     ra,f0002134 <udiv64_slow>
f0000ad4:                    00003617           auipc   a2,0x3
f0000ad8:                    3e860613           addi    a2,a2,1000 # f0003ebc <kDeviceLogBypassUartAddress>
f0000adc:                    4210                       lw      a2,0(a2)
f0000ade:                    8baa                       mv      s7,a0
f0000ae0:                    842e                       mv      s0,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
f0000ae2:                /-> b8002573           csrr    a0,mcycleh
f0000ae6:                |   b00025f3           csrr    a1,mcycle
f0000aea:                |   b80026f3           csrr    a3,mcycleh
f0000aee:                \-- fed51ae3           bne     a0,a3,f0000ae2 <hmac_testutils_fifo_empty_polled+0x72>
f0000af2:                    00163c93           seqz    s9,a2
f0000af6:                    40b00c33           neg     s8,a1
f0000afa:                    00b035b3           snez    a1,a1
f0000afe:                    952e                       add     a0,a0,a1
f0000b00:                    40a009b3           neg     s3,a0
f0000b04:                    00002517           auipc   a0,0x2
f0000b08:                    56c50513           addi    a0,a0,1388 # f0003070 <kExpectedHmacDigest+0x2d8>
f0000b0c:                    c02a                       sw      a0,0(sp)
f0000b0e:                    6531                       lui     a0,0xc
f0000b10:                    aad50d93           addi    s11,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000b14:                    1000f517           auipc   a0,0x1000f
f0000b18:                    56450513           addi    a0,a0,1380 # 10078 <_non_volatile_scratch_end+0xffd0078>
f0000b1c:                    c42a                       sw      a0,8(sp)
f0000b1e:                    00002517           auipc   a0,0x2
f0000b22:                    5b650513           addi    a0,a0,1462 # f00030d4 <kExpectedHmacDigest+0x33c>
f0000b26:                    c22a                       sw      a0,4(sp)
f0000b28:                    1000fd17           auipc   s10,0x1000f
f0000b2c:                    5b4d0d13           addi    s10,s10,1460 # 100dc <_non_volatile_scratch_end+0xffd00dc>
check_fifo_empty():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:78
  CHECK_DIF_OK(dif_hmac_fifo_count_entries(hmac, &fifo_depth));
f0000b30:       /----------> 102c                       addi    a1,sp,40
f0000b32:       |            8556                       mv      a0,s5
f0000b34:       |            2305                       jal     f0001054 <dif_hmac_fifo_count_entries>
f0000b36:       |  /-------- c515                       beqz    a0,f0000b62 <hmac_testutils_fifo_empty_polled+0xf2>
f0000b38:       |  |         84aa                       mv      s1,a0
f0000b3a:       |  |     /-- 000c9863           bnez    s9,f0000b4a <hmac_testutils_fifo_empty_polled+0xda>
f0000b3e:       |  |     |   4585                       li      a1,1
f0000b40:       |  |     |   856a                       mv      a0,s10
f0000b42:       |  |     |   8626                       mv      a2,s1
f0000b44:       |  |     |   5cb000ef           jal     ra,f000190e <base_log_internal_dv>
f0000b48:       |  |  /--|-- a811                       j       f0000b5c <hmac_testutils_fifo_empty_polled+0xec>
f0000b4a:       |  |  |  \-> 0808                       addi    a0,sp,16
f0000b4c:       |  |  |      4651                       li      a2,20
f0000b4e:       |  |  |      4592                       lw      a1,4(sp)
f0000b50:       |  |  |      694010ef           jal     ra,f00021e4 <memcpy>
f0000b54:       |  |  |      0808                       addi    a0,sp,16
f0000b56:       |  |  |      85a6                       mv      a1,s1
f0000b58:       |  |  |      515000ef           jal     ra,f000186c <base_log_internal_core>
f0000b5c:       |  |  \----> 856e                       mv      a0,s11
f0000b5e:       |  |         449000ef           jal     ra,f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:79
  return fifo_depth == 0;
f0000b62:       |  \-------> 5522                       lw      a0,40(sp)
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:83
  IBEX_SPIN_FOR(check_fifo_empty(hmac), HMAC_TESTUTILS_FIFO_EMPTY_USEC);
f0000b64:       |  /-------- cd35                       beqz    a0,f0000be0 <hmac_testutils_fifo_empty_polled+0x170>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
f0000b66:       |  |     /-> b80025f3           csrr    a1,mcycleh
f0000b6a:       |  |     |   b0002573           csrr    a0,mcycle
f0000b6e:       |  |     |   b8002673           csrr    a2,mcycleh
f0000b72:       |  |     \-- fec59ae3           bne     a1,a2,f0000b66 <hmac_testutils_fifo_empty_polled+0xf6>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000b76:       |  |         9562                       add     a0,a0,s8
f0000b78:       |  |         01853633           sltu    a2,a0,s8
f0000b7c:       |  |         964e                       add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
 *
 * @param timeout Holds the counter start value.
 * @return True if the timeout has expired and false otherwise.
 */
inline bool ibex_timeout_check(const ibex_timeout_t *timeout) {
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
f0000b7e:       |  |         95b2                       add     a1,a1,a2
f0000b80:       |  |  /----- 00858563           beq     a1,s0,f0000b8a <hmac_testutils_fifo_empty_polled+0x11a>
f0000b84:       |  |  |      00b43533           sltu    a0,s0,a1
f0000b88:       |  |  |  /-- a019                       j       f0000b8e <hmac_testutils_fifo_empty_polled+0x11e>
f0000b8a:       |  |  \--|-> 00abb533           sltu    a0,s7,a0
f0000b8e:       |  |     \-> 00154513           xori    a0,a0,1
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:83
f0000b92:       +--|-------- fd59                       bnez    a0,f0000b30 <hmac_testutils_fifo_empty_polled+0xc0>
f0000b94:       |  |         4532                       lw      a0,12(sp)
f0000b96:       |  |         4581                       li      a1,0
f0000b98:       |  |         8652                       mv      a2,s4
f0000b9a:       |  |         86ca                       mv      a3,s2
f0000b9c:       |  |         4701                       li      a4,0
f0000b9e:       |  |         596010ef           jal     ra,f0002134 <udiv64_slow>
f0000ba2:       |  |         00150493           addi    s1,a0,1
f0000ba6:       |  |         00a4b533           sltu    a0,s1,a0
f0000baa:       |  |         00a58b33           add     s6,a1,a0
f0000bae:       |  |     /-- 000c9a63           bnez    s9,f0000bc2 <hmac_testutils_fifo_empty_polled+0x152>
f0000bb2:       |  |     |   4589                       li      a1,2
f0000bb4:       |  |     |   4522                       lw      a0,8(sp)
f0000bb6:       |  |     |   8626                       mv      a2,s1
f0000bb8:       |  |     |   86da                       mv      a3,s6
f0000bba:       |  |     |   875e                       mv      a4,s7
f0000bbc:       |  |     |   553000ef           jal     ra,f000190e <base_log_internal_dv>
f0000bc0:       |  |  /--|-- a821                       j       f0000bd8 <hmac_testutils_fifo_empty_polled+0x168>
f0000bc2:       |  |  |  \-> 0808                       addi    a0,sp,16
f0000bc4:       |  |  |      4651                       li      a2,20
f0000bc6:       |  |  |      4582                       lw      a1,0(sp)
f0000bc8:       |  |  |      61c010ef           jal     ra,f00021e4 <memcpy>
f0000bcc:       |  |  |      0808                       addi    a0,sp,16
f0000bce:       |  |  |      8626                       mv      a2,s1
f0000bd0:       |  |  |      86da                       mv      a3,s6
f0000bd2:       |  |  |      875e                       mv      a4,s7
f0000bd4:       |  |  |      499000ef           jal     ra,f000186c <base_log_internal_core>
f0000bd8:       |  |  \----> 856e                       mv      a0,s11
f0000bda:       |  |         3cd000ef           jal     ra,f00017a6 <test_status_set>
f0000bde:       \--|-------- bf89                       j       f0000b30 <hmac_testutils_fifo_empty_polled+0xc0>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:84
}
f0000be0:          \-------> 5db2                       lw      s11,44(sp)
f0000be2:                    5d42                       lw      s10,48(sp)
f0000be4:                    5cd2                       lw      s9,52(sp)
f0000be6:                    5c62                       lw      s8,56(sp)
f0000be8:                    5bf2                       lw      s7,60(sp)
f0000bea:                    4b06                       lw      s6,64(sp)
f0000bec:                    4a96                       lw      s5,68(sp)
f0000bee:                    4a26                       lw      s4,72(sp)
f0000bf0:                    49b6                       lw      s3,76(sp)
f0000bf2:                    4946                       lw      s2,80(sp)
f0000bf4:                    44d6                       lw      s1,84(sp)
f0000bf6:                    4466                       lw      s0,88(sp)
f0000bf8:                    40f6                       lw      ra,92(sp)
f0000bfa:                    6125                       addi    sp,sp,96
f0000bfc:                    8082                       ret

f0000bfe <hmac_testutils_finish_polled>:
hmac_testutils_finish_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:95

  return res == kDifOk;
}

void hmac_testutils_finish_polled(const dif_hmac_t *hmac,
                                  dif_hmac_digest_t *digest_out) {
f0000bfe:                       7159                    addi    sp,sp,-112
f0000c00:                       d686                    sw      ra,108(sp)
f0000c02:                       d4a2                    sw      s0,104(sp)
f0000c04:                       d2a6                    sw      s1,100(sp)
f0000c06:                       d0ca                    sw      s2,96(sp)
f0000c08:                       cece                    sw      s3,92(sp)
f0000c0a:                       ccd2                    sw      s4,88(sp)
f0000c0c:                       cad6                    sw      s5,84(sp)
f0000c0e:                       c8da                    sw      s6,80(sp)
f0000c10:                       c6de                    sw      s7,76(sp)
f0000c12:                       c4e2                    sw      s8,72(sp)
f0000c14:                       c2e6                    sw      s9,68(sp)
f0000c16:                       c0ea                    sw      s10,64(sp)
f0000c18:                       de6e                    sw      s11,60(sp)
f0000c1a:                       00003617                auipc   a2,0x3
f0000c1e:                       28660613                addi    a2,a2,646 # f0003ea0 <kClockFreqCpuHz>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:96
  IBEX_SPIN_FOR(check_finished(hmac, digest_out),
f0000c22:                       4240                    lw      s0,4(a2)
f0000c24:                       4204                    lw      s1,0(a2)
f0000c26:                       8aae                    mv      s5,a1
f0000c28:                       8b2a                    mv      s6,a0
f0000c2a:                       160dc537                lui     a0,0x160dc
f0000c2e:                       08050513                addi    a0,a0,128 # 160dc080 <_ottf_size+0x1609c080>
f0000c32:                       ce2a                    sw      a0,28(sp)
f0000c34:                       4581                    li      a1,0
f0000c36:                       8626                    mv      a2,s1
f0000c38:                       86a2                    mv      a3,s0
f0000c3a:                       4701                    li      a4,0
f0000c3c:                       4f8010ef                jal     ra,f0002134 <udiv64_slow>
f0000c40:                       0505                    addi    a0,a0,1
f0000c42:                       d222                    sw      s0,36(sp)
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
f0000c44:                       02a405b3                mul     a1,s0,a0
f0000c48:                       02a4b633                mulhu   a2,s1,a0
f0000c4c:                       95b2                    add     a1,a1,a2
f0000c4e:                       d026                    sw      s1,32(sp)
f0000c50:                       02a48533                mul     a0,s1,a0
f0000c54:                       000f4637                lui     a2,0xf4
f0000c58:                       24060613                addi    a2,a2,576 # f4240 <_ottf_size+0xb4240>
f0000c5c:                       4681                    li      a3,0
f0000c5e:                       4701                    li      a4,0
f0000c60:                       4d4010ef                jal     ra,f0002134 <udiv64_slow>
f0000c64:                       00003617                auipc   a2,0x3
f0000c68:                       25860613                addi    a2,a2,600 # f0003ebc <kDeviceLogBypassUartAddress>
f0000c6c:                       4210                    lw      a2,0(a2)
f0000c6e:                       8c2a                    mv      s8,a0
f0000c70:                       8cae                    mv      s9,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
f0000c72:                   /-> b8002573                csrr    a0,mcycleh
f0000c76:                   |   b00025f3                csrr    a1,mcycle
f0000c7a:                   |   b80026f3                csrr    a3,mcycleh
f0000c7e:                   \-- fed51ae3                bne     a0,a3,f0000c72 <hmac_testutils_finish_polled+0x74>
f0000c82:                       00163d93                seqz    s11,a2
f0000c86:                       40b00a33                neg     s4,a1
f0000c8a:                       00b035b3                snez    a1,a1
f0000c8e:                       952e                    add     a0,a0,a1
f0000c90:                       40a00933                neg     s2,a0
f0000c94:                       49b9                    li      s3,14
f0000c96:                       00002517                auipc   a0,0x2
f0000c9a:                       3ee50513                addi    a0,a0,1006 # f0003084 <kExpectedHmacDigest+0x2ec>
f0000c9e:                       c82a                    sw      a0,16(sp)
f0000ca0:                       6531                    lui     a0,0xc
f0000ca2:                       aad50d13                addi    s10,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000ca6:                       1000f517                auipc   a0,0x1000f
f0000caa:                       3e650513                addi    a0,a0,998 # 1008c <_non_volatile_scratch_end+0xffd008c>
f0000cae:                       cc2a                    sw      a0,24(sp)
f0000cb0:                       00002517                auipc   a0,0x2
f0000cb4:                       43850513                addi    a0,a0,1080 # f00030e8 <kExpectedHmacDigest+0x350>
f0000cb8:                       c62a                    sw      a0,12(sp)
f0000cba:                       1000f517                auipc   a0,0x1000f
f0000cbe:                       43650513                addi    a0,a0,1078 # 100f0 <_non_volatile_scratch_end+0xffd00f0>
f0000cc2:                       ca2a                    sw      a0,20(sp)
check_finished():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:88
  dif_result_t res = dif_hmac_finish(hmac, digest_out);
f0000cc4:       /-------------> 855a                    mv      a0,s6
f0000cc6:       |               85d6                    mv      a1,s5
f0000cc8:       |               2ef1                    jal     f00010a4 <dif_hmac_finish>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:89
  CHECK(res == kDifOk || res == kDifUnavailable, "HMAC error = %d", res);
f0000cca:       |     /-------- 03350863                beq     a0,s3,f0000cfa <hmac_testutils_finish_polled+0xfc>
f0000cce:       |     |         8baa                    mv      s7,a0
f0000cd0:       |  /--|-------- c155                    beqz    a0,f0000d74 <hmac_testutils_finish_polled+0x176>
f0000cd2:       |  |  |     /-- 000d9863                bnez    s11,f0000ce2 <hmac_testutils_finish_polled+0xe4>
f0000cd6:       |  |  |     |   4585                    li      a1,1
f0000cd8:       |  |  |     |   4552                    lw      a0,20(sp)
f0000cda:       |  |  |     |   865e                    mv      a2,s7
f0000cdc:       |  |  |     |   433000ef                jal     ra,f000190e <base_log_internal_dv>
f0000ce0:       |  |  |  /--|-- a811                    j       f0000cf4 <hmac_testutils_finish_polled+0xf6>
f0000ce2:       |  |  |  |  \-> 1028                    addi    a0,sp,40
f0000ce4:       |  |  |  |      4651                    li      a2,20
f0000ce6:       |  |  |  |      45b2                    lw      a1,12(sp)
f0000ce8:       |  |  |  |      4fc010ef                jal     ra,f00021e4 <memcpy>
f0000cec:       |  |  |  |      1028                    addi    a0,sp,40
f0000cee:       |  |  |  |      85de                    mv      a1,s7
f0000cf0:       |  |  |  |      37d000ef                jal     ra,f000186c <base_log_internal_core>
f0000cf4:       |  |  |  \----> 856a                    mv      a0,s10
f0000cf6:       |  |  |         2b1000ef                jal     ra,f00017a6 <test_status_set>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
f0000cfa:       |  |  >-------> b80025f3                csrr    a1,mcycleh
f0000cfe:       |  |  |         b0002573                csrr    a0,mcycle
f0000d02:       |  |  |         b8002673                csrr    a2,mcycleh
f0000d06:       |  |  \-------- fec59ae3                bne     a1,a2,f0000cfa <hmac_testutils_finish_polled+0xfc>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000d0a:       |  |            9552                    add     a0,a0,s4
f0000d0c:       |  |            01453633                sltu    a2,a0,s4
f0000d10:       |  |            964a                    add     a2,a2,s2
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
f0000d12:       |  |            95b2                    add     a1,a1,a2
f0000d14:       |  |     /----- 01958563                beq     a1,s9,f0000d1e <hmac_testutils_finish_polled+0x120>
f0000d18:       |  |     |      00bcb533                sltu    a0,s9,a1
f0000d1c:       |  |     |  /-- a019                    j       f0000d22 <hmac_testutils_finish_polled+0x124>
f0000d1e:       |  |     \--|-> 00ac3533                sltu    a0,s8,a0
f0000d22:       |  |        \-> 00154513                xori    a0,a0,1
hmac_testutils_finish_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:96
  IBEX_SPIN_FOR(check_finished(hmac, digest_out),
f0000d26:       +--|----------- fd59                    bnez    a0,f0000cc4 <hmac_testutils_finish_polled+0xc6>
f0000d28:       |  |            4572                    lw      a0,28(sp)
f0000d2a:       |  |            4581                    li      a1,0
f0000d2c:       |  |            5602                    lw      a2,32(sp)
f0000d2e:       |  |            5692                    lw      a3,36(sp)
f0000d30:       |  |            4701                    li      a4,0
f0000d32:       |  |            402010ef                jal     ra,f0002134 <udiv64_slow>
f0000d36:       |  |            00150413                addi    s0,a0,1
f0000d3a:       |  |            00a43533                sltu    a0,s0,a0
f0000d3e:       |  |            00a584b3                add     s1,a1,a0
f0000d42:       |  |        /-- 000d9a63                bnez    s11,f0000d56 <hmac_testutils_finish_polled+0x158>
f0000d46:       |  |        |   4589                    li      a1,2
f0000d48:       |  |        |   4562                    lw      a0,24(sp)
f0000d4a:       |  |        |   8622                    mv      a2,s0
f0000d4c:       |  |        |   86a6                    mv      a3,s1
f0000d4e:       |  |        |   8762                    mv      a4,s8
f0000d50:       |  |        |   3bf000ef                jal     ra,f000190e <base_log_internal_dv>
f0000d54:       |  |     /--|-- a821                    j       f0000d6c <hmac_testutils_finish_polled+0x16e>
f0000d56:       |  |     |  \-> 1028                    addi    a0,sp,40
f0000d58:       |  |     |      4651                    li      a2,20
f0000d5a:       |  |     |      45c2                    lw      a1,16(sp)
f0000d5c:       |  |     |      488010ef                jal     ra,f00021e4 <memcpy>
f0000d60:       |  |     |      1028                    addi    a0,sp,40
f0000d62:       |  |     |      8622                    mv      a2,s0
f0000d64:       |  |     |      86a6                    mv      a3,s1
f0000d66:       |  |     |      8762                    mv      a4,s8
f0000d68:       |  |     |      305000ef                jal     ra,f000186c <base_log_internal_core>
f0000d6c:       |  |     \----> 856a                    mv      a0,s10
f0000d6e:       |  |            239000ef                jal     ra,f00017a6 <test_status_set>
f0000d72:       \--|----------- bf89                    j       f0000cc4 <hmac_testutils_finish_polled+0xc6>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:98
                HMAC_TESTUTILS_FINISH_TIMEOUT_USEC);
}
f0000d74:          \----------> 5df2                    lw      s11,60(sp)
f0000d76:                       4d06                    lw      s10,64(sp)
f0000d78:                       4c96                    lw      s9,68(sp)
f0000d7a:                       4c26                    lw      s8,72(sp)
f0000d7c:                       4bb6                    lw      s7,76(sp)
f0000d7e:                       4b46                    lw      s6,80(sp)
f0000d80:                       4ad6                    lw      s5,84(sp)
f0000d82:                       4a66                    lw      s4,88(sp)
f0000d84:                       49f6                    lw      s3,92(sp)
f0000d86:                       5906                    lw      s2,96(sp)
f0000d88:                       5496                    lw      s1,100(sp)
f0000d8a:                       5426                    lw      s0,104(sp)
f0000d8c:                       50b6                    lw      ra,108(sp)
f0000d8e:                       6165                    addi    sp,sp,112
f0000d90:                       8082                    ret

f0000d92 <hmac_testutils_finish_and_check_polled>:
hmac_testutils_finish_and_check_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:101

void hmac_testutils_finish_and_check_polled(const dif_hmac_t *hmac,
                                            const dif_hmac_digest_t *expected) {
f0000d92:                          7159                 addi    sp,sp,-112
f0000d94:                          d686                 sw      ra,108(sp)
f0000d96:                          d4a2                 sw      s0,104(sp)
f0000d98:                          d2a6                 sw      s1,100(sp)
f0000d9a:                          d0ca                 sw      s2,96(sp)
f0000d9c:                          cece                 sw      s3,92(sp)
f0000d9e:                          ccd2                 sw      s4,88(sp)
f0000da0:                          cad6                 sw      s5,84(sp)
f0000da2:                          c8da                 sw      s6,80(sp)
f0000da4:                          c6de                 sw      s7,76(sp)
f0000da6:                          c4e2                 sw      s8,72(sp)
f0000da8:                          c2e6                 sw      s9,68(sp)
f0000daa:                          c0ea                 sw      s10,64(sp)
f0000dac:                          8c2e                 mv      s8,a1
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:103
  dif_hmac_digest_t digest;
  hmac_testutils_finish_polled(hmac, &digest);
f0000dae:                          100c                 addi    a1,sp,32
f0000db0:                          1000                 addi    s0,sp,32
f0000db2:                          35b1                 jal     f0000bfe <hmac_testutils_finish_polled>
f0000db4:                          00003517             auipc   a0,0x3
f0000db8:                          10850513             addi    a0,a0,264 # f0003ebc <kDeviceLogBypassUartAddress>
f0000dbc:                          410c                 lw      a1,0(a0)
f0000dbe:                          4481                 li      s1,0
f0000dc0:                          4501                 li      a0,0
f0000dc2:                          0015bc93             seqz    s9,a1
f0000dc6:                          4d21                 li      s10,8
f0000dc8:                          00002917             auipc   s2,0x2
f0000dcc:                          2e490913             addi    s2,s2,740 # f00030ac <kExpectedHmacDigest+0x314>
f0000dd0:                          1000f997             auipc   s3,0x1000f
f0000dd4:                          2e498993             addi    s3,s3,740 # 100b4 <_non_volatile_scratch_end+0xffd00b4>
f0000dd8:                          00002a17             auipc   s4,0x2
f0000ddc:                          2c0a0a13             addi    s4,s4,704 # f0003098 <kExpectedHmacDigest+0x300>
f0000de0:                          1000fa97             auipc   s5,0x1000f
f0000de4:                          2c0a8a93             addi    s5,s5,704 # 100a0 <_non_volatile_scratch_end+0xffd00a0>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:104
  CHECK_ARRAYS_EQ(digest.digest, expected->digest, ARRAYSIZE(digest.digest));
f0000de8:       /----------------> 400c                 lw      a1,0(s0)
f0000dea:       |                  000c2603             lw      a2,0(s8)
f0000dee:       |  /-------------- 04c58e63             beq     a1,a2,f0000e4a <hmac_testutils_finish_and_check_polled+0xb8>
f0000df2:       |  |               8905                 andi    a0,a0,1
f0000df4:       |  |           /-- c501                 beqz    a0,f0000dfc <hmac_testutils_finish_and_check_polled+0x6a>
f0000df6:       |  |        /--|-- 000c8963             beqz    s9,f0000e08 <hmac_testutils_finish_and_check_polled+0x76>
f0000dfa:       |  |  /-----|--|-- a805                 j       f0000e2a <hmac_testutils_finish_and_check_polled+0x98>
f0000dfc:       |  |  |  /--|--\-X 000c9f63             bnez    s9,f0000e1a <hmac_testutils_finish_and_check_polled+0x88>
f0000e00:       |  |  |  |  |      8556                 mv      a0,s5
f0000e02:       |  |  |  |  |      4581                 li      a1,0
f0000e04:       |  |  |  |  |      30b000ef             jal     ra,f000190e <base_log_internal_dv>
f0000e08:       |  |  |  |  \----> 4014                 lw      a3,0(s0)
f0000e0a:       |  |  |  |         000c2703             lw      a4,0(s8)
f0000e0e:       |  |  |  |         458d                 li      a1,3
f0000e10:       |  |  |  |         854e                 mv      a0,s3
f0000e12:       |  |  |  |         8626                 mv      a2,s1
f0000e14:       |  |  |  |         2fb000ef             jal     ra,f000190e <base_log_internal_dv>
f0000e18:       |  |  |  |     /-- a805                 j       f0000e48 <hmac_testutils_finish_and_check_polled+0xb6>
f0000e1a:       |  |  |  \-----|-> 0028                 addi    a0,sp,8
f0000e1c:       |  |  |        |   4651                 li      a2,20
f0000e1e:       |  |  |        |   85d2                 mv      a1,s4
f0000e20:       |  |  |        |   3c4010ef             jal     ra,f00021e4 <memcpy>
f0000e24:       |  |  |        |   0028                 addi    a0,sp,8
f0000e26:       |  |  |        |   247000ef             jal     ra,f000186c <base_log_internal_core>
f0000e2a:       |  |  \--------|-> 00042b03             lw      s6,0(s0)
f0000e2e:       |  |           |   000c2b83             lw      s7,0(s8)
f0000e32:       |  |           |   0028                 addi    a0,sp,8
f0000e34:       |  |           |   4651                 li      a2,20
f0000e36:       |  |           |   85ca                 mv      a1,s2
f0000e38:       |  |           |   3ac010ef             jal     ra,f00021e4 <memcpy>
f0000e3c:       |  |           |   0028                 addi    a0,sp,8
f0000e3e:       |  |           |   85a6                 mv      a1,s1
f0000e40:       |  |           |   865a                 mv      a2,s6
f0000e42:       |  |           |   86de                 mv      a3,s7
f0000e44:       |  |           |   229000ef             jal     ra,f000186c <base_log_internal_core>
f0000e48:       |  |           \-> 4505                 li      a0,1
f0000e4a:       |  \-------------> 0485                 addi    s1,s1,1
f0000e4c:       |                  0411                 addi    s0,s0,4
f0000e4e:       |                  0c11                 addi    s8,s8,4
f0000e50:       \----------------- f9a49ce3             bne     s1,s10,f0000de8 <hmac_testutils_finish_and_check_polled+0x56>
f0000e54:                          8905                 andi    a0,a0,1
f0000e56:                      /-- c511                 beqz    a0,f0000e62 <hmac_testutils_finish_and_check_polled+0xd0>
f0000e58:                      |   6531                 lui     a0,0xc
f0000e5a:                      |   aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000e5e:                      |   149000ef             jal     ra,f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:105
}
f0000e62:                      \-> 4d06                 lw      s10,64(sp)
f0000e64:                          4c96                 lw      s9,68(sp)
f0000e66:                          4c26                 lw      s8,72(sp)
f0000e68:                          4bb6                 lw      s7,76(sp)
f0000e6a:                          4b46                 lw      s6,80(sp)
f0000e6c:                          4ad6                 lw      s5,84(sp)
f0000e6e:                          4a66                 lw      s4,88(sp)
f0000e70:                          49f6                 lw      s3,92(sp)
f0000e72:                          5906                 lw      s2,96(sp)
f0000e74:                          5496                 lw      s1,100(sp)
f0000e76:                          5426                 lw      s0,104(sp)
f0000e78:                          50b6                 lw      ra,108(sp)
f0000e7a:                          6165                 addi    sp,sp,112
f0000e7c:                          8082                 ret

f0000e7e <hmac_testutils_push_message>:
hmac_testutils_push_message():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:108

void hmac_testutils_push_message(const dif_hmac_t *hmac, const char *data,
                                 size_t len) {
f0000e7e:                       7139                    addi    sp,sp,-64
f0000e80:                       de06                    sw      ra,60(sp)
f0000e82:                       dc22                    sw      s0,56(sp)
f0000e84:                       da26                    sw      s1,52(sp)
f0000e86:                       d84a                    sw      s2,48(sp)
f0000e88:                       d64e                    sw      s3,44(sp)
f0000e8a:                       d452                    sw      s4,40(sp)
f0000e8c:                       d256                    sw      s5,36(sp)
f0000e8e:                       d05a                    sw      s6,32(sp)
f0000e90:                       ce5e                    sw      s7,28(sp)
f0000e92:                       cc62                    sw      s8,24(sp)
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:112
  const char *dp = data;
  size_t sent_bytes;

  while (dp - data < len) {
f0000e94:       /-------------- c251                    beqz    a2,f0000f18 <hmac_testutils_push_message+0x9a>
f0000e96:       |               8bb2                    mv      s7,a2
f0000e98:       |               892e                    mv      s2,a1
f0000e9a:       |               8b2a                    mv      s6,a0
f0000e9c:       |               00003517                auipc   a0,0x3
f0000ea0:       |               02050513                addi    a0,a0,32 # f0003ebc <kDeviceLogBypassUartAddress>
f0000ea4:       |               410c                    lw      a1,0(a0)
f0000ea6:       |               4501                    li      a0,0
f0000ea8:       |               0015bc13                seqz    s8,a1
f0000eac:       |               00002997                auipc   s3,0x2
f0000eb0:       |               21498993                addi    s3,s3,532 # f00030c0 <kExpectedHmacDigest+0x328>
f0000eb4:       |               65b1                    lui     a1,0xc
f0000eb6:       |               aad58a13                addi    s4,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000eba:       |               1000fa97                auipc   s5,0x1000f
f0000ebe:       |               20ea8a93                addi    s5,s5,526 # 100c8 <_non_volatile_scratch_end+0xffd00c8>
f0000ec2:       |               84ca                    mv      s1,s2
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:114
    dif_result_t res =
        dif_hmac_fifo_push(hmac, dp, len - (dp - data), &sent_bytes);
f0000ec4:       |  /----------> 40ab8633                sub     a2,s7,a0
f0000ec8:       |  |            0854                    addi    a3,sp,20
f0000eca:       |  |            855a                    mv      a0,s6
f0000ecc:       |  |            85a6                    mv      a1,s1
f0000ece:       |  |            2a05                    jal     f0000ffe <dif_hmac_fifo_push>
f0000ed0:       |  |            842a                    mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:115
    CHECK(res == kDifOk || res == kDifIpFifoFull, "HMAC error = %d", res);
f0000ed2:       |  |            995d                    andi    a0,a0,-9
f0000ed4:       |  |  /-------- c50d                    beqz    a0,f0000efe <hmac_testutils_push_message+0x80>
f0000ed6:       |  |  |     /-- 000c1863                bnez    s8,f0000ee6 <hmac_testutils_push_message+0x68>
f0000eda:       |  |  |     |   4585                    li      a1,1
f0000edc:       |  |  |     |   8556                    mv      a0,s5
f0000ede:       |  |  |     |   8622                    mv      a2,s0
f0000ee0:       |  |  |     |   22f000ef                jal     ra,f000190e <base_log_internal_dv>
f0000ee4:       |  |  |  /--|-- a811                    j       f0000ef8 <hmac_testutils_push_message+0x7a>
f0000ee6:       |  |  |  |  \-> 850a                    mv      a0,sp
f0000ee8:       |  |  |  |      4651                    li      a2,20
f0000eea:       |  |  |  |      85ce                    mv      a1,s3
f0000eec:       |  |  |  |      2f8010ef                jal     ra,f00021e4 <memcpy>
f0000ef0:       |  |  |  |      850a                    mv      a0,sp
f0000ef2:       |  |  |  |      85a2                    mv      a1,s0
f0000ef4:       |  |  |  |      179000ef                jal     ra,f000186c <base_log_internal_core>
f0000ef8:       |  |  |  \----> 8552                    mv      a0,s4
f0000efa:       |  |  |         0ad000ef                jal     ra,f00017a6 <test_status_set>
f0000efe:       |  |  \-------> ff840513                addi    a0,s0,-8
f0000f02:       |  |            00153513                seqz    a0,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:119

    // Wait until the FIFO is drained before pushing more data. This helps
    // to prevent the undesirable back pressure condition.
    if (res == kDifIpFifoFull) {
f0000f06:       |  |        /-- c119                    beqz    a0,f0000f0c <hmac_testutils_push_message+0x8e>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:120
      hmac_testutils_fifo_empty_polled(hmac);
f0000f08:       |  |        |   855a                    mv      a0,s6
f0000f0a:       |  |        |   369d                    jal     f0000a70 <hmac_testutils_fifo_empty_polled>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:123
    }

    dp += sent_bytes;
f0000f0c:       |  |        \-> 4552                    lw      a0,20(sp)
f0000f0e:       |  |            94aa                    add     s1,s1,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:112
  while (dp - data < len) {
f0000f10:       |  |            41248533                sub     a0,s1,s2
f0000f14:       |  \----------- fb7568e3                bltu    a0,s7,f0000ec4 <hmac_testutils_push_message+0x46>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:125
  }
}
f0000f18:       \-------------> 4c62                    lw      s8,24(sp)
f0000f1a:                       4bf2                    lw      s7,28(sp)
f0000f1c:                       5b02                    lw      s6,32(sp)
f0000f1e:                       5a92                    lw      s5,36(sp)
f0000f20:                       5a22                    lw      s4,40(sp)
f0000f22:                       59b2                    lw      s3,44(sp)
f0000f24:                       5942                    lw      s2,48(sp)
f0000f26:                       54d2                    lw      s1,52(sp)
f0000f28:                       5462                    lw      s0,56(sp)
f0000f2a:                       50f2                    lw      ra,60(sp)
f0000f2c:                       6121                    addi    sp,sp,64
f0000f2e:                       8082                    ret

f0000f30 <dif_hmac_init>:
dif_hmac_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:18

#include "hmac_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_hmac_init(mmio_region_t base_addr, dif_hmac_t *hmac) {
  if (hmac == NULL) {
f0000f30:       /----- c581                     beqz    a1,f0000f38 <dif_hmac_init+0x8>
f0000f32:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:22
    return kDifBadArg;
  }

  hmac->base_addr = base_addr;
f0000f34:       |      c188                     sw      a0,0(a1)
f0000f36:       |  /-- a011                     j       f0000f3a <dif_hmac_init+0xa>
f0000f38:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:25

  return kDifOk;
}
f0000f3a:          \-> 8532                     mv      a0,a2
f0000f3c:              8082                     ret

f0000f3e <dif_hmac_mode_hmac_start>:
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:99
}

dif_result_t dif_hmac_mode_hmac_start(const dif_hmac_t *hmac,
                                      const uint8_t *key,
                                      const dif_hmac_transaction_t config) {
  if (hmac == NULL || key == NULL) {
f0000f3e:                       00153713                seqz    a4,a0
f0000f42:                       0015b793                seqz    a5,a1
f0000f46:                       8fd9                    or      a5,a5,a4
f0000f48:                       470d                    li      a4,3
f0000f4a:       /-------------- e7a5                    bnez    a5,f0000fb2 <dif_hmac_mode_hmac_start+0x74>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:104
    return kDifBadArg;
  }

  // Read current CFG register value.
  uint32_t reg = mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
f0000f4c:       |               00052883                lw      a7,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000f50:       |               0108a803                lw      a6,16(a7)
f0000f54:       |               4735                    li      a4,13
dif_hmac_calculate_device_config_value():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:62
  switch (config.message_endianness) {
f0000f56:       |  /----------- ca19                    beqz    a2,f0000f6c <dif_hmac_mode_hmac_start+0x2e>
f0000f58:       |  |            4785                    li      a5,1
f0000f5a:       +--|----------- 04f61c63                bne     a2,a5,f0000fb2 <dif_hmac_mode_hmac_start+0x74>
f0000f5e:       |  |            4281                    li      t0,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:75
  switch (config.digest_endianness) {
f0000f60:       |  |  /-------- ca81                    beqz    a3,f0000f70 <dif_hmac_mode_hmac_start+0x32>
f0000f62:       |  |  |  /----> 4785                    li      a5,1
f0000f64:       +--|--|--|----- 04f69763                bne     a3,a5,f0000fb2 <dif_hmac_mode_hmac_start+0x74>
f0000f68:       |  |  |  |      4301                    li      t1,0
f0000f6a:       |  |  |  |  /-- a021                    j       f0000f72 <dif_hmac_mode_hmac_start+0x34>
f0000f6c:       |  \--|--|--|-> 4291                    li      t0,4
f0000f6e:       |     |  \--|-- faf5                    bnez    a3,f0000f62 <dif_hmac_mode_hmac_start+0x24>
f0000f70:       |     \-----|-> 4321                    li      t1,8
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0000f72:       |           \-> 4198                    lw      a4,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0000f74:       |               04e8a023                sw      a4,64(a7)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:113

  // Set the HMAC key.
  // The least significant word is at HMAC_KEY_7_REG_OFFSET.
  // From the HWIP spec: "Order of the secret key is: key[255:0] = {KEY0, KEY1,
  // KEY2, ... , KEY7};"
  for (size_t i = 0; i < HMAC_PARAM_NUM_WORDS; ++i) {
f0000f78:       |               0591                    addi    a1,a1,4
f0000f7a:       |               03c00713                li      a4,60
f0000f7e:       |               02000793                li      a5,32
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:115
    const uint32_t word_offset = i * sizeof(uint32_t);
    mmio_region_write32(hmac->base_addr, HMAC_KEY_7_REG_OFFSET - word_offset,
f0000f82:       |           /-> 4110                    lw      a2,0(a0)
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
f0000f84:       |           |   4194                    lw      a3,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0000f86:       |           |   963a                    add     a2,a2,a4
f0000f88:       |           |   c214                    sw      a3,0(a2)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:113
  for (size_t i = 0; i < HMAC_PARAM_NUM_WORDS; ++i) {
f0000f8a:       |           |   1771                    addi    a4,a4,-4
f0000f8c:       |           |   0591                    addi    a1,a1,4
f0000f8e:       |           \-- fef71ae3                bne     a4,a5,f0000f82 <dif_hmac_mode_hmac_start+0x44>
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
f0000f92:       |               ff087593                andi    a1,a6,-16
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:122
  }

  // Set HMAC to process in HMAC mode (not SHA256-only mode).
  reg = bitfield_bit32_write(reg, HMAC_CFG_SHA_EN_BIT, true);
  reg = bitfield_bit32_write(reg, HMAC_CFG_HMAC_EN_BIT, true);
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, reg);
f0000f96:       |               4118                    lw      a4,0(a0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000f98:       |               0055e5b3                or      a1,a1,t0
f0000f9c:       |               0065e5b3                or      a1,a1,t1
f0000fa0:       |               0035e593                ori     a1,a1,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0000fa4:       |               cb0c                    sw      a1,16(a4)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:125

  // Begin HMAC operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
f0000fa6:       |               4108                    lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000fa8:       |               494c                    lw      a1,20(a0)
f0000faa:       |               4701                    li      a4,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0000fac:       |               0015e593                ori     a1,a1,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0000fb0:       |               c94c                    sw      a1,20(a0)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:128
                                  HMAC_CMD_HASH_START_BIT);
  return kDifOk;
}
f0000fb2:       \-------------> 853a                    mv      a0,a4
f0000fb4:                       8082                    ret

f0000fb6 <dif_hmac_mode_sha256_start>:
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:132

dif_result_t dif_hmac_mode_sha256_start(const dif_hmac_t *hmac,
                                        const dif_hmac_transaction_t config) {
  if (hmac == NULL) {
f0000fb6:          /-------------- c105                 beqz    a0,f0000fd6 <dif_hmac_mode_sha256_start+0x20>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:137
    return kDifBadArg;
  }

  // Read current CFG register value.
  uint32_t reg = mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
f0000fb8:          |               4118                 lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000fba:          |               01072803             lw      a6,16(a4)
f0000fbe:          |               46b5                 li      a3,13
dif_hmac_calculate_device_config_value():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:62
  switch (config.message_endianness) {
f0000fc0:          |  /----------- cd89                 beqz    a1,f0000fda <dif_hmac_mode_sha256_start+0x24>
f0000fc2:          |  |            4785                 li      a5,1
f0000fc4:       /--|--|----------- 02f59b63             bne     a1,a5,f0000ffa <dif_hmac_mode_sha256_start+0x44>
f0000fc8:       |  |  |            4581                 li      a1,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:75
  switch (config.digest_endianness) {
f0000fca:       |  |  |  /-------- ca11                 beqz    a2,f0000fde <dif_hmac_mode_sha256_start+0x28>
f0000fcc:       |  |  |  |  /----> 4785                 li      a5,1
f0000fce:       +--|--|--|--|----- 02f61663             bne     a2,a5,f0000ffa <dif_hmac_mode_sha256_start+0x44>
f0000fd2:       |  |  |  |  |      4601                 li      a2,0
f0000fd4:       |  |  |  |  |  /-- a031                 j       f0000fe0 <dif_hmac_mode_sha256_start+0x2a>
f0000fd6:       |  \--|--|--|--|-> 468d                 li      a3,3
f0000fd8:       +-----|--|--|--|-- a00d                 j       f0000ffa <dif_hmac_mode_sha256_start+0x44>
f0000fda:       |     \--|--|--|-> 4591                 li      a1,4
f0000fdc:       |        |  \--|-- fa65                 bnez    a2,f0000fcc <dif_hmac_mode_sha256_start+0x16>
f0000fde:       |        \-----|-> 4621                 li      a2,8
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f0000fe0:       |              \-> ff087693             andi    a3,a6,-16
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0000fe4:       |                  8dd5                 or      a1,a1,a3
f0000fe6:       |                  8dd1                 or      a1,a1,a2
f0000fe8:       |                  0025e593             ori     a1,a1,2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0000fec:       |                  cb0c                 sw      a1,16(a4)
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:150

  // Write new CFG register value.
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, reg);

  // Begin SHA256-only operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
f0000fee:       |                  4108                 lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0000ff0:       |                  494c                 lw      a1,20(a0)
f0000ff2:       |                  4681                 li      a3,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0000ff4:       |                  0015e593             ori     a1,a1,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0000ff8:       |                  c94c                 sw      a1,20(a0)
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:154
                                  HMAC_CMD_HASH_START_BIT);

  return kDifOk;
}
f0000ffa:       \----------------> 8536                 mv      a0,a3
f0000ffc:                          8082                 ret

f0000ffe <dif_hmac_fifo_push>:
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:158

dif_result_t dif_hmac_fifo_push(const dif_hmac_t *hmac, const void *data,
                                size_t len, size_t *bytes_sent) {
  if (hmac == NULL || data == NULL) {
f0000ffe:                       00153713                seqz    a4,a0
f0001002:                       0015b793                seqz    a5,a1
f0001006:                       8fd9                    or      a5,a5,a4
f0001008:                       470d                    li      a4,3
f000100a:       /-------------- e3b9                    bnez    a5,f0001050 <dif_hmac_fifo_push+0x52>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:165
  }

  const uint8_t *data_sent = (const uint8_t *)data;
  size_t bytes_remaining = len;

  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
f000100c:       |  /----------- ce1d                    beqz    a2,f000104a <dif_hmac_fifo_push+0x4c>
f000100e:       |  |            4811                    li      a6,4
f0001010:       |  |            87b2                    mv      a5,a2
get_status():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
f0001012:       |  |  /-------> 00052883                lw      a7,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0001016:       |  |  |         0188a703                lw      a4,24(a7)
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:169
    bool word_aligned = (uintptr_t)data_sent % sizeof(uint32_t) == 0;
    size_t bytes_written = 0;

    if (bytes_remaining < sizeof(uint32_t) || !word_aligned) {
f000101a:       |  |  |     /-- 0107e563                bltu    a5,a6,f0001024 <dif_hmac_fifo_push+0x26>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:166
    bool word_aligned = (uintptr_t)data_sent % sizeof(uint32_t) == 0;
f000101e:       |  |  |     |   0035f713                andi    a4,a1,3
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:169
    if (bytes_remaining < sizeof(uint32_t) || !word_aligned) {
f0001022:       |  |  |  /--|-- cf01                    beqz    a4,f000103a <dif_hmac_fifo_push+0x3c>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:172
      // Individual byte writes are needed if the buffer isn't aligned or there
      // are no more full words to write.
      mmio_region_write8(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, *data_sent);
f0001024:       |  |  |  |  \-> 00058283                lb      t0,0(a1)
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
f0001028:       |  |  |  |      40088713                addi    a4,a7,1024
f000102c:       |  |  |  |      40570023                sb      t0,1024(a4)
f0001030:       |  |  |  |      4705                    li      a4,1
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:181
      uint32_t word = read_32(data_sent);
      mmio_region_write32(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, word);
      bytes_written = sizeof(uint32_t);
    }

    bytes_remaining -= bytes_written;
f0001032:       |  |  |  |  /-> 8f99                    sub     a5,a5,a4
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:182
    data_sent += bytes_written;
f0001034:       |  |  |  |  |   95ba                    add     a1,a1,a4
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:165
  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
f0001036:       |  |  \--|--|-- fff1                    bnez    a5,f0001012 <dif_hmac_fifo_push+0x14>
f0001038:       |  +-----|--|-- a809                    j       f000104a <dif_hmac_fifo_push+0x4c>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
f000103a:       |  |     \--|-> 0005a283                lw      t0,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f000103e:       |  |        |   40088713                addi    a4,a7,1024
f0001042:       |  |        |   40572023                sw      t0,1024(a4)
f0001046:       |  |        |   4711                    li      a4,4
f0001048:       |  |        \-- b7ed                    j       f0001032 <dif_hmac_fifo_push+0x34>
f000104a:       |  \----------> 4701                    li      a4,0
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:185
  }

  if (bytes_sent != NULL) {
f000104c:       +-------------- c291                    beqz    a3,f0001050 <dif_hmac_fifo_push+0x52>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:186
    *bytes_sent = len - bytes_remaining;
f000104e:       |               c290                    sw      a2,0(a3)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:194
  if (bytes_remaining > 0) {
    return kDifIpFifoFull;
  }

  return kDifOk;
}
f0001050:       \-------------> 853a                    mv      a0,a4
f0001052:                       8082                    ret

f0001054 <dif_hmac_fifo_count_entries>:
dif_hmac_fifo_count_entries():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:198

dif_result_t dif_hmac_fifo_count_entries(const dif_hmac_t *hmac,
                                         uint32_t *num_entries) {
  if (hmac == NULL || num_entries == NULL) {
f0001054:           00153613            seqz    a2,a0
f0001058:           0015b693            seqz    a3,a1
f000105c:           8ed1                        or      a3,a3,a2
f000105e:           460d                        li      a2,3
f0001060:       /-- e699                        bnez    a3,f000106e <dif_hmac_fifo_count_entries+0x1a>
get_status():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
f0001062:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0001064:       |   4d08                        lw      a0,24(a0)
f0001066:       |   4601                        li      a2,0
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f0001068:       |   8111                        srli    a0,a0,0x4
f000106a:       |   897d                        andi    a0,a0,31
dif_hmac_fifo_count_entries():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:202
    return kDifBadArg;
  }

  *num_entries = get_fifo_entry_count(hmac);
f000106c:       |   c188                        sw      a0,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:205

  return kDifOk;
}
f000106e:       \-> 8532                        mv      a0,a2
f0001070:           8082                        ret

f0001072 <dif_hmac_get_message_length>:
dif_hmac_get_message_length():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:209

dif_result_t dif_hmac_get_message_length(const dif_hmac_t *hmac,
                                         uint64_t *msg_len) {
  if (hmac == NULL || msg_len == NULL) {
f0001072:           00153613            seqz    a2,a0
f0001076:           0015b693            seqz    a3,a1
f000107a:           8ed1                        or      a3,a3,a2
f000107c:           460d                        li      a2,3
f000107e:       /-- e699                        bnez    a3,f000108c <dif_hmac_get_message_length+0x1a>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:214
    return kDifBadArg;
  }

  uint64_t msg_lower =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_LOWER_REG_OFFSET);
f0001080:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001082:       |   5174                        lw      a3,100(a0)
dif_hmac_get_message_length():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:216
  uint64_t msg_upper =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_UPPER_REG_OFFSET);
f0001084:       |   5528                        lw      a0,104(a0)
f0001086:       |   4601                        li      a2,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:218

  *msg_len = (msg_upper << 32) | msg_lower;
f0001088:       |   c1c8                        sw      a0,4(a1)
f000108a:       |   c194                        sw      a3,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:221

  return kDifOk;
}
f000108c:       \-> 8532                        mv      a0,a2
f000108e:           8082                        ret

f0001090 <dif_hmac_process>:
dif_hmac_process():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:224

dif_result_t dif_hmac_process(const dif_hmac_t *hmac) {
  if (hmac == NULL) {
f0001090:       /-- c901                        beqz    a0,f00010a0 <dif_hmac_process+0x10>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:228
    return kDifBadArg;
  }

  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
f0001092:       |   410c                        lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001094:       |   49d0                        lw      a2,20(a1)
f0001096:       |   4501                        li      a0,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0001098:       |   00266613            ori     a2,a2,2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f000109c:       |   c9d0                        sw      a2,20(a1)
dif_hmac_process():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:231
                                  HMAC_CMD_HASH_PROCESS_BIT);
  return kDifOk;
}
f000109e:       |   8082                        ret
f00010a0:       \-> 450d                        li      a0,3
f00010a2:           8082                        ret

f00010a4 <dif_hmac_finish>:
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:235

dif_result_t dif_hmac_finish(const dif_hmac_t *hmac,
                             dif_hmac_digest_t *digest) {
  if (hmac == NULL || digest == NULL) {
f00010a4:                 00153613              seqz    a2,a0
f00010a8:                 0015b693              seqz    a3,a1
f00010ac:                 8ed1                  or      a3,a3,a2
f00010ae:                 460d                  li      a2,3
f00010b0:       /-------- ee9d                  bnez    a3,f00010ee <dif_hmac_finish+0x4a>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:240
    return kDifBadArg;
  }

  // Check if hmac_done is asserted.
  bool done = mmio_region_get_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
f00010b2:       |         4110                  lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00010b4:       |         4218                  lw      a4,0(a2)
f00010b6:       |         4e14                  lw      a3,24(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f00010b8:       |         8b05                  andi    a4,a4,1
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:247

  // Check if fifo_empty is asserted.
  bool fifo_empty = mmio_region_get_bit32(
      hmac->base_addr, HMAC_STATUS_REG_OFFSET, HMAC_STATUS_FIFO_EMPTY_BIT);

  if (done) {
f00010ba:       |     /-- e709                  bnez    a4,f00010c4 <dif_hmac_finish+0x20>
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f00010bc:       |     |   8a85                  andi    a3,a3,1
f00010be:       |     |   4639                  li      a2,14
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:251
    // Clear hmac_done.
    mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
                                    HMAC_INTR_STATE_HMAC_DONE_BIT);
  } else if (!fifo_empty) {
f00010c0:       |  /--|-- e691                  bnez    a3,f00010cc <dif_hmac_finish+0x28>
f00010c2:       +--|--|-- a035                  j       f00010ee <dif_hmac_finish+0x4a>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f00010c4:       |  |  \-> 4214                  lw      a3,0(a2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f00010c6:       |  |      0016e693              ori     a3,a3,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00010ca:       |  |      c214                  sw      a3,0(a2)
f00010cc:       |  \----> 06000613              li      a2,96
f00010d0:       |         04000693              li      a3,64
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:260
  // Read the digest in reverse to preserve the numerical value.
  // The least significant word is at HMAC_DIGEST_7_REG_OFFSET.
  // From the HWIP spec: "Order of the digest is: digest[255:0] = {DIGEST0,
  // DIGEST1, DIGEST2, ... , DIGEST7};"
  for (size_t i = 0; i < ARRAYSIZE(digest->digest); ++i) {
    digest->digest[i] = mmio_region_read32(
f00010d4:       |     /-> 4118                  lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00010d6:       |     |   9732                  add     a4,a4,a2
f00010d8:       |     |   4318                  lw      a4,0(a4)
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:260
f00010da:       |     |   c198                  sw      a4,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:259
  for (size_t i = 0; i < ARRAYSIZE(digest->digest); ++i) {
f00010dc:       |     |   1671                  addi    a2,a2,-4
f00010de:       |     |   0591                  addi    a1,a1,4
f00010e0:       |     \-- fed61ae3              bne     a2,a3,f00010d4 <dif_hmac_finish+0x30>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:267
  }

  // Disable HMAC and SHA256 until the next transaction, clearing the current
  // digest.
  uint32_t device_config =
      mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
f00010e4:       |         4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f00010e6:       |         490c                  lw      a1,16(a0)
f00010e8:       |         4601                  li      a2,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
f00010ea:       |         99f1                  andi    a1,a1,-4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00010ec:       |         c90c                  sw      a1,16(a0)
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:275
  device_config =
      bitfield_bit32_write(device_config, HMAC_CFG_HMAC_EN_BIT, false);
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, device_config);

  return kDifOk;
}
f00010ee:       \-------> 8532                  mv      a0,a2
f00010f0:                 8082                  ret

f00010f2 <ottf_machine_ecall_handler>:
ottf_machine_ecall_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:49
// A global random number generator testutil handle.
rand_testutils_rng_t rand_testutils_rng_ctx;

// The OTTF overrides the default machine ecall exception handler to implement
// FreeRTOS context switching, required for supporting cooperative scheduling.
void ottf_machine_ecall_handler(void) {
f00010f2:           1101                        addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:50
  if (pxCurrentTCB != NULL) {
f00010f4:           ce06                        sw      ra,28(sp)
f00010f6:           f0001517            auipc   a0,0xf0001
f00010fa:           f8a50513            addi    a0,a0,-118 # e0002080 <pxCurrentTCB>
f00010fe:           4108                        lw      a0,0(a0)
f0001100:       /-- c509                        beqz    a0,f000110a <ottf_machine_ecall_handler+0x18>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:54
    // If the pointer to the current TCB is not NULL, we are operating in
    // concurrency mode. In this case, our default behavior is to assume a
    // context switch has been requested.
    vTaskSwitchContext();
f0001102:       |   40f2                        lw      ra,28(sp)
f0001104:       |   6105                        addi    sp,sp,32
f0001106:       |   5760106f            j       f000267c <vTaskSwitchContext>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:57
    return;
  }
  LOG_ERROR(
f000110a:       \-> 00003517            auipc   a0,0x3
f000110e:           db250513            addi    a0,a0,-590 # f0003ebc <kDeviceLogBypassUartAddress>
f0001112:           4108                        lw      a0,0(a0)
f0001114:       /-- c911                        beqz    a0,f0001128 <ottf_machine_ecall_handler+0x36>
f0001116:       |   1000f517            auipc   a0,0x1000f
f000111a:       |   fee50513            addi    a0,a0,-18 # 10104 <_non_volatile_scratch_end+0xffd0104>
f000111e:       |   4581                        li      a1,0
f0001120:       |   40f2                        lw      ra,28(sp)
f0001122:       |   6105                        addi    sp,sp,32
f0001124:       |   7ea0006f            j       f000190e <base_log_internal_dv>
f0001128:       \-> 00002597            auipc   a1,0x2
f000112c:           23858593            addi    a1,a1,568 # f0003360 <kExpectedHmacDigest+0x5c8>
f0001130:           0028                        addi    a0,sp,8
f0001132:           4651                        li      a2,20
f0001134:           0b0010ef            jal     ra,f00021e4 <memcpy>
f0001138:           0028                        addi    a0,sp,8
f000113a:           732000ef            jal     ra,f000186c <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:60
      "OTTF currently only supports use of machine-mode ecall for FreeRTOS "
      "context switching.");
}
f000113e:           40f2                        lw      ra,28(sp)
f0001140:           6105                        addi    sp,sp,32
f0001142:           8082                        ret

f0001144 <_ottf_main>:
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:120
  report_test_status(result);
}

dif_uart_t *ottf_console(void) { return &uart0; }

void _ottf_main(void) {
f0001144:                 7179                  addi    sp,sp,-48
f0001146:                 d606                  sw      ra,44(sp)
f0001148:                 d422                  sw      s0,40(sp)
f000114a:                 d226                  sw      s1,36(sp)
f000114c:                 d04a                  sw      s2,32(sp)
f000114e:                 6511                  lui     a0,0x4
f0001150:                 35450513              addi    a0,a0,852 # 4354 <_stack_size+0x354>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:121
  test_status_set(kTestStatusInTest);
f0001154:                 652000ef              jal     ra,f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:124

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
f0001158:                 00003517              auipc   a0,0x3
f000115c:                 d4050513              addi    a0,a0,-704 # f0003e98 <kDeviceType>
f0001160:                 4108                  lw      a0,0(a0)
f0001162:                 00003917              auipc   s2,0x3
f0001166:                 d5a90913              addi    s2,s2,-678 # f0003ebc <kDeviceLogBypassUartAddress>
f000116a:                 00002497              auipc   s1,0x2
f000116e:                 b7648493              addi    s1,s1,-1162 # f0002ce0 <kOttfTestConfig>
f0001172:          /----- c91d                  beqz    a0,f00011a8 <_ottf_main+0x64>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:125
    init_uart();
f0001174:          |      28fd                  jal     f0001272 <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:126
    LOG_INFO("Running %s", kOttfTestConfig.file);
f0001176:          |      00092503              lw      a0,0(s2)
f000117a:          |      40c0                  lw      s0,4(s1)
f000117c:          |  /-- c911                  beqz    a0,f0001190 <_ottf_main+0x4c>
f000117e:          |  |   1000f517              auipc   a0,0x1000f
f0001182:          |  |   f9a50513              addi    a0,a0,-102 # 10118 <_non_volatile_scratch_end+0xffd0118>
f0001186:          |  |   4585                  li      a1,1
f0001188:          |  |   8622                  mv      a2,s0
f000118a:          |  |   784000ef              jal     ra,f000190e <base_log_internal_dv>
f000118e:          +--|-- a829                  j       f00011a8 <_ottf_main+0x64>
f0001190:          |  \-> 00002597              auipc   a1,0x2
f0001194:          |      1e458593              addi    a1,a1,484 # f0003374 <kExpectedHmacDigest+0x5dc>
f0001198:          |      850a                  mv      a0,sp
f000119a:          |      4651                  li      a2,20
f000119c:          |      048010ef              jal     ra,f00021e4 <memcpy>
f00011a0:          |      850a                  mv      a0,sp
f00011a2:          |      85a2                  mv      a1,s0
f00011a4:          |      6c8000ef              jal     ra,f000186c <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:132
  }

  // Initialize a global random number generator testutil context to provide
  // tests with a source of entropy for randomizing test behaviors.
  dif_rv_core_ibex_t rv_core_ibex;
  CHECK_DIF_OK(dif_rv_core_ibex_init(
f00011a8:          \----> c11f0537              lui     a0,0xc11f0
f00011ac:                 082c                  addi    a1,sp,24
f00011ae:                 5ea000ef              jal     ra,f0001798 <dif_rv_core_ibex_init>
f00011b2:       /-------- cd15                  beqz    a0,f00011ee <_ottf_main+0xaa>
f00011b4:       |         842a                  mv      s0,a0
f00011b6:       |         00092503              lw      a0,0(s2)
f00011ba:       |     /-- c911                  beqz    a0,f00011ce <_ottf_main+0x8a>
f00011bc:       |     |   1000f517              auipc   a0,0x1000f
f00011c0:       |     |   f7050513              addi    a0,a0,-144 # 1012c <_non_volatile_scratch_end+0xffd012c>
f00011c4:       |     |   4585                  li      a1,1
f00011c6:       |     |   8622                  mv      a2,s0
f00011c8:       |     |   746000ef              jal     ra,f000190e <base_log_internal_dv>
f00011cc:       |  /--|-- a829                  j       f00011e6 <_ottf_main+0xa2>
f00011ce:       |  |  \-> 00002597              auipc   a1,0x2
f00011d2:       |  |      1ba58593              addi    a1,a1,442 # f0003388 <kExpectedHmacDigest+0x5f0>
f00011d6:       |  |      850a                  mv      a0,sp
f00011d8:       |  |      4651                  li      a2,20
f00011da:       |  |      00a010ef              jal     ra,f00021e4 <memcpy>
f00011de:       |  |      850a                  mv      a0,sp
f00011e0:       |  |      85a2                  mv      a1,s0
f00011e2:       |  |      68a000ef              jal     ra,f000186c <base_log_internal_core>
f00011e6:       |  \----> 6531                  lui     a0,0xc
f00011e8:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00011ec:       |         2b6d                  jal     f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:135
      mmio_region_from_addr(TOP_EARLGREY_RV_CORE_IBEX_CFG_BASE_ADDR),
      &rv_core_ibex));
  rand_testutils_rng_ctx = rand_testutils_init(&rv_core_ibex);
f00011ee:       \-------> 850a                  mv      a0,sp
f00011f0:                 082c                  addi    a1,sp,24
f00011f2:                 2b31                  jal     f000170e <rand_testutils_init>
f00011f4:                 f0001517              auipc   a0,0xf0001
f00011f8:                 ed050513              addi    a0,a0,-304 # e00020c4 <rand_testutils_rng_ctx>
f00011fc:                 858a                  mv      a1,sp
f00011fe:                 4661                  li      a2,24
f0001200:                 7e5000ef              jal     ra,f00021e4 <memcpy>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:138

  // Run the test.
  if (kOttfTestConfig.enable_concurrency) {
f0001204:                 0004c503              lbu     a0,0(s1)
f0001208:          /----- c11d                  beqz    a0,f000122e <_ottf_main+0xea>
ottf_task_create():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:65
  return xTaskCreate(/*pvTaskCode=*/task_function, /*pcName=*/task_name,
f000120a:          |      00000517              auipc   a0,0x0
f000120e:          |      13a50513              addi    a0,a0,314 # f0001344 <test_wrapper>
f0001212:          |      00002597              auipc   a1,0x2
f0001216:          |      ff858593              addi    a1,a1,-8 # f000320a <kExpectedHmacDigest+0x472>
f000121a:          |      10000613              li      a2,256
f000121e:          |      4705                  li      a4,1
f0001220:          |      4681                  li      a3,0
f0001222:          |      4781                  li      a5,0
f0001224:          |      218010ef              jal     ra,f000243c <xTaskCreate>
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:143
    // Run `test_main()` in a FreeRTOS task, allowing other FreeRTOS tasks to
    // be spawned, if requested in the main test task. Note, we spawn the main
    // test task at a priority level of 0.
    ottf_task_create(test_wrapper, "test_main", kOttfFreeRtosMinStackSize, 0);
    vTaskStartScheduler();
f0001228:          |      540010ef              jal     ra,f0002768 <vTaskStartScheduler>
f000122c:          |  /-- a019                  j       f0001232 <_ottf_main+0xee>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:146
  } else {
    // Otherwise, launch `test_main()` on bare-metal.
    test_wrapper(NULL);
f000122e:          \--|-> 4501                  li      a0,0
f0001230:             |   2a11                  jal     f0001344 <test_wrapper>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:150
  }

  // Unreachable.
  CHECK(false);
f0001232:             \-> 00092503              lw      a0,0(s2)
f0001236:             /-- c909                  beqz    a0,f0001248 <_ottf_main+0x104>
f0001238:             |   1000f517              auipc   a0,0x1000f
f000123c:             |   f0850513              addi    a0,a0,-248 # 10140 <_non_volatile_scratch_end+0xffd0140>
f0001240:             |   4581                  li      a1,0
f0001242:             |   6cc000ef              jal     ra,f000190e <base_log_internal_dv>
f0001246:          /--|-- a821                  j       f000125e <_ottf_main+0x11a>
f0001248:          |  \-> 00002597              auipc   a1,0x2
f000124c:          |      15458593              addi    a1,a1,340 # f000339c <kExpectedHmacDigest+0x604>
f0001250:          |      850a                  mv      a0,sp
f0001252:          |      4651                  li      a2,20
f0001254:          |      791000ef              jal     ra,f00021e4 <memcpy>
f0001258:          |      850a                  mv      a0,sp
f000125a:          |      612000ef              jal     ra,f000186c <base_log_internal_core>
f000125e:          \----> 6531                  lui     a0,0xc
f0001260:                 aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001264:                 2389                  jal     f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:151
}
f0001266:                 5902                  lw      s2,32(sp)
f0001268:                 5492                  lw      s1,36(sp)
f000126a:                 5422                  lw      s0,40(sp)
f000126c:                 50b2                  lw      ra,44(sp)
f000126e:                 6145                  addi    sp,sp,48
f0001270:                 8082                  ret

f0001272 <init_uart>:
init_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:81
static void init_uart(void) {
f0001272:                 1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:82
  CHECK_DIF_OK(dif_uart_init(
f0001274:                 ce06                  sw      ra,28(sp)
f0001276:                 cc22                  sw      s0,24(sp)
f0001278:                 ca26                  sw      s1,20(sp)
f000127a:                 f0001597              auipc   a1,0xf0001
f000127e:                 dee58593              addi    a1,a1,-530 # e0002068 <uart0>
f0001282:                 c0000537              lui     a0,0xc0000
f0001286:                 5c5000ef              jal     ra,f000204a <dif_uart_init>
f000128a:                 00003497              auipc   s1,0x3
f000128e:                 c3248493              addi    s1,s1,-974 # f0003ebc <kDeviceLogBypassUartAddress>
f0001292:       /-------- cd05                  beqz    a0,f00012ca <init_uart+0x58>
f0001294:       |         842a                  mv      s0,a0
f0001296:       |         4088                  lw      a0,0(s1)
f0001298:       |     /-- c911                  beqz    a0,f00012ac <init_uart+0x3a>
f000129a:       |     |   1000f517              auipc   a0,0x1000f
f000129e:       |     |   eba50513              addi    a0,a0,-326 # 10154 <_non_volatile_scratch_end+0xffd0154>
f00012a2:       |     |   4585                  li      a1,1
f00012a4:       |     |   8622                  mv      a2,s0
f00012a6:       |     |   668000ef              jal     ra,f000190e <base_log_internal_dv>
f00012aa:       |  /--|-- a821                  j       f00012c2 <init_uart+0x50>
f00012ac:       |  |  \-> 00002597              auipc   a1,0x2
f00012b0:       |  |      10458593              addi    a1,a1,260 # f00033b0 <kExpectedHmacDigest+0x618>
f00012b4:       |  |      850a                  mv      a0,sp
f00012b6:       |  |      4651                  li      a2,20
f00012b8:       |  |      72d000ef              jal     ra,f00021e4 <memcpy>
f00012bc:       |  |      850a                  mv      a0,sp
f00012be:       |  |      85a2                  mv      a1,s0
f00012c0:       |  |      2375                  jal     f000186c <base_log_internal_core>
f00012c2:       |  \----> 6531                  lui     a0,0xc
f00012c4:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00012c8:       |         29f9                  jal     f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:84
  CHECK_DIF_OK(
f00012ca:       \-------> 00003517              auipc   a0,0x3
f00012ce:                 be650513              addi    a0,a0,-1050 # f0003eb0 <kUartBaudrate>
f00012d2:                 4108                  lw      a0,0(a0)
f00012d4:                 00003597              auipc   a1,0x3
f00012d8:                 bd458593              addi    a1,a1,-1068 # f0003ea8 <kClockFreqPeripheralHz>
f00012dc:                 418c                  lw      a1,0(a1)
f00012de:                 c02a                  sw      a0,0(sp)
f00012e0:                 c22e                  sw      a1,4(sp)
f00012e2:                 c402                  sw      zero,8(sp)
f00012e4:                 4505                  li      a0,1
f00012e6:                 c62a                  sw      a0,12(sp)
f00012e8:                 f0001517              auipc   a0,0xf0001
f00012ec:                 d8050513              addi    a0,a0,-640 # e0002068 <uart0>
f00012f0:                 858a                  mv      a1,sp
f00012f2:                 567000ef              jal     ra,f0002058 <dif_uart_configure>
f00012f6:       /-------- cd05                  beqz    a0,f000132e <init_uart+0xbc>
f00012f8:       |         842a                  mv      s0,a0
f00012fa:       |         4088                  lw      a0,0(s1)
f00012fc:       |     /-- c911                  beqz    a0,f0001310 <init_uart+0x9e>
f00012fe:       |     |   1000f517              auipc   a0,0x1000f
f0001302:       |     |   e6a50513              addi    a0,a0,-406 # 10168 <_non_volatile_scratch_end+0xffd0168>
f0001306:       |     |   4585                  li      a1,1
f0001308:       |     |   8622                  mv      a2,s0
f000130a:       |     |   604000ef              jal     ra,f000190e <base_log_internal_dv>
f000130e:       |  /--|-- a821                  j       f0001326 <init_uart+0xb4>
f0001310:       |  |  \-> 00002597              auipc   a1,0x2
f0001314:       |  |      0b458593              addi    a1,a1,180 # f00033c4 <kExpectedHmacDigest+0x62c>
f0001318:       |  |      850a                  mv      a0,sp
f000131a:       |  |      4651                  li      a2,20
f000131c:       |  |      6c9000ef              jal     ra,f00021e4 <memcpy>
f0001320:       |  |      850a                  mv      a0,sp
f0001322:       |  |      85a2                  mv      a1,s0
f0001324:       |  |      23a1                  jal     f000186c <base_log_internal_core>
f0001326:       |  \----> 6531                  lui     a0,0xc
f0001328:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000132c:       |         29ad                  jal     f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:91
  base_uart_stdout(&uart0);
f000132e:       \-------> f0001517              auipc   a0,0xf0001
f0001332:                 d3a50513              addi    a0,a0,-710 # e0002068 <uart0>
f0001336:                 610000ef              jal     ra,f0001946 <base_uart_stdout>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:92
}
f000133a:                 44d2                  lw      s1,20(sp)
f000133c:                 4462                  lw      s0,24(sp)
f000133e:                 40f2                  lw      ra,28(sp)
f0001340:                 6105                  addi    sp,sp,32
f0001342:                 8082                  ret

f0001344 <test_wrapper>:
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:110
static void test_wrapper(void *task_parameters) {
f0001344:                 1101                  addi    sp,sp,-32
f0001346:                 ce06                  sw      ra,28(sp)
f0001348:                 cc22                  sw      s0,24(sp)
f000134a:                 ca26                  sw      s1,20(sp)
f000134c:                 6531                  lui     a0,0xc
f000134e:                 aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:112
  bool result = manufacturer_pre_test_hook();
f0001352:                 041010ef              jal     ra,f0002b92 <manufacturer_pre_test_hook>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:113
  result = result && test_main();
f0001356:          /----- cd11                  beqz    a0,f0001372 <test_wrapper+0x2e>
f0001358:          |      cb8ff0ef              jal     ra,f0000810 <test_main>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:114
  result = result && manufacturer_post_test_hook();
f000135c:          +----- c919                  beqz    a0,f0001372 <test_wrapper+0x2e>
f000135e:          |      039010ef              jal     ra,f0002b96 <manufacturer_post_test_hook>
f0001362:          |  /-- e509                  bnez    a0,f000136c <test_wrapper+0x28>
f0001364:          |  |   6531                  lui     a0,0xc
f0001366:          |  |   aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000136a:          +--|-- a021                  j       f0001372 <test_wrapper+0x2e>
f000136c:          |  \-> 6525                  lui     a0,0x9
f000136e:          |      00d50413              addi    s0,a0,13 # 900d <_non_volatile_scratch_size+0x400d>
report_test_status():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:96
  if (kDeviceType != kDeviceSimDV) {
f0001372:          \----> 00003517              auipc   a0,0x3
f0001376:                 b2650513              addi    a0,a0,-1242 # f0003e98 <kDeviceType>
f000137a:                 4108                  lw      a0,0(a0)
f000137c:       /-------- c521                  beqz    a0,f00013c4 <test_wrapper+0x80>
f000137e:       |         00002497              auipc   s1,0x2
f0001382:       |         96248493              addi    s1,s1,-1694 # f0002ce0 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:97
    if (kOttfTestConfig.can_clobber_uart) {
f0001386:       |         0014c503              lbu     a0,1(s1)
f000138a:       |     /-- c111                  beqz    a0,f000138e <test_wrapper+0x4a>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:98
      init_uart();
f000138c:       |     |   35dd                  jal     f0001272 <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:100
    LOG_INFO("Finished %s", kOttfTestConfig.file);
f000138e:       |     \-> 00003517              auipc   a0,0x3
f0001392:       |         b2e50513              addi    a0,a0,-1234 # f0003ebc <kDeviceLogBypassUartAddress>
f0001396:       |         4108                  lw      a0,0(a0)
f0001398:       |         40c4                  lw      s1,4(s1)
f000139a:       |     /-- c909                  beqz    a0,f00013ac <test_wrapper+0x68>
f000139c:       |     |   1000f517              auipc   a0,0x1000f
f00013a0:       |     |   de050513              addi    a0,a0,-544 # 1017c <_non_volatile_scratch_end+0xffd017c>
f00013a4:       |     |   4585                  li      a1,1
f00013a6:       |     |   8626                  mv      a2,s1
f00013a8:       |     |   239d                  jal     f000190e <base_log_internal_dv>
f00013aa:       |  /--|-- a821                  j       f00013c2 <test_wrapper+0x7e>
f00013ac:       |  |  \-> 00002597              auipc   a1,0x2
f00013b0:       |  |      02c58593              addi    a1,a1,44 # f00033d8 <kExpectedHmacDigest+0x640>
f00013b4:       |  |      850a                  mv      a0,sp
f00013b6:       |  |      4651                  li      a2,20
f00013b8:       |  |      62d000ef              jal     ra,f00021e4 <memcpy>
f00013bc:       |  |      850a                  mv      a0,sp
f00013be:       |  |      85a6                  mv      a1,s1
f00013c0:       |  |      2175                  jal     f000186c <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:101
    test_coverage_send_buffer();
f00013c2:       |  \----> 2801                  jal     f00013d2 <test_coverage_send_buffer>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:104
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
f00013c4:       \-------> 8522                  mv      a0,s0
f00013c6:                 26c5                  jal     f00017a6 <test_status_set>
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:116
}
f00013c8:                 44d2                  lw      s1,20(sp)
f00013ca:                 4462                  lw      s0,24(sp)
f00013cc:                 40f2                  lw      ra,28(sp)
f00013ce:                 6105                  addi    sp,sp,32
f00013d0:                 8082                  ret

f00013d2 <test_coverage_send_buffer>:
test_coverage_send_buffer():
/proc/self/cwd/sw/device/lib/testing/test_framework/coverage_none.c:9

#include "sw/device/lib/testing/test_framework/coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
f00013d2:       8082                    ret

f00013d4 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:18

/**
 * This is called if configUSE_MALLOC_FAILED_HOOK is set to 1 in
 * FreeRTOSConfig.h, and a call to pvPortMalloc() fails.
 */
void vApplicationMallocFailedHook(void) {
f00013d4:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:19
  LOG_INFO("FreeRTOS malloc failed. Increase heap size in FreeRTOSConfig.h");
f00013d6:              ce06                     sw      ra,28(sp)
f00013d8:              00003517                 auipc   a0,0x3
f00013dc:              ae450513                 addi    a0,a0,-1308 # f0003ebc <kDeviceLogBypassUartAddress>
f00013e0:              4108                     lw      a0,0(a0)
f00013e2:       /----- ed01                     bnez    a0,f00013fa <vApplicationMallocFailedHook+0x26>
f00013e4:       |      00002597                 auipc   a1,0x2
f00013e8:       |      0b858593                 addi    a1,a1,184 # f000349c <kExpectedHmacDigest+0x704>
f00013ec:       |      0028                     addi    a0,sp,8
f00013ee:       |      4651                     li      a2,20
f00013f0:       |      5f5000ef                 jal     ra,f00021e4 <memcpy>
f00013f4:       |      0028                     addi    a0,sp,8
f00013f6:       |      299d                     jal     f000186c <base_log_internal_core>
f00013f8:       |  /-- a039                     j       f0001406 <vApplicationMallocFailedHook+0x32>
f00013fa:       \--|-> 1000f517                 auipc   a0,0x1000f
f00013fe:          |   d9650513                 addi    a0,a0,-618 # 10190 <_non_volatile_scratch_end+0xffd0190>
f0001402:          |   4581                     li      a1,0
f0001404:          |   2329                     jal     f000190e <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:20
  irq_global_ctrl(false);
f0001406:          \-> 4501                     li      a0,0
f0001408:              28a1                     jal     f0001460 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:21
  abort();
f000140a:              21a9                     jal     f0001854 <abort>

f000140c <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:28

/**
 * This is called if configCHECK_FOR_STACK_OVERFLOW is set to 1 or 2 in
 * FreeRTOSConfig.h, and a task detects a stack overflow.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
f000140c:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:29
  LOG_INFO("FreeRTOS stack overflow. Increase stack size of task: %s");
f000140e:              ce06                     sw      ra,28(sp)
f0001410:              00003517                 auipc   a0,0x3
f0001414:              aac50513                 addi    a0,a0,-1364 # f0003ebc <kDeviceLogBypassUartAddress>
f0001418:              4108                     lw      a0,0(a0)
f000141a:       /----- ed01                     bnez    a0,f0001432 <vApplicationStackOverflowHook+0x26>
f000141c:       |      00002597                 auipc   a1,0x2
f0001420:       |      09458593                 addi    a1,a1,148 # f00034b0 <kExpectedHmacDigest+0x718>
f0001424:       |      0028                     addi    a0,sp,8
f0001426:       |      4651                     li      a2,20
f0001428:       |      5bd000ef                 jal     ra,f00021e4 <memcpy>
f000142c:       |      0028                     addi    a0,sp,8
f000142e:       |      293d                     jal     f000186c <base_log_internal_core>
f0001430:       |  /-- a039                     j       f000143e <vApplicationStackOverflowHook+0x32>
f0001432:       \--|-> 1000f517                 auipc   a0,0x1000f
f0001436:          |   d7250513                 addi    a0,a0,-654 # 101a4 <_non_volatile_scratch_end+0xffd01a4>
f000143a:          |   4581                     li      a1,0
f000143c:          |   29c9                     jal     f000190e <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:30
  irq_global_ctrl(false);
f000143e:          \-> 4501                     li      a0,0
f0001440:              2005                     jal     f0001460 <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:31
  abort();
f0001442:              2909                     jal     f0001854 <abort>

f0001444 <xPortStartScheduler>:
xPortStartScheduler():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:93
// ----------------------------------------------------------------------------
// Scheduler Setup
// ----------------------------------------------------------------------------
extern void xPortStartFirstTask(void);

BaseType_t xPortStartScheduler(void) {
f0001444:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:97
#if configUSE_PREEMPTION
  vPortSetupTimerInterrupt();
#endif  // configUSE_PREEMPTION
  irq_timer_ctrl(true);
f0001446:       c606                    sw      ra,12(sp)
f0001448:       4505                    li      a0,1
f000144a:       2089                    jal     f000148c <irq_timer_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:98
  irq_external_ctrl(true);
f000144c:       4505                    li      a0,1
f000144e:       2015                    jal     f0001472 <irq_external_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:99
  irq_software_ctrl(true);
f0001450:       4505                    li      a0,1
f0001452:       2881                    jal     f00014a2 <irq_software_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:103
  // Note: no need to call 'irq_global_ctrl(true)' since the global interrupt
  // enable is set in the xPortStartFirstTask sub-routine in
  // sw/device/lib/testing/test_framework/freertos_port.S.
  xPortStartFirstTask();
f0001454:       8f4ff0ef                jal     ra,f0000548 <xPortStartFirstTask>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:106

  // Unreachable.
  return pdFAIL;
f0001458:       4501                    li      a0,0
f000145a:       40b2                    lw      ra,12(sp)
f000145c:       0141                    addi    sp,sp,16
f000145e:       8082                    ret

f0001460 <irq_global_ctrl>:
irq_global_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:18
void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
}

void irq_global_ctrl(bool en) {
  if (en) {
f0001460:       /-- c509                        beqz    a0,f000146a <irq_global_ctrl+0xa>
f0001462:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
f0001464:       |   30052073            csrs    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
f0001468:       |   8082                        ret
f000146a:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
f000146c:           30053073            csrc    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
}
f0001470:           8082                        ret

f0001472 <irq_external_ctrl>:
irq_external_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
f0001472:       /-- c519                        beqz    a0,f0001480 <irq_external_ctrl+0xe>
f0001474:       |   6505                        lui     a0,0x1
f0001476:       |   80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
f000147a:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f000147e:       |   8082                        ret
f0001480:       \-> 6505                        lui     a0,0x1
f0001482:           80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0001486:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
}
f000148a:           8082                        ret

f000148c <irq_timer_ctrl>:
irq_timer_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
f000148c:       /-- c511                        beqz    a0,f0001498 <irq_timer_ctrl+0xc>
f000148e:       |   08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0001492:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0001496:       |   8082                        ret
f0001498:       \-> 08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f000149c:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
}
f00014a0:           8082                        ret

f00014a2 <irq_software_ctrl>:
irq_software_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
f00014a2:       /-- c509                        beqz    a0,f00014ac <irq_software_ctrl+0xa>
f00014a4:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
f00014a6:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f00014aa:       |   8082                        ret
f00014ac:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f00014ae:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
}
f00014b2:           8082                        ret

f00014b4 <ottf_generic_fault_print>:
ottf_generic_fault_print():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:56
    "Reserved",
    "Reserved",
    "Reserved",
};

void ottf_generic_fault_print(const char *reason, uint32_t mcause) {
f00014b4:           7179                        addi    sp,sp,-48
f00014b6:           d606                        sw      ra,44(sp)
f00014b8:           d422                        sw      s0,40(sp)
f00014ba:           d226                        sw      s1,36(sp)
f00014bc:           d04a                        sw      s2,32(sp)
f00014be:           ce4e                        sw      s3,28(sp)
f00014c0:           892e                        mv      s2,a1
f00014c2:           89aa                        mv      s3,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:57
  uint32_t mepc = ibex_mepc_read();
f00014c4:           264d                        jal     f0001866 <ibex_mepc_read>
f00014c6:           84aa                        mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f00014c8:           2e61                        jal     f0001860 <ibex_mtval_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f00014ca:           00003597            auipc   a1,0x3
f00014ce:           9f258593            addi    a1,a1,-1550 # f0003ebc <kDeviceLogBypassUartAddress>
f00014d2:           418c                        lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f00014d4:           842a                        mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f00014d6:       /-- c18d                        beqz    a1,f00014f8 <ottf_generic_fault_print+0x44>
f00014d8:       |   1000f517            auipc   a0,0x1000f
f00014dc:       |   ce050513            addi    a0,a0,-800 # 101b8 <_non_volatile_scratch_end+0xffd01b8>
f00014e0:       |   4591                        li      a1,4
f00014e2:       |   864e                        mv      a2,s3
f00014e4:       |   86ca                        mv      a3,s2
f00014e6:       |   8726                        mv      a4,s1
f00014e8:       |   87a2                        mv      a5,s0
f00014ea:       |   49f2                        lw      s3,28(sp)
f00014ec:       |   5902                        lw      s2,32(sp)
f00014ee:       |   5492                        lw      s1,36(sp)
f00014f0:       |   5422                        lw      s0,40(sp)
f00014f2:       |   50b2                        lw      ra,44(sp)
f00014f4:       |   6145                        addi    sp,sp,48
f00014f6:       |   a921                        j       f000190e <base_log_internal_dv>
f00014f8:       \-> 00002597            auipc   a1,0x2
f00014fc:           23858593            addi    a1,a1,568 # f0003730 <kExpectedHmacDigest+0x998>
f0001500:           0028                        addi    a0,sp,8
f0001502:           4651                        li      a2,20
f0001504:           4e1000ef            jal     ra,f00021e4 <memcpy>
f0001508:           0028                        addi    a0,sp,8
f000150a:           85ce                        mv      a1,s3
f000150c:           864a                        mv      a2,s2
f000150e:           86a6                        mv      a3,s1
f0001510:           8722                        mv      a4,s0
f0001512:           2ea9                        jal     f000186c <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:61
            mtval);
}
f0001514:           49f2                        lw      s3,28(sp)
f0001516:           5902                        lw      s2,32(sp)
f0001518:           5492                        lw      s1,36(sp)
f000151a:           5422                        lw      s0,40(sp)
f000151c:           50b2                        lw      ra,44(sp)
f000151e:           6145                        addi    sp,sp,48
f0001520:           8082                        ret

f0001522 <ottf_exception_handler>:
ottf_exception_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:79
 */
OT_WEAK
void *pxCurrentTCB = NULL;

OT_WEAK
void ottf_exception_handler(void) {
f0001522:           1141                        addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:80
  uint32_t mcause = ibex_mcause_read();
f0001524:           c606                        sw      ra,12(sp)
f0001526:           2e15                        jal     f000185a <ibex_mcause_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:82

  switch ((ibex_exc_t)(mcause & kIbexExcMax)) {
f0001528:           897d                        andi    a0,a0,31
f000152a:           45ad                        li      a1,11
f000152c:       /-- 02a5ef63            bltu    a1,a0,f000156a <ottf_exception_handler+0x48>
f0001530:       |   050a                        slli    a0,a0,0x2
f0001532:       |   00002597            auipc   a1,0x2
f0001536:       |   f9258593            addi    a1,a1,-110 # f00034c4 <kExpectedHmacDigest+0x72c>
f000153a:       |   952e                        add     a0,a0,a1
f000153c:       |   4108                        lw      a0,0(a0)
f000153e:       |   8502                        jr      a0
f0001540:       |   40b2                        lw      ra,12(sp)
f0001542:       |   0141                        addi    sp,sp,16
f0001544:       |   a025                        j       f000156c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:84
    case kIbexExcInstrMisaligned:
      ottf_instr_misaligned_fault_handler();
f0001546:       |   40b2                        lw      ra,12(sp)
f0001548:       |   0141                        addi    sp,sp,16
f000154a:       |   a00d                        j       f000156c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:87
      break;
    case kIbexExcInstrAccessFault:
      ottf_instr_access_fault_handler();
f000154c:       |   40b2                        lw      ra,12(sp)
f000154e:       |   0141                        addi    sp,sp,16
f0001550:       |   a831                        j       f000156c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:90
      break;
    case kIbexExcIllegalInstrFault:
      ottf_illegal_instr_fault_handler();
f0001552:       |   40b2                        lw      ra,12(sp)
f0001554:       |   0141                        addi    sp,sp,16
f0001556:       |   a819                        j       f000156c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:93
      break;
    case kIbexExcBreakpoint:
      ottf_breakpoint_handler();
f0001558:       |   40b2                        lw      ra,12(sp)
f000155a:       |   0141                        addi    sp,sp,16
f000155c:       |   a801                        j       f000156c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:105
      break;
    case kIbexExcMachineECall:
      ottf_machine_ecall_handler();
      break;
    case kIbexExcUserECall:
      ottf_user_ecall_handler();
f000155e:       |   40b2                        lw      ra,12(sp)
f0001560:       |   0141                        addi    sp,sp,16
f0001562:       |   a029                        j       f000156c <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:102
      ottf_machine_ecall_handler();
f0001564:       |   40b2                        lw      ra,12(sp)
f0001566:       |   0141                        addi    sp,sp,16
f0001568:       |   b669                        j       f00010f2 <ottf_machine_ecall_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:108
      break;
    default:
      generic_fault_handler();
f000156a:       \-> 2009                        jal     f000156c <ottf_breakpoint_handler>

f000156c <ottf_breakpoint_handler>:
generic_fault_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:63
static void generic_fault_handler(void) {
f000156c:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:64
  uint32_t mcause = ibex_mcause_read();
f000156e:       c606                    sw      ra,12(sp)
f0001570:       24ed                    jal     f000185a <ibex_mcause_read>
f0001572:       85aa                    mv      a1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:65
  ottf_generic_fault_print(exception_reason[mcause & kIbexExcMax], mcause);
f0001574:       897d                    andi    a0,a0,31
f0001576:       050a                    slli    a0,a0,0x2
f0001578:       00002617                auipc   a2,0x2
f000157c:       1f460613                addi    a2,a2,500 # f000376c <exception_reason>
f0001580:       9532                    add     a0,a0,a2
f0001582:       4108                    lw      a0,0(a0)
f0001584:       3f05                    jal     f00014b4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:66
  abort();
f0001586:       24f9                    jal     f0001854 <abort>

f0001588 <ottf_software_isr>:
ottf_software_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:141
OT_WEAK
OT_ALIAS("generic_fault_handler")
void ottf_user_ecall_handler(void);

OT_WEAK
void ottf_software_isr(void) {
f0001588:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:142
  ottf_generic_fault_print("Software IRQ", ibex_mcause_read());
f000158a:       c606                    sw      ra,12(sp)
f000158c:       24f9                    jal     f000185a <ibex_mcause_read>
f000158e:       85aa                    mv      a1,a0
f0001590:       00002517                auipc   a0,0x2
f0001594:       fc150513                addi    a0,a0,-63 # f0003551 <kExpectedHmacDigest+0x7b9>
f0001598:       3f31                    jal     f00014b4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:143
  abort();
f000159a:       2c6d                    jal     f0001854 <abort>

f000159c <ottf_timer_isr>:
ottf_timer_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:147
}

OT_WEAK
void ottf_timer_isr(void) {
f000159c:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:148
  ottf_generic_fault_print("Timer IRQ", ibex_mcause_read());
f000159e:       c606                    sw      ra,12(sp)
f00015a0:       2c6d                    jal     f000185a <ibex_mcause_read>
f00015a2:       85aa                    mv      a1,a0
f00015a4:       00002517                auipc   a0,0x2
f00015a8:       fba50513                addi    a0,a0,-70 # f000355e <kExpectedHmacDigest+0x7c6>
f00015ac:       3721                    jal     f00014b4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:149
  abort();
f00015ae:       245d                    jal     f0001854 <abort>

f00015b0 <ottf_flow_control_isr>:
ottf_flow_control_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:153
}

OT_WEAK
bool ottf_flow_control_isr(void) { return false; }
f00015b0:       4501                    li      a0,0
f00015b2:       8082                    ret

f00015b4 <ottf_external_isr>:
ottf_external_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:156

OT_WEAK
void ottf_external_isr(void) {
f00015b4:                    7179                       addi    sp,sp,-48
f00015b6:                    d606                       sw      ra,44(sp)
f00015b8:                    d422                       sw      s0,40(sp)
f00015ba:                    d226                       sw      s1,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:159
  const uint32_t kPlicTarget = kTopEarlgreyPlicTargetIbex0;
  dif_rv_plic_irq_id_t plic_irq_id;
  CHECK_DIF_OK(dif_rv_plic_irq_claim(&ottf_plic, kPlicTarget, &plic_irq_id));
f00015bc:                    f0001517           auipc   a0,0xf0001
f00015c0:                    ab450513           addi    a0,a0,-1356 # e0002070 <ottf_plic>
f00015c4:                    1010                       addi    a2,sp,32
f00015c6:                    4581                       li      a1,0
f00015c8:                    28fd                       jal     f00016c6 <dif_rv_plic_irq_claim>
f00015ca:                    00003497           auipc   s1,0x3
f00015ce:                    8f248493           addi    s1,s1,-1806 # f0003ebc <kDeviceLogBypassUartAddress>
f00015d2:          /-------- c91d                       beqz    a0,f0001608 <ottf_external_isr+0x54>
f00015d4:          |         842a                       mv      s0,a0
f00015d6:          |         4088                       lw      a0,0(s1)
f00015d8:          |     /-- c909                       beqz    a0,f00015ea <ottf_external_isr+0x36>
f00015da:          |     |   1000f517           auipc   a0,0x1000f
f00015de:          |     |   bf250513           addi    a0,a0,-1038 # 101cc <_non_volatile_scratch_end+0xffd01cc>
f00015e2:          |     |   4585                       li      a1,1
f00015e4:          |     |   8622                       mv      a2,s0
f00015e6:          |     |   2625                       jal     f000190e <base_log_internal_dv>
f00015e8:          |  /--|-- a821                       j       f0001600 <ottf_external_isr+0x4c>
f00015ea:          |  |  \-> 00002597           auipc   a1,0x2
f00015ee:          |  |      15a58593           addi    a1,a1,346 # f0003744 <kExpectedHmacDigest+0x9ac>
f00015f2:          |  |      0028                       addi    a0,sp,8
f00015f4:          |  |      4651                       li      a2,20
f00015f6:          |  |      3ef000ef           jal     ra,f00021e4 <memcpy>
f00015fa:          |  |      0028                       addi    a0,sp,8
f00015fc:          |  |      85a2                       mv      a1,s0
f00015fe:          |  |      24bd                       jal     f000186c <base_log_internal_core>
f0001600:          |  \----> 6531                       lui     a0,0xc
f0001602:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001606:          |         2245                       jal     f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:162

  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
f0001608:          \-------> 5502                       lw      a0,32(sp)
f000160a:                    050a                       slli    a0,a0,0x2
f000160c:                    00002597           auipc   a1,0x2
f0001610:                    28058593           addi    a1,a1,640 # f000388c <top_earlgrey_plic_interrupt_for_peripheral>
f0001614:                    952e                       add     a0,a0,a1
f0001616:                    4108                       lw      a0,0(a0)
f0001618:                    4585                       li      a1,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164

  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f000161a:       /----------- 04b51b63           bne     a0,a1,f0001670 <ottf_external_isr+0xbc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:165
      ottf_flow_control_isr()) {
f000161e:       |            3f49                       jal     f00015b0 <ottf_flow_control_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164
  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f0001620:       +----------- c921                       beqz    a0,f0001670 <ottf_external_isr+0xbc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:167
    // Complete the IRQ at PLIC.
    CHECK_DIF_OK(
f0001622:       |            5602                       lw      a2,32(sp)
f0001624:       |            f0001517           auipc   a0,0xf0001
f0001628:       |            a4c50513           addi    a0,a0,-1460 # e0002070 <ottf_plic>
f000162c:       |            4581                       li      a1,0
f000162e:       |            20c1                       jal     f00016ee <dif_rv_plic_irq_complete>
f0001630:       |  /-------- c91d                       beqz    a0,f0001666 <ottf_external_isr+0xb2>
f0001632:       |  |         842a                       mv      s0,a0
f0001634:       |  |         4088                       lw      a0,0(s1)
f0001636:       |  |     /-- c909                       beqz    a0,f0001648 <ottf_external_isr+0x94>
f0001638:       |  |     |   1000f517           auipc   a0,0x1000f
f000163c:       |  |     |   ba850513           addi    a0,a0,-1112 # 101e0 <_non_volatile_scratch_end+0xffd01e0>
f0001640:       |  |     |   4585                       li      a1,1
f0001642:       |  |     |   8622                       mv      a2,s0
f0001644:       |  |     |   24e9                       jal     f000190e <base_log_internal_dv>
f0001646:       |  |  /--|-- a821                       j       f000165e <ottf_external_isr+0xaa>
f0001648:       |  |  |  \-> 00002597           auipc   a1,0x2
f000164c:       |  |  |      11058593           addi    a1,a1,272 # f0003758 <kExpectedHmacDigest+0x9c0>
f0001650:       |  |  |      0028                       addi    a0,sp,8
f0001652:       |  |  |      4651                       li      a2,20
f0001654:       |  |  |      391000ef           jal     ra,f00021e4 <memcpy>
f0001658:       |  |  |      0028                       addi    a0,sp,8
f000165a:       |  |  |      85a2                       mv      a1,s0
f000165c:       |  |  |      2c01                       jal     f000186c <base_log_internal_core>
f000165e:       |  |  \----> 6531                       lui     a0,0xc
f0001660:       |  |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001664:       |  |         2289                       jal     f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:174
    return;
  }

  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
  abort();
}
f0001666:       |  \-------> 5492                       lw      s1,36(sp)
f0001668:       |            5422                       lw      s0,40(sp)
f000166a:       |            50b2                       lw      ra,44(sp)
f000166c:       |            6145                       addi    sp,sp,48
f000166e:       |            8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:172
  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
f0001670:       \----------> 22ed                       jal     f000185a <ibex_mcause_read>
f0001672:                    85aa                       mv      a1,a0
f0001674:                    00002517           auipc   a0,0x2
f0001678:                    f9a50513           addi    a0,a0,-102 # f000360e <kExpectedHmacDigest+0x876>
f000167c:                    3d25                       jal     f00014b4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:173
  abort();
f000167e:                    2ad9                       jal     f0001854 <abort>

f0001680 <ottf_external_nmi_handler>:
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:176

static void generic_internal_irq_handler(void) {
f0001680:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f0001682:       c606                    sw      ra,12(sp)
f0001684:       2ad9                    jal     f000185a <ibex_mcause_read>
f0001686:       85aa                    mv      a1,a0
f0001688:       00002517                auipc   a0,0x2
f000168c:       09a50513                addi    a0,a0,154 # f0003722 <kExpectedHmacDigest+0x98a>
f0001690:       3515                    jal     f00014b4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f0001692:       22c9                    jal     f0001854 <abort>

f0001694 <ottf_internal_isr>:
ottf_internal_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:190
OT_WEAK
OT_ALIAS("generic_internal_irq_handler")
void ottf_load_integrity_error_handler(void);

OT_WEAK
void ottf_internal_isr(void) {
f0001694:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:191
  uint32_t mcause = ibex_mcause_read();
f0001696:              c606                     sw      ra,12(sp)
f0001698:              22c9                     jal     f000185a <ibex_mcause_read>
f000169a:              800005b7                 lui     a1,0x80000
f000169e:              05fd                     addi    a1,a1,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:192
  switch ((ibex_internal_irq_t)(mcause)) {
f00016a0:          /-- 00b50863                 beq     a0,a1,f00016b0 <ottf_internal_isr+0x1c>
f00016a4:          |   5581                     li      a1,-32
f00016a6:       /--|-- 00b51863                 bne     a0,a1,f00016b6 <ottf_internal_isr+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:194
    case kIbexInternalIrqLoadInteg:
      ottf_load_integrity_error_handler();
f00016aa:       |  |   40b2                     lw      ra,12(sp)
f00016ac:       |  |   0141                     addi    sp,sp,16
f00016ae:       |  |   bfc9                     j       f0001680 <ottf_external_nmi_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:197
      break;
    case kIbexInternalIrqNmi:
      ottf_external_nmi_handler();
f00016b0:       |  \-> 40b2                     lw      ra,12(sp)
f00016b2:       |      0141                     addi    sp,sp,16
f00016b4:       |      b7f1                     j       f0001680 <ottf_external_nmi_handler>
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f00016b6:       \----> 2255                     jal     f000185a <ibex_mcause_read>
f00016b8:              85aa                     mv      a1,a0
f00016ba:              00002517                 auipc   a0,0x2
f00016be:              06850513                 addi    a0,a0,104 # f0003722 <kExpectedHmacDigest+0x98a>
f00016c2:              3bcd                     jal     f00014b4 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f00016c4:              2a41                     jal     f0001854 <abort>

f00016c6 <dif_rv_plic_irq_claim>:
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:245
}

dif_result_t dif_rv_plic_irq_claim(const dif_rv_plic_t *plic,
                                   dif_rv_plic_target_t target,
                                   dif_rv_plic_irq_id_t *claim_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
f00016c6:           00153693            seqz    a3,a0
f00016ca:           00b035b3            snez    a1,a1
f00016ce:           8dd5                        or      a1,a1,a3
f00016d0:           00163693            seqz    a3,a2
f00016d4:           8ecd                        or      a3,a3,a1
f00016d6:           458d                        li      a1,3
f00016d8:       /-- ea89                        bnez    a3,f00016ea <dif_rv_plic_irq_claim+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
      claim_data == NULL) {
    return kDifBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->base_addr, claim_complete_reg);
f00016da:       |   4108                        lw      a0,0(a0)
f00016dc:       |   002005b7            lui     a1,0x200
f00016e0:       |   0591                        addi    a1,a1,4
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00016e2:       |   952e                        add     a0,a0,a1
f00016e4:       |   4108                        lw      a0,0(a0)
f00016e6:       |   4581                        li      a1,0
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
f00016e8:       |   c208                        sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:254

  return kDifOk;
}
f00016ea:       \-> 852e                        mv      a0,a1
f00016ec:           8082                        ret

f00016ee <dif_rv_plic_irq_complete>:
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:259

dif_result_t dif_rv_plic_irq_complete(const dif_rv_plic_t *plic,
                                      dif_rv_plic_target_t target,
                                      dif_rv_plic_irq_id_t complete_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
f00016ee:           00153693            seqz    a3,a0
f00016f2:           00b035b3            snez    a1,a1
f00016f6:           8ecd                        or      a3,a3,a1
f00016f8:           458d                        li      a1,3
f00016fa:       /-- ea81                        bnez    a3,f000170a <dif_rv_plic_irq_complete+0x1c>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:266
  }

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->base_addr, claim_complete_reg, complete_data);
f00016fc:       |   4108                        lw      a0,0(a0)
f00016fe:       |   4581                        li      a1,0
f0001700:       |   002006b7            lui     a3,0x200
f0001704:       |   0691                        addi    a3,a3,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0001706:       |   9536                        add     a0,a0,a3
f0001708:       |   c110                        sw      a2,0(a0)
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:269

  return kDifOk;
}
f000170a:       \-> 852e                        mv      a0,a1
f000170c:           8082                        ret

f000170e <rand_testutils_init>:
rand_testutils_init():
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:31
/**
 * The default timeout in usecs for fetching data from the entropy source.
 */
static const uint32_t kEntropyFetchTimeoutMicros = 100000;

rand_testutils_rng_t rand_testutils_init(dif_rv_core_ibex_t *rv_core_ibex) {
f000170e:                 1101                  addi    sp,sp,-32
f0001710:                 ce06                  sw      ra,28(sp)
f0001712:                 cc22                  sw      s0,24(sp)
f0001714:                 ca26                  sw      s1,20(sp)
f0001716:                 84ae                  mv      s1,a1
f0001718:                 842a                  mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:32
  CHECK(rv_core_ibex != NULL);
f000171a:       /-------- ed85                  bnez    a1,f0001752 <rand_testutils_init+0x44>
f000171c:       |         00002517              auipc   a0,0x2
f0001720:       |         7a050513              addi    a0,a0,1952 # f0003ebc <kDeviceLogBypassUartAddress>
f0001724:       |         4108                  lw      a0,0(a0)
f0001726:       |     /-- c901                  beqz    a0,f0001736 <rand_testutils_init+0x28>
f0001728:       |     |   1000f517              auipc   a0,0x1000f
f000172c:       |     |   acc50513              addi    a0,a0,-1332 # 101f4 <_non_volatile_scratch_end+0xffd01f4>
f0001730:       |     |   4581                  li      a1,0
f0001732:       |     |   2af1                  jal     f000190e <base_log_internal_dv>
f0001734:       |  /--|-- a819                  j       f000174a <rand_testutils_init+0x3c>
f0001736:       |  |  \-> 00002597              auipc   a1,0x2
f000173a:       |  |      14258593              addi    a1,a1,322 # f0003878 <exception_reason+0x10c>
f000173e:       |  |      850a                  mv      a0,sp
f0001740:       |  |      4651                  li      a2,20
f0001742:       |  |      2a3000ef              jal     ra,f00021e4 <memcpy>
f0001746:       |  |      850a                  mv      a0,sp
f0001748:       |  |      2215                  jal     f000186c <base_log_internal_core>
f000174a:       |  \----> 6531                  lui     a0,0xc
f000174c:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001750:       |         2899                  jal     f00017a6 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  // For the simulation platforms (DV and Verilator), the LFSR reseed frequency
  // is arbitrarily set to 255. The test may choose to update this value if
  // needed.
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f0001752:       \-------> c004                  sw      s1,0(s0)
f0001754:                 6561                  lui     a0,0x18
f0001756:                 6a050513              addi    a0,a0,1696 # 186a0 <test_status_set.kLogFields.2+0x845c>
f000175a:                 c048                  sw      a0,4(s0)
f000175c:                 deadc537              lui     a0,0xdeadc
f0001760:                 eef50513              addi    a0,a0,-273 # deadbeef <_non_volatile_scratch_end+0xeea9beef>
f0001764:                 c408                  sw      a0,8(s0)
f0001766:                 80000537              lui     a0,0x80000
f000176a:                 05750513              addi    a0,a0,87 # 80000057 <_non_volatile_scratch_end+0x8ffc0057>
f000176e:                 c448                  sw      a0,12(s0)
f0001770:                 10000513              li      a0,256
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
      .polynomial_coefficients = kLfsrPolynomialCoefficients,
      .reseed_frequency = 256,
      .op_counter = UINT32_MAX};
  // For non-runtime-sensitive simulations (for example, using FPGA or the
  // debug board), always fetch random data from the hardware.
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0001774:                 00002597              auipc   a1,0x2
f0001778:                 72458593              addi    a1,a1,1828 # f0003e98 <kDeviceType>
f000177c:                 418c                  lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f000177e:                 c808                  sw      a0,16(s0)
f0001780:                 557d                  li      a0,-1
f0001782:                 4609                  li      a2,2
f0001784:                 c848                  sw      a0,20(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0001786:             /-- 00c5e463              bltu    a1,a2,f000178e <rand_testutils_init+0x80>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:46
    ctx.reseed_frequency = 0;
f000178a:             |   00042823              sw      zero,16(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:48
  }
  return ctx;
f000178e:             \-> 44d2                  lw      s1,20(sp)
f0001790:                 4462                  lw      s0,24(sp)
f0001792:                 40f2                  lw      ra,28(sp)
f0001794:                 6105                  addi    sp,sp,32
f0001796:                 8082                  ret

f0001798 <dif_rv_core_ibex_init>:
dif_rv_core_ibex_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:19
#include "rv_core_ibex_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_core_ibex_init(mmio_region_t base_addr,
                                   dif_rv_core_ibex_t *rv_core_ibex) {
  if (rv_core_ibex == NULL) {
f0001798:       /----- c581                     beqz    a1,f00017a0 <dif_rv_core_ibex_init+0x8>
f000179a:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:23
    return kDifBadArg;
  }

  rv_core_ibex->base_addr = base_addr;
f000179c:       |      c188                     sw      a0,0(a1)
f000179e:       |  /-- a011                     j       f00017a2 <dif_rv_core_ibex_init+0xa>
f00017a0:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:26

  return kDifOk;
}
f00017a2:          \-> 8532                     mv      a0,a2
f00017a4:              8082                     ret

f00017a6 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
f00017a6:                    1101                       addi    sp,sp,-32
f00017a8:                    ce06                       sw      ra,28(sp)
f00017aa:                    65b1                       lui     a1,0xc
f00017ac:                    aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
f00017b0:             /----- 02b50063           beq     a0,a1,f00017d0 <test_status_set+0x2a>
f00017b4:             |      65a5                       lui     a1,0x9
f00017b6:             |      05b5                       addi    a1,a1,13
f00017b8:          /--|----- 02b50d63           beq     a0,a1,f00017f2 <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f00017bc:          |  |      00002597           auipc   a1,0x2
f00017c0:          |  |      6fc58593           addi    a1,a1,1788 # f0003eb8 <kDeviceTestStatusAddress>
f00017c4:          |  |      418c                       lw      a1,0(a1)
f00017c6:          |  |  /-- c191                       beqz    a1,f00017ca <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00017c8:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
f00017ca:          |  |  \-> 40f2                       lw      ra,28(sp)
f00017cc:          |  |      6105                       addi    sp,sp,32
f00017ce:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f00017d0:          |  \----> 00002517           auipc   a0,0x2
f00017d4:          |         6ec50513           addi    a0,a0,1772 # f0003ebc <kDeviceLogBypassUartAddress>
f00017d8:          |         4108                       lw      a0,0(a0)
f00017da:          |  /----- ed0d                       bnez    a0,f0001814 <test_status_set+0x6e>
f00017dc:          |  |      00002597           auipc   a1,0x2
f00017e0:          |  |      3e858593           addi    a1,a1,1000 # f0003bc4 <top_earlgrey_plic_interrupt_for_peripheral+0x338>
f00017e4:          |  |      0028                       addi    a0,sp,8
f00017e6:          |  |      4651                       li      a2,20
f00017e8:          |  |      1fd000ef           jal     ra,f00021e4 <memcpy>
f00017ec:          |  |      0028                       addi    a0,sp,8
f00017ee:          |  |      28bd                       jal     f000186c <base_log_internal_core>
f00017f0:          |  |  /-- a805                       j       f0001820 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f00017f2:          \--|--|-> 00002517           auipc   a0,0x2
f00017f6:             |  |   6ca50513           addi    a0,a0,1738 # f0003ebc <kDeviceLogBypassUartAddress>
f00017fa:             |  |   4108                       lw      a0,0(a0)
f00017fc:       /-----|--|-- ed05                       bnez    a0,f0001834 <test_status_set+0x8e>
f00017fe:       |     |  |   00002597           auipc   a1,0x2
f0001802:       |     |  |   3b258593           addi    a1,a1,946 # f0003bb0 <top_earlgrey_plic_interrupt_for_peripheral+0x324>
f0001806:       |     |  |   0028                       addi    a0,sp,8
f0001808:       |     |  |   4651                       li      a2,20
f000180a:       |     |  |   1db000ef           jal     ra,f00021e4 <memcpy>
f000180e:       |     |  |   0028                       addi    a0,sp,8
f0001810:       |     |  |   28b1                       jal     f000186c <base_log_internal_core>
f0001812:       |  /--|--|-- a03d                       j       f0001840 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0001814:       |  |  \--|-> 1000f517           auipc   a0,0x1000f
f0001818:       |  |     |   a3050513           addi    a0,a0,-1488 # 10244 <_non_volatile_scratch_end+0xffd0244>
f000181c:       |  |     |   4581                       li      a1,0
f000181e:       |  |     |   28c5                       jal     f000190e <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001820:       |  |     \-> 00002517           auipc   a0,0x2
f0001824:       |  |         69850513           addi    a0,a0,1688 # f0003eb8 <kDeviceTestStatusAddress>
f0001828:       |  |         4108                       lw      a0,0(a0)
f000182a:       |  |  /----- c505                       beqz    a0,f0001852 <test_status_set+0xac>
f000182c:       |  |  |      65b1                       lui     a1,0xc
f000182e:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001832:       |  |  |  /-- a839                       j       f0001850 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0001834:       \--|--|--|-> 1000f517           auipc   a0,0x1000f
f0001838:          |  |  |   9fc50513           addi    a0,a0,-1540 # 10230 <_non_volatile_scratch_end+0xffd0230>
f000183c:          |  |  |   4581                       li      a1,0
f000183e:          |  |  |   28c1                       jal     f000190e <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001840:          \--|--|-> 00002517           auipc   a0,0x2
f0001844:             |  |   67850513           addi    a0,a0,1656 # f0003eb8 <kDeviceTestStatusAddress>
f0001848:             |  |   4108                       lw      a0,0(a0)
f000184a:             +--|-- c501                       beqz    a0,f0001852 <test_status_set+0xac>
f000184c:             |  |   65a5                       lui     a1,0x9
f000184e:             |  |   05b5                       addi    a1,a1,13
f0001850:             |  \-> c10c                       sw      a1,0(a0)
f0001852:             \----> 2009                       jal     f0001854 <abort>

f0001854 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
f0001854:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
f0001858:       \-- bff5                        j       f0001854 <abort>

f000185a <ibex_mcause_read>:
ibex_mcause_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:11

#include "sw/device/lib/base/csr.h"

uint32_t ibex_mcause_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MCAUSE, &mtval);
f000185a:       34202573                csrr    a0,mcause
/proc/self/cwd/sw/device/lib/runtime/ibex.c:12
  return mtval;
f000185e:       8082                    ret

f0001860 <ibex_mtval_read>:
ibex_mtval_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:17
}

uint32_t ibex_mtval_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MTVAL, &mtval);
f0001860:       34302573                csrr    a0,mtval
/proc/self/cwd/sw/device/lib/runtime/ibex.c:18
  return mtval;
f0001864:       8082                    ret

f0001866 <ibex_mepc_read>:
ibex_mepc_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:23
}

uint32_t ibex_mepc_read(void) {
  uint32_t mepc;
  CSR_READ(CSR_REG_MEPC, &mepc);
f0001866:       34102573                csrr    a0,mepc
/proc/self/cwd/sw/device/lib/runtime/ibex.c:24
  return mepc;
f000186a:       8082                    ret

f000186c <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
f000186c:              7179                     addi    sp,sp,-48
f000186e:              c606                     sw      ra,12(sp)
f0001870:              c422                     sw      s0,8(sp)
f0001872:              c226                     sw      s1,4(sp)
f0001874:              842a                     mv      s0,a0
f0001876:              d646                     sw      a7,44(sp)
f0001878:              d442                     sw      a6,40(sp)
f000187a:              d23e                     sw      a5,36(sp)
f000187c:              d03a                     sw      a4,32(sp)
f000187e:              ce36                     sw      a3,28(sp)
f0001880:              cc32                     sw      a2,24(sp)
f0001882:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
f0001884:              4148                     lw      a0,4(a0)
f0001886:              800005b7                 lui     a1,0x80000
f000188a:              fff58613                 addi    a2,a1,-1 # 7fffffff <_non_volatile_scratch_end+0x8ffbffff>
f000188e:              4581                     li      a1,0
f0001890:              23f000ef                 jal     ra,f00022ce <memchr>
f0001894:              4054                     lw      a3,4(s0)
f0001896:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
f000189a:              02f00593                 li      a1,47
f000189e:              8536                     mv      a0,a3
f00018a0:              2dd000ef                 jal     ra,f000237c <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
f00018a4:       /----- c501                     beqz    a0,f00018ac <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
f00018a6:       |      00150693                 addi    a3,a0,1
f00018aa:       |  /-- a011                     j       f00018ae <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
f00018ac:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f00018ae:          \-> 4008                     lw      a0,0(s0)
f00018b0:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
f00018b2:       /----- 00a5ea63                 bltu    a1,a0,f00018c6 <base_log_internal_core+0x5a>
f00018b6:       |      050a                     slli    a0,a0,0x2
f00018b8:       |      00002597                 auipc   a1,0x2
f00018bc:       |      33c58593                 addi    a1,a1,828 # f0003bf4 <top_earlgrey_plic_interrupt_for_peripheral+0x368>
f00018c0:       |      952e                     add     a0,a0,a1
f00018c2:       |      410c                     lw      a1,0(a0)
f00018c4:       |  /-- a029                     j       f00018ce <base_log_internal_core+0x62>
f00018c6:       \--|-> 00002597                 auipc   a1,0x2
f00018ca:          |   32a58593                 addi    a1,a1,810 # f0003bf0 <top_earlgrey_plic_interrupt_for_peripheral+0x364>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
f00018ce:          \-> f0000497                 auipc   s1,0xf0000
f00018d2:              7a648493                 addi    s1,s1,1958 # e0002074 <base_log_internal_core.global_log_counter>
f00018d6:              0004d603                 lhu     a2,0(s1)
f00018da:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f00018dc:              00002517                 auipc   a0,0x2
f00018e0:              2fc50513                 addi    a0,a0,764 # f0003bd8 <top_earlgrey_plic_interrupt_for_peripheral+0x34c>
f00018e4:              2865                     jal     f000199c <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
f00018e6:              00049503                 lh      a0,0(s1)
f00018ea:              0505                     addi    a0,a0,1
f00018ec:              00a49023                 sh      a0,0(s1)
f00018f0:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
f00018f2:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
f00018f4:              4808                     lw      a0,16(s0)
f00018f6:              084c                     addi    a1,sp,20
f00018f8:              28d9                     jal     f00019ce <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
f00018fa:              00002517                 auipc   a0,0x2
f00018fe:              2ed50513                 addi    a0,a0,749 # f0003be7 <top_earlgrey_plic_interrupt_for_peripheral+0x35b>
f0001902:              2869                     jal     f000199c <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
f0001904:              4492                     lw      s1,4(sp)
f0001906:              4422                     lw      s0,8(sp)
f0001908:              40b2                     lw      ra,12(sp)
f000190a:              6145                     addi    sp,sp,48
f000190c:              8082                     ret

f000190e <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
f000190e:              1101                     addi    sp,sp,-32
f0001910:              ce46                     sw      a7,28(sp)
f0001912:              cc42                     sw      a6,24(sp)
f0001914:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
f0001916:              00002797                 auipc   a5,0x2
f000191a:              5a678793                 addi    a5,a5,1446 # f0003ebc <kDeviceLogBypassUartAddress>
f000191e:              439c                     lw      a5,0(a5)
f0001920:              c83a                     sw      a4,16(sp)
f0001922:              c636                     sw      a3,12(sp)
f0001924:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001926:              c388                     sw      a0,0(a5)
f0001928:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
f000192a:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f000192c:       /----- c989                     beqz    a1,f000193e <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
f000192e:       |  /-> 4512                     lw      a0,4(sp)
f0001930:       |  |   00450613                 addi    a2,a0,4
f0001934:       |  |   c232                     sw      a2,4(sp)
f0001936:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001938:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000193a:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
f000193c:       |  \-- f9ed                     bnez    a1,f000192e <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
f000193e:       \----> 6105                     addi    sp,sp,32
f0001940:              8082                     ret

f0001942 <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
f0001942:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
f0001944:       8082                    ret

f0001946 <base_uart_stdout>:
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:79
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
f0001946:       f0000597                auipc   a1,0xf0000
f000194a:       73258593                addi    a1,a1,1842 # e0002078 <base_stdout>
base_set_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:66
  base_stdout = out;
f000194e:       c188                    sw      a0,0(a1)
f0001950:       00000517                auipc   a0,0x0
f0001954:       00c50513                addi    a0,a0,12 # f000195c <base_dev_uart>
f0001958:       c1c8                    sw      a0,4(a1)
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:82
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
f000195a:       8082                    ret

f000195c <base_dev_uart>:
base_dev_uart():
/proc/self/cwd/sw/device/lib/runtime/print.c:69
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
f000195c:                 1101                  addi    sp,sp,-32
f000195e:                 ce06                  sw      ra,28(sp)
f0001960:                 cc22                  sw      s0,24(sp)
f0001962:                 ca26                  sw      s1,20(sp)
f0001964:                 c84a                  sw      s2,16(sp)
f0001966:                 c64e                  sw      s3,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001968:       /-------- c20d                  beqz    a2,f000198a <base_dev_uart+0x2e>
f000196a:       |         8432                  mv      s0,a2
f000196c:       |         892e                  mv      s2,a1
f000196e:       |         89aa                  mv      s3,a0
f0001970:       |         4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:72
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifOk) {
f0001972:       |  /----> 00990533              add     a0,s2,s1
f0001976:       |  |      00054583              lbu     a1,0(a0)
f000197a:       |  |      854e                  mv      a0,s3
f000197c:       |  |      2f59                  jal     f0002112 <dif_uart_byte_send_polled>
f000197e:       |  |  /-- e519                  bnez    a0,f000198c <base_dev_uart+0x30>
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001980:       |  |  |   0485                  addi    s1,s1,1
f0001982:       |  \--|-- fe9418e3              bne     s0,s1,f0001972 <base_dev_uart+0x16>
f0001986:       |     |   84a2                  mv      s1,s0
f0001988:       |     +-- a011                  j       f000198c <base_dev_uart+0x30>
f000198a:       \-----|-> 4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:77
}
f000198c:             \-> 8526                  mv      a0,s1
f000198e:                 49b2                  lw      s3,12(sp)
f0001990:                 4942                  lw      s2,16(sp)
f0001992:                 44d2                  lw      s1,20(sp)
f0001994:                 4462                  lw      s0,24(sp)
f0001996:                 40f2                  lw      ra,28(sp)
f0001998:                 6105                  addi    sp,sp,32
f000199a:                 8082                  ret

f000199c <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84

size_t base_printf(const char *format, ...) {
f000199c:       7179                    addi    sp,sp,-48
f000199e:       c606                    sw      ra,12(sp)
f00019a0:       d646                    sw      a7,44(sp)
f00019a2:       d442                    sw      a6,40(sp)
f00019a4:       d23e                    sw      a5,36(sp)
f00019a6:       d03a                    sw      a4,32(sp)
f00019a8:       ce36                    sw      a3,28(sp)
f00019aa:       cc32                    sw      a2,24(sp)
f00019ac:       ca2e                    sw      a1,20(sp)
f00019ae:       f0000597                auipc   a1,0xf0000
f00019b2:       6ca58593                addi    a1,a1,1738 # e0002078 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
f00019b6:       4190                    lw      a2,0(a1)
f00019b8:       41cc                    lw      a1,4(a1)
f00019ba:       872a                    mv      a4,a0
f00019bc:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
f00019be:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f00019c0:       0854                    addi    a3,sp,20
f00019c2:       8532                    mv      a0,a2
f00019c4:       863a                    mv      a2,a4
f00019c6:       200d                    jal     f00019e8 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
f00019c8:       40b2                    lw      ra,12(sp)
f00019ca:       6145                    addi    sp,sp,48
f00019cc:       8082                    ret

f00019ce <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
f00019ce:       f0000697                auipc   a3,0xf0000
f00019d2:       6aa68693                addi    a3,a3,1706 # e0002078 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f00019d6:       4290                    lw      a2,0(a3)
f00019d8:       42d4                    lw      a3,4(a3)
f00019da:       872e                    mv      a4,a1
f00019dc:       87aa                    mv      a5,a0
f00019de:       8532                    mv      a0,a2
f00019e0:       85b6                    mv      a1,a3
f00019e2:       863e                    mv      a2,a5
f00019e4:       86ba                    mv      a3,a4
f00019e6:       a009                    j       f00019e8 <base_vfprintf>

f00019e8 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
f00019e8:                                                                    715d                       addi    sp,sp,-80
f00019ea:                                                                    c686                       sw      ra,76(sp)
f00019ec:                                                                    c4a2                       sw      s0,72(sp)
f00019ee:                                                                    c2a6                       sw      s1,68(sp)
f00019f0:                                                                    c0ca                       sw      s2,64(sp)
f00019f2:                                                                    de4e                       sw      s3,60(sp)
f00019f4:                                                                    dc52                       sw      s4,56(sp)
f00019f6:                                                                    da56                       sw      s5,52(sp)
f00019f8:                                                                    d85a                       sw      s6,48(sp)
f00019fa:                                                                    d65e                       sw      s7,44(sp)
f00019fc:                                                                    d462                       sw      s8,40(sp)
f00019fe:                                                                    d266                       sw      s9,36(sp)
f0001a00:                                                                    d06a                       sw      s10,32(sp)
f0001a02:                                                                    ce6e                       sw      s11,28(sp)
f0001a04:                                                                    8cb2                       mv      s9,a2
f0001a06:                                                                    892a                       mv      s2,a0
f0001a08:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
f0001a0a:                                                                /-- c199                       beqz    a1,f0001a10 <base_vfprintf+0x28>
f0001a0c:                                                                |   89ae                       mv      s3,a1
f0001a0e:                                                             /--|-- a029                       j       f0001a18 <base_vfprintf+0x30>
f0001a10:                                                             |  \-> 00000997           auipc   s3,0x0
f0001a14:                                                             |      f3298993           addi    s3,s3,-206 # f0001942 <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
f0001a18:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
f0001a1a:                                                                    000cc503           lbu     a0,0(s9)
f0001a1e:       /----------------------------------------------------------- 42050563           beqz    a0,f0001e48 <base_vfprintf+0x460>
f0001a22:       |                                                            4a81                       li      s5,0
f0001a24:       |                                                            02500c13           li      s8,37
f0001a28:       |                                                            4d25                       li      s10,9
f0001a2a:       |                                                            4a29                       li      s4,10
f0001a2c:       |                                                            658d                       lui     a1,0x3
f0001a2e:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_manifest_code_end+0x86>
f0001a32:       |                                                            c02e                       sw      a1,0(sp)
f0001a34:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
f0001a36:       |        |                                               /-> 0ff57413           andi    s0,a0,255
f0001a3a:       |        |                                            /--|-- 01840963           beq     s0,s8,f0001a4c <base_vfprintf+0x64>
f0001a3e:       |        |                                            +--|-- c419                       beqz    s0,f0001a4c <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
f0001a40:       |        |                                            |  |   009c8533           add     a0,s9,s1
f0001a44:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
f0001a48:       |        |                                            |  |   0485                       addi    s1,s1,1
f0001a4a:       |        |                                            |  \-- b7f5                       j       f0001a36 <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
f0001a4c:       |        |                                            \--/-X c491                       beqz    s1,f0001a58 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
f0001a4e:       |        |                                               |   854a                       mv      a0,s2
f0001a50:       |        |                                               |   85e6                       mv      a1,s9
f0001a52:       |        |                                               |   8626                       mv      a2,s1
f0001a54:       |        |                                               |   9982                       jalr    s3
f0001a56:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
f0001a58:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,f0001e4a <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
f0001a5c:       |  |     |                                                   009c8533           add     a0,s9,s1
f0001a60:       |  |     |                                                   00154603           lbu     a2,1(a0)
f0001a64:       |  |     |                                                   02100713           li      a4,33
f0001a68:       |  |     |                                            /----- 00e61863           bne     a2,a4,f0001a78 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001a6c:       |  |     |                                            |      00254583           lbu     a1,2(a0)
f0001a70:       |  |     |                                            |      00250693           addi    a3,a0,2
f0001a74:       |  |     |                                            |      4b05                       li      s6,1
f0001a76:       |  |     |                                            |  /-- a029                       j       f0001a80 <base_vfprintf+0x98>
f0001a78:       |  |     |                                            \--|-> 4b01                       li      s6,0
f0001a7a:       |  |     |                                               |   00150693           addi    a3,a0,1
f0001a7e:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001a80:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,f0001e36 <base_vfprintf+0x44e>
f0001a84:       |  |  |  |                                                   4481                       li      s1,0
f0001a86:       |  |  |  |                                                   4b81                       li      s7,0
f0001a88:       |  |  |  |                                                   4501                       li      a0,0
f0001a8a:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
f0001a8e:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
f0001a92:       |  |  |  |                                                   00168c93           addi    s9,a3,1
f0001a96:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
f0001a9a:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001a9e:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
f0001aa2:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,f0001ad8 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
f0001aa6:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
f0001aaa:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,f0001ac0 <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
f0001aac:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
f0001ab0:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
f0001ab2:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001ab6:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001aba:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
f0001abc:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,f0001a96 <base_vfprintf+0xae>
f0001abe:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       f0001e36 <base_vfprintf+0x44e>
f0001ac0:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
f0001ac4:       |  |  |  |                                   |     |  |      03000613           li      a2,48
f0001ac8:       |  |  |  |                                   |     |  |      02000513           li      a0,32
f0001acc:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,f0001aac <base_vfprintf+0xc4>
f0001ad0:       |  |  |  |                                   |     |         03000513           li      a0,48
f0001ad4:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
f0001ad6:       |  |  |  |                                   |     \-------- b7c5                       j       f0001ab6 <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
f0001ad8:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,f0001ae0 <base_vfprintf+0xf8>
f0001ada:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,f0001ae8 <base_vfprintf+0x100>
f0001ade:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       f0001e6a <base_vfprintf+0x482>
f0001ae0:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
f0001ae4:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,f0001e6a <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001ae8:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
f0001aec:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,f0001b3e <base_vfprintf+0x156>
f0001af0:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
f0001af2:       |  |  |  |  |                                         |      00002597           auipc   a1,0x2
f0001af6:       |  |  |  |  |                                         |      11258593           addi    a1,a1,274 # f0003c04 <top_earlgrey_plic_interrupt_for_peripheral+0x378>
f0001afa:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
f0001afc:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
f0001afe:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
f0001b00:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,f0001db8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
f0001b04:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
f0001b06:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
f0001b0a:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
f0001b0c:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
f0001b10:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,f0001b28 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
f0001b14:       |  |  |  |  |  |                                      |  |   00002597           auipc   a1,0x2
f0001b18:       |  |  |  |  |  |                                      |  |   18758593           addi    a1,a1,391 # f0003c9b <top_earlgrey_plic_interrupt_for_peripheral+0x40f>
f0001b1c:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
f0001b1e:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
f0001b20:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
f0001b22:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
f0001b24:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001b28:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
f0001b2c:       |  |  |  |  |  |                                      |      00002817           auipc   a6,0x2
f0001b30:       |  |  |  |  |  |                                      |      18280813           addi    a6,a6,386 # f0003cae <kDigitsLow>
f0001b34:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
f0001b36:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
f0001b38:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
f0001b3a:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
f0001b3c:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       f0001d84 <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001b3e:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
f0001b42:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,f0001b7c <base_vfprintf+0x194>
f0001b46:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,f0001db8 <base_vfprintf+0x3d0>
f0001b4a:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,f0001db8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
f0001b4e:       |  |  |  |  |  |        |                                |   00002597           auipc   a1,0x2
f0001b52:       |  |  |  |  |  |        |                                |   14b58593           addi    a1,a1,331 # f0003c99 <top_earlgrey_plic_interrupt_for_peripheral+0x40d>
f0001b56:       |  |  |  |  |  |        |                             /--|-- a851                       j       f0001bea <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
f0001b58:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,f0001b7c <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
f0001b5c:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
f0001b5e:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
f0001b62:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001b64:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
f0001b66:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
f0001b6a:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001b6c:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001b6e:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
f0001b72:       |  |  |  |  |  |        |                             |  |   00002897           auipc   a7,0x2
f0001b76:       |  |  |  |  |  |        |                             |  |   16988893           addi    a7,a7,361 # f0003cdb <kDigitsHigh>
f0001b7a:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       f0001d5e <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
f0001b7c:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
f0001b7e:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
f0001b82:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
f0001b84:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
f0001b86:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
f0001b8a:       |  |  |  |  |  |        |           |                 |      00002817           auipc   a6,0x2
f0001b8e:       |  |  |  |  |  |        |           |                 |      15180813           addi    a6,a6,337 # f0003cdb <kDigitsHigh>
f0001b92:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       f0001d7e <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
f0001b94:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,f0001db8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
f0001b98:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
f0001b9a:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
f0001b9e:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f0001ba0:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
f0001ba2:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
f0001ba6:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f0001ba8:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001baa:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
f0001bae:       |  |  |  |  |  |        |        |  |                 |      00002897           auipc   a7,0x2
f0001bb2:       |  |  |  |  |  |        |        |  |                 |      12d88893           addi    a7,a7,301 # f0003cdb <kDigitsHigh>
f0001bb6:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       f0001dac <base_vfprintf+0x3c4>
f0001bb8:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
f0001bba:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
f0001bbe:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
f0001bc0:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
f0001bc2:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,f0001dd2 <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
f0001bc6:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,f0001e2a <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
f0001bca:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00002597           auipc   a1,0x2
f0001bce:       |  |  |  |  |  |  |     |  |  |  |  |                 |      0d658593           addi    a1,a1,214 # f0003ca0 <top_earlgrey_plic_interrupt_for_peripheral+0x414>
f0001bd2:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
f0001bd4:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       f0001dc2 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
f0001bd6:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,f0001db8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
f0001bda:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
f0001bdc:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
f0001be0:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
f0001be2:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
f0001be4:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
f0001be8:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
f0001bea:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
f0001bec:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       f0001dc2 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
f0001bee:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,f0001db8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
f0001bf2:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
f0001bf4:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
f0001bf8:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
f0001bfa:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
f0001bfc:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
f0001c00:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00002817           auipc   a6,0x2
f0001c04:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ae80813           addi    a6,a6,174 # f0003cae <kDigitsLow>
f0001c08:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
f0001c0a:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       f0001d80 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
f0001c0c:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,f0001db8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001c10:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00002597           auipc   a1,0x2
f0001c14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     08d58593           addi    a1,a1,141 # f0003c9d <top_earlgrey_plic_interrupt_for_peripheral+0x411>
f0001c18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
f0001c1a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001c1c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
f0001c1e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
f0001c20:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
f0001c24:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
f0001c26:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001c28:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
f0001c2c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00002817           auipc   a6,0x2
f0001c30:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     08280813           addi    a6,a6,130 # f0003cae <kDigitsLow>
f0001c34:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
f0001c36:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
f0001c3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
f0001c3c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001c3e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
f0001c40:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     f0001f5a <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
f0001c42:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
f0001c46:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       f0001dc8 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
f0001c48:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
f0001c4a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
f0001c4e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
f0001c50:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
f0001c52:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
f0001c54:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
f0001c58:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
f0001c5c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001c5e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
f0001c60:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
f0001c62:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
f0001c66:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     f0001fd8 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
f0001c68:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001c6a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001c6c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
f0001c70:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
f0001c74:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001c76:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
f0001c78:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,f0001c70 <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001c7a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
f0001c7e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001c82:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02758593           addi    a1,a1,39 # f0003ca5 <top_earlgrey_plic_interrupt_for_peripheral+0x419>
f0001c86:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001c88:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001c8a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001c8c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001c8e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
f0001c92:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001c94:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001c96:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
f0001c9a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001c9e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00c58593           addi    a1,a1,12 # f0003ca6 <top_earlgrey_plic_interrupt_for_peripheral+0x41a>
f0001ca2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001ca4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
f0001ca6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001ca8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
f0001caa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001cae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fe658593           addi    a1,a1,-26 # f0003c90 <top_earlgrey_plic_interrupt_for_peripheral+0x404>
f0001cb2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
f0001cb4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001cb6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001cb8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
f0001cbc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,f0001de2 <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
f0001cc0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002597           auipc   a1,0x2
f0001cc4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               fe858593           addi    a1,a1,-24 # f0003ca8 <top_earlgrey_plic_interrupt_for_peripheral+0x41c>
f0001cc8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001cca:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001ccc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001cce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001cd2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
f0001cd4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
f0001cd6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001cd8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001cda:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001cdc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001cde:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002817           auipc   a6,0x2
f0001ce2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               fd080813           addi    a6,a6,-48 # f0003cae <kDigitsLow>
f0001ce6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
f0001ce8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001cea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
f0001cec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
f0001cee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
f0001cf0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     f0001f5a <write_digits>
f0001cf2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
f0001cf4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002597           auipc   a1,0x2
f0001cf8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               fb658593           addi    a1,a1,-74 # f0003caa <top_earlgrey_plic_interrupt_for_peripheral+0x41e>
f0001cfc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001cfe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001d00:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001d02:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
f0001d04:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       f0001dfc <base_vfprintf+0x414>
f0001d06:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
f0001d08:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
f0001d0c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
f0001d0e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,f0001e14 <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
f0001d12:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f0001d14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
f0001d18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0001d1a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
f0001d1c:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       f0001dc2 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
f0001d1e:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,f0001db8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
f0001d22:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
f0001d24:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
f0001d28:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0001d2a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001d2c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
f0001d30:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00002817           auipc   a6,0x2
f0001d34:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         f7e80813           addi    a6,a6,-130 # f0003cae <kDigitsLow>
f0001d38:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
f0001d3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       f0001d80 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
f0001d3c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,f0001d68 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
f0001d40:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
f0001d42:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
f0001d46:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0001d48:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
f0001d4a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
f0001d4e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0001d50:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001d52:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
f0001d56:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00002897           auipc   a7,0x2
f0001d5a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   f5888893           addi    a7,a7,-168 # f0003cae <kDigitsLow>
f0001d5e:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
f0001d60:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
f0001d62:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
f0001d64:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
f0001d66:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       f0001db4 <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
f0001d68:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
f0001d6a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
f0001d6e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
f0001d70:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
f0001d72:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
f0001d76:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00002817           auipc   a6,0x2
f0001d7a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      f3880813           addi    a6,a6,-200 # f0003cae <kDigitsLow>
f0001d7e:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
f0001d80:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
f0001d82:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
f0001d84:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
f0001d86:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     f0001f5a <write_digits>
f0001d88:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       f0001dc6 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
f0001d8a:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,f0001db8 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
f0001d8e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
f0001d90:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
f0001d94:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f0001d96:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
f0001d98:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
f0001d9c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f0001d9e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001da0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
f0001da4:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00002897           auipc   a7,0x2
f0001da8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   f0a88893           addi    a7,a7,-246 # f0003cae <kDigitsLow>
f0001dac:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
f0001dae:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
f0001db0:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
f0001db2:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
f0001db4:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     f0001e76 <hex_dump>
f0001db6:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       f0001dc6 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
f0001db8:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00002597           auipc   a1,0x2
f0001dbc:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   f3358593           addi    a1,a1,-205 # f0003ceb <kUnknownSpec>
f0001dc0:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
f0001dc2:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
f0001dc4:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
f0001dc6:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
f0001dc8:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
f0001dcc:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,f0001a34 <base_vfprintf+0x4c>
f0001dd0:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       f0001e4a <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
f0001dd2:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
f0001dd6:       |  |  |     |     |  |                 |  |  |  |  |         00002817           auipc   a6,0x2
f0001dda:       |  |  |     |     |  |                 |  |  |  |  |         ed880813           addi    a6,a6,-296 # f0003cae <kDigitsLow>
f0001dde:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
f0001de0:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       f0001d80 <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001de2:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
f0001de4:       |  |  |     |     |  |                    |     |  |         00002817           auipc   a6,0x2
f0001de8:       |  |  |     |     |  |                    |     |  |         eca80813           addi    a6,a6,-310 # f0003cae <kDigitsLow>
f0001dec:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
f0001dee:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
f0001df0:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
f0001df2:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
f0001df4:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
f0001df6:       |  |  |     |     |  |                    |     |  |         2295                       jal     f0001f5a <write_digits>
f0001df8:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
f0001dfc:       |  |  |     |     |  |                    |     |  \-------> 00002597           auipc   a1,0x2
f0001e00:       |  |  |     |     |  |                    |     |            eb058593           addi    a1,a1,-336 # f0003cac <top_earlgrey_plic_interrupt_for_peripheral+0x420>
f0001e04:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
f0001e06:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
f0001e08:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
f0001e0a:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
f0001e0e:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
f0001e12:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       f0001dc8 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f0001e14:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
f0001e16:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f0001e18:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
f0001e1c:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
f0001e20:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f0001e22:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,f0001e18 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
f0001e24:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
f0001e28:       |  |  |     |     |  +-------------------------------------- bf69                       j       f0001dc2 <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
f0001e2a:       |  |  |     |     \--|-------------------------------------> 00001597           auipc   a1,0x1
f0001e2e:       |  |  |     |        |                                       3f658593           addi    a1,a1,1014 # f0003220 <kExpectedHmacDigest+0x488>
f0001e32:       |  |  |     |        |                                       4615                       li      a2,5
f0001e34:       |  |  |     |        \-------------------------------------- b779                       j       f0001dc2 <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
f0001e36:       |  |  \-----|----------------------------------------------> 00002597           auipc   a1,0x2
f0001e3a:       |  |        |                                                e8858593           addi    a1,a1,-376 # f0003cbe <kErrorNul>
f0001e3e:       |  |        |                                                4645                       li      a2,17
f0001e40:       |  |        |                                            /-> 854a                       mv      a0,s2
f0001e42:       |  |        |                                            |   9982                       jalr    s3
f0001e44:       |  |        |                                            |   9aaa                       add     s5,s5,a0
f0001e46:       |  +--------|--------------------------------------------|-- a011                       j       f0001e4a <base_vfprintf+0x462>
f0001e48:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
f0001e4a:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
f0001e4c:                   |                                            |   4df2                       lw      s11,28(sp)
f0001e4e:                   |                                            |   5d02                       lw      s10,32(sp)
f0001e50:                   |                                            |   5c92                       lw      s9,36(sp)
f0001e52:                   |                                            |   5c22                       lw      s8,40(sp)
f0001e54:                   |                                            |   5bb2                       lw      s7,44(sp)
f0001e56:                   |                                            |   5b42                       lw      s6,48(sp)
f0001e58:                   |                                            |   5ad2                       lw      s5,52(sp)
f0001e5a:                   |                                            |   5a62                       lw      s4,56(sp)
f0001e5c:                   |                                            |   59f2                       lw      s3,60(sp)
f0001e5e:                   |                                            |   4906                       lw      s2,64(sp)
f0001e60:                   |                                            |   4496                       lw      s1,68(sp)
f0001e62:                   |                                            |   4426                       lw      s0,72(sp)
f0001e64:                   |                                            |   40b6                       lw      ra,76(sp)
f0001e66:                   |                                            |   6161                       addi    sp,sp,80
f0001e68:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
f0001e6a:                   \--------------------------------------------|-> 00002597           auipc   a1,0x2
f0001e6e:                                                                |   e6558593           addi    a1,a1,-411 # f0003ccf <kErrorTooWide>
f0001e72:                                                                |   4631                       li      a2,12
f0001e74:                                                                \-- b7f1                       j       f0001e40 <base_vfprintf+0x458>

f0001e76 <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
f0001e76:                    715d                       addi    sp,sp,-80
f0001e78:                    c686                       sw      ra,76(sp)
f0001e7a:                    c4a2                       sw      s0,72(sp)
f0001e7c:                    c2a6                       sw      s1,68(sp)
f0001e7e:                    c0ca                       sw      s2,64(sp)
f0001e80:                    de4e                       sw      s3,60(sp)
f0001e82:                    dc52                       sw      s4,56(sp)
f0001e84:                    da56                       sw      s5,52(sp)
f0001e86:                    d85a                       sw      s6,48(sp)
f0001e88:                    d65e                       sw      s7,44(sp)
f0001e8a:                    d462                       sw      s8,40(sp)
f0001e8c:                    d266                       sw      s9,36(sp)
f0001e8e:                    d06a                       sw      s10,32(sp)
f0001e90:                    8bc6                       mv      s7,a7
f0001e92:                    8a42                       mv      s4,a6
f0001e94:                    8b36                       mv      s6,a3
f0001e96:                    8ab2                       mv      s5,a2
f0001e98:                    892e                       mv      s2,a1
f0001e9a:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
f0001e9c:          /-------- 02e6fc63           bgeu    a3,a4,f0001ed4 <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
f0001ea0:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
f0001ea4:          |         850a                       mv      a0,sp
f0001ea6:          |         02000613           li      a2,32
f0001eaa:          |         85be                       mv      a1,a5
f0001eac:          |         26c1                       jal     f000226c <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f0001eae:          +-------- c09d                       beqz    s1,f0001ed4 <hex_dump+0x5e>
f0001eb0:          |         4c01                       li      s8,0
f0001eb2:          |  /----> 02000513           li      a0,32
f0001eb6:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
f0001eb8:          |  |  /-- 00a4e463           bltu    s1,a0,f0001ec0 <hex_dump+0x4a>
f0001ebc:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f0001ec0:          |  |  \-> 858a                       mv      a1,sp
f0001ec2:          |  |      854e                       mv      a0,s3
f0001ec4:          |  |      8622                       mv      a2,s0
f0001ec6:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
f0001ec8:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f0001eca:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f0001ecc:          |  \----- f0fd                       bnez    s1,f0001eb2 <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f0001ece:          |     /-- 000b1663           bnez    s6,f0001eda <hex_dump+0x64>
f0001ed2:       /--|-----|-- a0ad                       j       f0001f3c <hex_dump+0xc6>
f0001ed4:       |  \-----|-> 4c01                       li      s8,0
f0001ed6:       +--------|-- 060b0363           beqz    s6,f0001f3c <hex_dump+0xc6>
f0001eda:       |        \-> 4401                       li      s0,0
f0001edc:       |            4601                       li      a2,0
f0001ede:       |            fffb0493           addi    s1,s6,-1
f0001ee2:       |            8b0a                       mv      s6,sp
f0001ee4:       |            02000c93           li      s9,32
f0001ee8:       |            5d7d                       li      s10,-1
f0001eea:       |     /----> 8526                       mv      a0,s1
f0001eec:       |     |  /-- 000a1363           bnez    s4,f0001ef2 <hex_dump+0x7c>
f0001ef0:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
f0001ef2:       |     |  \-> 9556                       add     a0,a0,s5
f0001ef4:       |     |      00054503           lbu     a0,0(a0)
f0001ef8:       |     |      00455593           srli    a1,a0,0x4
f0001efc:       |     |      95de                       add     a1,a1,s7
f0001efe:       |     |      00058583           lb      a1,0(a1)
f0001f02:       |     |      00cb06b3           add     a3,s6,a2
f0001f06:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f0001f0a:       |     |      893d                       andi    a0,a0,15
f0001f0c:       |     |      955e                       add     a0,a0,s7
f0001f0e:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
f0001f12:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f0001f14:       |     |      00a680a3           sb      a0,1(a3)
f0001f18:       |     |  /-- 01961963           bne     a2,s9,f0001f2a <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
f0001f1c:       |     |  |   858a                       mv      a1,sp
f0001f1e:       |     |  |   02000613           li      a2,32
f0001f22:       |     |  |   854e                       mv      a0,s3
f0001f24:       |     |  |   9902                       jalr    s2
f0001f26:       |     |  |   4601                       li      a2,0
f0001f28:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f0001f2a:       |     |  \-> 14fd                       addi    s1,s1,-1
f0001f2c:       |     |      0405                       addi    s0,s0,1
f0001f2e:       |     \----- fba49ee3           bne     s1,s10,f0001eea <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
f0001f32:       +----------- c609                       beqz    a2,f0001f3c <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
f0001f34:       |            858a                       mv      a1,sp
f0001f36:       |            854e                       mv      a0,s3
f0001f38:       |            9902                       jalr    s2
f0001f3a:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
f0001f3c:       \----------> 8562                       mv      a0,s8
f0001f3e:                    5d02                       lw      s10,32(sp)
f0001f40:                    5c92                       lw      s9,36(sp)
f0001f42:                    5c22                       lw      s8,40(sp)
f0001f44:                    5bb2                       lw      s7,44(sp)
f0001f46:                    5b42                       lw      s6,48(sp)
f0001f48:                    5ad2                       lw      s5,52(sp)
f0001f4a:                    5a62                       lw      s4,56(sp)
f0001f4c:                    59f2                       lw      s3,60(sp)
f0001f4e:                    4906                       lw      s2,64(sp)
f0001f50:                    4496                       lw      s1,68(sp)
f0001f52:                    4426                       lw      s0,72(sp)
f0001f54:                    40b6                       lw      ra,76(sp)
f0001f56:                    6161                       addi    sp,sp,80
f0001f58:                    8082                       ret

f0001f5a <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
f0001f5a:              7179                     addi    sp,sp,-48
f0001f5c:              d606                     sw      ra,44(sp)
f0001f5e:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
f0001f60:       /----- ca05                     beqz    a2,f0001f90 <write_digits+0x36>
f0001f62:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f0001f64:       |      02b10293                 addi    t0,sp,43
f0001f68:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
f0001f6a:       |  |   02f65633                 divu    a2,a2,a5
f0001f6e:       |  |   02f605b3                 mul     a1,a2,a5
f0001f72:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
f0001f76:       |  |   95c2                     add     a1,a1,a6
f0001f78:       |  |   00058e03                 lb      t3,0(a1)
f0001f7c:       |  |   007285b3                 add     a1,t0,t2
f0001f80:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f0001f84:       |  |   13fd                     addi    t2,t2,-1
f0001f86:       |  \-- fef371e3                 bgeu    t1,a5,f0001f68 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0001f8a:       |      40700633                 neg     a2,t2
f0001f8e:       |  /-- a031                     j       f0001f9a <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
f0001f90:       \--|-> 00080583                 lb      a1,0(a6)
f0001f94:          |   02b105a3                 sb      a1,43(sp)
f0001f98:          |   4605                     li      a2,1
f0001f9a:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0001f9c:          /-- c291                     beqz    a3,f0001fa0 <write_digits+0x46>
f0001f9e:          |   85b6                     mv      a1,a3
f0001fa0:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
f0001fa4:          /-- 00d5e463                 bltu    a1,a3,f0001fac <write_digits+0x52>
f0001fa8:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f0001fac:       /--\-X 00b67e63                 bgeu    a2,a1,f0001fc8 <write_digits+0x6e>
f0001fb0:       |      40c586b3                 sub     a3,a1,a2
f0001fb4:       |      007c                     addi    a5,sp,12
f0001fb6:       |      40c78633                 sub     a2,a5,a2
f0001fba:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
f0001fbc:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f0001fc0:       |  |   16fd                     addi    a3,a3,-1
f0001fc2:       |  |   167d                     addi    a2,a2,-1
f0001fc4:       |  \-- fee5                     bnez    a3,f0001fbc <write_digits+0x62>
f0001fc6:       |      862e                     mv      a2,a1
f0001fc8:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
f0001fca:              8d91                     sub     a1,a1,a2
f0001fcc:              02058593                 addi    a1,a1,32
f0001fd0:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
f0001fd2:              50b2                     lw      ra,44(sp)
f0001fd4:              6145                     addi    sp,sp,48
f0001fd6:              8082                     ret

f0001fd8 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
f0001fd8:              00052813                 slti    a6,a0,0
f0001fdc:              41f55793                 srai    a5,a0,0x1f
f0001fe0:              8fe9                     and     a5,a5,a0
f0001fe2:              8bfd                     andi    a5,a5,31
f0001fe4:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
f0001fe8:              00e87833                 and     a6,a6,a4
f0001fec:              02000713                 li      a4,32
f0001ff0:          /-- 00081363                 bnez    a6,f0001ff6 <status_extract+0x1e>
f0001ff4:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
f0001ff6:          \-> 00271813                 slli    a6,a4,0x2
f0001ffa:              f0000797                 auipc   a5,0xf0000
f0001ffe:              fea78793                 addi    a5,a5,-22 # e0001fe4 <status_codes>
f0002002:              97c2                     add     a5,a5,a6
f0002004:              439c                     lw      a5,0(a5)
f0002006:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
f0002008:              00173593                 seqz    a1,a4
f000200c:       /----- cb1d                     beqz    a4,f0002042 <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f000200e:       |      00555713                 srli    a4,a0,0x5
f0002012:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
f0002016:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
f0002018:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
f000201c:       |      8a7d                     andi    a2,a2,31
f000201e:       |      04066613                 ori     a2,a2,64
f0002022:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
f0002026:       |      01555613                 srli    a2,a0,0x15
f000202a:       |      8a7d                     andi    a2,a2,31
f000202c:       |      04066613                 ori     a2,a2,64
f0002030:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
f0002034:       |      8169                     srli    a0,a0,0x1a
f0002036:       |      897d                     andi    a0,a0,31
f0002038:       |      04056513                 ori     a0,a0,64
f000203c:       |      00a68123                 sb      a0,2(a3)
f0002040:       |  /-- a011                     j       f0002044 <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
f0002042:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
f0002044:          \-> 0015c513                 xori    a0,a1,1
f0002048:              8082                     ret

f000204a <dif_uart_init>:
dif_uart_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:18

#include "uart_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_init(mmio_region_t base_addr, dif_uart_t *uart) {
  if (uart == NULL) {
f000204a:       /----- c581                     beqz    a1,f0002052 <dif_uart_init+0x8>
f000204c:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:22
    return kDifBadArg;
  }

  uart->base_addr = base_addr;
f000204e:       |      c188                     sw      a0,0(a1)
f0002050:       |  /-- a011                     j       f0002054 <dif_uart_init+0xa>
f0002052:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:25

  return kDifOk;
}
f0002054:          \-> 8532                     mv      a0,a2
f0002056:              8082                     ret

f0002058 <dif_uart_configure>:
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:91

  return bytes_read;
}

dif_result_t dif_uart_configure(const dif_uart_t *uart,
                                dif_uart_config_t config) {
f0002058:              1101                     addi    sp,sp,-32
f000205a:              ce06                     sw      ra,28(sp)
f000205c:              cc22                     sw      s0,24(sp)
f000205e:              ca26                     sw      s1,20(sp)
f0002060:              c84a                     sw      s2,16(sp)
f0002062:              c64e                     sw      s3,12(sp)
f0002064:              448d                     li      s1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:92
  if (uart == NULL) {
f0002066:       /----- cd51                     beqz    a0,f0002102 <dif_uart_configure+0xaa>
f0002068:       |      892e                     mv      s2,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:96
    return kDifBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
f000206a:       |      4194                     lw      a3,0(a1)
f000206c:       +----- cad9                     beqz    a3,f0002102 <dif_uart_configure+0xaa>
f000206e:       |      00492603                 lw      a2,4(s2)
f0002072:       +----- ca41                     beqz    a2,f0002102 <dif_uart_configure+0xaa>
f0002074:       |      842a                     mv      s0,a0
f0002076:       |      0016e537                 lui     a0,0x16e
f000207a:       |      36050513                 addi    a0,a0,864 # 16e360 <_ottf_size+0x12e360>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:118
  // 2^4 should be multiplied.
  // If uart baud rate is 1.5Mbps and IO is 24Mhz, NCO is 0x10000, which is over
  // the NCO width, use NCO = 0xffff for this case since the error is tolerable.
  // Refer to #4263
  uint64_t nco =
      ((uint64_t)config.baudrate == 1500000 && config.clk_freq_hz == 24000000)
f000207e:       |      8d35                     xor     a0,a0,a3
f0002080:       |      016e35b7                 lui     a1,0x16e3
f0002084:       |      60058593                 addi    a1,a1,1536 # 16e3600 <_ottf_size+0x16a3600>
f0002088:       |      8db1                     xor     a1,a1,a2
f000208a:       |      00b56733                 or      a4,a0,a1
f000208e:       |      6541                     lui     a0,0x10
f0002090:       |      fff50993                 addi    s3,a0,-1 # ffff <_non_volatile_scratch_size+0xafff>
f0002094:       |      4581                     li      a1,0
f0002096:       |      854e                     mv      a0,s3
f0002098:       |  /-- cb01                     beqz    a4,f00020a8 <dif_uart_configure+0x50>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:120
          ? 0xffff
          : udiv64_slow((uint64_t)config.baudrate << (nco_width + 4),
f000209a:       |  |   01469513                 slli    a0,a3,0x14
f000209e:       |  |   00c6d593                 srli    a1,a3,0xc
f00020a2:       |  |   4681                     li      a3,0
f00020a4:       |  |   4701                     li      a4,0
f00020a6:       |  |   2079                     jal     f0002134 <udiv64_slow>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:122
                        config.clk_freq_hz, NULL);
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
f00020a8:       |  \-> 01357633                 and     a2,a0,s3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:125

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
f00020ac:       |      8d31                     xor     a0,a0,a2
f00020ae:       |      8d4d                     or      a0,a0,a1
f00020b0:       +----- e929                     bnez    a0,f0002102 <dif_uart_configure+0xaa>
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:47
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, 0u);
f00020b2:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00020b4:       |      00052823                 sw      zero,16(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:53
  mmio_region_write32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
f00020b8:       |      4008                     lw      a0,0(s0)
f00020ba:       |      458d                     li      a1,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00020bc:       |      d10c                     sw      a1,32(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:55
  mmio_region_write32(uart->base_addr, UART_OVRD_REG_OFFSET, 0u);
f00020be:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00020c0:       |      02052423                 sw      zero,40(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:56
  mmio_region_write32(uart->base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
f00020c4:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00020c6:       |      02052823                 sw      zero,48(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:57
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f00020ca:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00020cc:       |      00052223                 sw      zero,4(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:58
  mmio_region_write32(uart->base_addr, UART_INTR_STATE_REG_OFFSET,
f00020d0:       |      4008                     lw      a0,0(s0)
f00020d2:       |      55fd                     li      a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00020d4:       |      c10c                     sw      a1,0(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifToggleEnabled) {
f00020d6:       |      00892683                 lw      a3,8(s2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f00020da:       |      01061513                 slli    a0,a2,0x10
f00020de:       |      4605                     li      a2,1
f00020e0:       |      04300593                 li      a1,67
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
f00020e4:       |  /-- 00c68363                 beq     a3,a2,f00020ea <dif_uart_configure+0x92>
f00020e8:       |  |   458d                     li      a1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
f00020ea:       |  \-> 00c92603                 lw      a2,12(s2)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  if (config.parity_enable == kDifToggleEnabled) {
f00020ee:       |      8d4d                     or      a0,a0,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
  if (config.parity == kDifUartParityOdd) {
f00020f0:       |  /-- e219                     bnez    a2,f00020f6 <dif_uart_configure+0x9e>
f00020f2:       |  |   08056513                 ori     a0,a0,128
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:143
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, reg);
f00020f6:       |  \-> 400c                     lw      a1,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00020f8:       |      c988                     sw      a0,16(a1)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:146

  // Disable interrupts.
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f00020fa:       |      4008                     lw      a0,0(s0)
f00020fc:       |      4481                     li      s1,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00020fe:       |      00052223                 sw      zero,4(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:149

  return kDifOk;
}
f0002102:       \----> 8526                     mv      a0,s1
f0002104:              49b2                     lw      s3,12(sp)
f0002106:              4942                     lw      s2,16(sp)
f0002108:              44d2                     lw      s1,20(sp)
f000210a:              4462                     lw      s0,24(sp)
f000210c:              40f2                     lw      ra,28(sp)
f000210e:              6105                     addi    sp,sp,32
f0002110:              8082                     ret

f0002112 <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:256

  return kDifOk;
}

dif_result_t dif_uart_byte_send_polled(const dif_uart_t *uart, uint8_t byte) {
  if (uart == NULL) {
f0002112:       /----- cd19                     beqz    a0,f0002130 <dif_uart_byte_send_polled+0x1e>
f0002114:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0002116:       |  /-> 4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f0002118:       |  |   8a85                     andi    a3,a3,1
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:261
    return kDifBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
f000211a:       |  \-- fef5                     bnez    a3,f0002116 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f000211c:       |      4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f000211e:       |      8a85                     andi    a3,a3,1
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:68
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
f0002120:       |  /-- e299                     bnez    a3,f0002126 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0002122:       |  |   ce4c                     sw      a1,28(a2)
f0002124:       |  |   4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0002126:       |  >-> 4a48                     lw      a0,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0002128:       |  |   8921                     andi    a0,a0,8
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:268

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
f000212a:       |  \-- dd75                     beqz    a0,f0002126 <dif_uart_byte_send_polled+0x14>
f000212c:       |      4501                     li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:272
  }

  return kDifOk;
}
f000212e:       |      8082                     ret
f0002130:       \----> 450d                     li      a0,3
f0002132:              8082                     ret

f0002134 <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:9

#include "sw/device/lib/base/math.h"

#include <stddef.h>

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
f0002134:                 1141                  addi    sp,sp,-16
f0002136:                 c622                  sw      s0,12(sp)
f0002138:                 c426                  sw      s1,8(sp)
f000213a:                 c24a                  sw      s2,4(sp)
f000213c:                 4881                  li      a7,0
f000213e:                 4801                  li      a6,0
f0002140:                 4e01                  li      t3,0
f0002142:                 4e81                  li      t4,0
f0002144:                 03f00793              li      a5,63
f0002148:                 42fd                  li      t0,31
f000214a:                 00159313              slli    t1,a1,0x1
f000214e:                 53fd                  li      t2,-1
/proc/self/cwd/sw/device/lib/base/math.c:23
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
f0002150:       /-------> fe078493              addi    s1,a5,-32
f0002154:       |     /-- 0004c563              bltz    s1,f000215e <udiv64_slow+0x2a>
f0002158:       |     |   0095df33              srl     t5,a1,s1
f000215c:       |  /--|-- a809                  j       f000216e <udiv64_slow+0x3a>
f000215e:       |  |  \-> 00f554b3              srl     s1,a0,a5
f0002162:       |  |      40f28433              sub     s0,t0,a5
f0002166:       |  |      00831433              sll     s0,t1,s0
f000216a:       |  |      0084ef33              or      t5,s1,s0
f000216e:       |  \----> 01fe5493              srli    s1,t3,0x1f
f0002172:       |         001e9413              slli    s0,t4,0x1
f0002176:       |         00946eb3              or      t4,s0,s1
f000217a:       |         001e1493              slli    s1,t3,0x1
f000217e:       |         001f7413              andi    s0,t5,1
f0002182:       |         00946f33              or      t5,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:29

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
f0002186:       |  /----- 00de8563              beq     t4,a3,f0002190 <udiv64_slow+0x5c>
f000218a:       |  |      00debe33              sltu    t3,t4,a3
f000218e:       |  |  /-- a019                  j       f0002194 <udiv64_slow+0x60>
f0002190:       |  \--|-> 00cf3e33              sltu    t3,t5,a2
f0002194:       |     \-> 001e4f93              xori    t6,t3,1
f0002198:       |         4901                  li      s2,0
f000219a:       |         4481                  li      s1,0
f000219c:       |     /-- 000e1463              bnez    t3,f00021a4 <udiv64_slow+0x70>
f00021a0:       |     |   8936                  mv      s2,a3
f00021a2:       |     |   84b2                  mv      s1,a2
f00021a4:       |     \-> 01f8de13              srli    t3,a7,0x1f
f00021a8:       |         00181413              slli    s0,a6,0x1
f00021ac:       |         01c46833              or      a6,s0,t3
f00021b0:       |         0886                  slli    a7,a7,0x1
f00021b2:       |         409f0e33              sub     t3,t5,s1
f00021b6:       |         009f34b3              sltu    s1,t5,s1
f00021ba:       |         412e8433              sub     s0,t4,s2
f00021be:       |         40940eb3              sub     t4,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f00021c2:       |         17fd                  addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/base/math.c:29
    if (rem >= b) {
f00021c4:       |         01f8e8b3              or      a7,a7,t6
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f00021c8:       \-------- f87794e3              bne     a5,t2,f0002150 <udiv64_slow+0x1c>
/proc/self/cwd/sw/device/lib/base/math.c:35
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
f00021cc:             /-- c709                  beqz    a4,f00021d6 <udiv64_slow+0xa2>
/proc/self/cwd/sw/device/lib/base/math.c:36
    *rem_out = rem;
f00021ce:             |   01c72023              sw      t3,0(a4)
f00021d2:             |   01d72223              sw      t4,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:38
  }
  return quot;
f00021d6:             \-> 8546                  mv      a0,a7
f00021d8:                 85c2                  mv      a1,a6
f00021da:                 4912                  lw      s2,4(sp)
f00021dc:                 44a2                  lw      s1,8(sp)
f00021de:                 4432                  lw      s0,12(sp)
f00021e0:                 0141                  addi    sp,sp,16
f00021e2:                 8082                  ret

f00021e4 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
f00021e4:                       00153693                seqz    a3,a0
f00021e8:                       0015b713                seqz    a4,a1
f00021ec:                       8ed9                    or      a3,a3,a4
f00021ee:       /-------------- eab5                    bnez    a3,f0002262 <memcpy+0x7e>
f00021f0:       |               4711                    li      a4,4
f00021f2:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00021f4:       |        /----- 00e66c63                bltu    a2,a4,f000220c <memcpy+0x28>
f00021f8:       |        |      00a5c6b3                xor     a3,a1,a0
f00021fc:       |        |      0036f793                andi    a5,a3,3
f0002200:       |        |      8832                    mv      a6,a2
f0002202:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
f0002204:       |        |  /-- eb91                    bnez    a5,f0002218 <memcpy+0x34>
f0002206:       |        |  |   40a006b3                neg     a3,a0
f000220a:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f000220c:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002210:       |           |   9b71                    andi    a4,a4,-4
f0002212:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f0002216:       |  /--------|-- c6b9                    beqz    a3,f0002264 <memcpy+0x80>
f0002218:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f000221a:       |  |        /-> 00f58733                add     a4,a1,a5
f000221e:       |  |        |   00070883                lb      a7,0(a4)
f0002222:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f0002226:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f0002228:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f000222c:       |  |        \-- fef697e3                bne     a3,a5,f000221a <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002230:       |  |  /-------- 0106fb63                bgeu    a3,a6,f0002246 <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002234:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0002238:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
 */
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f000223a:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f000223e:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f0002240:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f0002242:       |  |  |  +----- ff06e9e3                bltu    a3,a6,f0002234 <memcpy+0x50>
f0002246:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,f0002262 <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
f000224a:       |  |  |  |      8e15                    sub     a2,a2,a3
f000224c:       |  |  |  |      00d50733                add     a4,a0,a3
f0002250:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
f0002252:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
f0002256:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
f000225a:       |  |  |  |  |   167d                    addi    a2,a2,-1
f000225c:       |  |  |  |  |   0705                    addi    a4,a4,1
f000225e:       |  |  |  |  |   0585                    addi    a1,a1,1
f0002260:       |  |  |  |  \-- fa6d                    bnez    a2,f0002252 <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
f0002262:       \--|--|--|----> 8082                    ret
f0002264:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002266:             |  \----- fd06e7e3                bltu    a3,a6,f0002234 <memcpy+0x50>
f000226a:             \-------- bff1                    j       f0002246 <memcpy+0x62>

f000226c <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
f000226c:                 4691                  li      a3,4
f000226e:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f0002270:             /-- 00d66663              bltu    a2,a3,f000227c <memset+0x10>
f0002274:             |   40a006b3              neg     a3,a0
f0002278:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f000227c:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002280:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f0002284:          /----- cb01                  beqz    a4,f0002294 <memset+0x28>
f0002286:          |      87aa                  mv      a5,a0
f0002288:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
f000228a:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
f000228e:          |  |   16fd                  addi    a3,a3,-1
f0002290:          |  |   0785                  addi    a5,a5,1
f0002292:          |  \-- fee5                  bnez    a3,f000228a <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002294:       /--\----X 02080263              beqz    a6,f00022b8 <memset+0x4c>
f0002298:       |         00e808b3              add     a7,a6,a4
f000229c:       |         0ff5f813              andi    a6,a1,255
f00022a0:       |         010107b7              lui     a5,0x1010
f00022a4:       |         10178793              addi    a5,a5,257 # 1010101 <_ottf_size+0xfd0101>
f00022a8:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00022ac:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f00022b0:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f00022b2:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f00022b4:       |     \-- ff176ce3              bltu    a4,a7,f00022ac <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
f00022b8:       \--/----X 00c77a63              bgeu    a4,a2,f00022cc <memset+0x60>
f00022bc:          |      8e19                  sub     a2,a2,a4
f00022be:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
f00022c2:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
f00022c6:          |  |   167d                  addi    a2,a2,-1
f00022c8:          |  |   0685                  addi    a3,a3,1
f00022ca:          |  \-- fe65                  bnez    a2,f00022c2 <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
f00022cc:          \----> 8082                  ret

f00022ce <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
f00022ce:                             4691                      li      a3,4
f00022d0:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00022d2:                         /-- 00d66663                  bltu    a2,a3,f00022de <memchr+0x10>
f00022d6:                         |   40a006b3                  neg     a3,a0
f00022da:                         |   0036fe93                  andi    t4,a3,3
f00022de:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f00022e2:                      /----- 000e8b63                  beqz    t4,f00022f8 <memchr+0x2a>
f00022e6:                      |      85aa                      mv      a1,a0
f00022e8:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
f00022ea:                      |  /-> 0005c683                  lbu     a3,0(a1)
f00022ee:       /--------------|--|-- 09c68563                  beq     a3,t3,f0002378 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
f00022f2:       |              |  |   17fd                      addi    a5,a5,-1
f00022f4:       |              |  |   0585                      addi    a1,a1,1
f00022f6:       |              |  \-- fbf5                      bnez    a5,f00022ea <memchr+0x1c>
f00022f8:       |              \----> 41d605b3                  sub     a1,a2,t4
f00022fc:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00022fe:       |  /----------------- c9a9                      beqz    a1,f0002350 <memchr+0x82>
f0002300:       |  |                  01d58833                  add     a6,a1,t4
f0002304:       |  |                  010105b7                  lui     a1,0x1010
f0002308:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <_ottf_size+0xfd0101>
f000230c:       |  |                  02be02b3                  mul     t0,t3,a1
f0002310:       |  |                  0ff00893                  li      a7,255
f0002314:       |  |                  65c1                      lui     a1,0x10
f0002316:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f000231a:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f000231e:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f0002322:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
f0002324:       |  |              |   0056c7b3                  xor     a5,a3,t0
f0002328:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f000232c:       |  |              |   0ff6f713                  andi    a4,a3,255
f0002330:       +--|--------------|-- 05170463                  beq     a4,a7,f0002378 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f0002334:       |  |              |   0076f733                  and     a4,a3,t2
f0002338:       |  |  /-----------|-- 02770b63                  beq     a4,t2,f000236e <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f000233c:       |  |  |           |   0066f6b3                  and     a3,a3,t1
f0002340:       |  |  |  /--------|-- 02668963                  beq     a3,t1,f0002372 <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f0002344:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
f0002348:       |  |  |  |  /-----|-- c69d                      beqz    a3,f0002376 <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f000234a:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
f000234c:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,f000231e <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
f0002350:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,f000236a <memchr+0x9c>
f0002354:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
f0002358:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
f000235c:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
f0002360:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,f0002378 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
f0002364:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
f0002366:       |     |  |  |  |  |   0585                      addi    a1,a1,1
f0002368:       |     |  |  |  |  \-- fa75                      bnez    a2,f000235c <memchr+0x8e>
f000236a:       |     |  |  |  \----> 4581                      li      a1,0
f000236c:       +-----|--|--|-------- a031                      j       f0002378 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
f000236e:       |     \--|--|-------> 0585                      addi    a1,a1,1
f0002370:       +--------|--|-------- a021                      j       f0002378 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
f0002372:       |        \--|-------> 0589                      addi    a1,a1,2
f0002374:       +-----------|-------- a011                      j       f0002378 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
f0002376:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f0002378:       \-------------------> 852e                      mv      a0,a1
f000237a:                             8082                      ret

f000237c <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
f000237c:                          4691                 li      a3,4
f000237e:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f0002380:                      /-- 00d66663             bltu    a2,a3,f000238c <memrchr+0x10>
f0002384:                      |   40a006b3             neg     a3,a0
f0002388:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f000238c:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f0002390:                          9af1                 andi    a3,a3,-4
f0002392:                          006687b3             add     a5,a3,t1
f0002396:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
f0002398:                      /-- 00f66363             bltu    a2,a5,f000239e <memrchr+0x22>
f000239c:                      |   86be                 mv      a3,a5
f000239e:                      \-> 0ff5f393             andi    t2,a1,255
f00023a2:                   /--/-X 00c7fd63             bgeu    a5,a2,f00023bc <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
f00023a6:                   |  |   00c50733             add     a4,a0,a2
f00023aa:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
f00023ae:                   |  |   fff60713             addi    a4,a2,-1
f00023b2:                   |  |   863a                 mv      a2,a4
f00023b4:                   |  \-- fe7597e3             bne     a1,t2,f00023a2 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f00023b8:                   |      953a                 add     a0,a0,a4
f00023ba:                   |      8082                 ret
f00023bc:                   \----> 010105b7             lui     a1,0x1010
f00023c0:                          10158593             addi    a1,a1,257 # 1010101 <_ottf_size+0xfd0101>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
f00023c4:                          02b382b3             mul     t0,t2,a1
f00023c8:                          00ff0837             lui     a6,0xff0
f00023cc:                          65c1                 lui     a1,0x10
f00023ce:                          f0058793             addi    a5,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f00023d2:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
f00023d6:       /--------------/-X 04d37563             bgeu    t1,a3,f0002420 <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00023da:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f00023de:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
f00023e2:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f00023e6:       |              |   01875593             srli    a1,a4,0x18
f00023ea:       |  /-----------|-- cd95                 beqz    a1,f0002426 <memrchr+0xaa>
f00023ec:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f00023f0:       |  |           |   010775b3             and     a1,a4,a6
f00023f4:       |  |  /--------|-- 03058c63             beq     a1,a6,f000242c <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f00023f8:       |  |  |        |   00f775b3             and     a1,a4,a5
f00023fc:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,f0002432 <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f0002400:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
f0002404:       |  |  |  |     |   16f1                 addi    a3,a3,-4
f0002406:       |  |  |  |     \-- fd1598e3             bne     a1,a7,f00023d6 <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f000240a:       |  |  |  |         9536                 add     a0,a0,a3
f000240c:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
f000240e:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
f0002412:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
f0002416:       |  |  |  |     |   fff68613             addi    a2,a3,-1
f000241a:       |  |  |  |     |   86b2                 mv      a3,a2
f000241c:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,f0002438 <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
f0002420:       \--|--|--|--|--\-X f6fd                 bnez    a3,f000240e <memrchr+0x92>
f0002422:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002424:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
f0002426:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f000242a:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
f000242c:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002430:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
f0002432:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f0002436:                   |      8082                 ret
f0002438:                   \----> 9532                 add     a0,a0,a2
f000243a:                          8082                 ret

f000243c <xTaskCreate>:
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:734
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
f000243c:                    7179                       addi    sp,sp,-48
f000243e:                    d606                       sw      ra,44(sp)
f0002440:                    d422                       sw      s0,40(sp)
f0002442:                    d226                       sw      s1,36(sp)
f0002444:                    d04a                       sw      s2,32(sp)
f0002446:                    ce4e                       sw      s3,28(sp)
f0002448:                    cc52                       sw      s4,24(sp)
f000244a:                    ca56                       sw      s5,20(sp)
f000244c:                    c85a                       sw      s6,16(sp)
f000244e:                    c65e                       sw      s7,12(sp)
f0002450:                    c462                       sw      s8,8(sp)
f0002452:                    c266                       sw      s9,4(sp)
f0002454:                    8abe                       mv      s5,a5
f0002456:                    8b3a                       mv      s6,a4
f0002458:                    89b6                       mv      s3,a3
f000245a:                    84ae                       mv      s1,a1
f000245c:                    8a2a                       mv      s4,a0
/proc/self/cwd/external/freertos/tasks.c:768
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
f000245e:                    00261913           slli    s2,a2,0x2
f0002462:                    854a                       mv      a0,s2
f0002464:                    256d                       jal     f0002b0e <pvPortMalloc>
f0002466:                    5bfd                       li      s7,-1
/proc/self/cwd/external/freertos/tasks.c:770

                if( pxStack != NULL )
f0002468:       /----------- 1c050463           beqz    a0,f0002630 <xTaskCreate+0x1f4>
f000246c:       |            842a                       mv      s0,a0
/proc/self/cwd/external/freertos/tasks.c:773
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
f000246e:       |            04c00513           li      a0,76
f0002472:       |            2d71                       jal     f0002b0e <pvPortMalloc>
/proc/self/cwd/external/freertos/tasks.c:775

                    if( pxNewTCB != NULL )
f0002474:       |  /-------- c121                       beqz    a0,f00024b4 <xTaskCreate+0x78>
f0002476:       |  |         8c2a                       mv      s8,a0
/proc/self/cwd/external/freertos/tasks.c:778
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
f0002478:       |  |         d900                       sw      s0,48(a0)
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:860
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
f000247a:       |  |         00890533           add     a0,s2,s0
f000247e:       |  |         1571                       addi    a0,a0,-4
/proc/self/cwd/external/freertos/tasks.c:888
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
f0002480:       |  |  /----- cc8d                       beqz    s1,f00024ba <xTaskCreate+0x7e>
f0002482:       |  |  |      4601                       li      a2,0
/proc/self/cwd/external/freertos/tasks.c:890
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
f0002484:       |  |  |      034c0593           addi    a1,s8,52
/proc/self/cwd/external/freertos/tasks.c:892
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
f0002488:       |  |  |  /-> 00c486b3           add     a3,s1,a2
f000248c:       |  |  |  |   00068703           lb      a4,0(a3)
f0002490:       |  |  |  |   00c587b3           add     a5,a1,a2
f0002494:       |  |  |  |   00e78023           sb      a4,0(a5)
/proc/self/cwd/external/freertos/tasks.c:897

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
f0002498:       |  |  |  |   0006c683           lbu     a3,0(a3)
f000249c:       |  |  |  |   0016b693           seqz    a3,a3
f00024a0:       |  |  |  |   ff160713           addi    a4,a2,-15
f00024a4:       |  |  |  |   0605                       addi    a2,a2,1
f00024a6:       |  |  |  |   00173713           seqz    a4,a4
f00024aa:       |  |  |  |   8ed9                       or      a3,a3,a4
f00024ac:       |  |  |  \-- def1                       beqz    a3,f0002488 <xTaskCreate+0x4c>
/proc/self/cwd/external/freertos/tasks.c:909
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
f00024ae:       |  |  |      040c01a3           sb      zero,67(s8)
f00024b2:       |  |  |  /-- a031                       j       f00024be <xTaskCreate+0x82>
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:784
                        vPortFreeStack( pxStack );
f00024b4:       |  \--|--|-> 8522                       mv      a0,s0
f00024b6:       |     |  |   2de9                       jal     f0002b90 <vPortFree>
f00024b8:       +-----|--|-- aaa5                       j       f0002630 <xTaskCreate+0x1f4>
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:915
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
f00024ba:       |     \--|-> 020c0a23           sb      zero,52(s8)
f00024be:       |        \-> 4591                       li      a1,4
f00024c0:       |            ff057493           andi    s1,a0,-16
/proc/self/cwd/external/freertos/tasks.c:921
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
f00024c4:       |        /-- 00bb6363           bltu    s6,a1,f00024ca <xTaskCreate+0x8e>
f00024c8:       |        |   4b11                       li      s6,4
/proc/self/cwd/external/freertos/tasks.c:930
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
f00024ca:       |        \-> 036c2623           sw      s6,44(s8)
/proc/self/cwd/external/freertos/tasks.c:938
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
f00024ce:       |            004c0913           addi    s2,s8,4
f00024d2:       |            854a                       mv      a0,s2
f00024d4:       |            2d09                       jal     f0002ae6 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:939
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
f00024d6:       |            018c0513           addi    a0,s8,24
f00024da:       |            2531                       jal     f0002ae6 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:943

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
f00024dc:       |            018c2823           sw      s8,16(s8)
f00024e0:       |            4515                       li      a0,5
/proc/self/cwd/external/freertos/tasks.c:946

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
f00024e2:       |            41650533           sub     a0,a0,s6
f00024e6:       |            00ac2c23           sw      a0,24(s8)
/proc/self/cwd/external/freertos/tasks.c:947
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
f00024ea:       |            038c2223           sw      s8,36(s8)
/proc/self/cwd/external/freertos/tasks.c:951

    #if ( portCRITICAL_NESTING_IN_TCB == 1 )
        {
            pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
f00024ee:       |            040c2223           sw      zero,68(s8)
/proc/self/cwd/external/freertos/tasks.c:1002
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
f00024f2:       |            040c0423           sb      zero,72(s8)
/proc/self/cwd/external/freertos/tasks.c:1052
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
f00024f6:       |            8526                       mv      a0,s1
f00024f8:       |            85d2                       mv      a1,s4
f00024fa:       |            864e                       mv      a2,s3
f00024fc:       |            8a0fe0ef           jal     ra,f000059c <pxPortInitialiseStack>
f0002500:       |            00ac2023           sw      a0,0(s8)
/proc/self/cwd/external/freertos/tasks.c:1058
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
f0002504:       |        /-- 000a8463           beqz    s5,f000250c <xTaskCreate+0xd0>
/proc/self/cwd/external/freertos/tasks.c:1062
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
f0002508:       |        |   018aa023           sw      s8,0(s5)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskEnterCritical( void )
    {
        portDISABLE_INTERRUPTS();
f000250c:       |        \-> 30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347

        if( xSchedulerRunning != pdFALSE )
f0002510:       |            f0000a97           auipc   s5,0xf0000
f0002514:       |            b84a8a93           addi    s5,s5,-1148 # e0002094 <xSchedulerRunning>
f0002518:       |            000aa503           lw      a0,0(s5)
f000251c:       |            f0000b17           auipc   s6,0xf0000
f0002520:       |            b64b0b13           addi    s6,s6,-1180 # e0002080 <pxCurrentTCB>
f0002524:       |        /-- c901                       beqz    a0,f0002534 <xTaskCreate+0xf8>
/proc/self/cwd/external/freertos/tasks.c:4349
        {
            ( pxCurrentTCB->uxCriticalNesting )++;
f0002526:       |        |   000b2503           lw      a0,0(s6)
f000252a:       |        |   416c                       lw      a1,68(a0)
f000252c:       |        |   0585                       addi    a1,a1,1
f000252e:       |        |   c16c                       sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
             * function so  assert() if it is being called from an interrupt
             * context.  Only API functions that end in "FromISR" can be used in an
             * interrupt.  Only assert if the critical nesting count is 1 to
             * protect against recursive calls if the assert function also uses a
             * critical section. */
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0002530:       |        |   000b2503           lw      a0,0(s6)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1077
        uxCurrentNumberOfTasks++;
f0002534:       |        \-> f0000517           auipc   a0,0xf0000
f0002538:       |            b5c50513           addi    a0,a0,-1188 # e0002090 <uxCurrentNumberOfTasks>
f000253c:       |            410c                       lw      a1,0(a0)
f000253e:       |            0585                       addi    a1,a1,1
f0002540:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1079
        if( pxCurrentTCB == NULL )
f0002542:       |            000b2583           lw      a1,0(s6)
f0002546:       |            f0000c97           auipc   s9,0xf0000
f000254a:       |            b96c8c93           addi    s9,s9,-1130 # e00020dc <pxReadyTasksLists>
f000254e:       |        /-- cd91                       beqz    a1,f000256a <xTaskCreate+0x12e>
/proc/self/cwd/external/freertos/tasks.c:1102
            if( xSchedulerRunning == pdFALSE )
f0002550:       |        |   000aa503           lw      a0,0(s5)
f0002554:       |     /--|-- e149                       bnez    a0,f00025d6 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1104
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
f0002556:       |     |  |   000b2503           lw      a0,0(s6)
f000255a:       |     |  |   5548                       lw      a0,44(a0)
f000255c:       |     |  |   02cc2583           lw      a1,44(s8)
f0002560:       |     +--|-- 06a5eb63           bltu    a1,a0,f00025d6 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1106
                    pxCurrentTCB = pxNewTCB;
f0002564:       |     |  |   018b2023           sw      s8,0(s6)
f0002568:       |     +--|-- a0bd                       j       f00025d6 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1083
            pxCurrentTCB = pxNewTCB;
f000256a:       |     |  \-> 018b2023           sw      s8,0(s6)
/proc/self/cwd/external/freertos/tasks.c:1085
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
f000256e:       |     |      4108                       lw      a0,0(a0)
f0002570:       |     |      4585                       li      a1,1
f0002572:       |     +----- 06b51263           bne     a0,a1,f00025d6 <xTaskCreate+0x19a>
f0002576:       |     |      4401                       li      s0,0
f0002578:       |     |      06400493           li      s1,100
prvInitialiseTaskLists():
/proc/self/cwd/external/freertos/tasks.c:3665
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
f000257c:       |     |  /-> 01940533           add     a0,s0,s9
f0002580:       |     |  |   2b89                       jal     f0002ad2 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3663
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
f0002582:       |     |  |   0451                       addi    s0,s0,20
f0002584:       |     |  \-- fe941ce3           bne     s0,s1,f000257c <xTaskCreate+0x140>
/proc/self/cwd/external/freertos/tasks.c:3668
    vListInitialise( &xDelayedTaskList1 );
f0002588:       |     |      f0000997           auipc   s3,0xf0000
f000258c:       |     |      bf498993           addi    s3,s3,-1036 # e000217c <xDelayedTaskList1>
f0002590:       |     |      854e                       mv      a0,s3
f0002592:       |     |      2381                       jal     f0002ad2 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3669
    vListInitialise( &xDelayedTaskList2 );
f0002594:       |     |      f0000a17           auipc   s4,0xf0000
f0002598:       |     |      bfca0a13           addi    s4,s4,-1028 # e0002190 <xDelayedTaskList2>
f000259c:       |     |      8552                       mv      a0,s4
f000259e:       |     |      2b15                       jal     f0002ad2 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3670
    vListInitialise( &xPendingReadyList );
f00025a0:       |     |      f0000517           auipc   a0,0xf0000
f00025a4:       |     |      bc850513           addi    a0,a0,-1080 # e0002168 <xPendingReadyList>
f00025a8:       |     |      232d                       jal     f0002ad2 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3674
            vListInitialise( &xTasksWaitingTermination );
f00025aa:       |     |      f0000517           auipc   a0,0xf0000
f00025ae:       |     |      b9650513           addi    a0,a0,-1130 # e0002140 <xTasksWaitingTermination>
f00025b2:       |     |      2305                       jal     f0002ad2 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3680
            vListInitialise( &xSuspendedTaskList );
f00025b4:       |     |      f0000517           auipc   a0,0xf0000
f00025b8:       |     |      ba050513           addi    a0,a0,-1120 # e0002154 <xSuspendedTaskList>
f00025bc:       |     |      2b19                       jal     f0002ad2 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3686
    pxDelayedTaskList = &xDelayedTaskList1;
f00025be:       |     |      f0000517           auipc   a0,0xf0000
f00025c2:       |     |      ada50513           addi    a0,a0,-1318 # e0002098 <pxDelayedTaskList>
f00025c6:       |     |      01352023           sw      s3,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3687
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
f00025ca:       |     |      f0000517           auipc   a0,0xf0000
f00025ce:       |     |      ad250513           addi    a0,a0,-1326 # e000209c <pxOverflowDelayedTaskList>
f00025d2:       |     |      01452023           sw      s4,0(a0)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1119
        uxTaskNumber++;
f00025d6:       |     \----> f0000517           auipc   a0,0xf0000
f00025da:       |            ab250513           addi    a0,a0,-1358 # e0002088 <uxTaskNumber>
f00025de:       |            410c                       lw      a1,0(a0)
f00025e0:       |            0585                       addi    a1,a1,1
f00025e2:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1129
        prvAddTaskToReadyList( pxNewTCB );
f00025e4:       |            02cc2503           lw      a0,44(s8)
f00025e8:       |            f0000597           auipc   a1,0xf0000
f00025ec:       |            a9c58593           addi    a1,a1,-1380 # e0002084 <uxTopReadyPriority>
f00025f0:       |            4190                       lw      a2,0(a1)
f00025f2:       |            4b85                       li      s7,1
f00025f4:       |            00ab96b3           sll     a3,s7,a0
f00025f8:       |            8e55                       or      a2,a2,a3
f00025fa:       |            c190                       sw      a2,0(a1)
f00025fc:       |            45d1                       li      a1,20
f00025fe:       |            02b50533           mul     a0,a0,a1
f0002602:       |            9566                       add     a0,a0,s9
f0002604:       |            414c                       lw      a1,4(a0)
f0002606:       |            00bc2423           sw      a1,8(s8)
f000260a:       |            4590                       lw      a2,8(a1)
f000260c:       |            00cc2623           sw      a2,12(s8)
f0002610:       |            4590                       lw      a2,8(a1)
f0002612:       |            01262223           sw      s2,4(a2)
f0002616:       |            0125a423           sw      s2,8(a1)
f000261a:       |            00ac2a23           sw      a0,20(s8)
f000261e:       |            410c                       lw      a1,0(a0)
f0002620:       |            0585                       addi    a1,a1,1
f0002622:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1133
    taskEXIT_CRITICAL();
f0002624:       |            2025                       jal     f000264c <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:1135
    if( xSchedulerRunning != pdFALSE )
f0002626:       |            000aa503           lw      a0,0(s5)
f000262a:       +----------- c119                       beqz    a0,f0002630 <xTaskCreate+0x1f4>
/proc/self/cwd/external/freertos/tasks.c:1139
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
f000262c:       |            000b2503           lw      a0,0(s6)
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:813
        return xReturn;
f0002630:       \----------> 855e                       mv      a0,s7
f0002632:                    4c92                       lw      s9,4(sp)
f0002634:                    4c22                       lw      s8,8(sp)
f0002636:                    4bb2                       lw      s7,12(sp)
f0002638:                    4b42                       lw      s6,16(sp)
f000263a:                    4ad2                       lw      s5,20(sp)
f000263c:                    4a62                       lw      s4,24(sp)
f000263e:                    49f2                       lw      s3,28(sp)
f0002640:                    5902                       lw      s2,32(sp)
f0002642:                    5492                       lw      s1,36(sp)
f0002644:                    5422                       lw      s0,40(sp)
f0002646:                    50b2                       lw      ra,44(sp)
f0002648:                    6145                       addi    sp,sp,48
f000264a:                    8082                       ret

f000264c <vTaskExitCritical>:
vTaskExitCritical():
/proc/self/cwd/external/freertos/tasks.c:4375

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskExitCritical( void )
    {
        if( xSchedulerRunning != pdFALSE )
f000264c:              f0000517                 auipc   a0,0xf0000
f0002650:              a4850513                 addi    a0,a0,-1464 # e0002094 <xSchedulerRunning>
f0002654:              4108                     lw      a0,0(a0)
f0002656:       /----- cd19                     beqz    a0,f0002674 <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4377
        {
            if( pxCurrentTCB->uxCriticalNesting > 0U )
f0002658:       |      f0000517                 auipc   a0,0xf0000
f000265c:       |      a2850513                 addi    a0,a0,-1496 # e0002080 <pxCurrentTCB>
f0002660:       |      410c                     lw      a1,0(a0)
f0002662:       |      41ec                     lw      a1,68(a1)
f0002664:       +----- c981                     beqz    a1,f0002674 <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4379
            {
                ( pxCurrentTCB->uxCriticalNesting )--;
f0002666:       |      410c                     lw      a1,0(a0)
f0002668:       |      41f0                     lw      a2,68(a1)
f000266a:       |      167d                     addi    a2,a2,-1
f000266c:       |      c1f0                     sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4381

                if( pxCurrentTCB->uxCriticalNesting == 0U )
f000266e:       |      4108                     lw      a0,0(a0)
f0002670:       |      4168                     lw      a0,68(a0)
f0002672:       |  /-- c111                     beqz    a0,f0002676 <vTaskExitCritical+0x2a>
/proc/self/cwd/external/freertos/tasks.c:4399
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
f0002674:       \--|-> 8082                     ret
/proc/self/cwd/external/freertos/tasks.c:4383
                    portENABLE_INTERRUPTS();
f0002676:          \-> 30046073                 csrsi   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4399
    }
f000267a:              8082                     ret

f000267c <vTaskSwitchContext>:
vTaskSwitchContext():
/proc/self/cwd/external/freertos/tasks.c:3015
{
f000267c:              1141                     addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:3016
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
f000267e:              c606                     sw      ra,12(sp)
f0002680:              c422                     sw      s0,8(sp)
f0002682:              f0000517                 auipc   a0,0xf0000
f0002686:              a1e50513                 addi    a0,a0,-1506 # e00020a0 <uxSchedulerSuspended>
f000268a:              4108                     lw      a0,0(a0)
f000268c:          /-- c901                     beqz    a0,f000269c <vTaskSwitchContext+0x20>
/proc/self/cwd/external/freertos/tasks.c:3020
        xYieldPending = pdTRUE;
f000268e:          |   f0000517                 auipc   a0,0xf0000
f0002692:          |   a1650513                 addi    a0,a0,-1514 # e00020a4 <xYieldPending>
f0002696:          |   4585                     li      a1,1
f0002698:          |   c10c                     sw      a1,0(a0)
f000269a:       /--|-- a0d9                     j       f0002760 <vTaskSwitchContext+0xe4>
/proc/self/cwd/external/freertos/tasks.c:3024
        xYieldPending = pdFALSE;
f000269c:       |  \-> f0000517                 auipc   a0,0xf0000
f00026a0:       |      a0850513                 addi    a0,a0,-1528 # e00020a4 <xYieldPending>
f00026a4:       |      00052023                 sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3056
        taskCHECK_FOR_STACK_OVERFLOW();
f00026a8:       |      f0000417                 auipc   s0,0xf0000
f00026ac:       |      9d840413                 addi    s0,s0,-1576 # e0002080 <pxCurrentTCB>
f00026b0:       |      4008                     lw      a0,0(s0)
f00026b2:       |      4108                     lw      a0,0(a0)
f00026b4:       |      400c                     lw      a1,0(s0)
f00026b6:       |      598c                     lw      a1,48(a1)
f00026b8:       |  /-- 00a5e863                 bltu    a1,a0,f00026c8 <vTaskSwitchContext+0x4c>
f00026bc:       |  |   4008                     lw      a0,0(s0)
f00026be:       |  |   400c                     lw      a1,0(s0)
f00026c0:       |  |   03458593                 addi    a1,a1,52
f00026c4:       |  |   d49fe0ef                 jal     ra,f000140c <vApplicationStackOverflowHook>
/proc/self/cwd/external/freertos/tasks.c:3067
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f00026c8:       |  \-> f0000517                 auipc   a0,0xf0000
f00026cc:       |      9bc50513                 addi    a0,a0,-1604 # e0002084 <uxTopReadyPriority>
f00026d0:       |      4108                     lw      a0,0(a0)
f00026d2:       |      00155593                 srli    a1,a0,0x1
f00026d6:       |      8d4d                     or      a0,a0,a1
f00026d8:       |      00255593                 srli    a1,a0,0x2
f00026dc:       |      8d4d                     or      a0,a0,a1
f00026de:       |      00455593                 srli    a1,a0,0x4
f00026e2:       |      8d4d                     or      a0,a0,a1
f00026e4:       |      00855593                 srli    a1,a0,0x8
f00026e8:       |      8d4d                     or      a0,a0,a1
f00026ea:       |      01055593                 srli    a1,a0,0x10
f00026ee:       |      8d4d                     or      a0,a0,a1
f00026f0:       |      fff54513                 not     a0,a0
f00026f4:       |      00155593                 srli    a1,a0,0x1
f00026f8:       |      55555637                 lui     a2,0x55555
f00026fc:       |      55560613                 addi    a2,a2,1365 # 55555555 <_ottf_size+0x55515555>
f0002700:       |      8df1                     and     a1,a1,a2
f0002702:       |      8d0d                     sub     a0,a0,a1
f0002704:       |      333335b7                 lui     a1,0x33333
f0002708:       |      33358593                 addi    a1,a1,819 # 33333333 <_ottf_size+0x332f3333>
f000270c:       |      00b57633                 and     a2,a0,a1
f0002710:       |      8109                     srli    a0,a0,0x2
f0002712:       |      8d6d                     and     a0,a0,a1
f0002714:       |      9532                     add     a0,a0,a2
f0002716:       |      00455593                 srli    a1,a0,0x4
f000271a:       |      952e                     add     a0,a0,a1
f000271c:       |      0f0f15b7                 lui     a1,0xf0f1
f0002720:       |      f0f58593                 addi    a1,a1,-241 # f0f0f0f <_ottf_size+0xf0b0f0f>
f0002724:       |      8d6d                     and     a0,a0,a1
f0002726:       |      010105b7                 lui     a1,0x1010
f000272a:       |      10158593                 addi    a1,a1,257 # 1010101 <_ottf_size+0xfd0101>
f000272e:       |      02b50533                 mul     a0,a0,a1
f0002732:       |      8161                     srli    a0,a0,0x18
f0002734:       |      01f54513                 xori    a0,a0,31
f0002738:       |      45d1                     li      a1,20
f000273a:       |      02b50533                 mul     a0,a0,a1
f000273e:       |      f0000597                 auipc   a1,0xf0000
f0002742:       |      99e58593                 addi    a1,a1,-1634 # e00020dc <pxReadyTasksLists>
f0002746:       |      95aa                     add     a1,a1,a0
f0002748:       |      41c8                     lw      a0,4(a1)
f000274a:       |      4148                     lw      a0,4(a0)
f000274c:       |      00858613                 addi    a2,a1,8
f0002750:       |      c1c8                     sw      a0,4(a1)
f0002752:       |  /-- 00c51563                 bne     a0,a2,f000275c <vTaskSwitchContext+0xe0>
f0002756:       |  |   4148                     lw      a0,4(a0)
f0002758:       |  |   0591                     addi    a1,a1,4
f000275a:       |  |   c188                     sw      a0,0(a1)
f000275c:       |  \-> 4548                     lw      a0,12(a0)
f000275e:       |      c008                     sw      a0,0(s0)
/proc/self/cwd/external/freertos/tasks.c:3087
}
f0002760:       \----> 4422                     lw      s0,8(sp)
f0002762:              40b2                     lw      ra,12(sp)
f0002764:              0141                     addi    sp,sp,16
f0002766:              8082                     ret

f0002768 <vTaskStartScheduler>:
vTaskStartScheduler():
/proc/self/cwd/external/freertos/tasks.c:1991
{
f0002768:           1141                        addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:2024
            xReturn = xTaskCreate( prvIdleTask,
f000276a:           c606                        sw      ra,12(sp)
f000276c:           00000517            auipc   a0,0x0
f0002770:           06250513            addi    a0,a0,98 # f00027ce <prvIdleTask>
f0002774:           00001597            auipc   a1,0x1
f0002778:           71c58593            addi    a1,a1,1820 # f0003e90 <uxTopUsedPriority+0x4>
f000277c:           f0000797            auipc   a5,0xf0000
f0002780:           92c78793            addi    a5,a5,-1748 # e00020a8 <xIdleTaskHandle>
f0002784:           10000613            li      a2,256
f0002788:           4681                        li      a3,0
f000278a:           4701                        li      a4,0
f000278c:           3945                        jal     f000243c <xTaskCreate>
f000278e:           4585                        li      a1,1
/proc/self/cwd/external/freertos/tasks.c:2046
    if( xReturn == pdPASS )
f0002790:       /-- 02b51763            bne     a0,a1,f00027be <vTaskStartScheduler+0x56>
/proc/self/cwd/external/freertos/tasks.c:2062
        portDISABLE_INTERRUPTS();
f0002794:       |   30047073            csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:2074
        xNextTaskUnblockTime = portMAX_DELAY;
f0002798:       |   f0000517            auipc   a0,0xf0000
f000279c:       |   91450513            addi    a0,a0,-1772 # e00020ac <xNextTaskUnblockTime>
f00027a0:       |   567d                        li      a2,-1
f00027a2:       |   c110                        sw      a2,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2075
        xSchedulerRunning = pdTRUE;
f00027a4:       |   f0000517            auipc   a0,0xf0000
f00027a8:       |   8f050513            addi    a0,a0,-1808 # e0002094 <xSchedulerRunning>
f00027ac:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2076
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
f00027ae:       |   f0000517            auipc   a0,0xf0000
f00027b2:       |   90250513            addi    a0,a0,-1790 # e00020b0 <xTickCount>
f00027b6:       |   00052023            sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2090
        if( xPortStartScheduler() != pdFALSE )
f00027ba:       |   c8bfe0ef            jal     ra,f0001444 <xPortStartScheduler>
/proc/self/cwd/external/freertos/tasks.c:2114
    ( void ) uxTopUsedPriority;
f00027be:       \-> 00001517            auipc   a0,0x1
f00027c2:           6ce50513            addi    a0,a0,1742 # f0003e8c <uxTopUsedPriority>
f00027c6:           4108                        lw      a0,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2115
}
f00027c8:           40b2                        lw      ra,12(sp)
f00027ca:           0141                        addi    sp,sp,16
f00027cc:           8082                        ret

f00027ce <prvIdleTask>:
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3435
{
f00027ce:                 1101                  addi    sp,sp,-32
f00027d0:                 ce06                  sw      ra,28(sp)
f00027d2:                 cc22                  sw      s0,24(sp)
f00027d4:                 ca26                  sw      s1,20(sp)
f00027d6:                 c84a                  sw      s2,16(sp)
f00027d8:                 c64e                  sw      s3,12(sp)
f00027da:                 c452                  sw      s4,8(sp)
f00027dc:                 c256                  sw      s5,4(sp)
f00027de:                 f0000497              auipc   s1,0xf0000
f00027e2:                 8ae48493              addi    s1,s1,-1874 # e000208c <uxDeletedTasksWaitingCleanUp>
f00027e6:                 f0000917              auipc   s2,0xf0000
f00027ea:                 8ae90913              addi    s2,s2,-1874 # e0002094 <xSchedulerRunning>
f00027ee:                 f0000997              auipc   s3,0xf0000
f00027f2:                 95298993              addi    s3,s3,-1710 # e0002140 <xTasksWaitingTermination>
f00027f6:                 f0000a17              auipc   s4,0xf0000
f00027fa:                 89aa0a13              addi    s4,s4,-1894 # e0002090 <uxCurrentNumberOfTasks>
f00027fe:                 f0000a97              auipc   s5,0xf0000
f0002802:                 882a8a93              addi    s5,s5,-1918 # e0002080 <pxCurrentTCB>
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3701
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
f0002806:       /-------> 4088                  lw      a0,0(s1)
f0002808:       |  /----- c129                  beqz    a0,f000284a <prvIdleTask+0x7c>
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f000280a:       |  |      30047073              csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f000280e:       |  |      00092503              lw      a0,0(s2)
f0002812:       |  |  /-- c901                  beqz    a0,f0002822 <prvIdleTask+0x54>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f0002814:       |  |  |   000aa503              lw      a0,0(s5)
f0002818:       |  |  |   416c                  lw      a1,68(a0)
f000281a:       |  |  |   0585                  addi    a1,a1,1
f000281c:       |  |  |   c16c                  sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f000281e:       |  |  |   000aa503              lw      a0,0(s5)
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3705
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0002822:       |  |  \-> 00c9a503              lw      a0,12(s3)
f0002826:       |  |      4540                  lw      s0,12(a0)
/proc/self/cwd/external/freertos/tasks.c:3706
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
f0002828:       |  |      00440513              addi    a0,s0,4
f000282c:       |  |      24c1                  jal     f0002aec <uxListRemove>
/proc/self/cwd/external/freertos/tasks.c:3707
                    --uxCurrentNumberOfTasks;
f000282e:       |  |      000a2503              lw      a0,0(s4)
f0002832:       |  |      157d                  addi    a0,a0,-1
f0002834:       |  |      00aa2023              sw      a0,0(s4)
/proc/self/cwd/external/freertos/tasks.c:3708
                    --uxDeletedTasksWaitingCleanUp;
f0002838:       |  |      4088                  lw      a0,0(s1)
f000283a:       |  |      157d                  addi    a0,a0,-1
f000283c:       |  |      c088                  sw      a0,0(s1)
/proc/self/cwd/external/freertos/tasks.c:3710
                taskEXIT_CRITICAL();
f000283e:       |  |      3539                  jal     f000264c <vTaskExitCritical>
prvDeleteTCB():
/proc/self/cwd/external/freertos/tasks.c:3964
                vPortFreeStack( pxTCB->pxStack );
f0002840:       |  |      5808                  lw      a0,48(s0)
f0002842:       |  |      26b9                  jal     f0002b90 <vPortFree>
/proc/self/cwd/external/freertos/tasks.c:3965
                vPortFree( pxTCB );
f0002844:       |  |      8522                  mv      a0,s0
f0002846:       |  |      26a9                  jal     f0002b90 <vPortFree>
f0002848:       +--|----- bf7d                  j       f0002806 <prvIdleTask+0x38>
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3459
                taskYIELD();
f000284a:       |  \----> 00000073              ecall
f000284e:       \-------- bf65                  j       f0002806 <prvIdleTask+0x38>

f0002850 <vTaskSuspendAll>:
vTaskSuspendAll():
/proc/self/cwd/external/freertos/tasks.c:2142
    ++uxSchedulerSuspended;
f0002850:       f0000517                auipc   a0,0xf0000
f0002854:       85050513                addi    a0,a0,-1968 # e00020a0 <uxSchedulerSuspended>
f0002858:       410c                    lw      a1,0(a0)
f000285a:       0585                    addi    a1,a1,1
f000285c:       c10c                    sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2147
}
f000285e:       8082                    ret

f0002860 <xTaskResumeAll>:
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2214
{
f0002860:                    1141                       addi    sp,sp,-16
f0002862:                    c606                       sw      ra,12(sp)
f0002864:                    c422                       sw      s0,8(sp)
f0002866:                    c226                       sw      s1,4(sp)
f0002868:                    c04a                       sw      s2,0(sp)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f000286a:                    30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f000286e:                    f0000517           auipc   a0,0xf0000
f0002872:                    82650513           addi    a0,a0,-2010 # e0002094 <xSchedulerRunning>
f0002876:                    4108                       lw      a0,0(a0)
f0002878:                /-- c911                       beqz    a0,f000288c <xTaskResumeAll+0x2c>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f000287a:                |   f0000517           auipc   a0,0xf0000
f000287e:                |   80650513           addi    a0,a0,-2042 # e0002080 <pxCurrentTCB>
f0002882:                |   410c                       lw      a1,0(a0)
f0002884:                |   41f0                       lw      a2,68(a1)
f0002886:                |   0605                       addi    a2,a2,1
f0002888:                |   c1f0                       sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f000288a:                |   4108                       lw      a0,0(a0)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2229
        --uxSchedulerSuspended;
f000288c:                \-> f0000517           auipc   a0,0xf0000
f0002890:                    81450513           addi    a0,a0,-2028 # e00020a0 <uxSchedulerSuspended>
f0002894:                    410c                       lw      a1,0(a0)
f0002896:                    15fd                       addi    a1,a1,-1
f0002898:                    c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2231
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f000289a:                    4108                       lw      a0,0(a0)
f000289c:       /----------- ed65                       bnez    a0,f0002994 <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2233
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
f000289e:       |            effff517           auipc   a0,0xeffff
f00028a2:       |            7f250513           addi    a0,a0,2034 # e0002090 <uxCurrentNumberOfTasks>
f00028a6:       |            4108                       lw      a0,0(a0)
f00028a8:       +----------- c575                       beqz    a0,f0002994 <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f00028aa:       |            f0000517           auipc   a0,0xf0000
f00028ae:       |            8be50513           addi    a0,a0,-1858 # e0002168 <xPendingReadyList>
f00028b2:       |            410c                       lw      a1,0(a0)
f00028b4:       |            effff917           auipc   s2,0xeffff
f00028b8:       |            7f090913           addi    s2,s2,2032 # e00020a4 <xYieldPending>
f00028bc:       |  /-------- cddd                       beqz    a1,f000297a <xTaskResumeAll+0x11a>
f00028be:       |  |         4885                       li      a7,1
f00028c0:       |  |         effff617           auipc   a2,0xeffff
f00028c4:       |  |         7c460613           addi    a2,a2,1988 # e0002084 <uxTopReadyPriority>
f00028c8:       |  |         4851                       li      a6,20
f00028ca:       |  |         f0000297           auipc   t0,0xf0000
f00028ce:       |  |         81228293           addi    t0,t0,-2030 # e00020dc <pxReadyTasksLists>
f00028d2:       |  |         effff317           auipc   t1,0xeffff
f00028d6:       |  |         7ae30313           addi    t1,t1,1966 # e0002080 <pxCurrentTCB>
/proc/self/cwd/external/freertos/tasks.c:2239
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f00028da:       |  |  /----> 454c                       lw      a1,12(a0)
f00028dc:       |  |  |      45c0                       lw      s0,12(a1)
/proc/self/cwd/external/freertos/tasks.c:2240
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f00028de:       |  |  |      500c                       lw      a1,32(s0)
f00028e0:       |  |  |      4c58                       lw      a4,28(s0)
f00028e2:       |  |  |      5404                       lw      s1,40(s0)
f00028e4:       |  |  |      c70c                       sw      a1,8(a4)
f00028e6:       |  |  |      5014                       lw      a3,32(s0)
f00028e8:       |  |  |      c2d8                       sw      a4,4(a3)
f00028ea:       |  |  |      40cc                       lw      a1,4(s1)
f00028ec:       |  |  |      01840713           addi    a4,s0,24
f00028f0:       |  |  |  /-- 00e59363           bne     a1,a4,f00028f6 <xTaskResumeAll+0x96>
f00028f4:       |  |  |  |   c0d4                       sw      a3,4(s1)
f00028f6:       |  |  |  \-> 02042423           sw      zero,40(s0)
f00028fa:       |  |  |      408c                       lw      a1,0(s1)
f00028fc:       |  |  |      15fd                       addi    a1,a1,-1
f00028fe:       |  |  |      c08c                       sw      a1,0(s1)
/proc/self/cwd/external/freertos/tasks.c:2242
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f0002900:       |  |  |      444c                       lw      a1,12(s0)
f0002902:       |  |  |      4418                       lw      a4,8(s0)
f0002904:       |  |  |      4854                       lw      a3,20(s0)
f0002906:       |  |  |      c70c                       sw      a1,8(a4)
f0002908:       |  |  |      444c                       lw      a1,12(s0)
f000290a:       |  |  |      c1d8                       sw      a4,4(a1)
f000290c:       |  |  |      42d8                       lw      a4,4(a3)
f000290e:       |  |  |      00440493           addi    s1,s0,4
f0002912:       |  |  |  /-- 00971363           bne     a4,s1,f0002918 <xTaskResumeAll+0xb8>
f0002916:       |  |  |  |   c2cc                       sw      a1,4(a3)
f0002918:       |  |  |  \-> 428c                       lw      a1,0(a3)
f000291a:       |  |  |      15fd                       addi    a1,a1,-1
f000291c:       |  |  |      c28c                       sw      a1,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2243
                    prvAddTaskToReadyList( pxTCB );
f000291e:       |  |  |      544c                       lw      a1,44(s0)
f0002920:       |  |  |      4214                       lw      a3,0(a2)
f0002922:       |  |  |      00b89733           sll     a4,a7,a1
f0002926:       |  |  |      8ed9                       or      a3,a3,a4
f0002928:       |  |  |      c214                       sw      a3,0(a2)
f000292a:       |  |  |      030586b3           mul     a3,a1,a6
f000292e:       |  |  |      9696                       add     a3,a3,t0
f0002930:       |  |  |      42d8                       lw      a4,4(a3)
f0002932:       |  |  |      c418                       sw      a4,8(s0)
f0002934:       |  |  |      471c                       lw      a5,8(a4)
f0002936:       |  |  |      c45c                       sw      a5,12(s0)
f0002938:       |  |  |      471c                       lw      a5,8(a4)
f000293a:       |  |  |      c3c4                       sw      s1,4(a5)
f000293c:       |  |  |      c704                       sw      s1,8(a4)
f000293e:       |  |  |      c854                       sw      a3,20(s0)
f0002940:       |  |  |      4298                       lw      a4,0(a3)
f0002942:       |  |  |      0705                       addi    a4,a4,1
f0002944:       |  |  |      c298                       sw      a4,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2247
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
f0002946:       |  |  |      00032683           lw      a3,0(t1)
f000294a:       |  |  |      56d4                       lw      a3,44(a3)
f000294c:       |  |  |  /-- 00d5e463           bltu    a1,a3,f0002954 <xTaskResumeAll+0xf4>
/proc/self/cwd/external/freertos/tasks.c:2249
                        xYieldPending = pdTRUE;
f0002950:       |  |  |  |   01192023           sw      a7,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f0002954:       |  |  |  \-> 410c                       lw      a1,0(a0)
f0002956:       |  |  \----- f1d1                       bnez    a1,f00028da <xTaskResumeAll+0x7a>
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002958:       |  |         effff517           auipc   a0,0xeffff
f000295c:       |  |         74050513           addi    a0,a0,1856 # e0002098 <pxDelayedTaskList>
f0002960:       |  |         410c                       lw      a1,0(a0)
f0002962:       |  |         418c                       lw      a1,0(a1)
f0002964:       |  |  /----- c589                       beqz    a1,f000296e <xTaskResumeAll+0x10e>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f0002966:       |  |  |      4108                       lw      a0,0(a0)
f0002968:       |  |  |      4548                       lw      a0,12(a0)
f000296a:       |  |  |      4108                       lw      a0,0(a0)
f000296c:       |  |  |  /-- a011                       j       f0002970 <xTaskResumeAll+0x110>
f000296e:       |  |  \--|-> 557d                       li      a0,-1
f0002970:       |  |     \-> effff597           auipc   a1,0xeffff
f0002974:       |  |         73c58593           addi    a1,a1,1852 # e00020ac <xNextTaskUnblockTime>
f0002978:       |  |         c188                       sw      a0,0(a1)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2273
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
f000297a:       |  \-------> effff417           auipc   s0,0xeffff
f000297e:       |            73a40413           addi    s0,s0,1850 # e00020b4 <xPendedTicks>
f0002982:       |            4004                       lw      s1,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2275
                    if( xPendedCounts > ( TickType_t ) 0U )
f0002984:       |     /----- c491                       beqz    s1,f0002990 <xTaskResumeAll+0x130>
/proc/self/cwd/external/freertos/tasks.c:2279
                            if( xTaskIncrementTick() != pdFALSE )
f0002986:       |     |  /-> 2839                       jal     f00029a4 <xTaskIncrementTick>
/proc/self/cwd/external/freertos/tasks.c:2288
                            --xPendedCounts;
f0002988:       |     |  |   14fd                       addi    s1,s1,-1
/proc/self/cwd/external/freertos/tasks.c:2289
                        } while( xPendedCounts > ( TickType_t ) 0U );
f000298a:       |     |  \-- fcf5                       bnez    s1,f0002986 <xTaskResumeAll+0x126>
/proc/self/cwd/external/freertos/tasks.c:2291
                        xPendedTicks = 0;
f000298c:       |     |      00042023           sw      zero,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2299
                if( xYieldPending != pdFALSE )
f0002990:       |     \----> 00092503           lw      a0,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2319
    taskEXIT_CRITICAL();
f0002994:       \----------> 3965                       jal     f000264c <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:2321
    return xAlreadyYielded;
f0002996:                    4501                       li      a0,0
f0002998:                    4902                       lw      s2,0(sp)
f000299a:                    4492                       lw      s1,4(sp)
f000299c:                    4422                       lw      s0,8(sp)
f000299e:                    40b2                       lw      ra,12(sp)
f00029a0:                    0141                       addi    sp,sp,16
f00029a2:                    8082                       ret

f00029a4 <xTaskIncrementTick>:
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2740
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f00029a4:                          effff517             auipc   a0,0xeffff
f00029a8:                          6fc50513             addi    a0,a0,1788 # e00020a0 <uxSchedulerSuspended>
f00029ac:                          4108                 lw      a0,0(a0)
f00029ae:                      /-- c909                 beqz    a0,f00029c0 <xTaskIncrementTick+0x1c>
/proc/self/cwd/external/freertos/tasks.c:2887
        ++xPendedTicks;
f00029b0:                      |   effff517             auipc   a0,0xeffff
f00029b4:                      |   70450513             addi    a0,a0,1796 # e00020b4 <xPendedTicks>
f00029b8:                      |   410c                 lw      a1,0(a0)
f00029ba:                      |   0585                 addi    a1,a1,1
f00029bc:                      |   c10c                 sw      a1,0(a0)
f00029be:       /--------------|-- aa01                 j       f0002ace <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2744
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
f00029c0:       |              \-> effff517             auipc   a0,0xeffff
f00029c4:       |                  6f050513             addi    a0,a0,1776 # e00020b0 <xTickCount>
f00029c8:       |                  410c                 lw      a1,0(a0)
f00029ca:       |                  00158393             addi    t2,a1,1
/proc/self/cwd/external/freertos/tasks.c:2748
        xTickCount = xConstTickCount;
f00029ce:       |                  00752023             sw      t2,0(a0)
f00029d2:       |                  effffe17             auipc   t3,0xeffff
f00029d6:       |                  6c6e0e13             addi    t3,t3,1734 # e0002098 <pxDelayedTaskList>
f00029da:       |                  effff817             auipc   a6,0xeffff
f00029de:       |                  6d280813             addi    a6,a6,1746 # e00020ac <xNextTaskUnblockTime>
/proc/self/cwd/external/freertos/tasks.c:2750
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
f00029e2:       |        /-------- 02b3ff63             bgeu    t2,a1,f0002a20 <xTaskIncrementTick+0x7c>
/proc/self/cwd/external/freertos/tasks.c:2752
            taskSWITCH_DELAYED_LISTS();
f00029e6:       |        |         000e2503             lw      a0,0(t3)
f00029ea:       |        |         effff597             auipc   a1,0xeffff
f00029ee:       |        |         6b258593             addi    a1,a1,1714 # e000209c <pxOverflowDelayedTaskList>
f00029f2:       |        |         4194                 lw      a3,0(a1)
f00029f4:       |        |         00de2023             sw      a3,0(t3)
f00029f8:       |        |         c188                 sw      a0,0(a1)
f00029fa:       |        |         effff517             auipc   a0,0xeffff
f00029fe:       |        |         6be50513             addi    a0,a0,1726 # e00020b8 <xNumOfOverflows>
f0002a02:       |        |         410c                 lw      a1,0(a0)
f0002a04:       |        |         0585                 addi    a1,a1,1
f0002a06:       |        |         c10c                 sw      a1,0(a0)
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002a08:       |        |         000e2503             lw      a0,0(t3)
f0002a0c:       |        |         4108                 lw      a0,0(a0)
f0002a0e:       |        |  /----- c511                 beqz    a0,f0002a1a <xTaskIncrementTick+0x76>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f0002a10:       |        |  |      000e2503             lw      a0,0(t3)
f0002a14:       |        |  |      4548                 lw      a0,12(a0)
f0002a16:       |        |  |      4108                 lw      a0,0(a0)
f0002a18:       |        |  |  /-- a011                 j       f0002a1c <xTaskIncrementTick+0x78>
f0002a1a:       |        |  \--|-> 557d                 li      a0,-1
f0002a1c:       |        |     \-> 00a82023             sw      a0,0(a6)
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2763
        if( xConstTickCount >= xNextTaskUnblockTime )
f0002a20:       |        \-------> 00082503             lw      a0,0(a6)
f0002a24:       +----------------- 0aa3e563             bltu    t2,a0,f0002ace <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002a28:       |                  000e2503             lw      a0,0(t3)
f0002a2c:       |                  4108                 lw      a0,0(a0)
f0002a2e:       |  /-------------- cd49                 beqz    a0,f0002ac8 <xTaskIncrementTick+0x124>
f0002a30:       |  |               4885                 li      a7,1
f0002a32:       |  |               effffe97             auipc   t4,0xeffff
f0002a36:       |  |               652e8e93             addi    t4,t4,1618 # e0002084 <uxTopReadyPriority>
f0002a3a:       |  |               42d1                 li      t0,20
f0002a3c:       |  |               effff317             auipc   t1,0xeffff
f0002a40:       |  |               6a030313             addi    t1,t1,1696 # e00020dc <pxReadyTasksLists>
/proc/self/cwd/external/freertos/tasks.c:2783
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0002a44:       |  |  /----------> 000e2503             lw      a0,0(t3)
f0002a48:       |  |  |            4548                 lw      a0,12(a0)
f0002a4a:       |  |  |            4554                 lw      a3,12(a0)
/proc/self/cwd/external/freertos/tasks.c:2784
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
f0002a4c:       |  |  |            42c8                 lw      a0,4(a3)
/proc/self/cwd/external/freertos/tasks.c:2786
                    if( xConstTickCount < xItemValue )
f0002a4e:       |  |  |  /-------- 06a3ee63             bltu    t2,a0,f0002aca <xTaskIncrementTick+0x126>
/proc/self/cwd/external/freertos/tasks.c:2802
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f0002a52:       |  |  |  |         46cc                 lw      a1,12(a3)
f0002a54:       |  |  |  |         469c                 lw      a5,8(a3)
f0002a56:       |  |  |  |         4ac8                 lw      a0,20(a3)
f0002a58:       |  |  |  |         c78c                 sw      a1,8(a5)
f0002a5a:       |  |  |  |         46cc                 lw      a1,12(a3)
f0002a5c:       |  |  |  |         c1dc                 sw      a5,4(a1)
f0002a5e:       |  |  |  |         4150                 lw      a2,4(a0)
f0002a60:       |  |  |  |         00468793             addi    a5,a3,4
f0002a64:       |  |  |  |     /-- 00f61363             bne     a2,a5,f0002a6a <xTaskIncrementTick+0xc6>
f0002a68:       |  |  |  |     |   c14c                 sw      a1,4(a0)
f0002a6a:       |  |  |  |     \-> 410c                 lw      a1,0(a0)
f0002a6c:       |  |  |  |         15fd                 addi    a1,a1,-1
f0002a6e:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f0002a70:       |  |  |  |         5688                 lw      a0,40(a3)
f0002a72:       |  |  |  |  /----- c10d                 beqz    a0,f0002a94 <xTaskIncrementTick+0xf0>
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f0002a74:       |  |  |  |  |      528c                 lw      a1,32(a3)
f0002a76:       |  |  |  |  |      4ed0                 lw      a2,28(a3)
f0002a78:       |  |  |  |  |      c60c                 sw      a1,8(a2)
f0002a7a:       |  |  |  |  |      528c                 lw      a1,32(a3)
f0002a7c:       |  |  |  |  |      c1d0                 sw      a2,4(a1)
f0002a7e:       |  |  |  |  |      4150                 lw      a2,4(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f0002a80:       |  |  |  |  |      01868713             addi    a4,a3,24
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f0002a84:       |  |  |  |  |  /-- 00e61363             bne     a2,a4,f0002a8a <xTaskIncrementTick+0xe6>
f0002a88:       |  |  |  |  |  |   c14c                 sw      a1,4(a0)
f0002a8a:       |  |  |  |  |  \-> 0206a423             sw      zero,40(a3)
f0002a8e:       |  |  |  |  |      410c                 lw      a1,0(a0)
f0002a90:       |  |  |  |  |      15fd                 addi    a1,a1,-1
f0002a92:       |  |  |  |  |      c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2817
                    prvAddTaskToReadyList( pxTCB );
f0002a94:       |  |  |  |  \----> 56c8                 lw      a0,44(a3)
f0002a96:       |  |  |  |         000ea583             lw      a1,0(t4)
f0002a9a:       |  |  |  |         00a89633             sll     a2,a7,a0
f0002a9e:       |  |  |  |         8dd1                 or      a1,a1,a2
f0002aa0:       |  |  |  |         00bea023             sw      a1,0(t4)
f0002aa4:       |  |  |  |         02550533             mul     a0,a0,t0
f0002aa8:       |  |  |  |         951a                 add     a0,a0,t1
f0002aaa:       |  |  |  |         414c                 lw      a1,4(a0)
f0002aac:       |  |  |  |         c68c                 sw      a1,8(a3)
f0002aae:       |  |  |  |         4590                 lw      a2,8(a1)
f0002ab0:       |  |  |  |         c6d0                 sw      a2,12(a3)
f0002ab2:       |  |  |  |         4590                 lw      a2,8(a1)
f0002ab4:       |  |  |  |         c25c                 sw      a5,4(a2)
f0002ab6:       |  |  |  |         c59c                 sw      a5,8(a1)
f0002ab8:       |  |  |  |         cac8                 sw      a0,20(a3)
f0002aba:       |  |  |  |         410c                 lw      a1,0(a0)
f0002abc:       |  |  |  |         0585                 addi    a1,a1,1
f0002abe:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002ac0:       |  |  |  |         000e2503             lw      a0,0(t3)
f0002ac4:       |  |  |  |         4108                 lw      a0,0(a0)
f0002ac6:       |  |  \--|-------- fd3d                 bnez    a0,f0002a44 <xTaskIncrementTick+0xa0>
f0002ac8:       |  \-----|-------> 557d                 li      a0,-1
f0002aca:       |        \-------> 00a82023             sw      a0,0(a6)
/proc/self/cwd/external/freertos/tasks.c:2898
    return xSwitchRequired;
f0002ace:       \----------------> 4501                 li      a0,0
f0002ad0:                          8082                 ret

f0002ad2 <vListInitialise>:
vListInitialise():
/proc/self/cwd/external/freertos/list.c:55
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0002ad2:       00850593                addi    a1,a0,8
f0002ad6:       c14c                    sw      a1,4(a0)
f0002ad8:       567d                    li      a2,-1
/proc/self/cwd/external/freertos/list.c:59

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
f0002ada:       c510                    sw      a2,8(a0)
/proc/self/cwd/external/freertos/list.c:63

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0002adc:       c54c                    sw      a1,12(a0)
/proc/self/cwd/external/freertos/list.c:64
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0002ade:       c90c                    sw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:66

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
f0002ae0:       00052023                sw      zero,0(a0)
/proc/self/cwd/external/freertos/list.c:72

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
f0002ae4:       8082                    ret

f0002ae6 <vListInitialiseItem>:
vListInitialiseItem():
/proc/self/cwd/external/freertos/list.c:78
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
f0002ae6:       00052823                sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:84

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
f0002aea:       8082                    ret

f0002aec <uxListRemove>:
uxListRemove():
/proc/self/cwd/external/freertos/list.c:194
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0002aec:           4510                        lw      a2,8(a0)
f0002aee:           4154                        lw      a3,4(a0)
/proc/self/cwd/external/freertos/list.c:192
    List_t * const pxList = pxItemToRemove->pxContainer;
f0002af0:           490c                        lw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:194
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0002af2:           c690                        sw      a2,8(a3)
/proc/self/cwd/external/freertos/list.c:195
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
f0002af4:           4510                        lw      a2,8(a0)
f0002af6:           c254                        sw      a3,4(a2)
/proc/self/cwd/external/freertos/list.c:201

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
f0002af8:           41d4                        lw      a3,4(a1)
f0002afa:       /-- 00a69363            bne     a3,a0,f0002b00 <uxListRemove+0x14>
/proc/self/cwd/external/freertos/list.c:203
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
f0002afe:       |   c1d0                        sw      a2,4(a1)
/proc/self/cwd/external/freertos/list.c:210
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
f0002b00:       \-> 00052823            sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:211
    ( pxList->uxNumberOfItems )--;
f0002b04:           4188                        lw      a0,0(a1)
f0002b06:           157d                        addi    a0,a0,-1
f0002b08:           c188                        sw      a0,0(a1)
/proc/self/cwd/external/freertos/list.c:213

    return pxList->uxNumberOfItems;
f0002b0a:           4188                        lw      a0,0(a1)
f0002b0c:           8082                        ret

f0002b0e <pvPortMalloc>:
pvPortMalloc():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:72
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
f0002b0e:                 1141                  addi    sp,sp,-16
f0002b10:                 c606                  sw      ra,12(sp)
f0002b12:                 c422                  sw      s0,8(sp)
f0002b14:                 c226                  sw      s1,4(sp)
f0002b16:                 c04a                  sw      s2,0(sp)
f0002b18:                 842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:79
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
f0002b1a:                 9941                  andi    a0,a0,-16
f0002b1c:                 0541                  addi    a0,a0,16
f0002b1e:                 00f47593              andi    a1,s0,15
f0002b22:          /----- 00a46363              bltu    s0,a0,f0002b28 <pvPortMalloc+0x1a>
f0002b26:          |      4501                  li      a0,0
f0002b28:          \--/-X c191                  beqz    a1,f0002b2c <pvPortMalloc+0x1e>
f0002b2a:             |   842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:94
                }
            }
        }
    #endif

    vTaskSuspendAll();
f0002b2c:             \-> 3315                  jal     f0002850 <vTaskSuspendAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:96
    {
        if( pucAlignedHeap == NULL )
f0002b2e:                 effff517              auipc   a0,0xeffff
f0002b32:                 58e50513              addi    a0,a0,1422 # e00020bc <pvPortMalloc.pucAlignedHeap>
f0002b36:                 4104                  lw      s1,0(a0)
f0002b38:             /-- c099                  beqz    s1,f0002b3e <pvPortMalloc+0x30>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
f0002b3a:          /--|-- e819                  bnez    s0,f0002b50 <pvPortMalloc+0x42>
f0002b3c:       /--|--|-- a081                  j       f0002b7c <pvPortMalloc+0x6e>
f0002b3e:       |  |  \-> effff597              auipc   a1,0xeffff
f0002b42:       |  |      66658593              addi    a1,a1,1638 # e00021a4 <ucHeap>
f0002b46:       |  |      05c1                  addi    a1,a1,16
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:99
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
f0002b48:       |  |      ff05f493              andi    s1,a1,-16
f0002b4c:       |  |      c104                  sw      s1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
        if( ( xWantedSize > 0 ) && /* valid size */
f0002b4e:       +--|----- c41d                  beqz    s0,f0002b7c <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:104
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
f0002b50:       |  \----> effff517              auipc   a0,0xeffff
f0002b54:       |         57050513              addi    a0,a0,1392 # e00020c0 <xNextFreeByte>
f0002b58:       |         00052903              lw      s2,0(a0)
f0002b5c:       |         008905b3              add     a1,s2,s0
f0002b60:       |         0045d613              srli    a2,a1,0x4
f0002b64:       |         7ff63613              sltiu   a2,a2,2047
f0002b68:       |         00b936b3              sltu    a3,s2,a1
f0002b6c:       |         8e75                  and     a2,a2,a3
f0002b6e:       +-------- c619                  beqz    a2,f0002b7c <pvPortMalloc+0x6e>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:110
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
            xNextFreeByte += xWantedSize;
f0002b70:       |         c10c                  sw      a1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
f0002b72:       |         31fd                  jal     f0002860 <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:119

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
f0002b74:       |     /-- c489                  beqz    s1,f0002b7e <pvPortMalloc+0x70>
f0002b76:       |     |   01248533              add     a0,s1,s2
f0002b7a:       |  /--|-- a029                  j       f0002b84 <pvPortMalloc+0x76>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
    ( void ) xTaskResumeAll();
f0002b7c:       \--|--|-> 31d5                  jal     f0002860 <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:122
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
f0002b7e:          |  \-> 857fe0ef              jal     ra,f00013d4 <vApplicationMallocFailedHook>
f0002b82:          |      4501                  li      a0,0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:127
            }
        }
    #endif

    return pvReturn;
f0002b84:          \----> 4902                  lw      s2,0(sp)
f0002b86:                 4492                  lw      s1,4(sp)
f0002b88:                 4422                  lw      s0,8(sp)
f0002b8a:                 40b2                  lw      ra,12(sp)
f0002b8c:                 0141                  addi    sp,sp,16
f0002b8e:                 8082                  ret

f0002b90 <vPortFree>:
vPortFree():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:140
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
f0002b90:       8082                    ret

f0002b92 <manufacturer_pre_test_hook>:
manufacturer_pre_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:14
// The default test hooks do nothing, but exist as the OTTF expects some hooks
// to exist. Additionally, they are weak symbols so they may be overridden by
// other custom test hooks.

OT_WEAK
bool manufacturer_pre_test_hook(void) { return true; }
f0002b92:       4505                    li      a0,1
f0002b94:       8082                    ret

f0002b96 <manufacturer_post_test_hook>:
manufacturer_post_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:17

OT_WEAK
bool manufacturer_post_test_hook(void) { return true; }
f0002b96:       4505                    li      a0,1
f0002b98:       8082                    ret
f0002b9a:       0000                    unimp
