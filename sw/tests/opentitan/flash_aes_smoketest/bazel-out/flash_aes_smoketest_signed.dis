
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest_prog_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest_prog_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xf0000480

Program Header:
    LOAD off    0x00000000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00000000 memsz 0x00001fc4 flags rw-
    LOAD off    0x00001000 vaddr 0xf0000000 paddr 0xf0000000 align 2**12
         filesz 0x00004290 memsz 0x00004290 flags rwx
    LOAD off    0x00005fc4 vaddr 0xe0001fc4 paddr 0xf0004290 align 2**12
         filesz 0x00000084 memsz 0x000001c0 flags rw-
    LOAD off    0x00000184 vaddr 0xe0002184 paddr 0xf0004314 align 2**12
         filesz 0x00000000 memsz 0x00008000 flags rw-
    LOAD off    0x00000000 vaddr 0xf0039000 paddr 0xf0039000 align 2**12
         filesz 0x00000000 memsz 0x00007000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name                    Size      VMA       LMA       File off  Algn  Flags
  0 .manifest               00000400  f0000000  f0000000  00001000  2**3  CONTENTS, ALLOC, LOAD, DATA
  1 .vectors                00000080  f0000400  f0000400  00001400  2**8  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .crt                    000000c6  f0000480  f0000480  00001480  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array             00000000  f0000548  f0000548  00006048  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .text                   00002908  f0000548  f0000548  00001548  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .shutdown               00000000  f0002e50  f0002e50  00006048  2**2  CONTENTS
  6 .rodata                 00001440  f0002e50  f0002e50  00003e50  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .static_critical        00001fc4  e0000000  e0000000  00001000  2**2  ALLOC
  8 .data                   00000084  e0001fc4  f0004290  00005fc4  2**2  CONTENTS, ALLOC, LOAD, DATA
  9 .bss                    0000013c  e0002048  f0004314  00006048  2**2  ALLOC
 10 .freertos.heap          00008000  e0002184  f0004314  00006184  2**2  ALLOC
 11 .non_volatile_scratch   00005000  f003b000  f003b000  00007000  2**11  ALLOC
 12 .non_volatile_counter_0 00000800  f003a800  f003a800  00007000  2**11  ALLOC
 13 .non_volatile_counter_1 00000800  f003a000  f003a000  00007000  2**11  ALLOC
 14 .non_volatile_counter_2 00000800  f0039800  f0039800  00007000  2**11  ALLOC
 15 .non_volatile_counter_3 00000800  f0039000  f0039000  00007000  2**11  ALLOC
 16 .logs.fields            000002d0  00010000  00010000  00006048  2**2  CONTENTS, READONLY
 17 .riscv.attributes       00000026  00000000  00000000  00006318  2**0  CONTENTS, READONLY
 18 .debug_info             0000c4ab  00000000  00000000  0000633e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev           000029be  00000000  00000000  000127e9  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges          00000088  00000000  00000000  000151a7  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line             00008e32  00000000  00000000  0001522f  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc              0000786f  00000000  00000000  0001e061  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges           00000ba0  00000000  00000000  000258d0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str              00004484  00000000  00000000  00026470  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame            00001078  00000000  00000000  0002a8f4  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
f0000000 l    d  .manifest      00000000 .manifest
f0000400 l    d  .vectors       00000000 .vectors
f0000480 l    d  .crt   00000000 .crt
f0000548 l    d  .init_array    00000000 .init_array
f0000548 l    d  .text  00000000 .text
f0002e50 l    d  .shutdown      00000000 .shutdown
f0002e50 l    d  .rodata        00000000 .rodata
e0000000 l    d  .static_critical       00000000 .static_critical
e0001fc4 l    d  .data  00000000 .data
e0002048 l    d  .bss   00000000 .bss
e0002184 l    d  .freertos.heap 00000000 .freertos.heap
f003b000 l    d  .non_volatile_scratch  00000000 .non_volatile_scratch
f003a800 l    d  .non_volatile_counter_0        00000000 .non_volatile_counter_0
f003a000 l    d  .non_volatile_counter_1        00000000 .non_volatile_counter_1
f0039800 l    d  .non_volatile_counter_2        00000000 .non_volatile_counter_2
f0039000 l    d  .non_volatile_counter_3        00000000 .non_volatile_counter_3
00010000 l    d  .logs.fields   00000000 .logs.fields
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    df *ABS*  00000000 manifest_def.c
f0000000 l     O .manifest      00000380 kManifest_
00000000 l       .debug_str     00000000 
00001aa0 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001acd l       .debug_str     00000000 
00001c78 l       .debug_str     00000000 
00001c6f l       .debug_str     00000000 
00001ad8 l       .debug_str     00000000 
00001b86 l       .debug_str     00000000 
00001bb5 l       .debug_str     00000000 
00001bbd l       .debug_str     00000000 
00001bd1 l       .debug_str     00000000 
000003ed l       .debug_str     00000000 
00001bdc l       .debug_str     00000000 
00001bea l       .debug_str     00000000 
00001bf8 l       .debug_str     00000000 
00001c09 l       .debug_str     00000000 
00001c1a l       .debug_str     00000000 
00001c3f l       .debug_str     00000000 
00001c4f l       .debug_str     00000000 
00001c5a l       .debug_str     00000000 
00001c63 l       .debug_str     00000000 
00001af7 l       .debug_str     00000000 
00001ae2 l       .debug_str     00000000 
00000839 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
00001b98 l       .debug_str     00000000 
00001b7d l       .debug_str     00000000 
00001b0e l       .debug_str     00000000 
00001b26 l       .debug_str     00000000 
00001b46 l       .debug_str     00000000 
00001b5a l       .debug_str     00000000 
00001b6c l       .debug_str     00000000 
00001b30 l       .debug_str     00000000 
00001b1c l       .debug_str     00000000 
000005bb l       .debug_str     00000000 
000005a4 l       .debug_str     00000000 
00001c28 l       .debug_str     00000000 
00001c13 l       .debug_str     00000000 
00001c83 l       .debug_str     00000000 
000003e8 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 ottf_start.o
f0000400 l       .vectors       00000000 
f0000400 l       .vectors       00000000 
f0000480 l       .crt   00000000 
f0000480 l       .crt   00000000 
f00004e4 l       .crt   00000000 init_array_loop_end
f00004d8 l       .crt   00000000 init_array_loop
f00004d8 l       .crt   00000000 
f00004e4 l       .crt   00000000 
00004495 l       .debug_info    00000000 
00000c41 l       .debug_abbrev  00000000 
f0000480 l       .vectors       00000000 
f00004e8 l       .crt   00000000 
00000330 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 crt.o
f00004e8 l       .crt   00000000 
f00004e8 l       .crt   00000000 
f000050a l       .crt   00000000 
f000050c l       .crt   00000000 
f000050c l       .crt   00000000 
000049db l       .debug_info    00000000 
00000d37 l       .debug_abbrev  00000000 
f0000546 l       .crt   00000000 
00000000 l    df *ABS*  00000000 freertos_port.o
f0000548 l       .text  00000000 
f0000548 l       .text  00000000 
f0000598 l       .text  00000000 
f000059c l       .text  00000000 
f000059c l       .text  00000000 
00003a1f l       .debug_info    00000000 
000008fb l       .debug_abbrev  00000000 
f00005c0 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.o
f00005c0 l     F .text  00000026 compute_mepc_on_synchronous_irq
f00005c0 l       .text  00000000 
f00005c0 l       .text  00000000 
f00005e4 l       .text  00000000 
f00005e8 l     F .text  0000001e save_current_sp_to_tcb
f00005e8 l       .text  00000000 
f00005e8 l       .text  00000000 
f0000604 l       .text  00000000 
f0000608 l       .text  00000000 
f0000608 l       .text  00000000 
f000064a l       .text  00000000 
f000064c l       .text  00000000 
f000064e l       .text  00000000 
f0000650 l       .text  00000000 
f0000654 l       .text  00000000 
f0000658 l       .text  00000000 
f0000658 l       .text  00000000 
f00006a0 l       .text  00000000 
f00006a2 l       .text  00000000 
f00006a6 l       .text  00000000 
f00006ac l       .text  00000000 
f00006ac l       .text  00000000 
f00006f4 l       .text  00000000 
f00006f6 l       .text  00000000 
f00006fa l       .text  00000000 
f0000700 l       .text  00000000 
f0000700 l       .text  00000000 
f0000748 l       .text  00000000 
f000074a l       .text  00000000 
f000074e l       .text  00000000 
f0000754 l       .text  00000000 
f0000754 l       .text  00000000 
f000079c l       .text  00000000 
f000079e l       .text  00000000 
f00007a2 l       .text  00000000 
f00007a8 l       .text  00000000 
f00007a8 l       .text  00000000 
000045da l       .debug_info    00000000 
00000c60 l       .debug_abbrev  00000000 
f0000810 l       .text  00000000 
00000000 l    df *ABS*  00000000 flash_aes_smoketest.c
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000810 l       .text  00000000 
f0000812 l       .text  00000000 
f0000812 l       .text  00000000 
f0000812 l       .text  00000000 
f0000834 l       .text  00000000 
f000083e l       .text  00000000 
f000083e l       .text  00000000 
f0000846 l       .text  00000000 
f0000848 l       .text  00000000 
f0000848 l       .text  00000000 
f000084a l       .text  00000000 
f000084a l       .text  00000000 
f000084c l       .text  00000000 
f000084e l       .text  00000000 
00010000 l     O .logs.fields   00000014 test_main.kLogFields
f000084e l       .text  00000000 
f000085e l       .text  00000000 
f000085e l       .text  00000000 
f0000860 l       .text  00000000 
f0000860 l       .text  00000000 
f0000878 l       .text  00000000 
f0000878 l       .text  00000000 
f000087e l       .text  00000000 
f0000882 l       .text  00000000 
f0000882 l       .text  00000000 
f0000888 l       .text  00000000 
f000088a l       .text  00000000 
f000088c l       .text  00000000 
f000088c l       .text  00000000 
f000088e l       .text  00000000 
f0000890 l       .text  00000000 
00010014 l     O .logs.fields   00000014 test_main.kLogFields.2
f0000890 l       .text  00000000 
f00008a0 l       .text  00000000 
f00008a0 l       .text  00000000 
f00008a2 l       .text  00000000 
f00008a2 l       .text  00000000 
f00008ba l       .text  00000000 
f00008ba l       .text  00000000 
f00008c0 l       .text  00000000 
f00008c4 l       .text  00000000 
f00008c4 l       .text  00000000 
f0003284 l     O .rodata        00000020 kAesModesKey256
f00032a4 l     O .rodata        00000020 kKeyShare1
f00008dc l       .text  00000000 
f00008dc l       .text  00000000 
f00008e4 l       .text  00000000 
f00008ec l       .text  00000000 
f00008ee l       .text  00000000 
f00008f2 l       .text  00000000 
f00008f4 l       .text  00000000 
f00008f8 l       .text  00000000 
f00008fc l       .text  00000000 
f00008fc l       .text  00000000 
f0000908 l       .text  00000000 
f0000908 l       .text  00000000 
f000090a l       .text  00000000 
f000091a l       .text  00000000 
f000091a l       .text  00000000 
f000092a l       .text  00000000 
f000092a l       .text  00000000 
f0000936 l       .text  00000000 
f0000936 l       .text  00000000 
f000093a l       .text  00000000 
f000093a l       .text  00000000 
f000093c l       .text  00000000 
f000093e l       .text  00000000 
f000093e l       .text  00000000 
f0000942 l       .text  00000000 
00010028 l     O .logs.fields   00000014 test_main.kLogFields.5
f0000942 l       .text  00000000 
f0000952 l       .text  00000000 
f0000952 l       .text  00000000 
f0000954 l       .text  00000000 
f0000954 l       .text  00000000 
f000096c l       .text  00000000 
f000096c l       .text  00000000 
f0000972 l       .text  00000000 
f0000976 l       .text  00000000 
f00032f4 l     O .rodata        00000040 kAesModesPlainText
f0000976 l       .text  00000000 
f0000988 l       .text  00000000 
f0000988 l       .text  00000000 
f0000990 l       .text  00000000 
f0000990 l       .text  00000000 
f000099c l       .text  00000000 
f00009ae l       .text  00000000 
f00009b8 l       .text  00000000 
f00009ba l       .text  00000000 
f00009bc l       .text  00000000 
f00009bc l       .text  00000000 
f00009cc l       .text  00000000 
f00009cc l       .text  00000000 
f00009d4 l       .text  00000000 
f00009d8 l       .text  00000000 
f00009da l       .text  00000000 
f00009de l       .text  00000000 
0001003c l     O .logs.fields   00000014 test_main.kLogFields.8
00010168 l     O .logs.fields   00000014 aes_testutils_get_status.kLogFields
f0000a04 l       .text  00000000 
f0000a04 l       .text  00000000 
f0000a0e l       .text  00000000 
f0000a10 l       .text  00000000 
f0000a12 l       .text  00000000 
f0000a12 l       .text  00000000 
f0000a16 l       .text  00000000 
f0000a20 l       .text  00000000 
f0000a20 l       .text  00000000 
f0000a22 l       .text  00000000 
f0000a34 l       .text  00000000 
f0000a34 l       .text  00000000 
f0000a3a l       .text  00000000 
f0000a3a l       .text  00000000 
f0000a3e l       .text  00000000 
f0000a3e l       .text  00000000 
f0000a40 l       .text  00000000 
f0000a40 l       .text  00000000 
f0000a50 l       .text  00000000 
f0000a50 l       .text  00000000 
f0000a52 l       .text  00000000 
f0000a58 l       .text  00000000 
f0000a58 l       .text  00000000 
f0000a5a l       .text  00000000 
f0000a5a l       .text  00000000 
f0000a5e l       .text  00000000 
f0000a5e l       .text  00000000 
f0000a6c l       .text  00000000 
f0000a6e l       .text  00000000 
f0000a72 l       .text  00000000 
f0000a7e l       .text  00000000 
f0000a7e l       .text  00000000 
f0000a80 l       .text  00000000 
f0000a80 l       .text  00000000 
f0000a94 l       .text  00000000 
f0000a94 l       .text  00000000 
f0000a9a l       .text  00000000 
f0000a9a l       .text  00000000 
f0000a9c l       .text  00000000 
f0000a9c l       .text  00000000 
f0000ab4 l       .text  00000000 
f0000ab6 l       .text  00000000 
f0000ab8 l       .text  00000000 
f0000ab8 l       .text  00000000 
f0000abc l       .text  00000000 
00010050 l     O .logs.fields   00000014 test_main.kLogFields.11
f0000abc l       .text  00000000 
f0000acc l       .text  00000000 
f0000acc l       .text  00000000 
f0000ace l       .text  00000000 
f0000ace l       .text  00000000 
f0000ae6 l       .text  00000000 
f0000ae6 l       .text  00000000 
f0000aec l       .text  00000000 
f0000af0 l       .text  00000000 
f0000af0 l       .text  00000000 
f0000af8 l       .text  00000000 
f0000af8 l       .text  00000000 
f0000b06 l       .text  00000000 
f0000b08 l       .text  00000000 
f0000b0a l       .text  00000000 
f0000b0a l       .text  00000000 
f0000b1a l       .text  00000000 
f0000b1a l       .text  00000000 
f0000b20 l       .text  00000000 
f0000b20 l       .text  00000000 
f0000b24 l       .text  00000000 
f0000b28 l       .text  00000000 
f0000b2c l       .text  00000000 
00010064 l     O .logs.fields   00000014 test_main.kLogFields.14
f0000b52 l       .text  00000000 
f0000b52 l       .text  00000000 
f0000b5c l       .text  00000000 
f0000b5e l       .text  00000000 
f0000b60 l       .text  00000000 
f0000b60 l       .text  00000000 
f0000b64 l       .text  00000000 
f0000b6e l       .text  00000000 
f0000b6e l       .text  00000000 
f0000b70 l       .text  00000000 
f0000b82 l       .text  00000000 
f0000b82 l       .text  00000000 
f0000b88 l       .text  00000000 
f0000b88 l       .text  00000000 
f0000b8c l       .text  00000000 
f0000b8c l       .text  00000000 
f0000b8e l       .text  00000000 
f0000b8e l       .text  00000000 
f0000b9e l       .text  00000000 
f0000b9e l       .text  00000000 
f0000ba0 l       .text  00000000 
f0000ba6 l       .text  00000000 
f0000ba6 l       .text  00000000 
f0000ba8 l       .text  00000000 
f0000ba8 l       .text  00000000 
f0000bac l       .text  00000000 
f0000bac l       .text  00000000 
f0000bba l       .text  00000000 
f0000bbc l       .text  00000000 
f0000bc0 l       .text  00000000 
f0000bcc l       .text  00000000 
f0000bcc l       .text  00000000 
f0000bce l       .text  00000000 
f0000bce l       .text  00000000 
f0000be2 l       .text  00000000 
f0000be2 l       .text  00000000 
f0000be8 l       .text  00000000 
f0000be8 l       .text  00000000 
f0000bea l       .text  00000000 
f0000bea l       .text  00000000 
f0000bf2 l       .text  00000000 
f0000bf4 l       .text  00000000 
f0000bf6 l       .text  00000000 
f0000bf6 l       .text  00000000 
f0000bfa l       .text  00000000 
00010078 l     O .logs.fields   00000014 test_main.kLogFields.17
f0000bfa l       .text  00000000 
f0000c0a l       .text  00000000 
f0000c0a l       .text  00000000 
f0000c0c l       .text  00000000 
f0000c0c l       .text  00000000 
f0000c24 l       .text  00000000 
f0000c24 l       .text  00000000 
f0000c2a l       .text  00000000 
f0000c2e l       .text  00000000 
f0000c2e l       .text  00000000 
f0000c34 l       .text  00000000 
f0000c36 l       .text  00000000 
f0000c38 l       .text  00000000 
f0000c38 l       .text  00000000 
f0000c3c l       .text  00000000 
0001008c l     O .logs.fields   00000014 test_main.kLogFields.20
f0000c3c l       .text  00000000 
f0000c4c l       .text  00000000 
f0000c4c l       .text  00000000 
f0000c4e l       .text  00000000 
f0000c4e l       .text  00000000 
f0000c66 l       .text  00000000 
f0000c66 l       .text  00000000 
f0000c6c l       .text  00000000 
f0000c70 l       .text  00000000 
f0000c70 l       .text  00000000 
f0003398 l     O .rodata        00000040 kAesModesCipherTextEcb256
000100b4 l     O .logs.fields   00000014 test_main.kLogFields.26
000100a0 l     O .logs.fields   00000014 test_main.kLogFields.23
f0000ca2 l       .text  00000000 
f0000ca2 l       .text  00000000 
f0000cb2 l       .text  00000000 
f0000cb6 l       .text  00000000 
f0000cba l       .text  00000000 
f0000cc0 l       .text  00000000 
f0000cc4 l       .text  00000000 
f0000ccc l       .text  00000000 
f0000ccc l       .text  00000000 
f0000cdc l       .text  00000000 
f0000cdc l       .text  00000000 
f0000cde l       .text  00000000 
f0000cde l       .text  00000000 
f0000cee l       .text  00000000 
f0000cee l       .text  00000000 
f0000d08 l       .text  00000000 
f0000d08 l       .text  00000000 
f0000d0a l       .text  00000000 
f0000d0c l       .text  00000000 
f0000d10 l       .text  00000000 
f0000d10 l       .text  00000000 
f0000d14 l       .text  00000000 
f0000d1a l       .text  00000000 
f0000d1e l       .text  00000000 
f0000d1e l       .text  00000000 
f0000d20 l       .text  00000000 
f0000d22 l       .text  00000000 
f0000d22 l       .text  00000000 
f0000d2c l       .text  00000000 
f0000d2e l       .text  00000000 
f0000d30 l       .text  00000000 
f0000d30 l       .text  00000000 
f0000d34 l       .text  00000000 
000100c8 l     O .logs.fields   00000014 test_main.kLogFields.29
f0000d34 l       .text  00000000 
f0000d44 l       .text  00000000 
f0000d44 l       .text  00000000 
f0000d46 l       .text  00000000 
f0000d46 l       .text  00000000 
f0000d5e l       .text  00000000 
f0000d5e l       .text  00000000 
f0000d64 l       .text  00000000 
f0000d68 l       .text  00000000 
f0000d68 l       .text  00000000 
f0000d70 l       .text  00000000 
f0000d70 l       .text  00000000 
f0000d7e l       .text  00000000 
f0000d80 l       .text  00000000 
f0000d82 l       .text  00000000 
f0000d82 l       .text  00000000 
f0000d92 l       .text  00000000 
f0000d92 l       .text  00000000 
f0000d98 l       .text  00000000 
f0000d98 l       .text  00000000 
f0000d9c l       .text  00000000 
f0000da0 l       .text  00000000 
f0000da4 l       .text  00000000 
000100dc l     O .logs.fields   00000014 test_main.kLogFields.31
f0000dca l       .text  00000000 
f0000dca l       .text  00000000 
f0000dd4 l       .text  00000000 
f0000dd6 l       .text  00000000 
f0000dd8 l       .text  00000000 
f0000dd8 l       .text  00000000 
f0000ddc l       .text  00000000 
f0000de6 l       .text  00000000 
f0000de6 l       .text  00000000 
f0000de8 l       .text  00000000 
f0000dfa l       .text  00000000 
f0000dfa l       .text  00000000 
f0000e00 l       .text  00000000 
f0000e00 l       .text  00000000 
f0000e04 l       .text  00000000 
f0000e04 l       .text  00000000 
f0000e06 l       .text  00000000 
f0000e06 l       .text  00000000 
f0000e16 l       .text  00000000 
f0000e16 l       .text  00000000 
f0000e18 l       .text  00000000 
f0000e1e l       .text  00000000 
f0000e1e l       .text  00000000 
f0000e20 l       .text  00000000 
f0000e20 l       .text  00000000 
f0000e24 l       .text  00000000 
f0000e24 l       .text  00000000 
f0000e32 l       .text  00000000 
f0000e34 l       .text  00000000 
f0000e38 l       .text  00000000 
f0000e44 l       .text  00000000 
f0000e44 l       .text  00000000 
f0000e46 l       .text  00000000 
f0000e46 l       .text  00000000 
f0000e5a l       .text  00000000 
f0000e5a l       .text  00000000 
f0000e60 l       .text  00000000 
f0000e60 l       .text  00000000 
f0000e62 l       .text  00000000 
f0000e62 l       .text  00000000 
f0000e78 l       .text  00000000 
f0000e7a l       .text  00000000 
f0000e7c l       .text  00000000 
f0000e7c l       .text  00000000 
f0000e80 l       .text  00000000 
000100f0 l     O .logs.fields   00000014 test_main.kLogFields.33
f0000e80 l       .text  00000000 
f0000e90 l       .text  00000000 
f0000e90 l       .text  00000000 
f0000e92 l       .text  00000000 
f0000e92 l       .text  00000000 
f0000eaa l       .text  00000000 
f0000eaa l       .text  00000000 
f0000eb0 l       .text  00000000 
f0000eb4 l       .text  00000000 
f0000eb4 l       .text  00000000 
f0000ebc l       .text  00000000 
f0000ebc l       .text  00000000 
f0000eca l       .text  00000000 
f0000ecc l       .text  00000000 
f0000ece l       .text  00000000 
f0000ece l       .text  00000000 
f0000ede l       .text  00000000 
f0000ede l       .text  00000000 
f0000ee4 l       .text  00000000 
f0000ee4 l       .text  00000000 
f0000ee8 l       .text  00000000 
f0000eec l       .text  00000000 
f0000ef0 l       .text  00000000 
00010104 l     O .logs.fields   00000014 test_main.kLogFields.36
f0000f16 l       .text  00000000 
f0000f16 l       .text  00000000 
f0000f20 l       .text  00000000 
f0000f22 l       .text  00000000 
f0000f24 l       .text  00000000 
f0000f24 l       .text  00000000 
f0000f28 l       .text  00000000 
f0000f32 l       .text  00000000 
f0000f32 l       .text  00000000 
f0000f34 l       .text  00000000 
f0000f46 l       .text  00000000 
f0000f46 l       .text  00000000 
f0000f4c l       .text  00000000 
f0000f4c l       .text  00000000 
f0000f50 l       .text  00000000 
f0000f50 l       .text  00000000 
f0000f52 l       .text  00000000 
f0000f52 l       .text  00000000 
f0000f62 l       .text  00000000 
f0000f62 l       .text  00000000 
f0000f64 l       .text  00000000 
f0000f6a l       .text  00000000 
f0000f6a l       .text  00000000 
f0000f6c l       .text  00000000 
f0000f6c l       .text  00000000 
f0000f70 l       .text  00000000 
f0000f70 l       .text  00000000 
f0000f7e l       .text  00000000 
f0000f80 l       .text  00000000 
f0000f84 l       .text  00000000 
f0000f90 l       .text  00000000 
f0000f90 l       .text  00000000 
f0000f92 l       .text  00000000 
f0000f92 l       .text  00000000 
f0000fa6 l       .text  00000000 
f0000fa6 l       .text  00000000 
f0000fac l       .text  00000000 
f0000fac l       .text  00000000 
f0000fae l       .text  00000000 
f0000fae l       .text  00000000 
f0000fb4 l       .text  00000000 
f0000fb4 l       .text  00000000 
f0000fb6 l       .text  00000000 
f0000fb8 l       .text  00000000 
f0000fba l       .text  00000000 
f0000fba l       .text  00000000 
f0000fbe l       .text  00000000 
00010118 l     O .logs.fields   00000014 test_main.kLogFields.38
f0000fbe l       .text  00000000 
f0000fce l       .text  00000000 
f0000fce l       .text  00000000 
f0000fd0 l       .text  00000000 
f0000fd0 l       .text  00000000 
f0000fe8 l       .text  00000000 
f0000fe8 l       .text  00000000 
f0000fee l       .text  00000000 
f0000ff2 l       .text  00000000 
f0000ff2 l       .text  00000000 
f0000ff6 l       .text  00000000 
f0000ff8 l       .text  00000000 
f0000ffa l       .text  00000000 
f0000ffa l       .text  00000000 
f0000ffe l       .text  00000000 
0001012c l     O .logs.fields   00000014 test_main.kLogFields.40
f0000ffe l       .text  00000000 
f000100e l       .text  00000000 
f000100e l       .text  00000000 
f0001010 l       .text  00000000 
f0001010 l       .text  00000000 
f0001028 l       .text  00000000 
f0001028 l       .text  00000000 
f000102e l       .text  00000000 
f0001032 l       .text  00000000 
f0001032 l       .text  00000000 
00010154 l     O .logs.fields   00000014 test_main.kLogFields.45
00010140 l     O .logs.fields   00000014 test_main.kLogFields.42
f000105c l       .text  00000000 
f000105c l       .text  00000000 
f000106c l       .text  00000000 
f0001070 l       .text  00000000 
f0001074 l       .text  00000000 
f000107a l       .text  00000000 
f000107e l       .text  00000000 
f0001086 l       .text  00000000 
f0001086 l       .text  00000000 
f0001096 l       .text  00000000 
f0001096 l       .text  00000000 
f0001098 l       .text  00000000 
f0001098 l       .text  00000000 
f00010a8 l       .text  00000000 
f00010a8 l       .text  00000000 
f00010c2 l       .text  00000000 
f00010c2 l       .text  00000000 
f00010c4 l       .text  00000000 
f00010c6 l       .text  00000000 
f00010ca l       .text  00000000 
f00010ca l       .text  00000000 
f00010ce l       .text  00000000 
f00010d4 l       .text  00000000 
f00010d8 l       .text  00000000 
f00010d8 l       .text  00000000 
f0001100 l       .text  00000000 
f0001100 l       .text  00000000 
00000000 l       .debug_loc     00000000 
00000029 l       .debug_loc     00000000 
00000052 l       .debug_loc     00000000 
0000007b l       .debug_loc     00000000 
000000c9 l       .debug_loc     00000000 
000000dd l       .debug_loc     00000000 
000000fc l       .debug_loc     00000000 
0000011b l       .debug_loc     00000000 
0000013a l       .debug_loc     00000000 
00000158 l       .debug_loc     00000000 
00000177 l       .debug_loc     00000000 
00000196 l       .debug_loc     00000000 
000001aa l       .debug_loc     00000000 
000001d3 l       .debug_loc     00000000 
00000221 l       .debug_loc     00000000 
00000235 l       .debug_loc     00000000 
00000254 l       .debug_loc     00000000 
00000273 l       .debug_loc     00000000 
00000292 l       .debug_loc     00000000 
000002b0 l       .debug_loc     00000000 
000002cf l       .debug_loc     00000000 
000002ee l       .debug_loc     00000000 
00000302 l       .debug_loc     00000000 
0000032b l       .debug_loc     00000000 
00000354 l       .debug_loc     00000000 
0000037d l       .debug_loc     00000000 
000003cb l       .debug_loc     00000000 
000003df l       .debug_loc     00000000 
000003fe l       .debug_loc     00000000 
0000041d l       .debug_loc     00000000 
0000043d l       .debug_loc     00000000 
0000045b l       .debug_loc     00000000 
0000047a l       .debug_loc     00000000 
00000499 l       .debug_loc     00000000 
000004ad l       .debug_loc     00000000 
000004d6 l       .debug_loc     00000000 
00000524 l       .debug_loc     00000000 
00000538 l       .debug_loc     00000000 
00000557 l       .debug_loc     00000000 
00000576 l       .debug_loc     00000000 
00000596 l       .debug_loc     00000000 
000005b4 l       .debug_loc     00000000 
000005d3 l       .debug_loc     00000000 
000005f2 l       .debug_loc     00000000 
00000606 l       .debug_loc     00000000 
0000062f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00000110 l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000000d0 l       .debug_str     00000000 
000000e9 l       .debug_str     00000000 
000000fa l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
0000086b l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
0000066b l       .debug_str     00000000 
00000875 l       .debug_str     00000000 
00000880 l       .debug_str     00000000 
000007dd l       .debug_str     00000000 
000008ae l       .debug_str     00000000 
000008cb l       .debug_str     00000000 
0000029d l       .debug_str     00000000 
000001b0 l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
000008d4 l       .debug_str     00000000 
000008e6 l       .debug_str     00000000 
000001bb l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
00000190 l       .debug_str     00000000 
00002b73 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
000001a9 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
0000012e l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000150 l       .debug_str     00000000 
00000162 l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000001c8 l       .debug_str     00000000 
000001d8 l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000001fa l       .debug_str     00000000 
00000205 l       .debug_str     00000000 
0000020d l       .debug_str     00000000 
00000220 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000241 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000261 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
0000028f l       .debug_str     00000000 
00000fd5 l       .debug_str     00000000 
000002a8 l       .debug_str     00000000 
000002bd l       .debug_str     00000000 
000002d6 l       .debug_str     00000000 
000002e8 l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
0000034d l       .debug_str     00000000 
0000031d l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
000003aa l       .debug_str     00000000 
0000035f l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
0000037d l       .debug_str     00000000 
0000038c l       .debug_str     00000000 
0000039b l       .debug_str     00000000 
000003e1 l       .debug_str     00000000 
000003b7 l       .debug_str     00000000 
000003c5 l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
0000042c l       .debug_str     00000000 
000003f4 l       .debug_str     00000000 
0000040f l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
00000445 l       .debug_str     00000000 
00000460 l       .debug_str     00000000 
000004ce l       .debug_str     00000000 
00000488 l       .debug_str     00000000 
0000049e l       .debug_str     00000000 
000004b6 l       .debug_str     00000000 
00000595 l       .debug_str     00000000 
000004e5 l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
0000050a l       .debug_str     00000000 
00000522 l       .debug_str     00000000 
0000053b l       .debug_str     00000000 
00000553 l       .debug_str     00000000 
00000570 l       .debug_str     00000000 
000005bb l       .debug_str     00000000 
000005a4 l       .debug_str     00000000 
000005c4 l       .debug_str     00000000 
00000d08 l       .debug_str     00000000 
000005e3 l       .debug_str     00000000 
000005d6 l       .debug_str     00000000 
00002983 l       .debug_str     00000000 
00001c54 l       .debug_str     00000000 
000005f2 l       .debug_str     00000000 
00000603 l       .debug_str     00000000 
00000610 l       .debug_str     00000000 
0000061b l       .debug_str     00000000 
00000625 l       .debug_str     00000000 
00000679 l       .debug_str     00000000 
00002d3e l       .debug_str     00000000 
0000066f l       .debug_str     00000000 
00000667 l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
0000067e l       .debug_str     00000000 
0000068f l       .debug_str     00000000 
0000069c l       .debug_str     00000000 
000005db l       .debug_str     00000000 
000006af l       .debug_str     00000000 
000006bc l       .debug_str     00000000 
000006d1 l       .debug_str     00000000 
000006e8 l       .debug_str     00000000 
000006f8 l       .debug_str     00000000 
00000706 l       .debug_str     00000000 
0000070d l       .debug_str     00000000 
000007d5 l       .debug_str     00000000 
0000043b l       .debug_str     00000000 
000003b2 l       .debug_str     00000000 
0000073e l       .debug_str     00000000 
00000434 l       .debug_str     00000000 
0000047b l       .debug_str     00000000 
000004d6 l       .debug_str     00000000 
000007a6 l       .debug_str     00000000 
000007bb l       .debug_str     00000000 
000007c7 l       .debug_str     00000000 
0000071b l       .debug_str     00000000 
0000072f l       .debug_str     00000000 
00000746 l       .debug_str     00000000 
0000075b l       .debug_str     00000000 
00000776 l       .debug_str     00000000 
0000078d l       .debug_str     00000000 
000007f0 l       .debug_str     00000000 
00000879 l       .debug_str     00000000 
000007e9 l       .debug_str     00000000 
00000802 l       .debug_str     00000000 
00000c22 l       .debug_str     00000000 
0000080d l       .debug_str     00000000 
00000819 l       .debug_str     00000000 
0000082c l       .debug_str     00000000 
0000083e l       .debug_str     00000000 
00000839 l       .debug_str     00000000 
0000084b l       .debug_str     00000000 
0000085f l       .debug_str     00000000 
00000884 l       .debug_str     00000000 
00000898 l       .debug_str     00000000 
000008bc l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
000008df l       .debug_str     00000000 
000008dd l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
f0001100 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_aes_autogen.c
f0001100 l       .text  00000000 
f0001100 l       .text  00000000 
f0001100 l       .text  00000000 
f0001100 l       .text  00000000 
f0001102 l       .text  00000000 
f0001104 l       .text  00000000 
f0001108 l       .text  00000000 
f000110a l       .text  00000000 
f000110c l       .text  00000000 
f000110e l       .text  00000000 
f000110e l       .text  00000000 
00000658 l       .debug_loc     00000000 
00000673 l       .debug_loc     00000000 
0000068e l       .debug_loc     00000000 
000006a9 l       .debug_loc     00000000 
000006c4 l       .debug_loc     00000000 
000006e5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000008eb l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
0000029d l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000241 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000261 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
0000028f l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
0000094d l       .debug_str     00000000 
00000917 l       .debug_str     00000000 
00000936 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000006af l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
0000066b l       .debug_str     00000000 
0000095b l       .debug_str     00000000 
00000972 l       .debug_str     00000000 
00000975 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
00000991 l       .debug_str     00000000 
00000980 l       .debug_str     00000000 
0000097b l       .debug_str     00000000 
00001d4b l       .debug_str     00000000 
000009a4 l       .debug_str     00000000 
000009b9 l       .debug_str     00000000 
000009c3 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
000009da l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
00000b84 l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
000009ee l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
000009f8 l       .debug_str     00000000 
00000955 l       .debug_str     00000000 
00000a1c l       .debug_str     00000000 
00000a26 l       .debug_str     00000000 
0000068f l       .debug_str     00000000 
0000066f l       .debug_str     00000000 
00000667 l       .debug_str     00000000 
00000a0c l       .debug_str     00000000 
00000044 l       .debug_frame   00000000 
f000110e l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_aes.c
f000110e l       .text  00000000 
f000110e l       .text  00000000 
f000110e l       .text  00000000 
f000110e l       .text  00000000 
f0001110 l       .text  00000000 
f0001112 l       .text  00000000 
f0001112 l       .text  00000000 
f0001116 l       .text  00000000 
f0001116 l       .text  00000000 
f0001118 l       .text  00000000 
f0001118 l       .text  00000000 
f000111a l       .text  00000000 
f000111a l       .text  00000000 
f000111c l       .text  00000000 
f000111c l       .text  00000000 
f000111e l       .text  00000000 
f000111e l       .text  00000000 
f0001120 l       .text  00000000 
f0001120 l       .text  00000000 
f0001122 l       .text  00000000 
f0001124 l       .text  00000000 
f0001124 l       .text  00000000 
f000112a l       .text  00000000 
f000112a l       .text  00000000 
f000112e l       .text  00000000 
f000112e l       .text  00000000 
f0001130 l       .text  00000000 
f0001130 l       .text  00000000 
f0001132 l       .text  00000000 
f0001132 l       .text  00000000 
f0001138 l       .text  00000000 
f0001138 l       .text  00000000 
f000113a l       .text  00000000 
f000113a l       .text  00000000 
f000113c l       .text  00000000 
f000113c l       .text  00000000 
f000113e l       .text  00000000 
f000113e l       .text  00000000 
f0001140 l       .text  00000000 
f0001140 l       .text  00000000 
f0001142 l       .text  00000000 
f0001142 l       .text  00000000 
f0001142 l       .text  00000000 
f0001142 l       .text  00000000 
f0001142 l       .text  00000000 
f0001142 l       .text  00000000 
f000114a l       .text  00000000 
f0001152 l       .text  00000000 
f0001154 l       .text  00000000 
f000115a l       .text  00000000 
f000115e l       .text  00000000 
f0001160 l       .text  00000000 
f0001162 l       .text  00000000 
f0001164 l       .text  00000000 
f0001164 l       .text  00000000 
f0001168 l       .text  00000000 
f0001168 l       .text  00000000 
f000116c l       .text  00000000 
f000116c l       .text  00000000 
f0001172 l       .text  00000000 
f0001172 l       .text  00000000 
f0001174 l       .text  00000000 
f0001174 l       .text  00000000 
f0001176 l       .text  00000000 
f000117a l       .text  00000000 
f000117a l       .text  00000000 
f000117e l       .text  00000000 
f000117e l       .text  00000000 
f0001180 l       .text  00000000 
f0001180 l       .text  00000000 
f0001188 l       .text  00000000 
f000118c l       .text  00000000 
f000118c l       .text  00000000 
f000118e l       .text  00000000 
f000118e l       .text  00000000 
f0001192 l       .text  00000000 
f0001192 l       .text  00000000 
f0001196 l       .text  00000000 
f000119a l       .text  00000000 
f000119a l       .text  00000000 
f000119c l       .text  00000000 
f000119c l       .text  00000000 
f00011a0 l       .text  00000000 
f00011a2 l       .text  00000000 
f00011a6 l       .text  00000000 
f00011a6 l       .text  00000000 
f00011a8 l       .text  00000000 
f00011ac l       .text  00000000 
f00011b0 l       .text  00000000 
f00011b0 l       .text  00000000 
f00011b2 l       .text  00000000 
f00011b2 l       .text  00000000 
f00011b4 l       .text  00000000 
f00011b4 l       .text  00000000 
f00011bc l       .text  00000000 
f00011bc l       .text  00000000 
f00011be l       .text  00000000 
f00011be l       .text  00000000 
f00011c0 l       .text  00000000 
f00011c0 l       .text  00000000 
f00011c4 l       .text  00000000 
f00011c4 l       .text  00000000 
f00011c8 l       .text  00000000 
f00011c8 l       .text  00000000 
f00011ca l       .text  00000000 
f00011ca l       .text  00000000 
f00011cc l       .text  00000000 
f00011cc l       .text  00000000 
f00011ce l       .text  00000000 
f00011ce l       .text  00000000 
f00011d2 l       .text  00000000 
f00011d2 l       .text  00000000 
f00011d6 l       .text  00000000 
f00011d6 l       .text  00000000 
f00011d8 l       .text  00000000 
f00011dc l       .text  00000000 
f00011e0 l       .text  00000000 
f00011e0 l       .text  00000000 
f00011e2 l       .text  00000000 
f00011e2 l       .text  00000000 
f00011e4 l       .text  00000000 
f00011e4 l       .text  00000000 
f00011e8 l       .text  00000000 
f00011e8 l       .text  00000000 
f00011ea l       .text  00000000 
f00011ee l       .text  00000000 
f00011ee l       .text  00000000 
f00011f0 l       .text  00000000 
f00011f0 l       .text  00000000 
f00011f4 l       .text  00000000 
f00011fa l       .text  00000000 
f00011fa l       .text  00000000 
f00011fc l       .text  00000000 
f0001202 l       .text  00000000 
f0001202 l       .text  00000000 
f0001204 l       .text  00000000 
f0001204 l       .text  00000000 
f0001206 l       .text  00000000 
f0001206 l       .text  00000000 
f0001208 l       .text  00000000 
f0001208 l       .text  00000000 
f000120c l       .text  00000000 
f000120c l       .text  00000000 
f000120e l       .text  00000000 
f000120e l       .text  00000000 
f0001212 l       .text  00000000 
f0001212 l       .text  00000000 
f0001216 l       .text  00000000 
f0001216 l       .text  00000000 
f0001218 l       .text  00000000 
f000121e l       .text  00000000 
f000121e l       .text  00000000 
f0001220 l       .text  00000000 
f0001220 l       .text  00000000 
f0001222 l       .text  00000000 
f0001222 l       .text  00000000 
f0001224 l       .text  00000000 
f0001224 l       .text  00000000 
f0001228 l       .text  00000000 
f0001228 l       .text  00000000 
f000122a l       .text  00000000 
f000122e l       .text  00000000 
f0001230 l       .text  00000000 
f0001230 l       .text  00000000 
f0001234 l       .text  00000000 
f0001234 l       .text  00000000 
f0001236 l       .text  00000000 
f0001236 l       .text  00000000 
f0001238 l       .text  00000000 
f0001238 l       .text  00000000 
f000123c l       .text  00000000 
f000123c l       .text  00000000 
f000123e l       .text  00000000 
f000123e l       .text  00000000 
f0001242 l       .text  00000000 
f0001242 l       .text  00000000 
f0001244 l       .text  00000000 
f0001244 l       .text  00000000 
f0001246 l       .text  00000000 
f0001246 l       .text  00000000 
f000124c l       .text  00000000 
f000124c l       .text  00000000 
f000124e l       .text  00000000 
f000124e l       .text  00000000 
f0001250 l       .text  00000000 
f0001250 l       .text  00000000 
f0001252 l       .text  00000000 
f0001252 l       .text  00000000 
f0001256 l       .text  00000000 
f0001256 l       .text  00000000 
f0001258 l       .text  00000000 
f000125a l       .text  00000000 
f000125c l       .text  00000000 
f000125c l       .text  00000000 
f000125e l       .text  00000000 
f000125e l       .text  00000000 
f0001262 l       .text  00000000 
f0001268 l       .text  00000000 
f000126c l       .text  00000000 
f0001270 l       .text  00000000 
f0001270 l       .text  00000000 
f0001272 l       .text  00000000 
f0001274 l       .text  00000000 
f000127a l       .text  00000000 
f000127a l       .text  00000000 
f000127a l       .text  00000000 
f000127a l       .text  00000000 
f000127a l       .text  00000000 
f000127a l       .text  00000000 
f000127a l       .text  00000000 
f000127c l       .text  00000000 
f000127c l       .text  00000000 
f000127e l       .text  00000000 
f000127e l       .text  00000000 
f0001282 l       .text  00000000 
f0001282 l       .text  00000000 
f0001288 l       .text  00000000 
f0001288 l       .text  00000000 
f000128a l       .text  00000000 
f000128a l       .text  00000000 
f000128e l       .text  00000000 
f000128e l       .text  00000000 
f0001290 l       .text  00000000 
f0001290 l       .text  00000000 
f0001292 l       .text  00000000 
f0001292 l       .text  00000000 
f0001294 l       .text  00000000 
f0001294 l       .text  00000000 
f0001296 l       .text  00000000 
f0001296 l       .text  00000000 
f0001298 l       .text  00000000 
f0001298 l       .text  00000000 
f000129c l       .text  00000000 
f000129c l       .text  00000000 
f00012a2 l       .text  00000000 
f00012a2 l       .text  00000000 
f00012a6 l       .text  00000000 
f00012a6 l       .text  00000000 
f00012a8 l       .text  00000000 
f00012a8 l       .text  00000000 
f00012aa l       .text  00000000 
f00012aa l       .text  00000000 
f00012ae l       .text  00000000 
f00012b0 l       .text  00000000 
f00012b0 l       .text  00000000 
f00012b4 l       .text  00000000 
f00012b4 l       .text  00000000 
f00012b4 l       .text  00000000 
f00012b4 l       .text  00000000 
f00012b4 l       .text  00000000 
f00012b4 l       .text  00000000 
f00012b6 l       .text  00000000 
f00012b6 l       .text  00000000 
f00012b8 l       .text  00000000 
f00012b8 l       .text  00000000 
f00012bc l       .text  00000000 
f00012bc l       .text  00000000 
f00012c2 l       .text  00000000 
f00012c2 l       .text  00000000 
f00012c4 l       .text  00000000 
f00012c4 l       .text  00000000 
f00012c8 l       .text  00000000 
f00012c8 l       .text  00000000 
f00012ca l       .text  00000000 
f00012ca l       .text  00000000 
f00012cc l       .text  00000000 
f00012cc l       .text  00000000 
f00012ce l       .text  00000000 
f00012ce l       .text  00000000 
f00012d0 l       .text  00000000 
f00012d0 l       .text  00000000 
f00012d6 l       .text  00000000 
f00012d6 l       .text  00000000 
f00012d8 l       .text  00000000 
f00012d8 l       .text  00000000 
f00012da l       .text  00000000 
f00012da l       .text  00000000 
f00012dc l       .text  00000000 
f00012dc l       .text  00000000 
f00012e0 l       .text  00000000 
f00012e0 l       .text  00000000 
f00012e4 l       .text  00000000 
f00012e6 l       .text  00000000 
f00012e6 l       .text  00000000 
f00012e8 l       .text  00000000 
f00012ea l       .text  00000000 
f00012ea l       .text  00000000 
f00012ea l       .text  00000000 
f00012ea l       .text  00000000 
f00012ea l       .text  00000000 
f00012ea l       .text  00000000 
f00012f2 l       .text  00000000 
f00012f8 l       .text  00000000 
f00012f8 l       .text  00000000 
f00012fa l       .text  00000000 
f00012fa l       .text  00000000 
f00012fe l       .text  00000000 
f00012fe l       .text  00000000 
f0001304 l       .text  00000000 
f0001304 l       .text  00000000 
f0001306 l       .text  00000000 
f0001306 l       .text  00000000 
f0001308 l       .text  00000000 
f0001308 l       .text  00000000 
f000130a l       .text  00000000 
f000130a l       .text  00000000 
f000130c l       .text  00000000 
f000130c l       .text  00000000 
f000130e l       .text  00000000 
f000130e l       .text  00000000 
f0001310 l       .text  00000000 
f0001310 l       .text  00000000 
f0001312 l       .text  00000000 
f0001312 l       .text  00000000 
f0001314 l       .text  00000000 
f0001316 l       .text  00000000 
f0001316 l       .text  00000000 
f000131a l       .text  00000000 
f000131a l       .text  00000000 
f000131c l       .text  00000000 
f000131c l       .text  00000000 
f000131e l       .text  00000000 
f000131e l       .text  00000000 
f0001322 l       .text  00000000 
f0001322 l       .text  00000000 
f0001324 l       .text  00000000 
f0001326 l       .text  00000000 
f0001328 l       .text  00000000 
f0001328 l       .text  00000000 
f0001328 l       .text  00000000 
f0001328 l       .text  00000000 
f0001328 l       .text  00000000 
f0001328 l       .text  00000000 
f0001330 l       .text  00000000 
f0001336 l       .text  00000000 
f0001338 l       .text  00000000 
f000133c l       .text  00000000 
f000133e l       .text  00000000 
f000134c l       .text  00000000 
f000134c l       .text  00000000 
f000134e l       .text  00000000 
f000134e l       .text  00000000 
f0001352 l       .text  00000000 
f0001352 l       .text  00000000 
f0001354 l       .text  00000000 
f0001358 l       .text  00000000 
f0001358 l       .text  00000000 
f000135a l       .text  00000000 
f000135a l       .text  00000000 
f000135e l       .text  00000000 
f000135e l       .text  00000000 
f0001362 l       .text  00000000 
f0001362 l       .text  00000000 
f0001364 l       .text  00000000 
f0001364 l       .text  00000000 
f0001368 l       .text  00000000 
f0001368 l       .text  00000000 
f000136c l       .text  00000000 
f000136c l       .text  00000000 
f000136e l       .text  00000000 
f000136e l       .text  00000000 
f0001372 l       .text  00000000 
f0001372 l       .text  00000000 
f0001376 l       .text  00000000 
f0001376 l       .text  00000000 
f0001378 l       .text  00000000 
f0001378 l       .text  00000000 
f000137c l       .text  00000000 
f000137c l       .text  00000000 
f0001380 l       .text  00000000 
f0001380 l       .text  00000000 
f0001382 l       .text  00000000 
f0001382 l       .text  00000000 
f0001386 l       .text  00000000 
f0001386 l       .text  00000000 
f000138a l       .text  00000000 
f000138a l       .text  00000000 
f000138c l       .text  00000000 
f000138c l       .text  00000000 
f0001390 l       .text  00000000 
f0001390 l       .text  00000000 
f0001392 l       .text  00000000 
f000139a l       .text  00000000 
f000139e l       .text  00000000 
f000139e l       .text  00000000 
00000700 l       .debug_loc     00000000 
00000726 l       .debug_loc     00000000 
00000741 l       .debug_loc     00000000 
00000760 l       .debug_loc     00000000 
0000077c l       .debug_loc     00000000 
0000079a l       .debug_loc     00000000 
000007c0 l       .debug_loc     00000000 
000007e6 l       .debug_loc     00000000 
0000080c l       .debug_loc     00000000 
00000832 l       .debug_loc     00000000 
0000084d l       .debug_loc     00000000 
00000874 l       .debug_loc     00000000 
00000896 l       .debug_loc     00000000 
000008d2 l       .debug_loc     00000000 
000008ed l       .debug_loc     00000000 
00000910 l       .debug_loc     00000000 
00000932 l       .debug_loc     00000000 
0000094d l       .debug_loc     00000000 
00000968 l       .debug_loc     00000000 
0000098a l       .debug_loc     00000000 
000009ac l       .debug_loc     00000000 
000009cc l       .debug_loc     00000000 
000009ec l       .debug_loc     00000000 
00000a1c l       .debug_loc     00000000 
00000a3e l       .debug_loc     00000000 
00000a5e l       .debug_loc     00000000 
00000a7e l       .debug_loc     00000000 
00000aa4 l       .debug_loc     00000000 
00000aca l       .debug_loc     00000000 
00000af2 l       .debug_loc     00000000 
00000b3f l       .debug_loc     00000000 
00000b5a l       .debug_loc     00000000 
00000b7c l       .debug_loc     00000000 
00000b9d l       .debug_loc     00000000 
00000bd0 l       .debug_loc     00000000 
00000bf6 l       .debug_loc     00000000 
00000c11 l       .debug_loc     00000000 
00000c37 l       .debug_loc     00000000 
00000c6a l       .debug_loc     00000000 
00000c90 l       .debug_loc     00000000 
00000cab l       .debug_loc     00000000 
00000cd1 l       .debug_loc     00000000 
00000d21 l       .debug_loc     00000000 
00000d55 l       .debug_loc     00000000 
00000d7b l       .debug_loc     00000000 
00000daf l       .debug_loc     00000000 
00000dd5 l       .debug_loc     00000000 
00000dfb l       .debug_loc     00000000 
00000e1a l       .debug_loc     00000000 
00000e36 l       .debug_loc     00000000 
00000e51 l       .debug_loc     00000000 
00000e79 l       .debug_loc     00000000 
00000ec9 l       .debug_loc     00000000 
00000efd l       .debug_loc     00000000 
00000f23 l       .debug_loc     00000000 
00000f57 l       .debug_loc     00000000 
00000f7d l       .debug_loc     00000000 
00000f98 l       .debug_loc     00000000 
00000fb3 l       .debug_loc     00000000 
00001003 l       .debug_loc     00000000 
00001037 l       .debug_loc     00000000 
0000106b l       .debug_loc     00000000 
00001091 l       .debug_loc     00000000 
000010c2 l       .debug_loc     00000000 
000010e8 l       .debug_loc     00000000 
00001119 l       .debug_loc     00000000 
0000113f l       .debug_loc     00000000 
0000115a l       .debug_loc     00000000 
0000118d l       .debug_loc     00000000 
000011a8 l       .debug_loc     00000000 
000011d9 l       .debug_loc     00000000 
0000120c l       .debug_loc     00000000 
00001233 l       .debug_loc     00000000 
0000124e l       .debug_loc     00000000 
00001275 l       .debug_loc     00000000 
00001290 l       .debug_loc     00000000 
000012d3 l       .debug_loc     00000000 
00001307 l       .debug_loc     00000000 
0000133b l       .debug_loc     00000000 
00001361 l       .debug_loc     00000000 
00001387 l       .debug_loc     00000000 
000013ad l       .debug_loc     00000000 
000013dc l       .debug_loc     00000000 
000013f7 l       .debug_loc     00000000 
0000145f l       .debug_loc     00000000 
00001485 l       .debug_loc     00000000 
000014ab l       .debug_loc     00000000 
000014c6 l       .debug_loc     00000000 
000014e1 l       .debug_loc     00000000 
000014fc l       .debug_loc     00000000 
00001517 l       .debug_loc     00000000 
00001532 l       .debug_loc     00000000 
0000154d l       .debug_loc     00000000 
00001568 l       .debug_loc     00000000 
00001583 l       .debug_loc     00000000 
0000159e l       .debug_loc     00000000 
000015b9 l       .debug_loc     00000000 
000015d4 l       .debug_loc     00000000 
00001624 l       .debug_loc     00000000 
00001658 l       .debug_loc     00000000 
0000168c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000a35 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000001f8 l       .debug_ranges  00000000 
0000029d l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000241 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000261 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
0000028f l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
0000034d l       .debug_str     00000000 
0000031d l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
000003aa l       .debug_str     00000000 
0000035f l       .debug_str     00000000 
0000036e l       .debug_str     00000000 
0000037d l       .debug_str     00000000 
0000038c l       .debug_str     00000000 
0000039b l       .debug_str     00000000 
000003e1 l       .debug_str     00000000 
000003b7 l       .debug_str     00000000 
000003c5 l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
0000042c l       .debug_str     00000000 
000003f4 l       .debug_str     00000000 
0000040f l       .debug_str     00000000 
00000473 l       .debug_str     00000000 
00000445 l       .debug_str     00000000 
00000460 l       .debug_str     00000000 
000004ce l       .debug_str     00000000 
00000488 l       .debug_str     00000000 
0000049e l       .debug_str     00000000 
000004b6 l       .debug_str     00000000 
00000ab8 l       .debug_str     00000000 
00000a51 l       .debug_str     00000000 
00000a65 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00000a9f l       .debug_str     00000000 
00000595 l       .debug_str     00000000 
000004e5 l       .debug_str     00000000 
000004f7 l       .debug_str     00000000 
0000050a l       .debug_str     00000000 
00000522 l       .debug_str     00000000 
0000053b l       .debug_str     00000000 
00000553 l       .debug_str     00000000 
00000570 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
00000ac8 l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
00000b84 l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
000009ee l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00000adb l       .debug_str     00000000 
000009b9 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
00000af1 l       .debug_str     00000000 
0000066b l       .debug_str     00000000 
00000b0a l       .debug_str     00000000 
00000b13 l       .debug_str     00000000 
0000066f l       .debug_str     00000000 
00000667 l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000b1f l       .debug_str     00000000 
00000972 l       .debug_str     00000000 
000009c3 l       .debug_str     00000000 
000009da l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
00000b33 l       .debug_str     00000000 
000006f8 l       .debug_str     00000000 
00003361 l       .debug_str     00000000 
00000b46 l       .debug_str     00000000 
00000f61 l       .debug_str     00000000 
000007dd l       .debug_str     00000000 
00000679 l       .debug_str     00000000 
0000068f l       .debug_str     00000000 
00000898 l       .debug_str     00000000 
000007d5 l       .debug_str     00000000 
0000043b l       .debug_str     00000000 
000003b2 l       .debug_str     00000000 
0000073e l       .debug_str     00000000 
00000434 l       .debug_str     00000000 
0000047b l       .debug_str     00000000 
000004d6 l       .debug_str     00000000 
000007a6 l       .debug_str     00000000 
000007bb l       .debug_str     00000000 
000007c7 l       .debug_str     00000000 
0000071b l       .debug_str     00000000 
0000072f l       .debug_str     00000000 
00000746 l       .debug_str     00000000 
0000075b l       .debug_str     00000000 
00000776 l       .debug_str     00000000 
0000078d l       .debug_str     00000000 
0000095b l       .debug_str     00000000 
00000975 l       .debug_str     00000000 
00000991 l       .debug_str     00000000 
00000980 l       .debug_str     00000000 
0000097b l       .debug_str     00000000 
00001d4b l       .debug_str     00000000 
000009a4 l       .debug_str     00000000 
00000b4f l       .debug_str     00000000 
00000b5d l       .debug_str     00000000 
00000b65 l       .debug_str     00000000 
00000839 l       .debug_str     00000000 
00000b76 l       .debug_str     00000000 
00000b7f l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
000008df l       .debug_str     00000000 
0000070d l       .debug_str     00000000 
00000880 l       .debug_str     00000000 
00000c22 l       .debug_str     00000000 
000002a1 l       .debug_str     00000000 
00000018 l       .debug_ranges  00000000 
00000030 l       .debug_ranges  00000000 
00000060 l       .debug_ranges  00000000 
00000048 l       .debug_ranges  00000000 
00000090 l       .debug_ranges  00000000 
00000078 l       .debug_ranges  00000000 
000000c8 l       .debug_ranges  00000000 
000000a8 l       .debug_ranges  00000000 
0000085f l       .debug_str     00000000 
00000b8b l       .debug_str     00000000 
0000082c l       .debug_str     00000000 
00000108 l       .debug_ranges  00000000 
000000e8 l       .debug_ranges  00000000 
00000b9b l       .debug_str     00000000 
00000bac l       .debug_str     00000000 
0000084b l       .debug_str     00000000 
00000140 l       .debug_ranges  00000000 
00000128 l       .debug_ranges  00000000 
00000c00 l       .debug_str     00000000 
00000c32 l       .debug_str     00000000 
00000c3d l       .debug_str     00000000 
00000c49 l       .debug_str     00000000 
00000c55 l       .debug_str     00000000 
00000178 l       .debug_ranges  00000000 
00000160 l       .debug_ranges  00000000 
000001a8 l       .debug_ranges  00000000 
00000190 l       .debug_ranges  00000000 
00000ac0 l       .debug_str     00000000 
00000bbe l       .debug_str     00000000 
00000bca l       .debug_str     00000000 
00000bda l       .debug_str     00000000 
00000bea l       .debug_str     00000000 
00000819 l       .debug_str     00000000 
00003612 l       .debug_str     00000000 
00000c15 l       .debug_str     00000000 
000001d8 l       .debug_ranges  00000000 
000001c0 l       .debug_ranges  00000000 
00000884 l       .debug_str     00000000 
000007f0 l       .debug_str     00000000 
00000879 l       .debug_str     00000000 
000007e9 l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
00000c25 l       .debug_str     00000000 
00000802 l       .debug_str     00000000 
000008bc l       .debug_str     00000000 
0000083e l       .debug_str     00000000 
00000c62 l       .debug_str     00000000 
0000067e l       .debug_str     00000000 
00000078 l       .debug_frame   00000000 
f0001142 l       .text  00000000 
f000127a l       .text  00000000 
f00012b4 l       .text  00000000 
f00012ea l       .text  00000000 
f0001328 l       .text  00000000 
f000139e l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_main.c
f000139e l       .text  00000000 
f000139e l       .text  00000000 
f000139e l       .text  00000000 
f00013a0 l       .text  00000000 
f00013a0 l       .text  00000000 
f00013a2 l       .text  00000000 
f00013ac l       .text  00000000 
f00013ae l       .text  00000000 
f00013b6 l       .text  00000000 
f00013b6 l       .text  00000000 
f00013c0 l       .text  00000000 
0001017c l     O .logs.fields   00000014 ottf_machine_ecall_handler.kLogFields
f00013c2 l       .text  00000000 
f00013d4 l       .text  00000000 
f00013d4 l       .text  00000000 
f00013ea l       .text  00000000 
f00013ea l       .text  00000000 
f00013f0 l       .text  00000000 
f00013f0 l       .text  00000000 
e0002048 l     O .bss   00000004 uart0
f00013f0 l       .text  00000000 
f00013f0 l       .text  00000000 
f00013f0 l       .text  00000000 
f00013f2 l       .text  00000000 
f00013fa l       .text  00000000 
f0001400 l       .text  00000000 
f0001404 l       .text  00000000 
f0001404 l       .text  00000000 
f000140e l       .text  00000000 
f000141e l       .text  00000000 
f000151e l     F .text  000000d2 init_uart
f0001420 l       .text  00000000 
f0001422 l       .text  00000000 
f0001422 l       .text  00000000 
f0001426 l       .text  00000000 
f0001428 l       .text  00000000 
00010190 l     O .logs.fields   00000014 _ottf_main.kLogFields
f000142a l       .text  00000000 
f000143a l       .text  00000000 
f000143a l       .text  00000000 
f000143c l       .text  00000000 
f000143c l       .text  00000000 
f0001454 l       .text  00000000 
f0001454 l       .text  00000000 
f000145e l       .text  00000000 
f0001460 l       .text  00000000 
f0001462 l       .text  00000000 
f0001462 l       .text  00000000 
f0001466 l       .text  00000000 
f0001468 l       .text  00000000 
000101a4 l     O .logs.fields   00000014 _ottf_main.kLogFields.3
f0001468 l       .text  00000000 
f0001478 l       .text  00000000 
f0001478 l       .text  00000000 
f000147a l       .text  00000000 
f000147a l       .text  00000000 
f0001492 l       .text  00000000 
f0001492 l       .text  00000000 
f0001498 l       .text  00000000 
f000149a l       .text  00000000 
f000149a l       .text  00000000 
f00014a0 l       .text  00000000 
f00014b0 l       .text  00000000 
f00014b4 l       .text  00000000 
f00014b6 l       .text  00000000 
f00015f0 l     F .text  0000008e test_wrapper
f00014b6 l       .text  00000000 
f00014c6 l       .text  00000000 
f00014d4 l       .text  00000000 
f00014d4 l       .text  00000000 
f00014d8 l       .text  00000000 
f00014d8 l       .text  00000000 
f00014da l       .text  00000000 
f00014de l       .text  00000000 
f00014de l       .text  00000000 
f00014e2 l       .text  00000000 
000101b8 l     O .logs.fields   00000014 _ottf_main.kLogFields.7
f00014e4 l       .text  00000000 
f00014f2 l       .text  00000000 
f00014f2 l       .text  00000000 
f00014f4 l       .text  00000000 
f00014f4 l       .text  00000000 
f000150a l       .text  00000000 
f000150a l       .text  00000000 
f0001510 l       .text  00000000 
f0001512 l       .text  00000000 
f0001512 l       .text  00000000 
f000151e l       .text  00000000 
f000151e l       .text  00000000 
f000151e l       .text  00000000 
f000151e l       .text  00000000 
f000151e l       .text  00000000 
f0001520 l       .text  00000000 
f0001520 l       .text  00000000 
f0001520 l       .text  00000000 
f0001526 l       .text  00000000 
f0001536 l       .text  00000000 
f0001536 l       .text  00000000 
f000153e l       .text  00000000 
f0001540 l       .text  00000000 
f0001540 l       .text  00000000 
f0001542 l       .text  00000000 
f0001542 l       .text  00000000 
f0001544 l       .text  00000000 
f0001546 l       .text  00000000 
000101cc l     O .logs.fields   00000014 init_uart.kLogFields
f0001546 l       .text  00000000 
f0001556 l       .text  00000000 
f0001556 l       .text  00000000 
f0001558 l       .text  00000000 
f0001558 l       .text  00000000 
f000156e l       .text  00000000 
f000156e l       .text  00000000 
f0001574 l       .text  00000000 
f0001576 l       .text  00000000 
f0001576 l       .text  00000000 
f00015a2 l       .text  00000000 
f00015a4 l       .text  00000000 
f00015a6 l       .text  00000000 
f00015a6 l       .text  00000000 
f00015a8 l       .text  00000000 
f00015aa l       .text  00000000 
000101e0 l     O .logs.fields   00000014 init_uart.kLogFields.11
f00015aa l       .text  00000000 
f00015ba l       .text  00000000 
f00015ba l       .text  00000000 
f00015bc l       .text  00000000 
f00015bc l       .text  00000000 
f00015d2 l       .text  00000000 
f00015d2 l       .text  00000000 
f00015d8 l       .text  00000000 
f00015da l       .text  00000000 
f00015da l       .text  00000000 
f00015e6 l       .text  00000000 
f00015e6 l       .text  00000000 
f00015f0 l       .text  00000000 
f00015f0 l       .text  00000000 
f00015f0 l       .text  00000000 
f00015f0 l       .text  00000000 
f00015f0 l       .text  00000000 
f00015f2 l       .text  00000000 
f00015f8 l       .text  00000000 
f00015fa l       .text  00000000 
f00015fe l       .text  00000000 
f0001602 l       .text  00000000 
f0001602 l       .text  00000000 
f0001604 l       .text  00000000 
f0001608 l       .text  00000000 
f0001608 l       .text  00000000 
f000160a l       .text  00000000 
f000160e l       .text  00000000 
f000160e l       .text  00000000 
f000161e l       .text  00000000 
f000161e l       .text  00000000 
f0001628 l       .text  00000000 
f000162a l       .text  00000000 
f0001632 l       .text  00000000 
f0001636 l       .text  00000000 
f0001638 l       .text  00000000 
f000163a l       .text  00000000 
f000163a l       .text  00000000 
f0001644 l       .text  00000000 
f0001646 l       .text  00000000 
000101f4 l     O .logs.fields   00000014 report_test_status.kLogFields
f0001648 l       .text  00000000 
f0001656 l       .text  00000000 
f0001656 l       .text  00000000 
f0001658 l       .text  00000000 
f000166e l       .text  00000000 
f000166e l       .text  00000000 
f0001670 l       .text  00000000 
f0001670 l       .text  00000000 
f0001674 l       .text  00000000 
f0001674 l       .text  00000000 
f000167e l       .text  00000000 
f000167e l       .text  00000000 
000016b2 l       .debug_loc     00000000 
000016cd l       .debug_loc     00000000 
000016e8 l       .debug_loc     00000000 
00001703 l       .debug_loc     00000000 
0000171e l       .debug_loc     00000000 
0000174f l       .debug_loc     00000000 
0000176a l       .debug_loc     00000000 
0000179b l       .debug_loc     00000000 
000017cc l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000c74 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000248 l       .debug_ranges  00000000 
00001032 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
000001b0 l       .debug_str     00000000 
000001bb l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
00000190 l       .debug_str     00000000 
00002b73 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
000001a9 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
0000012e l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000150 l       .debug_str     00000000 
00000162 l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
00001098 l       .debug_str     00000000 
00000cda l       .debug_str     00000000 
0000029d l       .debug_str     00000000 
00000ca5 l       .debug_str     00000000 
00000cb4 l       .debug_str     00000000 
00000cab l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
00000cbf l       .debug_str     00000000 
00000d5c l       .debug_str     00000000 
00000d49 l       .debug_str     00000000 
00000cfa l       .debug_str     00000000 
000020d6 l       .debug_str     00000000 
00000d15 l       .debug_str     00000000 
00000d2d l       .debug_str     00000000 
00000d3e l       .debug_str     00000000 
00000ce7 l       .debug_str     00000000 
00000cd6 l       .debug_str     00000000 
000010a3 l       .debug_str     00000000 
00000fd5 l       .debug_str     00000000 
000002a8 l       .debug_str     00000000 
000002bd l       .debug_str     00000000 
000002d6 l       .debug_str     00000000 
000002e8 l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000db9 l       .debug_str     00000000 
00000d71 l       .debug_str     00000000 
00000d7e l       .debug_str     00000000 
00000d92 l       .debug_str     00000000 
00000da3 l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000241 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000261 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
0000028f l       .debug_str     00000000 
00000dc5 l       .debug_str     00000000 
00000e04 l       .debug_str     00000000 
00000ddf l       .debug_str     00000000 
00000df2 l       .debug_str     00000000 
00000e34 l       .debug_str     00000000 
00000e0f l       .debug_str     00000000 
00000e21 l       .debug_str     00000000 
00000e44 l       .debug_str     00000000 
00000e45 l       .debug_str     00000000 
0000019b l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00000e50 l       .debug_str     00000000 
000006bc l       .debug_str     00000000 
000006d1 l       .debug_str     00000000 
00000e63 l       .debug_str     00000000 
00000e6f l       .debug_str     00000000 
00000e7e l       .debug_str     00000000 
0000104d l       .debug_str     00000000 
0000105d l       .debug_str     00000000 
00000e92 l       .debug_str     00000000 
00001073 l       .debug_str     00000000 
00000e9e l       .debug_str     00000000 
0000108b l       .debug_str     00000000 
00000eac l       .debug_str     00000000 
00000ebd l       .debug_str     00000000 
00000eda l       .debug_str     00000000 
00000ee4 l       .debug_str     00000000 
00000efe l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
00000ecb l       .debug_str     00000000 
00000ef5 l       .debug_str     00000000 
000006e8 l       .debug_str     00000000 
00000f0c l       .debug_str     00000000 
00000f22 l       .debug_str     00000000 
00000f36 l       .debug_str     00000000 
000010ad l       .debug_str     00000000 
000010ba l       .debug_str     00000000 
000002a1 l       .debug_str     00000000 
00000f4a l       .debug_str     00000000 
00000f58 l       .debug_str     00000000 
00000fad l       .debug_str     00000000 
00000f6b l       .debug_str     00000000 
00000f74 l       .debug_str     00000000 
00000f80 l       .debug_str     00000000 
00000e3d l       .debug_str     00000000 
00000f8e l       .debug_str     00000000 
00000f9b l       .debug_str     00000000 
00000fbd l       .debug_str     00000000 
00000fce l       .debug_str     00000000 
00000fe1 l       .debug_str     00000000 
0000086b l       .debug_str     00000000 
00000ffc l       .debug_str     00000000 
00001018 l       .debug_str     00000000 
0000068f l       .debug_str     00000000 
00000128 l       .debug_frame   00000000 
f00013f0 l       .text  00000000 
f000151e l       .text  00000000 
f00015f0 l       .text  00000000 
f000167e l       .text  00000000 
00000000 l    df *ABS*  00000000 coverage_none.c
f000167e l       .text  00000000 
f000167e l       .text  00000000 
f000167e l       .text  00000000 
f000167e l       .text  00000000 
f0001680 l       .text  00000000 
f0001680 l       .text  00000000 
00000000 l       .debug_str     00000000 
000010ca l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001018 l       .debug_str     00000000 
00000200 l       .debug_frame   00000000 
f0001680 l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_hooks.c
f0001680 l       .text  00000000 
f0001680 l       .text  00000000 
f0001680 l       .text  00000000 
f0001682 l       .text  00000000 
f0001682 l       .text  00000000 
f0001684 l       .text  00000000 
f000168e l       .text  00000000 
f0001690 l       .text  00000000 
f0001690 l       .text  00000000 
f00016a4 l       .text  00000000 
f00016a4 l       .text  00000000 
f00016a6 l       .text  00000000 
00010208 l     O .logs.fields   00000014 vApplicationMallocFailedHook.kLogFields
f00016a6 l       .text  00000000 
f00016b2 l       .text  00000000 
f00016b2 l       .text  00000000 
f00016b6 l       .text  00000000 
f00016b6 l       .text  00000000 
f00016b8 l       .text  00000000 
f00016b8 l       .text  00000000 
f00016b8 l       .text  00000000 
f00016b8 l       .text  00000000 
f00016b8 l       .text  00000000 
f00016b8 l       .text  00000000 
f00016ba l       .text  00000000 
f00016ba l       .text  00000000 
f00016bc l       .text  00000000 
f00016bc l       .text  00000000 
f00016c6 l       .text  00000000 
f00016c8 l       .text  00000000 
f00016c8 l       .text  00000000 
f00016dc l       .text  00000000 
f00016dc l       .text  00000000 
f00016de l       .text  00000000 
0001021c l     O .logs.fields   00000014 vApplicationStackOverflowHook.kLogFields
f00016de l       .text  00000000 
f00016ea l       .text  00000000 
f00016ea l       .text  00000000 
f00016ee l       .text  00000000 
f00016ee l       .text  00000000 
f00016f0 l       .text  00000000 
f00016f0 l       .text  00000000 
f00016f0 l       .text  00000000 
000017e7 l       .debug_loc     00000000 
00001802 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000010ff l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000298 l       .debug_ranges  00000000 
0000114b l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
000001b0 l       .debug_str     00000000 
000001bb l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
00000190 l       .debug_str     00000000 
00002b73 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
000001a9 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
0000012e l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000150 l       .debug_str     00000000 
00000162 l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
00001168 l       .debug_str     00000000 
00001186 l       .debug_str     00000000 
00001199 l       .debug_str     00000000 
000006d1 l       .debug_str     00000000 
000006bc l       .debug_str     00000000 
00001135 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
00001145 l       .debug_str     00000000 
0000118c l       .debug_str     00000000 
00000e7e l       .debug_str     00000000 
00000224 l       .debug_frame   00000000 
f00016b8 l       .text  00000000 
f00016f0 l       .text  00000000 
00000000 l    df *ABS*  00000000 freertos_port.c
f00016f0 l       .text  00000000 
f00016f0 l       .text  00000000 
f00016f0 l       .text  00000000 
f00016f2 l       .text  00000000 
f00016f2 l       .text  00000000 
f00016f4 l       .text  00000000 
f00016f8 l       .text  00000000 
f00016f8 l       .text  00000000 
f00016fc l       .text  00000000 
f00016fc l       .text  00000000 
f0001700 l       .text  00000000 
f0001700 l       .text  00000000 
f0001704 l       .text  00000000 
f0001704 l       .text  00000000 
f000170c l       .text  00000000 
f000170c l       .text  00000000 
00000000 l       .debug_str     00000000 
000011a4 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000011d9 l       .debug_str     00000000 
00000205 l       .debug_str     00000000 
000001d8 l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
00000e45 l       .debug_str     00000000 
0000019b l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00001227 l       .debug_str     00000000 
000011e0 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
000011ef l       .debug_str     00000000 
00001201 l       .debug_str     00000000 
00001213 l       .debug_str     00000000 
00000268 l       .debug_frame   00000000 
f000170c l       .text  00000000 
00000000 l    df *ABS*  00000000 irq.c
f000170c l       .text  00000000 
f000170c l       .text  00000000 
f000170c l       .text  00000000 
f000170c l       .text  00000000 
f000170e l       .text  00000000 
f0001710 l       .text  00000000 
f0001710 l       .text  00000000 
f0001714 l       .text  00000000 
f0001716 l       .text  00000000 
f0001716 l       .text  00000000 
f0001718 l       .text  00000000 
f0001718 l       .text  00000000 
f000171c l       .text  00000000 
f000171e l       .text  00000000 
f000171e l       .text  00000000 
f000171e l       .text  00000000 
f000171e l       .text  00000000 
f000171e l       .text  00000000 
f000171e l       .text  00000000 
f0001720 l       .text  00000000 
f0001722 l       .text  00000000 
f0001726 l       .text  00000000 
f000172a l       .text  00000000 
f000172c l       .text  00000000 
f000172c l       .text  00000000 
f000172e l       .text  00000000 
f0001732 l       .text  00000000 
f0001736 l       .text  00000000 
f0001738 l       .text  00000000 
f0001738 l       .text  00000000 
f0001738 l       .text  00000000 
f0001738 l       .text  00000000 
f0001738 l       .text  00000000 
f0001738 l       .text  00000000 
f000173a l       .text  00000000 
f000173e l       .text  00000000 
f000173e l       .text  00000000 
f0001742 l       .text  00000000 
f0001744 l       .text  00000000 
f0001744 l       .text  00000000 
f0001748 l       .text  00000000 
f0001748 l       .text  00000000 
f000174c l       .text  00000000 
f000174e l       .text  00000000 
f000174e l       .text  00000000 
f000174e l       .text  00000000 
f000174e l       .text  00000000 
f000174e l       .text  00000000 
f000174e l       .text  00000000 
f0001750 l       .text  00000000 
f0001752 l       .text  00000000 
f0001752 l       .text  00000000 
f0001756 l       .text  00000000 
f0001758 l       .text  00000000 
f0001758 l       .text  00000000 
f000175a l       .text  00000000 
f000175a l       .text  00000000 
f000175e l       .text  00000000 
f0001760 l       .text  00000000 
f0001760 l       .text  00000000 
0000181d l       .debug_loc     00000000 
0000184d l       .debug_loc     00000000 
0000187d l       .debug_loc     00000000 
000018ad l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000123b l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000002b0 l       .debug_ranges  00000000 
00001257 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
0000126d l       .debug_str     00000000 
00001285 l       .debug_str     00000000 
0000129a l       .debug_str     00000000 
000012b0 l       .debug_str     00000000 
00001135 l       .debug_str     00000000 
000015b1 l       .debug_str     00000000 
000011ef l       .debug_str     00000000 
0000097b l       .debug_str     00000000 
000011e0 l       .debug_str     00000000 
00001201 l       .debug_str     00000000 
000012b8 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
00000294 l       .debug_frame   00000000 
f000171e l       .text  00000000 
f0001738 l       .text  00000000 
f000174e l       .text  00000000 
f0001760 l       .text  00000000 
00000000 l    df *ABS*  00000000 ottf_isrs.c
f0001760 l       .text  00000000 
f0001760 l       .text  00000000 
f0001760 l       .text  00000000 
f0001762 l       .text  00000000 
f000176c l       .text  00000000 
f000176e l       .text  00000000 
f0001770 l       .text  00000000 
f0001770 l       .text  00000000 
f0001772 l       .text  00000000 
f0001774 l       .text  00000000 
f0001774 l       .text  00000000 
f0001776 l       .text  00000000 
f0001776 l       .text  00000000 
f0001780 l       .text  00000000 
f0001782 l       .text  00000000 
f0001782 l       .text  00000000 
f0001784 l       .text  00000000 
00010230 l     O .logs.fields   00000014 ottf_generic_fault_print.kLogFields
f0001784 l       .text  00000000 
f00017a4 l       .text  00000000 
f00017a4 l       .text  00000000 
f00017c0 l       .text  00000000 
f00017c0 l       .text  00000000 
f00017ce l       .text  00000000 
f00017ce l       .text  00000000 
f00017ce l       .text  00000000 
f00017ce l       .text  00000000 
f00017ce l       .text  00000000 
f00017d0 l       .text  00000000 
f00017d0 l       .text  00000000 
f00017d2 l       .text  00000000 
f00017d4 l       .text  00000000 
f00017d4 l       .text  00000000 
f00017d6 l       .text  00000000 
f00017d6 l       .text  00000000 
f00017d8 l       .text  00000000 
f00017dc l       .text  00000000 
f00017f2 l       .text  00000000 
f00017f8 l       .text  00000000 
f00017fe l       .text  00000000 
f0001804 l       .text  00000000 
f000180a l       .text  00000000 
f0001810 l       .text  00000000 
f0001818 l     F .text  0000001c generic_fault_handler
f0001816 l       .text  00000000 
f0001818 l       .text  00000000 
f0001818 l       .text  00000000 
f0001818 l       .text  00000000 
f0001818 l       .text  00000000 
f0001818 l       .text  00000000 
f0001818 l       .text  00000000 
f000181a l       .text  00000000 
f000181a l       .text  00000000 
f000181c l       .text  00000000 
f000181e l       .text  00000000 
f0001820 l       .text  00000000 
f0001820 l       .text  00000000 
f0001822 l       .text  00000000 
f0001824 l       .text  00000000 
f0003b40 l     O .rodata        00000080 exception_reason
f0001830 l       .text  00000000 
f0001832 l       .text  00000000 
f0001832 l       .text  00000000 
f0001834 l       .text  00000000 
f0001834 l       .text  00000000 
f0001834 l       .text  00000000 
f0001834 l       .text  00000000 
f0001834 l       .text  00000000 
f0001834 l       .text  00000000 
f0001836 l       .text  00000000 
f0001836 l       .text  00000000 
f0001838 l       .text  00000000 
f000183a l       .text  00000000 
f000183c l       .text  00000000 
f0001846 l       .text  00000000 
f0001846 l       .text  00000000 
f0001848 l       .text  00000000 
f0001848 l       .text  00000000 
f0001848 l       .text  00000000 
f0001848 l       .text  00000000 
f0001848 l       .text  00000000 
f0001848 l       .text  00000000 
f000184a l       .text  00000000 
f000184a l       .text  00000000 
f000184c l       .text  00000000 
f000184e l       .text  00000000 
f0001850 l       .text  00000000 
f000185a l       .text  00000000 
f000185a l       .text  00000000 
f000185c l       .text  00000000 
f000185c l       .text  00000000 
f000185c l       .text  00000000 
f000185c l       .text  00000000 
f000185c l       .text  00000000 
f000185c l       .text  00000000 
f000185c l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f0001860 l       .text  00000000 
f0001862 l       .text  00000000 
f0001862 l       .text  00000000 
f0001868 l       .text  00000000 
f0001868 l       .text  00000000 
f0001868 l       .text  00000000 
f0001876 l       .text  00000000 
f0001876 l       .text  00000000 
f000187e l       .text  00000000 
f0001880 l       .text  00000000 
f0001880 l       .text  00000000 
f0001882 l       .text  00000000 
f0001882 l       .text  00000000 
f0001884 l       .text  00000000 
f0001886 l       .text  00000000 
00010244 l     O .logs.fields   00000014 ottf_external_isr.kLogFields
f0001886 l       .text  00000000 
f0001894 l       .text  00000000 
f0001894 l       .text  00000000 
f0001896 l       .text  00000000 
f0001896 l       .text  00000000 
f00018ac l       .text  00000000 
f00018ac l       .text  00000000 
f00018b2 l       .text  00000000 
f00018b4 l       .text  00000000 
f00018b4 l       .text  00000000 
f00018b6 l       .text  00000000 
f00018b6 l       .text  00000000 
f00018b8 l       .text  00000000 
f00018c4 l       .text  00000000 
f00018c4 l       .text  00000000 
f00018c6 l       .text  00000000 
f00018ca l       .text  00000000 
f00018ca l       .text  00000000 
f00018cc l       .text  00000000 
f00018cc l       .text  00000000 
f00018ce l       .text  00000000 
f00018ce l       .text  00000000 
f00018d0 l       .text  00000000 
f00018dc l       .text  00000000 
f00018de l       .text  00000000 
f00018de l       .text  00000000 
f00018e0 l       .text  00000000 
f00018e0 l       .text  00000000 
f00018e2 l       .text  00000000 
f00018e4 l       .text  00000000 
00010258 l     O .logs.fields   00000014 ottf_external_isr.kLogFields.5
f00018e4 l       .text  00000000 
f00018f2 l       .text  00000000 
f00018f2 l       .text  00000000 
f00018f4 l       .text  00000000 
f00018f4 l       .text  00000000 
f000190a l       .text  00000000 
f000190a l       .text  00000000 
f0001910 l       .text  00000000 
f0001912 l       .text  00000000 
f0001912 l       .text  00000000 
f000191c l       .text  00000000 
f000191e l       .text  00000000 
f0001920 l       .text  00000000 
f0001920 l       .text  00000000 
f000192a l       .text  00000000 
f000192a l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192c l     F .text  00000014 generic_internal_irq_handler
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192c l       .text  00000000 
f000192e l       .text  00000000 
f000192e l       .text  00000000 
f0001930 l       .text  00000000 
f0001932 l       .text  00000000 
f0001934 l       .text  00000000 
f000193e l       .text  00000000 
f000193e l       .text  00000000 
f0001940 l       .text  00000000 
f0001940 l       .text  00000000 
f0001940 l       .text  00000000 
f0001940 l       .text  00000000 
f0001940 l       .text  00000000 
f0001940 l       .text  00000000 
f0001942 l       .text  00000000 
f0001942 l       .text  00000000 
f0001944 l       .text  00000000 
f0001946 l       .text  00000000 
f0001946 l       .text  00000000 
f000194c l       .text  00000000 
f000194c l       .text  00000000 
f0001950 l       .text  00000000 
f0001952 l       .text  00000000 
f0001956 l       .text  00000000 
f000195c l       .text  00000000 
f0001962 l       .text  00000000 
f0001962 l       .text  00000000 
f0001964 l       .text  00000000 
f0001966 l       .text  00000000 
f0001970 l       .text  00000000 
f0001970 l       .text  00000000 
f0001972 l       .text  00000000 
f0001972 l       .text  00000000 
f0001972 l       .text  00000000 
000018dd l       .debug_loc     00000000 
00001903 l       .debug_loc     00000000 
00001929 l       .debug_loc     00000000 
00001944 l       .debug_loc     00000000 
0000195f l       .debug_loc     00000000 
0000197a l       .debug_loc     00000000 
00001995 l       .debug_loc     00000000 
000019e1 l       .debug_loc     00000000 
00001a14 l       .debug_loc     00000000 
00001a45 l       .debug_loc     00000000 
00001a60 l       .debug_loc     00000000 
00001a91 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000012c2 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000002e0 l       .debug_ranges  00000000 
000019c0 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
0000132e l       .debug_str     00000000 
00001a61 l       .debug_str     00000000 
00001a68 l       .debug_str     00000000 
00001a6d l       .debug_str     00000000 
000001b0 l       .debug_str     00000000 
000001bb l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
00000190 l       .debug_str     00000000 
00002b73 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
000001a9 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
0000012e l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000150 l       .debug_str     00000000 
00000162 l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000012f3 l       .debug_str     00000000 
00001a3d l       .debug_str     00000000 
00001a73 l       .debug_str     00000000 
00001a7f l       .debug_str     00000000 
000018bb l       .debug_str     00000000 
0000029d l       .debug_str     00000000 
00001300 l       .debug_str     00000000 
00001316 l       .debug_str     00000000 
0000130a l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
00001324 l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000013f7 l       .debug_str     00000000 
00001335 l       .debug_str     00000000 
0000134d l       .debug_str     00000000 
00001366 l       .debug_str     00000000 
00001380 l       .debug_str     00000000 
00001393 l       .debug_str     00000000 
000013ab l       .debug_str     00000000 
000013c4 l       .debug_str     00000000 
000013d6 l       .debug_str     00000000 
000013eb l       .debug_str     00000000 
00001437 l       .debug_str     00000000 
00001400 l       .debug_str     00000000 
0000141c l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000241 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000261 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
0000028f l       .debug_str     00000000 
00000fd5 l       .debug_str     00000000 
000002a8 l       .debug_str     00000000 
000002bd l       .debug_str     00000000 
000002d6 l       .debug_str     00000000 
000002e8 l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
000018a9 l       .debug_str     00000000 
00001450 l       .debug_str     00000000 
00001472 l       .debug_str     00000000 
00001492 l       .debug_str     00000000 
000014b2 l       .debug_str     00000000 
000014d2 l       .debug_str     00000000 
000014f2 l       .debug_str     00000000 
00001511 l       .debug_str     00000000 
00001535 l       .debug_str     00000000 
00001554 l       .debug_str     00000000 
00001573 l       .debug_str     00000000 
00001592 l       .debug_str     00000000 
000015b4 l       .debug_str     00000000 
000015d6 l       .debug_str     00000000 
000015f8 l       .debug_str     00000000 
0000161f l       .debug_str     00000000 
00001642 l       .debug_str     00000000 
00001665 l       .debug_str     00000000 
00001686 l       .debug_str     00000000 
000016aa l       .debug_str     00000000 
000016d2 l       .debug_str     00000000 
000016f7 l       .debug_str     00000000 
0000171d l       .debug_str     00000000 
00001742 l       .debug_str     00000000 
00001765 l       .debug_str     00000000 
00001789 l       .debug_str     00000000 
000017a8 l       .debug_str     00000000 
000017c7 l       .debug_str     00000000 
000017e6 l       .debug_str     00000000 
00001807 l       .debug_str     00000000 
00001827 l       .debug_str     00000000 
0000184c l       .debug_str     00000000 
0000186b l       .debug_str     00000000 
0000188a l       .debug_str     00000000 
000018f4 l       .debug_str     00000000 
000018c6 l       .debug_str     00000000 
000018e0 l       .debug_str     00000000 
00001906 l       .debug_str     00000000 
00001911 l       .debug_str     00000000 
00001930 l       .debug_str     00000000 
00001944 l       .debug_str     00000000 
00001953 l       .debug_str     00000000 
000006bc l       .debug_str     00000000 
000006d1 l       .debug_str     00000000 
000019d9 l       .debug_str     00000000 
00001963 l       .debug_str     00000000 
000019f0 l       .debug_str     00000000 
00001145 l       .debug_str     00000000 
00001a06 l       .debug_str     00000000 
00001a18 l       .debug_str     00000000 
00001a27 l       .debug_str     00000000 
00001974 l       .debug_str     00000000 
000006e8 l       .debug_str     00000000 
0000198a l       .debug_str     00000000 
000019a3 l       .debug_str     00000000 
00001a4f l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
00001a8b l       .debug_str     00000000 
0000068f l       .debug_str     00000000 
000002f8 l       .debug_frame   00000000 
f00017ce l       .text  00000000 
f0001818 l       .text  00000000 
f0001834 l       .text  00000000 
f0001848 l       .text  00000000 
f000185c l       .text  00000000 
f0001860 l       .text  00000000 
f000192c l       .text  00000000 
f0001940 l       .text  00000000 
f0001972 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic.c
f0001972 l       .text  00000000 
f0001972 l       .text  00000000 
f0001972 l       .text  00000000 
f0001972 l       .text  00000000 
f000197a l       .text  00000000 
f000197a l       .text  00000000 
f0001986 l       .text  00000000 
f0001986 l       .text  00000000 
f0001988 l       .text  00000000 
f0001988 l       .text  00000000 
f000198e l       .text  00000000 
f000198e l       .text  00000000 
f0001990 l       .text  00000000 
f0001994 l       .text  00000000 
f0001994 l       .text  00000000 
f0001996 l       .text  00000000 
f0001996 l       .text  00000000 
f000199a l       .text  00000000 
f000199a l       .text  00000000 
f000199a l       .text  00000000 
f000199a l       .text  00000000 
f000199a l       .text  00000000 
f000199a l       .text  00000000 
f00019a2 l       .text  00000000 
f00019a2 l       .text  00000000 
f00019a8 l       .text  00000000 
f00019a8 l       .text  00000000 
f00019aa l       .text  00000000 
f00019aa l       .text  00000000 
f00019b2 l       .text  00000000 
f00019b2 l       .text  00000000 
f00019b4 l       .text  00000000 
f00019b4 l       .text  00000000 
f00019b6 l       .text  00000000 
f00019b6 l       .text  00000000 
f00019ba l       .text  00000000 
f00019ba l       .text  00000000 
00001aac l       .debug_loc     00000000 
00001ad2 l       .debug_loc     00000000 
00001b05 l       .debug_loc     00000000 
00001b27 l       .debug_loc     00000000 
00001b42 l       .debug_loc     00000000 
00001b64 l       .debug_loc     00000000 
00001b97 l       .debug_loc     00000000 
00001bbf l       .debug_loc     00000000 
00001be7 l       .debug_loc     00000000 
00001c02 l       .debug_loc     00000000 
00001c32 l       .debug_loc     00000000 
00001c4d l       .debug_loc     00000000 
00001c68 l       .debug_loc     00000000 
00001c83 l       .debug_loc     00000000 
00001c9e l       .debug_loc     00000000 
00001cb9 l       .debug_loc     00000000 
00001cd4 l       .debug_loc     00000000 
00001cef l       .debug_loc     00000000 
00001d0a l       .debug_loc     00000000 
00001d25 l       .debug_loc     00000000 
00001d40 l       .debug_loc     00000000 
00001d5c l       .debug_loc     00000000 
00001d77 l       .debug_loc     00000000 
00001d95 l       .debug_loc     00000000 
00001dbb l       .debug_loc     00000000 
00001dec l       .debug_loc     00000000 
00001e07 l       .debug_loc     00000000 
00001e22 l       .debug_loc     00000000 
00001e41 l       .debug_loc     00000000 
00001e60 l       .debug_loc     00000000 
00001e7b l       .debug_loc     00000000 
00001e96 l       .debug_loc     00000000 
00001eb1 l       .debug_loc     00000000 
00001ed1 l       .debug_loc     00000000 
00001eec l       .debug_loc     00000000 
00001f07 l       .debug_loc     00000000 
00001f22 l       .debug_loc     00000000 
00001f3f l       .debug_loc     00000000 
00001f5a l       .debug_loc     00000000 
00001f75 l       .debug_loc     00000000 
00001f90 l       .debug_loc     00000000 
00001fab l       .debug_loc     00000000 
00001fc6 l       .debug_loc     00000000 
00001fe6 l       .debug_loc     00000000 
00002001 l       .debug_loc     00000000 
0000201c l       .debug_loc     00000000 
00002037 l       .debug_loc     00000000 
00002057 l       .debug_loc     00000000 
00002072 l       .debug_loc     00000000 
0000208d l       .debug_loc     00000000 
000020a8 l       .debug_loc     00000000 
000020c8 l       .debug_loc     00000000 
000020e3 l       .debug_loc     00000000 
000020fe l       .debug_loc     00000000 
00002119 l       .debug_loc     00000000 
00002139 l       .debug_loc     00000000 
00002154 l       .debug_loc     00000000 
0000216f l       .debug_loc     00000000 
0000218a l       .debug_loc     00000000 
000021aa l       .debug_loc     00000000 
000021c5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001c94 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000003e8 l       .debug_ranges  00000000 
00001cb4 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
00001cca l       .debug_str     00000000 
0000029d l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000241 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000261 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
0000028f l       .debug_str     00000000 
00000e04 l       .debug_str     00000000 
00000ddf l       .debug_str     00000000 
00000df2 l       .debug_str     00000000 
000009da l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
00000b84 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
000009ee l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00001d6b l       .debug_str     00000000 
00001305 l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
00000370 l       .debug_ranges  00000000 
00000358 l       .debug_ranges  00000000 
00001449 l       .debug_str     00000000 
000003a0 l       .debug_ranges  00000000 
00001e76 l       .debug_str     00000000 
00000388 l       .debug_ranges  00000000 
00001ce0 l       .debug_str     00000000 
00001902 l       .debug_str     00000000 
00001d07 l       .debug_str     00000000 
00001cf9 l       .debug_str     00000000 
000009b9 l       .debug_str     00000000 
000009c3 l       .debug_str     00000000 
00001a8b l       .debug_str     00000000 
00001d17 l       .debug_str     00000000 
00001d2c l       .debug_str     00000000 
00001d42 l       .debug_str     00000000 
00000205 l       .debug_str     00000000 
000001d8 l       .debug_str     00000000 
00000ac8 l       .debug_str     00000000 
00001d7d l       .debug_str     00000000 
00001b77 l       .debug_str     00000000 
00003361 l       .debug_str     00000000 
00001cfe l       .debug_str     00000000 
00001e86 l       .debug_str     00000000 
000003b8 l       .debug_ranges  00000000 
0000095b l       .debug_str     00000000 
00000972 l       .debug_str     00000000 
00000975 l       .debug_str     00000000 
00000991 l       .debug_str     00000000 
00000980 l       .debug_str     00000000 
0000097b l       .debug_str     00000000 
00001d4b l       .debug_str     00000000 
000009a4 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
00001d99 l       .debug_str     00000000 
00000679 l       .debug_str     00000000 
000003d0 l       .debug_ranges  00000000 
00001db5 l       .debug_str     00000000 
00000f03 l       .debug_str     00000000 
00001dd2 l       .debug_str     00000000 
00001de9 l       .debug_str     00000000 
00001e91 l       .debug_str     00000000 
00001d51 l       .debug_str     00000000 
00000b1f l       .debug_str     00000000 
00001df3 l       .debug_str     00000000 
00001e03 l       .debug_str     00000000 
00001974 l       .debug_str     00000000 
00001ea2 l       .debug_str     00000000 
00001ead l       .debug_str     00000000 
0000198a l       .debug_str     00000000 
00001ec0 l       .debug_str     00000000 
00001e0e l       .debug_str     00000000 
00001ece l       .debug_str     00000000 
00001e2d l       .debug_str     00000000 
00001e52 l       .debug_str     00000000 
00001eda l       .debug_str     00000000 
0000068f l       .debug_str     00000000 
00001316 l       .debug_str     00000000 
0000130a l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000f8e l       .debug_str     00000000 
0000040c l       .debug_frame   00000000 
f000199a l       .text  00000000 
f00019ba l       .text  00000000 
00000000 l    df *ABS*  00000000 rand_testutils.c
f00019ba l       .text  00000000 
f00019ba l       .text  00000000 
f00019ba l       .text  00000000 
f00019bc l       .text  00000000 
f00019c2 l       .text  00000000 
f00019c4 l       .text  00000000 
f00019c6 l       .text  00000000 
f00019c8 l       .text  00000000 
f00019c8 l       .text  00000000 
f00019d2 l       .text  00000000 
0001026c l     O .logs.fields   00000014 rand_testutils_init.kLogFields
f00019d4 l       .text  00000000 
f00019e0 l       .text  00000000 
f00019e0 l       .text  00000000 
f00019e2 l       .text  00000000 
f00019e2 l       .text  00000000 
f00019f6 l       .text  00000000 
f00019f6 l       .text  00000000 
f00019fc l       .text  00000000 
f00019fe l       .text  00000000 
f00019fe l       .text  00000000 
f0001a20 l       .text  00000000 
f0001a20 l       .text  00000000 
f0001a2a l       .text  00000000 
f0001a32 l       .text  00000000 
f0001a36 l       .text  00000000 
f0001a36 l       .text  00000000 
f0001a3a l       .text  00000000 
f0001a3c l       .text  00000000 
f0001a44 l       .text  00000000 
f0001a44 l       .text  00000000 
00010280 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields
00010294 l     O .logs.fields   00000014 rand_testutils_gen32_range.kLogFields.3
000021e0 l       .debug_loc     00000000 
0000221c l       .debug_loc     00000000 
0000224d l       .debug_loc     00000000 
00002289 l       .debug_loc     00000000 
000022af l       .debug_loc     00000000 
000022d5 l       .debug_loc     00000000 
00002306 l       .debug_loc     00000000 
00002337 l       .debug_loc     00000000 
0000235d l       .debug_loc     00000000 
00002385 l       .debug_loc     00000000 
000023a0 l       .debug_loc     00000000 
000023bb l       .debug_loc     00000000 
000023d6 l       .debug_loc     00000000 
000023f1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002060 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000460 l       .debug_ranges  00000000 
00000f22 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
00000cda l       .debug_str     00000000 
00000cd2 l       .debug_str     00000000 
000001b0 l       .debug_str     00000000 
000001bb l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
00000190 l       .debug_str     00000000 
00002b73 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
000001a9 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
0000012e l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000150 l       .debug_str     00000000 
00000162 l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
00002087 l       .debug_str     00000000 
000020a2 l       .debug_str     00000000 
0000212a l       .debug_str     00000000 
0000215c l       .debug_str     00000000 
00002160 l       .debug_str     00000000 
0000213f l       .debug_str     00000000 
000002a1 l       .debug_str     00000000 
00000fd5 l       .debug_str     00000000 
000002a8 l       .debug_str     00000000 
000002bd l       .debug_str     00000000 
000002d6 l       .debug_str     00000000 
000002e8 l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00000db9 l       .debug_str     00000000 
00000d71 l       .debug_str     00000000 
00000d7e l       .debug_str     00000000 
00000d92 l       .debug_str     00000000 
00000da3 l       .debug_str     00000000 
000006bc l       .debug_str     00000000 
000006d1 l       .debug_str     00000000 
000006e8 l       .debug_str     00000000 
000020ff l       .debug_str     00000000 
000020be l       .debug_str     00000000 
000020cb l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
000020cf l       .debug_str     00000000 
00002115 l       .debug_str     00000000 
000020db l       .debug_str     00000000 
00000cd6 l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
00002145 l       .debug_str     00000000 
00002164 l       .debug_str     00000000 
0000216a l       .debug_str     00000000 
000003ed l       .debug_str     00000000 
0000217b l       .debug_str     00000000 
0000216f l       .debug_str     00000000 
00002174 l       .debug_str     00000000 
00000d2d l       .debug_str     00000000 
00000448 l       .debug_ranges  00000000 
000002f7 l       .debug_str     00000000 
00002187 l       .debug_str     00000000 
00000706 l       .debug_str     00000000 
00000d5c l       .debug_str     00000000 
00000d49 l       .debug_str     00000000 
00000cfa l       .debug_str     00000000 
000020d6 l       .debug_str     00000000 
00000d15 l       .debug_str     00000000 
00000d3e l       .debug_str     00000000 
00000ce7 l       .debug_str     00000000 
000008df l       .debug_str     00000000 
000001d8 l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000004d0 l       .debug_frame   00000000 
f0001a44 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_core_ibex_autogen.c
f0001a44 l       .text  00000000 
f0001a44 l       .text  00000000 
f0001a44 l       .text  00000000 
f0001a44 l       .text  00000000 
f0001a46 l       .text  00000000 
f0001a48 l       .text  00000000 
f0001a4c l       .text  00000000 
f0001a4e l       .text  00000000 
f0001a50 l       .text  00000000 
f0001a52 l       .text  00000000 
f0001a52 l       .text  00000000 
0000240c l       .debug_loc     00000000 
00002427 l       .debug_loc     00000000 
00002442 l       .debug_loc     00000000 
0000245d l       .debug_loc     00000000 
00002478 l       .debug_loc     00000000 
000024a7 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002189 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000490 l       .debug_ranges  00000000 
0000029d l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000241 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000261 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
0000028f l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
00002236 l       .debug_str     00000000 
000021be l       .debug_str     00000000 
000021dc l       .debug_str     00000000 
000021fa l       .debug_str     00000000 
00002218 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
00000f0c l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000cda l       .debug_str     00000000 
0000095b l       .debug_str     00000000 
00000972 l       .debug_str     00000000 
00000975 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
00000991 l       .debug_str     00000000 
00000980 l       .debug_str     00000000 
0000097b l       .debug_str     00000000 
00001d4b l       .debug_str     00000000 
000009a4 l       .debug_str     00000000 
000009b9 l       .debug_str     00000000 
000009c3 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
000009da l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
00000b84 l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
000009ee l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
0000224d l       .debug_str     00000000 
00000955 l       .debug_str     00000000 
00000a1c l       .debug_str     00000000 
00000a26 l       .debug_str     00000000 
0000068f l       .debug_str     00000000 
00000ce7 l       .debug_str     00000000 
00000cd6 l       .debug_str     00000000 
0000226a l       .debug_str     00000000 
00000578 l       .debug_frame   00000000 
f0001a52 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f0001a52 l       .text  00000000 
f0001a52 l       .text  00000000 
f0001a52 l       .text  00000000 
f0001a54 l       .text  00000000 
f0001a56 l       .text  00000000 
f0001a5c l       .text  00000000 
f0001a60 l       .text  00000000 
f0001a64 l       .text  00000000 
f0001a68 l       .text  00000000 
f0001a68 l       .text  00000000 
f0001a72 l       .text  00000000 
f0001a74 l       .text  00000000 
f0001a74 l       .text  00000000 
f0001a76 l       .text  00000000 
f0001a76 l       .text  00000000 
f0001a7c l       .text  00000000 
f0001a7c l       .text  00000000 
f0001a86 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a88 l       .text  00000000 
f0001a9c l       .text  00000000 
f0001a9c l       .text  00000000 
f0001a9e l       .text  00000000 
f0001a9e l       .text  00000000 
f0001aa8 l       .text  00000000 
f0001aaa l       .text  00000000 
f0001aaa l       .text  00000000 
f0001abe l       .text  00000000 
f0001abe l       .text  00000000 
f0001ac0 l       .text  00000000 
000102bc l     O .logs.fields   00000014 test_status_set.kLogFields.2
f0001ac0 l       .text  00000000 
f0001acc l       .text  00000000 
f0001acc l       .text  00000000 
f0001ad6 l       .text  00000000 
f0001ad8 l       .text  00000000 
f0001ad8 l       .text  00000000 
000102a8 l     O .logs.fields   00000014 test_status_set.kLogFields
f0001ae0 l       .text  00000000 
f0001aec l       .text  00000000 
f0001aec l       .text  00000000 
f0001af6 l       .text  00000000 
f0001af8 l       .text  00000000 
f0001af8 l       .text  00000000 
f0001b00 l       .text  00000000 
f0001b00 l       .text  00000000 
f0001b00 l       .text  00000000 
000024c2 l       .debug_loc     00000000 
000024e0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000028f2 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000006e8 l       .debug_str     00000000 
00000123 l       .debug_str     00000000 
00000fd5 l       .debug_str     00000000 
000001b0 l       .debug_str     00000000 
000001bb l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
00000190 l       .debug_str     00000000 
00002b73 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
000001a9 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
0000012e l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000150 l       .debug_str     00000000 
00000162 l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000002a8 l       .debug_str     00000000 
000002bd l       .debug_str     00000000 
000002d6 l       .debug_str     00000000 
000002e8 l       .debug_str     00000000 
000002f9 l       .debug_str     00000000 
0000030b l       .debug_str     00000000 
00002920 l       .debug_str     00000000 
00002947 l       .debug_str     00000000 
00002939 l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
000009da l       .debug_str     00000000 
00000b84 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
000009ee l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
000006d1 l       .debug_str     00000000 
000006bc l       .debug_str     00000000 
00001145 l       .debug_str     00000000 
000005ac l       .debug_frame   00000000 
f0001b00 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
f0001b00 l       .text  00000000 
f0001b00 l       .text  00000000 
f0001b00 l       .text  00000000 
f0001b00 l       .text  00000000 
f0001b04 l       .text  00000000 
f0001b04 l       .text  00000000 
f0001b06 l       .text  00000000 
f0001b06 l       .text  00000000 
000024f3 l       .debug_loc     00000000 
0000250e l       .debug_loc     00000000 
00002535 l       .debug_loc     00000000 
0000255c l       .debug_loc     00000000 
00002578 l       .debug_loc     00000000 
000025a5 l       .debug_loc     00000000 
000025cc l       .debug_loc     00000000 
000025f3 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000295f l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000004a8 l       .debug_ranges  00000000 
000005bb l       .debug_str     00000000 
000005a4 l       .debug_str     00000000 
000005f2 l       .debug_str     00000000 
0000061b l       .debug_str     00000000 
00000610 l       .debug_str     00000000 
00000603 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
0000299d l       .debug_str     00000000 
00000d10 l       .debug_str     00000000 
00001c54 l       .debug_str     00000000 
00002983 l       .debug_str     00000000 
0000297c l       .debug_str     00000000 
0000298a l       .debug_str     00000000 
00001145 l       .debug_str     00000000 
000029ae l       .debug_str     00000000 
000005d8 l       .debug_frame   00000000 
f0001b06 l       .text  00000000 
00000000 l    df *ABS*  00000000 ibex.c
f0001b06 l       .text  00000000 
f0001b06 l       .text  00000000 
f0001b06 l       .text  00000000 
f0001b06 l       .text  00000000 
f0001b0a l       .text  00000000 
f0001b0a l       .text  00000000 
f0001b0c l       .text  00000000 
f0001b0c l       .text  00000000 
f0001b0c l       .text  00000000 
f0001b0c l       .text  00000000 
f0001b0c l       .text  00000000 
f0001b0c l       .text  00000000 
f0001b10 l       .text  00000000 
f0001b10 l       .text  00000000 
f0001b12 l       .text  00000000 
f0001b12 l       .text  00000000 
f0001b12 l       .text  00000000 
f0001b12 l       .text  00000000 
f0001b12 l       .text  00000000 
f0001b12 l       .text  00000000 
f0001b16 l       .text  00000000 
f0001b16 l       .text  00000000 
f0001b18 l       .text  00000000 
f0001b18 l       .text  00000000 
0000260f l       .debug_loc     00000000 
0000262a l       .debug_loc     00000000 
00002645 l       .debug_loc     00000000 
00002660 l       .debug_loc     00000000 
00002687 l       .debug_loc     00000000 
000026ae l       .debug_loc     00000000 
000026ca l       .debug_loc     00000000 
000026e5 l       .debug_loc     00000000 
00002701 l       .debug_loc     00000000 
00002728 l       .debug_loc     00000000 
0000274f l       .debug_loc     00000000 
00002775 l       .debug_loc     00000000 
0000279c l       .debug_loc     00000000 
000027c3 l       .debug_loc     00000000 
000027df l       .debug_loc     00000000 
000027fa l       .debug_loc     00000000 
00002821 l       .debug_loc     00000000 
00002848 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000029c0 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000500 l       .debug_ranges  00000000 
000005bb l       .debug_str     00000000 
000005a4 l       .debug_str     00000000 
00001963 l       .debug_str     00000000 
00001a6d l       .debug_str     00000000 
00001953 l       .debug_str     00000000 
00001944 l       .debug_str     00000000 
00001a68 l       .debug_str     00000000 
000029dd l       .debug_str     00000000 
000005f2 l       .debug_str     00000000 
00000603 l       .debug_str     00000000 
00000610 l       .debug_str     00000000 
0000061b l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000005c4 l       .debug_str     00000000 
00000d08 l       .debug_str     00000000 
0000080d l       .debug_str     00000000 
0000069c l       .debug_str     00000000 
000005db l       .debug_str     00000000 
000004d0 l       .debug_ranges  00000000 
000029ed l       .debug_str     00000000 
000004e8 l       .debug_ranges  00000000 
000005e3 l       .debug_str     00000000 
000005d6 l       .debug_str     00000000 
00002983 l       .debug_str     00000000 
00001c54 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
00000638 l       .debug_frame   00000000 
f0001b0c l       .text  00000000 
f0001b12 l       .text  00000000 
f0001b18 l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
f0001b18 l       .text  00000000 
f0001b18 l       .text  00000000 
f0001b18 l       .text  00000000 
f0001b1a l       .text  00000000 
f0001b20 l       .text  00000000 
f0001b22 l       .text  00000000 
f0001b30 l       .text  00000000 
f0001b3a l       .text  00000000 
f0001b40 l       .text  00000000 
f0001b40 l       .text  00000000 
f0001b42 l       .text  00000000 
f0001b46 l       .text  00000000 
f0001b46 l       .text  00000000 
f0001b50 l       .text  00000000 
f0001b50 l       .text  00000000 
f0001b52 l       .text  00000000 
f0001b56 l       .text  00000000 
f0001b56 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b58 l       .text  00000000 
f0001b5a l       .text  00000000 
f0001b5a l       .text  00000000 
f0001b5e l       .text  00000000 
f0001b5e l       .text  00000000 
f0001b64 l       .text  00000000 
f0001b72 l       .text  00000000 
f0001b72 l       .text  00000000 
e0002054 l     O .bss   00000002 base_log_internal_core.global_log_counter
f0001b7a l       .text  00000000 
f0001b86 l       .text  00000000 
f0001b88 l       .text  00000000 
f0001b92 l       .text  00000000 
f0001b92 l       .text  00000000 
f0001b9e l       .text  00000000 
f0001b9e l       .text  00000000 
f0001ba0 l       .text  00000000 
f0001ba2 l       .text  00000000 
f0001ba6 l       .text  00000000 
f0001ba6 l       .text  00000000 
f0001bb0 l       .text  00000000 
f0001bb0 l       .text  00000000 
f0001bba l       .text  00000000 
f0001bba l       .text  00000000 
f0001bba l       .text  00000000 
f0001bba l       .text  00000000 
f0001bba l       .text  00000000 
f0001bbc l       .text  00000000 
f0001bc2 l       .text  00000000 
f0001bc2 l       .text  00000000 
f0001bcc l       .text  00000000 
f0001bcc l       .text  00000000 
f0001bd2 l       .text  00000000 
f0001bd2 l       .text  00000000 
f0001bd6 l       .text  00000000 
f0001bd6 l       .text  00000000 
f0001bd8 l       .text  00000000 
f0001bd8 l       .text  00000000 
f0001bda l       .text  00000000 
f0001bda l       .text  00000000 
f0001bdc l       .text  00000000 
f0001be0 l       .text  00000000 
f0001be4 l       .text  00000000 
f0001be6 l       .text  00000000 
f0001be6 l       .text  00000000 
f0001be8 l       .text  00000000 
f0001be8 l       .text  00000000 
f0001bea l       .text  00000000 
f0001bea l       .text  00000000 
f0001bee l       .text  00000000 
f0001bee l       .text  00000000 
00002864 l       .debug_loc     00000000 
0000288c l       .debug_loc     00000000 
000028a7 l       .debug_loc     00000000 
000028e3 l       .debug_loc     00000000 
000028ff l       .debug_loc     00000000 
0000291a l       .debug_loc     00000000 
00002935 l       .debug_loc     00000000 
00002950 l       .debug_loc     00000000 
0000298e l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002a02 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000548 l       .debug_ranges  00000000 
000006d1 l       .debug_str     00000000 
00002a1e l       .debug_str     00000000 
00002a6c l       .debug_str     00000000 
00002a70 l       .debug_str     00000000 
00002a7e l       .debug_str     00000000 
000001a4 l       .debug_str     00000000 
00000ef5 l       .debug_str     00000000 
00000e6f l       .debug_str     00000000 
00000174 l       .debug_str     00000000 
0000012e l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000150 l       .debug_str     00000000 
00000162 l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
000012b8 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
00002a31 l       .debug_str     00000000 
00000178 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00002a44 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00002a4b l       .debug_str     00000000 
00002a53 l       .debug_str     00000000 
000008df l       .debug_str     00000000 
00002a5f l       .debug_str     00000000 
000009da l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
00000b84 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
000009ee l       .debug_str     00000000 
000006bc l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
00002a9a l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
000001bb l       .debug_str     00000000 
000001b0 l       .debug_str     00000000 
00000190 l       .debug_str     00000000 
00002b73 l       .debug_str     00000000 
000001a9 l       .debug_str     00000000 
00002a92 l       .debug_str     00000000 
00002a88 l       .debug_str     00000000 
000006d4 l       .debug_frame   00000000 
f0001bba l       .text  00000000 
f0001bee l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
f0001bee l     F .text  00000004 base_dev_null
e0002058 l     O .bss   00000008 base_stdout
f0001bee l       .text  00000000 
f0001bee l       .text  00000000 
f0001bee l       .text  00000000 
f0001bf0 l       .text  00000000 
f0001bf0 l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bf2 l       .text  00000000 
f0001bfa l       .text  00000000 
f0001bfa l       .text  00000000 
f0001bfc l       .text  00000000 
f0001c08 l     F .text  00000040 base_dev_uart
f0001c04 l       .text  00000000 
f0001c06 l       .text  00000000 
f0001c06 l       .text  00000000 
f0001c08 l       .text  00000000 
f0001c08 l       .text  00000000 
f0001c08 l       .text  00000000 
f0001c08 l       .text  00000000 
f0001c08 l       .text  00000000 
f0001c0a l       .text  00000000 
f0001c0a l       .text  00000000 
f0001c14 l       .text  00000000 
f0001c14 l       .text  00000000 
f0001c14 l       .text  00000000 
f0001c16 l       .text  00000000 
f0001c18 l       .text  00000000 
f0001c1a l       .text  00000000 
f0001c1c l       .text  00000000 
f0001c1e l       .text  00000000 
f0001c1e l       .text  00000000 
f0001c26 l       .text  00000000 
f0001c2a l       .text  00000000 
f0001c2a l       .text  00000000 
f0001c2c l       .text  00000000 
f0001c2e l       .text  00000000 
f0001c32 l       .text  00000000 
f0001c32 l       .text  00000000 
f0001c34 l       .text  00000000 
f0001c36 l       .text  00000000 
f0001c38 l       .text  00000000 
f0001c38 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c4a l       .text  00000000 
f0001c4c l       .text  00000000 
f0001c5a l       .text  00000000 
f0001c62 l       .text  00000000 
f0001c62 l       .text  00000000 
f0001c68 l       .text  00000000 
f0001c68 l       .text  00000000 
f0001c6a l       .text  00000000 
f0001c6a l       .text  00000000 
f0001c6c l       .text  00000000 
f0001c6c l       .text  00000000 
f0001c70 l       .text  00000000 
f0001c72 l       .text  00000000 
f0001c74 l       .text  00000000 
f0001c74 l       .text  00000000 
f0001c7a l       .text  00000000 
f0001c7a l       .text  00000000 
f0001c7a l       .text  00000000 
f0001c7a l       .text  00000000 
f0001c7a l       .text  00000000 
f0001c82 l       .text  00000000 
f0001c88 l       .text  00000000 
f0001c88 l       .text  00000000 
f0001c8a l       .text  00000000 
f0001c8a l       .text  00000000 
f0001c90 l       .text  00000000 
f0001c92 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001c94 l       .text  00000000 
f0001c96 l       .text  00000000 
f0001cb0 l       .text  00000000 
f0001cb2 l       .text  00000000 
f0001cb4 l       .text  00000000 
f0001cb6 l       .text  00000000 
f0001cb8 l       .text  00000000 
f0001cba l       .text  00000000 
f0001cbc l       .text  00000000 
f0001cc4 l       .text  00000000 
f0001cc4 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cc6 l       .text  00000000 
f0001cca l       .text  00000000 
f0001cce l       .text  00000000 
f0001ce2 l       .text  00000000 
f0001ce2 l       .text  00000000 
f0001cec l       .text  00000000 
f0001cf0 l       .text  00000000 
f0001cf4 l       .text  00000000 
f0001cf6 l       .text  00000000 
f0001cf8 l       .text  00000000 
f0001cf8 l       .text  00000000 
f0001cfa l       .text  00000000 
f0001cfc l       .text  00000000 
f0001d02 l       .text  00000000 
f0001d02 l       .text  00000000 
f0001d04 l       .text  00000000 
f0001d04 l       .text  00000000 
f0001d08 l       .text  00000000 
f0001d08 l       .text  00000000 
f0001d14 l       .text  00000000 
f0001d18 l       .text  00000000 
f0001d18 l       .text  00000000 
f0001d24 l       .text  00000000 
f0001d24 l       .text  00000000 
f0001d2c l       .text  00000000 
f0001d2c l       .text  00000000 
f0001d30 l       .text  00000000 
f0001d30 l       .text  00000000 
f0001d3e l       .text  00000000 
f0001d3e l       .text  00000000 
f0001d42 l       .text  00000000 
f0001d4a l       .text  00000000 
f0001d4e l       .text  00000000 
f0001d4e l       .text  00000000 
f0001d52 l       .text  00000000 
f0001d58 l       .text  00000000 
f0001d5c l       .text  00000000 
f0001d5e l       .text  00000000 
f0001d62 l       .text  00000000 
f0001d62 l       .text  00000000 
f0001d66 l       .text  00000000 
f0001d6c l       .text  00000000 
f0001d6c l       .text  00000000 
f0001d70 l       .text  00000000 
f0001d84 l       .text  00000000 
f0001d84 l       .text  00000000 
f0001d86 l       .text  00000000 
f0001d8c l       .text  00000000 
f0001d90 l       .text  00000000 
f0001d94 l       .text  00000000 
f0001d94 l       .text  00000000 
f0001d9c l       .text  00000000 
f0001d9e l       .text  00000000 
f0001dac l       .text  00000000 
f0001dac l       .text  00000000 
f0001db0 l       .text  00000000 
f0001dbc l       .text  00000000 
f0001dbc l       .text  00000000 
f0001dc0 l       .text  00000000 
f0001dc0 l       .text  00000000 
f0001dce l       .text  00000000 
f0001dce l       .text  00000000 
f0001dd0 l       .text  00000000 
f0001dd4 l       .text  00000000 
f0001dd4 l       .text  00000000 
f0001dd8 l       .text  00000000 
f0004082 l     O .rodata        00000010 kDigitsLow
f0001dea l       .text  00000000 
f0001dea l       .text  00000000 
f0001df2 l       .text  00000000 
f0001dfa l       .text  00000000 
f0001dfa l       .text  00000000 
f0001e04 l       .text  00000000 
f0001e04 l       .text  00000000 
f0001e08 l       .text  00000000 
f0001e08 l       .text  00000000 
f0001e12 l       .text  00000000 
f0001e12 l       .text  00000000 
f0001e1a l       .text  00000000 
f0001e1a l       .text  00000000 
f0001e1e l       .text  00000000 
f00040af l     O .rodata        00000010 kDigitsHigh
f0001e28 l       .text  00000000 
f0001e28 l       .text  00000000 
f0001e32 l       .text  00000000 
f0001e32 l       .text  00000000 
f0001e36 l       .text  00000000 
f0001e40 l       .text  00000000 
f0001e40 l       .text  00000000 
f0001e44 l       .text  00000000 
f0001e4e l       .text  00000000 
f0001e4e l       .text  00000000 
f0001e56 l       .text  00000000 
f0001e56 l       .text  00000000 
f0001e5a l       .text  00000000 
f0001e64 l       .text  00000000 
f0001e64 l       .text  00000000 
f0001e6e l       .text  00000000 
f0001e72 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e76 l       .text  00000000 
f0001e82 l       .text  00000000 
f0001e82 l       .text  00000000 
f0001e86 l       .text  00000000 
f0001e90 l       .text  00000000 
f0001e94 l       .text  00000000 
f0001e94 l       .text  00000000 
f0001e96 l       .text  00000000 
f0001e96 l       .text  00000000 
f0001e9a l       .text  00000000 
f0001e9a l       .text  00000000 
f0001e9e l       .text  00000000 
f0001ea8 l       .text  00000000 
f0001ea8 l       .text  00000000 
f0001eac l       .text  00000000 
f0001eb8 l       .text  00000000 
f0001eb8 l       .text  00000000 
f0001ebc l       .text  00000000 
f0001ebc l       .text  00000000 
f0001eca l       .text  00000000 
f0001eca l       .text  00000000 
f0001ed4 l       .text  00000000 
f0001ed4 l       .text  00000000 
f0001ed8 l       .text  00000000 
f0001ed8 l       .text  00000000 
f0002206 l     F .text  0000007e write_digits
f0001eee l       .text  00000000 
f0001eee l       .text  00000000 
f0001ef4 l       .text  00000000 
f0001ef4 l       .text  00000000 
f0001efe l       .text  00000000 
f0001efe l       .text  00000000 
f0001f00 l       .text  00000000 
f0001f0a l       .text  00000000 
f0001f0a l       .text  00000000 
f0001f14 l       .text  00000000 
f0001f14 l       .text  00000000 
f0001f16 l       .text  00000000 
f0001f16 l       .text  00000000 
f0001f18 l       .text  00000000 
f0001f18 l       .text  00000000 
f0001f1c l       .text  00000000 
f0001f1c l       .text  00000000 
f0001f20 l       .text  00000000 
f0001f22 l       .text  00000000 
f0001f26 l       .text  00000000 
f0001f26 l       .text  00000000 
f0001f2a l       .text  00000000 
f0001f2a l       .text  00000000 
f0001f36 l       .text  00000000 
f0001f36 l       .text  00000000 
f0001f38 l       .text  00000000 
f0001f38 l       .text  00000000 
f0001f3a l       .text  00000000 
f0001f3a l       .text  00000000 
f0001f42 l       .text  00000000 
f0001f42 l       .text  00000000 
f0001f46 l       .text  00000000 
f0001f46 l       .text  00000000 
f0001f54 l       .text  00000000 
f0001f54 l       .text  00000000 
f0001f56 l       .text  00000000 
f0001f64 l       .text  00000000 
f0001f64 l       .text  00000000 
f0001f68 l       .text  00000000 
f0001f68 l       .text  00000000 
f0001f6c l       .text  00000000 
f0001f6c l       .text  00000000 
f0001f7a l       .text  00000000 
f0001f7a l       .text  00000000 
f0001f7e l       .text  00000000 
f0001f7e l       .text  00000000 
f0001f86 l       .text  00000000 
f0001f86 l       .text  00000000 
f0001f88 l       .text  00000000 
f0001f88 l       .text  00000000 
f0001f8a l       .text  00000000 
f0001f8a l       .text  00000000 
f0001f9e l       .text  00000000 
f0001f9e l       .text  00000000 
f0001fa0 l       .text  00000000 
f0001fae l       .text  00000000 
f0001fae l       .text  00000000 
f0001fb0 l       .text  00000000 
f0001fb0 l       .text  00000000 
f0001fb2 l       .text  00000000 
f0001fba l       .text  00000000 
f0001fbe l       .text  00000000 
f0001fc0 l       .text  00000000 
f0001fca l       .text  00000000 
f0001fca l       .text  00000000 
f0001fce l       .text  00000000 
f0001fd8 l       .text  00000000 
f0001fd8 l       .text  00000000 
f0001fdc l       .text  00000000 
f0001fe8 l       .text  00000000 
f0001fe8 l       .text  00000000 
f0001fec l       .text  00000000 
f0001fec l       .text  00000000 
f0001ff6 l       .text  00000000 
f0001ff6 l       .text  00000000 
f0001ffe l       .text  00000000 
f0001ffe l       .text  00000000 
f0002002 l       .text  00000000 
f000200a l       .text  00000000 
f000200a l       .text  00000000 
f0002014 l       .text  00000000 
f0002014 l       .text  00000000 
f000201e l       .text  00000000 
f000201e l       .text  00000000 
f0002022 l       .text  00000000 
f000202a l       .text  00000000 
f000202a l       .text  00000000 
f0002034 l       .text  00000000 
f0002036 l       .text  00000000 
f0002036 l       .text  00000000 
f000203a l       .text  00000000 
f0002044 l       .text  00000000 
f0002044 l       .text  00000000 
f000204c l       .text  00000000 
f000204c l       .text  00000000 
f0002050 l       .text  00000000 
f0002058 l       .text  00000000 
f0002058 l       .text  00000000 
f0002122 l     F .text  000000e4 hex_dump
f0002062 l       .text  00000000 
f0002064 l       .text  00000000 
f00040bf l     O .rodata        0000000f kUnknownSpec
f0002064 l       .text  00000000 
f000206e l       .text  00000000 
f000206e l       .text  00000000 
f0002072 l       .text  00000000 
f0002074 l       .text  00000000 
f0002074 l       .text  00000000 
f0002078 l       .text  00000000 
f000207e l       .text  00000000 
f000207e l       .text  00000000 
f0002082 l       .text  00000000 
f000208e l       .text  00000000 
f000208e l       .text  00000000 
f0002090 l       .text  00000000 
f0002090 l       .text  00000000 
f00020a4 l       .text  00000000 
f00020a4 l       .text  00000000 
f00020a8 l       .text  00000000 
f00020b6 l       .text  00000000 
f00020b6 l       .text  00000000 
f00020ba l       .text  00000000 
f00020ba l       .text  00000000 
f00020c0 l       .text  00000000 
f00020c0 l       .text  00000000 
f00020c2 l       .text  00000000 
f00020c2 l       .text  00000000 
f00020c4 l       .text  00000000 
f00020c4 l       .text  00000000 
f00020cc l       .text  00000000 
f00020ce l       .text  00000000 
f00020d0 l       .text  00000000 
f00020d6 l       .text  00000000 
f00020d6 l       .text  00000000 
f00020e2 l       .text  00000000 
f0004092 l     O .rodata        00000011 kErrorNul
f00020e2 l       .text  00000000 
f00020ec l       .text  00000000 
f00020ec l       .text  00000000 
f00020f0 l       .text  00000000 
f00020f4 l       .text  00000000 
f00020f6 l       .text  00000000 
f00020f6 l       .text  00000000 
f0002106 l       .text  00000000 
f000210a l       .text  00000000 
f0002116 l       .text  00000000 
f00040a3 l     O .rodata        0000000c kErrorTooWide
f0002116 l       .text  00000000 
f0002122 l       .text  00000000 
f0002122 l       .text  00000000 
f0002122 l       .text  00000000 
f0002122 l       .text  00000000 
f0002122 l       .text  00000000 
f0002122 l       .text  00000000 
f0002124 l       .text  00000000 
f000213c l       .text  00000000 
f000213e l       .text  00000000 
f0002140 l       .text  00000000 
f0002142 l       .text  00000000 
f0002144 l       .text  00000000 
f0002148 l       .text  00000000 
f0002148 l       .text  00000000 
f000214c l       .text  00000000 
f0002150 l       .text  00000000 
f0002150 l       .text  00000000 
f000215a l       .text  00000000 
f000215a l       .text  00000000 
f000215c l       .text  00000000 
f000215e l       .text  00000000 
f0002164 l       .text  00000000 
f0002164 l       .text  00000000 
f0002168 l       .text  00000000 
f000216c l       .text  00000000 
f000216c l       .text  00000000 
f0002174 l       .text  00000000 
f0002174 l       .text  00000000 
f0002176 l       .text  00000000 
f0002178 l       .text  00000000 
f0002178 l       .text  00000000 
f000217a l       .text  00000000 
f000217a l       .text  00000000 
f0002180 l       .text  00000000 
f0002180 l       .text  00000000 
f0002182 l       .text  00000000 
f0002182 l       .text  00000000 
f0002186 l       .text  00000000 
f000218a l       .text  00000000 
f0002190 l       .text  00000000 
f0002190 l       .text  00000000 
f0002196 l       .text  00000000 
f000219e l       .text  00000000 
f000219e l       .text  00000000 
f00021a0 l       .text  00000000 
f00021a4 l       .text  00000000 
f00021a8 l       .text  00000000 
f00021ae l       .text  00000000 
f00021b2 l       .text  00000000 
f00021b6 l       .text  00000000 
f00021b8 l       .text  00000000 
f00021be l       .text  00000000 
f00021c0 l       .text  00000000 
f00021c8 l       .text  00000000 
f00021ce l       .text  00000000 
f00021d2 l       .text  00000000 
f00021d2 l       .text  00000000 
f00021d4 l       .text  00000000 
f00021d6 l       .text  00000000 
f00021d6 l       .text  00000000 
f00021d8 l       .text  00000000 
f00021da l       .text  00000000 
f00021de l       .text  00000000 
f00021de l       .text  00000000 
f00021e0 l       .text  00000000 
f00021e6 l       .text  00000000 
f00021e6 l       .text  00000000 
f00021e8 l       .text  00000000 
f00021f0 l       .text  00000000 
f00021f2 l       .text  00000000 
f00021f6 l       .text  00000000 
f00021f8 l       .text  00000000 
f00021fa l       .text  00000000 
f00021fc l       .text  00000000 
f0002206 l       .text  00000000 
f0002206 l       .text  00000000 
f0002206 l       .text  00000000 
f0002206 l       .text  00000000 
f0002206 l       .text  00000000 
f0002208 l       .text  00000000 
f000220a l       .text  00000000 
f000220c l       .text  00000000 
f000220c l       .text  00000000 
f000220e l       .text  00000000 
f0002210 l       .text  00000000 
f0002214 l       .text  00000000 
f0002214 l       .text  00000000 
f0002216 l       .text  00000000 
f0002216 l       .text  00000000 
f0002222 l       .text  00000000 
f0002222 l       .text  00000000 
f0002224 l       .text  00000000 
f0002228 l       .text  00000000 
f0002230 l       .text  00000000 
f0002230 l       .text  00000000 
f0002232 l       .text  00000000 
f0002236 l       .text  00000000 
f000223a l       .text  00000000 
f000223a l       .text  00000000 
f000223c l       .text  00000000 
f000223c l       .text  00000000 
f0002240 l       .text  00000000 
f0002246 l       .text  00000000 
f0002246 l       .text  00000000 
f0002248 l       .text  00000000 
f000224a l       .text  00000000 
f000224c l       .text  00000000 
f0002250 l       .text  00000000 
f0002254 l       .text  00000000 
f0002258 l       .text  00000000 
f0002258 l       .text  00000000 
f0002262 l       .text  00000000 
f0002266 l       .text  00000000 
f0002268 l       .text  00000000 
f000226c l       .text  00000000 
f0002270 l       .text  00000000 
f0002272 l       .text  00000000 
f0002274 l       .text  00000000 
f0002276 l       .text  00000000 
f0002276 l       .text  00000000 
f000227c l       .text  00000000 
f000227e l       .text  00000000 
f000227e l       .text  00000000 
f0002284 l       .text  00000000 
f0002284 l       .text  00000000 
000029ab l       .debug_loc     00000000 
000029d7 l       .debug_loc     00000000 
000029f2 l       .debug_loc     00000000 
00002a18 l       .debug_loc     00000000 
00002a44 l       .debug_loc     00000000 
00002a75 l       .debug_loc     00000000 
00002aa6 l       .debug_loc     00000000 
00002ae2 l       .debug_loc     00000000 
00002b13 l       .debug_loc     00000000 
00002b3a l       .debug_loc     00000000 
00002b6b l       .debug_loc     00000000 
00002b86 l       .debug_loc     00000000 
00002ba2 l       .debug_loc     00000000 
00002bbd l       .debug_loc     00000000 
00002be3 l       .debug_loc     00000000 
00002c09 l       .debug_loc     00000000 
00002c45 l       .debug_loc     00000000 
00002d50 l       .debug_loc     00000000 
00002eaa l       .debug_loc     00000000 
00002faa l       .debug_loc     00000000 
000030b5 l       .debug_loc     00000000 
000030d5 l       .debug_loc     00000000 
000030fb l       .debug_loc     00000000 
0000312b l       .debug_loc     00000000 
00003363 l       .debug_loc     00000000 
0000337f l       .debug_loc     00000000 
0000339a l       .debug_loc     00000000 
0000350f l       .debug_loc     00000000 
0000365f l       .debug_loc     00000000 
00003773 l       .debug_loc     00000000 
00003799 l       .debug_loc     00000000 
000037b4 l       .debug_loc     00000000 
000037cf l       .debug_loc     00000000 
000037ea l       .debug_loc     00000000 
00003805 l       .debug_loc     00000000 
00003820 l       .debug_loc     00000000 
0000383c l       .debug_loc     00000000 
00003857 l       .debug_loc     00000000 
00003872 l       .debug_loc     00000000 
0000388d l       .debug_loc     00000000 
000038a8 l       .debug_loc     00000000 
000038da l       .debug_loc     00000000 
0000390d l       .debug_loc     00000000 
00003928 l       .debug_loc     00000000 
0000397b l       .debug_loc     00000000 
000039ae l       .debug_loc     00000000 
000039c9 l       .debug_loc     00000000 
000039e4 l       .debug_loc     00000000 
000039ff l       .debug_loc     00000000 
00003a1a l       .debug_loc     00000000 
00003a35 l       .debug_loc     00000000 
00003a50 l       .debug_loc     00000000 
00003a6b l       .debug_loc     00000000 
00003a86 l       .debug_loc     00000000 
00003aa1 l       .debug_loc     00000000 
00003abc l       .debug_loc     00000000 
00003ad7 l       .debug_loc     00000000 
00003af3 l       .debug_loc     00000000 
00003b12 l       .debug_loc     00000000 
00003b2d l       .debug_loc     00000000 
00003b5e l       .debug_loc     00000000 
00003b84 l       .debug_loc     00000000 
00003bb5 l       .debug_loc     00000000 
00003be6 l       .debug_loc     00000000 
00003c01 l       .debug_loc     00000000 
00003c1c l       .debug_loc     00000000 
00003c37 l       .debug_loc     00000000 
00003c68 l       .debug_loc     00000000 
00003c83 l       .debug_loc     00000000 
00003c9e l       .debug_loc     00000000 
00003cba l       .debug_loc     00000000 
00003ce0 l       .debug_loc     00000000 
00003d11 l       .debug_loc     00000000 
00003d2c l       .debug_loc     00000000 
00003d47 l       .debug_loc     00000000 
00003d6d l       .debug_loc     00000000 
00003d93 l       .debug_loc     00000000 
00003dae l       .debug_loc     00000000 
00003dc9 l       .debug_loc     00000000 
00003de4 l       .debug_loc     00000000 
00003dff l       .debug_loc     00000000 
00003e1e l       .debug_loc     00000000 
00003e39 l       .debug_loc     00000000 
00003e54 l       .debug_loc     00000000 
00003e70 l       .debug_loc     00000000 
00003e8b l       .debug_loc     00000000 
00003ea6 l       .debug_loc     00000000 
00003ec5 l       .debug_loc     00000000 
00003eeb l       .debug_loc     00000000 
00003f1c l       .debug_loc     00000000 
00003f74 l       .debug_loc     00000000 
00003fbe l       .debug_loc     00000000 
00004010 l       .debug_loc     00000000 
0000404d l       .debug_loc     00000000 
00004089 l       .debug_loc     00000000 
000040f3 l       .debug_loc     00000000 
0000413c l       .debug_loc     00000000 
000041a6 l       .debug_loc     00000000 
000041cc l       .debug_loc     00000000 
000041e7 l       .debug_loc     00000000 
00004202 l       .debug_loc     00000000 
00004229 l       .debug_loc     00000000 
00004271 l       .debug_loc     00000000 
00004297 l       .debug_loc     00000000 
000042bd l       .debug_loc     00000000 
000042e3 l       .debug_loc     00000000 
000042fe l       .debug_loc     00000000 
0000432e l       .debug_loc     00000000 
00004354 l       .debug_loc     00000000 
00004386 l       .debug_loc     00000000 
000043c4 l       .debug_loc     00000000 
000043f3 l       .debug_loc     00000000 
0000440e l       .debug_loc     00000000 
00004441 l       .debug_loc     00000000 
0000445c l       .debug_loc     00000000 
00004498 l       .debug_loc     00000000 
000044be l       .debug_loc     00000000 
000044d9 l       .debug_loc     00000000 
000044f4 l       .debug_loc     00000000 
0000450f l       .debug_loc     00000000 
00004565 l       .debug_loc     00000000 
00004594 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002aa5 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000698 l       .debug_ranges  00000000 
00002ac3 l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
00002ae2 l       .debug_str     00000000 
00002afa l       .debug_str     00000000 
00002aee l       .debug_str     00000000 
00000839 l       .debug_str     00000000 
00002dda l       .debug_str     00000000 
000008df l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
00002b08 l       .debug_str     00000000 
00002b12 l       .debug_str     00000000 
00002e32 l       .debug_str     00000000 
00002b20 l       .debug_str     00000000 
00003711 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
0000368a l       .debug_str     00000000 
00002cef l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
00002eb9 l       .debug_str     00000000 
00001af0 l       .debug_str     00000000 
00002d19 l       .debug_str     00000000 
00002ec9 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00002b2a l       .debug_str     00000000 
00002b36 l       .debug_str     00000000 
00002b43 l       .debug_str     00000000 
00002b92 l       .debug_str     00000000 
00002b81 l       .debug_str     00000000 
00002b5a l       .debug_str     00000000 
00002b69 l       .debug_str     00000000 
00002b78 l       .debug_str     00000000 
00002ba5 l       .debug_str     00000000 
0000029d l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000241 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000261 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
0000028f l       .debug_str     00000000 
00002bb0 l       .debug_str     00000000 
00002bb9 l       .debug_str     00000000 
00002bc4 l       .debug_str     00000000 
00002bcc l       .debug_str     00000000 
00002bd8 l       .debug_str     00000000 
00002be4 l       .debug_str     00000000 
00002bf1 l       .debug_str     00000000 
00002c01 l       .debug_str     00000000 
00002c12 l       .debug_str     00000000 
00002c1f l       .debug_str     00000000 
00002c28 l       .debug_str     00000000 
00002c32 l       .debug_str     00000000 
00002c3c l       .debug_str     00000000 
00002c47 l       .debug_str     00000000 
00002c51 l       .debug_str     00000000 
00002c5c l       .debug_str     00000000 
000008dd l       .debug_str     00000000 
00000205 l       .debug_str     00000000 
000001d8 l       .debug_str     00000000 
00000cb4 l       .debug_str     00000000 
00000cab l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
00002c79 l       .debug_str     00000000 
00002c6a l       .debug_str     00000000 
00002c6e l       .debug_str     00000000 
0000019b l       .debug_str     00000000 
00002d99 l       .debug_str     00000000 
00002c8d l       .debug_str     00000000 
00000fbd l       .debug_str     00000000 
00000caf l       .debug_str     00000000 
00002da7 l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
00002c9d l       .debug_str     00000000 
00002a5f l       .debug_str     00000000 
000001a9 l       .debug_str     00000000 
000001a4 l       .debug_str     00000000 
00002a92 l       .debug_str     00000000 
00002a88 l       .debug_str     00000000 
00002a53 l       .debug_str     00000000 
00000560 l       .debug_ranges  00000000 
00002db5 l       .debug_str     00000000 
00002e3f l       .debug_str     00000000 
00002e7a l       .debug_str     00000000 
00000640 l       .debug_ranges  00000000 
00002d33 l       .debug_str     00000000 
00000578 l       .debug_ranges  00000000 
000005a0 l       .debug_ranges  00000000 
000005c0 l       .debug_ranges  00000000 
000005d8 l       .debug_ranges  00000000 
00000610 l       .debug_ranges  00000000 
000005f8 l       .debug_ranges  00000000 
00000628 l       .debug_ranges  00000000 
00002cb7 l       .debug_str     00000000 
00002ccd l       .debug_str     00000000 
0000429d l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
00002cd6 l       .debug_str     00000000 
00002d14 l       .debug_str     00000000 
00002d01 l       .debug_str     00000000 
00002cde l       .debug_str     00000000 
00000dc0 l       .debug_str     00000000 
00002cf7 l       .debug_str     00000000 
00002d1d l       .debug_str     00000000 
00002d2f l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000012b8 l       .debug_str     00000000 
0000303f l       .debug_str     00000000 
00002d3e l       .debug_str     00000000 
00002d38 l       .debug_str     00000000 
00002d45 l       .debug_str     00000000 
00002d4d l       .debug_str     00000000 
00001c54 l       .debug_str     00000000 
00002d51 l       .debug_str     00000000 
00001c5f l       .debug_str     00000000 
00003058 l       .debug_str     00000000 
00002d55 l       .debug_str     00000000 
00002e29 l       .debug_str     00000000 
0000376c l       .debug_str     00000000 
00002eae l       .debug_str     00000000 
00002ea5 l       .debug_str     00000000 
00002ec0 l       .debug_str     00000000 
00000a22 l       .debug_str     00000000 
00002dc3 l       .debug_str     00000000 
00002dd1 l       .debug_str     00000000 
00002e49 l       .debug_str     00000000 
00000706 l       .debug_str     00000000 
00002ddf l       .debug_str     00000000 
00002d64 l       .debug_str     00000000 
00002b8e l       .debug_str     00000000 
00002dec l       .debug_str     00000000 
00002e16 l       .debug_str     00000000 
00002e66 l       .debug_str     00000000 
00002b73 l       .debug_str     00000000 
00000680 l       .debug_ranges  00000000 
00002e59 l       .debug_str     00000000 
00002e75 l       .debug_str     00000000 
00002e88 l       .debug_str     00000000 
00002b64 l       .debug_str     00000000 
00000660 l       .debug_ranges  00000000 
00002e52 l       .debug_str     00000000 
00002e97 l       .debug_str     00000000 
00002ea0 l       .debug_str     00000000 
00002d76 l       .debug_str     00000000 
00002d8a l       .debug_str     00000000 
00002df9 l       .debug_str     00000000 
00002e08 l       .debug_str     00000000 
00002d92 l       .debug_str     00000000 
00000718 l       .debug_frame   00000000 
f0001bf2 l       .text  00000000 
f0001c08 l       .text  00000000 
f0001c48 l       .text  00000000 
f0001c7a l       .text  00000000 
f0001c94 l       .text  00000000 
f0002122 l       .text  00000000 
f0002206 l       .text  00000000 
f0002284 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
f0002284 l       .text  00000000 
f0002284 l       .text  00000000 
f0002284 l       .text  00000000 
f0002284 l       .text  00000000 
f0002288 l       .text  00000000 
f0002290 l       .text  00000000 
f0002290 l       .text  00000000 
f0002294 l       .text  00000000 
f0002294 l       .text  00000000 
f00022a0 l       .text  00000000 
f00022a2 l       .text  00000000 
f00022a2 l       .text  00000000 
f00022a6 l       .text  00000000 
f00022b2 l       .text  00000000 
f00022b4 l       .text  00000000 
f00022b8 l       .text  00000000 
f00022ba l       .text  00000000 
f00022ba l       .text  00000000 
f00022be l       .text  00000000 
f00022be l       .text  00000000 
f00022c2 l       .text  00000000 
f00022c2 l       .text  00000000 
f00022c4 l       .text  00000000 
f00022c4 l       .text  00000000 
f00022c8 l       .text  00000000 
f00022c8 l       .text  00000000 
f00022ca l       .text  00000000 
f00022ce l       .text  00000000 
f00022ce l       .text  00000000 
f00022d2 l       .text  00000000 
f00022d6 l       .text  00000000 
f00022dc l       .text  00000000 
f00022dc l       .text  00000000 
f00022e0 l       .text  00000000 
f00022e2 l       .text  00000000 
f00022e2 l       .text  00000000 
f00022e8 l       .text  00000000 
f00022e8 l       .text  00000000 
f00022ee l       .text  00000000 
f00022ee l       .text  00000000 
f00022f0 l       .text  00000000 
f00022f0 l       .text  00000000 
f00022f6 l       .text  00000000 
f00022f6 l       .text  00000000 
000045af l       .debug_loc     00000000 
000045ca l       .debug_loc     00000000 
000045fb l       .debug_loc     00000000 
00004621 l       .debug_loc     00000000 
00004647 l       .debug_loc     00000000 
00004662 l       .debug_loc     00000000 
00004684 l       .debug_loc     00000000 
000046ab l       .debug_loc     00000000 
000046d2 l       .debug_loc     00000000 
000046f6 l       .debug_loc     00000000 
00004727 l       .debug_loc     00000000 
00004742 l       .debug_loc     00000000 
00004773 l       .debug_loc     00000000 
000047cd l       .debug_loc     00000000 
00004809 l       .debug_loc     00000000 
0000482d l       .debug_loc     00000000 
00004852 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00002ecf l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000748 l       .debug_ranges  00000000 
00002eeb l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
00002efb l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
00003029 l       .debug_str     00000000 
00002f08 l       .debug_str     00000000 
00002f0c l       .debug_str     00000000 
00002f17 l       .debug_str     00000000 
00002f20 l       .debug_str     00000000 
00002f31 l       .debug_str     00000000 
00002f43 l       .debug_str     00000000 
00002f4d l       .debug_str     00000000 
00002f5c l       .debug_str     00000000 
00002f6e l       .debug_str     00000000 
00002f81 l       .debug_str     00000000 
00002f95 l       .debug_str     00000000 
00002f9e l       .debug_str     00000000 
00002faa l       .debug_str     00000000 
00002fb9 l       .debug_str     00000000 
00002fc3 l       .debug_str     00000000 
00002fd0 l       .debug_str     00000000 
00002fda l       .debug_str     00000000 
00002feb l       .debug_str     00000000 
0000019b l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
000008df l       .debug_str     00000000 
000008dd l       .debug_str     00000000 
0000303a l       .debug_str     00000000 
00003048 l       .debug_str     00000000 
000000fa l       .debug_str     00000000 
00001071 l       .debug_str     00000000 
0000095b l       .debug_str     00000000 
00000972 l       .debug_str     00000000 
00000975 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
00000991 l       .debug_str     00000000 
00000980 l       .debug_str     00000000 
0000097b l       .debug_str     00000000 
00001d4b l       .debug_str     00000000 
00003072 l       .debug_str     00000000 
00003035 l       .debug_str     00000000 
00003080 l       .debug_str     00000000 
00002d51 l       .debug_str     00000000 
00000730 l       .debug_ranges  00000000 
00003051 l       .debug_str     00000000 
0000012c l       .debug_str     00000000 
0000303f l       .debug_str     00000000 
00002d3e l       .debug_str     00000000 
0000305c l       .debug_str     00000000 
00002d55 l       .debug_str     00000000 
0000308a l       .debug_str     00000000 
00003058 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
0000090c l       .debug_frame   00000000 
f00022f6 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart_autogen.c
f00022f6 l       .text  00000000 
f00022f6 l       .text  00000000 
f00022f6 l       .text  00000000 
f00022f6 l       .text  00000000 
f00022f8 l       .text  00000000 
f00022fa l       .text  00000000 
f00022fe l       .text  00000000 
f0002300 l       .text  00000000 
f0002302 l       .text  00000000 
f0002304 l       .text  00000000 
f0002304 l       .text  00000000 
00004874 l       .debug_loc     00000000 
0000488f l       .debug_loc     00000000 
000048aa l       .debug_loc     00000000 
000048c5 l       .debug_loc     00000000 
000048e1 l       .debug_loc     00000000 
000048fd l       .debug_loc     00000000 
00004918 l       .debug_loc     00000000 
00004933 l       .debug_loc     00000000 
0000494e l       .debug_loc     00000000 
00004969 l       .debug_loc     00000000 
00004984 l       .debug_loc     00000000 
0000499f l       .debug_loc     00000000 
000049ba l       .debug_loc     00000000 
000049d5 l       .debug_loc     00000000 
000049fb l       .debug_loc     00000000 
00004a16 l       .debug_loc     00000000 
00004a31 l       .debug_loc     00000000 
00004a4f l       .debug_loc     00000000 
00004a76 l       .debug_loc     00000000 
00004a91 l       .debug_loc     00000000 
00004aac l       .debug_loc     00000000 
00004ac7 l       .debug_loc     00000000 
00004ae5 l       .debug_loc     00000000 
00004b0c l       .debug_loc     00000000 
00004b27 l       .debug_loc     00000000 
00004b42 l       .debug_loc     00000000 
00004b5d l       .debug_loc     00000000 
00004b78 l       .debug_loc     00000000 
00004b9e l       .debug_loc     00000000 
00004bb9 l       .debug_loc     00000000 
00004bd4 l       .debug_loc     00000000 
00004bfa l       .debug_loc     00000000 
00004c1a l       .debug_loc     00000000 
00004c40 l       .debug_loc     00000000 
00004c5e l       .debug_loc     00000000 
00004c79 l       .debug_loc     00000000 
00004c9f l       .debug_loc     00000000 
00004cc5 l       .debug_loc     00000000 
00004ce0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003091 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000760 l       .debug_ranges  00000000 
000030be l       .debug_str     00000000 
000030f8 l       .debug_str     00000000 
000030eb l       .debug_str     00000000 
000030c8 l       .debug_str     00000000 
000030d9 l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
0000029d l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000241 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000261 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
0000028f l       .debug_str     00000000 
0000311f l       .debug_str     00000000 
00003107 l       .debug_str     00000000 
000031dd l       .debug_str     00000000 
0000312e l       .debug_str     00000000 
00003145 l       .debug_str     00000000 
0000315c l       .debug_str     00000000 
0000316f l       .debug_str     00000000 
00003185 l       .debug_str     00000000 
0000319b l       .debug_str     00000000 
000031b1 l       .debug_str     00000000 
000031c6 l       .debug_str     00000000 
00000e04 l       .debug_str     00000000 
00000ddf l       .debug_str     00000000 
00000df2 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
00000f4a l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000caf l       .debug_str     00000000 
000009da l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
00000b84 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
000009ee l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
000031ea l       .debug_str     00000000 
00000955 l       .debug_str     00000000 
00000a1c l       .debug_str     00000000 
00000a26 l       .debug_str     00000000 
000031ff l       .debug_str     00000000 
00001902 l       .debug_str     00000000 
00000dc0 l       .debug_str     00000000 
00000ac8 l       .debug_str     00000000 
00003215 l       .debug_str     00000000 
00003311 l       .debug_str     00000000 
00000b1f l       .debug_str     00000000 
00000972 l       .debug_str     00000000 
000009b9 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
000009c3 l       .debug_str     00000000 
0000322c l       .debug_str     00000000 
00001e03 l       .debug_str     00000000 
00003338 l       .debug_str     00000000 
00001d4b l       .debug_str     00000000 
00003244 l       .debug_str     00000000 
0000095b l       .debug_str     00000000 
00000975 l       .debug_str     00000000 
00000991 l       .debug_str     00000000 
00000980 l       .debug_str     00000000 
0000097b l       .debug_str     00000000 
000009a4 l       .debug_str     00000000 
00003261 l       .debug_str     00000000 
0000327a l       .debug_str     00000000 
00000b61 l       .debug_str     00000000 
00003347 l       .debug_str     00000000 
0000328d l       .debug_str     00000000 
00001b77 l       .debug_str     00000000 
00003355 l       .debug_str     00000000 
00001e86 l       .debug_str     00000000 
000032a6 l       .debug_str     00000000 
00003365 l       .debug_str     00000000 
000032bf l       .debug_str     00000000 
000032d8 l       .debug_str     00000000 
0000068f l       .debug_str     00000000 
00000cb4 l       .debug_str     00000000 
00000cab l       .debug_str     00000000 
000032f1 l       .debug_str     00000000 
00003302 l       .debug_str     00000000 
0000331a l       .debug_str     00000000 
00000f8e l       .debug_str     00000000 
00003370 l       .debug_str     00000000 
00000940 l       .debug_frame   00000000 
f0002304 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_uart.c
f0002304 l       .text  00000000 
f0002304 l       .text  00000000 
f0002304 l       .text  00000000 
f0002306 l       .text  00000000 
f0002310 l       .text  00000000 
f0002312 l       .text  00000000 
f0002314 l       .text  00000000 
f0002316 l       .text  00000000 
f0002316 l       .text  00000000 
f0002318 l       .text  00000000 
f000231a l       .text  00000000 
f000231e l       .text  00000000 
f0002320 l       .text  00000000 
f0002322 l       .text  00000000 
f000232a l       .text  00000000 
f0002336 l       .text  00000000 
f0002346 l       .text  00000000 
f000234e l       .text  00000000 
f0002354 l       .text  00000000 
f0002354 l       .text  00000000 
f0002358 l       .text  00000000 
f0002358 l       .text  00000000 
f000235a l       .text  00000000 
f000235c l       .text  00000000 
f000235e l       .text  00000000 
f000235e l       .text  00000000 
f0002360 l       .text  00000000 
f0002360 l       .text  00000000 
f0002364 l       .text  00000000 
f0002364 l       .text  00000000 
f0002366 l       .text  00000000 
f0002368 l       .text  00000000 
f0002368 l       .text  00000000 
f000236a l       .text  00000000 
f000236a l       .text  00000000 
f000236c l       .text  00000000 
f000236c l       .text  00000000 
f0002370 l       .text  00000000 
f0002370 l       .text  00000000 
f0002372 l       .text  00000000 
f0002372 l       .text  00000000 
f0002376 l       .text  00000000 
f0002376 l       .text  00000000 
f0002378 l       .text  00000000 
f0002378 l       .text  00000000 
f000237c l       .text  00000000 
f000237c l       .text  00000000 
f000237e l       .text  00000000 
f0002380 l       .text  00000000 
f0002380 l       .text  00000000 
f0002382 l       .text  00000000 
f0002382 l       .text  00000000 
f0002386 l       .text  00000000 
f0002386 l       .text  00000000 
f000238a l       .text  00000000 
f000238a l       .text  00000000 
f000238c l       .text  00000000 
f0002390 l       .text  00000000 
f0002390 l       .text  00000000 
f0002394 l       .text  00000000 
f0002394 l       .text  00000000 
f0002396 l       .text  00000000 
f000239a l       .text  00000000 
f000239c l       .text  00000000 
f000239c l       .text  00000000 
f000239e l       .text  00000000 
f00023a2 l       .text  00000000 
f00023a4 l       .text  00000000 
f00023a4 l       .text  00000000 
f00023a6 l       .text  00000000 
f00023a6 l       .text  00000000 
f00023a8 l       .text  00000000 
f00023a8 l       .text  00000000 
f00023aa l       .text  00000000 
f00023aa l       .text  00000000 
f00023ae l       .text  00000000 
f00023ae l       .text  00000000 
f00023be l       .text  00000000 
f00023be l       .text  00000000 
f00023be l       .text  00000000 
f00023be l       .text  00000000 
f00023be l       .text  00000000 
f00023be l       .text  00000000 
f00023c0 l       .text  00000000 
f00023c2 l       .text  00000000 
f00023c2 l       .text  00000000 
f00023c4 l       .text  00000000 
f00023c4 l       .text  00000000 
f00023c6 l       .text  00000000 
f00023c6 l       .text  00000000 
f00023c8 l       .text  00000000 
f00023c8 l       .text  00000000 
f00023ca l       .text  00000000 
f00023ca l       .text  00000000 
f00023cc l       .text  00000000 
f00023cc l       .text  00000000 
f00023ce l       .text  00000000 
f00023ce l       .text  00000000 
f00023d0 l       .text  00000000 
f00023d2 l       .text  00000000 
f00023d2 l       .text  00000000 
f00023d4 l       .text  00000000 
f00023d4 l       .text  00000000 
f00023d6 l       .text  00000000 
f00023d6 l       .text  00000000 
f00023d8 l       .text  00000000 
f00023da l       .text  00000000 
f00023dc l       .text  00000000 
f00023dc l       .text  00000000 
f00023de l       .text  00000000 
f00023de l       .text  00000000 
f00023e0 l       .text  00000000 
f00023e0 l       .text  00000000 
00004cfb l       .debug_loc     00000000 
00004d21 l       .debug_loc     00000000 
00004d49 l       .debug_loc     00000000 
00004d78 l       .debug_loc     00000000 
00004d93 l       .debug_loc     00000000 
00004daf l       .debug_loc     00000000 
00004de5 l       .debug_loc     00000000 
00004e00 l       .debug_loc     00000000 
00004e27 l       .debug_loc     00000000 
00004e4c l       .debug_loc     00000000 
00004e72 l       .debug_loc     00000000 
00004e98 l       .debug_loc     00000000 
00004ebe l       .debug_loc     00000000 
00004ed9 l       .debug_loc     00000000 
00004efb l       .debug_loc     00000000 
00004f21 l       .debug_loc     00000000 
00004f47 l       .debug_loc     00000000 
00004f6d l       .debug_loc     00000000 
00004f93 l       .debug_loc     00000000 
00004fae l       .debug_loc     00000000 
00004fd0 l       .debug_loc     00000000 
00004ff6 l       .debug_loc     00000000 
00005011 l       .debug_loc     00000000 
00005038 l       .debug_loc     00000000 
00005053 l       .debug_loc     00000000 
0000506e l       .debug_loc     00000000 
00005089 l       .debug_loc     00000000 
000050b0 l       .debug_loc     00000000 
000050cb l       .debug_loc     00000000 
000050e6 l       .debug_loc     00000000 
0000510c l       .debug_loc     00000000 
00005127 l       .debug_loc     00000000 
00005142 l       .debug_loc     00000000 
0000515d l       .debug_loc     00000000 
00005183 l       .debug_loc     00000000 
0000519e l       .debug_loc     00000000 
000051b9 l       .debug_loc     00000000 
000051d4 l       .debug_loc     00000000 
000051ef l       .debug_loc     00000000 
0000520a l       .debug_loc     00000000 
00005225 l       .debug_loc     00000000 
00005240 l       .debug_loc     00000000 
00005263 l       .debug_loc     00000000 
0000527e l       .debug_loc     00000000 
00005299 l       .debug_loc     00000000 
000052b4 l       .debug_loc     00000000 
000052cf l       .debug_loc     00000000 
000052f2 l       .debug_loc     00000000 
0000530d l       .debug_loc     00000000 
00005328 l       .debug_loc     00000000 
0000534e l       .debug_loc     00000000 
00005374 l       .debug_loc     00000000 
0000539a l       .debug_loc     00000000 
000053c0 l       .debug_loc     00000000 
000053e6 l       .debug_loc     00000000 
0000540c l       .debug_loc     00000000 
00005427 l       .debug_loc     00000000 
0000544d l       .debug_loc     00000000 
0000547c l       .debug_loc     00000000 
000054a2 l       .debug_loc     00000000 
000054bd l       .debug_loc     00000000 
000054d8 l       .debug_loc     00000000 
000054f8 l       .debug_loc     00000000 
00005513 l       .debug_loc     00000000 
0000552e l       .debug_loc     00000000 
0000555f l       .debug_loc     00000000 
00005590 l       .debug_loc     00000000 
000055b6 l       .debug_loc     00000000 
000055dc l       .debug_loc     00000000 
000055f8 l       .debug_loc     00000000 
00005613 l       .debug_loc     00000000 
0000562e l       .debug_loc     00000000 
00005649 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000338f l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000007f8 l       .debug_ranges  00000000 
000033ac l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
0000029d l       .debug_str     00000000 
0000023a l       .debug_str     00000000 
00000241 l       .debug_str     00000000 
0000024b l       .debug_str     00000000 
00000256 l       .debug_str     00000000 
00000261 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000280 l       .debug_str     00000000 
0000028f l       .debug_str     00000000 
00000e04 l       .debug_str     00000000 
00000ddf l       .debug_str     00000000 
00000df2 l       .debug_str     00000000 
00000e34 l       .debug_str     00000000 
00000e0f l       .debug_str     00000000 
00000e21 l       .debug_str     00000000 
00003437 l       .debug_str     00000000 
000033c2 l       .debug_str     00000000 
000033d9 l       .debug_str     00000000 
000033f0 l       .debug_str     00000000 
00003407 l       .debug_str     00000000 
0000341f l       .debug_str     00000000 
00003487 l       .debug_str     00000000 
0000344a l       .debug_str     00000000 
0000345e l       .debug_str     00000000 
00003472 l       .debug_str     00000000 
000034c7 l       .debug_str     00000000 
0000349b l       .debug_str     00000000 
000034b2 l       .debug_str     00000000 
000005bb l       .debug_str     00000000 
000005a4 l       .debug_str     00000000 
000008df l       .debug_str     00000000 
000034d9 l       .debug_str     00000000 
00000caf l       .debug_str     00000000 
00003361 l       .debug_str     00000000 
00000cb4 l       .debug_str     00000000 
00000cab l       .debug_str     00000000 
0000063e l       .debug_str     00000000 
00000659 l       .debug_str     00000000 
0000064d l       .debug_str     00000000 
00000648 l       .debug_str     00000000 
000009da l       .debug_str     00000000 
00000b84 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
000009ee l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
0000095b l       .debug_str     00000000 
00000972 l       .debug_str     00000000 
00000975 l       .debug_str     00000000 
00000991 l       .debug_str     00000000 
00000980 l       .debug_str     00000000 
0000097b l       .debug_str     00000000 
00001d4b l       .debug_str     00000000 
00000f58 l       .debug_str     00000000 
00000fb6 l       .debug_str     00000000 
00003677 l       .debug_str     00000000 
0000367b l       .debug_str     00000000 
00003686 l       .debug_str     00000000 
0000080d l       .debug_str     00000000 
00000ac8 l       .debug_str     00000000 
0000354c l       .debug_str     00000000 
00003440 l       .debug_str     00000000 
00003566 l       .debug_str     00000000 
00003584 l       .debug_str     00000000 
00000839 l       .debug_str     00000000 
000034e4 l       .debug_str     00000000 
00002e7a l       .debug_str     00000000 
00000205 l       .debug_str     00000000 
000001d8 l       .debug_str     00000000 
000034f4 l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
00000b1f l       .debug_str     00000000 
000009b9 l       .debug_str     00000000 
000009c3 l       .debug_str     00000000 
00003501 l       .debug_str     00000000 
00002ea0 l       .debug_str     00000000 
00003580 l       .debug_str     00000000 
00002e4e l       .debug_str     00000000 
00003598 l       .debug_str     00000000 
00003514 l       .debug_str     00000000 
0000351f l       .debug_str     00000000 
0000352d l       .debug_str     00000000 
00003594 l       .debug_str     00000000 
0000353f l       .debug_str     00000000 
00002c9d l       .debug_str     00000000 
000035ab l       .debug_str     00000000 
0000305c l       .debug_str     00000000 
000035c8 l       .debug_str     00000000 
000036a5 l       .debug_str     00000000 
000035e4 l       .debug_str     00000000 
000036af l       .debug_str     00000000 
00001d77 l       .debug_str     00000000 
000009a4 l       .debug_str     00000000 
00003600 l       .debug_str     00000000 
000034d0 l       .debug_str     00000000 
00000f87 l       .debug_str     00000000 
000007c8 l       .debug_ranges  00000000 
000007e0 l       .debug_ranges  00000000 
00003616 l       .debug_str     00000000 
000036e4 l       .debug_str     00000000 
00003631 l       .debug_str     00000000 
0000364d l       .debug_str     00000000 
00002d3e l       .debug_str     00000000 
0000068f l       .debug_str     00000000 
00003665 l       .debug_str     00000000 
00000fad l       .debug_str     00000000 
00000f6b l       .debug_str     00000000 
00000f74 l       .debug_str     00000000 
00000f80 l       .debug_str     00000000 
00000e3d l       .debug_str     00000000 
00000f8e l       .debug_str     00000000 
00000f9b l       .debug_str     00000000 
00003690 l       .debug_str     00000000 
000036ba l       .debug_str     00000000 
000036d0 l       .debug_str     00000000 
00000a14 l       .debug_frame   00000000 
f00023be l       .text  00000000 
f00023e0 l       .text  00000000 
00000000 l    df *ABS*  00000000 math.c
f00023e0 l       .text  00000000 
f00023e0 l       .text  00000000 
f00023e0 l       .text  00000000 
f00023e2 l       .text  00000000 
f00023e8 l       .text  00000000 
f00023f4 l       .text  00000000 
f00023fc l       .text  00000000 
f00023fc l       .text  00000000 
f0002404 l       .text  00000000 
f0002426 l       .text  00000000 
f000242a l       .text  00000000 
f000242a l       .text  00000000 
f000242e l       .text  00000000 
f0002432 l       .text  00000000 
f0002432 l       .text  00000000 
f0002436 l       .text  00000000 
f0002448 l       .text  00000000 
f000244c l       .text  00000000 
f000245c l       .text  00000000 
f000245e l       .text  00000000 
f000245e l       .text  00000000 
f000246e l       .text  00000000 
f0002470 l       .text  00000000 
f0002470 l       .text  00000000 
f0002474 l       .text  00000000 
f0002474 l       .text  00000000 
f0002478 l       .text  00000000 
f0002478 l       .text  00000000 
f000247a l       .text  00000000 
f0002482 l       .text  00000000 
f0002484 l       .text  00000000 
f0002486 l       .text  00000000 
f0002490 l       .text  00000000 
f0002490 l       .text  00000000 
0000566f l       .debug_loc     00000000 
00005687 l       .debug_loc     00000000 
000056ae l       .debug_loc     00000000 
000056df l       .debug_loc     00000000 
00005732 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000036f3 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
0000080d l       .debug_str     00000000 
0000083c l       .debug_str     00000000 
0000036c l       .debug_str     00000000 
0000370d l       .debug_str     00000000 
00001b17 l       .debug_str     00000000 
00003715 l       .debug_str     00000000 
00003719 l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
000005bb l       .debug_str     00000000 
000005a4 l       .debug_str     00000000 
000008df l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
00000b18 l       .debug_frame   00000000 
f0002490 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
f0002490 l       .text  00000000 
f0002490 l       .text  00000000 
f0002490 l       .text  00000000 
f0002490 l       .text  00000000 
f0002498 l       .text  00000000 
f000249c l       .text  00000000 
f000249c l       .text  00000000 
f00024a0 l       .text  00000000 
f00024a0 l       .text  00000000 
f00024a4 l       .text  00000000 
f00024a4 l       .text  00000000 
f00024b0 l       .text  00000000 
f00024b2 l       .text  00000000 
f00024b2 l       .text  00000000 
f00024b8 l       .text  00000000 
f00024b8 l       .text  00000000 
f00024bc l       .text  00000000 
f00024be l       .text  00000000 
f00024c2 l       .text  00000000 
f00024c2 l       .text  00000000 
f00024c4 l       .text  00000000 
f00024c4 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024c6 l       .text  00000000 
f00024ce l       .text  00000000 
f00024d2 l       .text  00000000 
f00024d4 l       .text  00000000 
f00024d8 l       .text  00000000 
f00024dc l       .text  00000000 
f00024dc l       .text  00000000 
f00024e0 l       .text  00000000 
f00024e0 l       .text  00000000 
f00024e4 l       .text  00000000 
f00024e6 l       .text  00000000 
f00024e6 l       .text  00000000 
f00024ea l       .text  00000000 
f00024ea l       .text  00000000 
f00024ec l       .text  00000000 
f00024ec l       .text  00000000 
f00024ee l       .text  00000000 
f00024ee l       .text  00000000 
f00024f2 l       .text  00000000 
f00024f2 l       .text  00000000 
f00024f6 l       .text  00000000 
f00024f8 l       .text  00000000 
f00024fe l       .text  00000000 
f00024fe l       .text  00000000 
f0002502 l       .text  00000000 
f0002506 l       .text  00000000 
f000250e l       .text  00000000 
f000250e l       .text  00000000 
f0002510 l       .text  00000000 
f0002510 l       .text  00000000 
f0002512 l       .text  00000000 
f0002512 l       .text  00000000 
f0002518 l       .text  00000000 
f0002518 l       .text  00000000 
f0002518 l       .text  00000000 
f0002518 l       .text  00000000 
f0002518 l       .text  00000000 
f000251c l       .text  00000000 
f000251c l       .text  00000000 
f0002520 l       .text  00000000 
f0002520 l       .text  00000000 
f0002528 l       .text  00000000 
f0002528 l       .text  00000000 
f000252c l       .text  00000000 
f0002530 l       .text  00000000 
f0002530 l       .text  00000000 
f0002532 l       .text  00000000 
f0002532 l       .text  00000000 
f0002536 l       .text  00000000 
f0002536 l       .text  00000000 
f000253a l       .text  00000000 
f000253a l       .text  00000000 
f000253c l       .text  00000000 
f000253e l       .text  00000000 
f0002540 l       .text  00000000 
f0002540 l       .text  00000000 
f0002544 l       .text  00000000 
f0002548 l       .text  00000000 
f0002558 l       .text  00000000 
f0002558 l       .text  00000000 
f000255c l       .text  00000000 
f000255c l       .text  00000000 
f000255e l       .text  00000000 
f000255e l       .text  00000000 
f0002560 l       .text  00000000 
f0002560 l       .text  00000000 
f0002564 l       .text  00000000 
f0002564 l       .text  00000000 
f000256a l       .text  00000000 
f000256e l       .text  00000000 
f000256e l       .text  00000000 
f0002572 l       .text  00000000 
f0002576 l       .text  00000000 
f0002578 l       .text  00000000 
f000257a l       .text  00000000 
f000257a l       .text  00000000 
f000257a l       .text  00000000 
f000257a l       .text  00000000 
f000257a l       .text  00000000 
f000257e l       .text  00000000 
f000257e l       .text  00000000 
f0002582 l       .text  00000000 
f0002582 l       .text  00000000 
f000258a l       .text  00000000 
f000258e l       .text  00000000 
f0002592 l       .text  00000000 
f0002594 l       .text  00000000 
f0002596 l       .text  00000000 
f0002596 l       .text  00000000 
f000259a l       .text  00000000 
f000259e l       .text  00000000 
f000259e l       .text  00000000 
f00025a0 l       .text  00000000 
f00025a2 l       .text  00000000 
f00025a4 l       .text  00000000 
f00025aa l       .text  00000000 
f00025aa l       .text  00000000 
f00025ac l       .text  00000000 
f00025b0 l       .text  00000000 
f00025bc l       .text  00000000 
f00025ca l       .text  00000000 
f00025ca l       .text  00000000 
f00025ce l       .text  00000000 
f00025d0 l       .text  00000000 
f00025d0 l       .text  00000000 
f00025d4 l       .text  00000000 
f00025d8 l       .text  00000000 
f00025d8 l       .text  00000000 
f00025dc l       .text  00000000 
f00025e0 l       .text  00000000 
f00025e4 l       .text  00000000 
f00025e8 l       .text  00000000 
f00025ec l       .text  00000000 
f00025ec l       .text  00000000 
f00025f0 l       .text  00000000 
f00025f4 l       .text  00000000 
f00025f6 l       .text  00000000 
f00025f6 l       .text  00000000 
f00025f8 l       .text  00000000 
f00025fc l       .text  00000000 
f00025fc l       .text  00000000 
f0002604 l       .text  00000000 
f0002608 l       .text  00000000 
f0002608 l       .text  00000000 
f000260c l       .text  00000000 
f0002610 l       .text  00000000 
f0002614 l       .text  00000000 
f0002616 l       .text  00000000 
f000261a l       .text  00000000 
f000261a l       .text  00000000 
f000261e l       .text  00000000 
f000261e l       .text  00000000 
f0002622 l       .text  00000000 
f0002624 l       .text  00000000 
f0002624 l       .text  00000000 
f0002628 l       .text  00000000 
f0002628 l       .text  00000000 
f0002628 l       .text  00000000 
f0002628 l       .text  00000000 
f0002628 l       .text  00000000 
f000262c l       .text  00000000 
f000262c l       .text  00000000 
f0002630 l       .text  00000000 
f0002630 l       .text  00000000 
f0002638 l       .text  00000000 
f0002638 l       .text  00000000 
f000263c l       .text  00000000 
f000263e l       .text  00000000 
f0002642 l       .text  00000000 
f0002642 l       .text  00000000 
f0002644 l       .text  00000000 
f0002644 l       .text  00000000 
f0002648 l       .text  00000000 
f0002648 l       .text  00000000 
f000264e l       .text  00000000 
f000264e l       .text  00000000 
f0002652 l       .text  00000000 
f0002652 l       .text  00000000 
f000265a l       .text  00000000 
f000265e l       .text  00000000 
f000265e l       .text  00000000 
f0002660 l       .text  00000000 
f0002664 l       .text  00000000 
f0002664 l       .text  00000000 
f0002666 l       .text  00000000 
f0002668 l       .text  00000000 
f0002668 l       .text  00000000 
f0002670 l       .text  00000000 
f0002670 l       .text  00000000 
f0002674 l       .text  00000000 
f0002674 l       .text  00000000 
f000267e l       .text  00000000 
f0002682 l       .text  00000000 
f0002682 l       .text  00000000 
f0002686 l       .text  00000000 
f0002686 l       .text  00000000 
f000268a l       .text  00000000 
f000268e l       .text  00000000 
f000268e l       .text  00000000 
f0002692 l       .text  00000000 
f0002696 l       .text  00000000 
f0002696 l       .text  00000000 
f0002698 l       .text  00000000 
f000269c l       .text  00000000 
f000269c l       .text  00000000 
f00026a0 l       .text  00000000 
f00026a4 l       .text  00000000 
f00026a8 l       .text  00000000 
f00026ac l       .text  00000000 
f00026b0 l       .text  00000000 
f00026b2 l       .text  00000000 
f00026b2 l       .text  00000000 
f00026b6 l       .text  00000000 
f00026b6 l       .text  00000000 
f00026b8 l       .text  00000000 
f00026ba l       .text  00000000 
f00026ba l       .text  00000000 
f00026c2 l       .text  00000000 
f00026c6 l       .text  00000000 
f00026c6 l       .text  00000000 
f00026c8 l       .text  00000000 
f00026cc l       .text  00000000 
f00026cc l       .text  00000000 
f00026ce l       .text  00000000 
f00026d0 l       .text  00000000 
f00026d0 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d2 l       .text  00000000 
f00026d6 l       .text  00000000 
f00026d6 l       .text  00000000 
f00026d8 l       .text  00000000 
f00026d8 l       .text  00000000 
f00026dc l       .text  00000000 
f00026dc l       .text  00000000 
f00026de l       .text  00000000 
f00026de l       .text  00000000 
f00026e2 l       .text  00000000 
f00026e2 l       .text  00000000 
f00026e4 l       .text  00000000 
f00026e4 l       .text  00000000 
f00026e6 l       .text  00000000 
f00026e6 l       .text  00000000 
f00026e8 l       .text  00000000 
f00026e8 l       .text  00000000 
00005765 l       .debug_loc     00000000 
0000578b l       .debug_loc     00000000 
000057b1 l       .debug_loc     00000000 
000057d7 l       .debug_loc     00000000 
000057fd l       .debug_loc     00000000 
0000581c l       .debug_loc     00000000 
0000583b l       .debug_loc     00000000 
00005861 l       .debug_loc     00000000 
0000587c l       .debug_loc     00000000 
000058c5 l       .debug_loc     00000000 
000058eb l       .debug_loc     00000000 
0000590d l       .debug_loc     00000000 
00005928 l       .debug_loc     00000000 
00005943 l       .debug_loc     00000000 
0000595e l       .debug_loc     00000000 
00005979 l       .debug_loc     00000000 
00005994 l       .debug_loc     00000000 
000059af l       .debug_loc     00000000 
000059ff l       .debug_loc     00000000 
00005a1a l       .debug_loc     00000000 
00005a35 l       .debug_loc     00000000 
00005a57 l       .debug_loc     00000000 
00005a72 l       .debug_loc     00000000 
00005a8d l       .debug_loc     00000000 
00005aa8 l       .debug_loc     00000000 
00005ac3 l       .debug_loc     00000000 
00005ade l       .debug_loc     00000000 
00005afd l       .debug_loc     00000000 
00005b1c l       .debug_loc     00000000 
00005b42 l       .debug_loc     00000000 
00005b5d l       .debug_loc     00000000 
00005ba6 l       .debug_loc     00000000 
00005bcc l       .debug_loc     00000000 
00005be7 l       .debug_loc     00000000 
00005c02 l       .debug_loc     00000000 
00005c1d l       .debug_loc     00000000 
00005c38 l       .debug_loc     00000000 
00005c53 l       .debug_loc     00000000 
00005c6e l       .debug_loc     00000000 
00005c89 l       .debug_loc     00000000 
00005ca8 l       .debug_loc     00000000 
00005cc7 l       .debug_loc     00000000 
00005ce2 l       .debug_loc     00000000 
00005d29 l       .debug_loc     00000000 
00005d44 l       .debug_loc     00000000 
00005d5f l       .debug_loc     00000000 
00005d85 l       .debug_loc     00000000 
00005da0 l       .debug_loc     00000000 
00005dbb l       .debug_loc     00000000 
00005dd6 l       .debug_loc     00000000 
00005df1 l       .debug_loc     00000000 
00005e0c l       .debug_loc     00000000 
00005e32 l       .debug_loc     00000000 
00005e4d l       .debug_loc     00000000 
00005e73 l       .debug_loc     00000000 
00005e99 l       .debug_loc     00000000 
00005eb6 l       .debug_loc     00000000 
00005f11 l       .debug_loc     00000000 
00005f2c l       .debug_loc     00000000 
00005f52 l       .debug_loc     00000000 
00005f78 l       .debug_loc     00000000 
00005f93 l       .debug_loc     00000000 
00005fb9 l       .debug_loc     00000000 
00006016 l       .debug_loc     00000000 
00006031 l       .debug_loc     00000000 
0000604c l       .debug_loc     00000000 
000060a9 l       .debug_loc     00000000 
000060c6 l       .debug_loc     00000000 
000060e1 l       .debug_loc     00000000 
00006128 l       .debug_loc     00000000 
00006143 l       .debug_loc     00000000 
0000615e l       .debug_loc     00000000 
00006179 l       .debug_loc     00000000 
00006194 l       .debug_loc     00000000 
000061af l       .debug_loc     00000000 
000061d5 l       .debug_loc     00000000 
000061f0 l       .debug_loc     00000000 
0000620b l       .debug_loc     00000000 
00006226 l       .debug_loc     00000000 
00006241 l       .debug_loc     00000000 
0000626e l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000371e l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000008f8 l       .debug_ranges  00000000 
0000373a l       .debug_str     00000000 
00003744 l       .debug_str     00000000 
0000374e l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
000001d8 l       .debug_str     00000000 
00000205 l       .debug_str     00000000 
000012b8 l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
00003758 l       .debug_str     00000000 
00003859 l       .debug_str     00000000 
00003863 l       .debug_str     00000000 
00002d19 l       .debug_str     00000000 
00003772 l       .debug_str     00000000 
0000377d l       .debug_str     00000000 
000008df l       .debug_str     00000000 
000008dd l       .debug_str     00000000 
00003789 l       .debug_str     00000000 
0000379b l       .debug_str     00000000 
000037ab l       .debug_str     00000000 
00003760 l       .debug_str     00000000 
000037bb l       .debug_str     00000000 
000037c5 l       .debug_str     00000000 
000037cd l       .debug_str     00000000 
00000b61 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000037d1 l       .debug_str     00000000 
00001c22 l       .debug_str     00000000 
00000706 l       .debug_str     00000000 
0000381f l       .debug_str     00000000 
00003824 l       .debug_str     00000000 
00003828 l       .debug_str     00000000 
0000382e l       .debug_str     00000000 
0000379f l       .debug_str     00000000 
000002f7 l       .debug_str     00000000 
000037af l       .debug_str     00000000 
00000888 l       .debug_ranges  00000000 
00002b64 l       .debug_str     00000000 
00000870 l       .debug_ranges  00000000 
00002d92 l       .debug_str     00000000 
00003833 l       .debug_str     00000000 
0000383a l       .debug_str     00000000 
000008a0 l       .debug_ranges  00000000 
000037ed l       .debug_str     00000000 
00003842 l       .debug_str     00000000 
00003846 l       .debug_str     00000000 
0000384a l       .debug_str     00000000 
0000384f l       .debug_str     00000000 
00003854 l       .debug_str     00000000 
0000385e l       .debug_str     00000000 
000037f4 l       .debug_str     00000000 
00001c5f l       .debug_str     00000000 
00002a44 l       .debug_str     00000000 
00003869 l       .debug_str     00000000 
000008b8 l       .debug_ranges  00000000 
0000386e l       .debug_str     00000000 
000037da l       .debug_str     00000000 
00002ea0 l       .debug_str     00000000 
00002a4b l       .debug_str     00000000 
000008d0 l       .debug_ranges  00000000 
000037fc l       .debug_str     00000000 
0000295a l       .debug_str     00000000 
0000380e l       .debug_str     00000000 
00003816 l       .debug_str     00000000 
000009ee l       .debug_str     00000000 
000005bb l       .debug_str     00000000 
000005a4 l       .debug_str     00000000 
00000b48 l       .debug_frame   00000000 
f0002518 l       .text  00000000 
f000257a l       .text  00000000 
f0002628 l       .text  00000000 
f00026e8 l       .text  00000000 
00000000 l    df *ABS*  00000000 tasks.c
f00026e8 l       .text  00000000 
f00026e8 l       .text  00000000 
f00026e8 l       .text  00000000 
f00026ea l       .text  00000000 
f0002700 l       .text  00000000 
f0002702 l       .text  00000000 
f0002704 l       .text  00000000 
f0002706 l       .text  00000000 
f0002708 l       .text  00000000 
f000270a l       .text  00000000 
f000270a l       .text  00000000 
f000270e l       .text  00000000 
f0002712 l       .text  00000000 
f0002712 l       .text  00000000 
f0002714 l       .text  00000000 
f0002718 l       .text  00000000 
f000271a l       .text  00000000 
f000271a l       .text  00000000 
f0002720 l       .text  00000000 
f0002720 l       .text  00000000 
f0002722 l       .text  00000000 
f0002722 l       .text  00000000 
f0002724 l       .text  00000000 
f0002724 l       .text  00000000 
f0002726 l       .text  00000000 
f0002726 l       .text  00000000 
f000272c l       .text  00000000 
f000272e l       .text  00000000 
f000272e l       .text  00000000 
f0002730 l       .text  00000000 
f0002734 l       .text  00000000 
f0002734 l       .text  00000000 
f000273c l       .text  00000000 
f0002744 l       .text  00000000 
f0002748 l       .text  00000000 
f000274c l       .text  00000000 
f000274c l       .text  00000000 
f0002752 l       .text  00000000 
f0002756 l       .text  00000000 
f000275a l       .text  00000000 
f0002760 l       .text  00000000 
f0002760 l       .text  00000000 
f0002762 l       .text  00000000 
f0002764 l       .text  00000000 
f0002764 l       .text  00000000 
f0002766 l       .text  00000000 
f0002766 l       .text  00000000 
f000276a l       .text  00000000 
f0002770 l       .text  00000000 
f0002770 l       .text  00000000 
f0002774 l       .text  00000000 
f0002776 l       .text  00000000 
f0002776 l       .text  00000000 
f000277a l       .text  00000000 
f000277e l       .text  00000000 
f0002782 l       .text  00000000 
f0002782 l       .text  00000000 
f0002786 l       .text  00000000 
f0002788 l       .text  00000000 
f0002788 l       .text  00000000 
f000278e l       .text  00000000 
f0002796 l       .text  00000000 
f000279a l       .text  00000000 
f000279e l       .text  00000000 
f00027a2 l       .text  00000000 
f00027ac l       .text  00000000 
f00027ac l       .text  00000000 
f00027b0 l       .text  00000000 
f00027b4 l       .text  00000000 
f00027b8 l       .text  00000000 
f00027b8 l       .text  00000000 
f00027bc l       .text  00000000 
e0002074 l     O .bss   00000004 xSchedulerRunning
f00027bc l       .text  00000000 
f00027c8 l       .text  00000000 
f00027d0 l       .text  00000000 
f00027d2 l       .text  00000000 
f00027d2 l       .text  00000000 
f00027d6 l       .text  00000000 
f00027dc l       .text  00000000 
f00027e0 l       .text  00000000 
e0002070 l     O .bss   00000004 uxCurrentNumberOfTasks
f00027e0 l       .text  00000000 
f00027ee l       .text  00000000 
e00020bc l     O .bss   00000064 pxReadyTasksLists
f00027f2 l       .text  00000000 
f00027fa l       .text  00000000 
f00027fc l       .text  00000000 
f00027fc l       .text  00000000 
f0002800 l       .text  00000000 
f0002802 l       .text  00000000 
f0002806 l       .text  00000000 
f0002808 l       .text  00000000 
f000280c l       .text  00000000 
f0002810 l       .text  00000000 
f0002816 l       .text  00000000 
f000281a l       .text  00000000 
f000281e l       .text  00000000 
f0002822 l       .text  00000000 
f0002828 l       .text  00000000 
f0002828 l       .text  00000000 
f000282e l       .text  00000000 
f000282e l       .text  00000000 
f0002830 l       .text  00000000 
f0002830 l       .text  00000000 
f0002834 l       .text  00000000 
e000215c l     O .bss   00000014 xDelayedTaskList1
f0002834 l       .text  00000000 
f0002840 l       .text  00000000 
e0002170 l     O .bss   00000014 xDelayedTaskList2
f0002840 l       .text  00000000 
f000284c l       .text  00000000 
e0002148 l     O .bss   00000014 xPendingReadyList
f000284c l       .text  00000000 
f0002856 l       .text  00000000 
e0002120 l     O .bss   00000014 xTasksWaitingTermination
f0002856 l       .text  00000000 
f0002860 l       .text  00000000 
e0002134 l     O .bss   00000014 xSuspendedTaskList
f0002860 l       .text  00000000 
f000286a l       .text  00000000 
e0002078 l     O .bss   00000004 pxDelayedTaskList
f000286a l       .text  00000000 
e000207c l     O .bss   00000004 pxOverflowDelayedTaskList
f0002876 l       .text  00000000 
f0002882 l       .text  00000000 
e0002068 l     O .bss   00000004 uxTaskNumber
f0002882 l       .text  00000000 
f0002890 l       .text  00000000 
e0002064 l     O .bss   00000004 uxTopReadyPriority
f00028aa l       .text  00000000 
f00028aa l       .text  00000000 
f00028b2 l       .text  00000000 
f00028cc l       .text  00000000 
f00028d0 l       .text  00000000 
f00028d0 l       .text  00000000 
f00028d2 l       .text  00000000 
f00028d2 l       .text  00000000 
f00028d6 l       .text  00000000 
f00028d8 l       .text  00000000 
f00028d8 l       .text  00000000 
f00028dc l       .text  00000000 
f00028dc l       .text  00000000 
f00028e4 l       .text  00000000 
f00028f8 l       .text  00000000 
f00028f8 l       .text  00000000 
e000206c l     O .bss   00000004 uxDeletedTasksWaitingCleanUp
e000208c l     O .bss   00000004 xNextTaskUnblockTime
f00028f8 l       .text  00000000 
f00028f8 l       .text  00000000 
f00028f8 l       .text  00000000 
f00028f8 l       .text  00000000 
f0002902 l       .text  00000000 
f0002904 l       .text  00000000 
f000290e l       .text  00000000 
f0002910 l       .text  00000000 
f0002912 l       .text  00000000 
f0002914 l       .text  00000000 
f000291a l       .text  00000000 
f000291c l       .text  00000000 
f000291e l       .text  00000000 
f0002920 l       .text  00000000 
f0002922 l       .text  00000000 
f0002926 l       .text  00000000 
f0002928 l       .text  00000000 
f0002928 l       .text  00000000 
f0002928 l       .text  00000000 
f0002928 l       .text  00000000 
f0002928 l       .text  00000000 
f000292a l       .text  00000000 
f000292a l       .text  00000000 
f000292e l       .text  00000000 
e0002080 l     O .bss   00000004 uxSchedulerSuspended
f0002938 l       .text  00000000 
e0002084 l     O .bss   00000004 xYieldPending
f000293a l       .text  00000000 
f0002948 l       .text  00000000 
f0002954 l       .text  00000000 
f0002964 l       .text  00000000 
f0002968 l       .text  00000000 
f0002974 l       .text  00000000 
f0002974 l       .text  00000000 
f00029e4 l       .text  00000000 
f00029e4 l       .text  00000000 
f00029e6 l       .text  00000000 
f00029e6 l       .text  00000000 
f00029ea l       .text  00000000 
f00029ea l       .text  00000000 
f00029f4 l       .text  00000000 
f00029f8 l       .text  00000000 
f00029fc l       .text  00000000 
f0002a02 l       .text  00000000 
f0002a04 l       .text  00000000 
f0002a06 l       .text  00000000 
f0002a08 l       .text  00000000 
f0002a0c l       .text  00000000 
f0002a0c l       .text  00000000 
f0002a14 l       .text  00000000 
f0002a14 l       .text  00000000 
f0002a14 l       .text  00000000 
f0002a14 l       .text  00000000 
f0002a14 l       .text  00000000 
f0002a16 l       .text  00000000 
f0002a16 l       .text  00000000 
f0002a18 l       .text  00000000 
f0002a7c l     F .text  00000082 prvIdleTask
e0002088 l     O .bss   00000004 xIdleTaskHandle
f0002a3c l       .text  00000000 
f0002a3c l       .text  00000000 
f0002a3e l       .text  00000000 
f0002a3e l       .text  00000000 
f0002a42 l       .text  00000000 
f0002a46 l       .text  00000000 
f0002a46 l       .text  00000000 
f0002a52 l       .text  00000000 
e0002090 l     O .bss   00000004 xTickCount
f0002a5c l       .text  00000000 
f0002a68 l       .text  00000000 
f0002a6c l       .text  00000000 
f0002a6c l       .text  00000000 
f0002a76 l       .text  00000000 
f0002a7c l       .text  00000000 
f0002a7c l       .text  00000000 
f0002a7c l       .text  00000000 
f0002a7c l       .text  00000000 
f0002a7c l       .text  00000000 
f0002a7e l       .text  00000000 
f0002a8c l       .text  00000000 
f0002a8c l       .text  00000000 
f0002ab4 l       .text  00000000 
f0002ab4 l       .text  00000000 
f0002ab6 l       .text  00000000 
f0002ab8 l       .text  00000000 
f0002ab8 l       .text  00000000 
f0002abc l       .text  00000000 
f0002ac0 l       .text  00000000 
f0002ac2 l       .text  00000000 
f0002ac6 l       .text  00000000 
f0002acc l       .text  00000000 
f0002ad0 l       .text  00000000 
f0002ad0 l       .text  00000000 
f0002ad6 l       .text  00000000 
f0002ad6 l       .text  00000000 
f0002ada l       .text  00000000 
f0002adc l       .text  00000000 
f0002adc l       .text  00000000 
f0002ae6 l       .text  00000000 
f0002aec l       .text  00000000 
f0002aee l       .text  00000000 
f0002aee l       .text  00000000 
f0002af0 l       .text  00000000 
f0002af2 l       .text  00000000 
f0002af2 l       .text  00000000 
f0002af6 l       .text  00000000 
f0002af6 l       .text  00000000 
f0002af8 l       .text  00000000 
f0002af8 l       .text  00000000 
f0002afe l       .text  00000000 
f0002afe l       .text  00000000 
f0002afe l       .text  00000000 
f0002afe l       .text  00000000 
f0002afe l       .text  00000000 
f0002afe l       .text  00000000 
f0002b0c l       .text  00000000 
f0002b0c l       .text  00000000 
f0002b0e l       .text  00000000 
f0002b0e l       .text  00000000 
f0002b0e l       .text  00000000 
f0002b0e l       .text  00000000 
f0002b0e l       .text  00000000 
f0002b10 l       .text  00000000 
f0002b10 l       .text  00000000 
f0002b18 l       .text  00000000 
f0002b18 l       .text  00000000 
f0002b18 l       .text  00000000 
f0002b1c l       .text  00000000 
f0002b1c l       .text  00000000 
f0002b26 l       .text  00000000 
f0002b28 l       .text  00000000 
f0002b32 l       .text  00000000 
f0002b38 l       .text  00000000 
f0002b3a l       .text  00000000 
f0002b3a l       .text  00000000 
f0002b48 l       .text  00000000 
f0002b4a l       .text  00000000 
f0002b4c l       .text  00000000 
f0002b56 l       .text  00000000 
f0002b58 l       .text  00000000 
f0002b62 l       .text  00000000 
f0002b6a l       .text  00000000 
f0002b6c l       .text  00000000 
f0002b6c l       .text  00000000 
f0002b6e l       .text  00000000 
f0002b88 l       .text  00000000 
f0002b88 l       .text  00000000 
f0002b8c l       .text  00000000 
f0002b8c l       .text  00000000 
f0002b92 l       .text  00000000 
f0002b98 l       .text  00000000 
f0002b9a l       .text  00000000 
f0002ba2 l       .text  00000000 
f0002ba4 l       .text  00000000 
f0002bae l       .text  00000000 
f0002bae l       .text  00000000 
f0002bae l       .text  00000000 
f0002bae l       .text  00000000 
f0002bb4 l       .text  00000000 
f0002bba l       .text  00000000 
f0002bbc l       .text  00000000 
f0002bc0 l       .text  00000000 
f0002bc4 l       .text  00000000 
f0002bc6 l       .text  00000000 
f0002bcc l       .text  00000000 
f0002bcc l       .text  00000000 
f0002bd0 l       .text  00000000 
f0002bd8 l       .text  00000000 
f0002bd8 l       .text  00000000 
f0002be0 l       .text  00000000 
f0002bf0 l       .text  00000000 
f0002bf4 l       .text  00000000 
f0002bf4 l       .text  00000000 
f0002bf8 l       .text  00000000 
f0002bfa l       .text  00000000 
f0002bfe l       .text  00000000 
f0002c02 l       .text  00000000 
f0002c02 l       .text  00000000 
f0002c04 l       .text  00000000 
f0002c06 l       .text  00000000 
f0002c06 l       .text  00000000 
f0002c12 l       .text  00000000 
f0002c14 l       .text  00000000 
f0002c14 l       .text  00000000 
f0002c1c l       .text  00000000 
f0002c1e l       .text  00000000 
f0002c28 l       .text  00000000 
e0002094 l     O .bss   00000004 xPendedTicks
f0002c28 l       .text  00000000 
f0002c32 l       .text  00000000 
f0002c32 l       .text  00000000 
f0002c34 l       .text  00000000 
f0002c34 l       .text  00000000 
f0002c36 l       .text  00000000 
f0002c36 l       .text  00000000 
f0002c38 l       .text  00000000 
f0002c3a l       .text  00000000 
f0002c3e l       .text  00000000 
f0002c3e l       .text  00000000 
f0002c42 l       .text  00000000 
f0002c46 l       .text  00000000 
f0002c46 l       .text  00000000 
f0002c54 l       .text  00000000 
f0002c54 l       .text  00000000 
f0002c54 l       .text  00000000 
f0002c54 l       .text  00000000 
f0002c54 l       .text  00000000 
f0002c54 l       .text  00000000 
f0002c5e l       .text  00000000 
f0002c60 l       .text  00000000 
f0002c70 l       .text  00000000 
f0002c70 l       .text  00000000 
f0002c7a l       .text  00000000 
f0002c7e l       .text  00000000 
f0002c7e l       .text  00000000 
f0002c82 l       .text  00000000 
f0002c82 l       .text  00000000 
f0002c92 l       .text  00000000 
f0002c96 l       .text  00000000 
f0002c96 l       .text  00000000 
f0002c9a l       .text  00000000 
e0002098 l     O .bss   00000004 xNumOfOverflows
f0002cb8 l       .text  00000000 
f0002cb8 l       .text  00000000 
f0002cbe l       .text  00000000 
f0002cc0 l       .text  00000000 
f0002cc0 l       .text  00000000 
f0002cca l       .text  00000000 
f0002cd0 l       .text  00000000 
f0002cd0 l       .text  00000000 
f0002cd4 l       .text  00000000 
f0002cd8 l       .text  00000000 
f0002cde l       .text  00000000 
f0002ce0 l       .text  00000000 
f0002ce2 l       .text  00000000 
f0002cf4 l       .text  00000000 
f0002cf4 l       .text  00000000 
f0002cfc l       .text  00000000 
f0002cfc l       .text  00000000 
f0002cfe l       .text  00000000 
f0002cfe l       .text  00000000 
f0002d02 l       .text  00000000 
f0002d02 l       .text  00000000 
f0002d08 l       .text  00000000 
f0002d0e l       .text  00000000 
f0002d10 l       .text  00000000 
f0002d10 l       .text  00000000 
f0002d14 l       .text  00000000 
f0002d14 l       .text  00000000 
f0002d18 l       .text  00000000 
f0002d1a l       .text  00000000 
f0002d20 l       .text  00000000 
f0002d20 l       .text  00000000 
f0002d22 l       .text  00000000 
f0002d22 l       .text  00000000 
f0002d24 l       .text  00000000 
f0002d24 l       .text  00000000 
f0002d2e l       .text  00000000 
f0002d30 l       .text  00000000 
f0002d30 l       .text  00000000 
f0002d34 l       .text  00000000 
f0002d34 l       .text  00000000 
f0002d38 l       .text  00000000 
f0002d3a l       .text  00000000 
f0002d44 l       .text  00000000 
f0002d44 l       .text  00000000 
f0002d54 l       .text  00000000 
f0002d54 l       .text  00000000 
f0002d5c l       .text  00000000 
f0002d6c l       .text  00000000 
f0002d70 l       .text  00000000 
f0002d70 l       .text  00000000 
f0002d76 l       .text  00000000 
f0002d78 l       .text  00000000 
f0002d78 l       .text  00000000 
f0002d7e l       .text  00000000 
f0002d7e l       .text  00000000 
f0002d82 l       .text  00000000 
f0002d82 l       .text  00000000 
0000628e l       .debug_loc     00000000 
000062ca l       .debug_loc     00000000 
000062f0 l       .debug_loc     00000000 
0000630b l       .debug_loc     00000000 
00006347 l       .debug_loc     00000000 
0000636d l       .debug_loc     00000000 
00006393 l       .debug_loc     00000000 
000063c4 l       .debug_loc     00000000 
00006421 l       .debug_loc     00000000 
00006447 l       .debug_loc     00000000 
0000646d l       .debug_loc     00000000 
00006493 l       .debug_loc     00000000 
000064b9 l       .debug_loc     00000000 
000064df l       .debug_loc     00000000 
00006505 l       .debug_loc     00000000 
00006520 l       .debug_loc     00000000 
00006548 l       .debug_loc     00000000 
00006584 l       .debug_loc     00000000 
000065b7 l       .debug_loc     00000000 
000065d2 l       .debug_loc     00000000 
000065ed l       .debug_loc     00000000 
00006613 l       .debug_loc     00000000 
0000665a l       .debug_loc     00000000 
000066b7 l       .debug_loc     00000000 
00006709 l       .debug_loc     00000000 
0000672f l       .debug_loc     00000000 
00006755 l       .debug_loc     00000000 
00006786 l       .debug_loc     00000000 
000067a1 l       .debug_loc     00000000 
000067c7 l       .debug_loc     00000000 
000067e2 l       .debug_loc     00000000 
000067fd l       .debug_loc     00000000 
00006818 l       .debug_loc     00000000 
00006840 l       .debug_loc     00000000 
0000685b l       .debug_loc     00000000 
00006876 l       .debug_loc     00000000 
000068a7 l       .debug_loc     00000000 
000068cd l       .debug_loc     00000000 
0000690d l       .debug_loc     00000000 
0000693e l       .debug_loc     00000000 
0000696f l       .debug_loc     00000000 
000069a0 l       .debug_loc     00000000 
000069bb l       .debug_loc     00000000 
000069e1 l       .debug_loc     00000000 
00006a3e l       .debug_loc     00000000 
00006a59 l       .debug_loc     00000000 
00006aab l       .debug_loc     00000000 
00006af2 l       .debug_loc     00000000 
00006b18 l       .debug_loc     00000000 
00006b40 l       .debug_loc     00000000 
00006b66 l       .debug_loc     00000000 
00006b81 l       .debug_loc     00000000 
00006bde l       .debug_loc     00000000 
00006c04 l       .debug_loc     00000000 
00006c61 l       .debug_loc     00000000 
00006c87 l       .debug_loc     00000000 
00006caf l       .debug_loc     00000000 
00006d07 l       .debug_loc     00000000 
00006d69 l       .debug_loc     00000000 
00006d84 l       .debug_loc     00000000 
00006d9f l       .debug_loc     00000000 
00006dba l       .debug_loc     00000000 
00006dd5 l       .debug_loc     00000000 
00006e08 l       .debug_loc     00000000 
00006e54 l       .debug_loc     00000000 
00006e6f l       .debug_loc     00000000 
00006e8a l       .debug_loc     00000000 
00006ea5 l       .debug_loc     00000000 
00006ec0 l       .debug_loc     00000000 
00006ef4 l       .debug_loc     00000000 
00006f30 l       .debug_loc     00000000 
00006f4b l       .debug_loc     00000000 
00006f66 l       .debug_loc     00000000 
00006f81 l       .debug_loc     00000000 
00006f9c l       .debug_loc     00000000 
00006fb7 l       .debug_loc     00000000 
00006fd2 l       .debug_loc     00000000 
00006fed l       .debug_loc     00000000 
00007008 l       .debug_loc     00000000 
00007023 l       .debug_loc     00000000 
0000705f l       .debug_loc     00000000 
00007095 l       .debug_loc     00000000 
000070dc l       .debug_loc     00000000 
000070f7 l       .debug_loc     00000000 
00007155 l       .debug_loc     00000000 
00007170 l       .debug_loc     00000000 
000071a2 l       .debug_loc     00000000 
000071ca l       .debug_loc     00000000 
000071e5 l       .debug_loc     00000000 
0000720b l       .debug_loc     00000000 
00007226 l       .debug_loc     00000000 
00007242 l       .debug_loc     00000000 
0000727e l       .debug_loc     00000000 
000072af l       .debug_loc     00000000 
000072e2 l       .debug_loc     00000000 
000072fd l       .debug_loc     00000000 
00007318 l       .debug_loc     00000000 
00007349 l       .debug_loc     00000000 
0000737a l       .debug_loc     00000000 
000073ab l       .debug_loc     00000000 
000073df l       .debug_loc     00000000 
00007405 l       .debug_loc     00000000 
00007420 l       .debug_loc     00000000 
0000743b l       .debug_loc     00000000 
00007456 l       .debug_loc     00000000 
0000747c l       .debug_loc     00000000 
00007497 l       .debug_loc     00000000 
000074b2 l       .debug_loc     00000000 
000074cd l       .debug_loc     00000000 
000074e8 l       .debug_loc     00000000 
0000750e l       .debug_loc     00000000 
00007529 l       .debug_loc     00000000 
00007544 l       .debug_loc     00000000 
0000756a l       .debug_loc     00000000 
00007585 l       .debug_loc     00000000 
000075a0 l       .debug_loc     00000000 
000075bb l       .debug_loc     00000000 
000075d6 l       .debug_loc     00000000 
00007628 l       .debug_loc     00000000 
0000767a l       .debug_loc     00000000 
000076a0 l       .debug_loc     00000000 
000076bb l       .debug_loc     00000000 
000076e2 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003876 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000009f0 l       .debug_ranges  00000000 
000012f3 l       .debug_str     00000000 
00003980 l       .debug_str     00000000 
00003979 l       .debug_str     00000000 
00000e7e l       .debug_str     00000000 
00003890 l       .debug_str     00000000 
000038a9 l       .debug_str     00000000 
000041ef l       .debug_str     00000000 
00003945 l       .debug_str     00000000 
00003950 l       .debug_str     00000000 
00001199 l       .debug_str     00000000 
00003958 l       .debug_str     00000000 
0000396a l       .debug_str     00000000 
0000389d l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
00003929 l       .debug_str     00000000 
0000393a l       .debug_str     00000000 
000038b8 l       .debug_str     00000000 
000038ce l       .debug_str     00000000 
000038d5 l       .debug_str     00000000 
000038e0 l       .debug_str     00000000 
000038e8 l       .debug_str     00000000 
000038c3 l       .debug_str     00000000 
00003934 l       .debug_str     00000000 
000038f4 l       .debug_str     00000000 
00003904 l       .debug_str     00000000 
0000390c l       .debug_str     00000000 
00000e44 l       .debug_str     00000000 
00003925 l       .debug_str     00000000 
00003915 l       .debug_str     00000000 
000001e1 l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
00000205 l       .debug_str     00000000 
000001d8 l       .debug_str     00000000 
00003986 l       .debug_str     00000000 
00003998 l       .debug_str     00000000 
000039aa l       .debug_str     00000000 
000039b1 l       .debug_str     00000000 
000039c3 l       .debug_str     00000000 
000039dd l       .debug_str     00000000 
000039ef l       .debug_str     00000000 
00003a08 l       .debug_str     00000000 
00003a1b l       .debug_str     00000000 
00003a2d l       .debug_str     00000000 
00003a3f l       .debug_str     00000000 
00003a52 l       .debug_str     00000000 
00003a5f l       .debug_str     00000000 
00003a7c l       .debug_str     00000000 
00003a93 l       .debug_str     00000000 
00000e45 l       .debug_str     00000000 
0000019b l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00003aa5 l       .debug_str     00000000 
00003aba l       .debug_str     00000000 
00003ac8 l       .debug_str     00000000 
0000118c l       .debug_str     00000000 
00003ad8 l       .debug_str     00000000 
00003aed l       .debug_str     00000000 
00003af8 l       .debug_str     00000000 
00003b05 l       .debug_str     00000000 
00003b15 l       .debug_str     00000000 
00003b1e l       .debug_str     00000000 
00003b25 l       .debug_str     00000000 
00003b2e l       .debug_str     00000000 
00003b39 l       .debug_str     00000000 
00003b42 l       .debug_str     00000000 
000008df l       .debug_str     00000000 
00003b4b l       .debug_str     00000000 
00003b60 l       .debug_str     00000000 
00003b6b l       .debug_str     00000000 
00003b72 l       .debug_str     00000000 
00003b7f l       .debug_str     00000000 
00003b8c l       .debug_str     00000000 
00003b9a l       .debug_str     00000000 
00003ba3 l       .debug_str     00000000 
0000345c l       .debug_str     00000000 
00000ecb l       .debug_str     00000000 
00003be6 l       .debug_str     00000000 
00003bd7 l       .debug_str     00000000 
00003bac l       .debug_str     00000000 
00003bba l       .debug_str     00000000 
00003bca l       .debug_str     00000000 
00003bf5 l       .debug_str     00000000 
00003c08 l       .debug_str     00000000 
00003c21 l       .debug_str     00000000 
00000e63 l       .debug_str     00000000 
00003fde l       .debug_str     00000000 
00004160 l       .debug_str     00000000 
00000958 l       .debug_ranges  00000000 
00000978 l       .debug_ranges  00000000 
00003c38 l       .debug_str     00000000 
00003c45 l       .debug_str     00000000 
00003c4f l       .debug_str     00000000 
00003c63 l       .debug_str     00000000 
00003c79 l       .debug_str     00000000 
00003d93 l       .debug_str     00000000 
00003c89 l       .debug_str     00000000 
00003c96 l       .debug_str     00000000 
00003c9c l       .debug_str     00000000 
00000e92 l       .debug_str     00000000 
00003feb l       .debug_str     00000000 
00000990 l       .debug_ranges  00000000 
00003cb8 l       .debug_str     00000000 
00003cc5 l       .debug_str     00000000 
00003da5 l       .debug_str     00000000 
00001186 l       .debug_str     00000000 
00003ff9 l       .debug_str     00000000 
00004005 l       .debug_str     00000000 
00004013 l       .debug_str     00000000 
0000402b l       .debug_str     00000000 
00003dbe l       .debug_str     00000000 
00004033 l       .debug_str     00000000 
00003dd0 l       .debug_str     00000000 
0000403c l       .debug_str     00000000 
00003de9 l       .debug_str     00000000 
00004052 l       .debug_str     00000000 
00004060 l       .debug_str     00000000 
0000406f l       .debug_str     00000000 
00004085 l       .debug_str     00000000 
00003dfa l       .debug_str     00000000 
0000409b l       .debug_str     00000000 
00000e50 l       .debug_str     00000000 
000040aa l       .debug_str     00000000 
000040b8 l       .debug_str     00000000 
00001168 l       .debug_str     00000000 
00003cd4 l       .debug_str     00000000 
00003e07 l       .debug_str     00000000 
000040c4 l       .debug_str     00000000 
00003e13 l       .debug_str     00000000 
000040d2 l       .debug_str     00000000 
00000f36 l       .debug_str     00000000 
00001227 l       .debug_str     00000000 
00003ceb l       .debug_str     00000000 
00003e26 l       .debug_str     00000000 
00003e32 l       .debug_str     00000000 
00003d0b l       .debug_str     00000000 
00003e44 l       .debug_str     00000000 
000040e9 l       .debug_str     00000000 
000040f9 l       .debug_str     00000000 
00004100 l       .debug_str     00000000 
00003e53 l       .debug_str     00000000 
0000410e l       .debug_str     00000000 
0000411e l       .debug_str     00000000 
0000412e l       .debug_str     00000000 
000009a8 l       .debug_ranges  00000000 
000009c0 l       .debug_ranges  00000000 
00003e66 l       .debug_str     00000000 
00004135 l       .debug_str     00000000 
00003e78 l       .debug_str     00000000 
00003e91 l       .debug_str     00000000 
00000e9e l       .debug_str     00000000 
0000413c l       .debug_str     00000000 
00003d1d l       .debug_str     00000000 
00003ea8 l       .debug_str     00000000 
00004149 l       .debug_str     00000000 
00004157 l       .debug_str     00000000 
00003eb7 l       .debug_str     00000000 
0000415f l       .debug_str     00000000 
00004168 l       .debug_str     00000000 
00004173 l       .debug_str     00000000 
0000417e l       .debug_str     00000000 
00004188 l       .debug_str     00000000 
00003ed8 l       .debug_str     00000000 
00004192 l       .debug_str     00000000 
000041a2 l       .debug_str     00000000 
00003eea l       .debug_str     00000000 
00003efa l       .debug_str     00000000 
000041b1 l       .debug_str     00000000 
000041ff l       .debug_str     00000000 
00003d2d l       .debug_str     00000000 
00003f10 l       .debug_str     00000000 
000041bd l       .debug_str     00000000 
000041d3 l       .debug_str     00000000 
00003f2f l       .debug_str     00000000 
00003f4e l       .debug_str     00000000 
000041df l       .debug_str     00000000 
00003f67 l       .debug_str     00000000 
000041ee l       .debug_str     00000000 
000009d8 l       .debug_ranges  00000000 
00003f89 l       .debug_str     00000000 
00003d56 l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
00003d89 l       .debug_str     00000000 
00003d7f l       .debug_str     00000000 
00003d60 l       .debug_str     00000000 
00003d6f l       .debug_str     00000000 
00003f9e l       .debug_str     00000000 
000041fe l       .debug_str     00000000 
0000420c l       .debug_str     00000000 
00003fb3 l       .debug_str     00000000 
00003fc4 l       .debug_str     00000000 
00003db3 l       .debug_str     00000000 
00000ef5 l       .debug_str     00000000 
00000e6f l       .debug_str     00000000 
00000c0c l       .debug_frame   00000000 
f00028f8 l       .text  00000000 
f0002928 l       .text  00000000 
f0002a14 l       .text  00000000 
f0002a7c l       .text  00000000 
f0002afe l       .text  00000000 
f0002b0e l       .text  00000000 
f0002c54 l       .text  00000000 
f0002d82 l       .text  00000000 
00000000 l    df *ABS*  00000000 list.c
f0002d82 l       .text  00000000 
f0002d82 l       .text  00000000 
f0002d82 l       .text  00000000 
f0002d82 l       .text  00000000 
f0002d86 l       .text  00000000 
f0002d8a l       .text  00000000 
f0002d8c l       .text  00000000 
f0002d8e l       .text  00000000 
f0002d90 l       .text  00000000 
f0002d94 l       .text  00000000 
f0002d96 l       .text  00000000 
f0002d96 l       .text  00000000 
f0002d96 l       .text  00000000 
f0002d96 l       .text  00000000 
f0002d96 l       .text  00000000 
f0002d96 l       .text  00000000 
f0002d9a l       .text  00000000 
f0002d9c l       .text  00000000 
f0002d9c l       .text  00000000 
f0002d9c l       .text  00000000 
f0002d9c l       .text  00000000 
f0002d9c l       .text  00000000 
f0002d9c l       .text  00000000 
f0002d9e l       .text  00000000 
f0002da0 l       .text  00000000 
f0002da2 l       .text  00000000 
f0002da2 l       .text  00000000 
f0002da4 l       .text  00000000 
f0002da6 l       .text  00000000 
f0002da8 l       .text  00000000 
f0002daa l       .text  00000000 
f0002dae l       .text  00000000 
f0002db0 l       .text  00000000 
f0002db4 l       .text  00000000 
f0002db6 l       .text  00000000 
f0002dba l       .text  00000000 
f0002dbc l       .text  00000000 
f0002dbe l       .text  00000000 
f0002dbe l       .text  00000000 
000076fd l       .debug_loc     00000000 
00007718 l       .debug_loc     00000000 
00007733 l       .debug_loc     00000000 
0000774e l       .debug_loc     00000000 
00007769 l       .debug_loc     00000000 
0000778f l       .debug_loc     00000000 
000077aa l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004219 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000b18 l       .debug_ranges  00000000 
00003929 l       .debug_str     00000000 
0000393a l       .debug_str     00000000 
000038b8 l       .debug_str     00000000 
000038ce l       .debug_str     00000000 
000038d5 l       .debug_str     00000000 
000038e0 l       .debug_str     00000000 
000038e8 l       .debug_str     00000000 
000038c3 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
00003934 l       .debug_str     00000000 
000038f4 l       .debug_str     00000000 
00003904 l       .debug_str     00000000 
0000390c l       .debug_str     00000000 
00000e44 l       .debug_str     00000000 
00003925 l       .debug_str     00000000 
00003915 l       .debug_str     00000000 
00003c79 l       .debug_str     00000000 
000040f9 l       .debug_str     00000000 
00003c4f l       .debug_str     00000000 
00004232 l       .debug_str     00000000 
00003cc5 l       .debug_str     00000000 
00004239 l       .debug_str     00000000 
00003d2d l       .debug_str     00000000 
00004247 l       .debug_str     00000000 
00004259 l       .debug_str     00000000 
00003cb8 l       .debug_str     00000000 
00004264 l       .debug_str     00000000 
000039aa l       .debug_str     00000000 
00000f4c l       .debug_frame   00000000 
f0002d96 l       .text  00000000 
f0002d9c l       .text  00000000 
f0002dbe l       .text  00000000 
00000000 l    df *ABS*  00000000 heap_1.c
f0002dbe l       .text  00000000 
f0002dbe l       .text  00000000 
f0002dbe l       .text  00000000 
f0002dc0 l       .text  00000000 
f0002dc8 l       .text  00000000 
f0002dca l       .text  00000000 
f0002dca l       .text  00000000 
f0002dce l       .text  00000000 
f0002dd2 l       .text  00000000 
f0002dd6 l       .text  00000000 
f0002dd8 l       .text  00000000 
f0002dda l       .text  00000000 
f0002ddc l       .text  00000000 
f0002dde l       .text  00000000 
e000209c l     O .bss   00000004 pvPortMalloc.pucAlignedHeap
f0002dde l       .text  00000000 
f0002de8 l       .text  00000000 
f0002dea l       .text  00000000 
f0002dea l       .text  00000000 
f0002dee l       .text  00000000 
f0002dee l       .text  00000000 
f0002df8 l       .text  00000000 
f0002dfe l       .text  00000000 
e00020a0 l     O .bss   00000004 xNextFreeByte
f0002e00 l       .text  00000000 
f0002e0c l       .text  00000000 
f0002e10 l       .text  00000000 
f0002e1c l       .text  00000000 
f0002e20 l       .text  00000000 
f0002e20 l       .text  00000000 
f0002e22 l       .text  00000000 
f0002e26 l       .text  00000000 
f0002e26 l       .text  00000000 
f0002e28 l       .text  00000000 
f0002e2c l       .text  00000000 
f0002e2e l       .text  00000000 
f0002e2e l       .text  00000000 
f0002e32 l       .text  00000000 
f0002e32 l       .text  00000000 
f0002e36 l       .text  00000000 
f0002e36 l       .text  00000000 
f0002e38 l       .text  00000000 
f0002e3e l       .text  00000000 
f0002e44 l       .text  00000000 
f0002e44 l       .text  00000000 
f0002e44 l       .text  00000000 
f0002e44 l       .text  00000000 
f0002e44 l       .text  00000000 
f0002e44 l       .text  00000000 
f0002e46 l       .text  00000000 
f0002e46 l       .text  00000000 
000077c5 l       .debug_loc     00000000 
00007801 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004273 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000b48 l       .debug_ranges  00000000 
00003c38 l       .debug_str     00000000 
0000429f l       .debug_str     00000000 
000042e7 l       .debug_str     00000000 
000042f3 l       .debug_str     00000000 
00000205 l       .debug_str     00000000 
000001d8 l       .debug_str     00000000 
000042ae l       .debug_str     00000000 
000008df l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
00003d1d l       .debug_str     00000000 
00003e44 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
0000114b l       .debug_str     00000000 
00003c45 l       .debug_str     00000000 
000042fc l       .debug_str     00000000 
000042bc l       .debug_str     00000000 
000042d2 l       .debug_str     00000000 
00000fb0 l       .debug_frame   00000000 
f0002e44 l       .text  00000000 
f0002e46 l       .text  00000000 
00000000 l    df *ABS*  00000000 test_hooks_default.c
f0002e46 l       .text  00000000 
f0002e46 l       .text  00000000 
f0002e46 l       .text  00000000 
f0002e46 l       .text  00000000 
f0002e4a l       .text  00000000 
f0002e4a l       .text  00000000 
f0002e4a l       .text  00000000 
f0002e4a l       .text  00000000 
f0002e4a l       .text  00000000 
f0002e4a l       .text  00000000 
f0002e4e l       .text  00000000 
f0002e4e l       .text  00000000 
00000000 l       .debug_str     00000000 
000042ff l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000b70 l       .debug_ranges  00000000 
00000fe1 l       .debug_str     00000000 
00000ffc l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
00001010 l       .debug_frame   00000000 
f0002e4a l       .text  00000000 
f0002e4e l       .text  00000000 
00000000 l    df *ABS*  00000000 top_earlgrey.c
00000000 l       .debug_str     00000000 
00002283 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000022ad l       .debug_str     00000000 
00001911 l       .debug_str     00000000 
000018a9 l       .debug_str     00000000 
00001450 l       .debug_str     00000000 
00001472 l       .debug_str     00000000 
00001492 l       .debug_str     00000000 
000014b2 l       .debug_str     00000000 
000014d2 l       .debug_str     00000000 
000014f2 l       .debug_str     00000000 
00001511 l       .debug_str     00000000 
00001535 l       .debug_str     00000000 
00001554 l       .debug_str     00000000 
00001573 l       .debug_str     00000000 
00001592 l       .debug_str     00000000 
000015b4 l       .debug_str     00000000 
000015d6 l       .debug_str     00000000 
000015f8 l       .debug_str     00000000 
0000161f l       .debug_str     00000000 
00001642 l       .debug_str     00000000 
00001665 l       .debug_str     00000000 
00001686 l       .debug_str     00000000 
000016aa l       .debug_str     00000000 
000016d2 l       .debug_str     00000000 
000016f7 l       .debug_str     00000000 
0000171d l       .debug_str     00000000 
00001742 l       .debug_str     00000000 
00001765 l       .debug_str     00000000 
00001789 l       .debug_str     00000000 
000017a8 l       .debug_str     00000000 
000017c7 l       .debug_str     00000000 
000017e6 l       .debug_str     00000000 
00001807 l       .debug_str     00000000 
00001827 l       .debug_str     00000000 
0000184c l       .debug_str     00000000 
0000186b l       .debug_str     00000000 
0000188a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000022d8 l       .debug_str     00000000 
000028d2 l       .debug_str     00000000 
000028b4 l       .debug_str     00000000 
000022fa l       .debug_str     00000000 
0000231b l       .debug_str     00000000 
0000233c l       .debug_str     00000000 
0000235d l       .debug_str     00000000 
0000237e l       .debug_str     00000000 
0000239e l       .debug_str     00000000 
000023c3 l       .debug_str     00000000 
000023e3 l       .debug_str     00000000 
00002403 l       .debug_str     00000000 
00002423 l       .debug_str     00000000 
00002446 l       .debug_str     00000000 
00002469 l       .debug_str     00000000 
0000248c l       .debug_str     00000000 
000024ae l       .debug_str     00000000 
000024d2 l       .debug_str     00000000 
000024f6 l       .debug_str     00000000 
00002518 l       .debug_str     00000000 
0000253d l       .debug_str     00000000 
00002562 l       .debug_str     00000000 
00002587 l       .debug_str     00000000 
000025b0 l       .debug_str     00000000 
000025d6 l       .debug_str     00000000 
000025f8 l       .debug_str     00000000 
0000261d l       .debug_str     00000000 
00002644 l       .debug_str     00000000 
0000266a l       .debug_str     00000000 
00002694 l       .debug_str     00000000 
000026b9 l       .debug_str     00000000 
000026d9 l       .debug_str     00000000 
000026fb l       .debug_str     00000000 
0000271a l       .debug_str     00000000 
0000273a l       .debug_str     00000000 
0000275a l       .debug_str     00000000 
0000277a l       .debug_str     00000000 
0000279c l       .debug_str     00000000 
000027bd l       .debug_str     00000000 
000027e3 l       .debug_str     00000000 
00002803 l       .debug_str     00000000 
00002823 l       .debug_str     00000000 
0000284b l       .debug_str     00000000 
0000286e l       .debug_str     00000000 
00002894 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
00007840 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004335 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000b88 l       .debug_ranges  00000000 
0000435f l       .debug_str     00000000 
0000436b l       .debug_str     00000000 
00000db9 l       .debug_str     00000000 
00000d71 l       .debug_str     00000000 
00000d7e l       .debug_str     00000000 
00000d92 l       .debug_str     00000000 
00000da3 l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
00004379 l       .debug_str     00000000 
000005bb l       .debug_str     00000000 
000005a4 l       .debug_str     00000000 
00004389 l       .debug_str     00000000 
000043a7 l       .debug_str     00000000 
000043be l       .debug_str     00000000 
000043ce l       .debug_str     00000000 
000043de l       .debug_str     00000000 
000043ec l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000043fa l       .debug_str     00000000 
0000440f l       .debug_str     00000000 
00004426 l       .debug_str     00000000 
000012b8 l       .debug_str     00000000 
0000443f l       .debug_str     00000000 
0000445b l       .debug_str     00000000 
000000e3 l       .debug_str     00000000 
0000297c l       .debug_str     00000000 
00000d10 l       .debug_str     00000000 
0000446a l       .debug_str     00000000 
00001044 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 static_critical_boot_measurements.c
00000000 l       .debug_str     00000000 
00001ee9 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001f30 l       .debug_str     00000000 
00001f4a l       .debug_str     00000000 
00001f42 l       .debug_str     00000000 
00001c28 l       .debug_str     00000000 
00001c13 l       .debug_str     00000000 
00000839 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_epmp_state.c
00000000 l       .debug_str     00000000 
00001f5e l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00001f9e l       .debug_str     00000000 
00001fc0 l       .debug_str     00000000 
00001fa9 l       .debug_str     00000000 
00001fb0 l       .debug_str     00000000 
00001fb8 l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
00001fcd l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
0000200b l       .debug_str     00000000 
00002051 l       .debug_str     00000000 
00002018 l       .debug_str     00000000 
0000202c l       .debug_str     00000000 
00002023 l       .debug_str     00000000 
00002038 l       .debug_str     00000000 
00002044 l       .debug_str     00000000 
0000204b l       .debug_str     00000000 
0000019a l       .debug_str     00000000 
000005ae l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
f00019ba g     F .text  0000008a rand_testutils_init
f003b000 g       *ABS*  00000000 _non_volatile_scratch_start
f0039800 g       *ABS*  00000000 _non_volatile_counter_3_end
f0039000 g       *ABS*  00000000 _non_volatile_counter_3_start
f0001818  w    F .text  0000001c ottf_instr_misaligned_fault_handler
f000192c  w    F .text  00000014 ottf_external_nmi_handler
f000110e g     F .text  00000034 dif_aes_reset
e00027c4 g       .data  00000000 __global_pointer$
e0002050 g     O .bss   00000004 ottf_plic
e0000000 g     O .static_critical       00000020 boot_measurements
f0001818  w    F .text  0000001c ottf_instr_access_fault_handler
f0002628 g     F .text  000000c0 memrchr
f00023be g     F .text  00000022 dif_uart_byte_send_polled
f0001818  w    F .text  0000001c ottf_user_ecall_handler
f0002e50 g       .shutdown      00000000 _text_end
f000171e g     F .text  0000001a irq_external_ctrl
f0001760 g     F .text  0000006e ottf_generic_fault_print
d0010000 g       .manifest      00000000 _chip_info_end
e0002060 g     O .bss   00000004 pxCurrentTCB
f0001940  w    F .text  00000032 ottf_internal_isr
f0001a44 g     F .text  0000000e dif_rv_core_ibex_init
f0003c60 g     O .rodata        000002e8 top_earlgrey_plic_interrupt_for_peripheral
f0004278 g     O .rodata        00000008 kClockFreqPeripheralHz
f000199a g     F .text  00000020 dif_rv_plic_irq_complete
f00016f0 g     F .text  0000001c xPortStartScheduler
f0002490 g     F .text  00000088 memcpy
f0001860  w    F .text  000000cc ottf_external_isr
f0001818  w    F .text  0000001c ottf_illegal_instr_fault_handler
f0002e44 g     F .text  00000002 vPortFree
f00012b4 g     F .text  00000036 dif_aes_load_data
f0002e4a  w    F .text  00000004 manufacturer_post_test_hook
00005000 g       *ABS*  00000000 _non_volatile_scratch_size
e0002048 g       .bss   00000000 _bss_start
f0001738 g     F .text  00000016 irq_timer_ctrl
00000400 g       *ABS*  00000000 _manifest_code_start
00000000 g       *ABS*  00000000 __DYNAMIC
f0001b12 g     F .text  00000006 ibex_mepc_read
f003b000 g       *ABS*  00000000 _non_volatile_counter_0_end
f0000400 g       .vectors       00000000 _text_start
f0001818  w    F .text  0000001c ottf_load_store_fault_handler
f0002d96 g     F .text  00000006 vListInitialiseItem
e0002184 g     O .freertos.heap 00008000 ucHeap
00002e50 g       *ABS*  00000000 _manifest_code_end
f0000400 g     F .vectors       00000080 _ottf_interrupt_vector
f0000548 g       .init_array    00000000 _init_array_end
f0001bba g     F .text  00000034 base_log_internal_dv
f0004314 g       *ABS*  00000000 _data_init_end
f0001142 g     F .text  00000138 dif_aes_start
f0002304 g     F .text  000000ba dif_uart_configure
f0001b00 g     F .text  00000006 abort
e0000020 g     O .static_critical       00000054 epmp_state
f0002dbe g     F .text  00000086 pvPortMalloc
f0002d82 g     F .text  00000014 vListInitialise
e0002184 g       .bss   00000000 _bss_end
f0002e46  w    F .text  00000004 manufacturer_pre_test_hook
f000139e g     F .text  00000052 ottf_machine_ecall_handler
f0004290 g       *ABS*  00000000 _data_init_start
f000170c g     F .text  00000012 irq_global_ctrl
f0001680 g     F .text  00000038 vApplicationMallocFailedHook
f0001328 g     F .text  00000076 dif_aes_get_status
f0000480 g     F .crt   00000068 _ottf_start
e0001fc4 g     O .data  00000084 status_codes
00001fc4 g       *ABS*  00000000 _static_critical_size
f000174e g     F .text  00000012 irq_software_ctrl
f000050c g     F .crt   0000003a crt_section_copy
f0004280 g     O .rodata        00000008 kUartBaudrate
f000257a g     F .text  000000ae memchr
f000167e g     F .text  00000002 test_coverage_send_buffer
00000800 g       *ABS*  00000000 _non_volatile_counter_size
00040000 g       *ABS*  00000000 _ottf_size
f0001848  w    F .text  00000014 ottf_timer_isr
f0002afe g     F .text  00000010 vTaskSuspendAll
e0001fc4 g       .data  00000000 _data_start
f003a800 g       *ABS*  00000000 _non_volatile_counter_0_start
f0002d9c g     F .text  00000022 uxListRemove
f0040000 g       .freertos.heap 00000000 _non_volatile_scratch_end
f003a000 g       *ABS*  00000000 _non_volatile_counter_2_end
f000192c  w    F .text  00000014 ottf_load_integrity_error_handler
f0039800 g       *ABS*  00000000 _non_volatile_counter_2_start
f0002928 g     F .text  000000ec vTaskSwitchContext
f000127a g     F .text  0000003a dif_aes_end
f0001818  w    F .text  0000001c ottf_breakpoint_handler
00004000 g       *ABS*  00000000 _stack_size
f0000608 g     F .text  00000050 handler_exception
f0001c94 g     F .text  0000048e base_vfprintf
e0002048 g       .data  00000000 _data_end
f00016b8 g     F .text  00000038 vApplicationStackOverflowHook
f0001bf2 g     F .text  00000016 base_uart_stdout
f0000754 g     F .text  00000052 handler_irq_internal
f0001c7a g     F .text  0000001a base_vprintf
f0001834  w    F .text  00000014 ottf_software_isr
e0000074 g     O .static_critical       00001f50 sec_mmio_ctx
f0002518 g     F .text  00000062 memset
f0001b06 g     F .text  00000006 ibex_mcause_read
f00006ac g     F .text  00000052 handler_irq_timer
e0020000 g       .manifest      00000000 _stack_end
e00020a4 g     O .bss   00000018 rand_testutils_rng_ctx
e0002184 g       .freertos.heap 00000000 _freertos_heap_start
f000185c  w    F .text  00000004 ottf_flow_control_isr
e001c000 g       *ABS*  00000000 _stack_start
f00004e8 g     F .crt   00000024 crt_section_clear
f0002b0e g     F .text  00000146 xTaskResumeAll
f0000658 g     F .text  00000052 handler_irq_software
f0004260 g     O .rodata        00000004 uxTopUsedPriority
f0002a14 g     F .text  00000068 vTaskStartScheduler
f0004270 g     O .rodata        00000008 kClockFreqCpuHz
00010000 g       *ABS*  00000000 _dv_log_offset
f0000548 g     F .text  00000052 xPortStartFirstTask
f00017ce  w    F .text  0000004a ottf_exception_handler
d000ff80 g       *ABS*  00000000 _chip_info_start
f0000810 g     F .text  000008f0 test_main
f0001100 g     F .text  0000000e dif_aes_init
f0002c54 g     F .text  0000012e xTaskIncrementTick
f0004288 g     O .rodata        00000004 kDeviceTestStatusAddress
f0003254 g     O .rodata        00000008 kOttfTestConfig
00000800 g       *ABS*  00000000 _epmp_reset_rx_size
f00023e0 g     F .text  000000b0 udiv64_slow
f0001c48 g     F .text  00000032 base_printf
f0001972 g     F .text  00000028 dif_rv_plic_irq_claim
f000428c g     O .rodata        00000004 kDeviceLogBypassUartAddress
f00026e8 g     F .text  00000210 xTaskCreate
f000426c g     O .rodata        00000004 kDeviceType
f0001b0c g     F .text  00000006 ibex_mtval_read
f003a800 g       *ABS*  00000000 _non_volatile_counter_1_end
00000480 g       *ABS*  00000000 _manifest_entry_point
f00013f0 g     F .text  0000012e _ottf_main
00000080 g       *ABS*  00000000 _chip_info_size
f00028f8 g     F .text  00000030 vTaskExitCritical
f000059c g     F .text  00000024 pxPortInitialiseStack
f0002284 g     F .text  00000072 status_extract
00000100 g       *ABS*  00000000 _non_volatile_counter_flash_words
f00022f6 g     F .text  0000000e dif_uart_init
f003a000 g       *ABS*  00000000 _non_volatile_counter_1_start
f0000000 g       .manifest      00000000 _ottf_start_address
f0000548 g       .init_array    00000000 _init_array_start
f0001a52 g     F .text  000000ae test_status_set
f0001b18 g     F .text  000000a2 base_log_internal_core
f00007a8 g     F .text  00000068 ottf_isr_exit
f00012ea g     F .text  0000003e dif_aes_read_output
f0000700 g     F .text  00000052 handler_irq_external



Disassembly of section .vectors:

f0000400 <_ottf_interrupt_vector>:
_ottf_interrupt_vector():
f0000400:       2080006f                j       f0000608 <handler_exception>
f0000404:       c0001073                unimp
f0000408:       c0001073                unimp
f000040c:       24c0006f                j       f0000658 <handler_irq_software>
f0000410:       c0001073                unimp
f0000414:       c0001073                unimp
f0000418:       c0001073                unimp
f000041c:       2900006f                j       f00006ac <handler_irq_timer>
f0000420:       c0001073                unimp
f0000424:       c0001073                unimp
f0000428:       c0001073                unimp
f000042c:       2d40006f                j       f0000700 <handler_irq_external>
f0000430:       c0001073                unimp
f0000434:       c0001073                unimp
f0000438:       c0001073                unimp
f000043c:       c0001073                unimp
f0000440:       c0001073                unimp
f0000444:       c0001073                unimp
f0000448:       c0001073                unimp
f000044c:       c0001073                unimp
f0000450:       c0001073                unimp
f0000454:       c0001073                unimp
f0000458:       c0001073                unimp
f000045c:       c0001073                unimp
f0000460:       c0001073                unimp
f0000464:       c0001073                unimp
f0000468:       c0001073                unimp
f000046c:       c0001073                unimp
f0000470:       c0001073                unimp
f0000474:       c0001073                unimp
f0000478:       c0001073                unimp
f000047c:       2d80006f                j       f0000754 <handler_irq_internal>

Disassembly of section .crt:

f0000480 <_ottf_start>:
_ottf_start():
f0000480:       f0002197                auipc   gp,0xf0002
f0000484:       34418193                addi    gp,gp,836 # e00027c4 <__global_pointer$>
f0000488:       f0020117                auipc   sp,0xf0020
f000048c:       b6810113                addi    sp,sp,-1176 # e001fff0 <_stack_start+0x3ff0>
f0000490:       00000297                auipc   t0,0x0
f0000494:       f7128293                addi    t0,t0,-143 # f0000401 <_ottf_interrupt_vector+0x1>
f0000498:       30529073                csrw    mtvec,t0
f000049c:       f0002517                auipc   a0,0xf0002
f00004a0:       b2850513                addi    a0,a0,-1240 # e0001fc4 <status_codes>
f00004a4:       88418593                addi    a1,gp,-1916 # e0002048 <uart0>
f00004a8:       00004617                auipc   a2,0x4
f00004ac:       de860613                addi    a2,a2,-536 # f0004290 <_data_init_start>
f00004b0:       28b1                    jal     f000050c <crt_section_copy>
f00004b2:       f0002517                auipc   a0,0xf0002
f00004b6:       b9650513                addi    a0,a0,-1130 # e0002048 <uart0>
f00004ba:       f0002597                auipc   a1,0xf0002
f00004be:       cca58593                addi    a1,a1,-822 # e0002184 <ucHeap>
f00004c2:       201d                    jal     f00004e8 <crt_section_clear>
f00004c4:       00000417                auipc   s0,0x0
f00004c8:       08440413                addi    s0,s0,132 # f0000548 <xPortStartFirstTask>
f00004cc:       00000497                auipc   s1,0x0
f00004d0:       07c48493                addi    s1,s1,124 # f0000548 <xPortStartFirstTask>
f00004d4:       00947863                bgeu    s0,s1,f00004e4 <init_array_loop_end>

f00004d8 <init_array_loop>:
f00004d8:       /-> 00042283            lw      t0,0(s0)
f00004dc:       |   9282                        jalr    t0
f00004de:       |   0411                        addi    s0,s0,4
f00004e0:       \-- fe946ce3            bltu    s0,s1,f00004d8 <init_array_loop>

f00004e4 <init_array_loop_end>:
f00004e4:       70d0006f                j       f00013f0 <_ottf_main>

f00004e8 <crt_section_clear>:
crt_section_clear():
/proc/self/cwd/sw/device/lib/crt/crt.S:41
  .global crt_section_clear
  .type crt_section_clear, @function
crt_section_clear:

  // Check that start is before end.
  bgeu a0, a1, .L_clear_nothing
f00004e8:       /-------- 00b57e63              bgeu    a0,a1,f0000504 <crt_section_clear+0x1c>
/proc/self/cwd/sw/device/lib/crt/crt.S:44

  // Check that start and end are word aligned.
  or   t0, a0, a1
f00004ec:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:45
  andi t0, t0, 0x3
f00004f0:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:46
  bnez t0, .L_clear_error
f00004f4:       |  /----- 00029b63              bnez    t0,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:51

.L_clear_loop:
  // Write zero into section memory word-by-word.
  // TODO: unroll
  sw   zero, 0(a0)
f00004f8:       |  |  /-> 00052023              sw      zero,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:52
  addi a0, a0, 4
f00004fc:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:53
  bltu a0, a1, .L_clear_loop
f00004fe:       |  |  \-- feb56de3              bltu    a0,a1,f00004f8 <crt_section_clear+0x10>
/proc/self/cwd/sw/device/lib/crt/crt.S:54
  ret
f0000502:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:59

.L_clear_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_clear_error
f0000504:       \--+----X 00b51363              bne     a0,a1,f000050a <crt_section_clear+0x22>
/proc/self/cwd/sw/device/lib/crt/crt.S:60
  ret
f0000508:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:63

.L_clear_error:
  unimp
f000050a:          \----> 0000                  unimp

f000050c <crt_section_copy>:
crt_section_copy():
/proc/self/cwd/sw/device/lib/crt/crt.S:95
  .global crt_section_copy
  .type crt_section_copy, @function
crt_section_copy:

  // Check that start is before end.
  bgeu a0, a1, .L_copy_nothing
f000050c:       /-------- 02b57963              bgeu    a0,a1,f000053e <crt_section_copy+0x32>
/proc/self/cwd/sw/device/lib/crt/crt.S:98

  // Check that start, end and src are word aligned.
  or   t0, a0, a1
f0000510:       |         00b562b3              or      t0,a0,a1
/proc/self/cwd/sw/device/lib/crt/crt.S:99
  or   t0, t0, a2
f0000514:       |         00c2e2b3              or      t0,t0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:100
  andi t0, t0, 0x3
f0000518:       |         0032f293              andi    t0,t0,3
/proc/self/cwd/sw/device/lib/crt/crt.S:101
  bnez t0, .L_copy_error
f000051c:       |  /----- 02029463              bnez    t0,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:118
  //        +-------------+
  //        |             |
  //      start          end
  //
  // TODO: disallow all overlap since it indicates API misuse?
  sub  t0, a0, a2           // (start - src) mod 2**32
f0000520:       |  |      40c502b3              sub     t0,a0,a2
/proc/self/cwd/sw/device/lib/crt/crt.S:119
  sub  t1, a1, a0           // end - start
f0000524:       |  |      40a58333              sub     t1,a1,a0
/proc/self/cwd/sw/device/lib/crt/crt.S:120
  bltu t0, t1, .L_copy_error
f0000528:       |  +----- 0062ee63              bltu    t0,t1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:125

.L_copy_loop:
  // Copy data from src into section word-by-word.
  // TODO: unroll
  lw   t0, 0(a2)
f000052c:       |  |  /-> 00062283              lw      t0,0(a2)
/proc/self/cwd/sw/device/lib/crt/crt.S:126
  addi a2, a2, 4
f0000530:       |  |  |   0611                  addi    a2,a2,4
/proc/self/cwd/sw/device/lib/crt/crt.S:127
  sw   t0, 0(a0)
f0000532:       |  |  |   00552023              sw      t0,0(a0)
/proc/self/cwd/sw/device/lib/crt/crt.S:128
  addi a0, a0, 4
f0000536:       |  |  |   0511                  addi    a0,a0,4
/proc/self/cwd/sw/device/lib/crt/crt.S:129
  bltu a0, a1, .L_copy_loop
f0000538:       |  |  \-- feb56ae3              bltu    a0,a1,f000052c <crt_section_copy+0x20>
/proc/self/cwd/sw/device/lib/crt/crt.S:130
  ret
f000053c:       |  |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:135

.L_copy_nothing:
  // If section length is 0 just return. Otherwise end is before start
  // which is invalid so trigger an error.
  bne a0, a1, .L_copy_error
f000053e:       \--+----X 00b51363              bne     a0,a1,f0000544 <crt_section_copy+0x38>
/proc/self/cwd/sw/device/lib/crt/crt.S:136
  ret
f0000542:          |      8082                  ret
/proc/self/cwd/sw/device/lib/crt/crt.S:139

.L_copy_error:
  unimp
f0000544:          \----> 0000                  unimp

Disassembly of section .text:

f0000548 <xPortStartFirstTask>:
xPortStartFirstTask():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:18
  .global xPortStartFirstTask
  .type xPortStartFirstTask, @function
xPortStartFirstTask:
  // Load the stack pointer for the current TCB (just going to clobber sp here
  // since we are setting it here anyway).
  lw  sp, pxCurrentTCB
f0000548:       f0002117                auipc   sp,0xf0002
f000054c:       b1812103                lw      sp,-1256(sp) # e0002060 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:19
  lw  sp, 0(sp)
f0000550:       4102                    lw      sp,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:23

  // NOTE: for starting the FreeRTOS scheduler, the exception return address is
  // used as the function return address. See pxPortInitialiseStack below.
  lw  ra, 0(sp)
f0000552:       4082                    lw      ra,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:26

  // Restore registers initialized on task start.
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000554:       4332                    lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:27
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000556:       43c2                    lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:28
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000558:       4452                    lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:29
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f000055a:       44e2                    lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:30
  lw   a0,  7 * OTTF_WORD_SIZE(sp) // task parameters (pvParameters)
f000055c:       4572                    lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:31
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f000055e:       5582                    lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:32
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000560:       5612                    lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:33
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000562:       56a2                    lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:34
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000564:       5732                    lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:35
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000566:       57c2                    lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:36
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000568:       5852                    lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:37
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f000056a:       58e2                    lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:38
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f000056c:       5972                    lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:39
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f000056e:       4986                    lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:40
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000570:       4a16                    lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:41
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000572:       4aa6                    lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:42
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000574:       4b36                    lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:43
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000576:       4bc6                    lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:44
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000578:       4c56                    lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:45
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f000057a:       4ce6                    lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:46
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f000057c:       4d76                    lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:47
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f000057e:       5d86                    lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:48
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000580:       5e16                    lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:49
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000582:       5ea6                    lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:50
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000584:       5f36                    lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:51
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000586:       5fc6                    lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:55

  // Initialize t0 to the value of MSTATUS with global interrupts enabled, which
  // is required because this returns with ret, not eret.
  lw t0, 29 * OTTF_WORD_SIZE(sp) // Load the MSTATUS state from the stack.
f0000588:       52d6                    lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:56
  ori t0, t0, 1<<3               // Set MIE field.
f000058a:       0082e293                ori     t0,t0,8
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:57
  csrw mstatus, t0               // Ibex interrupts enabled from here!
f000058e:       30029073                csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:60

  // Restore t0 register from the stack (after using it to manipulate MSTATUS).
  lw t0, 2 * OTTF_WORD_SIZE(sp)
f0000592:       42a2                    lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:63

  // Update the stack pointer (shrinking the stack).
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000594:       07810113                addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:65

  ret
f0000598:       8082                    ret
f000059a:       0001                    nop

f000059c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:133
  .balign 4
  .global pxPortInitialiseStack
  .type pxPortInitialiseStack, @function
pxPortInitialiseStack:
  // Setup the MSTATUS register.
  csrr t0, mstatus
f000059c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:137
  // Ensure interrupts are disabled when the stack is restored within an ISR.
  // Required when a task is created after the scheduler has been started,
  // otherwise interrupts would be disabled anyway.
  andi t0, t0, ~0x8
f00005a0:       ff72f293                andi    t0,t0,-9
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:139
  // Generate the value 0x1880, to set the MPIE and MPP bits in MSTATUS.
  li t1, 0x188 << 4
f00005a4:       6309                    lui     t1,0x2
f00005a6:       88030313                addi    t1,t1,-1920 # 1880 <_epmp_reset_rx_size+0x1080>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:140
  or t0, t0, t1
f00005aa:       0062e2b3                or      t0,t0,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:143

  // Setup the stack frame detailed above (a0 holds the task stack pointer).
  addi a0, a0, -OTTF_CONTEXT_SIZE
f00005ae:       f8850513                addi    a0,a0,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:145
  // Push MSTATUS onto the stack.
  sw t0, 29 * OTTF_WORD_SIZE(a0)
f00005b2:       06552a23                sw      t0,116(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:148

  // Push task parameters (pvParameters that is in x12/a2, on the stack.
  sw a2, 7 * OTTF_WORD_SIZE(a0)
f00005b6:       cd50                    sw      a2,28(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:150
  // Push 0 for the portTASK_RETURN_ADDRESS for now.
  sw zero, 1 * OTTF_WORD_SIZE(a0)
f00005b8:       00052223                sw      zero,4(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:155
  // Push the pointer to the task's entry point (pxCode) onto the stack. This
  // will be loaded into either ra (in xPortStartFirstTask) or mepc (in
  // freertosIrqExit), so that when ret/mret is called control flow will be
  // transferred accordingly.
  sw a1, 0(a0)
f00005bc:       c10c                    sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.S:157

  ret
f00005be:       8082                    ret

f00005c0 <compute_mepc_on_synchronous_irq>:
compute_mepc_on_synchronous_irq():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:32
   * below will cause another exception.
   */
  .balign 4
  .type compute_mepc_on_synchronous_irq, @function
compute_mepc_on_synchronous_irq:
  csrr t0, mepc
f00005c0:           341022f3            csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:33
  csrr t1, mcause
f00005c4:           34202373            csrr    t1,mcause
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:34
  li t2, 0x01
f00005c8:           4385                        li      t2,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:35
  bne t1, t2, .L_load_mepc
f00005ca:       /-- 00731363            bne     t1,t2,f00005d0 <compute_mepc_on_synchronous_irq+0x10>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:36
  ret
f00005ce:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:38
.L_load_mepc:
  lh t2, 0(t0)
f00005d0:       \-> 00029383            lh      t2,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:39
  li t1, 0x3
f00005d4:           430d                        li      t1,3
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:40
  and t3, t2, t1
f00005d6:           0063fe33            and     t3,t2,t1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:41
  beq t3, t1, .L_32bit_trap_instr
f00005da:       /-- 006e0463            beq     t3,t1,f00005e2 <compute_mepc_on_synchronous_irq+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:42
  addi t0, t0, OTTF_HALF_WORD_SIZE
f00005de:       |   0289                        addi    t0,t0,2
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:43
  ret
f00005e0:       |   8082                        ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:45
.L_32bit_trap_instr:
  addi t0, t0, OTTF_WORD_SIZE
f00005e2:       \-> 0291                        addi    t0,t0,4
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:46
  ret
f00005e4:           8082                        ret
f00005e6:           0001                        nop

f00005e8 <save_current_sp_to_tcb>:
save_current_sp_to_tcb():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:61
   * exception, if we attempt to perform a store to said address.
   */
  .balign 4
  .type save_current_sp_to_tcb, @function
save_current_sp_to_tcb:
  la t0, kOttfTestConfig
f00005e8:           00003297            auipc   t0,0x3
f00005ec:           c6c28293            addi    t0,t0,-916 # f0003254 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:62
  lb t1, 0(t0)
f00005f0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:63
  beqz t1, .L_skip_sp_save
f00005f4:       /-- 00030863            beqz    t1,f0000604 <save_current_sp_to_tcb+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:64
  lw t2, pxCurrentTCB
f00005f8:       |   f0002397            auipc   t2,0xf0002
f00005fc:       |   a683a383            lw      t2,-1432(t2) # e0002060 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:65
  sw sp, 0(t2)
f0000600:       |   0023a023            sw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:67
.L_skip_sp_save:
  ret
f0000604:       \-> 8082                        ret
f0000606:           0001                        nop

f0000608 <handler_exception>:
handler_exception():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:80
  .balign 4
  .global handler_exception
  .type handler_exception, @function
handler_exception:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000608:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:81
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000060c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:82
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000060e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:83
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000610:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:84
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000612:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:85
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000614:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:86
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000616:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:87
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000618:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:88
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000061a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:89
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000061c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:90
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000061e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:91
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000620:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:92
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000622:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:93
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000624:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:94
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000626:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:95
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000628:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:96
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000062a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:97
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000062c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:98
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000062e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:99
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000630:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:100
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000632:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:101
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000634:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:102
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000636:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:103
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000638:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:104
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000063a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:105
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000063c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:106
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000063e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:107
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000640:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:108
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000642:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:111

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000644:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:112
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000648:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:116

  // Save MEPC to the stack after updating it to the next instruction (since
  // this is a synchronous IRQ).
  jal compute_mepc_on_synchronous_irq
f000064a:       3f9d                    jal     f00005c0 <compute_mepc_on_synchronous_irq>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:117
  sw t0, 0(sp)
f000064c:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:121

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000064e:       3f69                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:124

  // Jump to the exception handler.
  jal ottf_exception_handler
f0000650:       17e010ef                jal     ra,f00017ce <ottf_exception_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:127

  // Return from ISR.
  j ottf_isr_exit
f0000654:       1540006f                j       f00007a8 <ottf_isr_exit>

f0000658 <handler_irq_software>:
handler_irq_software():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:140
  .balign 4
  .global handler_irq_software
  .type handler_irq_software, @function
handler_irq_software:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000658:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:141
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f000065c:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:142
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000065e:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:143
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000660:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:144
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f0000662:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:145
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000664:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:146
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000666:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:147
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000668:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:148
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f000066a:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:149
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f000066c:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:150
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000066e:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:151
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000670:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:152
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f0000672:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:153
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000674:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:154
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000676:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:155
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000678:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:156
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f000067a:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:157
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f000067c:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:158
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000067e:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:159
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000680:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:160
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f0000682:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:161
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000684:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:162
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000686:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:163
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000688:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:164
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f000068a:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:165
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f000068c:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:166
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000068e:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:167
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000690:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:168
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000692:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:171

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000694:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:172
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000698:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:176

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f000069a:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:177
  sw t0, 0(sp)
f000069e:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:181

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006a0:       37a1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:184

  // Jump to the software ISR.
  jal ottf_software_isr
f00006a2:       192010ef                jal     ra,f0001834 <ottf_software_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:187

  // Return from ISR.
  j ottf_isr_exit
f00006a6:       1020006f                j       f00007a8 <ottf_isr_exit>
f00006aa:       0001                    nop

f00006ac <handler_irq_timer>:
handler_irq_timer():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:200
  .balign 4
  .global handler_irq_timer
  .type handler_irq_timer, @function
handler_irq_timer:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f00006ac:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:201
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f00006b0:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:202
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f00006b2:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:203
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f00006b4:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:204
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f00006b6:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:205
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f00006b8:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:206
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f00006ba:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:207
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f00006bc:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:208
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f00006be:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:209
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f00006c0:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:210
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f00006c2:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:211
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f00006c4:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:212
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f00006c6:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:213
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f00006c8:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:214
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f00006ca:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:215
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f00006cc:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:216
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f00006ce:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:217
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f00006d0:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:218
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f00006d2:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:219
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f00006d4:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:220
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f00006d6:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:221
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f00006d8:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:222
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f00006da:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:223
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f00006dc:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:224
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f00006de:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:225
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f00006e0:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:226
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f00006e2:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:227
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f00006e4:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:228
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f00006e6:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:231

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f00006e8:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:232
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f00006ec:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:236

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f00006ee:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:237
  sw t0, 0(sp)
f00006f2:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:241

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f00006f4:       3dd5                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:244

  // Jump to timer ISR.
  jal ottf_timer_isr
f00006f6:       152010ef                jal     ra,f0001848 <ottf_timer_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:247

  // Return from ISR.
  j ottf_isr_exit
f00006fa:       0ae0006f                j       f00007a8 <ottf_isr_exit>
f00006fe:       0001                    nop

f0000700 <handler_irq_external>:
handler_irq_external():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:260
  .balign 4
  .global handler_irq_external
  .type handler_irq_external, @function
handler_irq_external:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000700:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:261
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000704:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:262
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f0000706:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:263
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f0000708:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:264
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000070a:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:265
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f000070c:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:266
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f000070e:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:267
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000710:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:268
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000712:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:269
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000714:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:270
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f0000716:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:271
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f0000718:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:272
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000071a:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:273
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f000071c:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:274
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f000071e:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:275
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000720:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:276
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000722:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:277
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000724:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:278
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f0000726:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:279
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f0000728:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:280
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000072a:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:281
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f000072c:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:282
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f000072e:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:283
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000730:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:284
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000732:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:285
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000734:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:286
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000736:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:287
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000738:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:288
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000073a:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:291

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f000073c:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:292
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000740:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:296

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000742:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:297
  sw t0, 0(sp)
f0000746:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:301

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f0000748:       3545                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:304

  // Jump to external ISR.
  jal ottf_external_isr
f000074a:       116010ef                jal     ra,f0001860 <ottf_external_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:307

  // Return from ISR.
  j ottf_isr_exit
f000074e:       05a0006f                j       f00007a8 <ottf_isr_exit>
f0000752:       0001                    nop

f0000754 <handler_irq_internal>:
handler_irq_internal():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:320
  .balign 4
  .global handler_irq_internal
  .type handler_irq_internal, @function
handler_irq_internal:
  // Save all registers to the stack.
  addi sp, sp, -OTTF_CONTEXT_SIZE
f0000754:       f8810113                addi    sp,sp,-120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:321
  sw   ra,  1 * OTTF_WORD_SIZE(sp)
f0000758:       c206                    sw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:322
  sw   t0,  2 * OTTF_WORD_SIZE(sp)
f000075a:       c416                    sw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:323
  sw   t1,  3 * OTTF_WORD_SIZE(sp)
f000075c:       c61a                    sw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:324
  sw   t2,  4 * OTTF_WORD_SIZE(sp)
f000075e:       c81e                    sw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:325
  sw   s0,  5 * OTTF_WORD_SIZE(sp)
f0000760:       ca22                    sw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:326
  sw   s1,  6 * OTTF_WORD_SIZE(sp)
f0000762:       cc26                    sw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:327
  sw   a0,  7 * OTTF_WORD_SIZE(sp)
f0000764:       ce2a                    sw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:328
  sw   a1,  8 * OTTF_WORD_SIZE(sp)
f0000766:       d02e                    sw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:329
  sw   a2,  9 * OTTF_WORD_SIZE(sp)
f0000768:       d232                    sw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:330
  sw   a3, 10 * OTTF_WORD_SIZE(sp)
f000076a:       d436                    sw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:331
  sw   a4, 11 * OTTF_WORD_SIZE(sp)
f000076c:       d63a                    sw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:332
  sw   a5, 12 * OTTF_WORD_SIZE(sp)
f000076e:       d83e                    sw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:333
  sw   a6, 13 * OTTF_WORD_SIZE(sp)
f0000770:       da42                    sw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:334
  sw   a7, 14 * OTTF_WORD_SIZE(sp)
f0000772:       dc46                    sw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:335
  sw   s2, 15 * OTTF_WORD_SIZE(sp)
f0000774:       de4a                    sw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:336
  sw   s3, 16 * OTTF_WORD_SIZE(sp)
f0000776:       c0ce                    sw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:337
  sw   s4, 17 * OTTF_WORD_SIZE(sp)
f0000778:       c2d2                    sw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:338
  sw   s5, 18 * OTTF_WORD_SIZE(sp)
f000077a:       c4d6                    sw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:339
  sw   s6, 19 * OTTF_WORD_SIZE(sp)
f000077c:       c6da                    sw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:340
  sw   s7, 20 * OTTF_WORD_SIZE(sp)
f000077e:       c8de                    sw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:341
  sw   s8, 21 * OTTF_WORD_SIZE(sp)
f0000780:       cae2                    sw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:342
  sw   s9, 22 * OTTF_WORD_SIZE(sp)
f0000782:       cce6                    sw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:343
  sw  s10, 23 * OTTF_WORD_SIZE(sp)
f0000784:       ceea                    sw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:344
  sw  s11, 24 * OTTF_WORD_SIZE(sp)
f0000786:       d0ee                    sw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:345
  sw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000788:       d2f2                    sw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:346
  sw   t4, 26 * OTTF_WORD_SIZE(sp)
f000078a:       d4f6                    sw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:347
  sw   t5, 27 * OTTF_WORD_SIZE(sp)
f000078c:       d6fa                    sw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:348
  sw   t6, 28 * OTTF_WORD_SIZE(sp)
f000078e:       d8fe                    sw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:351

  // Save MSTATUS for the MPIE bit.
  csrr t0, mstatus
f0000790:       300022f3                csrr    t0,mstatus
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:352
  sw t0, 29 * OTTF_WORD_SIZE(sp)
f0000794:       da96                    sw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:356

  // Save MEPC to the stack.
  // NOTE: this IRQ is asynchronous, therefore, we do not need to modify MEPC.
  csrr t0, mepc
f0000796:       341022f3                csrr    t0,mepc
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:357
  sw t0, 0(sp)
f000079a:       c016                    sw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:361

  // Store stack pointer to current TCB (only if concurrency is enabled, i.e.,
  // the test that triggers this is running as a FreeRTOS task).
  jal save_current_sp_to_tcb
f000079c:       35b1                    jal     f00005e8 <save_current_sp_to_tcb>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:364

  // Jump to the internal ISR.
  jal ottf_internal_isr
f000079e:       1a2010ef                jal     ra,f0001940 <ottf_internal_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:367

  // Return from ISR.
  j ottf_isr_exit
f00007a2:       0060006f                j       f00007a8 <ottf_isr_exit>
f00007a6:       0001                    nop

f00007a8 <ottf_isr_exit>:
ottf_isr_exit():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:384
  // Load the stack pointer for the current task control block (TCB), only if
  // the `enable_concurrency` flag is set in the test configuration struct,
  // meaning a test is run as a FreeRTOS task, where each task maintains its own
  // stack. Otherwise, the test is run on bare-metal, and there is no TCB, and
  // only a single stack/stack pointer.
  la t0, kOttfTestConfig
f00007a8:           00003297            auipc   t0,0x3
f00007ac:           aac28293            addi    t0,t0,-1364 # f0003254 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:385
  lb t1, 0(t0)
f00007b0:           00028303            lb      t1,0(t0)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:386
  beqz t1, .L_skip_sp_restore
f00007b4:       /-- 00030863            beqz    t1,f00007c4 <ottf_isr_exit+0x1c>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:387
  lw  t2, pxCurrentTCB
f00007b8:       |   f0002397            auipc   t2,0xf0002
f00007bc:       |   8a83a383            lw      t2,-1880(t2) # e0002060 <pxCurrentTCB>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:388
  lw  sp, 0(t2)
f00007c0:       |   0003a103            lw      sp,0(t2)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:392
.L_skip_sp_restore:

  // Load the correct MEPC for the next instruction in the current task.
  lw t0, 0(sp)
f00007c4:       \-> 4282                        lw      t0,0(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:393
  csrw mepc, t0
f00007c6:           34129073            csrw    mepc,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:396

  // Load MSTATUS for the MPIE bit.
  lw  t0, 29 * OTTF_WORD_SIZE(sp)
f00007ca:           52d6                        lw      t0,116(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:397
  csrw mstatus, t0
f00007cc:           30029073            csrw    mstatus,t0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:400

  // Restore all registers from the stack.
  lw   ra,  1 * OTTF_WORD_SIZE(sp)
f00007d0:           4092                        lw      ra,4(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:401
  lw   t0,  2 * OTTF_WORD_SIZE(sp)
f00007d2:           42a2                        lw      t0,8(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:402
  lw   t1,  3 * OTTF_WORD_SIZE(sp)
f00007d4:           4332                        lw      t1,12(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:403
  lw   t2,  4 * OTTF_WORD_SIZE(sp)
f00007d6:           43c2                        lw      t2,16(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:404
  lw   s0,  5 * OTTF_WORD_SIZE(sp)
f00007d8:           4452                        lw      s0,20(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:405
  lw   s1,  6 * OTTF_WORD_SIZE(sp)
f00007da:           44e2                        lw      s1,24(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:406
  lw   a0,  7 * OTTF_WORD_SIZE(sp)
f00007dc:           4572                        lw      a0,28(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:407
  lw   a1,  8 * OTTF_WORD_SIZE(sp)
f00007de:           5582                        lw      a1,32(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:408
  lw   a2,  9 * OTTF_WORD_SIZE(sp)
f00007e0:           5612                        lw      a2,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:409
  lw   a3, 10 * OTTF_WORD_SIZE(sp)
f00007e2:           56a2                        lw      a3,40(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:410
  lw   a4, 11 * OTTF_WORD_SIZE(sp)
f00007e4:           5732                        lw      a4,44(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:411
  lw   a5, 12 * OTTF_WORD_SIZE(sp)
f00007e6:           57c2                        lw      a5,48(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:412
  lw   a6, 13 * OTTF_WORD_SIZE(sp)
f00007e8:           5852                        lw      a6,52(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:413
  lw   a7, 14 * OTTF_WORD_SIZE(sp)
f00007ea:           58e2                        lw      a7,56(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:414
  lw   s2, 15 * OTTF_WORD_SIZE(sp)
f00007ec:           5972                        lw      s2,60(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:415
  lw   s3, 16 * OTTF_WORD_SIZE(sp)
f00007ee:           4986                        lw      s3,64(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:416
  lw   s4, 17 * OTTF_WORD_SIZE(sp)
f00007f0:           4a16                        lw      s4,68(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:417
  lw   s5, 18 * OTTF_WORD_SIZE(sp)
f00007f2:           4aa6                        lw      s5,72(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:418
  lw   s6, 19 * OTTF_WORD_SIZE(sp)
f00007f4:           4b36                        lw      s6,76(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:419
  lw   s7, 20 * OTTF_WORD_SIZE(sp)
f00007f6:           4bc6                        lw      s7,80(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:420
  lw   s8, 21 * OTTF_WORD_SIZE(sp)
f00007f8:           4c56                        lw      s8,84(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:421
  lw   s9, 22 * OTTF_WORD_SIZE(sp)
f00007fa:           4ce6                        lw      s9,88(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:422
  lw  s10, 23 * OTTF_WORD_SIZE(sp)
f00007fc:           4d76                        lw      s10,92(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:423
  lw  s11, 24 * OTTF_WORD_SIZE(sp)
f00007fe:           5d86                        lw      s11,96(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:424
  lw   t3, 25 * OTTF_WORD_SIZE(sp)
f0000800:           5e16                        lw      t3,100(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:425
  lw   t4, 26 * OTTF_WORD_SIZE(sp)
f0000802:           5ea6                        lw      t4,104(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:426
  lw   t5, 27 * OTTF_WORD_SIZE(sp)
f0000804:           5f36                        lw      t5,108(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:427
  lw   t6, 28 * OTTF_WORD_SIZE(sp)
f0000806:           5fc6                        lw      t6,112(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:428
  addi sp, sp, OTTF_CONTEXT_SIZE
f0000808:           07810113            addi    sp,sp,120
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.S:432

  // This exits the ISR completely, and does not return control flow to the ISR
  // that called this sub-routine.
  mret
f000080c:           30200073            mret

f0000810 <test_main>:
test_main():
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:29
    0x6a, 0x7a, 0x8a, 0x9a, 0xaa, 0xba, 0xca, 0xda, 0xea, 0xfa,
};

OTTF_DEFINE_TEST_CONFIG();

bool test_main(void) {
f0000810:                          716d                 addi    sp,sp,-272
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:33
  dif_aes_t aes;

  // Initialise AES.
  CHECK_DIF_OK(
f0000812:                          10112623             sw      ra,268(sp)
f0000816:                          10812423             sw      s0,264(sp)
f000081a:                          10912223             sw      s1,260(sp)
f000081e:                          11212023             sw      s2,256(sp)
f0000822:                          dfce                 sw      s3,252(sp)
f0000824:                          ddd2                 sw      s4,248(sp)
f0000826:                          dbd6                 sw      s5,244(sp)
f0000828:                          d9da                 sw      s6,240(sp)
f000082a:                          d7de                 sw      s7,236(sp)
f000082c:                          d5e2                 sw      s8,232(sp)
f000082e:                          d3e6                 sw      s9,228(sp)
f0000830:                          d1ea                 sw      s10,224(sp)
f0000832:                          cfee                 sw      s11,220(sp)
f0000834:                          c1100537             lui     a0,0xc1100
f0000838:                          192c                 addi    a1,sp,184
f000083a:                          0c7000ef             jal     ra,f0001100 <dif_aes_init>
f000083e:                          00004497             auipc   s1,0x4
f0000842:                          a4e48493             addi    s1,s1,-1458 # f000428c <kDeviceLogBypassUartAddress>
f0000846:                /-------- cd15                 beqz    a0,f0000882 <test_main+0x72>
f0000848:                |         842a                 mv      s0,a0
f000084a:                |         4088                 lw      a0,0(s1)
f000084c:                |     /-- c911                 beqz    a0,f0000860 <test_main+0x50>
f000084e:                |     |   1000f517             auipc   a0,0x1000f
f0000852:                |     |   7b250513             addi    a0,a0,1970 # 10000 <_non_volatile_scratch_end+0xffd0000>
f0000856:                |     |   4585                 li      a1,1
f0000858:                |     |   8622                 mv      a2,s0
f000085a:                |     |   360010ef             jal     ra,f0001bba <base_log_internal_dv>
f000085e:                |  /--|-- a829                 j       f0000878 <test_main+0x68>
f0000860:                |  |  \-> 00003597             auipc   a1,0x3
f0000864:                |  |      9fc58593             addi    a1,a1,-1540 # f000325c <kOttfTestConfig+0x8>
f0000868:                |  |      08a8                 addi    a0,sp,88
f000086a:                |  |      4651                 li      a2,20
f000086c:                |  |      425010ef             jal     ra,f0002490 <memcpy>
f0000870:                |  |      08a8                 addi    a0,sp,88
f0000872:                |  |      85a2                 mv      a1,s0
f0000874:                |  |      2a4010ef             jal     ra,f0001b18 <base_log_internal_core>
f0000878:                |  \----> 6531                 lui     a0,0xc
f000087a:                |         aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000087e:                |         1d4010ef             jal     ra,f0001a52 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:35
      dif_aes_init(mmio_region_from_addr(TOP_EARLGREY_AES_BASE_ADDR), &aes));
  CHECK_DIF_OK(dif_aes_reset(&aes));
f0000882:                \-------> 1928                 addi    a0,sp,184
f0000884:                          08b000ef             jal     ra,f000110e <dif_aes_reset>
f0000888:                /-------- cd15                 beqz    a0,f00008c4 <test_main+0xb4>
f000088a:                |         842a                 mv      s0,a0
f000088c:                |         4088                 lw      a0,0(s1)
f000088e:                |     /-- c911                 beqz    a0,f00008a2 <test_main+0x92>
f0000890:                |     |   1000f517             auipc   a0,0x1000f
f0000894:                |     |   78450513             addi    a0,a0,1924 # 10014 <_non_volatile_scratch_end+0xffd0014>
f0000898:                |     |   4585                 li      a1,1
f000089a:                |     |   8622                 mv      a2,s0
f000089c:                |     |   31e010ef             jal     ra,f0001bba <base_log_internal_dv>
f00008a0:                |  /--|-- a829                 j       f00008ba <test_main+0xaa>
f00008a2:                |  |  \-> 00003597             auipc   a1,0x3
f00008a6:                |  |      9ce58593             addi    a1,a1,-1586 # f0003270 <kOttfTestConfig+0x1c>
f00008aa:                |  |      08a8                 addi    a0,sp,88
f00008ac:                |  |      4651                 li      a2,20
f00008ae:                |  |      3e3010ef             jal     ra,f0002490 <memcpy>
f00008b2:                |  |      08a8                 addi    a0,sp,88
f00008b4:                |  |      85a2                 mv      a1,s0
f00008b6:                |  |      262010ef             jal     ra,f0001b18 <base_log_internal_core>
f00008ba:                |  \----> 6531                 lui     a0,0xc
f00008bc:                |         aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00008c0:                |         192010ef             jal     ra,f0001a52 <test_status_set>
f00008c4:                \-------> 4501                 li      a0,0
f00008c6:                          00003597             auipc   a1,0x3
f00008ca:                          9be58593             addi    a1,a1,-1602 # f0003284 <kAesModesKey256>
f00008ce:                          00003617             auipc   a2,0x3
f00008d2:                          9d660613             addi    a2,a2,-1578 # f00032a4 <kKeyShare1>
f00008d6:                          0934                 addi    a3,sp,152
f00008d8:                          02000713             li      a4,32
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:41

  // Mask the key. Note that this should not be done manually. Software is
  // expected to get the key in two shares right from the beginning.
  uint8_t key_share0[sizeof(kAesModesKey256)];
  for (int i = 0; i < sizeof(kAesModesKey256); ++i) {
    key_share0[i] = kAesModesKey256[i] ^ kKeyShare1[i];
f00008dc:                      /-> 00b507b3             add     a5,a0,a1
f00008e0:                      |   00078783             lb      a5,0(a5)
f00008e4:                      |   00c50433             add     s0,a0,a2
f00008e8:                      |   00040403             lb      s0,0(s0)
f00008ec:                      |   8fa1                 xor     a5,a5,s0
f00008ee:                      |   00a68433             add     s0,a3,a0
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:40
  for (int i = 0; i < sizeof(kAesModesKey256); ++i) {
f00008f2:                      |   0505                 addi    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:41
    key_share0[i] = kAesModesKey256[i] ^ kKeyShare1[i];
f00008f4:                      |   00f40023             sb      a5,0(s0)
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:40
  for (int i = 0; i < sizeof(kAesModesKey256); ++i) {
f00008f8:                      \-- fee512e3             bne     a0,a4,f00008dc <test_main+0xcc>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:46
  }

  // "Convert" key share byte arrays to `dif_aes_key_share_t`.
  dif_aes_key_share_t key;
  memcpy(key.share0, key_share0, sizeof(key.share0));
f00008fc:                          08a8                 addi    a0,sp,88
f00008fe:                          092c                 addi    a1,sp,152
f0000900:                          02000613             li      a2,32
f0000904:                          38d010ef             jal     ra,f0002490 <memcpy>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:47
  memcpy(key.share1, kKeyShare1, sizeof(key.share1));
f0000908:                          18a8                 addi    a0,sp,120
f000090a:                          00003597             auipc   a1,0x3
f000090e:                          99a58593             addi    a1,a1,-1638 # f00032a4 <kKeyShare1>
f0000912:                          02000613             li      a2,32
f0000916:                          37b010ef             jal     ra,f0002490 <memcpy>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:50

  // Setup ECB encryption transaction.
  dif_aes_transaction_t transaction = {
f000091a:                          00003597             auipc   a1,0x3
f000091e:                          9aa58593             addi    a1,a1,-1622 # f00032c4 <kKeyShare1+0x20>
f0000922:                          1828                 addi    a0,sp,56
f0000924:                          4671                 li      a2,28
f0000926:                          36b010ef             jal     ra,f0002490 <memcpy>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:60
      .mask_reseeding = kDifAesReseedPerBlock,
      .manual_operation = kDifAesManualOperationAuto,
      .reseed_on_key_change = false,
      .ctrl_aux_lock = false,
  };
  CHECK_DIF_OK(dif_aes_start(&aes, &transaction, &key, NULL));
f000092a:                          1928                 addi    a0,sp,184
f000092c:                          182c                 addi    a1,sp,56
f000092e:                          08b0                 addi    a2,sp,88
f0000930:                          4681                 li      a3,0
f0000932:                          011000ef             jal     ra,f0001142 <dif_aes_start>
f0000936:                          0004a903             lw      s2,0(s1)
f000093a:                /-------- cd15                 beqz    a0,f0000976 <test_main+0x166>
f000093c:                |         842a                 mv      s0,a0
f000093e:                |     /-- 00090b63             beqz    s2,f0000954 <test_main+0x144>
f0000942:                |     |   1000f517             auipc   a0,0x1000f
f0000946:                |     |   6e650513             addi    a0,a0,1766 # 10028 <_non_volatile_scratch_end+0xffd0028>
f000094a:                |     |   4585                 li      a1,1
f000094c:                |     |   8622                 mv      a2,s0
f000094e:                |     |   26c010ef             jal     ra,f0001bba <base_log_internal_dv>
f0000952:                |  /--|-- a829                 j       f000096c <test_main+0x15c>
f0000954:                |  |  \-> 00003597             auipc   a1,0x3
f0000958:                |  |      98c58593             addi    a1,a1,-1652 # f00032e0 <kKeyShare1+0x3c>
f000095c:                |  |      0188                 addi    a0,sp,192
f000095e:                |  |      4651                 li      a2,20
f0000960:                |  |      331010ef             jal     ra,f0002490 <memcpy>
f0000964:                |  |      0188                 addi    a0,sp,192
f0000966:                |  |      85a2                 mv      a1,s0
f0000968:                |  |      1b0010ef             jal     ra,f0001b18 <base_log_internal_core>
f000096c:                |  \----> 6531                 lui     a0,0xc
f000096e:                |         aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000972:                |         0e0010ef             jal     ra,f0001a52 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:64

  // "Convert" plain data byte arrays to `dif_aes_data_t`.
  dif_aes_data_t in_data_plain;
  memcpy(in_data_plain.data, kAesModesPlainText, sizeof(in_data_plain.data));
f0000976:                \-------> 00003597             auipc   a1,0x3
f000097a:                          97e58593             addi    a1,a1,-1666 # f00032f4 <kAesModesPlainText>
f000097e:                          1028                 addi    a0,sp,40
f0000980:                          4641                 li      a2,16
f0000982:                          c62e                 sw      a1,12(sp)
f0000984:                          30d010ef             jal     ra,f0002490 <memcpy>
f0000988:                          00004517             auipc   a0,0x4
f000098c:                          8e850513             addi    a0,a0,-1816 # f0004270 <kClockFreqCpuHz>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
 * @param timeout_usec Timeout in microseconds.
 * @return The initialized timeout value.
 */
inline ibex_timeout_t ibex_timeout_init(uint32_t timeout_usec) {
  return (ibex_timeout_t){
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
f0000990:                          414c                 lw      a1,4(a0)
f0000992:                          4108                 lw      a0,0(a0)
f0000994:                          000f4637             lui     a2,0xf4
f0000998:                          24060a93             addi    s5,a2,576 # f4240 <_ottf_size+0xb4240>
f000099c:                          035585b3             mul     a1,a1,s5
f00009a0:                          03553633             mulhu   a2,a0,s5
f00009a4:                          95b2                 add     a1,a1,a2
f00009a6:                          03550533             mul     a0,a0,s5
f00009aa:                          c82a                 sw      a0,16(sp)
f00009ac:                          ca2e                 sw      a1,20(sp)
f00009ae:                          8656                 mv      a2,s5
f00009b0:                          4681                 li      a3,0
f00009b2:                          4701                 li      a4,0
f00009b4:                          22d010ef             jal     ra,f00023e0 <udiv64_slow>
f00009b8:                          8baa                 mv      s7,a0
f00009ba:                          84ae                 mv      s1,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
f00009bc:                      /-> b8002573             csrr    a0,mcycleh
f00009c0:                      |   b00025f3             csrr    a1,mcycle
f00009c4:                      |   b8002673             csrr    a2,mcycleh
f00009c8:                      \-- fec51ae3             bne     a0,a2,f00009bc <test_main+0x1ac>
f00009cc:                          00193a13             seqz    s4,s2
f00009d0:                          40b00933             neg     s2,a1
f00009d4:                          00b035b3             snez    a1,a1
f00009d8:                          952e                 add     a0,a0,a1
f00009da:                          40a009b3             neg     s3,a0
test_main():
f00009de:                          00003b17             auipc   s6,0x3
f00009e2:                          956b0b13             addi    s6,s6,-1706 # f0003334 <kAesModesPlainText+0x40>
f00009e6:                          6531                 lui     a0,0xc
f00009e8:                          aad50d93             addi    s11,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00009ec:                          1000fc17             auipc   s8,0x1000f
f00009f0:                          650c0c13             addi    s8,s8,1616 # 1003c <_non_volatile_scratch_end+0xffd003c>
f00009f4:                          00003c97             auipc   s9,0x3
f00009f8:                          aacc8c93             addi    s9,s9,-1364 # f00034a0 <kAesModesCipherTextEcb256+0x108>
f00009fc:                          1000fd17             auipc   s10,0x1000f
f0000a00:                          76cd0d13             addi    s10,s10,1900 # 10168 <_non_volatile_scratch_end+0xffd0168>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
 * @param aes An aes DIF handle.
 * @param flag Status flag to query.
 */
inline bool aes_testutils_get_status(dif_aes_t *aes, dif_aes_status_t flag) {
  bool status;
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
f0000a04:             /----------> 1928                 addi    a0,sp,184
f0000a06:             |            4591                 li      a1,4
f0000a08:             |            0830                 addi    a2,sp,24
f0000a0a:             |            11f000ef             jal     ra,f0001328 <dif_aes_get_status>
f0000a0e:             |  /-------- c515                 beqz    a0,f0000a3a <test_main+0x22a>
f0000a10:             |  |         842a                 mv      s0,a0
f0000a12:             |  |     /-- 000a1863             bnez    s4,f0000a22 <test_main+0x212>
f0000a16:             |  |     |   4585                 li      a1,1
f0000a18:             |  |     |   856a                 mv      a0,s10
f0000a1a:             |  |     |   8622                 mv      a2,s0
f0000a1c:             |  |     |   19e010ef             jal     ra,f0001bba <base_log_internal_dv>
f0000a20:             |  |  /--|-- a811                 j       f0000a34 <test_main+0x224>
f0000a22:             |  |  |  \-> 0188                 addi    a0,sp,192
f0000a24:             |  |  |      4651                 li      a2,20
f0000a26:             |  |  |      85e6                 mv      a1,s9
f0000a28:             |  |  |      269010ef             jal     ra,f0002490 <memcpy>
f0000a2c:             |  |  |      0188                 addi    a0,sp,192
f0000a2e:             |  |  |      85a2                 mv      a1,s0
f0000a30:             |  |  |      0e8010ef             jal     ra,f0001b18 <base_log_internal_core>
f0000a34:             |  |  \----> 856e                 mv      a0,s11
f0000a36:             |  |         01c010ef             jal     ra,f0001a52 <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
f0000a3a:             |  \-------> 01814503             lbu     a0,24(sp)
test_main():
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:67

  // Load the plain text to trigger the encryption operation.
  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusInputReady, true, TIMEOUT);
f0000a3e:             |  /-------- ed39                 bnez    a0,f0000a9c <test_main+0x28c>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
f0000a40:             |  |     /-> b80025f3             csrr    a1,mcycleh
f0000a44:             |  |     |   b0002573             csrr    a0,mcycle
f0000a48:             |  |     |   b8002673             csrr    a2,mcycleh
f0000a4c:             |  |     \-- fec59ae3             bne     a1,a2,f0000a40 <test_main+0x230>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000a50:             |  |         954a                 add     a0,a0,s2
f0000a52:             |  |         01253633             sltu    a2,a0,s2
f0000a56:             |  |         964e                 add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
 *
 * @param timeout Holds the counter start value.
 * @return True if the timeout has expired and false otherwise.
 */
inline bool ibex_timeout_check(const ibex_timeout_t *timeout) {
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
f0000a58:             |  |         95b2                 add     a1,a1,a2
f0000a5a:             |  |  /----- 00958563             beq     a1,s1,f0000a64 <test_main+0x254>
test_main():
f0000a5e:             |  |  |      00b4b533             sltu    a0,s1,a1
f0000a62:             |  |  |  /-- a019                 j       f0000a68 <test_main+0x258>
f0000a64:             |  |  \--|-> 00abb533             sltu    a0,s7,a0
f0000a68:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:67
f0000a6c:             +--|-------- fd41                 bnez    a0,f0000a04 <test_main+0x1f4>
f0000a6e:             |  |     /-- 000a1963             bnez    s4,f0000a80 <test_main+0x270>
f0000a72:             |  |     |   4589                 li      a1,2
f0000a74:             |  |     |   8562                 mv      a0,s8
f0000a76:             |  |     |   8656                 mv      a2,s5
f0000a78:             |  |     |   86de                 mv      a3,s7
f0000a7a:             |  |     |   140010ef             jal     ra,f0001bba <base_log_internal_dv>
f0000a7e:             |  |  /--|-- a819                 j       f0000a94 <test_main+0x284>
f0000a80:             |  |  |  \-> 0188                 addi    a0,sp,192
f0000a82:             |  |  |      4651                 li      a2,20
f0000a84:             |  |  |      85da                 mv      a1,s6
f0000a86:             |  |  |      20b010ef             jal     ra,f0002490 <memcpy>
f0000a8a:             |  |  |      0188                 addi    a0,sp,192
f0000a8c:             |  |  |      85d6                 mv      a1,s5
f0000a8e:             |  |  |      865e                 mv      a2,s7
f0000a90:             |  |  |      088010ef             jal     ra,f0001b18 <base_log_internal_core>
f0000a94:             |  |  \----> 856e                 mv      a0,s11
f0000a96:             |  |         7bd000ef             jal     ra,f0001a52 <test_status_set>
f0000a9a:             \--|-------- b7ad                 j       f0000a04 <test_main+0x1f4>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:68
  CHECK_DIF_OK(dif_aes_load_data(&aes, in_data_plain));
f0000a9c:                \-------> 5552                 lw      a0,52(sp)
f0000a9e:                          55c2                 lw      a1,48(sp)
f0000aa0:                          5632                 lw      a2,44(sp)
f0000aa2:                          56a2                 lw      a3,40(sp)
f0000aa4:                          c7aa                 sw      a0,204(sp)
f0000aa6:                          c5ae                 sw      a1,200(sp)
f0000aa8:                          c3b2                 sw      a2,196(sp)
f0000aaa:                          c1b6                 sw      a3,192(sp)
f0000aac:                          1928                 addi    a0,sp,184
f0000aae:                          018c                 addi    a1,sp,192
f0000ab0:                          005000ef             jal     ra,f00012b4 <dif_aes_load_data>
f0000ab4:                /-------- cd15                 beqz    a0,f0000af0 <test_main+0x2e0>
f0000ab6:                |         842a                 mv      s0,a0
f0000ab8:                |     /-- 000a1b63             bnez    s4,f0000ace <test_main+0x2be>
f0000abc:                |     |   1000f517             auipc   a0,0x1000f
f0000ac0:                |     |   59450513             addi    a0,a0,1428 # 10050 <_non_volatile_scratch_end+0xffd0050>
f0000ac4:                |     |   4585                 li      a1,1
f0000ac6:                |     |   8622                 mv      a2,s0
f0000ac8:                |     |   0f2010ef             jal     ra,f0001bba <base_log_internal_dv>
f0000acc:                |  /--|-- a829                 j       f0000ae6 <test_main+0x2d6>
f0000ace:                |  |  \-> 00003597             auipc   a1,0x3
f0000ad2:                |  |      87a58593             addi    a1,a1,-1926 # f0003348 <kAesModesPlainText+0x54>
f0000ad6:                |  |      0188                 addi    a0,sp,192
f0000ad8:                |  |      4651                 li      a2,20
f0000ada:                |  |      1b7010ef             jal     ra,f0002490 <memcpy>
f0000ade:                |  |      0188                 addi    a0,sp,192
f0000ae0:                |  |      85a2                 mv      a1,s0
f0000ae2:                |  |      036010ef             jal     ra,f0001b18 <base_log_internal_core>
f0000ae6:                |  \----> 6531                 lui     a0,0xc
f0000ae8:                |         aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000aec:                |         767000ef             jal     ra,f0001a52 <test_status_set>
f0000af0:                \-------> 000f4537             lui     a0,0xf4
f0000af4:                          24050a93             addi    s5,a0,576 # f4240 <_ottf_size+0xb4240>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
f0000af8:                          4542                 lw      a0,16(sp)
f0000afa:                          45d2                 lw      a1,20(sp)
f0000afc:                          8656                 mv      a2,s5
f0000afe:                          4681                 li      a3,0
f0000b00:                          4701                 li      a4,0
f0000b02:                          0df010ef             jal     ra,f00023e0 <udiv64_slow>
f0000b06:                          8baa                 mv      s7,a0
f0000b08:                          892e                 mv      s2,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
f0000b0a:                      /-> b8002573             csrr    a0,mcycleh
f0000b0e:                      |   b00025f3             csrr    a1,mcycle
f0000b12:                      |   b8002673             csrr    a2,mcycleh
f0000b16:                      \-- fec51ae3             bne     a0,a2,f0000b0a <test_main+0x2fa>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000b1a:                          567d                 li      a2,-1
f0000b1c:                          02c50533             mul     a0,a0,a2
f0000b20:                          40b004b3             neg     s1,a1
f0000b24:                          00b035b3             snez    a1,a1
f0000b28:                          40b509b3             sub     s3,a0,a1
test_main():
f0000b2c:                          00003b17             auipc   s6,0x3
f0000b30:                          830b0b13             addi    s6,s6,-2000 # f000335c <kAesModesPlainText+0x68>
f0000b34:                          6531                 lui     a0,0xc
f0000b36:                          aad50d93             addi    s11,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000b3a:                          1000fc17             auipc   s8,0x1000f
f0000b3e:                          52ac0c13             addi    s8,s8,1322 # 10064 <_non_volatile_scratch_end+0xffd0064>
f0000b42:                          00003c97             auipc   s9,0x3
f0000b46:                          95ec8c93             addi    s9,s9,-1698 # f00034a0 <kAesModesCipherTextEcb256+0x108>
f0000b4a:                          1000fd17             auipc   s10,0x1000f
f0000b4e:                          61ed0d13             addi    s10,s10,1566 # 10168 <_non_volatile_scratch_end+0xffd0168>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
f0000b52:             /----------> 1928                 addi    a0,sp,184
f0000b54:             |            458d                 li      a1,3
f0000b56:             |            0830                 addi    a2,sp,24
f0000b58:             |            7d0000ef             jal     ra,f0001328 <dif_aes_get_status>
f0000b5c:             |  /-------- c515                 beqz    a0,f0000b88 <test_main+0x378>
f0000b5e:             |  |         842a                 mv      s0,a0
f0000b60:             |  |     /-- 000a1863             bnez    s4,f0000b70 <test_main+0x360>
f0000b64:             |  |     |   4585                 li      a1,1
f0000b66:             |  |     |   856a                 mv      a0,s10
f0000b68:             |  |     |   8622                 mv      a2,s0
f0000b6a:             |  |     |   050010ef             jal     ra,f0001bba <base_log_internal_dv>
f0000b6e:             |  |  /--|-- a811                 j       f0000b82 <test_main+0x372>
f0000b70:             |  |  |  \-> 0188                 addi    a0,sp,192
f0000b72:             |  |  |      4651                 li      a2,20
f0000b74:             |  |  |      85e6                 mv      a1,s9
f0000b76:             |  |  |      11b010ef             jal     ra,f0002490 <memcpy>
f0000b7a:             |  |  |      0188                 addi    a0,sp,192
f0000b7c:             |  |  |      85a2                 mv      a1,s0
f0000b7e:             |  |  |      79b000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000b82:             |  |  \----> 856e                 mv      a0,s11
f0000b84:             |  |         6cf000ef             jal     ra,f0001a52 <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
f0000b88:             |  \-------> 01814503             lbu     a0,24(sp)
test_main():
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:73

  // Read out the produced cipher text.
  dif_aes_data_t out_data;

  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusOutputValid, true, TIMEOUT);
f0000b8c:             |  /-------- ed39                 bnez    a0,f0000bea <test_main+0x3da>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
f0000b8e:             |  |     /-> b80025f3             csrr    a1,mcycleh
f0000b92:             |  |     |   b0002573             csrr    a0,mcycle
f0000b96:             |  |     |   b8002673             csrr    a2,mcycleh
f0000b9a:             |  |     \-- fec59ae3             bne     a1,a2,f0000b8e <test_main+0x37e>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000b9e:             |  |         9526                 add     a0,a0,s1
f0000ba0:             |  |         00953633             sltu    a2,a0,s1
f0000ba4:             |  |         964e                 add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
f0000ba6:             |  |         95b2                 add     a1,a1,a2
f0000ba8:             |  |  /----- 01258563             beq     a1,s2,f0000bb2 <test_main+0x3a2>
test_main():
f0000bac:             |  |  |      00b93533             sltu    a0,s2,a1
f0000bb0:             |  |  |  /-- a019                 j       f0000bb6 <test_main+0x3a6>
f0000bb2:             |  |  \--|-> 00abb533             sltu    a0,s7,a0
f0000bb6:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:73
f0000bba:             +--|-------- fd41                 bnez    a0,f0000b52 <test_main+0x342>
f0000bbc:             |  |     /-- 000a1963             bnez    s4,f0000bce <test_main+0x3be>
f0000bc0:             |  |     |   4589                 li      a1,2
f0000bc2:             |  |     |   8562                 mv      a0,s8
f0000bc4:             |  |     |   8656                 mv      a2,s5
f0000bc6:             |  |     |   86de                 mv      a3,s7
f0000bc8:             |  |     |   7f3000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000bcc:             |  |  /--|-- a819                 j       f0000be2 <test_main+0x3d2>
f0000bce:             |  |  |  \-> 0188                 addi    a0,sp,192
f0000bd0:             |  |  |      4651                 li      a2,20
f0000bd2:             |  |  |      85da                 mv      a1,s6
f0000bd4:             |  |  |      0bd010ef             jal     ra,f0002490 <memcpy>
f0000bd8:             |  |  |      0188                 addi    a0,sp,192
f0000bda:             |  |  |      85d6                 mv      a1,s5
f0000bdc:             |  |  |      865e                 mv      a2,s7
f0000bde:             |  |  |      73b000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000be2:             |  |  \----> 856e                 mv      a0,s11
f0000be4:             |  |         66f000ef             jal     ra,f0001a52 <test_status_set>
f0000be8:             \--|-------- b7ad                 j       f0000b52 <test_main+0x342>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:75

  CHECK_DIF_OK(dif_aes_read_output(&aes, &out_data));
f0000bea:                \-------> 1928                 addi    a0,sp,184
f0000bec:                          082c                 addi    a1,sp,24
f0000bee:                          6fc000ef             jal     ra,f00012ea <dif_aes_read_output>
f0000bf2:                /-------- cd15                 beqz    a0,f0000c2e <test_main+0x41e>
f0000bf4:                |         842a                 mv      s0,a0
f0000bf6:                |     /-- 000a1b63             bnez    s4,f0000c0c <test_main+0x3fc>
f0000bfa:                |     |   1000f517             auipc   a0,0x1000f
f0000bfe:                |     |   47e50513             addi    a0,a0,1150 # 10078 <_non_volatile_scratch_end+0xffd0078>
f0000c02:                |     |   4585                 li      a1,1
f0000c04:                |     |   8622                 mv      a2,s0
f0000c06:                |     |   7b5000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000c0a:                |  /--|-- a829                 j       f0000c24 <test_main+0x414>
f0000c0c:                |  |  \-> 00002597             auipc   a1,0x2
f0000c10:                |  |      76458593             addi    a1,a1,1892 # f0003370 <kAesModesPlainText+0x7c>
f0000c14:                |  |      0188                 addi    a0,sp,192
f0000c16:                |  |      4651                 li      a2,20
f0000c18:                |  |      079010ef             jal     ra,f0002490 <memcpy>
f0000c1c:                |  |      0188                 addi    a0,sp,192
f0000c1e:                |  |      85a2                 mv      a1,s0
f0000c20:                |  |      6f9000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000c24:                |  \----> 6531                 lui     a0,0xc
f0000c26:                |         aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000c2a:                |         629000ef             jal     ra,f0001a52 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:78

  // Finish the ECB encryption transaction.
  CHECK_DIF_OK(dif_aes_end(&aes));
f0000c2e:                \-------> 1928                 addi    a0,sp,184
f0000c30:                          64a000ef             jal     ra,f000127a <dif_aes_end>
f0000c34:                /-------- cd15                 beqz    a0,f0000c70 <test_main+0x460>
f0000c36:                |         842a                 mv      s0,a0
f0000c38:                |     /-- 000a1b63             bnez    s4,f0000c4e <test_main+0x43e>
f0000c3c:                |     |   1000f517             auipc   a0,0x1000f
f0000c40:                |     |   45050513             addi    a0,a0,1104 # 1008c <_non_volatile_scratch_end+0xffd008c>
f0000c44:                |     |   4585                 li      a1,1
f0000c46:                |     |   8622                 mv      a2,s0
f0000c48:                |     |   773000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000c4c:                |  /--|-- a829                 j       f0000c66 <test_main+0x456>
f0000c4e:                |  |  \-> 00002597             auipc   a1,0x2
f0000c52:                |  |      73658593             addi    a1,a1,1846 # f0003384 <kAesModesPlainText+0x90>
f0000c56:                |  |      0188                 addi    a0,sp,192
f0000c58:                |  |      4651                 li      a2,20
f0000c5a:                |  |      037010ef             jal     ra,f0002490 <memcpy>
f0000c5e:                |  |      0188                 addi    a0,sp,192
f0000c60:                |  |      85a2                 mv      a1,s0
f0000c62:                |  |      6b7000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000c66:                |  \----> 6531                 lui     a0,0xc
f0000c68:                |         aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000c6c:                |         5e7000ef             jal     ra,f0001a52 <test_status_set>
f0000c70:                \-------> 4501                 li      a0,0
f0000c72:                          4401                 li      s0,0
f0000c74:                          01810913             addi    s2,sp,24
f0000c78:                          00002997             auipc   s3,0x2
f0000c7c:                          72098993             addi    s3,s3,1824 # f0003398 <kAesModesCipherTextEcb256>
f0000c80:                          4d41                 li      s10,16
f0000c82:                          00002a97             auipc   s5,0x2
f0000c86:                          76aa8a93             addi    s5,s5,1898 # f00033ec <kAesModesCipherTextEcb256+0x54>
f0000c8a:                          1000fc17             auipc   s8,0x1000f
f0000c8e:                          42ac0c13             addi    s8,s8,1066 # 100b4 <_non_volatile_scratch_end+0xffd00b4>
f0000c92:                          00002b17             auipc   s6,0x2
f0000c96:                          746b0b13             addi    s6,s6,1862 # f00033d8 <kAesModesCipherTextEcb256+0x40>
f0000c9a:                          1000fb97             auipc   s7,0x1000f
f0000c9e:                          406b8b93             addi    s7,s7,1030 # 100a0 <_non_volatile_scratch_end+0xffd00a0>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:80

  CHECK_ARRAYS_EQ((uint8_t *)out_data.data, kAesModesCipherTextEcb256,
f0000ca2:       /----------------> 008904b3             add     s1,s2,s0
f0000ca6:       |                  0004c583             lbu     a1,0(s1)
f0000caa:       |                  01340633             add     a2,s0,s3
f0000cae:       |                  00064d83             lbu     s11,0(a2)
f0000cb2:       |  /-------------- 05b58c63             beq     a1,s11,f0000d0a <test_main+0x4fa>
f0000cb6:       |  |               8905                 andi    a0,a0,1
f0000cb8:       |  |           /-- c501                 beqz    a0,f0000cc0 <test_main+0x4b0>
f0000cba:       |  |        /--|-- 000a0963             beqz    s4,f0000ccc <test_main+0x4bc>
f0000cbe:       |  |  /-----|--|-- a805                 j       f0000cee <test_main+0x4de>
f0000cc0:       |  |  |  /--|--\-X 000a1f63             bnez    s4,f0000cde <test_main+0x4ce>
f0000cc4:       |  |  |  |  |      855e                 mv      a0,s7
f0000cc6:       |  |  |  |  |      4581                 li      a1,0
f0000cc8:       |  |  |  |  |      6f3000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000ccc:       |  |  |  |  \----> 0004c683             lbu     a3,0(s1)
f0000cd0:       |  |  |  |         458d                 li      a1,3
f0000cd2:       |  |  |  |         8562                 mv      a0,s8
f0000cd4:       |  |  |  |         8622                 mv      a2,s0
f0000cd6:       |  |  |  |         876e                 mv      a4,s11
f0000cd8:       |  |  |  |         6e3000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000cdc:       |  |  |  |     /-- a035                 j       f0000d08 <test_main+0x4f8>
f0000cde:       |  |  |  \-----|-> 0188                 addi    a0,sp,192
f0000ce0:       |  |  |        |   4651                 li      a2,20
f0000ce2:       |  |  |        |   85da                 mv      a1,s6
f0000ce4:       |  |  |        |   7ac010ef             jal     ra,f0002490 <memcpy>
f0000ce8:       |  |  |        |   0188                 addi    a0,sp,192
f0000cea:       |  |  |        |   62f000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000cee:       |  |  \--------|-> 0004cc83             lbu     s9,0(s1)
f0000cf2:       |  |           |   0188                 addi    a0,sp,192
f0000cf4:       |  |           |   4651                 li      a2,20
f0000cf6:       |  |           |   85d6                 mv      a1,s5
f0000cf8:       |  |           |   798010ef             jal     ra,f0002490 <memcpy>
f0000cfc:       |  |           |   0188                 addi    a0,sp,192
f0000cfe:       |  |           |   85a2                 mv      a1,s0
f0000d00:       |  |           |   8666                 mv      a2,s9
f0000d02:       |  |           |   86ee                 mv      a3,s11
f0000d04:       |  |           |   615000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000d08:       |  |           \-> 4505                 li      a0,1
f0000d0a:       |  \-------------> 0405                 addi    s0,s0,1
f0000d0c:       \----------------- f9a41be3             bne     s0,s10,f0000ca2 <test_main+0x492>
f0000d10:                          8905                 andi    a0,a0,1
f0000d12:                      /-- c511                 beqz    a0,f0000d1e <test_main+0x50e>
f0000d14:                      |   6531                 lui     a0,0xc
f0000d16:                      |   aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000d1a:                      |   539000ef             jal     ra,f0001a52 <test_status_set>
f0000d1e:                      \-> 4509                 li      a0,2
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:84
                  sizeof(out_data.data));

  // Setup ECB decryption transaction.
  transaction.operation = kDifAesOperationDecrypt;
f0000d20:                          dc2a                 sw      a0,56(sp)
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:85
  CHECK_DIF_OK(dif_aes_start(&aes, &transaction, &key, NULL));
f0000d22:                          1928                 addi    a0,sp,184
f0000d24:                          182c                 addi    a1,sp,56
f0000d26:                          08b0                 addi    a2,sp,88
f0000d28:                          4681                 li      a3,0
f0000d2a:                          2921                 jal     f0001142 <dif_aes_start>
f0000d2c:                /-------- cd15                 beqz    a0,f0000d68 <test_main+0x558>
f0000d2e:                |         842a                 mv      s0,a0
f0000d30:                |     /-- 000a1b63             bnez    s4,f0000d46 <test_main+0x536>
f0000d34:                |     |   1000f517             auipc   a0,0x1000f
f0000d38:                |     |   39450513             addi    a0,a0,916 # 100c8 <_non_volatile_scratch_end+0xffd00c8>
f0000d3c:                |     |   4585                 li      a1,1
f0000d3e:                |     |   8622                 mv      a2,s0
f0000d40:                |     |   67b000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000d44:                |  /--|-- a829                 j       f0000d5e <test_main+0x54e>
f0000d46:                |  |  \-> 00002597             auipc   a1,0x2
f0000d4a:                |  |      6ba58593             addi    a1,a1,1722 # f0003400 <kAesModesCipherTextEcb256+0x68>
f0000d4e:                |  |      0188                 addi    a0,sp,192
f0000d50:                |  |      4651                 li      a2,20
f0000d52:                |  |      73e010ef             jal     ra,f0002490 <memcpy>
f0000d56:                |  |      0188                 addi    a0,sp,192
f0000d58:                |  |      85a2                 mv      a1,s0
f0000d5a:                |  |      5bf000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000d5e:                |  \----> 6531                 lui     a0,0xc
f0000d60:                |         aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000d64:                |         4ef000ef             jal     ra,f0001a52 <test_status_set>
f0000d68:                \-------> 000f4537             lui     a0,0xf4
f0000d6c:                          24050a93             addi    s5,a0,576 # f4240 <_ottf_size+0xb4240>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
f0000d70:                          4542                 lw      a0,16(sp)
f0000d72:                          45d2                 lw      a1,20(sp)
f0000d74:                          8656                 mv      a2,s5
f0000d76:                          4681                 li      a3,0
f0000d78:                          4701                 li      a4,0
f0000d7a:                          666010ef             jal     ra,f00023e0 <udiv64_slow>
f0000d7e:                          8baa                 mv      s7,a0
f0000d80:                          892e                 mv      s2,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
f0000d82:                      /-> b8002573             csrr    a0,mcycleh
f0000d86:                      |   b00025f3             csrr    a1,mcycle
f0000d8a:                      |   b8002673             csrr    a2,mcycleh
f0000d8e:                      \-- fec51ae3             bne     a0,a2,f0000d82 <test_main+0x572>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000d92:                          567d                 li      a2,-1
f0000d94:                          02c50533             mul     a0,a0,a2
f0000d98:                          40b004b3             neg     s1,a1
f0000d9c:                          00b035b3             snez    a1,a1
f0000da0:                          40b509b3             sub     s3,a0,a1
test_main():
f0000da4:                          00002b17             auipc   s6,0x2
f0000da8:                          670b0b13             addi    s6,s6,1648 # f0003414 <kAesModesCipherTextEcb256+0x7c>
f0000dac:                          6531                 lui     a0,0xc
f0000dae:                          aad50d93             addi    s11,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000db2:                          1000fc17             auipc   s8,0x1000f
f0000db6:                          32ac0c13             addi    s8,s8,810 # 100dc <_non_volatile_scratch_end+0xffd00dc>
f0000dba:                          00002c97             auipc   s9,0x2
f0000dbe:                          6e6c8c93             addi    s9,s9,1766 # f00034a0 <kAesModesCipherTextEcb256+0x108>
f0000dc2:                          1000fd17             auipc   s10,0x1000f
f0000dc6:                          3a6d0d13             addi    s10,s10,934 # 10168 <_non_volatile_scratch_end+0xffd0168>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
f0000dca:             /----------> 1928                 addi    a0,sp,184
f0000dcc:             |            4591                 li      a1,4
f0000dce:             |            0db10613             addi    a2,sp,219
f0000dd2:             |            2b99                 jal     f0001328 <dif_aes_get_status>
f0000dd4:             |  /-------- c515                 beqz    a0,f0000e00 <test_main+0x5f0>
f0000dd6:             |  |         842a                 mv      s0,a0
f0000dd8:             |  |     /-- 000a1863             bnez    s4,f0000de8 <test_main+0x5d8>
f0000ddc:             |  |     |   4585                 li      a1,1
f0000dde:             |  |     |   856a                 mv      a0,s10
f0000de0:             |  |     |   8622                 mv      a2,s0
f0000de2:             |  |     |   5d9000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000de6:             |  |  /--|-- a811                 j       f0000dfa <test_main+0x5ea>
f0000de8:             |  |  |  \-> 0188                 addi    a0,sp,192
f0000dea:             |  |  |      4651                 li      a2,20
f0000dec:             |  |  |      85e6                 mv      a1,s9
f0000dee:             |  |  |      6a2010ef             jal     ra,f0002490 <memcpy>
f0000df2:             |  |  |      0188                 addi    a0,sp,192
f0000df4:             |  |  |      85a2                 mv      a1,s0
f0000df6:             |  |  |      523000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000dfa:             |  |  \----> 856e                 mv      a0,s11
f0000dfc:             |  |         457000ef             jal     ra,f0001a52 <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
f0000e00:             |  \-------> 0db14503             lbu     a0,219(sp)
test_main():
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:88

  // Load the previously produced cipher text to start the decryption operation.
  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusInputReady, true, TIMEOUT);
f0000e04:             |  /-------- ed39                 bnez    a0,f0000e62 <test_main+0x652>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
f0000e06:             |  |     /-> b80025f3             csrr    a1,mcycleh
f0000e0a:             |  |     |   b0002573             csrr    a0,mcycle
f0000e0e:             |  |     |   b8002673             csrr    a2,mcycleh
f0000e12:             |  |     \-- fec59ae3             bne     a1,a2,f0000e06 <test_main+0x5f6>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000e16:             |  |         9526                 add     a0,a0,s1
f0000e18:             |  |         00953633             sltu    a2,a0,s1
f0000e1c:             |  |         964e                 add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
f0000e1e:             |  |         95b2                 add     a1,a1,a2
f0000e20:             |  |  /----- 01258563             beq     a1,s2,f0000e2a <test_main+0x61a>
test_main():
f0000e24:             |  |  |      00b93533             sltu    a0,s2,a1
f0000e28:             |  |  |  /-- a019                 j       f0000e2e <test_main+0x61e>
f0000e2a:             |  |  \--|-> 00abb533             sltu    a0,s7,a0
f0000e2e:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:88
f0000e32:             +--|-------- fd41                 bnez    a0,f0000dca <test_main+0x5ba>
f0000e34:             |  |     /-- 000a1963             bnez    s4,f0000e46 <test_main+0x636>
f0000e38:             |  |     |   4589                 li      a1,2
f0000e3a:             |  |     |   8562                 mv      a0,s8
f0000e3c:             |  |     |   8656                 mv      a2,s5
f0000e3e:             |  |     |   86de                 mv      a3,s7
f0000e40:             |  |     |   57b000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000e44:             |  |  /--|-- a819                 j       f0000e5a <test_main+0x64a>
f0000e46:             |  |  |  \-> 0188                 addi    a0,sp,192
f0000e48:             |  |  |      4651                 li      a2,20
f0000e4a:             |  |  |      85da                 mv      a1,s6
f0000e4c:             |  |  |      644010ef             jal     ra,f0002490 <memcpy>
f0000e50:             |  |  |      0188                 addi    a0,sp,192
f0000e52:             |  |  |      85d6                 mv      a1,s5
f0000e54:             |  |  |      865e                 mv      a2,s7
f0000e56:             |  |  |      4c3000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000e5a:             |  |  \----> 856e                 mv      a0,s11
f0000e5c:             |  |         3f7000ef             jal     ra,f0001a52 <test_status_set>
f0000e60:             \--|-------- b7ad                 j       f0000dca <test_main+0x5ba>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:89
  CHECK_DIF_OK(dif_aes_load_data(&aes, out_data));
f0000e62:                \-------> 5512                 lw      a0,36(sp)
f0000e64:                          5582                 lw      a1,32(sp)
f0000e66:                          4672                 lw      a2,28(sp)
f0000e68:                          46e2                 lw      a3,24(sp)
f0000e6a:                          c7aa                 sw      a0,204(sp)
f0000e6c:                          c5ae                 sw      a1,200(sp)
f0000e6e:                          c3b2                 sw      a2,196(sp)
f0000e70:                          c1b6                 sw      a3,192(sp)
f0000e72:                          1928                 addi    a0,sp,184
f0000e74:                          018c                 addi    a1,sp,192
f0000e76:                          293d                 jal     f00012b4 <dif_aes_load_data>
f0000e78:                /-------- cd15                 beqz    a0,f0000eb4 <test_main+0x6a4>
f0000e7a:                |         842a                 mv      s0,a0
f0000e7c:                |     /-- 000a1b63             bnez    s4,f0000e92 <test_main+0x682>
f0000e80:                |     |   1000f517             auipc   a0,0x1000f
f0000e84:                |     |   27050513             addi    a0,a0,624 # 100f0 <_non_volatile_scratch_end+0xffd00f0>
f0000e88:                |     |   4585                 li      a1,1
f0000e8a:                |     |   8622                 mv      a2,s0
f0000e8c:                |     |   52f000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000e90:                |  /--|-- a829                 j       f0000eaa <test_main+0x69a>
f0000e92:                |  |  \-> 00002597             auipc   a1,0x2
f0000e96:                |  |      59658593             addi    a1,a1,1430 # f0003428 <kAesModesCipherTextEcb256+0x90>
f0000e9a:                |  |      0188                 addi    a0,sp,192
f0000e9c:                |  |      4651                 li      a2,20
f0000e9e:                |  |      5f2010ef             jal     ra,f0002490 <memcpy>
f0000ea2:                |  |      0188                 addi    a0,sp,192
f0000ea4:                |  |      85a2                 mv      a1,s0
f0000ea6:                |  |      473000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000eaa:                |  \----> 6531                 lui     a0,0xc
f0000eac:                |         aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000eb0:                |         3a3000ef             jal     ra,f0001a52 <test_status_set>
f0000eb4:                \-------> 000f4537             lui     a0,0xf4
f0000eb8:                          24050a93             addi    s5,a0,576 # f4240 <_ottf_size+0xb4240>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
f0000ebc:                          4542                 lw      a0,16(sp)
f0000ebe:                          45d2                 lw      a1,20(sp)
f0000ec0:                          8656                 mv      a2,s5
f0000ec2:                          4681                 li      a3,0
f0000ec4:                          4701                 li      a4,0
f0000ec6:                          51a010ef             jal     ra,f00023e0 <udiv64_slow>
f0000eca:                          89aa                 mv      s3,a0
f0000ecc:                          8d2e                 mv      s10,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
f0000ece:                      /-> b8002573             csrr    a0,mcycleh
f0000ed2:                      |   b00025f3             csrr    a1,mcycle
f0000ed6:                      |   b8002673             csrr    a2,mcycleh
f0000eda:                      \-- fec51ae3             bne     a0,a2,f0000ece <test_main+0x6be>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000ede:                          567d                 li      a2,-1
f0000ee0:                          02c50533             mul     a0,a0,a2
f0000ee4:                          40b004b3             neg     s1,a1
f0000ee8:                          00b035b3             snez    a1,a1
f0000eec:                          40b50db3             sub     s11,a0,a1
test_main():
f0000ef0:                          00002917             auipc   s2,0x2
f0000ef4:                          54c90913             addi    s2,s2,1356 # f000343c <kAesModesCipherTextEcb256+0xa4>
f0000ef8:                          6531                 lui     a0,0xc
f0000efa:                          aad50c93             addi    s9,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000efe:                          1000fb17             auipc   s6,0x1000f
f0000f02:                          206b0b13             addi    s6,s6,518 # 10104 <_non_volatile_scratch_end+0xffd0104>
f0000f06:                          00002b97             auipc   s7,0x2
f0000f0a:                          59ab8b93             addi    s7,s7,1434 # f00034a0 <kAesModesCipherTextEcb256+0x108>
f0000f0e:                          1000fc17             auipc   s8,0x1000f
f0000f12:                          25ac0c13             addi    s8,s8,602 # 10168 <_non_volatile_scratch_end+0xffd0168>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
f0000f16:             /----------> 1928                 addi    a0,sp,184
f0000f18:             |            458d                 li      a1,3
f0000f1a:             |            0db10613             addi    a2,sp,219
f0000f1e:             |            2129                 jal     f0001328 <dif_aes_get_status>
f0000f20:             |  /-------- c515                 beqz    a0,f0000f4c <test_main+0x73c>
f0000f22:             |  |         842a                 mv      s0,a0
f0000f24:             |  |     /-- 000a1863             bnez    s4,f0000f34 <test_main+0x724>
f0000f28:             |  |     |   4585                 li      a1,1
f0000f2a:             |  |     |   8562                 mv      a0,s8
f0000f2c:             |  |     |   8622                 mv      a2,s0
f0000f2e:             |  |     |   48d000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000f32:             |  |  /--|-- a811                 j       f0000f46 <test_main+0x736>
f0000f34:             |  |  |  \-> 0188                 addi    a0,sp,192
f0000f36:             |  |  |      4651                 li      a2,20
f0000f38:             |  |  |      85de                 mv      a1,s7
f0000f3a:             |  |  |      556010ef             jal     ra,f0002490 <memcpy>
f0000f3e:             |  |  |      0188                 addi    a0,sp,192
f0000f40:             |  |  |      85a2                 mv      a1,s0
f0000f42:             |  |  |      3d7000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000f46:             |  |  \----> 8566                 mv      a0,s9
f0000f48:             |  |         30b000ef             jal     ra,f0001a52 <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
f0000f4c:             |  \-------> 0db14503             lbu     a0,219(sp)
test_main():
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:92

  // Read out the produced plain text.
  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusOutputValid, true, TIMEOUT);
f0000f50:             |  /-------- ed39                 bnez    a0,f0000fae <test_main+0x79e>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
f0000f52:             |  |     /-> b80025f3             csrr    a1,mcycleh
f0000f56:             |  |     |   b0002573             csrr    a0,mcycle
f0000f5a:             |  |     |   b8002673             csrr    a2,mcycleh
f0000f5e:             |  |     \-- fec59ae3             bne     a1,a2,f0000f52 <test_main+0x742>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
f0000f62:             |  |         9526                 add     a0,a0,s1
f0000f64:             |  |         00953633             sltu    a2,a0,s1
f0000f68:             |  |         966e                 add     a2,a2,s11
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
f0000f6a:             |  |         95b2                 add     a1,a1,a2
f0000f6c:             |  |  /----- 01a58563             beq     a1,s10,f0000f76 <test_main+0x766>
test_main():
f0000f70:             |  |  |      00bd3533             sltu    a0,s10,a1
f0000f74:             |  |  |  /-- a019                 j       f0000f7a <test_main+0x76a>
f0000f76:             |  |  \--|-> 00a9b533             sltu    a0,s3,a0
f0000f7a:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:92
f0000f7e:             +--|-------- fd41                 bnez    a0,f0000f16 <test_main+0x706>
f0000f80:             |  |     /-- 000a1963             bnez    s4,f0000f92 <test_main+0x782>
f0000f84:             |  |     |   4589                 li      a1,2
f0000f86:             |  |     |   855a                 mv      a0,s6
f0000f88:             |  |     |   8656                 mv      a2,s5
f0000f8a:             |  |     |   86ce                 mv      a3,s3
f0000f8c:             |  |     |   42f000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000f90:             |  |  /--|-- a819                 j       f0000fa6 <test_main+0x796>
f0000f92:             |  |  |  \-> 0188                 addi    a0,sp,192
f0000f94:             |  |  |      4651                 li      a2,20
f0000f96:             |  |  |      85ca                 mv      a1,s2
f0000f98:             |  |  |      4f8010ef             jal     ra,f0002490 <memcpy>
f0000f9c:             |  |  |      0188                 addi    a0,sp,192
f0000f9e:             |  |  |      85d6                 mv      a1,s5
f0000fa0:             |  |  |      864e                 mv      a2,s3
f0000fa2:             |  |  |      377000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000fa6:             |  |  \----> 8566                 mv      a0,s9
f0000fa8:             |  |         2ab000ef             jal     ra,f0001a52 <test_status_set>
f0000fac:             \--|-------- b7ad                 j       f0000f16 <test_main+0x706>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:93
  CHECK_DIF_OK(dif_aes_read_output(&aes, &out_data));
f0000fae:                \-------> 1928                 addi    a0,sp,184
f0000fb0:                          082c                 addi    a1,sp,24
f0000fb2:                          2e25                 jal     f00012ea <dif_aes_read_output>
f0000fb4:                          4db2                 lw      s11,12(sp)
f0000fb6:                /-------- cd15                 beqz    a0,f0000ff2 <test_main+0x7e2>
f0000fb8:                |         842a                 mv      s0,a0
f0000fba:                |     /-- 000a1b63             bnez    s4,f0000fd0 <test_main+0x7c0>
f0000fbe:                |     |   1000f517             auipc   a0,0x1000f
f0000fc2:                |     |   15a50513             addi    a0,a0,346 # 10118 <_non_volatile_scratch_end+0xffd0118>
f0000fc6:                |     |   4585                 li      a1,1
f0000fc8:                |     |   8622                 mv      a2,s0
f0000fca:                |     |   3f1000ef             jal     ra,f0001bba <base_log_internal_dv>
f0000fce:                |  /--|-- a829                 j       f0000fe8 <test_main+0x7d8>
f0000fd0:                |  |  \-> 00002597             auipc   a1,0x2
f0000fd4:                |  |      48058593             addi    a1,a1,1152 # f0003450 <kAesModesCipherTextEcb256+0xb8>
f0000fd8:                |  |      0188                 addi    a0,sp,192
f0000fda:                |  |      4651                 li      a2,20
f0000fdc:                |  |      4b4010ef             jal     ra,f0002490 <memcpy>
f0000fe0:                |  |      0188                 addi    a0,sp,192
f0000fe2:                |  |      85a2                 mv      a1,s0
f0000fe4:                |  |      335000ef             jal     ra,f0001b18 <base_log_internal_core>
f0000fe8:                |  \----> 6531                 lui     a0,0xc
f0000fea:                |         aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0000fee:                |         265000ef             jal     ra,f0001a52 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:96

  // Finish the ECB encryption transaction.
  CHECK_DIF_OK(dif_aes_end(&aes));
f0000ff2:                \-------> 1928                 addi    a0,sp,184
f0000ff4:                          2459                 jal     f000127a <dif_aes_end>
f0000ff6:                /-------- cd15                 beqz    a0,f0001032 <test_main+0x822>
f0000ff8:                |         842a                 mv      s0,a0
f0000ffa:                |     /-- 000a1b63             bnez    s4,f0001010 <test_main+0x800>
f0000ffe:                |     |   1000f517             auipc   a0,0x1000f
f0001002:                |     |   12e50513             addi    a0,a0,302 # 1012c <_non_volatile_scratch_end+0xffd012c>
f0001006:                |     |   4585                 li      a1,1
f0001008:                |     |   8622                 mv      a2,s0
f000100a:                |     |   3b1000ef             jal     ra,f0001bba <base_log_internal_dv>
f000100e:                |  /--|-- a829                 j       f0001028 <test_main+0x818>
f0001010:                |  |  \-> 00002597             auipc   a1,0x2
f0001014:                |  |      45458593             addi    a1,a1,1108 # f0003464 <kAesModesCipherTextEcb256+0xcc>
f0001018:                |  |      0188                 addi    a0,sp,192
f000101a:                |  |      4651                 li      a2,20
f000101c:                |  |      474010ef             jal     ra,f0002490 <memcpy>
f0001020:                |  |      0188                 addi    a0,sp,192
f0001022:                |  |      85a2                 mv      a1,s0
f0001024:                |  |      2f5000ef             jal     ra,f0001b18 <base_log_internal_core>
f0001028:                |  \----> 6531                 lui     a0,0xc
f000102a:                |         aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f000102e:                |         225000ef             jal     ra,f0001a52 <test_status_set>
f0001032:                \-------> 4401                 li      s0,0
f0001034:                          4501                 li      a0,0
f0001036:                          01810c13             addi    s8,sp,24
f000103a:                          4cc1                 li      s9,16
f000103c:                          00002917             auipc   s2,0x2
f0001040:                          45090913             addi    s2,s2,1104 # f000348c <kAesModesCipherTextEcb256+0xf4>
f0001044:                          1000fb17             auipc   s6,0x1000f
f0001048:                          110b0b13             addi    s6,s6,272 # 10154 <_non_volatile_scratch_end+0xffd0154>
f000104c:                          00002997             auipc   s3,0x2
f0001050:                          42c98993             addi    s3,s3,1068 # f0003478 <kAesModesCipherTextEcb256+0xe0>
f0001054:                          1000fa97             auipc   s5,0x1000f
f0001058:                          0eca8a93             addi    s5,s5,236 # 10140 <_non_volatile_scratch_end+0xffd0140>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:98

  CHECK_ARRAYS_EQ((uint8_t *)out_data.data, kAesModesPlainText,
f000105c:       /----------------> 008c04b3             add     s1,s8,s0
f0001060:       |                  0004c583             lbu     a1,0(s1)
f0001064:       |                  01b40633             add     a2,s0,s11
f0001068:       |                  00064d03             lbu     s10,0(a2)
f000106c:       |  /-------------- 05a58c63             beq     a1,s10,f00010c4 <test_main+0x8b4>
f0001070:       |  |               8905                 andi    a0,a0,1
f0001072:       |  |           /-- c501                 beqz    a0,f000107a <test_main+0x86a>
f0001074:       |  |        /--|-- 000a0963             beqz    s4,f0001086 <test_main+0x876>
f0001078:       |  |  /-----|--|-- a805                 j       f00010a8 <test_main+0x898>
f000107a:       |  |  |  /--|--\-X 000a1f63             bnez    s4,f0001098 <test_main+0x888>
f000107e:       |  |  |  |  |      8556                 mv      a0,s5
f0001080:       |  |  |  |  |      4581                 li      a1,0
f0001082:       |  |  |  |  |      339000ef             jal     ra,f0001bba <base_log_internal_dv>
f0001086:       |  |  |  |  \----> 0004c683             lbu     a3,0(s1)
f000108a:       |  |  |  |         458d                 li      a1,3
f000108c:       |  |  |  |         855a                 mv      a0,s6
f000108e:       |  |  |  |         8622                 mv      a2,s0
f0001090:       |  |  |  |         876a                 mv      a4,s10
f0001092:       |  |  |  |         329000ef             jal     ra,f0001bba <base_log_internal_dv>
f0001096:       |  |  |  |     /-- a035                 j       f00010c2 <test_main+0x8b2>
f0001098:       |  |  |  \-----|-> 0188                 addi    a0,sp,192
f000109a:       |  |  |        |   4651                 li      a2,20
f000109c:       |  |  |        |   85ce                 mv      a1,s3
f000109e:       |  |  |        |   3f2010ef             jal     ra,f0002490 <memcpy>
f00010a2:       |  |  |        |   0188                 addi    a0,sp,192
f00010a4:       |  |  |        |   275000ef             jal     ra,f0001b18 <base_log_internal_core>
f00010a8:       |  |  \--------|-> 0004cb83             lbu     s7,0(s1)
f00010ac:       |  |           |   0188                 addi    a0,sp,192
f00010ae:       |  |           |   4651                 li      a2,20
f00010b0:       |  |           |   85ca                 mv      a1,s2
f00010b2:       |  |           |   3de010ef             jal     ra,f0002490 <memcpy>
f00010b6:       |  |           |   0188                 addi    a0,sp,192
f00010b8:       |  |           |   85a2                 mv      a1,s0
f00010ba:       |  |           |   865e                 mv      a2,s7
f00010bc:       |  |           |   86ea                 mv      a3,s10
f00010be:       |  |           |   25b000ef             jal     ra,f0001b18 <base_log_internal_core>
f00010c2:       |  |           \-> 4505                 li      a0,1
f00010c4:       |  \-------------> 0405                 addi    s0,s0,1
f00010c6:       \----------------- f9941be3             bne     s0,s9,f000105c <test_main+0x84c>
f00010ca:                          8905                 andi    a0,a0,1
f00010cc:                      /-- c511                 beqz    a0,f00010d8 <test_main+0x8c8>
f00010ce:                      |   6531                 lui     a0,0xc
f00010d0:                      |   aad50513             addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00010d4:                      |   17f000ef             jal     ra,f0001a52 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/flash_aes_smoketest/flash_aes_smoketest.c:101
                  sizeof(out_data.data));

  return true;
f00010d8:                      \-> 4505                 li      a0,1
f00010da:                          4dfe                 lw      s11,220(sp)
f00010dc:                          5d0e                 lw      s10,224(sp)
f00010de:                          5c9e                 lw      s9,228(sp)
f00010e0:                          5c2e                 lw      s8,232(sp)
f00010e2:                          5bbe                 lw      s7,236(sp)
f00010e4:                          5b4e                 lw      s6,240(sp)
f00010e6:                          5ade                 lw      s5,244(sp)
f00010e8:                          5a6e                 lw      s4,248(sp)
f00010ea:                          59fe                 lw      s3,252(sp)
f00010ec:                          10012903             lw      s2,256(sp)
f00010f0:                          10412483             lw      s1,260(sp)
f00010f4:                          10812403             lw      s0,264(sp)
f00010f8:                          10c12083             lw      ra,268(sp)
f00010fc:                          6151                 addi    sp,sp,272
f00010fe:                          8082                 ret

f0001100 <dif_aes_init>:
dif_aes_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_aes_autogen.c:18

#include "aes_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_aes_init(mmio_region_t base_addr, dif_aes_t *aes) {
  if (aes == NULL) {
f0001100:       /----- c581                     beqz    a1,f0001108 <dif_aes_init+0x8>
f0001102:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_aes_autogen.c:22
    return kDifBadArg;
  }

  aes->base_addr = base_addr;
f0001104:       |      c188                     sw      a0,0(a1)
f0001106:       |  /-- a011                     j       f000110a <dif_aes_init+0xa>
f0001108:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_aes_autogen.c:25

  return kDifOk;
}
f000110a:          \-> 8532                     mv      a0,a2
f000110c:              8082                     ret

f000110e <dif_aes_reset>:
dif_aes_reset():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:192
    data[i] = mmio_region_read32(aes->base_addr, offset);
  }
}

dif_result_t dif_aes_reset(const dif_aes_t *aes) {
  if (aes == NULL) {
f000110e:       /----- c905                     beqz    a0,f000113e <dif_aes_reset+0x30>
f0001110:       |      410c                     lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0001112:       |  /-> 0845a603                 lw      a2,132(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f0001116:       |  |   8a05                     andi    a2,a2,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:74
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
f0001118:       |  \-- de6d                     beqz    a2,f0001112 <dif_aes_reset+0x4>
f000111a:       |      6621                     lui     a2,0x8
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f000111c:       |      d9f0                     sw      a2,116(a1)
f000111e:       |      d9f0                     sw      a2,116(a1)
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:89
  mmio_region_write32(aes->base_addr, AES_TRIGGER_REG_OFFSET, trigger_reg);
f0001120:       |      410c                     lw      a1,0(a0)
f0001122:       |      4619                     li      a2,6
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001124:       |      08c5a023                 sw      a2,128(a1)
f0001128:       |      410c                     lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f000112a:       |  /-> 0845a503                 lw      a0,132(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f000112e:       |  |   8905                     andi    a0,a0,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:92
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
f0001130:       |  \-- dd6d                     beqz    a0,f000112a <dif_aes_reset+0x1c>
f0001132:       |      4501                     li      a0,0
f0001134:       |      78300613                 li      a2,1923
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0001138:       |      d9f0                     sw      a2,116(a1)
f000113a:       |      d9f0                     sw      a2,116(a1)
dif_aes_reset():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:211
                               AES_CTRL_SHADOWED_KEY_LEN_MASK);

  aes_shadowed_write(aes->base_addr, AES_CTRL_SHADOWED_REG_OFFSET, reg);

  return kDifOk;
}
f000113c:       |      8082                     ret
f000113e:       \----> 450d                     li      a0,3
f0001140:              8082                     ret

f0001142 <dif_aes_start>:
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:217

dif_result_t dif_aes_start(const dif_aes_t *aes,
                           const dif_aes_transaction_t *transaction,
                           const dif_aes_key_share_t *key,
                           const dif_aes_iv_t *iv) {
  if (aes == NULL || transaction == NULL ||
f0001142:                       00153713                seqz    a4,a0
f0001146:                       0015b793                seqz    a5,a1
f000114a:                       8fd9                    or      a5,a5,a4
f000114c:                       470d                    li      a4,3
f000114e:       /-------------- 10079563                bnez    a5,f0001258 <dif_aes_start+0x116>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:218
      (iv == NULL && transaction->mode != kDifAesModeEcb) ||
f0001152:       |        /----- e691                    bnez    a3,f000115e <dif_aes_start+0x1c>
f0001154:       |        |      0045a803                lw      a6,4(a1)
f0001158:       |        |      4785                    li      a5,1
f000115a:       +--------|----- 0ef81f63                bne     a6,a5,f0001258 <dif_aes_start+0x116>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:219
      (key == NULL &&
f000115e:       |        \--/-X e219                    bnez    a2,f0001164 <dif_aes_start+0x22>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:220
       transaction->key_provider == kDifAesKeySoftwareProvided)) {
f0001160:       |           |   499c                    lw      a5,16(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:217
  if (aes == NULL || transaction == NULL ||
f0001162:       +-----------|-- cbfd                    beqz    a5,f0001258 <dif_aes_start+0x116>
aes_idle():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:32
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
f0001164:       |           \-> 00052283                lw      t0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0001168:       |               0842a703                lw      a4,132(t0)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f000116c:       |               00177793                andi    a5,a4,1
f0001170:       |               4739                    li      a4,14
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:224
    return kDifBadArg;
  }

  if (!aes_idle(aes)) {
f0001172:       +-------------- c3fd                    beqz    a5,f0001258 <dif_aes_start+0x116>
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:105
                                        transaction->operation);
f0001174:       |               4198                    lw      a4,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:108
                               transaction->mode);
f0001176:       |               0045a803                lw      a6,4(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f000117a:       |               00377893                andi    a7,a4,3
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:111
                               transaction->key_len);
f000117e:       |               459c                    lw      a5,8(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0001180:       |               00281713                slli    a4,a6,0x2
f0001184:       |               0fc77713                andi    a4,a4,252
f0001188:       |               01176733                or      a4,a4,a7
f000118c:       |               07a2                    slli    a5,a5,0x8
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:114
                               transaction->mask_reseeding);
f000118e:       |               0145a883                lw      a7,20(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f0001192:       |               7007f793                andi    a5,a5,1792
f0001196:       |               00f76333                or      t1,a4,a5
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:116
  bool flag = transaction->manual_operation == kDifAesManualOperationManual;
f000119a:       |               45dc                    lw      a5,12(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f000119c:       |               01d89713                slli    a4,a7,0x1d
f00011a0:       |               8345                    srli    a4,a4,0x11
f00011a2:       |               00e36733                or      a4,t1,a4
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:116
f00011a6:       |               17fd                    addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:119
  flag = transaction->key_provider == kDifAesKeySideload;
f00011a8:       |               0105a883                lw      a7,16(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:116
  bool flag = transaction->manual_operation == kDifAesManualOperationManual;
f00011ac:       |               0017b793                seqz    a5,a5
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f00011b0:       |               07be                    slli    a5,a5,0xf
f00011b2:       |               8f5d                    or      a4,a4,a5
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:119
  flag = transaction->key_provider == kDifAesKeySideload;
f00011b4:       |               fff88793                addi    a5,a7,-1
f00011b8:       |               0017b793                seqz    a5,a5
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f00011bc:       |               07ae                    slli    a5,a5,0xb
f00011be:       |               8f5d                    or      a4,a4,a5
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00011c0:       |               06e2aa23                sw      a4,116(t0)
f00011c4:       |               06e2aa23                sw      a4,116(t0)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:138
      mmio_region_read32(aes->base_addr, AES_CTRL_AUX_REGWEN_REG_OFFSET);
f00011c8:       |               4118                    lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00011ca:       |               5f7c                    lw      a5,124(a4)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:139
  if (!reg_val) {
f00011cc:       |  /----------- cbc1                    beqz    a5,f000125c <dif_aes_start+0x11a>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:156
                                 transaction->force_masks);
f00011ce:       |  |            01958783                lb      a5,25(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:154
                           transaction->reseed_on_key_change);
f00011d2:       |  |            0185c283                lbu     t0,24(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
f00011d6:       |  |            0786                    slli    a5,a5,0x1
f00011d8:       |  |            0fe7f793                andi    a5,a5,254
f00011dc:       |  |            0057e7b3                or      a5,a5,t0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00011e0:       |  |            df3c                    sw      a5,120(a4)
f00011e2:       |  |            df3c                    sw      a5,120(a4)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:159
  reg_val = transaction->ctrl_aux_lock == false;
f00011e4:       |  |            01a5c583                lbu     a1,26(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:160
  mmio_region_write32(aes->base_addr, AES_CTRL_AUX_REGWEN_REG_OFFSET, reg_val);
f00011e8:       |  |            4118                    lw      a4,0(a0)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:159
  reg_val = transaction->ctrl_aux_lock == false;
f00011ea:       |  |            0015c593                xori    a1,a1,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00011ee:       |  |            df6c                    sw      a1,124(a4)
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:238
  result = configure_aux(aes, transaction);
  if (result != kDifOk) {
    return result;
  }

  if (transaction->key_provider == kDifAesKeySoftwareProvided) {
f00011f0:       |  |  /--/----X 02089c63                bnez    a7,f0001228 <dif_aes_start+0xe6>
f00011f4:       |  |  |  |      4581                    li      a1,0
f00011f6:       |  |  |  |      02000893                li      a7,32
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
f00011fa:       |  |  |  |  /-> 411c                    lw      a5,0(a0)
f00011fc:       |  |  |  |  |   00b60733                add     a4,a2,a1
f0001200:       |  |  |  |  |   4318                    lw      a4,0(a4)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001202:       |  |  |  |  |   97ae                    add     a5,a5,a1
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
f0001204:       |  |  |  |  |   0591                    addi    a1,a1,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001206:       |  |  |  |  |   c3d8                    sw      a4,4(a5)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
f0001208:       |  |  |  |  \-- ff1599e3                bne     a1,a7,f00011fa <dif_aes_start+0xb8>
f000120c:       |  |  |  |      4581                    li      a1,0
f000120e:       |  |  |  |      02060613                addi    a2,a2,32
f0001212:       |  |  |  |      02000893                li      a7,32
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
f0001216:       |  |  |  |  /-> 411c                    lw      a5,0(a0)
f0001218:       |  |  |  |  |   00b60733                add     a4,a2,a1
f000121c:       |  |  |  |  |   4318                    lw      a4,0(a4)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000121e:       |  |  |  |  |   97ae                    add     a5,a5,a1
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
f0001220:       |  |  |  |  |   0591                    addi    a1,a1,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001222:       |  |  |  |  |   d3d8                    sw      a4,36(a5)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
f0001224:       |  |  |  |  \-- ff1599e3                bne     a1,a7,f0001216 <dif_aes_start+0xd4>
f0001228:       |  |  |  \----> 4585                    li      a1,1
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:246

    aes_set_multireg(aes, &key->share1[0], AES_KEY_SHARE1_MULTIREG_COUNT,
                     AES_KEY_SHARE1_0_REG_OFFSET);
  }

  if (transaction->mode != kDifAesModeEcb) {
f000122a:       |  |  |  /----- 02b80663                beq     a6,a1,f0001256 <dif_aes_start+0x114>
f000122e:       |  |  |  |      410c                    lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f0001230:       |  |  |  |  /-> 0845a603                lw      a2,132(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f0001234:       |  |  |  |  |   8a05                    andi    a2,a2,1
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:250
    // Make sure AES is idle before providing the IV. Depending on the
    // configuration, updating the key might cause the AES to become non-idle
    // and reseed the internal PRNGs.
    AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
f0001236:       |  |  |  |  \-- de6d                    beqz    a2,f0001230 <dif_aes_start+0xee>
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
f0001238:       |  |  |  |      4298                    lw      a4,0(a3)
f000123a:       |  |  |  |      4601                    li      a2,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f000123c:       |  |  |  |      c1f8                    sw      a4,68(a1)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
f000123e:       |  |  |  |      00468593                addi    a1,a3,4
f0001242:       |  |  |  |      46b1                    li      a3,12
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
f0001244:       |  |  |  |  /-> 4118                    lw      a4,0(a0)
f0001246:       |  |  |  |  |   00c587b3                add     a5,a1,a2
f000124a:       |  |  |  |  |   439c                    lw      a5,0(a5)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000124c:       |  |  |  |  |   9732                    add     a4,a4,a2
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
f000124e:       |  |  |  |  |   0611                    addi    a2,a2,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001250:       |  |  |  |  |   c73c                    sw      a5,72(a4)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
f0001252:       |  |  |  |  \-- fed619e3                bne     a2,a3,f0001244 <dif_aes_start+0x102>
f0001256:       |  |  |  \----> 4701                    li      a4,0
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:256
    aes_set_multireg(aes, &iv->iv[0], AES_IV_MULTIREG_COUNT,
                     AES_IV_0_REG_OFFSET);
  }

  return kDifOk;
}
f0001258:       >--|--|-------> 853a                    mv      a0,a4
f000125a:       |  |  |         8082                    ret
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f000125c:       |  \--|-------> 5f3c                    lw      a5,120(a4)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:144
            transaction->reseed_on_key_change ||
f000125e:       |     |         0185c283                lbu     t0,24(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:143
            reg_val, AES_CTRL_AUX_SHADOWED_KEY_TOUCH_FORCES_RESEED_BIT) !=
f0001262:       |     |         0017f313                andi    t1,a5,1
f0001266:       |     |         4735                    li      a4,13
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:144
            transaction->reseed_on_key_change ||
f0001268:       +-----|-------- fe6298e3                bne     t0,t1,f0001258 <dif_aes_start+0x116>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:146
            transaction->force_masks) {
f000126c:       |     |         0195c583                lbu     a1,25(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:145
        bitfield_bit32_read(reg_val, AES_CTRL_AUX_SHADOWED_FORCE_MASKS_BIT) !=
f0001270:       |     |         8385                    srli    a5,a5,0x1
f0001272:       |     |         8b85                    andi    a5,a5,1
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:142
    if (bitfield_bit32_read(
f0001274:       |     \-------- f6f58ee3                beq     a1,a5,f00011f0 <dif_aes_start+0xae>
f0001278:       \-------------- b7c5                    j       f0001258 <dif_aes_start+0x116>

f000127a <dif_aes_end>:
dif_aes_end():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:259

dif_result_t dif_aes_end(const dif_aes_t *aes) {
  if (aes == NULL) {
f000127a:       /-------- c915                  beqz    a0,f00012ae <dif_aes_end+0x34>
aes_idle():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:32
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
f000127c:       |         4110                  lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f000127e:       |         08462583              lw      a1,132(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f0001282:       |         0015f693              andi    a3,a1,1
f0001286:       |         45b9                  li      a1,14
dif_aes_end():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:263
    return kDifBadArg;
  }

  if (!aes_idle(aes)) {
f0001288:       |  /----- c685                  beqz    a3,f00012b0 <dif_aes_end+0x36>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f000128a:       |  |  /-> 08462583              lw      a1,132(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f000128e:       |  |  |   8985                  andi    a1,a1,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:74
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
f0001290:       |  |  \-- dded                  beqz    a1,f000128a <dif_aes_end+0x10>
f0001292:       |  |      65a1                  lui     a1,0x8
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f0001294:       |  |      da6c                  sw      a1,116(a2)
f0001296:       |  |      da6c                  sw      a1,116(a2)
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:89
  mmio_region_write32(aes->base_addr, AES_TRIGGER_REG_OFFSET, trigger_reg);
f0001298:       |  |      410c                  lw      a1,0(a0)
f000129a:       |  |      4619                  li      a2,6
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000129c:       |  |      08c5a023              sw      a2,128(a1) # 8080 <_non_volatile_scratch_size+0x3080>
f00012a0:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00012a2:       |  |  /-> 08452583              lw      a1,132(a0)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f00012a6:       |  |  |   8985                  andi    a1,a1,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:92
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
f00012a8:       |  |  \-- dded                  beqz    a1,f00012a2 <dif_aes_end+0x28>
f00012aa:       |  |      4581                  li      a1,0
f00012ac:       |  +----- a011                  j       f00012b0 <dif_aes_end+0x36>
f00012ae:       \--|----> 458d                  li      a1,3
dif_aes_end():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:270
  }

  aes_clear_internal_state(aes);

  return kDifOk;
}
f00012b0:          \----> 852e                  mv      a0,a1
f00012b2:                 8082                  ret

f00012b4 <dif_aes_load_data>:
dif_aes_load_data():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:274

dif_result_t dif_aes_load_data(const dif_aes_t *aes,
                               const dif_aes_data_t data) {
  if (aes == NULL) {
f00012b4:       /-------- c905                  beqz    a0,f00012e4 <dif_aes_load_data+0x30>
aes_input_ready():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:52
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
f00012b6:       |         4114                  lw      a3,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f00012b8:       |         0846a603              lw      a2,132(a3)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f00012bc:       |         01067713              andi    a4,a2,16
f00012c0:       |         4639                  li      a2,14
dif_aes_load_data():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:278
    return kDifBadArg;
  }

  if (!aes_input_ready(aes)) {
f00012c2:       |  /----- c315                  beqz    a4,f00012e6 <dif_aes_load_data+0x32>
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
f00012c4:       |  |      4198                  lw      a4,0(a1)
f00012c6:       |  |      4601                  li      a2,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00012c8:       |  |      caf8                  sw      a4,84(a3)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
f00012ca:       |  |      0591                  addi    a1,a1,4
f00012cc:       |  |      46b1                  li      a3,12
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
f00012ce:       |  |  /-> 4118                  lw      a4,0(a0)
f00012d0:       |  |  |   00c587b3              add     a5,a1,a2
f00012d4:       |  |  |   439c                  lw      a5,0(a5)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00012d6:       |  |  |   9732                  add     a4,a4,a2
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
f00012d8:       |  |  |   0611                  addi    a2,a2,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00012da:       |  |  |   cf3c                  sw      a5,88(a4)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
f00012dc:       |  |  \-- fed619e3              bne     a2,a3,f00012ce <dif_aes_load_data+0x1a>
f00012e0:       |  |      4601                  li      a2,0
f00012e2:       |  +----- a011                  j       f00012e6 <dif_aes_load_data+0x32>
f00012e4:       \--|----> 460d                  li      a2,3
dif_aes_load_data():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:286

  aes_set_multireg(aes, &data.data[0], AES_DATA_IN_MULTIREG_COUNT,
                   AES_DATA_IN_0_REG_OFFSET);

  return kDifOk;
}
f00012e6:          \----> 8532                  mv      a0,a2
f00012e8:                 8082                  ret

f00012ea <dif_aes_read_output>:
dif_aes_read_output():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:289

dif_result_t dif_aes_read_output(const dif_aes_t *aes, dif_aes_data_t *data) {
  if (aes == NULL || data == NULL) {
f00012ea:              00153613                 seqz    a2,a0
f00012ee:              0015b693                 seqz    a3,a1
f00012f2:              8ed1                     or      a3,a3,a2
f00012f4:              460d                     li      a2,3
f00012f6:       /----- e69d                     bnez    a3,f0001324 <dif_aes_read_output+0x3a>
aes_output_valid():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:47
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
f00012f8:       |      4114                     lw      a3,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00012fa:       |      0846a603                 lw      a2,132(a3)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f00012fe:       |      00867713                 andi    a4,a2,8
f0001302:       |      4635                     li      a2,13
dif_aes_read_output():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:293
    return kDifBadArg;
  }

  if (!aes_output_valid(aes)) {
f0001304:       +----- c305                     beqz    a4,f0001324 <dif_aes_read_output+0x3a>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001306:       |      52f4                     lw      a3,100(a3)
f0001308:       |      4601                     li      a2,0
aes_read_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
    data[i] = mmio_region_read32(aes->base_addr, offset);
f000130a:       |      c194                     sw      a3,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:184
  for (int i = 0; i < regs_num; ++i) {
f000130c:       |      0591                     addi    a1,a1,4
f000130e:       |      46b1                     li      a3,12
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
    data[i] = mmio_region_read32(aes->base_addr, offset);
f0001310:       |  /-> 4118                     lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001312:       |  |   9732                     add     a4,a4,a2
f0001314:       |  |   5738                     lw      a4,104(a4)
aes_read_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
f0001316:       |  |   00c587b3                 add     a5,a1,a2
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:184
  for (int i = 0; i < regs_num; ++i) {
f000131a:       |  |   0611                     addi    a2,a2,4
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
    data[i] = mmio_region_read32(aes->base_addr, offset);
f000131c:       |  |   c398                     sw      a4,0(a5)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:184
  for (int i = 0; i < regs_num; ++i) {
f000131e:       |  \-- fed619e3                 bne     a2,a3,f0001310 <dif_aes_read_output+0x26>
f0001322:       |      4601                     li      a2,0
dif_aes_read_output():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:301

  aes_read_multireg(aes, data->data, AES_DATA_OUT_MULTIREG_COUNT,
                    AES_DATA_OUT_0_REG_OFFSET);

  return kDifOk;
}
f0001324:       \----> 8532                     mv      a0,a2
f0001326:              8082                     ret

f0001328 <dif_aes_get_status>:
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:370
  return kDifOk;
}

dif_result_t dif_aes_get_status(const dif_aes_t *aes, dif_aes_status_t flag,
                                bool *set) {
  if (aes == NULL || set == NULL) {
f0001328:                 00153693              seqz    a3,a0
f000132c:                 00163713              seqz    a4,a2
f0001330:                 8f55                  or      a4,a4,a3
f0001332:                 468d                  li      a3,3
f0001334:       /-------- e33d                  bnez    a4,f000139a <dif_aes_get_status+0x72>
f0001336:       |         4699                  li      a3,6
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:374
    return kDifBadArg;
  }

  switch (flag) {
f0001338:       |     /-- 00b6ee63              bltu    a3,a1,f0001354 <dif_aes_get_status+0x2c>
f000133c:       |     |   058a                  slli    a1,a1,0x2
f000133e:       |     |   00002697              auipc   a3,0x2
f0001342:       |     |   17668693              addi    a3,a3,374 # f00034b4 <kAesModesCipherTextEcb256+0x11c>
f0001346:       |     |   95b6                  add     a1,a1,a3
f0001348:       |     |   418c                  lw      a1,0(a1)
f000134a:       |     |   8582                  jr      a1
aes_idle():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:32
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
f000134c:       |     |   4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f000134e:       |     |   08452503              lw      a0,132(a0)
f0001352:       |  /--|-- a081                  j       f0001392 <dif_aes_get_status+0x6a>
f0001354:       |  |  \-> 46b5                  li      a3,13
f0001356:       +--|----- a091                  j       f000139a <dif_aes_get_status+0x72>
aes_stalled():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:37
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
f0001358:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f000135a:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:379
    case kDifAesStatusIdle:
      *set = aes_idle(aes);
      break;
    case kDifAesStatusStall:
      *set = aes_stalled(aes);
f000135e:       |  |      8105                  srli    a0,a0,0x1
f0001360:       |  +----- a80d                  j       f0001392 <dif_aes_get_status+0x6a>
aes_output_lost():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:42
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
f0001362:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001364:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:382
      break;
    case kDifAesStatusOutputLost:
      *set = aes_output_lost(aes);
f0001368:       |  |      8109                  srli    a0,a0,0x2
f000136a:       |  +----- a025                  j       f0001392 <dif_aes_get_status+0x6a>
aes_output_valid():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:47
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
f000136c:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f000136e:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:385
      break;
    case kDifAesStatusOutputValid:
      *set = aes_output_valid(aes);
f0001372:       |  |      810d                  srli    a0,a0,0x3
f0001374:       |  +----- a839                  j       f0001392 <dif_aes_get_status+0x6a>
aes_input_ready():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:52
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
f0001376:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001378:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:388
      break;
    case kDifAesStatusInputReady:
      *set = aes_input_ready(aes);
f000137c:       |  |      8111                  srli    a0,a0,0x4
f000137e:       |  +----- a811                  j       f0001392 <dif_aes_get_status+0x6a>
aes_alert_fatal():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:57
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
f0001380:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f0001382:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:391
      break;
    case kDifAesStatusAlertFatalFault:
      *set = aes_alert_fatal(aes);
f0001386:       |  |      8119                  srli    a0,a0,0x6
f0001388:       |  +----- a029                  j       f0001392 <dif_aes_get_status+0x6a>
aes_alert_recoverable():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:62
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
f000138a:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f000138c:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:394
      break;
    case kDifAesStatusAlertRecovCtrlUpdateErr:
      *set = aes_alert_recoverable(aes);
f0001390:       |  |      8115                  srli    a0,a0,0x5
f0001392:       |  \----> 4681                  li      a3,0
f0001394:       |         8905                  andi    a0,a0,1
f0001396:       |         00a60023              sb      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:401
    default:
      return kDifError;
  }

  return kDifOk;
}
f000139a:       \-------> 8536                  mv      a0,a3
f000139c:                 8082                  ret

f000139e <ottf_machine_ecall_handler>:
ottf_machine_ecall_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:49
// A global random number generator testutil handle.
rand_testutils_rng_t rand_testutils_rng_ctx;

// The OTTF overrides the default machine ecall exception handler to implement
// FreeRTOS context switching, required for supporting cooperative scheduling.
void ottf_machine_ecall_handler(void) {
f000139e:           1101                        addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:50
  if (pxCurrentTCB != NULL) {
f00013a0:           ce06                        sw      ra,28(sp)
f00013a2:           f0001517            auipc   a0,0xf0001
f00013a6:           cbe50513            addi    a0,a0,-834 # e0002060 <pxCurrentTCB>
f00013aa:           4108                        lw      a0,0(a0)
f00013ac:       /-- c509                        beqz    a0,f00013b6 <ottf_machine_ecall_handler+0x18>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:54
    // If the pointer to the current TCB is not NULL, we are operating in
    // concurrency mode. In this case, our default behavior is to assume a
    // context switch has been requested.
    vTaskSwitchContext();
f00013ae:       |   40f2                        lw      ra,28(sp)
f00013b0:       |   6105                        addi    sp,sp,32
f00013b2:       |   5760106f            j       f0002928 <vTaskSwitchContext>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:57
    return;
  }
  LOG_ERROR(
f00013b6:       \-> 00003517            auipc   a0,0x3
f00013ba:           ed650513            addi    a0,a0,-298 # f000428c <kDeviceLogBypassUartAddress>
f00013be:           4108                        lw      a0,0(a0)
f00013c0:       /-- c911                        beqz    a0,f00013d4 <ottf_machine_ecall_handler+0x36>
f00013c2:       |   1000f517            auipc   a0,0x1000f
f00013c6:       |   dba50513            addi    a0,a0,-582 # 1017c <_non_volatile_scratch_end+0xffd017c>
f00013ca:       |   4581                        li      a1,0
f00013cc:       |   40f2                        lw      ra,28(sp)
f00013ce:       |   6105                        addi    sp,sp,32
f00013d0:       |   7ea0006f            j       f0001bba <base_log_internal_dv>
f00013d4:       \-> 00002597            auipc   a1,0x2
f00013d8:           36058593            addi    a1,a1,864 # f0003734 <kAesModesCipherTextEcb256+0x39c>
f00013dc:           0028                        addi    a0,sp,8
f00013de:           4651                        li      a2,20
f00013e0:           0b0010ef            jal     ra,f0002490 <memcpy>
f00013e4:           0028                        addi    a0,sp,8
f00013e6:           732000ef            jal     ra,f0001b18 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:60
      "OTTF currently only supports use of machine-mode ecall for FreeRTOS "
      "context switching.");
}
f00013ea:           40f2                        lw      ra,28(sp)
f00013ec:           6105                        addi    sp,sp,32
f00013ee:           8082                        ret

f00013f0 <_ottf_main>:
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:120
  report_test_status(result);
}

dif_uart_t *ottf_console(void) { return &uart0; }

void _ottf_main(void) {
f00013f0:                 7179                  addi    sp,sp,-48
f00013f2:                 d606                  sw      ra,44(sp)
f00013f4:                 d422                  sw      s0,40(sp)
f00013f6:                 d226                  sw      s1,36(sp)
f00013f8:                 d04a                  sw      s2,32(sp)
f00013fa:                 6511                  lui     a0,0x4
f00013fc:                 35450513              addi    a0,a0,852 # 4354 <_stack_size+0x354>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:121
  test_status_set(kTestStatusInTest);
f0001400:                 652000ef              jal     ra,f0001a52 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:124

  // Initialize the UART to enable logging for non-DV simulation platforms.
  if (kDeviceType != kDeviceSimDV) {
f0001404:                 00003517              auipc   a0,0x3
f0001408:                 e6850513              addi    a0,a0,-408 # f000426c <kDeviceType>
f000140c:                 4108                  lw      a0,0(a0)
f000140e:                 00003917              auipc   s2,0x3
f0001412:                 e7e90913              addi    s2,s2,-386 # f000428c <kDeviceLogBypassUartAddress>
f0001416:                 00002497              auipc   s1,0x2
f000141a:                 e3e48493              addi    s1,s1,-450 # f0003254 <kOttfTestConfig>
f000141e:          /----- c91d                  beqz    a0,f0001454 <_ottf_main+0x64>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:125
    init_uart();
f0001420:          |      28fd                  jal     f000151e <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:126
    LOG_INFO("Running %s", kOttfTestConfig.file);
f0001422:          |      00092503              lw      a0,0(s2)
f0001426:          |      40c0                  lw      s0,4(s1)
f0001428:          |  /-- c911                  beqz    a0,f000143c <_ottf_main+0x4c>
f000142a:          |  |   1000f517              auipc   a0,0x1000f
f000142e:          |  |   d6650513              addi    a0,a0,-666 # 10190 <_non_volatile_scratch_end+0xffd0190>
f0001432:          |  |   4585                  li      a1,1
f0001434:          |  |   8622                  mv      a2,s0
f0001436:          |  |   784000ef              jal     ra,f0001bba <base_log_internal_dv>
f000143a:          +--|-- a829                  j       f0001454 <_ottf_main+0x64>
f000143c:          |  \-> 00002597              auipc   a1,0x2
f0001440:          |      30c58593              addi    a1,a1,780 # f0003748 <kAesModesCipherTextEcb256+0x3b0>
f0001444:          |      850a                  mv      a0,sp
f0001446:          |      4651                  li      a2,20
f0001448:          |      048010ef              jal     ra,f0002490 <memcpy>
f000144c:          |      850a                  mv      a0,sp
f000144e:          |      85a2                  mv      a1,s0
f0001450:          |      6c8000ef              jal     ra,f0001b18 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:132
  }

  // Initialize a global random number generator testutil context to provide
  // tests with a source of entropy for randomizing test behaviors.
  dif_rv_core_ibex_t rv_core_ibex;
  CHECK_DIF_OK(dif_rv_core_ibex_init(
f0001454:          \----> c11f0537              lui     a0,0xc11f0
f0001458:                 082c                  addi    a1,sp,24
f000145a:                 5ea000ef              jal     ra,f0001a44 <dif_rv_core_ibex_init>
f000145e:       /-------- cd15                  beqz    a0,f000149a <_ottf_main+0xaa>
f0001460:       |         842a                  mv      s0,a0
f0001462:       |         00092503              lw      a0,0(s2)
f0001466:       |     /-- c911                  beqz    a0,f000147a <_ottf_main+0x8a>
f0001468:       |     |   1000f517              auipc   a0,0x1000f
f000146c:       |     |   d3c50513              addi    a0,a0,-708 # 101a4 <_non_volatile_scratch_end+0xffd01a4>
f0001470:       |     |   4585                  li      a1,1
f0001472:       |     |   8622                  mv      a2,s0
f0001474:       |     |   746000ef              jal     ra,f0001bba <base_log_internal_dv>
f0001478:       |  /--|-- a829                  j       f0001492 <_ottf_main+0xa2>
f000147a:       |  |  \-> 00002597              auipc   a1,0x2
f000147e:       |  |      2e258593              addi    a1,a1,738 # f000375c <kAesModesCipherTextEcb256+0x3c4>
f0001482:       |  |      850a                  mv      a0,sp
f0001484:       |  |      4651                  li      a2,20
f0001486:       |  |      00a010ef              jal     ra,f0002490 <memcpy>
f000148a:       |  |      850a                  mv      a0,sp
f000148c:       |  |      85a2                  mv      a1,s0
f000148e:       |  |      68a000ef              jal     ra,f0001b18 <base_log_internal_core>
f0001492:       |  \----> 6531                  lui     a0,0xc
f0001494:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001498:       |         2b6d                  jal     f0001a52 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:135
      mmio_region_from_addr(TOP_EARLGREY_RV_CORE_IBEX_CFG_BASE_ADDR),
      &rv_core_ibex));
  rand_testutils_rng_ctx = rand_testutils_init(&rv_core_ibex);
f000149a:       \-------> 850a                  mv      a0,sp
f000149c:                 082c                  addi    a1,sp,24
f000149e:                 2b31                  jal     f00019ba <rand_testutils_init>
f00014a0:                 f0001517              auipc   a0,0xf0001
f00014a4:                 c0450513              addi    a0,a0,-1020 # e00020a4 <rand_testutils_rng_ctx>
f00014a8:                 858a                  mv      a1,sp
f00014aa:                 4661                  li      a2,24
f00014ac:                 7e5000ef              jal     ra,f0002490 <memcpy>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:138

  // Run the test.
  if (kOttfTestConfig.enable_concurrency) {
f00014b0:                 0004c503              lbu     a0,0(s1)
f00014b4:          /----- c11d                  beqz    a0,f00014da <_ottf_main+0xea>
ottf_task_create():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:65
  return xTaskCreate(/*pvTaskCode=*/task_function, /*pcName=*/task_name,
f00014b6:          |      00000517              auipc   a0,0x0
f00014ba:          |      13a50513              addi    a0,a0,314 # f00015f0 <test_wrapper>
f00014be:          |      00002597              auipc   a1,0x2
f00014c2:          |      12058593              addi    a1,a1,288 # f00035de <kAesModesCipherTextEcb256+0x246>
f00014c6:          |      10000613              li      a2,256
f00014ca:          |      4705                  li      a4,1
f00014cc:          |      4681                  li      a3,0
f00014ce:          |      4781                  li      a5,0
f00014d0:          |      218010ef              jal     ra,f00026e8 <xTaskCreate>
_ottf_main():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:143
    // Run `test_main()` in a FreeRTOS task, allowing other FreeRTOS tasks to
    // be spawned, if requested in the main test task. Note, we spawn the main
    // test task at a priority level of 0.
    ottf_task_create(test_wrapper, "test_main", kOttfFreeRtosMinStackSize, 0);
    vTaskStartScheduler();
f00014d4:          |      540010ef              jal     ra,f0002a14 <vTaskStartScheduler>
f00014d8:          |  /-- a019                  j       f00014de <_ottf_main+0xee>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:146
  } else {
    // Otherwise, launch `test_main()` on bare-metal.
    test_wrapper(NULL);
f00014da:          \--|-> 4501                  li      a0,0
f00014dc:             |   2a11                  jal     f00015f0 <test_wrapper>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:150
  }

  // Unreachable.
  CHECK(false);
f00014de:             \-> 00092503              lw      a0,0(s2)
f00014e2:             /-- c909                  beqz    a0,f00014f4 <_ottf_main+0x104>
f00014e4:             |   1000f517              auipc   a0,0x1000f
f00014e8:             |   cd450513              addi    a0,a0,-812 # 101b8 <_non_volatile_scratch_end+0xffd01b8>
f00014ec:             |   4581                  li      a1,0
f00014ee:             |   6cc000ef              jal     ra,f0001bba <base_log_internal_dv>
f00014f2:          /--|-- a821                  j       f000150a <_ottf_main+0x11a>
f00014f4:          |  \-> 00002597              auipc   a1,0x2
f00014f8:          |      27c58593              addi    a1,a1,636 # f0003770 <kAesModesCipherTextEcb256+0x3d8>
f00014fc:          |      850a                  mv      a0,sp
f00014fe:          |      4651                  li      a2,20
f0001500:          |      791000ef              jal     ra,f0002490 <memcpy>
f0001504:          |      850a                  mv      a0,sp
f0001506:          |      612000ef              jal     ra,f0001b18 <base_log_internal_core>
f000150a:          \----> 6531                  lui     a0,0xc
f000150c:                 aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001510:                 2389                  jal     f0001a52 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:151
}
f0001512:                 5902                  lw      s2,32(sp)
f0001514:                 5492                  lw      s1,36(sp)
f0001516:                 5422                  lw      s0,40(sp)
f0001518:                 50b2                  lw      ra,44(sp)
f000151a:                 6145                  addi    sp,sp,48
f000151c:                 8082                  ret

f000151e <init_uart>:
init_uart():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:81
static void init_uart(void) {
f000151e:                 1101                  addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:82
  CHECK_DIF_OK(dif_uart_init(
f0001520:                 ce06                  sw      ra,28(sp)
f0001522:                 cc22                  sw      s0,24(sp)
f0001524:                 ca26                  sw      s1,20(sp)
f0001526:                 f0001597              auipc   a1,0xf0001
f000152a:                 b2258593              addi    a1,a1,-1246 # e0002048 <uart0>
f000152e:                 c0000537              lui     a0,0xc0000
f0001532:                 5c5000ef              jal     ra,f00022f6 <dif_uart_init>
f0001536:                 00003497              auipc   s1,0x3
f000153a:                 d5648493              addi    s1,s1,-682 # f000428c <kDeviceLogBypassUartAddress>
f000153e:       /-------- cd05                  beqz    a0,f0001576 <init_uart+0x58>
f0001540:       |         842a                  mv      s0,a0
f0001542:       |         4088                  lw      a0,0(s1)
f0001544:       |     /-- c911                  beqz    a0,f0001558 <init_uart+0x3a>
f0001546:       |     |   1000f517              auipc   a0,0x1000f
f000154a:       |     |   c8650513              addi    a0,a0,-890 # 101cc <_non_volatile_scratch_end+0xffd01cc>
f000154e:       |     |   4585                  li      a1,1
f0001550:       |     |   8622                  mv      a2,s0
f0001552:       |     |   668000ef              jal     ra,f0001bba <base_log_internal_dv>
f0001556:       |  /--|-- a821                  j       f000156e <init_uart+0x50>
f0001558:       |  |  \-> 00002597              auipc   a1,0x2
f000155c:       |  |      22c58593              addi    a1,a1,556 # f0003784 <kAesModesCipherTextEcb256+0x3ec>
f0001560:       |  |      850a                  mv      a0,sp
f0001562:       |  |      4651                  li      a2,20
f0001564:       |  |      72d000ef              jal     ra,f0002490 <memcpy>
f0001568:       |  |      850a                  mv      a0,sp
f000156a:       |  |      85a2                  mv      a1,s0
f000156c:       |  |      2375                  jal     f0001b18 <base_log_internal_core>
f000156e:       |  \----> 6531                  lui     a0,0xc
f0001570:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001574:       |         29f9                  jal     f0001a52 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:84
  CHECK_DIF_OK(
f0001576:       \-------> 00003517              auipc   a0,0x3
f000157a:                 d0a50513              addi    a0,a0,-758 # f0004280 <kUartBaudrate>
f000157e:                 4108                  lw      a0,0(a0)
f0001580:                 00003597              auipc   a1,0x3
f0001584:                 cf858593              addi    a1,a1,-776 # f0004278 <kClockFreqPeripheralHz>
f0001588:                 418c                  lw      a1,0(a1)
f000158a:                 c02a                  sw      a0,0(sp)
f000158c:                 c22e                  sw      a1,4(sp)
f000158e:                 c402                  sw      zero,8(sp)
f0001590:                 4505                  li      a0,1
f0001592:                 c62a                  sw      a0,12(sp)
f0001594:                 f0001517              auipc   a0,0xf0001
f0001598:                 ab450513              addi    a0,a0,-1356 # e0002048 <uart0>
f000159c:                 858a                  mv      a1,sp
f000159e:                 567000ef              jal     ra,f0002304 <dif_uart_configure>
f00015a2:       /-------- cd05                  beqz    a0,f00015da <init_uart+0xbc>
f00015a4:       |         842a                  mv      s0,a0
f00015a6:       |         4088                  lw      a0,0(s1)
f00015a8:       |     /-- c911                  beqz    a0,f00015bc <init_uart+0x9e>
f00015aa:       |     |   1000f517              auipc   a0,0x1000f
f00015ae:       |     |   c3650513              addi    a0,a0,-970 # 101e0 <_non_volatile_scratch_end+0xffd01e0>
f00015b2:       |     |   4585                  li      a1,1
f00015b4:       |     |   8622                  mv      a2,s0
f00015b6:       |     |   604000ef              jal     ra,f0001bba <base_log_internal_dv>
f00015ba:       |  /--|-- a821                  j       f00015d2 <init_uart+0xb4>
f00015bc:       |  |  \-> 00002597              auipc   a1,0x2
f00015c0:       |  |      1dc58593              addi    a1,a1,476 # f0003798 <kAesModesCipherTextEcb256+0x400>
f00015c4:       |  |      850a                  mv      a0,sp
f00015c6:       |  |      4651                  li      a2,20
f00015c8:       |  |      6c9000ef              jal     ra,f0002490 <memcpy>
f00015cc:       |  |      850a                  mv      a0,sp
f00015ce:       |  |      85a2                  mv      a1,s0
f00015d0:       |  |      23a1                  jal     f0001b18 <base_log_internal_core>
f00015d2:       |  \----> 6531                  lui     a0,0xc
f00015d4:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00015d8:       |         29ad                  jal     f0001a52 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:91
  base_uart_stdout(&uart0);
f00015da:       \-------> f0001517              auipc   a0,0xf0001
f00015de:                 a6e50513              addi    a0,a0,-1426 # e0002048 <uart0>
f00015e2:                 610000ef              jal     ra,f0001bf2 <base_uart_stdout>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:92
}
f00015e6:                 44d2                  lw      s1,20(sp)
f00015e8:                 4462                  lw      s0,24(sp)
f00015ea:                 40f2                  lw      ra,28(sp)
f00015ec:                 6105                  addi    sp,sp,32
f00015ee:                 8082                  ret

f00015f0 <test_wrapper>:
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:110
static void test_wrapper(void *task_parameters) {
f00015f0:                 1101                  addi    sp,sp,-32
f00015f2:                 ce06                  sw      ra,28(sp)
f00015f4:                 cc22                  sw      s0,24(sp)
f00015f6:                 ca26                  sw      s1,20(sp)
f00015f8:                 6531                  lui     a0,0xc
f00015fa:                 aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:112
  bool result = manufacturer_pre_test_hook();
f00015fe:                 049010ef              jal     ra,f0002e46 <manufacturer_pre_test_hook>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:113
  result = result && test_main();
f0001602:          /----- cd11                  beqz    a0,f000161e <test_wrapper+0x2e>
f0001604:          |      a0cff0ef              jal     ra,f0000810 <test_main>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:114
  result = result && manufacturer_post_test_hook();
f0001608:          +----- c919                  beqz    a0,f000161e <test_wrapper+0x2e>
f000160a:          |      041010ef              jal     ra,f0002e4a <manufacturer_post_test_hook>
f000160e:          |  /-- e509                  bnez    a0,f0001618 <test_wrapper+0x28>
f0001610:          |  |   6531                  lui     a0,0xc
f0001612:          |  |   aad50413              addi    s0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001616:          +--|-- a021                  j       f000161e <test_wrapper+0x2e>
f0001618:          |  \-> 6525                  lui     a0,0x9
f000161a:          |      00d50413              addi    s0,a0,13 # 900d <_non_volatile_scratch_size+0x400d>
report_test_status():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:96
  if (kDeviceType != kDeviceSimDV) {
f000161e:          \----> 00003517              auipc   a0,0x3
f0001622:                 c4e50513              addi    a0,a0,-946 # f000426c <kDeviceType>
f0001626:                 4108                  lw      a0,0(a0)
f0001628:       /-------- c521                  beqz    a0,f0001670 <test_wrapper+0x80>
f000162a:       |         00002497              auipc   s1,0x2
f000162e:       |         c2a48493              addi    s1,s1,-982 # f0003254 <kOttfTestConfig>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:97
    if (kOttfTestConfig.can_clobber_uart) {
f0001632:       |         0014c503              lbu     a0,1(s1)
f0001636:       |     /-- c111                  beqz    a0,f000163a <test_wrapper+0x4a>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:98
      init_uart();
f0001638:       |     |   35dd                  jal     f000151e <init_uart>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:100
    LOG_INFO("Finished %s", kOttfTestConfig.file);
f000163a:       |     \-> 00003517              auipc   a0,0x3
f000163e:       |         c5250513              addi    a0,a0,-942 # f000428c <kDeviceLogBypassUartAddress>
f0001642:       |         4108                  lw      a0,0(a0)
f0001644:       |         40c4                  lw      s1,4(s1)
f0001646:       |     /-- c909                  beqz    a0,f0001658 <test_wrapper+0x68>
f0001648:       |     |   1000f517              auipc   a0,0x1000f
f000164c:       |     |   bac50513              addi    a0,a0,-1108 # 101f4 <_non_volatile_scratch_end+0xffd01f4>
f0001650:       |     |   4585                  li      a1,1
f0001652:       |     |   8626                  mv      a2,s1
f0001654:       |     |   239d                  jal     f0001bba <base_log_internal_dv>
f0001656:       |  /--|-- a821                  j       f000166e <test_wrapper+0x7e>
f0001658:       |  |  \-> 00002597              auipc   a1,0x2
f000165c:       |  |      15458593              addi    a1,a1,340 # f00037ac <kAesModesCipherTextEcb256+0x414>
f0001660:       |  |      850a                  mv      a0,sp
f0001662:       |  |      4651                  li      a2,20
f0001664:       |  |      62d000ef              jal     ra,f0002490 <memcpy>
f0001668:       |  |      850a                  mv      a0,sp
f000166a:       |  |      85a6                  mv      a1,s1
f000166c:       |  |      2175                  jal     f0001b18 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:101
    test_coverage_send_buffer();
f000166e:       |  \----> 2801                  jal     f000167e <test_coverage_send_buffer>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:104
  test_status_set(result ? kTestStatusPassed : kTestStatusFailed);
f0001670:       \-------> 8522                  mv      a0,s0
f0001672:                 26c5                  jal     f0001a52 <test_status_set>
test_wrapper():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_main.c:116
}
f0001674:                 44d2                  lw      s1,20(sp)
f0001676:                 4462                  lw      s0,24(sp)
f0001678:                 40f2                  lw      ra,28(sp)
f000167a:                 6105                  addi    sp,sp,32
f000167c:                 8082                  ret

f000167e <test_coverage_send_buffer>:
test_coverage_send_buffer():
/proc/self/cwd/sw/device/lib/testing/test_framework/coverage_none.c:9

#include "sw/device/lib/testing/test_framework/coverage.h"

// This NOP function gets linked in when coverage is disabled. See
// `test_coverage_llvm.c` for its actual definition when coverage is enabled.
void test_coverage_send_buffer(void) {}
f000167e:       8082                    ret

f0001680 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:18

/**
 * This is called if configUSE_MALLOC_FAILED_HOOK is set to 1 in
 * FreeRTOSConfig.h, and a call to pvPortMalloc() fails.
 */
void vApplicationMallocFailedHook(void) {
f0001680:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:19
  LOG_INFO("FreeRTOS malloc failed. Increase heap size in FreeRTOSConfig.h");
f0001682:              ce06                     sw      ra,28(sp)
f0001684:              00003517                 auipc   a0,0x3
f0001688:              c0850513                 addi    a0,a0,-1016 # f000428c <kDeviceLogBypassUartAddress>
f000168c:              4108                     lw      a0,0(a0)
f000168e:       /----- ed01                     bnez    a0,f00016a6 <vApplicationMallocFailedHook+0x26>
f0001690:       |      00002597                 auipc   a1,0x2
f0001694:       |      1e058593                 addi    a1,a1,480 # f0003870 <kAesModesCipherTextEcb256+0x4d8>
f0001698:       |      0028                     addi    a0,sp,8
f000169a:       |      4651                     li      a2,20
f000169c:       |      5f5000ef                 jal     ra,f0002490 <memcpy>
f00016a0:       |      0028                     addi    a0,sp,8
f00016a2:       |      299d                     jal     f0001b18 <base_log_internal_core>
f00016a4:       |  /-- a039                     j       f00016b2 <vApplicationMallocFailedHook+0x32>
f00016a6:       \--|-> 1000f517                 auipc   a0,0x1000f
f00016aa:          |   b6250513                 addi    a0,a0,-1182 # 10208 <_non_volatile_scratch_end+0xffd0208>
f00016ae:          |   4581                     li      a1,0
f00016b0:          |   2329                     jal     f0001bba <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:20
  irq_global_ctrl(false);
f00016b2:          \-> 4501                     li      a0,0
f00016b4:              28a1                     jal     f000170c <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:21
  abort();
f00016b6:              21a9                     jal     f0001b00 <abort>

f00016b8 <vApplicationStackOverflowHook>:
vApplicationStackOverflowHook():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:28

/**
 * This is called if configCHECK_FOR_STACK_OVERFLOW is set to 1 or 2 in
 * FreeRTOSConfig.h, and a task detects a stack overflow.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
f00016b8:              1101                     addi    sp,sp,-32
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:29
  LOG_INFO("FreeRTOS stack overflow. Increase stack size of task: %s");
f00016ba:              ce06                     sw      ra,28(sp)
f00016bc:              00003517                 auipc   a0,0x3
f00016c0:              bd050513                 addi    a0,a0,-1072 # f000428c <kDeviceLogBypassUartAddress>
f00016c4:              4108                     lw      a0,0(a0)
f00016c6:       /----- ed01                     bnez    a0,f00016de <vApplicationStackOverflowHook+0x26>
f00016c8:       |      00002597                 auipc   a1,0x2
f00016cc:       |      1bc58593                 addi    a1,a1,444 # f0003884 <kAesModesCipherTextEcb256+0x4ec>
f00016d0:       |      0028                     addi    a0,sp,8
f00016d2:       |      4651                     li      a2,20
f00016d4:       |      5bd000ef                 jal     ra,f0002490 <memcpy>
f00016d8:       |      0028                     addi    a0,sp,8
f00016da:       |      293d                     jal     f0001b18 <base_log_internal_core>
f00016dc:       |  /-- a039                     j       f00016ea <vApplicationStackOverflowHook+0x32>
f00016de:       \--|-> 1000f517                 auipc   a0,0x1000f
f00016e2:          |   b3e50513                 addi    a0,a0,-1218 # 1021c <_non_volatile_scratch_end+0xffd021c>
f00016e6:          |   4581                     li      a1,0
f00016e8:          |   29c9                     jal     f0001bba <base_log_internal_dv>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:30
  irq_global_ctrl(false);
f00016ea:          \-> 4501                     li      a0,0
f00016ec:              2005                     jal     f000170c <irq_global_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_hooks.c:31
  abort();
f00016ee:              2909                     jal     f0001b00 <abort>

f00016f0 <xPortStartScheduler>:
xPortStartScheduler():
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:93
// ----------------------------------------------------------------------------
// Scheduler Setup
// ----------------------------------------------------------------------------
extern void xPortStartFirstTask(void);

BaseType_t xPortStartScheduler(void) {
f00016f0:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:97
#if configUSE_PREEMPTION
  vPortSetupTimerInterrupt();
#endif  // configUSE_PREEMPTION
  irq_timer_ctrl(true);
f00016f2:       c606                    sw      ra,12(sp)
f00016f4:       4505                    li      a0,1
f00016f6:       2089                    jal     f0001738 <irq_timer_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:98
  irq_external_ctrl(true);
f00016f8:       4505                    li      a0,1
f00016fa:       2015                    jal     f000171e <irq_external_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:99
  irq_software_ctrl(true);
f00016fc:       4505                    li      a0,1
f00016fe:       2881                    jal     f000174e <irq_software_ctrl>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:103
  // Note: no need to call 'irq_global_ctrl(true)' since the global interrupt
  // enable is set in the xPortStartFirstTask sub-routine in
  // sw/device/lib/testing/test_framework/freertos_port.S.
  xPortStartFirstTask();
f0001700:       e49fe0ef                jal     ra,f0000548 <xPortStartFirstTask>
/proc/self/cwd/sw/device/lib/testing/test_framework/freertos_port.c:106

  // Unreachable.
  return pdFAIL;
f0001704:       4501                    li      a0,0
f0001706:       40b2                    lw      ra,12(sp)
f0001708:       0141                    addi    sp,sp,16
f000170a:       8082                    ret

f000170c <irq_global_ctrl>:
irq_global_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:18
void irq_set_vector_offset(uintptr_t address) {
  CSR_WRITE(CSR_REG_MTVEC, (uint32_t)address);
}

void irq_global_ctrl(bool en) {
  if (en) {
f000170c:       /-- c509                        beqz    a0,f0001716 <irq_global_ctrl+0xa>
f000170e:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:19
    CSR_SET_BITS(CSR_REG_MSTATUS, 0x8);
f0001710:       |   30052073            csrs    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
  } else {
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
  }
}
f0001714:       |   8082                        ret
f0001716:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:21
    CSR_CLEAR_BITS(CSR_REG_MSTATUS, 0x8);
f0001718:           30053073            csrc    mstatus,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:23
}
f000171c:           8082                        ret

f000171e <irq_external_ctrl>:
irq_external_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:27

void irq_external_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_EXT_ENABLE_OFFSET;
  if (en) {
f000171e:       /-- c519                        beqz    a0,f000172c <irq_external_ctrl+0xe>
f0001720:       |   6505                        lui     a0,0x1
f0001722:       |   80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:28
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0001726:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f000172a:       |   8082                        ret
f000172c:       \-> 6505                        lui     a0,0x1
f000172e:           80050513            addi    a0,a0,-2048 # 800 <_epmp_reset_rx_size>
/proc/self/cwd/sw/device/lib/runtime/irq.c:30
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0001732:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:32
}
f0001736:           8082                        ret

f0001738 <irq_timer_ctrl>:
irq_timer_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:36

void irq_timer_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_TIMER_ENABLE_OFFSET;
  if (en) {
f0001738:       /-- c511                        beqz    a0,f0001744 <irq_timer_ctrl+0xc>
f000173a:       |   08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:37
    CSR_SET_BITS(CSR_REG_MIE, mask);
f000173e:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0001742:       |   8082                        ret
f0001744:       \-> 08000513            li      a0,128
/proc/self/cwd/sw/device/lib/runtime/irq.c:39
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f0001748:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:41
}
f000174c:           8082                        ret

f000174e <irq_software_ctrl>:
irq_software_ctrl():
/proc/self/cwd/sw/device/lib/runtime/irq.c:45

void irq_software_ctrl(bool en) {
  const uint32_t mask = 1 << IRQ_SW_ENABLE_OFFSET;
  if (en) {
f000174e:       /-- c509                        beqz    a0,f0001758 <irq_software_ctrl+0xa>
f0001750:       |   4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:46
    CSR_SET_BITS(CSR_REG_MIE, mask);
f0001752:       |   30452073            csrs    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
  } else {
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
  }
}
f0001756:       |   8082                        ret
f0001758:       \-> 4521                        li      a0,8
/proc/self/cwd/sw/device/lib/runtime/irq.c:48
    CSR_CLEAR_BITS(CSR_REG_MIE, mask);
f000175a:           30453073            csrc    mie,a0
/proc/self/cwd/sw/device/lib/runtime/irq.c:50
}
f000175e:           8082                        ret

f0001760 <ottf_generic_fault_print>:
ottf_generic_fault_print():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:56
    "Reserved",
    "Reserved",
    "Reserved",
};

void ottf_generic_fault_print(const char *reason, uint32_t mcause) {
f0001760:           7179                        addi    sp,sp,-48
f0001762:           d606                        sw      ra,44(sp)
f0001764:           d422                        sw      s0,40(sp)
f0001766:           d226                        sw      s1,36(sp)
f0001768:           d04a                        sw      s2,32(sp)
f000176a:           ce4e                        sw      s3,28(sp)
f000176c:           892e                        mv      s2,a1
f000176e:           89aa                        mv      s3,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:57
  uint32_t mepc = ibex_mepc_read();
f0001770:           264d                        jal     f0001b12 <ibex_mepc_read>
f0001772:           84aa                        mv      s1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f0001774:           2e61                        jal     f0001b0c <ibex_mtval_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f0001776:           00003597            auipc   a1,0x3
f000177a:           b1658593            addi    a1,a1,-1258 # f000428c <kDeviceLogBypassUartAddress>
f000177e:           418c                        lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:58
  uint32_t mtval = ibex_mtval_read();
f0001780:           842a                        mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:59
  LOG_ERROR("FAULT: %s. MCAUSE=%08x MEPC=%08x MTVAL=%08x", reason, mcause, mepc,
f0001782:       /-- c18d                        beqz    a1,f00017a4 <ottf_generic_fault_print+0x44>
f0001784:       |   1000f517            auipc   a0,0x1000f
f0001788:       |   aac50513            addi    a0,a0,-1364 # 10230 <_non_volatile_scratch_end+0xffd0230>
f000178c:       |   4591                        li      a1,4
f000178e:       |   864e                        mv      a2,s3
f0001790:       |   86ca                        mv      a3,s2
f0001792:       |   8726                        mv      a4,s1
f0001794:       |   87a2                        mv      a5,s0
f0001796:       |   49f2                        lw      s3,28(sp)
f0001798:       |   5902                        lw      s2,32(sp)
f000179a:       |   5492                        lw      s1,36(sp)
f000179c:       |   5422                        lw      s0,40(sp)
f000179e:       |   50b2                        lw      ra,44(sp)
f00017a0:       |   6145                        addi    sp,sp,48
f00017a2:       |   a921                        j       f0001bba <base_log_internal_dv>
f00017a4:       \-> 00002597            auipc   a1,0x2
f00017a8:           36058593            addi    a1,a1,864 # f0003b04 <kAesModesCipherTextEcb256+0x76c>
f00017ac:           0028                        addi    a0,sp,8
f00017ae:           4651                        li      a2,20
f00017b0:           4e1000ef            jal     ra,f0002490 <memcpy>
f00017b4:           0028                        addi    a0,sp,8
f00017b6:           85ce                        mv      a1,s3
f00017b8:           864a                        mv      a2,s2
f00017ba:           86a6                        mv      a3,s1
f00017bc:           8722                        mv      a4,s0
f00017be:           2ea9                        jal     f0001b18 <base_log_internal_core>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:61
            mtval);
}
f00017c0:           49f2                        lw      s3,28(sp)
f00017c2:           5902                        lw      s2,32(sp)
f00017c4:           5492                        lw      s1,36(sp)
f00017c6:           5422                        lw      s0,40(sp)
f00017c8:           50b2                        lw      ra,44(sp)
f00017ca:           6145                        addi    sp,sp,48
f00017cc:           8082                        ret

f00017ce <ottf_exception_handler>:
ottf_exception_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:79
 */
OT_WEAK
void *pxCurrentTCB = NULL;

OT_WEAK
void ottf_exception_handler(void) {
f00017ce:           1141                        addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:80
  uint32_t mcause = ibex_mcause_read();
f00017d0:           c606                        sw      ra,12(sp)
f00017d2:           2e15                        jal     f0001b06 <ibex_mcause_read>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:82

  switch ((ibex_exc_t)(mcause & kIbexExcMax)) {
f00017d4:           897d                        andi    a0,a0,31
f00017d6:           45ad                        li      a1,11
f00017d8:       /-- 02a5ef63            bltu    a1,a0,f0001816 <ottf_exception_handler+0x48>
f00017dc:       |   050a                        slli    a0,a0,0x2
f00017de:       |   00002597            auipc   a1,0x2
f00017e2:       |   0ba58593            addi    a1,a1,186 # f0003898 <kAesModesCipherTextEcb256+0x500>
f00017e6:       |   952e                        add     a0,a0,a1
f00017e8:       |   4108                        lw      a0,0(a0)
f00017ea:       |   8502                        jr      a0
f00017ec:       |   40b2                        lw      ra,12(sp)
f00017ee:       |   0141                        addi    sp,sp,16
f00017f0:       |   a025                        j       f0001818 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:84
    case kIbexExcInstrMisaligned:
      ottf_instr_misaligned_fault_handler();
f00017f2:       |   40b2                        lw      ra,12(sp)
f00017f4:       |   0141                        addi    sp,sp,16
f00017f6:       |   a00d                        j       f0001818 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:87
      break;
    case kIbexExcInstrAccessFault:
      ottf_instr_access_fault_handler();
f00017f8:       |   40b2                        lw      ra,12(sp)
f00017fa:       |   0141                        addi    sp,sp,16
f00017fc:       |   a831                        j       f0001818 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:90
      break;
    case kIbexExcIllegalInstrFault:
      ottf_illegal_instr_fault_handler();
f00017fe:       |   40b2                        lw      ra,12(sp)
f0001800:       |   0141                        addi    sp,sp,16
f0001802:       |   a819                        j       f0001818 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:93
      break;
    case kIbexExcBreakpoint:
      ottf_breakpoint_handler();
f0001804:       |   40b2                        lw      ra,12(sp)
f0001806:       |   0141                        addi    sp,sp,16
f0001808:       |   a801                        j       f0001818 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:105
      break;
    case kIbexExcMachineECall:
      ottf_machine_ecall_handler();
      break;
    case kIbexExcUserECall:
      ottf_user_ecall_handler();
f000180a:       |   40b2                        lw      ra,12(sp)
f000180c:       |   0141                        addi    sp,sp,16
f000180e:       |   a029                        j       f0001818 <ottf_breakpoint_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:102
      ottf_machine_ecall_handler();
f0001810:       |   40b2                        lw      ra,12(sp)
f0001812:       |   0141                        addi    sp,sp,16
f0001814:       |   b669                        j       f000139e <ottf_machine_ecall_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:108
      break;
    default:
      generic_fault_handler();
f0001816:       \-> 2009                        jal     f0001818 <ottf_breakpoint_handler>

f0001818 <ottf_breakpoint_handler>:
generic_fault_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:63
static void generic_fault_handler(void) {
f0001818:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:64
  uint32_t mcause = ibex_mcause_read();
f000181a:       c606                    sw      ra,12(sp)
f000181c:       24ed                    jal     f0001b06 <ibex_mcause_read>
f000181e:       85aa                    mv      a1,a0
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:65
  ottf_generic_fault_print(exception_reason[mcause & kIbexExcMax], mcause);
f0001820:       897d                    andi    a0,a0,31
f0001822:       050a                    slli    a0,a0,0x2
f0001824:       00002617                auipc   a2,0x2
f0001828:       31c60613                addi    a2,a2,796 # f0003b40 <exception_reason>
f000182c:       9532                    add     a0,a0,a2
f000182e:       4108                    lw      a0,0(a0)
f0001830:       3f05                    jal     f0001760 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:66
  abort();
f0001832:       24f9                    jal     f0001b00 <abort>

f0001834 <ottf_software_isr>:
ottf_software_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:141
OT_WEAK
OT_ALIAS("generic_fault_handler")
void ottf_user_ecall_handler(void);

OT_WEAK
void ottf_software_isr(void) {
f0001834:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:142
  ottf_generic_fault_print("Software IRQ", ibex_mcause_read());
f0001836:       c606                    sw      ra,12(sp)
f0001838:       24f9                    jal     f0001b06 <ibex_mcause_read>
f000183a:       85aa                    mv      a1,a0
f000183c:       00002517                auipc   a0,0x2
f0001840:       0e950513                addi    a0,a0,233 # f0003925 <kAesModesCipherTextEcb256+0x58d>
f0001844:       3f31                    jal     f0001760 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:143
  abort();
f0001846:       2c6d                    jal     f0001b00 <abort>

f0001848 <ottf_timer_isr>:
ottf_timer_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:147
}

OT_WEAK
void ottf_timer_isr(void) {
f0001848:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:148
  ottf_generic_fault_print("Timer IRQ", ibex_mcause_read());
f000184a:       c606                    sw      ra,12(sp)
f000184c:       2c6d                    jal     f0001b06 <ibex_mcause_read>
f000184e:       85aa                    mv      a1,a0
f0001850:       00002517                auipc   a0,0x2
f0001854:       0e250513                addi    a0,a0,226 # f0003932 <kAesModesCipherTextEcb256+0x59a>
f0001858:       3721                    jal     f0001760 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:149
  abort();
f000185a:       245d                    jal     f0001b00 <abort>

f000185c <ottf_flow_control_isr>:
ottf_flow_control_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:153
}

OT_WEAK
bool ottf_flow_control_isr(void) { return false; }
f000185c:       4501                    li      a0,0
f000185e:       8082                    ret

f0001860 <ottf_external_isr>:
ottf_external_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:156

OT_WEAK
void ottf_external_isr(void) {
f0001860:                    7179                       addi    sp,sp,-48
f0001862:                    d606                       sw      ra,44(sp)
f0001864:                    d422                       sw      s0,40(sp)
f0001866:                    d226                       sw      s1,36(sp)
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:159
  const uint32_t kPlicTarget = kTopEarlgreyPlicTargetIbex0;
  dif_rv_plic_irq_id_t plic_irq_id;
  CHECK_DIF_OK(dif_rv_plic_irq_claim(&ottf_plic, kPlicTarget, &plic_irq_id));
f0001868:                    f0000517           auipc   a0,0xf0000
f000186c:                    7e850513           addi    a0,a0,2024 # e0002050 <ottf_plic>
f0001870:                    1010                       addi    a2,sp,32
f0001872:                    4581                       li      a1,0
f0001874:                    28fd                       jal     f0001972 <dif_rv_plic_irq_claim>
f0001876:                    00003497           auipc   s1,0x3
f000187a:                    a1648493           addi    s1,s1,-1514 # f000428c <kDeviceLogBypassUartAddress>
f000187e:          /-------- c91d                       beqz    a0,f00018b4 <ottf_external_isr+0x54>
f0001880:          |         842a                       mv      s0,a0
f0001882:          |         4088                       lw      a0,0(s1)
f0001884:          |     /-- c909                       beqz    a0,f0001896 <ottf_external_isr+0x36>
f0001886:          |     |   1000f517           auipc   a0,0x1000f
f000188a:          |     |   9be50513           addi    a0,a0,-1602 # 10244 <_non_volatile_scratch_end+0xffd0244>
f000188e:          |     |   4585                       li      a1,1
f0001890:          |     |   8622                       mv      a2,s0
f0001892:          |     |   2625                       jal     f0001bba <base_log_internal_dv>
f0001894:          |  /--|-- a821                       j       f00018ac <ottf_external_isr+0x4c>
f0001896:          |  |  \-> 00002597           auipc   a1,0x2
f000189a:          |  |      28258593           addi    a1,a1,642 # f0003b18 <kAesModesCipherTextEcb256+0x780>
f000189e:          |  |      0028                       addi    a0,sp,8
f00018a0:          |  |      4651                       li      a2,20
f00018a2:          |  |      3ef000ef           jal     ra,f0002490 <memcpy>
f00018a6:          |  |      0028                       addi    a0,sp,8
f00018a8:          |  |      85a2                       mv      a1,s0
f00018aa:          |  |      24bd                       jal     f0001b18 <base_log_internal_core>
f00018ac:          |  \----> 6531                       lui     a0,0xc
f00018ae:          |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00018b2:          |         2245                       jal     f0001a52 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:162

  top_earlgrey_plic_peripheral_t peripheral = (top_earlgrey_plic_peripheral_t)
      top_earlgrey_plic_interrupt_for_peripheral[plic_irq_id];
f00018b4:          \-------> 5502                       lw      a0,32(sp)
f00018b6:                    050a                       slli    a0,a0,0x2
f00018b8:                    00002597           auipc   a1,0x2
f00018bc:                    3a858593           addi    a1,a1,936 # f0003c60 <top_earlgrey_plic_interrupt_for_peripheral>
f00018c0:                    952e                       add     a0,a0,a1
f00018c2:                    4108                       lw      a0,0(a0)
f00018c4:                    4585                       li      a1,1
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164

  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f00018c6:       /----------- 04b51b63           bne     a0,a1,f000191c <ottf_external_isr+0xbc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:165
      ottf_flow_control_isr()) {
f00018ca:       |            3f49                       jal     f000185c <ottf_flow_control_isr>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:164
  if (peripheral == kTopEarlgreyPlicPeripheralUart0 &&
f00018cc:       +----------- c921                       beqz    a0,f000191c <ottf_external_isr+0xbc>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:167
    // Complete the IRQ at PLIC.
    CHECK_DIF_OK(
f00018ce:       |            5602                       lw      a2,32(sp)
f00018d0:       |            f0000517           auipc   a0,0xf0000
f00018d4:       |            78050513           addi    a0,a0,1920 # e0002050 <ottf_plic>
f00018d8:       |            4581                       li      a1,0
f00018da:       |            20c1                       jal     f000199a <dif_rv_plic_irq_complete>
f00018dc:       |  /-------- c91d                       beqz    a0,f0001912 <ottf_external_isr+0xb2>
f00018de:       |  |         842a                       mv      s0,a0
f00018e0:       |  |         4088                       lw      a0,0(s1)
f00018e2:       |  |     /-- c909                       beqz    a0,f00018f4 <ottf_external_isr+0x94>
f00018e4:       |  |     |   1000f517           auipc   a0,0x1000f
f00018e8:       |  |     |   97450513           addi    a0,a0,-1676 # 10258 <_non_volatile_scratch_end+0xffd0258>
f00018ec:       |  |     |   4585                       li      a1,1
f00018ee:       |  |     |   8622                       mv      a2,s0
f00018f0:       |  |     |   24e9                       jal     f0001bba <base_log_internal_dv>
f00018f2:       |  |  /--|-- a821                       j       f000190a <ottf_external_isr+0xaa>
f00018f4:       |  |  |  \-> 00002597           auipc   a1,0x2
f00018f8:       |  |  |      23858593           addi    a1,a1,568 # f0003b2c <kAesModesCipherTextEcb256+0x794>
f00018fc:       |  |  |      0028                       addi    a0,sp,8
f00018fe:       |  |  |      4651                       li      a2,20
f0001900:       |  |  |      391000ef           jal     ra,f0002490 <memcpy>
f0001904:       |  |  |      0028                       addi    a0,sp,8
f0001906:       |  |  |      85a2                       mv      a1,s0
f0001908:       |  |  |      2c01                       jal     f0001b18 <base_log_internal_core>
f000190a:       |  |  \----> 6531                       lui     a0,0xc
f000190c:       |  |         aad50513           addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001910:       |  |         2289                       jal     f0001a52 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:174
    return;
  }

  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
  abort();
}
f0001912:       |  \-------> 5492                       lw      s1,36(sp)
f0001914:       |            5422                       lw      s0,40(sp)
f0001916:       |            50b2                       lw      ra,44(sp)
f0001918:       |            6145                       addi    sp,sp,48
f000191a:       |            8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:172
  ottf_generic_fault_print("External IRQ", ibex_mcause_read());
f000191c:       \----------> 22ed                       jal     f0001b06 <ibex_mcause_read>
f000191e:                    85aa                       mv      a1,a0
f0001920:                    00002517           auipc   a0,0x2
f0001924:                    0c250513           addi    a0,a0,194 # f00039e2 <kAesModesCipherTextEcb256+0x64a>
f0001928:                    3d25                       jal     f0001760 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:173
  abort();
f000192a:                    2ad9                       jal     f0001b00 <abort>

f000192c <ottf_external_nmi_handler>:
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:176

static void generic_internal_irq_handler(void) {
f000192c:       1141                    addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f000192e:       c606                    sw      ra,12(sp)
f0001930:       2ad9                    jal     f0001b06 <ibex_mcause_read>
f0001932:       85aa                    mv      a1,a0
f0001934:       00002517                auipc   a0,0x2
f0001938:       1c250513                addi    a0,a0,450 # f0003af6 <kAesModesCipherTextEcb256+0x75e>
f000193c:       3515                    jal     f0001760 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f000193e:       22c9                    jal     f0001b00 <abort>

f0001940 <ottf_internal_isr>:
ottf_internal_isr():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:190
OT_WEAK
OT_ALIAS("generic_internal_irq_handler")
void ottf_load_integrity_error_handler(void);

OT_WEAK
void ottf_internal_isr(void) {
f0001940:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:191
  uint32_t mcause = ibex_mcause_read();
f0001942:              c606                     sw      ra,12(sp)
f0001944:              22c9                     jal     f0001b06 <ibex_mcause_read>
f0001946:              800005b7                 lui     a1,0x80000
f000194a:              05fd                     addi    a1,a1,31
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:192
  switch ((ibex_internal_irq_t)(mcause)) {
f000194c:          /-- 00b50863                 beq     a0,a1,f000195c <ottf_internal_isr+0x1c>
f0001950:          |   5581                     li      a1,-32
f0001952:       /--|-- 00b51863                 bne     a0,a1,f0001962 <ottf_internal_isr+0x22>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:194
    case kIbexInternalIrqLoadInteg:
      ottf_load_integrity_error_handler();
f0001956:       |  |   40b2                     lw      ra,12(sp)
f0001958:       |  |   0141                     addi    sp,sp,16
f000195a:       |  |   bfc9                     j       f000192c <ottf_external_nmi_handler>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:197
      break;
    case kIbexInternalIrqNmi:
      ottf_external_nmi_handler();
f000195c:       |  \-> 40b2                     lw      ra,12(sp)
f000195e:       |      0141                     addi    sp,sp,16
f0001960:       |      b7f1                     j       f000192c <ottf_external_nmi_handler>
generic_internal_irq_handler():
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:177
  ottf_generic_fault_print("Internal IRQ", ibex_mcause_read());
f0001962:       \----> 2255                     jal     f0001b06 <ibex_mcause_read>
f0001964:              85aa                     mv      a1,a0
f0001966:              00002517                 auipc   a0,0x2
f000196a:              19050513                 addi    a0,a0,400 # f0003af6 <kAesModesCipherTextEcb256+0x75e>
f000196e:              3bcd                     jal     f0001760 <ottf_generic_fault_print>
/proc/self/cwd/sw/device/lib/testing/test_framework/ottf_isrs.c:178
  abort();
f0001970:              2a41                     jal     f0001b00 <abort>

f0001972 <dif_rv_plic_irq_claim>:
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:245
}

dif_result_t dif_rv_plic_irq_claim(const dif_rv_plic_t *plic,
                                   dif_rv_plic_target_t target,
                                   dif_rv_plic_irq_id_t *claim_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
f0001972:           00153693            seqz    a3,a0
f0001976:           00b035b3            snez    a1,a1
f000197a:           8dd5                        or      a1,a1,a3
f000197c:           00163693            seqz    a3,a2
f0001980:           8ecd                        or      a3,a3,a1
f0001982:           458d                        li      a1,3
f0001984:       /-- ea89                        bnez    a3,f0001996 <dif_rv_plic_irq_claim+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
      claim_data == NULL) {
    return kDifBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->base_addr, claim_complete_reg);
f0001986:       |   4108                        lw      a0,0(a0)
f0001988:       |   002005b7            lui     a1,0x200
f000198c:       |   0591                        addi    a1,a1,4
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f000198e:       |   952e                        add     a0,a0,a1
f0001990:       |   4108                        lw      a0,0(a0)
f0001992:       |   4581                        li      a1,0
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
f0001994:       |   c208                        sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:254

  return kDifOk;
}
f0001996:       \-> 852e                        mv      a0,a1
f0001998:           8082                        ret

f000199a <dif_rv_plic_irq_complete>:
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:259

dif_result_t dif_rv_plic_irq_complete(const dif_rv_plic_t *plic,
                                      dif_rv_plic_target_t target,
                                      dif_rv_plic_irq_id_t complete_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
f000199a:           00153693            seqz    a3,a0
f000199e:           00b035b3            snez    a1,a1
f00019a2:           8ecd                        or      a3,a3,a1
f00019a4:           458d                        li      a1,3
f00019a6:       /-- ea81                        bnez    a3,f00019b6 <dif_rv_plic_irq_complete+0x1c>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:266
  }

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->base_addr, claim_complete_reg, complete_data);
f00019a8:       |   4108                        lw      a0,0(a0)
f00019aa:       |   4581                        li      a1,0
f00019ac:       |   002006b7            lui     a3,0x200
f00019b0:       |   0691                        addi    a3,a3,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00019b2:       |   9536                        add     a0,a0,a3
f00019b4:       |   c110                        sw      a2,0(a0)
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:269

  return kDifOk;
}
f00019b6:       \-> 852e                        mv      a0,a1
f00019b8:           8082                        ret

f00019ba <rand_testutils_init>:
rand_testutils_init():
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:31
/**
 * The default timeout in usecs for fetching data from the entropy source.
 */
static const uint32_t kEntropyFetchTimeoutMicros = 100000;

rand_testutils_rng_t rand_testutils_init(dif_rv_core_ibex_t *rv_core_ibex) {
f00019ba:                 1101                  addi    sp,sp,-32
f00019bc:                 ce06                  sw      ra,28(sp)
f00019be:                 cc22                  sw      s0,24(sp)
f00019c0:                 ca26                  sw      s1,20(sp)
f00019c2:                 84ae                  mv      s1,a1
f00019c4:                 842a                  mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:32
  CHECK(rv_core_ibex != NULL);
f00019c6:       /-------- ed85                  bnez    a1,f00019fe <rand_testutils_init+0x44>
f00019c8:       |         00003517              auipc   a0,0x3
f00019cc:       |         8c450513              addi    a0,a0,-1852 # f000428c <kDeviceLogBypassUartAddress>
f00019d0:       |         4108                  lw      a0,0(a0)
f00019d2:       |     /-- c901                  beqz    a0,f00019e2 <rand_testutils_init+0x28>
f00019d4:       |     |   1000f517              auipc   a0,0x1000f
f00019d8:       |     |   89850513              addi    a0,a0,-1896 # 1026c <_non_volatile_scratch_end+0xffd026c>
f00019dc:       |     |   4581                  li      a1,0
f00019de:       |     |   2af1                  jal     f0001bba <base_log_internal_dv>
f00019e0:       |  /--|-- a819                  j       f00019f6 <rand_testutils_init+0x3c>
f00019e2:       |  |  \-> 00002597              auipc   a1,0x2
f00019e6:       |  |      26a58593              addi    a1,a1,618 # f0003c4c <exception_reason+0x10c>
f00019ea:       |  |      850a                  mv      a0,sp
f00019ec:       |  |      4651                  li      a2,20
f00019ee:       |  |      2a3000ef              jal     ra,f0002490 <memcpy>
f00019f2:       |  |      850a                  mv      a0,sp
f00019f4:       |  |      2215                  jal     f0001b18 <base_log_internal_core>
f00019f6:       |  \----> 6531                  lui     a0,0xc
f00019f8:       |         aad50513              addi    a0,a0,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f00019fc:       |         2899                  jal     f0001a52 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  // For the simulation platforms (DV and Verilator), the LFSR reseed frequency
  // is arbitrarily set to 255. The test may choose to update this value if
  // needed.
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f00019fe:       \-------> c004                  sw      s1,0(s0)
f0001a00:                 6561                  lui     a0,0x18
f0001a02:                 6a050513              addi    a0,a0,1696 # 186a0 <test_status_set.kLogFields.2+0x83e4>
f0001a06:                 c048                  sw      a0,4(s0)
f0001a08:                 deadc537              lui     a0,0xdeadc
f0001a0c:                 eef50513              addi    a0,a0,-273 # deadbeef <_non_volatile_scratch_end+0xeea9beef>
f0001a10:                 c408                  sw      a0,8(s0)
f0001a12:                 80000537              lui     a0,0x80000
f0001a16:                 05750513              addi    a0,a0,87 # 80000057 <_non_volatile_scratch_end+0x8ffc0057>
f0001a1a:                 c448                  sw      a0,12(s0)
f0001a1c:                 10000513              li      a0,256
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
      .polynomial_coefficients = kLfsrPolynomialCoefficients,
      .reseed_frequency = 256,
      .op_counter = UINT32_MAX};
  // For non-runtime-sensitive simulations (for example, using FPGA or the
  // debug board), always fetch random data from the hardware.
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0001a20:                 00003597              auipc   a1,0x3
f0001a24:                 84c58593              addi    a1,a1,-1972 # f000426c <kDeviceType>
f0001a28:                 418c                  lw      a1,0(a1)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:36
  rand_testutils_rng_t ctx = (rand_testutils_rng_t){
f0001a2a:                 c808                  sw      a0,16(s0)
f0001a2c:                 557d                  li      a0,-1
f0001a2e:                 4609                  li      a2,2
f0001a30:                 c848                  sw      a0,20(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:45
  if (kDeviceType != kDeviceSimDV && kDeviceType != kDeviceSimVerilator) {
f0001a32:             /-- 00c5e463              bltu    a1,a2,f0001a3a <rand_testutils_init+0x80>
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:46
    ctx.reseed_frequency = 0;
f0001a36:             |   00042823              sw      zero,16(s0)
/proc/self/cwd/sw/device/lib/testing/rand_testutils.c:48
  }
  return ctx;
f0001a3a:             \-> 44d2                  lw      s1,20(sp)
f0001a3c:                 4462                  lw      s0,24(sp)
f0001a3e:                 40f2                  lw      ra,28(sp)
f0001a40:                 6105                  addi    sp,sp,32
f0001a42:                 8082                  ret

f0001a44 <dif_rv_core_ibex_init>:
dif_rv_core_ibex_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:19
#include "rv_core_ibex_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_core_ibex_init(mmio_region_t base_addr,
                                   dif_rv_core_ibex_t *rv_core_ibex) {
  if (rv_core_ibex == NULL) {
f0001a44:       /----- c581                     beqz    a1,f0001a4c <dif_rv_core_ibex_init+0x8>
f0001a46:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:23
    return kDifBadArg;
  }

  rv_core_ibex->base_addr = base_addr;
f0001a48:       |      c188                     sw      a0,0(a1)
f0001a4a:       |  /-- a011                     j       f0001a4e <dif_rv_core_ibex_init+0xa>
f0001a4c:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_core_ibex_autogen.c:26

  return kDifOk;
}
f0001a4e:          \-> 8532                     mv      a0,a2
f0001a50:              8082                     ret

f0001a52 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
f0001a52:                    1101                       addi    sp,sp,-32
f0001a54:                    ce06                       sw      ra,28(sp)
f0001a56:                    65b1                       lui     a1,0xc
f0001a58:                    aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
f0001a5c:             /----- 02b50063           beq     a0,a1,f0001a7c <test_status_set+0x2a>
f0001a60:             |      65a5                       lui     a1,0x9
f0001a62:             |      05b5                       addi    a1,a1,13
f0001a64:          /--|----- 02b50d63           beq     a0,a1,f0001a9e <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001a68:          |  |      00003597           auipc   a1,0x3
f0001a6c:          |  |      82058593           addi    a1,a1,-2016 # f0004288 <kDeviceTestStatusAddress>
f0001a70:          |  |      418c                       lw      a1,0(a1)
f0001a72:          |  |  /-- c191                       beqz    a1,f0001a76 <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001a74:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
f0001a76:          |  |  \-> 40f2                       lw      ra,28(sp)
f0001a78:          |  |      6105                       addi    sp,sp,32
f0001a7a:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0001a7c:          |  \----> 00003517           auipc   a0,0x3
f0001a80:          |         81050513           addi    a0,a0,-2032 # f000428c <kDeviceLogBypassUartAddress>
f0001a84:          |         4108                       lw      a0,0(a0)
f0001a86:          |  /----- ed0d                       bnez    a0,f0001ac0 <test_status_set+0x6e>
f0001a88:          |  |      00002597           auipc   a1,0x2
f0001a8c:          |  |      51058593           addi    a1,a1,1296 # f0003f98 <top_earlgrey_plic_interrupt_for_peripheral+0x338>
f0001a90:          |  |      0028                       addi    a0,sp,8
f0001a92:          |  |      4651                       li      a2,20
f0001a94:          |  |      1fd000ef           jal     ra,f0002490 <memcpy>
f0001a98:          |  |      0028                       addi    a0,sp,8
f0001a9a:          |  |      28bd                       jal     f0001b18 <base_log_internal_core>
f0001a9c:          |  |  /-- a805                       j       f0001acc <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0001a9e:          \--|--|-> 00002517           auipc   a0,0x2
f0001aa2:             |  |   7ee50513           addi    a0,a0,2030 # f000428c <kDeviceLogBypassUartAddress>
f0001aa6:             |  |   4108                       lw      a0,0(a0)
f0001aa8:       /-----|--|-- ed05                       bnez    a0,f0001ae0 <test_status_set+0x8e>
f0001aaa:       |     |  |   00002597           auipc   a1,0x2
f0001aae:       |     |  |   4da58593           addi    a1,a1,1242 # f0003f84 <top_earlgrey_plic_interrupt_for_peripheral+0x324>
f0001ab2:       |     |  |   0028                       addi    a0,sp,8
f0001ab4:       |     |  |   4651                       li      a2,20
f0001ab6:       |     |  |   1db000ef           jal     ra,f0002490 <memcpy>
f0001aba:       |     |  |   0028                       addi    a0,sp,8
f0001abc:       |     |  |   28b1                       jal     f0001b18 <base_log_internal_core>
f0001abe:       |  /--|--|-- a03d                       j       f0001aec <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
f0001ac0:       |  |  \--|-> 1000e517           auipc   a0,0x1000e
f0001ac4:       |  |     |   7fc50513           addi    a0,a0,2044 # 102bc <_non_volatile_scratch_end+0xffd02bc>
f0001ac8:       |  |     |   4581                       li      a1,0
f0001aca:       |  |     |   28c5                       jal     f0001bba <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001acc:       |  |     \-> 00002517           auipc   a0,0x2
f0001ad0:       |  |         7bc50513           addi    a0,a0,1980 # f0004288 <kDeviceTestStatusAddress>
f0001ad4:       |  |         4108                       lw      a0,0(a0)
f0001ad6:       |  |  /----- c505                       beqz    a0,f0001afe <test_status_set+0xac>
f0001ad8:       |  |  |      65b1                       lui     a1,0xc
f0001ada:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_non_volatile_scratch_size+0x6aad>
f0001ade:       |  |  |  /-- a839                       j       f0001afc <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
f0001ae0:       \--|--|--|-> 1000e517           auipc   a0,0x1000e
f0001ae4:          |  |  |   7c850513           addi    a0,a0,1992 # 102a8 <_non_volatile_scratch_end+0xffd02a8>
f0001ae8:          |  |  |   4581                       li      a1,0
f0001aea:          |  |  |   28c1                       jal     f0001bba <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
f0001aec:          \--|--|-> 00002517           auipc   a0,0x2
f0001af0:             |  |   79c50513           addi    a0,a0,1948 # f0004288 <kDeviceTestStatusAddress>
f0001af4:             |  |   4108                       lw      a0,0(a0)
f0001af6:             +--|-- c501                       beqz    a0,f0001afe <test_status_set+0xac>
f0001af8:             |  |   65a5                       lui     a1,0x9
f0001afa:             |  |   05b5                       addi    a1,a1,13
f0001afc:             |  \-> c10c                       sw      a1,0(a0)
f0001afe:             \----> 2009                       jal     f0001b00 <abort>

f0001b00 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
f0001b00:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
f0001b04:       \-- bff5                        j       f0001b00 <abort>

f0001b06 <ibex_mcause_read>:
ibex_mcause_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:11

#include "sw/device/lib/base/csr.h"

uint32_t ibex_mcause_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MCAUSE, &mtval);
f0001b06:       34202573                csrr    a0,mcause
/proc/self/cwd/sw/device/lib/runtime/ibex.c:12
  return mtval;
f0001b0a:       8082                    ret

f0001b0c <ibex_mtval_read>:
ibex_mtval_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:17
}

uint32_t ibex_mtval_read(void) {
  uint32_t mtval;
  CSR_READ(CSR_REG_MTVAL, &mtval);
f0001b0c:       34302573                csrr    a0,mtval
/proc/self/cwd/sw/device/lib/runtime/ibex.c:18
  return mtval;
f0001b10:       8082                    ret

f0001b12 <ibex_mepc_read>:
ibex_mepc_read():
/proc/self/cwd/sw/device/lib/runtime/ibex.c:23
}

uint32_t ibex_mepc_read(void) {
  uint32_t mepc;
  CSR_READ(CSR_REG_MEPC, &mepc);
f0001b12:       34102573                csrr    a0,mepc
/proc/self/cwd/sw/device/lib/runtime/ibex.c:24
  return mepc;
f0001b16:       8082                    ret

f0001b18 <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
f0001b18:              7179                     addi    sp,sp,-48
f0001b1a:              c606                     sw      ra,12(sp)
f0001b1c:              c422                     sw      s0,8(sp)
f0001b1e:              c226                     sw      s1,4(sp)
f0001b20:              842a                     mv      s0,a0
f0001b22:              d646                     sw      a7,44(sp)
f0001b24:              d442                     sw      a6,40(sp)
f0001b26:              d23e                     sw      a5,36(sp)
f0001b28:              d03a                     sw      a4,32(sp)
f0001b2a:              ce36                     sw      a3,28(sp)
f0001b2c:              cc32                     sw      a2,24(sp)
f0001b2e:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
f0001b30:              4148                     lw      a0,4(a0)
f0001b32:              800005b7                 lui     a1,0x80000
f0001b36:              fff58613                 addi    a2,a1,-1 # 7fffffff <_non_volatile_scratch_end+0x8ffbffff>
f0001b3a:              4581                     li      a1,0
f0001b3c:              23f000ef                 jal     ra,f000257a <memchr>
f0001b40:              4054                     lw      a3,4(s0)
f0001b42:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
f0001b46:              02f00593                 li      a1,47
f0001b4a:              8536                     mv      a0,a3
f0001b4c:              2dd000ef                 jal     ra,f0002628 <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
f0001b50:       /----- c501                     beqz    a0,f0001b58 <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
f0001b52:       |      00150693                 addi    a3,a0,1
f0001b56:       |  /-- a011                     j       f0001b5a <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
f0001b58:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f0001b5a:          \-> 4008                     lw      a0,0(s0)
f0001b5c:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
f0001b5e:       /----- 00a5ea63                 bltu    a1,a0,f0001b72 <base_log_internal_core+0x5a>
f0001b62:       |      050a                     slli    a0,a0,0x2
f0001b64:       |      00002597                 auipc   a1,0x2
f0001b68:       |      46458593                 addi    a1,a1,1124 # f0003fc8 <top_earlgrey_plic_interrupt_for_peripheral+0x368>
f0001b6c:       |      952e                     add     a0,a0,a1
f0001b6e:       |      410c                     lw      a1,0(a0)
f0001b70:       |  /-- a029                     j       f0001b7a <base_log_internal_core+0x62>
f0001b72:       \--|-> 00002597                 auipc   a1,0x2
f0001b76:          |   45258593                 addi    a1,a1,1106 # f0003fc4 <top_earlgrey_plic_interrupt_for_peripheral+0x364>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
f0001b7a:          \-> f0000497                 auipc   s1,0xf0000
f0001b7e:              4da48493                 addi    s1,s1,1242 # e0002054 <base_log_internal_core.global_log_counter>
f0001b82:              0004d603                 lhu     a2,0(s1)
f0001b86:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
f0001b88:              00002517                 auipc   a0,0x2
f0001b8c:              42450513                 addi    a0,a0,1060 # f0003fac <top_earlgrey_plic_interrupt_for_peripheral+0x34c>
f0001b90:              2865                     jal     f0001c48 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
f0001b92:              00049503                 lh      a0,0(s1)
f0001b96:              0505                     addi    a0,a0,1
f0001b98:              00a49023                 sh      a0,0(s1)
f0001b9c:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
f0001b9e:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
f0001ba0:              4808                     lw      a0,16(s0)
f0001ba2:              084c                     addi    a1,sp,20
f0001ba4:              28d9                     jal     f0001c7a <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
f0001ba6:              00002517                 auipc   a0,0x2
f0001baa:              41550513                 addi    a0,a0,1045 # f0003fbb <top_earlgrey_plic_interrupt_for_peripheral+0x35b>
f0001bae:              2869                     jal     f0001c48 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
f0001bb0:              4492                     lw      s1,4(sp)
f0001bb2:              4422                     lw      s0,8(sp)
f0001bb4:              40b2                     lw      ra,12(sp)
f0001bb6:              6145                     addi    sp,sp,48
f0001bb8:              8082                     ret

f0001bba <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
f0001bba:              1101                     addi    sp,sp,-32
f0001bbc:              ce46                     sw      a7,28(sp)
f0001bbe:              cc42                     sw      a6,24(sp)
f0001bc0:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
f0001bc2:              00002797                 auipc   a5,0x2
f0001bc6:              6ca78793                 addi    a5,a5,1738 # f000428c <kDeviceLogBypassUartAddress>
f0001bca:              439c                     lw      a5,0(a5)
f0001bcc:              c83a                     sw      a4,16(sp)
f0001bce:              c636                     sw      a3,12(sp)
f0001bd0:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001bd2:              c388                     sw      a0,0(a5)
f0001bd4:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
f0001bd6:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001bd8:       /----- c989                     beqz    a1,f0001bea <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
f0001bda:       |  /-> 4512                     lw      a0,4(sp)
f0001bdc:       |  |   00450613                 addi    a2,a0,4
f0001be0:       |  |   c232                     sw      a2,4(sp)
f0001be2:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
f0001be4:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0001be6:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
f0001be8:       |  \-- f9ed                     bnez    a1,f0001bda <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
f0001bea:       \----> 6105                     addi    sp,sp,32
f0001bec:              8082                     ret

f0001bee <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
f0001bee:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
f0001bf0:       8082                    ret

f0001bf2 <base_uart_stdout>:
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:79
    }
  }
  return len;
}

void base_uart_stdout(const dif_uart_t *uart) {
f0001bf2:       f0000597                auipc   a1,0xf0000
f0001bf6:       46658593                addi    a1,a1,1126 # e0002058 <base_stdout>
base_set_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:66
  base_stdout = out;
f0001bfa:       c188                    sw      a0,0(a1)
f0001bfc:       00000517                auipc   a0,0x0
f0001c00:       00c50513                addi    a0,a0,12 # f0001c08 <base_dev_uart>
f0001c04:       c1c8                    sw      a0,4(a1)
base_uart_stdout():
/proc/self/cwd/sw/device/lib/runtime/print.c:82
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}
f0001c06:       8082                    ret

f0001c08 <base_dev_uart>:
base_dev_uart():
/proc/self/cwd/sw/device/lib/runtime/print.c:69
static size_t base_dev_uart(void *data, const char *buf, size_t len) {
f0001c08:                 1101                  addi    sp,sp,-32
f0001c0a:                 ce06                  sw      ra,28(sp)
f0001c0c:                 cc22                  sw      s0,24(sp)
f0001c0e:                 ca26                  sw      s1,20(sp)
f0001c10:                 c84a                  sw      s2,16(sp)
f0001c12:                 c64e                  sw      s3,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001c14:       /-------- c20d                  beqz    a2,f0001c36 <base_dev_uart+0x2e>
f0001c16:       |         8432                  mv      s0,a2
f0001c18:       |         892e                  mv      s2,a1
f0001c1a:       |         89aa                  mv      s3,a0
f0001c1c:       |         4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:72
    if (dif_uart_byte_send_polled(uart, (uint8_t)buf[i]) != kDifOk) {
f0001c1e:       |  /----> 00990533              add     a0,s2,s1
f0001c22:       |  |      00054583              lbu     a1,0(a0)
f0001c26:       |  |      854e                  mv      a0,s3
f0001c28:       |  |      2f59                  jal     f00023be <dif_uart_byte_send_polled>
f0001c2a:       |  |  /-- e519                  bnez    a0,f0001c38 <base_dev_uart+0x30>
/proc/self/cwd/sw/device/lib/runtime/print.c:71
  for (size_t i = 0; i < len; ++i) {
f0001c2c:       |  |  |   0485                  addi    s1,s1,1
f0001c2e:       |  \--|-- fe9418e3              bne     s0,s1,f0001c1e <base_dev_uart+0x16>
f0001c32:       |     |   84a2                  mv      s1,s0
f0001c34:       |     +-- a011                  j       f0001c38 <base_dev_uart+0x30>
f0001c36:       \-----|-> 4481                  li      s1,0
/proc/self/cwd/sw/device/lib/runtime/print.c:77
}
f0001c38:             \-> 8526                  mv      a0,s1
f0001c3a:                 49b2                  lw      s3,12(sp)
f0001c3c:                 4942                  lw      s2,16(sp)
f0001c3e:                 44d2                  lw      s1,20(sp)
f0001c40:                 4462                  lw      s0,24(sp)
f0001c42:                 40f2                  lw      ra,28(sp)
f0001c44:                 6105                  addi    sp,sp,32
f0001c46:                 8082                  ret

f0001c48 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84

size_t base_printf(const char *format, ...) {
f0001c48:       7179                    addi    sp,sp,-48
f0001c4a:       c606                    sw      ra,12(sp)
f0001c4c:       d646                    sw      a7,44(sp)
f0001c4e:       d442                    sw      a6,40(sp)
f0001c50:       d23e                    sw      a5,36(sp)
f0001c52:       d03a                    sw      a4,32(sp)
f0001c54:       ce36                    sw      a3,28(sp)
f0001c56:       cc32                    sw      a2,24(sp)
f0001c58:       ca2e                    sw      a1,20(sp)
f0001c5a:       f0000597                auipc   a1,0xf0000
f0001c5e:       3fe58593                addi    a1,a1,1022 # e0002058 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
f0001c62:       4190                    lw      a2,0(a1)
f0001c64:       41cc                    lw      a1,4(a1)
f0001c66:       872a                    mv      a4,a0
f0001c68:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
f0001c6a:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f0001c6c:       0854                    addi    a3,sp,20
f0001c6e:       8532                    mv      a0,a2
f0001c70:       863a                    mv      a2,a4
f0001c72:       200d                    jal     f0001c94 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
f0001c74:       40b2                    lw      ra,12(sp)
f0001c76:       6145                    addi    sp,sp,48
f0001c78:       8082                    ret

f0001c7a <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
f0001c7a:       f0000697                auipc   a3,0xf0000
f0001c7e:       3de68693                addi    a3,a3,990 # e0002058 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
f0001c82:       4290                    lw      a2,0(a3)
f0001c84:       42d4                    lw      a3,4(a3)
f0001c86:       872e                    mv      a4,a1
f0001c88:       87aa                    mv      a5,a0
f0001c8a:       8532                    mv      a0,a2
f0001c8c:       85b6                    mv      a1,a3
f0001c8e:       863e                    mv      a2,a5
f0001c90:       86ba                    mv      a3,a4
f0001c92:       a009                    j       f0001c94 <base_vfprintf>

f0001c94 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
f0001c94:                                                                    715d                       addi    sp,sp,-80
f0001c96:                                                                    c686                       sw      ra,76(sp)
f0001c98:                                                                    c4a2                       sw      s0,72(sp)
f0001c9a:                                                                    c2a6                       sw      s1,68(sp)
f0001c9c:                                                                    c0ca                       sw      s2,64(sp)
f0001c9e:                                                                    de4e                       sw      s3,60(sp)
f0001ca0:                                                                    dc52                       sw      s4,56(sp)
f0001ca2:                                                                    da56                       sw      s5,52(sp)
f0001ca4:                                                                    d85a                       sw      s6,48(sp)
f0001ca6:                                                                    d65e                       sw      s7,44(sp)
f0001ca8:                                                                    d462                       sw      s8,40(sp)
f0001caa:                                                                    d266                       sw      s9,36(sp)
f0001cac:                                                                    d06a                       sw      s10,32(sp)
f0001cae:                                                                    ce6e                       sw      s11,28(sp)
f0001cb0:                                                                    8cb2                       mv      s9,a2
f0001cb2:                                                                    892a                       mv      s2,a0
f0001cb4:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
f0001cb6:                                                                /-- c199                       beqz    a1,f0001cbc <base_vfprintf+0x28>
f0001cb8:                                                                |   89ae                       mv      s3,a1
f0001cba:                                                             /--|-- a029                       j       f0001cc4 <base_vfprintf+0x30>
f0001cbc:                                                             |  \-> 00000997           auipc   s3,0x0
f0001cc0:                                                             |      f3298993           addi    s3,s3,-206 # f0001bee <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
f0001cc4:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
f0001cc6:                                                                    000cc503           lbu     a0,0(s9)
f0001cca:       /----------------------------------------------------------- 42050563           beqz    a0,f00020f4 <base_vfprintf+0x460>
f0001cce:       |                                                            4a81                       li      s5,0
f0001cd0:       |                                                            02500c13           li      s8,37
f0001cd4:       |                                                            4d25                       li      s10,9
f0001cd6:       |                                                            4a29                       li      s4,10
f0001cd8:       |                                                            658d                       lui     a1,0x3
f0001cda:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_static_critical_size+0xc5e>
f0001cde:       |                                                            c02e                       sw      a1,0(sp)
f0001ce0:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
f0001ce2:       |        |                                               /-> 0ff57413           andi    s0,a0,255
f0001ce6:       |        |                                            /--|-- 01840963           beq     s0,s8,f0001cf8 <base_vfprintf+0x64>
f0001cea:       |        |                                            +--|-- c419                       beqz    s0,f0001cf8 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
f0001cec:       |        |                                            |  |   009c8533           add     a0,s9,s1
f0001cf0:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
f0001cf4:       |        |                                            |  |   0485                       addi    s1,s1,1
f0001cf6:       |        |                                            |  \-- b7f5                       j       f0001ce2 <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
f0001cf8:       |        |                                            \--/-X c491                       beqz    s1,f0001d04 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
f0001cfa:       |        |                                               |   854a                       mv      a0,s2
f0001cfc:       |        |                                               |   85e6                       mv      a1,s9
f0001cfe:       |        |                                               |   8626                       mv      a2,s1
f0001d00:       |        |                                               |   9982                       jalr    s3
f0001d02:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
f0001d04:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,f00020f6 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
f0001d08:       |  |     |                                                   009c8533           add     a0,s9,s1
f0001d0c:       |  |     |                                                   00154603           lbu     a2,1(a0)
f0001d10:       |  |     |                                                   02100713           li      a4,33
f0001d14:       |  |     |                                            /----- 00e61863           bne     a2,a4,f0001d24 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001d18:       |  |     |                                            |      00254583           lbu     a1,2(a0)
f0001d1c:       |  |     |                                            |      00250693           addi    a3,a0,2
f0001d20:       |  |     |                                            |      4b05                       li      s6,1
f0001d22:       |  |     |                                            |  /-- a029                       j       f0001d2c <base_vfprintf+0x98>
f0001d24:       |  |     |                                            \--|-> 4b01                       li      s6,0
f0001d26:       |  |     |                                               |   00150693           addi    a3,a0,1
f0001d2a:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001d2c:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,f00020e2 <base_vfprintf+0x44e>
f0001d30:       |  |  |  |                                                   4481                       li      s1,0
f0001d32:       |  |  |  |                                                   4b81                       li      s7,0
f0001d34:       |  |  |  |                                                   4501                       li      a0,0
f0001d36:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
f0001d3a:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
f0001d3e:       |  |  |  |                                                   00168c93           addi    s9,a3,1
f0001d42:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
f0001d46:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001d4a:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
f0001d4e:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,f0001d84 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
f0001d52:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
f0001d56:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,f0001d6c <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
f0001d58:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
f0001d5c:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
f0001d5e:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
f0001d62:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
f0001d66:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
f0001d68:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,f0001d42 <base_vfprintf+0xae>
f0001d6a:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       f00020e2 <base_vfprintf+0x44e>
f0001d6c:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
f0001d70:       |  |  |  |                                   |     |  |      03000613           li      a2,48
f0001d74:       |  |  |  |                                   |     |  |      02000513           li      a0,32
f0001d78:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,f0001d58 <base_vfprintf+0xc4>
f0001d7c:       |  |  |  |                                   |     |         03000513           li      a0,48
f0001d80:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
f0001d82:       |  |  |  |                                   |     \-------- b7c5                       j       f0001d62 <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
f0001d84:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,f0001d8c <base_vfprintf+0xf8>
f0001d86:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,f0001d94 <base_vfprintf+0x100>
f0001d8a:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       f0002116 <base_vfprintf+0x482>
f0001d8c:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
f0001d90:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,f0002116 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001d94:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
f0001d98:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,f0001dea <base_vfprintf+0x156>
f0001d9c:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
f0001d9e:       |  |  |  |  |                                         |      00002597           auipc   a1,0x2
f0001da2:       |  |  |  |  |                                         |      23a58593           addi    a1,a1,570 # f0003fd8 <top_earlgrey_plic_interrupt_for_peripheral+0x378>
f0001da6:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
f0001da8:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
f0001daa:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
f0001dac:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,f0002064 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
f0001db0:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
f0001db2:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
f0001db6:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
f0001db8:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
f0001dbc:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,f0001dd4 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
f0001dc0:       |  |  |  |  |  |                                      |  |   00002597           auipc   a1,0x2
f0001dc4:       |  |  |  |  |  |                                      |  |   2af58593           addi    a1,a1,687 # f000406f <top_earlgrey_plic_interrupt_for_peripheral+0x40f>
f0001dc8:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
f0001dca:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
f0001dcc:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
f0001dce:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
f0001dd0:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001dd4:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
f0001dd8:       |  |  |  |  |  |                                      |      00002817           auipc   a6,0x2
f0001ddc:       |  |  |  |  |  |                                      |      2aa80813           addi    a6,a6,682 # f0004082 <kDigitsLow>
f0001de0:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
f0001de2:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
f0001de4:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
f0001de6:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
f0001de8:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       f0002030 <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
f0001dea:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
f0001dee:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,f0001e28 <base_vfprintf+0x194>
f0001df2:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,f0002064 <base_vfprintf+0x3d0>
f0001df6:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,f0002064 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
f0001dfa:       |  |  |  |  |  |        |                                |   00002597           auipc   a1,0x2
f0001dfe:       |  |  |  |  |  |        |                                |   27358593           addi    a1,a1,627 # f000406d <top_earlgrey_plic_interrupt_for_peripheral+0x40d>
f0001e02:       |  |  |  |  |  |        |                             /--|-- a851                       j       f0001e96 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
f0001e04:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,f0001e28 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
f0001e08:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
f0001e0a:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
f0001e0e:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001e10:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
f0001e12:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
f0001e16:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
f0001e18:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001e1a:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
f0001e1e:       |  |  |  |  |  |        |                             |  |   00002897           auipc   a7,0x2
f0001e22:       |  |  |  |  |  |        |                             |  |   29188893           addi    a7,a7,657 # f00040af <kDigitsHigh>
f0001e26:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       f000200a <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
f0001e28:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
f0001e2a:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
f0001e2e:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
f0001e30:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
f0001e32:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
f0001e36:       |  |  |  |  |  |        |           |                 |      00002817           auipc   a6,0x2
f0001e3a:       |  |  |  |  |  |        |           |                 |      27980813           addi    a6,a6,633 # f00040af <kDigitsHigh>
f0001e3e:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       f000202a <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
f0001e40:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,f0002064 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
f0001e44:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
f0001e46:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
f0001e4a:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f0001e4c:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
f0001e4e:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
f0001e52:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
f0001e54:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001e56:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
f0001e5a:       |  |  |  |  |  |        |        |  |                 |      00002897           auipc   a7,0x2
f0001e5e:       |  |  |  |  |  |        |        |  |                 |      25588893           addi    a7,a7,597 # f00040af <kDigitsHigh>
f0001e62:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       f0002058 <base_vfprintf+0x3c4>
f0001e64:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
f0001e66:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
f0001e6a:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
f0001e6c:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
f0001e6e:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,f000207e <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
f0001e72:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,f00020d6 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
f0001e76:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00002597           auipc   a1,0x2
f0001e7a:       |  |  |  |  |  |  |     |  |  |  |  |                 |      1fe58593           addi    a1,a1,510 # f0004074 <top_earlgrey_plic_interrupt_for_peripheral+0x414>
f0001e7e:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
f0001e80:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       f000206e <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
f0001e82:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,f0002064 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
f0001e86:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
f0001e88:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
f0001e8c:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
f0001e8e:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
f0001e90:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
f0001e94:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
f0001e96:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
f0001e98:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       f000206e <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
f0001e9a:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,f0002064 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
f0001e9e:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
f0001ea0:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
f0001ea4:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
f0001ea6:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
f0001ea8:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
f0001eac:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00002817           auipc   a6,0x2
f0001eb0:       |  |  |  |  |  |  |  |  |  |  |  |  |                        1d680813           addi    a6,a6,470 # f0004082 <kDigitsLow>
f0001eb4:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
f0001eb6:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       f000202c <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
f0001eb8:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,f0002064 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001ebc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00002597           auipc   a1,0x2
f0001ec0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     1b558593           addi    a1,a1,437 # f0004071 <top_earlgrey_plic_interrupt_for_peripheral+0x411>
f0001ec4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
f0001ec6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001ec8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
f0001eca:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
f0001ecc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
f0001ed0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
f0001ed2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
f0001ed4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
f0001ed8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00002817           auipc   a6,0x2
f0001edc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     1aa80813           addi    a6,a6,426 # f0004082 <kDigitsLow>
f0001ee0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
f0001ee2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
f0001ee6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
f0001ee8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
f0001eea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
f0001eec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     f0002206 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
f0001eee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
f0001ef2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       f0002074 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
f0001ef4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
f0001ef6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
f0001efa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
f0001efc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
f0001efe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
f0001f00:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
f0001f04:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
f0001f08:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001f0a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
f0001f0c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
f0001f0e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
f0001f12:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     f0002284 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
f0001f14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
f0001f16:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001f18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
f0001f1c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
f0001f20:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
f0001f22:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
f0001f24:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,f0001f1c <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001f26:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
f0001f2a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001f2e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  14f58593           addi    a1,a1,335 # f0004079 <top_earlgrey_plic_interrupt_for_peripheral+0x419>
f0001f32:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001f34:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001f36:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
f0001f38:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
f0001f3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
f0001f3e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001f40:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001f42:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
f0001f46:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001f4a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  13458593           addi    a1,a1,308 # f000407a <top_earlgrey_plic_interrupt_for_peripheral+0x41a>
f0001f4e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001f50:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
f0001f52:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001f54:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
f0001f56:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00002597           auipc   a1,0x2
f0001f5a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  10e58593           addi    a1,a1,270 # f0004064 <top_earlgrey_plic_interrupt_for_peripheral+0x404>
f0001f5e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
f0001f60:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
f0001f62:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
f0001f64:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
f0001f68:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,f000208e <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
f0001f6c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002597           auipc   a1,0x2
f0001f70:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               11058593           addi    a1,a1,272 # f000407c <top_earlgrey_plic_interrupt_for_peripheral+0x41c>
f0001f74:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001f76:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001f78:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001f7a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001f7e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
f0001f80:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
f0001f82:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001f84:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001f86:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
f0001f88:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f0001f8a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002817           auipc   a6,0x2
f0001f8e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               0f880813           addi    a6,a6,248 # f0004082 <kDigitsLow>
f0001f92:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
f0001f94:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001f96:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
f0001f98:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
f0001f9a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
f0001f9c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     f0002206 <write_digits>
f0001f9e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
f0001fa0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00002597           auipc   a1,0x2
f0001fa4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               0de58593           addi    a1,a1,222 # f000407e <top_earlgrey_plic_interrupt_for_peripheral+0x41e>
f0001fa8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
f0001faa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
f0001fac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
f0001fae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
f0001fb0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       f00020a8 <base_vfprintf+0x414>
f0001fb2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
f0001fb4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
f0001fb8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
f0001fba:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,f00020c0 <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
f0001fbe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f0001fc0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
f0001fc4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0001fc6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
f0001fc8:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       f000206e <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
f0001fca:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,f0002064 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
f0001fce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
f0001fd0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
f0001fd4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
f0001fd6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
f0001fd8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
f0001fdc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00002817           auipc   a6,0x2
f0001fe0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0a680813           addi    a6,a6,166 # f0004082 <kDigitsLow>
f0001fe4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
f0001fe6:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       f000202c <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
f0001fe8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,f0002014 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
f0001fec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
f0001fee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
f0001ff2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0001ff4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
f0001ff6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
f0001ffa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
f0001ffc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f0001ffe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
f0002002:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00002897           auipc   a7,0x2
f0002006:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   08088893           addi    a7,a7,128 # f0004082 <kDigitsLow>
f000200a:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
f000200c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
f000200e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
f0002010:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
f0002012:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       f0002060 <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
f0002014:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
f0002016:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
f000201a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
f000201c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
f000201e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
f0002022:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00002817           auipc   a6,0x2
f0002026:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      06080813           addi    a6,a6,96 # f0004082 <kDigitsLow>
f000202a:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
f000202c:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
f000202e:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
f0002030:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
f0002032:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     f0002206 <write_digits>
f0002034:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       f0002072 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
f0002036:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,f0002064 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
f000203a:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
f000203c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
f0002040:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f0002042:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
f0002044:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
f0002048:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
f000204a:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
f000204c:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
f0002050:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00002897           auipc   a7,0x2
f0002054:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   03288893           addi    a7,a7,50 # f0004082 <kDigitsLow>
f0002058:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
f000205a:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
f000205c:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
f000205e:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
f0002060:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     f0002122 <hex_dump>
f0002062:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       f0002072 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
f0002064:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00002597           auipc   a1,0x2
f0002068:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   05b58593           addi    a1,a1,91 # f00040bf <kUnknownSpec>
f000206c:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
f000206e:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
f0002070:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
f0002072:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
f0002074:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
f0002078:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,f0001ce0 <base_vfprintf+0x4c>
f000207c:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       f00020f6 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
f000207e:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
f0002082:       |  |  |     |     |  |                 |  |  |  |  |         00002817           auipc   a6,0x2
f0002086:       |  |  |     |     |  |                 |  |  |  |  |         00080813           mv      a6,a6
f000208a:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
f000208c:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       f000202c <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
f000208e:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
f0002090:       |  |  |     |     |  |                    |     |  |         00002817           auipc   a6,0x2
f0002094:       |  |  |     |     |  |                    |     |  |         ff280813           addi    a6,a6,-14 # f0004082 <kDigitsLow>
f0002098:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
f000209a:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
f000209c:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
f000209e:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
f00020a0:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
f00020a2:       |  |  |     |     |  |                    |     |  |         2295                       jal     f0002206 <write_digits>
f00020a4:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
f00020a8:       |  |  |     |     |  |                    |     |  \-------> 00002597           auipc   a1,0x2
f00020ac:       |  |  |     |     |  |                    |     |            fd858593           addi    a1,a1,-40 # f0004080 <top_earlgrey_plic_interrupt_for_peripheral+0x420>
f00020b0:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
f00020b2:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
f00020b4:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
f00020b6:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
f00020ba:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
f00020be:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       f0002074 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
f00020c0:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
f00020c2:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f00020c4:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
f00020c8:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
f00020cc:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
f00020ce:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,f00020c4 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
f00020d0:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
f00020d4:       |  |  |     |     |  +-------------------------------------- bf69                       j       f000206e <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
f00020d6:       |  |  |     |     \--|-------------------------------------> 00001597           auipc   a1,0x1
f00020da:       |  |  |     |        |                                       51e58593           addi    a1,a1,1310 # f00035f4 <kAesModesCipherTextEcb256+0x25c>
f00020de:       |  |  |     |        |                                       4615                       li      a2,5
f00020e0:       |  |  |     |        \-------------------------------------- b779                       j       f000206e <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
f00020e2:       |  |  \-----|----------------------------------------------> 00002597           auipc   a1,0x2
f00020e6:       |  |        |                                                fb058593           addi    a1,a1,-80 # f0004092 <kErrorNul>
f00020ea:       |  |        |                                                4645                       li      a2,17
f00020ec:       |  |        |                                            /-> 854a                       mv      a0,s2
f00020ee:       |  |        |                                            |   9982                       jalr    s3
f00020f0:       |  |        |                                            |   9aaa                       add     s5,s5,a0
f00020f2:       |  +--------|--------------------------------------------|-- a011                       j       f00020f6 <base_vfprintf+0x462>
f00020f4:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
f00020f6:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
f00020f8:                   |                                            |   4df2                       lw      s11,28(sp)
f00020fa:                   |                                            |   5d02                       lw      s10,32(sp)
f00020fc:                   |                                            |   5c92                       lw      s9,36(sp)
f00020fe:                   |                                            |   5c22                       lw      s8,40(sp)
f0002100:                   |                                            |   5bb2                       lw      s7,44(sp)
f0002102:                   |                                            |   5b42                       lw      s6,48(sp)
f0002104:                   |                                            |   5ad2                       lw      s5,52(sp)
f0002106:                   |                                            |   5a62                       lw      s4,56(sp)
f0002108:                   |                                            |   59f2                       lw      s3,60(sp)
f000210a:                   |                                            |   4906                       lw      s2,64(sp)
f000210c:                   |                                            |   4496                       lw      s1,68(sp)
f000210e:                   |                                            |   4426                       lw      s0,72(sp)
f0002110:                   |                                            |   40b6                       lw      ra,76(sp)
f0002112:                   |                                            |   6161                       addi    sp,sp,80
f0002114:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
f0002116:                   \--------------------------------------------|-> 00002597           auipc   a1,0x2
f000211a:                                                                |   f8d58593           addi    a1,a1,-115 # f00040a3 <kErrorTooWide>
f000211e:                                                                |   4631                       li      a2,12
f0002120:                                                                \-- b7f1                       j       f00020ec <base_vfprintf+0x458>

f0002122 <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
f0002122:                    715d                       addi    sp,sp,-80
f0002124:                    c686                       sw      ra,76(sp)
f0002126:                    c4a2                       sw      s0,72(sp)
f0002128:                    c2a6                       sw      s1,68(sp)
f000212a:                    c0ca                       sw      s2,64(sp)
f000212c:                    de4e                       sw      s3,60(sp)
f000212e:                    dc52                       sw      s4,56(sp)
f0002130:                    da56                       sw      s5,52(sp)
f0002132:                    d85a                       sw      s6,48(sp)
f0002134:                    d65e                       sw      s7,44(sp)
f0002136:                    d462                       sw      s8,40(sp)
f0002138:                    d266                       sw      s9,36(sp)
f000213a:                    d06a                       sw      s10,32(sp)
f000213c:                    8bc6                       mv      s7,a7
f000213e:                    8a42                       mv      s4,a6
f0002140:                    8b36                       mv      s6,a3
f0002142:                    8ab2                       mv      s5,a2
f0002144:                    892e                       mv      s2,a1
f0002146:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
f0002148:          /-------- 02e6fc63           bgeu    a3,a4,f0002180 <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
f000214c:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
f0002150:          |         850a                       mv      a0,sp
f0002152:          |         02000613           li      a2,32
f0002156:          |         85be                       mv      a1,a5
f0002158:          |         26c1                       jal     f0002518 <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f000215a:          +-------- c09d                       beqz    s1,f0002180 <hex_dump+0x5e>
f000215c:          |         4c01                       li      s8,0
f000215e:          |  /----> 02000513           li      a0,32
f0002162:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
f0002164:          |  |  /-- 00a4e463           bltu    s1,a0,f000216c <hex_dump+0x4a>
f0002168:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f000216c:          |  |  \-> 858a                       mv      a1,sp
f000216e:          |  |      854e                       mv      a0,s3
f0002170:          |  |      8622                       mv      a2,s0
f0002172:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
f0002174:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
f0002176:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
f0002178:          |  \----- f0fd                       bnez    s1,f000215e <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f000217a:          |     /-- 000b1663           bnez    s6,f0002186 <hex_dump+0x64>
f000217e:       /--|-----|-- a0ad                       j       f00021e8 <hex_dump+0xc6>
f0002180:       |  \-----|-> 4c01                       li      s8,0
f0002182:       +--------|-- 060b0363           beqz    s6,f00021e8 <hex_dump+0xc6>
f0002186:       |        \-> 4401                       li      s0,0
f0002188:       |            4601                       li      a2,0
f000218a:       |            fffb0493           addi    s1,s6,-1
f000218e:       |            8b0a                       mv      s6,sp
f0002190:       |            02000c93           li      s9,32
f0002194:       |            5d7d                       li      s10,-1
f0002196:       |     /----> 8526                       mv      a0,s1
f0002198:       |     |  /-- 000a1363           bnez    s4,f000219e <hex_dump+0x7c>
f000219c:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
f000219e:       |     |  \-> 9556                       add     a0,a0,s5
f00021a0:       |     |      00054503           lbu     a0,0(a0)
f00021a4:       |     |      00455593           srli    a1,a0,0x4
f00021a8:       |     |      95de                       add     a1,a1,s7
f00021aa:       |     |      00058583           lb      a1,0(a1)
f00021ae:       |     |      00cb06b3           add     a3,s6,a2
f00021b2:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f00021b6:       |     |      893d                       andi    a0,a0,15
f00021b8:       |     |      955e                       add     a0,a0,s7
f00021ba:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
f00021be:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
f00021c0:       |     |      00a680a3           sb      a0,1(a3)
f00021c4:       |     |  /-- 01961963           bne     a2,s9,f00021d6 <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
f00021c8:       |     |  |   858a                       mv      a1,sp
f00021ca:       |     |  |   02000613           li      a2,32
f00021ce:       |     |  |   854e                       mv      a0,s3
f00021d0:       |     |  |   9902                       jalr    s2
f00021d2:       |     |  |   4601                       li      a2,0
f00021d4:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
f00021d6:       |     |  \-> 14fd                       addi    s1,s1,-1
f00021d8:       |     |      0405                       addi    s0,s0,1
f00021da:       |     \----- fba49ee3           bne     s1,s10,f0002196 <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
f00021de:       +----------- c609                       beqz    a2,f00021e8 <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
f00021e0:       |            858a                       mv      a1,sp
f00021e2:       |            854e                       mv      a0,s3
f00021e4:       |            9902                       jalr    s2
f00021e6:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
f00021e8:       \----------> 8562                       mv      a0,s8
f00021ea:                    5d02                       lw      s10,32(sp)
f00021ec:                    5c92                       lw      s9,36(sp)
f00021ee:                    5c22                       lw      s8,40(sp)
f00021f0:                    5bb2                       lw      s7,44(sp)
f00021f2:                    5b42                       lw      s6,48(sp)
f00021f4:                    5ad2                       lw      s5,52(sp)
f00021f6:                    5a62                       lw      s4,56(sp)
f00021f8:                    59f2                       lw      s3,60(sp)
f00021fa:                    4906                       lw      s2,64(sp)
f00021fc:                    4496                       lw      s1,68(sp)
f00021fe:                    4426                       lw      s0,72(sp)
f0002200:                    40b6                       lw      ra,76(sp)
f0002202:                    6161                       addi    sp,sp,80
f0002204:                    8082                       ret

f0002206 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
f0002206:              7179                     addi    sp,sp,-48
f0002208:              d606                     sw      ra,44(sp)
f000220a:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
f000220c:       /----- ca05                     beqz    a2,f000223c <write_digits+0x36>
f000220e:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f0002210:       |      02b10293                 addi    t0,sp,43
f0002214:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
f0002216:       |  |   02f65633                 divu    a2,a2,a5
f000221a:       |  |   02f605b3                 mul     a1,a2,a5
f000221e:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
f0002222:       |  |   95c2                     add     a1,a1,a6
f0002224:       |  |   00058e03                 lb      t3,0(a1)
f0002228:       |  |   007285b3                 add     a1,t0,t2
f000222c:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
f0002230:       |  |   13fd                     addi    t2,t2,-1
f0002232:       |  \-- fef371e3                 bgeu    t1,a5,f0002214 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0002236:       |      40700633                 neg     a2,t2
f000223a:       |  /-- a031                     j       f0002246 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
f000223c:       \--|-> 00080583                 lb      a1,0(a6)
f0002240:          |   02b105a3                 sb      a1,43(sp)
f0002244:          |   4605                     li      a2,1
f0002246:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
f0002248:          /-- c291                     beqz    a3,f000224c <write_digits+0x46>
f000224a:          |   85b6                     mv      a1,a3
f000224c:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
f0002250:          /-- 00d5e463                 bltu    a1,a3,f0002258 <write_digits+0x52>
f0002254:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f0002258:       /--\-X 00b67e63                 bgeu    a2,a1,f0002274 <write_digits+0x6e>
f000225c:       |      40c586b3                 sub     a3,a1,a2
f0002260:       |      007c                     addi    a5,sp,12
f0002262:       |      40c78633                 sub     a2,a5,a2
f0002266:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
f0002268:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
f000226c:       |  |   16fd                     addi    a3,a3,-1
f000226e:       |  |   167d                     addi    a2,a2,-1
f0002270:       |  \-- fee5                     bnez    a3,f0002268 <write_digits+0x62>
f0002272:       |      862e                     mv      a2,a1
f0002274:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
f0002276:              8d91                     sub     a1,a1,a2
f0002278:              02058593                 addi    a1,a1,32
f000227c:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
f000227e:              50b2                     lw      ra,44(sp)
f0002280:              6145                     addi    sp,sp,48
f0002282:              8082                     ret

f0002284 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
f0002284:              00052813                 slti    a6,a0,0
f0002288:              41f55793                 srai    a5,a0,0x1f
f000228c:              8fe9                     and     a5,a5,a0
f000228e:              8bfd                     andi    a5,a5,31
f0002290:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
f0002294:              00e87833                 and     a6,a6,a4
f0002298:              02000713                 li      a4,32
f000229c:          /-- 00081363                 bnez    a6,f00022a2 <status_extract+0x1e>
f00022a0:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
f00022a2:          \-> 00271813                 slli    a6,a4,0x2
f00022a6:              f0000797                 auipc   a5,0xf0000
f00022aa:              d1e78793                 addi    a5,a5,-738 # e0001fc4 <status_codes>
f00022ae:              97c2                     add     a5,a5,a6
f00022b0:              439c                     lw      a5,0(a5)
f00022b2:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
f00022b4:              00173593                 seqz    a1,a4
f00022b8:       /----- cb1d                     beqz    a4,f00022ee <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
f00022ba:       |      00555713                 srli    a4,a0,0x5
f00022be:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
f00022c2:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
f00022c4:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
f00022c8:       |      8a7d                     andi    a2,a2,31
f00022ca:       |      04066613                 ori     a2,a2,64
f00022ce:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
f00022d2:       |      01555613                 srli    a2,a0,0x15
f00022d6:       |      8a7d                     andi    a2,a2,31
f00022d8:       |      04066613                 ori     a2,a2,64
f00022dc:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
f00022e0:       |      8169                     srli    a0,a0,0x1a
f00022e2:       |      897d                     andi    a0,a0,31
f00022e4:       |      04056513                 ori     a0,a0,64
f00022e8:       |      00a68123                 sb      a0,2(a3)
f00022ec:       |  /-- a011                     j       f00022f0 <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
f00022ee:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
f00022f0:          \-> 0015c513                 xori    a0,a1,1
f00022f4:              8082                     ret

f00022f6 <dif_uart_init>:
dif_uart_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:18

#include "uart_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_uart_init(mmio_region_t base_addr, dif_uart_t *uart) {
  if (uart == NULL) {
f00022f6:       /----- c581                     beqz    a1,f00022fe <dif_uart_init+0x8>
f00022f8:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:22
    return kDifBadArg;
  }

  uart->base_addr = base_addr;
f00022fa:       |      c188                     sw      a0,0(a1)
f00022fc:       |  /-- a011                     j       f0002300 <dif_uart_init+0xa>
f00022fe:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_uart_autogen.c:25

  return kDifOk;
}
f0002300:          \-> 8532                     mv      a0,a2
f0002302:              8082                     ret

f0002304 <dif_uart_configure>:
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:91

  return bytes_read;
}

dif_result_t dif_uart_configure(const dif_uart_t *uart,
                                dif_uart_config_t config) {
f0002304:              1101                     addi    sp,sp,-32
f0002306:              ce06                     sw      ra,28(sp)
f0002308:              cc22                     sw      s0,24(sp)
f000230a:              ca26                     sw      s1,20(sp)
f000230c:              c84a                     sw      s2,16(sp)
f000230e:              c64e                     sw      s3,12(sp)
f0002310:              448d                     li      s1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:92
  if (uart == NULL) {
f0002312:       /----- cd51                     beqz    a0,f00023ae <dif_uart_configure+0xaa>
f0002314:       |      892e                     mv      s2,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:96
    return kDifBadArg;
  }

  if (config.baudrate == 0 || config.clk_freq_hz == 0) {
f0002316:       |      4194                     lw      a3,0(a1)
f0002318:       +----- cad9                     beqz    a3,f00023ae <dif_uart_configure+0xaa>
f000231a:       |      00492603                 lw      a2,4(s2)
f000231e:       +----- ca41                     beqz    a2,f00023ae <dif_uart_configure+0xaa>
f0002320:       |      842a                     mv      s0,a0
f0002322:       |      0016e537                 lui     a0,0x16e
f0002326:       |      36050513                 addi    a0,a0,864 # 16e360 <_ottf_size+0x12e360>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:118
  // 2^4 should be multiplied.
  // If uart baud rate is 1.5Mbps and IO is 24Mhz, NCO is 0x10000, which is over
  // the NCO width, use NCO = 0xffff for this case since the error is tolerable.
  // Refer to #4263
  uint64_t nco =
      ((uint64_t)config.baudrate == 1500000 && config.clk_freq_hz == 24000000)
f000232a:       |      8d35                     xor     a0,a0,a3
f000232c:       |      016e35b7                 lui     a1,0x16e3
f0002330:       |      60058593                 addi    a1,a1,1536 # 16e3600 <_ottf_size+0x16a3600>
f0002334:       |      8db1                     xor     a1,a1,a2
f0002336:       |      00b56733                 or      a4,a0,a1
f000233a:       |      6541                     lui     a0,0x10
f000233c:       |      fff50993                 addi    s3,a0,-1 # ffff <_non_volatile_scratch_size+0xafff>
f0002340:       |      4581                     li      a1,0
f0002342:       |      854e                     mv      a0,s3
f0002344:       |  /-- cb01                     beqz    a4,f0002354 <dif_uart_configure+0x50>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:120
          ? 0xffff
          : udiv64_slow((uint64_t)config.baudrate << (nco_width + 4),
f0002346:       |  |   01469513                 slli    a0,a3,0x14
f000234a:       |  |   00c6d593                 srli    a1,a3,0xc
f000234e:       |  |   4681                     li      a3,0
f0002350:       |  |   4701                     li      a4,0
f0002352:       |  |   2079                     jal     f00023e0 <udiv64_slow>
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:122
                        config.clk_freq_hz, NULL);
  uint32_t nco_masked = nco & UART_CTRL_NCO_MASK;
f0002354:       |  \-> 01357633                 and     a2,a0,s3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:125

  // Requested baudrate is too high for the given clock frequency.
  if (nco != nco_masked) {
f0002358:       |      8d31                     xor     a0,a0,a2
f000235a:       |      8d4d                     or      a0,a0,a1
f000235c:       +----- e929                     bnez    a0,f00023ae <dif_uart_configure+0xaa>
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:47
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, 0u);
f000235e:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002360:       |      00052823                 sw      zero,16(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:53
  mmio_region_write32(uart->base_addr, UART_FIFO_CTRL_REG_OFFSET, reg);
f0002364:       |      4008                     lw      a0,0(s0)
f0002366:       |      458d                     li      a1,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002368:       |      d10c                     sw      a1,32(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:55
  mmio_region_write32(uart->base_addr, UART_OVRD_REG_OFFSET, 0u);
f000236a:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f000236c:       |      02052423                 sw      zero,40(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:56
  mmio_region_write32(uart->base_addr, UART_TIMEOUT_CTRL_REG_OFFSET, 0u);
f0002370:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002372:       |      02052823                 sw      zero,48(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:57
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f0002376:       |      4008                     lw      a0,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002378:       |      00052223                 sw      zero,4(a0)
uart_reset():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:58
  mmio_region_write32(uart->base_addr, UART_INTR_STATE_REG_OFFSET,
f000237c:       |      4008                     lw      a0,0(s0)
f000237e:       |      55fd                     li      a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f0002380:       |      c10c                     sw      a1,0(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  // Set baudrate, enable RX and TX, configure parity.
  uint32_t reg = 0;
  reg = bitfield_field32_write(reg, UART_CTRL_NCO_FIELD, nco_masked);
  reg = bitfield_bit32_write(reg, UART_CTRL_TX_BIT, true);
  reg = bitfield_bit32_write(reg, UART_CTRL_RX_BIT, true);
  if (config.parity_enable == kDifToggleEnabled) {
f0002382:       |      00892683                 lw      a3,8(s2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
f0002386:       |      01061513                 slli    a0,a2,0x10
f000238a:       |      4605                     li      a2,1
f000238c:       |      04300593                 li      a1,67
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
f0002390:       |  /-- 00c68363                 beq     a3,a2,f0002396 <dif_uart_configure+0x92>
f0002394:       |  |   458d                     li      a1,3
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_EN_BIT, true);
  }
  if (config.parity == kDifUartParityOdd) {
f0002396:       |  \-> 00c92603                 lw      a2,12(s2)
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:137
  if (config.parity_enable == kDifToggleEnabled) {
f000239a:       |      8d4d                     or      a0,a0,a1
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:140
  if (config.parity == kDifUartParityOdd) {
f000239c:       |  /-- e219                     bnez    a2,f00023a2 <dif_uart_configure+0x9e>
f000239e:       |  |   08056513                 ori     a0,a0,128
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:143
    reg = bitfield_bit32_write(reg, UART_CTRL_PARITY_ODD_BIT, true);
  }
  mmio_region_write32(uart->base_addr, UART_CTRL_REG_OFFSET, reg);
f00023a2:       |  \-> 400c                     lw      a1,0(s0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00023a4:       |      c988                     sw      a0,16(a1)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:146

  // Disable interrupts.
  mmio_region_write32(uart->base_addr, UART_INTR_ENABLE_REG_OFFSET, 0u);
f00023a6:       |      4008                     lw      a0,0(s0)
f00023a8:       |      4481                     li      s1,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
f00023aa:       |      00052223                 sw      zero,4(a0)
dif_uart_configure():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:149

  return kDifOk;
}
f00023ae:       \----> 8526                     mv      a0,s1
f00023b0:              49b2                     lw      s3,12(sp)
f00023b2:              4942                     lw      s2,16(sp)
f00023b4:              44d2                     lw      s1,20(sp)
f00023b6:              4462                     lw      s0,24(sp)
f00023b8:              40f2                     lw      ra,28(sp)
f00023ba:              6105                     addi    sp,sp,32
f00023bc:              8082                     ret

f00023be <dif_uart_byte_send_polled>:
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:256

  return kDifOk;
}

dif_result_t dif_uart_byte_send_polled(const dif_uart_t *uart, uint8_t byte) {
  if (uart == NULL) {
f00023be:       /----- cd19                     beqz    a0,f00023dc <dif_uart_byte_send_polled+0x1e>
f00023c0:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00023c2:       |  /-> 4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
f00023c4:       |  |   8a85                     andi    a3,a3,1
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:261
    return kDifBadArg;
  }

  // Busy wait for the TX FIFO to free up.
  while (uart_tx_full(uart)) {
f00023c6:       |  \-- fef5                     bnez    a3,f00023c2 <dif_uart_byte_send_polled+0x4>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
f00023c8:       |      4a54                     lw      a3,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f00023ca:       |      8a85                     andi    a3,a3,1
uart_bytes_send():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:68
  while ((bytes_written < bytes_requested) && !uart_tx_full(uart)) {
f00023cc:       |  /-- e299                     bnez    a3,f00023d2 <dif_uart_byte_send_polled+0x14>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
f00023ce:       |  |   ce4c                     sw      a1,28(a2)
f00023d0:       |  |   4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
f00023d2:       |  >-> 4a48                     lw      a0,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
f00023d4:       |  |   8921                     andi    a0,a0,8
dif_uart_byte_send_polled():
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:268

  (void)uart_bytes_send(uart, &byte, 1);

  // Busy wait for the TX FIFO to be drained and for HW to finish processing
  // the last byte.
  while (!uart_tx_idle(uart)) {
f00023d6:       |  \-- dd75                     beqz    a0,f00023d2 <dif_uart_byte_send_polled+0x14>
f00023d8:       |      4501                     li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_uart.c:272
  }

  return kDifOk;
}
f00023da:       |      8082                     ret
f00023dc:       \----> 450d                     li      a0,3
f00023de:              8082                     ret

f00023e0 <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:9

#include "sw/device/lib/base/math.h"

#include <stddef.h>

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
f00023e0:                 1141                  addi    sp,sp,-16
f00023e2:                 c622                  sw      s0,12(sp)
f00023e4:                 c426                  sw      s1,8(sp)
f00023e6:                 c24a                  sw      s2,4(sp)
f00023e8:                 4881                  li      a7,0
f00023ea:                 4801                  li      a6,0
f00023ec:                 4e01                  li      t3,0
f00023ee:                 4e81                  li      t4,0
f00023f0:                 03f00793              li      a5,63
f00023f4:                 42fd                  li      t0,31
f00023f6:                 00159313              slli    t1,a1,0x1
f00023fa:                 53fd                  li      t2,-1
/proc/self/cwd/sw/device/lib/base/math.c:23
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
f00023fc:       /-------> fe078493              addi    s1,a5,-32
f0002400:       |     /-- 0004c563              bltz    s1,f000240a <udiv64_slow+0x2a>
f0002404:       |     |   0095df33              srl     t5,a1,s1
f0002408:       |  /--|-- a809                  j       f000241a <udiv64_slow+0x3a>
f000240a:       |  |  \-> 00f554b3              srl     s1,a0,a5
f000240e:       |  |      40f28433              sub     s0,t0,a5
f0002412:       |  |      00831433              sll     s0,t1,s0
f0002416:       |  |      0084ef33              or      t5,s1,s0
f000241a:       |  \----> 01fe5493              srli    s1,t3,0x1f
f000241e:       |         001e9413              slli    s0,t4,0x1
f0002422:       |         00946eb3              or      t4,s0,s1
f0002426:       |         001e1493              slli    s1,t3,0x1
f000242a:       |         001f7413              andi    s0,t5,1
f000242e:       |         00946f33              or      t5,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:29

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
f0002432:       |  /----- 00de8563              beq     t4,a3,f000243c <udiv64_slow+0x5c>
f0002436:       |  |      00debe33              sltu    t3,t4,a3
f000243a:       |  |  /-- a019                  j       f0002440 <udiv64_slow+0x60>
f000243c:       |  \--|-> 00cf3e33              sltu    t3,t5,a2
f0002440:       |     \-> 001e4f93              xori    t6,t3,1
f0002444:       |         4901                  li      s2,0
f0002446:       |         4481                  li      s1,0
f0002448:       |     /-- 000e1463              bnez    t3,f0002450 <udiv64_slow+0x70>
f000244c:       |     |   8936                  mv      s2,a3
f000244e:       |     |   84b2                  mv      s1,a2
f0002450:       |     \-> 01f8de13              srli    t3,a7,0x1f
f0002454:       |         00181413              slli    s0,a6,0x1
f0002458:       |         01c46833              or      a6,s0,t3
f000245c:       |         0886                  slli    a7,a7,0x1
f000245e:       |         409f0e33              sub     t3,t5,s1
f0002462:       |         009f34b3              sltu    s1,t5,s1
f0002466:       |         412e8433              sub     s0,t4,s2
f000246a:       |         40940eb3              sub     t4,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f000246e:       |         17fd                  addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/base/math.c:29
    if (rem >= b) {
f0002470:       |         01f8e8b3              or      a7,a7,t6
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
f0002474:       \-------- f87794e3              bne     a5,t2,f00023fc <udiv64_slow+0x1c>
/proc/self/cwd/sw/device/lib/base/math.c:35
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
f0002478:             /-- c709                  beqz    a4,f0002482 <udiv64_slow+0xa2>
/proc/self/cwd/sw/device/lib/base/math.c:36
    *rem_out = rem;
f000247a:             |   01c72023              sw      t3,0(a4)
f000247e:             |   01d72223              sw      t4,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:38
  }
  return quot;
f0002482:             \-> 8546                  mv      a0,a7
f0002484:                 85c2                  mv      a1,a6
f0002486:                 4912                  lw      s2,4(sp)
f0002488:                 44a2                  lw      s1,8(sp)
f000248a:                 4432                  lw      s0,12(sp)
f000248c:                 0141                  addi    sp,sp,16
f000248e:                 8082                  ret

f0002490 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
f0002490:                       00153693                seqz    a3,a0
f0002494:                       0015b713                seqz    a4,a1
f0002498:                       8ed9                    or      a3,a3,a4
f000249a:       /-------------- eab5                    bnez    a3,f000250e <memcpy+0x7e>
f000249c:       |               4711                    li      a4,4
f000249e:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f00024a0:       |        /----- 00e66c63                bltu    a2,a4,f00024b8 <memcpy+0x28>
f00024a4:       |        |      00a5c6b3                xor     a3,a1,a0
f00024a8:       |        |      0036f793                andi    a5,a3,3
f00024ac:       |        |      8832                    mv      a6,a2
f00024ae:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
f00024b0:       |        |  /-- eb91                    bnez    a5,f00024c4 <memcpy+0x34>
f00024b2:       |        |  |   40a006b3                neg     a3,a0
f00024b6:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f00024b8:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f00024bc:       |           |   9b71                    andi    a4,a4,-4
f00024be:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f00024c2:       |  /--------|-- c6b9                    beqz    a3,f0002510 <memcpy+0x80>
f00024c4:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f00024c6:       |  |        /-> 00f58733                add     a4,a1,a5
f00024ca:       |  |        |   00070883                lb      a7,0(a4)
f00024ce:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f00024d2:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
f00024d4:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
f00024d8:       |  |        \-- fef697e3                bne     a3,a5,f00024c6 <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00024dc:       |  |  /-------- 0106fb63                bgeu    a3,a6,f00024f2 <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  // the pointer points to four bytes of four-byte-aligned memory.
  //
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00024e0:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f00024e4:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
 */
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00024e6:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f00024ea:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f00024ec:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
f00024ee:       |  |  |  +----- ff06e9e3                bltu    a3,a6,f00024e0 <memcpy+0x50>
f00024f2:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,f000250e <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
f00024f6:       |  |  |  |      8e15                    sub     a2,a2,a3
f00024f8:       |  |  |  |      00d50733                add     a4,a0,a3
f00024fc:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
f00024fe:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
f0002502:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
f0002506:       |  |  |  |  |   167d                    addi    a2,a2,-1
f0002508:       |  |  |  |  |   0705                    addi    a4,a4,1
f000250a:       |  |  |  |  |   0585                    addi    a1,a1,1
f000250c:       |  |  |  |  \-- fa6d                    bnez    a2,f00024fe <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
f000250e:       \--|--|--|----> 8082                    ret
f0002510:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002512:             |  \----- fd06e7e3                bltu    a3,a6,f00024e0 <memcpy+0x50>
f0002516:             \-------- bff1                    j       f00024f2 <memcpy+0x62>

f0002518 <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
f0002518:                 4691                  li      a3,4
f000251a:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f000251c:             /-- 00d66663              bltu    a2,a3,f0002528 <memset+0x10>
f0002520:             |   40a006b3              neg     a3,a0
f0002524:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002528:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f000252c:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f0002530:          /----- cb01                  beqz    a4,f0002540 <memset+0x28>
f0002532:          |      87aa                  mv      a5,a0
f0002534:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
f0002536:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
f000253a:          |  |   16fd                  addi    a3,a3,-1
f000253c:          |  |   0785                  addi    a5,a5,1
f000253e:          |  \-- fee5                  bnez    a3,f0002536 <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f0002540:       /--\----X 02080263              beqz    a6,f0002564 <memset+0x4c>
f0002544:       |         00e808b3              add     a7,a6,a4
f0002548:       |         0ff5f813              andi    a6,a1,255
f000254c:       |         010107b7              lui     a5,0x1010
f0002550:       |         10178793              addi    a5,a5,257 # 1010101 <_ottf_size+0xfd0101>
f0002554:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002558:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f000255c:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
f000255e:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
f0002560:       |     \-- ff176ce3              bltu    a4,a7,f0002558 <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
f0002564:       \--/----X 00c77a63              bgeu    a4,a2,f0002578 <memset+0x60>
f0002568:          |      8e19                  sub     a2,a2,a4
f000256a:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
f000256e:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
f0002572:          |  |   167d                  addi    a2,a2,-1
f0002574:          |  |   0685                  addi    a3,a3,1
f0002576:          |  \-- fe65                  bnez    a2,f000256e <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
f0002578:          \----> 8082                  ret

f000257a <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
f000257a:                             4691                      li      a3,4
f000257c:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f000257e:                         /-- 00d66663                  bltu    a2,a3,f000258a <memchr+0x10>
f0002582:                         |   40a006b3                  neg     a3,a0
f0002586:                         |   0036fe93                  andi    t4,a3,3
f000258a:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
f000258e:                      /----- 000e8b63                  beqz    t4,f00025a4 <memchr+0x2a>
f0002592:                      |      85aa                      mv      a1,a0
f0002594:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
f0002596:                      |  /-> 0005c683                  lbu     a3,0(a1)
f000259a:       /--------------|--|-- 09c68563                  beq     a3,t3,f0002624 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
f000259e:       |              |  |   17fd                      addi    a5,a5,-1
f00025a0:       |              |  |   0585                      addi    a1,a1,1
f00025a2:       |              |  \-- fbf5                      bnez    a5,f0002596 <memchr+0x1c>
f00025a4:       |              \----> 41d605b3                  sub     a1,a2,t4
f00025a8:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00025aa:       |  /----------------- c9a9                      beqz    a1,f00025fc <memchr+0x82>
f00025ac:       |  |                  01d58833                  add     a6,a1,t4
f00025b0:       |  |                  010105b7                  lui     a1,0x1010
f00025b4:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <_ottf_size+0xfd0101>
f00025b8:       |  |                  02be02b3                  mul     t0,t3,a1
f00025bc:       |  |                  0ff00893                  li      a7,255
f00025c0:       |  |                  65c1                      lui     a1,0x10
f00025c2:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f00025c6:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f00025ca:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f00025ce:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
f00025d0:       |  |              |   0056c7b3                  xor     a5,a3,t0
f00025d4:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f00025d8:       |  |              |   0ff6f713                  andi    a4,a3,255
f00025dc:       +--|--------------|-- 05170463                  beq     a4,a7,f0002624 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f00025e0:       |  |              |   0076f733                  and     a4,a3,t2
f00025e4:       |  |  /-----------|-- 02770b63                  beq     a4,t2,f000261a <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f00025e8:       |  |  |           |   0066f6b3                  and     a3,a3,t1
f00025ec:       |  |  |  /--------|-- 02668963                  beq     a3,t1,f000261e <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f00025f0:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
f00025f4:       |  |  |  |  /-----|-- c69d                      beqz    a3,f0002622 <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
f00025f6:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
f00025f8:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,f00025ca <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
f00025fc:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,f0002616 <memchr+0x9c>
f0002600:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
f0002604:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
f0002608:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
f000260c:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,f0002624 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
f0002610:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
f0002612:       |     |  |  |  |  |   0585                      addi    a1,a1,1
f0002614:       |     |  |  |  |  \-- fa75                      bnez    a2,f0002608 <memchr+0x8e>
f0002616:       |     |  |  |  \----> 4581                      li      a1,0
f0002618:       +-----|--|--|-------- a031                      j       f0002624 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
f000261a:       |     \--|--|-------> 0585                      addi    a1,a1,1
f000261c:       +--------|--|-------- a021                      j       f0002624 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
f000261e:       |        \--|-------> 0589                      addi    a1,a1,2
f0002620:       +-----------|-------- a011                      j       f0002624 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
f0002622:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f0002624:       \-------------------> 852e                      mv      a0,a1
f0002626:                             8082                      ret

f0002628 <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
f0002628:                          4691                 li      a3,4
f000262a:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
f000262c:                      /-- 00d66663             bltu    a2,a3,f0002638 <memrchr+0x10>
f0002630:                      |   40a006b3             neg     a3,a0
f0002634:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
f0002638:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
f000263c:                          9af1                 andi    a3,a3,-4
f000263e:                          006687b3             add     a5,a3,t1
f0002642:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
f0002644:                      /-- 00f66363             bltu    a2,a5,f000264a <memrchr+0x22>
f0002648:                      |   86be                 mv      a3,a5
f000264a:                      \-> 0ff5f393             andi    t2,a1,255
f000264e:                   /--/-X 00c7fd63             bgeu    a5,a2,f0002668 <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
f0002652:                   |  |   00c50733             add     a4,a0,a2
f0002656:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
f000265a:                   |  |   fff60713             addi    a4,a2,-1
f000265e:                   |  |   863a                 mv      a2,a4
f0002660:                   |  \-- fe7597e3             bne     a1,t2,f000264e <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
f0002664:                   |      953a                 add     a0,a0,a4
f0002666:                   |      8082                 ret
f0002668:                   \----> 010105b7             lui     a1,0x1010
f000266c:                          10158593             addi    a1,a1,257 # 1010101 <_ottf_size+0xfd0101>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
f0002670:                          02b382b3             mul     t0,t2,a1
f0002674:                          00ff0837             lui     a6,0xff0
f0002678:                          65c1                 lui     a1,0x10
f000267a:                          f0058793             addi    a5,a1,-256 # ff00 <_non_volatile_scratch_size+0xaf00>
f000267e:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
f0002682:       /--------------/-X 04d37563             bgeu    t1,a3,f00026cc <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
f0002686:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
f000268a:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
f000268e:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
f0002692:       |              |   01875593             srli    a1,a4,0x18
f0002696:       |  /-----------|-- cd95                 beqz    a1,f00026d2 <memrchr+0xaa>
f0002698:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
f000269c:       |  |           |   010775b3             and     a1,a4,a6
f00026a0:       |  |  /--------|-- 03058c63             beq     a1,a6,f00026d8 <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
f00026a4:       |  |  |        |   00f775b3             and     a1,a4,a5
f00026a8:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,f00026de <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
f00026ac:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
f00026b0:       |  |  |  |     |   16f1                 addi    a3,a3,-4
f00026b2:       |  |  |  |     \-- fd1598e3             bne     a1,a7,f0002682 <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f00026b6:       |  |  |  |         9536                 add     a0,a0,a3
f00026b8:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
f00026ba:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
f00026be:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
f00026c2:       |  |  |  |     |   fff68613             addi    a2,a3,-1
f00026c6:       |  |  |  |     |   86b2                 mv      a3,a2
f00026c8:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,f00026e4 <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
f00026cc:       \--|--|--|--|--\-X f6fd                 bnez    a3,f00026ba <memrchr+0x92>
f00026ce:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f00026d0:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
f00026d2:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f00026d6:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
f00026d8:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f00026dc:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
f00026de:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
f00026e2:                   |      8082                 ret
f00026e4:                   \----> 9532                 add     a0,a0,a2
f00026e6:                          8082                 ret

f00026e8 <xTaskCreate>:
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:734
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
f00026e8:                    7179                       addi    sp,sp,-48
f00026ea:                    d606                       sw      ra,44(sp)
f00026ec:                    d422                       sw      s0,40(sp)
f00026ee:                    d226                       sw      s1,36(sp)
f00026f0:                    d04a                       sw      s2,32(sp)
f00026f2:                    ce4e                       sw      s3,28(sp)
f00026f4:                    cc52                       sw      s4,24(sp)
f00026f6:                    ca56                       sw      s5,20(sp)
f00026f8:                    c85a                       sw      s6,16(sp)
f00026fa:                    c65e                       sw      s7,12(sp)
f00026fc:                    c462                       sw      s8,8(sp)
f00026fe:                    c266                       sw      s9,4(sp)
f0002700:                    8abe                       mv      s5,a5
f0002702:                    8b3a                       mv      s6,a4
f0002704:                    89b6                       mv      s3,a3
f0002706:                    84ae                       mv      s1,a1
f0002708:                    8a2a                       mv      s4,a0
/proc/self/cwd/external/freertos/tasks.c:768
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
f000270a:                    00261913           slli    s2,a2,0x2
f000270e:                    854a                       mv      a0,s2
f0002710:                    257d                       jal     f0002dbe <pvPortMalloc>
f0002712:                    5bfd                       li      s7,-1
/proc/self/cwd/external/freertos/tasks.c:770

                if( pxStack != NULL )
f0002714:       /----------- 1c050463           beqz    a0,f00028dc <xTaskCreate+0x1f4>
f0002718:       |            842a                       mv      s0,a0
/proc/self/cwd/external/freertos/tasks.c:773
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
f000271a:       |            04c00513           li      a0,76
f000271e:       |            2545                       jal     f0002dbe <pvPortMalloc>
/proc/self/cwd/external/freertos/tasks.c:775

                    if( pxNewTCB != NULL )
f0002720:       |  /-------- c121                       beqz    a0,f0002760 <xTaskCreate+0x78>
f0002722:       |  |         8c2a                       mv      s8,a0
/proc/self/cwd/external/freertos/tasks.c:778
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
f0002724:       |  |         d900                       sw      s0,48(a0)
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:860
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
f0002726:       |  |         00890533           add     a0,s2,s0
f000272a:       |  |         1571                       addi    a0,a0,-4
/proc/self/cwd/external/freertos/tasks.c:888
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
f000272c:       |  |  /----- cc8d                       beqz    s1,f0002766 <xTaskCreate+0x7e>
f000272e:       |  |  |      4601                       li      a2,0
/proc/self/cwd/external/freertos/tasks.c:890
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
f0002730:       |  |  |      034c0593           addi    a1,s8,52
/proc/self/cwd/external/freertos/tasks.c:892
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
f0002734:       |  |  |  /-> 00c486b3           add     a3,s1,a2
f0002738:       |  |  |  |   00068703           lb      a4,0(a3)
f000273c:       |  |  |  |   00c587b3           add     a5,a1,a2
f0002740:       |  |  |  |   00e78023           sb      a4,0(a5)
/proc/self/cwd/external/freertos/tasks.c:897

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
f0002744:       |  |  |  |   0006c683           lbu     a3,0(a3)
f0002748:       |  |  |  |   0016b693           seqz    a3,a3
f000274c:       |  |  |  |   ff160713           addi    a4,a2,-15
f0002750:       |  |  |  |   0605                       addi    a2,a2,1
f0002752:       |  |  |  |   00173713           seqz    a4,a4
f0002756:       |  |  |  |   8ed9                       or      a3,a3,a4
f0002758:       |  |  |  \-- def1                       beqz    a3,f0002734 <xTaskCreate+0x4c>
/proc/self/cwd/external/freertos/tasks.c:909
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
f000275a:       |  |  |      040c01a3           sb      zero,67(s8)
f000275e:       |  |  |  /-- a031                       j       f000276a <xTaskCreate+0x82>
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:784
                        vPortFreeStack( pxStack );
f0002760:       |  \--|--|-> 8522                       mv      a0,s0
f0002762:       |     |  |   25cd                       jal     f0002e44 <vPortFree>
f0002764:       +-----|--|-- aaa5                       j       f00028dc <xTaskCreate+0x1f4>
prvInitialiseNewTask():
/proc/self/cwd/external/freertos/tasks.c:915
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
f0002766:       |     \--|-> 020c0a23           sb      zero,52(s8)
f000276a:       |        \-> 4591                       li      a1,4
f000276c:       |            ff057493           andi    s1,a0,-16
/proc/self/cwd/external/freertos/tasks.c:921
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
f0002770:       |        /-- 00bb6363           bltu    s6,a1,f0002776 <xTaskCreate+0x8e>
f0002774:       |        |   4b11                       li      s6,4
/proc/self/cwd/external/freertos/tasks.c:930
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
f0002776:       |        \-> 036c2623           sw      s6,44(s8)
/proc/self/cwd/external/freertos/tasks.c:938
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
f000277a:       |            004c0913           addi    s2,s8,4
f000277e:       |            854a                       mv      a0,s2
f0002780:       |            2d19                       jal     f0002d96 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:939
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
f0002782:       |            018c0513           addi    a0,s8,24
f0002786:       |            2d01                       jal     f0002d96 <vListInitialiseItem>
/proc/self/cwd/external/freertos/tasks.c:943

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
f0002788:       |            018c2823           sw      s8,16(s8)
f000278c:       |            4515                       li      a0,5
/proc/self/cwd/external/freertos/tasks.c:946

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
f000278e:       |            41650533           sub     a0,a0,s6
f0002792:       |            00ac2c23           sw      a0,24(s8)
/proc/self/cwd/external/freertos/tasks.c:947
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
f0002796:       |            038c2223           sw      s8,36(s8)
/proc/self/cwd/external/freertos/tasks.c:951

    #if ( portCRITICAL_NESTING_IN_TCB == 1 )
        {
            pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
f000279a:       |            040c2223           sw      zero,68(s8)
/proc/self/cwd/external/freertos/tasks.c:1002
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
f000279e:       |            040c0423           sb      zero,72(s8)
/proc/self/cwd/external/freertos/tasks.c:1052
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
f00027a2:       |            8526                       mv      a0,s1
f00027a4:       |            85d2                       mv      a1,s4
f00027a6:       |            864e                       mv      a2,s3
f00027a8:       |            df5fd0ef           jal     ra,f000059c <pxPortInitialiseStack>
f00027ac:       |            00ac2023           sw      a0,0(s8)
/proc/self/cwd/external/freertos/tasks.c:1058
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
f00027b0:       |        /-- 000a8463           beqz    s5,f00027b8 <xTaskCreate+0xd0>
/proc/self/cwd/external/freertos/tasks.c:1062
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
f00027b4:       |        |   018aa023           sw      s8,0(s5)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskEnterCritical( void )
    {
        portDISABLE_INTERRUPTS();
f00027b8:       |        \-> 30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347

        if( xSchedulerRunning != pdFALSE )
f00027bc:       |            f0000a97           auipc   s5,0xf0000
f00027c0:       |            8b8a8a93           addi    s5,s5,-1864 # e0002074 <xSchedulerRunning>
f00027c4:       |            000aa503           lw      a0,0(s5)
f00027c8:       |            f0000b17           auipc   s6,0xf0000
f00027cc:       |            898b0b13           addi    s6,s6,-1896 # e0002060 <pxCurrentTCB>
f00027d0:       |        /-- c901                       beqz    a0,f00027e0 <xTaskCreate+0xf8>
/proc/self/cwd/external/freertos/tasks.c:4349
        {
            ( pxCurrentTCB->uxCriticalNesting )++;
f00027d2:       |        |   000b2503           lw      a0,0(s6)
f00027d6:       |        |   416c                       lw      a1,68(a0)
f00027d8:       |        |   0585                       addi    a1,a1,1
f00027da:       |        |   c16c                       sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
             * function so  assert() if it is being called from an interrupt
             * context.  Only API functions that end in "FromISR" can be used in an
             * interrupt.  Only assert if the critical nesting count is 1 to
             * protect against recursive calls if the assert function also uses a
             * critical section. */
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f00027dc:       |        |   000b2503           lw      a0,0(s6)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1077
        uxCurrentNumberOfTasks++;
f00027e0:       |        \-> f0000517           auipc   a0,0xf0000
f00027e4:       |            89050513           addi    a0,a0,-1904 # e0002070 <uxCurrentNumberOfTasks>
f00027e8:       |            410c                       lw      a1,0(a0)
f00027ea:       |            0585                       addi    a1,a1,1
f00027ec:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1079
        if( pxCurrentTCB == NULL )
f00027ee:       |            000b2583           lw      a1,0(s6)
f00027f2:       |            f0000c97           auipc   s9,0xf0000
f00027f6:       |            8cac8c93           addi    s9,s9,-1846 # e00020bc <pxReadyTasksLists>
f00027fa:       |        /-- cd91                       beqz    a1,f0002816 <xTaskCreate+0x12e>
/proc/self/cwd/external/freertos/tasks.c:1102
            if( xSchedulerRunning == pdFALSE )
f00027fc:       |        |   000aa503           lw      a0,0(s5)
f0002800:       |     /--|-- e149                       bnez    a0,f0002882 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1104
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
f0002802:       |     |  |   000b2503           lw      a0,0(s6)
f0002806:       |     |  |   5548                       lw      a0,44(a0)
f0002808:       |     |  |   02cc2583           lw      a1,44(s8)
f000280c:       |     +--|-- 06a5eb63           bltu    a1,a0,f0002882 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1106
                    pxCurrentTCB = pxNewTCB;
f0002810:       |     |  |   018b2023           sw      s8,0(s6)
f0002814:       |     +--|-- a0bd                       j       f0002882 <xTaskCreate+0x19a>
/proc/self/cwd/external/freertos/tasks.c:1083
            pxCurrentTCB = pxNewTCB;
f0002816:       |     |  \-> 018b2023           sw      s8,0(s6)
/proc/self/cwd/external/freertos/tasks.c:1085
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
f000281a:       |     |      4108                       lw      a0,0(a0)
f000281c:       |     |      4585                       li      a1,1
f000281e:       |     +----- 06b51263           bne     a0,a1,f0002882 <xTaskCreate+0x19a>
f0002822:       |     |      4401                       li      s0,0
f0002824:       |     |      06400493           li      s1,100
prvInitialiseTaskLists():
/proc/self/cwd/external/freertos/tasks.c:3665
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
f0002828:       |     |  /-> 01940533           add     a0,s0,s9
f000282c:       |     |  |   2b99                       jal     f0002d82 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3663
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
f000282e:       |     |  |   0451                       addi    s0,s0,20
f0002830:       |     |  \-- fe941ce3           bne     s0,s1,f0002828 <xTaskCreate+0x140>
/proc/self/cwd/external/freertos/tasks.c:3668
    vListInitialise( &xDelayedTaskList1 );
f0002834:       |     |      f0000997           auipc   s3,0xf0000
f0002838:       |     |      92898993           addi    s3,s3,-1752 # e000215c <xDelayedTaskList1>
f000283c:       |     |      854e                       mv      a0,s3
f000283e:       |     |      2391                       jal     f0002d82 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3669
    vListInitialise( &xDelayedTaskList2 );
f0002840:       |     |      f0000a17           auipc   s4,0xf0000
f0002844:       |     |      930a0a13           addi    s4,s4,-1744 # e0002170 <xDelayedTaskList2>
f0002848:       |     |      8552                       mv      a0,s4
f000284a:       |     |      2b25                       jal     f0002d82 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3670
    vListInitialise( &xPendingReadyList );
f000284c:       |     |      f0000517           auipc   a0,0xf0000
f0002850:       |     |      8fc50513           addi    a0,a0,-1796 # e0002148 <xPendingReadyList>
f0002854:       |     |      233d                       jal     f0002d82 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3674
            vListInitialise( &xTasksWaitingTermination );
f0002856:       |     |      f0000517           auipc   a0,0xf0000
f000285a:       |     |      8ca50513           addi    a0,a0,-1846 # e0002120 <xTasksWaitingTermination>
f000285e:       |     |      2315                       jal     f0002d82 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3680
            vListInitialise( &xSuspendedTaskList );
f0002860:       |     |      f0000517           auipc   a0,0xf0000
f0002864:       |     |      8d450513           addi    a0,a0,-1836 # e0002134 <xSuspendedTaskList>
f0002868:       |     |      2b29                       jal     f0002d82 <vListInitialise>
/proc/self/cwd/external/freertos/tasks.c:3686
    pxDelayedTaskList = &xDelayedTaskList1;
f000286a:       |     |      f0000517           auipc   a0,0xf0000
f000286e:       |     |      80e50513           addi    a0,a0,-2034 # e0002078 <pxDelayedTaskList>
f0002872:       |     |      01352023           sw      s3,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3687
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
f0002876:       |     |      f0000517           auipc   a0,0xf0000
f000287a:       |     |      80650513           addi    a0,a0,-2042 # e000207c <pxOverflowDelayedTaskList>
f000287e:       |     |      01452023           sw      s4,0(a0)
prvAddNewTaskToReadyList():
/proc/self/cwd/external/freertos/tasks.c:1119
        uxTaskNumber++;
f0002882:       |     \----> effff517           auipc   a0,0xeffff
f0002886:       |            7e650513           addi    a0,a0,2022 # e0002068 <uxTaskNumber>
f000288a:       |            410c                       lw      a1,0(a0)
f000288c:       |            0585                       addi    a1,a1,1
f000288e:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1129
        prvAddTaskToReadyList( pxNewTCB );
f0002890:       |            02cc2503           lw      a0,44(s8)
f0002894:       |            effff597           auipc   a1,0xeffff
f0002898:       |            7d058593           addi    a1,a1,2000 # e0002064 <uxTopReadyPriority>
f000289c:       |            4190                       lw      a2,0(a1)
f000289e:       |            4b85                       li      s7,1
f00028a0:       |            00ab96b3           sll     a3,s7,a0
f00028a4:       |            8e55                       or      a2,a2,a3
f00028a6:       |            c190                       sw      a2,0(a1)
f00028a8:       |            45d1                       li      a1,20
f00028aa:       |            02b50533           mul     a0,a0,a1
f00028ae:       |            9566                       add     a0,a0,s9
f00028b0:       |            414c                       lw      a1,4(a0)
f00028b2:       |            00bc2423           sw      a1,8(s8)
f00028b6:       |            4590                       lw      a2,8(a1)
f00028b8:       |            00cc2623           sw      a2,12(s8)
f00028bc:       |            4590                       lw      a2,8(a1)
f00028be:       |            01262223           sw      s2,4(a2)
f00028c2:       |            0125a423           sw      s2,8(a1)
f00028c6:       |            00ac2a23           sw      a0,20(s8)
f00028ca:       |            410c                       lw      a1,0(a0)
f00028cc:       |            0585                       addi    a1,a1,1
f00028ce:       |            c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:1133
    taskEXIT_CRITICAL();
f00028d0:       |            2025                       jal     f00028f8 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:1135
    if( xSchedulerRunning != pdFALSE )
f00028d2:       |            000aa503           lw      a0,0(s5)
f00028d6:       +----------- c119                       beqz    a0,f00028dc <xTaskCreate+0x1f4>
/proc/self/cwd/external/freertos/tasks.c:1139
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
f00028d8:       |            000b2503           lw      a0,0(s6)
xTaskCreate():
/proc/self/cwd/external/freertos/tasks.c:813
        return xReturn;
f00028dc:       \----------> 855e                       mv      a0,s7
f00028de:                    4c92                       lw      s9,4(sp)
f00028e0:                    4c22                       lw      s8,8(sp)
f00028e2:                    4bb2                       lw      s7,12(sp)
f00028e4:                    4b42                       lw      s6,16(sp)
f00028e6:                    4ad2                       lw      s5,20(sp)
f00028e8:                    4a62                       lw      s4,24(sp)
f00028ea:                    49f2                       lw      s3,28(sp)
f00028ec:                    5902                       lw      s2,32(sp)
f00028ee:                    5492                       lw      s1,36(sp)
f00028f0:                    5422                       lw      s0,40(sp)
f00028f2:                    50b2                       lw      ra,44(sp)
f00028f4:                    6145                       addi    sp,sp,48
f00028f6:                    8082                       ret

f00028f8 <vTaskExitCritical>:
vTaskExitCritical():
/proc/self/cwd/external/freertos/tasks.c:4375

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

    void vTaskExitCritical( void )
    {
        if( xSchedulerRunning != pdFALSE )
f00028f8:              effff517                 auipc   a0,0xeffff
f00028fc:              77c50513                 addi    a0,a0,1916 # e0002074 <xSchedulerRunning>
f0002900:              4108                     lw      a0,0(a0)
f0002902:       /----- cd19                     beqz    a0,f0002920 <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4377
        {
            if( pxCurrentTCB->uxCriticalNesting > 0U )
f0002904:       |      effff517                 auipc   a0,0xeffff
f0002908:       |      75c50513                 addi    a0,a0,1884 # e0002060 <pxCurrentTCB>
f000290c:       |      410c                     lw      a1,0(a0)
f000290e:       |      41ec                     lw      a1,68(a1)
f0002910:       +----- c981                     beqz    a1,f0002920 <vTaskExitCritical+0x28>
/proc/self/cwd/external/freertos/tasks.c:4379
            {
                ( pxCurrentTCB->uxCriticalNesting )--;
f0002912:       |      410c                     lw      a1,0(a0)
f0002914:       |      41f0                     lw      a2,68(a1)
f0002916:       |      167d                     addi    a2,a2,-1
f0002918:       |      c1f0                     sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4381

                if( pxCurrentTCB->uxCriticalNesting == 0U )
f000291a:       |      4108                     lw      a0,0(a0)
f000291c:       |      4168                     lw      a0,68(a0)
f000291e:       |  /-- c111                     beqz    a0,f0002922 <vTaskExitCritical+0x2a>
/proc/self/cwd/external/freertos/tasks.c:4399
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
f0002920:       \--|-> 8082                     ret
/proc/self/cwd/external/freertos/tasks.c:4383
                    portENABLE_INTERRUPTS();
f0002922:          \-> 30046073                 csrsi   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4399
    }
f0002926:              8082                     ret

f0002928 <vTaskSwitchContext>:
vTaskSwitchContext():
/proc/self/cwd/external/freertos/tasks.c:3015
{
f0002928:              1141                     addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:3016
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
f000292a:              c606                     sw      ra,12(sp)
f000292c:              c422                     sw      s0,8(sp)
f000292e:              effff517                 auipc   a0,0xeffff
f0002932:              75250513                 addi    a0,a0,1874 # e0002080 <uxSchedulerSuspended>
f0002936:              4108                     lw      a0,0(a0)
f0002938:          /-- c901                     beqz    a0,f0002948 <vTaskSwitchContext+0x20>
/proc/self/cwd/external/freertos/tasks.c:3020
        xYieldPending = pdTRUE;
f000293a:          |   effff517                 auipc   a0,0xeffff
f000293e:          |   74a50513                 addi    a0,a0,1866 # e0002084 <xYieldPending>
f0002942:          |   4585                     li      a1,1
f0002944:          |   c10c                     sw      a1,0(a0)
f0002946:       /--|-- a0d9                     j       f0002a0c <vTaskSwitchContext+0xe4>
/proc/self/cwd/external/freertos/tasks.c:3024
        xYieldPending = pdFALSE;
f0002948:       |  \-> effff517                 auipc   a0,0xeffff
f000294c:       |      73c50513                 addi    a0,a0,1852 # e0002084 <xYieldPending>
f0002950:       |      00052023                 sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:3056
        taskCHECK_FOR_STACK_OVERFLOW();
f0002954:       |      effff417                 auipc   s0,0xeffff
f0002958:       |      70c40413                 addi    s0,s0,1804 # e0002060 <pxCurrentTCB>
f000295c:       |      4008                     lw      a0,0(s0)
f000295e:       |      4108                     lw      a0,0(a0)
f0002960:       |      400c                     lw      a1,0(s0)
f0002962:       |      598c                     lw      a1,48(a1)
f0002964:       |  /-- 00a5e863                 bltu    a1,a0,f0002974 <vTaskSwitchContext+0x4c>
f0002968:       |  |   4008                     lw      a0,0(s0)
f000296a:       |  |   400c                     lw      a1,0(s0)
f000296c:       |  |   03458593                 addi    a1,a1,52
f0002970:       |  |   d49fe0ef                 jal     ra,f00016b8 <vApplicationStackOverflowHook>
/proc/self/cwd/external/freertos/tasks.c:3067
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0002974:       |  \-> effff517                 auipc   a0,0xeffff
f0002978:       |      6f050513                 addi    a0,a0,1776 # e0002064 <uxTopReadyPriority>
f000297c:       |      4108                     lw      a0,0(a0)
f000297e:       |      00155593                 srli    a1,a0,0x1
f0002982:       |      8d4d                     or      a0,a0,a1
f0002984:       |      00255593                 srli    a1,a0,0x2
f0002988:       |      8d4d                     or      a0,a0,a1
f000298a:       |      00455593                 srli    a1,a0,0x4
f000298e:       |      8d4d                     or      a0,a0,a1
f0002990:       |      00855593                 srli    a1,a0,0x8
f0002994:       |      8d4d                     or      a0,a0,a1
f0002996:       |      01055593                 srli    a1,a0,0x10
f000299a:       |      8d4d                     or      a0,a0,a1
f000299c:       |      fff54513                 not     a0,a0
f00029a0:       |      00155593                 srli    a1,a0,0x1
f00029a4:       |      55555637                 lui     a2,0x55555
f00029a8:       |      55560613                 addi    a2,a2,1365 # 55555555 <_ottf_size+0x55515555>
f00029ac:       |      8df1                     and     a1,a1,a2
f00029ae:       |      8d0d                     sub     a0,a0,a1
f00029b0:       |      333335b7                 lui     a1,0x33333
f00029b4:       |      33358593                 addi    a1,a1,819 # 33333333 <_ottf_size+0x332f3333>
f00029b8:       |      00b57633                 and     a2,a0,a1
f00029bc:       |      8109                     srli    a0,a0,0x2
f00029be:       |      8d6d                     and     a0,a0,a1
f00029c0:       |      9532                     add     a0,a0,a2
f00029c2:       |      00455593                 srli    a1,a0,0x4
f00029c6:       |      952e                     add     a0,a0,a1
f00029c8:       |      0f0f15b7                 lui     a1,0xf0f1
f00029cc:       |      f0f58593                 addi    a1,a1,-241 # f0f0f0f <_ottf_size+0xf0b0f0f>
f00029d0:       |      8d6d                     and     a0,a0,a1
f00029d2:       |      010105b7                 lui     a1,0x1010
f00029d6:       |      10158593                 addi    a1,a1,257 # 1010101 <_ottf_size+0xfd0101>
f00029da:       |      02b50533                 mul     a0,a0,a1
f00029de:       |      8161                     srli    a0,a0,0x18
f00029e0:       |      01f54513                 xori    a0,a0,31
f00029e4:       |      45d1                     li      a1,20
f00029e6:       |      02b50533                 mul     a0,a0,a1
f00029ea:       |      effff597                 auipc   a1,0xeffff
f00029ee:       |      6d258593                 addi    a1,a1,1746 # e00020bc <pxReadyTasksLists>
f00029f2:       |      95aa                     add     a1,a1,a0
f00029f4:       |      41c8                     lw      a0,4(a1)
f00029f6:       |      4148                     lw      a0,4(a0)
f00029f8:       |      00858613                 addi    a2,a1,8
f00029fc:       |      c1c8                     sw      a0,4(a1)
f00029fe:       |  /-- 00c51563                 bne     a0,a2,f0002a08 <vTaskSwitchContext+0xe0>
f0002a02:       |  |   4148                     lw      a0,4(a0)
f0002a04:       |  |   0591                     addi    a1,a1,4
f0002a06:       |  |   c188                     sw      a0,0(a1)
f0002a08:       |  \-> 4548                     lw      a0,12(a0)
f0002a0a:       |      c008                     sw      a0,0(s0)
/proc/self/cwd/external/freertos/tasks.c:3087
}
f0002a0c:       \----> 4422                     lw      s0,8(sp)
f0002a0e:              40b2                     lw      ra,12(sp)
f0002a10:              0141                     addi    sp,sp,16
f0002a12:              8082                     ret

f0002a14 <vTaskStartScheduler>:
vTaskStartScheduler():
/proc/self/cwd/external/freertos/tasks.c:1991
{
f0002a14:           1141                        addi    sp,sp,-16
/proc/self/cwd/external/freertos/tasks.c:2024
            xReturn = xTaskCreate( prvIdleTask,
f0002a16:           c606                        sw      ra,12(sp)
f0002a18:           00000517            auipc   a0,0x0
f0002a1c:           06450513            addi    a0,a0,100 # f0002a7c <prvIdleTask>
f0002a20:           00002597            auipc   a1,0x2
f0002a24:           84458593            addi    a1,a1,-1980 # f0004264 <uxTopUsedPriority+0x4>
f0002a28:           effff797            auipc   a5,0xeffff
f0002a2c:           66078793            addi    a5,a5,1632 # e0002088 <xIdleTaskHandle>
f0002a30:           10000613            li      a2,256
f0002a34:           4681                        li      a3,0
f0002a36:           4701                        li      a4,0
f0002a38:           cb1ff0ef            jal     ra,f00026e8 <xTaskCreate>
f0002a3c:           4585                        li      a1,1
/proc/self/cwd/external/freertos/tasks.c:2046
    if( xReturn == pdPASS )
f0002a3e:       /-- 02b51763            bne     a0,a1,f0002a6c <vTaskStartScheduler+0x58>
/proc/self/cwd/external/freertos/tasks.c:2062
        portDISABLE_INTERRUPTS();
f0002a42:       |   30047073            csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:2074
        xNextTaskUnblockTime = portMAX_DELAY;
f0002a46:       |   effff517            auipc   a0,0xeffff
f0002a4a:       |   64650513            addi    a0,a0,1606 # e000208c <xNextTaskUnblockTime>
f0002a4e:       |   567d                        li      a2,-1
f0002a50:       |   c110                        sw      a2,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2075
        xSchedulerRunning = pdTRUE;
f0002a52:       |   effff517            auipc   a0,0xeffff
f0002a56:       |   62250513            addi    a0,a0,1570 # e0002074 <xSchedulerRunning>
f0002a5a:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2076
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
f0002a5c:       |   effff517            auipc   a0,0xeffff
f0002a60:       |   63450513            addi    a0,a0,1588 # e0002090 <xTickCount>
f0002a64:       |   00052023            sw      zero,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2090
        if( xPortStartScheduler() != pdFALSE )
f0002a68:       |   c89fe0ef            jal     ra,f00016f0 <xPortStartScheduler>
/proc/self/cwd/external/freertos/tasks.c:2114
    ( void ) uxTopUsedPriority;
f0002a6c:       \-> 00001517            auipc   a0,0x1
f0002a70:           7f450513            addi    a0,a0,2036 # f0004260 <uxTopUsedPriority>
f0002a74:           4108                        lw      a0,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2115
}
f0002a76:           40b2                        lw      ra,12(sp)
f0002a78:           0141                        addi    sp,sp,16
f0002a7a:           8082                        ret

f0002a7c <prvIdleTask>:
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3435
{
f0002a7c:                 1101                  addi    sp,sp,-32
f0002a7e:                 ce06                  sw      ra,28(sp)
f0002a80:                 cc22                  sw      s0,24(sp)
f0002a82:                 ca26                  sw      s1,20(sp)
f0002a84:                 c84a                  sw      s2,16(sp)
f0002a86:                 c64e                  sw      s3,12(sp)
f0002a88:                 c452                  sw      s4,8(sp)
f0002a8a:                 c256                  sw      s5,4(sp)
f0002a8c:                 effff497              auipc   s1,0xeffff
f0002a90:                 5e048493              addi    s1,s1,1504 # e000206c <uxDeletedTasksWaitingCleanUp>
f0002a94:                 effff917              auipc   s2,0xeffff
f0002a98:                 5e090913              addi    s2,s2,1504 # e0002074 <xSchedulerRunning>
f0002a9c:                 effff997              auipc   s3,0xeffff
f0002aa0:                 68498993              addi    s3,s3,1668 # e0002120 <xTasksWaitingTermination>
f0002aa4:                 effffa17              auipc   s4,0xeffff
f0002aa8:                 5cca0a13              addi    s4,s4,1484 # e0002070 <uxCurrentNumberOfTasks>
f0002aac:                 effffa97              auipc   s5,0xeffff
f0002ab0:                 5b4a8a93              addi    s5,s5,1460 # e0002060 <pxCurrentTCB>
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3701
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
f0002ab4:       /-------> 4088                  lw      a0,0(s1)
f0002ab6:       |  /----- c129                  beqz    a0,f0002af8 <prvIdleTask+0x7c>
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f0002ab8:       |  |      30047073              csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f0002abc:       |  |      00092503              lw      a0,0(s2)
f0002ac0:       |  |  /-- c901                  beqz    a0,f0002ad0 <prvIdleTask+0x54>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f0002ac2:       |  |  |   000aa503              lw      a0,0(s5)
f0002ac6:       |  |  |   416c                  lw      a1,68(a0)
f0002ac8:       |  |  |   0585                  addi    a1,a1,1
f0002aca:       |  |  |   c16c                  sw      a1,68(a0)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0002acc:       |  |  |   000aa503              lw      a0,0(s5)
prvCheckTasksWaitingTermination():
/proc/self/cwd/external/freertos/tasks.c:3705
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0002ad0:       |  |  \-> 00c9a503              lw      a0,12(s3)
f0002ad4:       |  |      4540                  lw      s0,12(a0)
/proc/self/cwd/external/freertos/tasks.c:3706
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
f0002ad6:       |  |      00440513              addi    a0,s0,4
f0002ada:       |  |      24c9                  jal     f0002d9c <uxListRemove>
/proc/self/cwd/external/freertos/tasks.c:3707
                    --uxCurrentNumberOfTasks;
f0002adc:       |  |      000a2503              lw      a0,0(s4)
f0002ae0:       |  |      157d                  addi    a0,a0,-1
f0002ae2:       |  |      00aa2023              sw      a0,0(s4)
/proc/self/cwd/external/freertos/tasks.c:3708
                    --uxDeletedTasksWaitingCleanUp;
f0002ae6:       |  |      4088                  lw      a0,0(s1)
f0002ae8:       |  |      157d                  addi    a0,a0,-1
f0002aea:       |  |      c088                  sw      a0,0(s1)
/proc/self/cwd/external/freertos/tasks.c:3710
                taskEXIT_CRITICAL();
f0002aec:       |  |      3531                  jal     f00028f8 <vTaskExitCritical>
prvDeleteTCB():
/proc/self/cwd/external/freertos/tasks.c:3964
                vPortFreeStack( pxTCB->pxStack );
f0002aee:       |  |      5808                  lw      a0,48(s0)
f0002af0:       |  |      2e91                  jal     f0002e44 <vPortFree>
/proc/self/cwd/external/freertos/tasks.c:3965
                vPortFree( pxTCB );
f0002af2:       |  |      8522                  mv      a0,s0
f0002af4:       |  |      2e81                  jal     f0002e44 <vPortFree>
f0002af6:       +--|----- bf7d                  j       f0002ab4 <prvIdleTask+0x38>
prvIdleTask():
/proc/self/cwd/external/freertos/tasks.c:3459
                taskYIELD();
f0002af8:       |  \----> 00000073              ecall
f0002afc:       \-------- bf65                  j       f0002ab4 <prvIdleTask+0x38>

f0002afe <vTaskSuspendAll>:
vTaskSuspendAll():
/proc/self/cwd/external/freertos/tasks.c:2142
    ++uxSchedulerSuspended;
f0002afe:       effff517                auipc   a0,0xeffff
f0002b02:       58250513                addi    a0,a0,1410 # e0002080 <uxSchedulerSuspended>
f0002b06:       410c                    lw      a1,0(a0)
f0002b08:       0585                    addi    a1,a1,1
f0002b0a:       c10c                    sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2147
}
f0002b0c:       8082                    ret

f0002b0e <xTaskResumeAll>:
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2214
{
f0002b0e:                    1141                       addi    sp,sp,-16
f0002b10:                    c606                       sw      ra,12(sp)
f0002b12:                    c422                       sw      s0,8(sp)
f0002b14:                    c226                       sw      s1,4(sp)
f0002b16:                    c04a                       sw      s2,0(sp)
vTaskEnterCritical():
/proc/self/cwd/external/freertos/tasks.c:4345
        portDISABLE_INTERRUPTS();
f0002b18:                    30047073           csrci   mstatus,8
/proc/self/cwd/external/freertos/tasks.c:4347
        if( xSchedulerRunning != pdFALSE )
f0002b1c:                    effff517           auipc   a0,0xeffff
f0002b20:                    55850513           addi    a0,a0,1368 # e0002074 <xSchedulerRunning>
f0002b24:                    4108                       lw      a0,0(a0)
f0002b26:                /-- c911                       beqz    a0,f0002b3a <xTaskResumeAll+0x2c>
/proc/self/cwd/external/freertos/tasks.c:4349
            ( pxCurrentTCB->uxCriticalNesting )++;
f0002b28:                |   effff517           auipc   a0,0xeffff
f0002b2c:                |   53850513           addi    a0,a0,1336 # e0002060 <pxCurrentTCB>
f0002b30:                |   410c                       lw      a1,0(a0)
f0002b32:                |   41f0                       lw      a2,68(a1)
f0002b34:                |   0605                       addi    a2,a2,1
f0002b36:                |   c1f0                       sw      a2,68(a1)
/proc/self/cwd/external/freertos/tasks.c:4357
            if( pxCurrentTCB->uxCriticalNesting == 1 )
f0002b38:                |   4108                       lw      a0,0(a0)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2229
        --uxSchedulerSuspended;
f0002b3a:                \-> effff517           auipc   a0,0xeffff
f0002b3e:                    54650513           addi    a0,a0,1350 # e0002080 <uxSchedulerSuspended>
f0002b42:                    410c                       lw      a1,0(a0)
f0002b44:                    15fd                       addi    a1,a1,-1
f0002b46:                    c10c                       sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2231
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f0002b48:                    4108                       lw      a0,0(a0)
f0002b4a:       /----------- ed65                       bnez    a0,f0002c42 <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2233
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
f0002b4c:       |            effff517           auipc   a0,0xeffff
f0002b50:       |            52450513           addi    a0,a0,1316 # e0002070 <uxCurrentNumberOfTasks>
f0002b54:       |            4108                       lw      a0,0(a0)
f0002b56:       +----------- c575                       beqz    a0,f0002c42 <xTaskResumeAll+0x134>
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f0002b58:       |            effff517           auipc   a0,0xeffff
f0002b5c:       |            5f050513           addi    a0,a0,1520 # e0002148 <xPendingReadyList>
f0002b60:       |            410c                       lw      a1,0(a0)
f0002b62:       |            effff917           auipc   s2,0xeffff
f0002b66:       |            52290913           addi    s2,s2,1314 # e0002084 <xYieldPending>
f0002b6a:       |  /-------- cddd                       beqz    a1,f0002c28 <xTaskResumeAll+0x11a>
f0002b6c:       |  |         4885                       li      a7,1
f0002b6e:       |  |         effff617           auipc   a2,0xeffff
f0002b72:       |  |         4f660613           addi    a2,a2,1270 # e0002064 <uxTopReadyPriority>
f0002b76:       |  |         4851                       li      a6,20
f0002b78:       |  |         effff297           auipc   t0,0xeffff
f0002b7c:       |  |         54428293           addi    t0,t0,1348 # e00020bc <pxReadyTasksLists>
f0002b80:       |  |         effff317           auipc   t1,0xeffff
f0002b84:       |  |         4e030313           addi    t1,t1,1248 # e0002060 <pxCurrentTCB>
/proc/self/cwd/external/freertos/tasks.c:2239
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0002b88:       |  |  /----> 454c                       lw      a1,12(a0)
f0002b8a:       |  |  |      45c0                       lw      s0,12(a1)
/proc/self/cwd/external/freertos/tasks.c:2240
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f0002b8c:       |  |  |      500c                       lw      a1,32(s0)
f0002b8e:       |  |  |      4c58                       lw      a4,28(s0)
f0002b90:       |  |  |      5404                       lw      s1,40(s0)
f0002b92:       |  |  |      c70c                       sw      a1,8(a4)
f0002b94:       |  |  |      5014                       lw      a3,32(s0)
f0002b96:       |  |  |      c2d8                       sw      a4,4(a3)
f0002b98:       |  |  |      40cc                       lw      a1,4(s1)
f0002b9a:       |  |  |      01840713           addi    a4,s0,24
f0002b9e:       |  |  |  /-- 00e59363           bne     a1,a4,f0002ba4 <xTaskResumeAll+0x96>
f0002ba2:       |  |  |  |   c0d4                       sw      a3,4(s1)
f0002ba4:       |  |  |  \-> 02042423           sw      zero,40(s0)
f0002ba8:       |  |  |      408c                       lw      a1,0(s1)
f0002baa:       |  |  |      15fd                       addi    a1,a1,-1
f0002bac:       |  |  |      c08c                       sw      a1,0(s1)
/proc/self/cwd/external/freertos/tasks.c:2242
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f0002bae:       |  |  |      444c                       lw      a1,12(s0)
f0002bb0:       |  |  |      4418                       lw      a4,8(s0)
f0002bb2:       |  |  |      4854                       lw      a3,20(s0)
f0002bb4:       |  |  |      c70c                       sw      a1,8(a4)
f0002bb6:       |  |  |      444c                       lw      a1,12(s0)
f0002bb8:       |  |  |      c1d8                       sw      a4,4(a1)
f0002bba:       |  |  |      42d8                       lw      a4,4(a3)
f0002bbc:       |  |  |      00440493           addi    s1,s0,4
f0002bc0:       |  |  |  /-- 00971363           bne     a4,s1,f0002bc6 <xTaskResumeAll+0xb8>
f0002bc4:       |  |  |  |   c2cc                       sw      a1,4(a3)
f0002bc6:       |  |  |  \-> 428c                       lw      a1,0(a3)
f0002bc8:       |  |  |      15fd                       addi    a1,a1,-1
f0002bca:       |  |  |      c28c                       sw      a1,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2243
                    prvAddTaskToReadyList( pxTCB );
f0002bcc:       |  |  |      544c                       lw      a1,44(s0)
f0002bce:       |  |  |      4214                       lw      a3,0(a2)
f0002bd0:       |  |  |      00b89733           sll     a4,a7,a1
f0002bd4:       |  |  |      8ed9                       or      a3,a3,a4
f0002bd6:       |  |  |      c214                       sw      a3,0(a2)
f0002bd8:       |  |  |      030586b3           mul     a3,a1,a6
f0002bdc:       |  |  |      9696                       add     a3,a3,t0
f0002bde:       |  |  |      42d8                       lw      a4,4(a3)
f0002be0:       |  |  |      c418                       sw      a4,8(s0)
f0002be2:       |  |  |      471c                       lw      a5,8(a4)
f0002be4:       |  |  |      c45c                       sw      a5,12(s0)
f0002be6:       |  |  |      471c                       lw      a5,8(a4)
f0002be8:       |  |  |      c3c4                       sw      s1,4(a5)
f0002bea:       |  |  |      c704                       sw      s1,8(a4)
f0002bec:       |  |  |      c854                       sw      a3,20(s0)
f0002bee:       |  |  |      4298                       lw      a4,0(a3)
f0002bf0:       |  |  |      0705                       addi    a4,a4,1
f0002bf2:       |  |  |      c298                       sw      a4,0(a3)
/proc/self/cwd/external/freertos/tasks.c:2247
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
f0002bf4:       |  |  |      00032683           lw      a3,0(t1)
f0002bf8:       |  |  |      56d4                       lw      a3,44(a3)
f0002bfa:       |  |  |  /-- 00d5e463           bltu    a1,a3,f0002c02 <xTaskResumeAll+0xf4>
/proc/self/cwd/external/freertos/tasks.c:2249
                        xYieldPending = pdTRUE;
f0002bfe:       |  |  |  |   01192023           sw      a7,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2237
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
f0002c02:       |  |  |  \-> 410c                       lw      a1,0(a0)
f0002c04:       |  |  \----- f1d1                       bnez    a1,f0002b88 <xTaskResumeAll+0x7a>
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002c06:       |  |         effff517           auipc   a0,0xeffff
f0002c0a:       |  |         47250513           addi    a0,a0,1138 # e0002078 <pxDelayedTaskList>
f0002c0e:       |  |         410c                       lw      a1,0(a0)
f0002c10:       |  |         418c                       lw      a1,0(a1)
f0002c12:       |  |  /----- c589                       beqz    a1,f0002c1c <xTaskResumeAll+0x10e>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f0002c14:       |  |  |      4108                       lw      a0,0(a0)
f0002c16:       |  |  |      4548                       lw      a0,12(a0)
f0002c18:       |  |  |      4108                       lw      a0,0(a0)
f0002c1a:       |  |  |  /-- a011                       j       f0002c1e <xTaskResumeAll+0x110>
f0002c1c:       |  |  \--|-> 557d                       li      a0,-1
f0002c1e:       |  |     \-> effff597           auipc   a1,0xeffff
f0002c22:       |  |         46e58593           addi    a1,a1,1134 # e000208c <xNextTaskUnblockTime>
f0002c26:       |  |         c188                       sw      a0,0(a1)
xTaskResumeAll():
/proc/self/cwd/external/freertos/tasks.c:2273
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
f0002c28:       |  \-------> effff417           auipc   s0,0xeffff
f0002c2c:       |            46c40413           addi    s0,s0,1132 # e0002094 <xPendedTicks>
f0002c30:       |            4004                       lw      s1,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2275
                    if( xPendedCounts > ( TickType_t ) 0U )
f0002c32:       |     /----- c491                       beqz    s1,f0002c3e <xTaskResumeAll+0x130>
/proc/self/cwd/external/freertos/tasks.c:2279
                            if( xTaskIncrementTick() != pdFALSE )
f0002c34:       |     |  /-> 2005                       jal     f0002c54 <xTaskIncrementTick>
/proc/self/cwd/external/freertos/tasks.c:2288
                            --xPendedCounts;
f0002c36:       |     |  |   14fd                       addi    s1,s1,-1
/proc/self/cwd/external/freertos/tasks.c:2289
                        } while( xPendedCounts > ( TickType_t ) 0U );
f0002c38:       |     |  \-- fcf5                       bnez    s1,f0002c34 <xTaskResumeAll+0x126>
/proc/self/cwd/external/freertos/tasks.c:2291
                        xPendedTicks = 0;
f0002c3a:       |     |      00042023           sw      zero,0(s0)
/proc/self/cwd/external/freertos/tasks.c:2299
                if( xYieldPending != pdFALSE )
f0002c3e:       |     \----> 00092503           lw      a0,0(s2)
/proc/self/cwd/external/freertos/tasks.c:2319
    taskEXIT_CRITICAL();
f0002c42:       \----------> cb7ff0ef           jal     ra,f00028f8 <vTaskExitCritical>
/proc/self/cwd/external/freertos/tasks.c:2321
    return xAlreadyYielded;
f0002c46:                    4501                       li      a0,0
f0002c48:                    4902                       lw      s2,0(sp)
f0002c4a:                    4492                       lw      s1,4(sp)
f0002c4c:                    4422                       lw      s0,8(sp)
f0002c4e:                    40b2                       lw      ra,12(sp)
f0002c50:                    0141                       addi    sp,sp,16
f0002c52:                    8082                       ret

f0002c54 <xTaskIncrementTick>:
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2740
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
f0002c54:                          effff517             auipc   a0,0xeffff
f0002c58:                          42c50513             addi    a0,a0,1068 # e0002080 <uxSchedulerSuspended>
f0002c5c:                          4108                 lw      a0,0(a0)
f0002c5e:                      /-- c909                 beqz    a0,f0002c70 <xTaskIncrementTick+0x1c>
/proc/self/cwd/external/freertos/tasks.c:2887
        ++xPendedTicks;
f0002c60:                      |   effff517             auipc   a0,0xeffff
f0002c64:                      |   43450513             addi    a0,a0,1076 # e0002094 <xPendedTicks>
f0002c68:                      |   410c                 lw      a1,0(a0)
f0002c6a:                      |   0585                 addi    a1,a1,1
f0002c6c:                      |   c10c                 sw      a1,0(a0)
f0002c6e:       /--------------|-- aa01                 j       f0002d7e <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2744
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
f0002c70:       |              \-> effff517             auipc   a0,0xeffff
f0002c74:       |                  42050513             addi    a0,a0,1056 # e0002090 <xTickCount>
f0002c78:       |                  410c                 lw      a1,0(a0)
f0002c7a:       |                  00158393             addi    t2,a1,1
/proc/self/cwd/external/freertos/tasks.c:2748
        xTickCount = xConstTickCount;
f0002c7e:       |                  00752023             sw      t2,0(a0)
f0002c82:       |                  effffe17             auipc   t3,0xeffff
f0002c86:       |                  3f6e0e13             addi    t3,t3,1014 # e0002078 <pxDelayedTaskList>
f0002c8a:       |                  effff817             auipc   a6,0xeffff
f0002c8e:       |                  40280813             addi    a6,a6,1026 # e000208c <xNextTaskUnblockTime>
/proc/self/cwd/external/freertos/tasks.c:2750
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
f0002c92:       |        /-------- 02b3ff63             bgeu    t2,a1,f0002cd0 <xTaskIncrementTick+0x7c>
/proc/self/cwd/external/freertos/tasks.c:2752
            taskSWITCH_DELAYED_LISTS();
f0002c96:       |        |         000e2503             lw      a0,0(t3)
f0002c9a:       |        |         effff597             auipc   a1,0xeffff
f0002c9e:       |        |         3e258593             addi    a1,a1,994 # e000207c <pxOverflowDelayedTaskList>
f0002ca2:       |        |         4194                 lw      a3,0(a1)
f0002ca4:       |        |         00de2023             sw      a3,0(t3)
f0002ca8:       |        |         c188                 sw      a0,0(a1)
f0002caa:       |        |         effff517             auipc   a0,0xeffff
f0002cae:       |        |         3ee50513             addi    a0,a0,1006 # e0002098 <xNumOfOverflows>
f0002cb2:       |        |         410c                 lw      a1,0(a0)
f0002cb4:       |        |         0585                 addi    a1,a1,1
f0002cb6:       |        |         c10c                 sw      a1,0(a0)
prvResetNextTaskUnblockTime():
/proc/self/cwd/external/freertos/tasks.c:4001
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002cb8:       |        |         000e2503             lw      a0,0(t3)
f0002cbc:       |        |         4108                 lw      a0,0(a0)
f0002cbe:       |        |  /----- c511                 beqz    a0,f0002cca <xTaskIncrementTick+0x76>
/proc/self/cwd/external/freertos/tasks.c:4015
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
f0002cc0:       |        |  |      000e2503             lw      a0,0(t3)
f0002cc4:       |        |  |      4548                 lw      a0,12(a0)
f0002cc6:       |        |  |      4108                 lw      a0,0(a0)
f0002cc8:       |        |  |  /-- a011                 j       f0002ccc <xTaskIncrementTick+0x78>
f0002cca:       |        |  \--|-> 557d                 li      a0,-1
f0002ccc:       |        |     \-> 00a82023             sw      a0,0(a6)
xTaskIncrementTick():
/proc/self/cwd/external/freertos/tasks.c:2763
        if( xConstTickCount >= xNextTaskUnblockTime )
f0002cd0:       |        \-------> 00082503             lw      a0,0(a6)
f0002cd4:       +----------------- 0aa3e563             bltu    t2,a0,f0002d7e <xTaskIncrementTick+0x12a>
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002cd8:       |                  000e2503             lw      a0,0(t3)
f0002cdc:       |                  4108                 lw      a0,0(a0)
f0002cde:       |  /-------------- cd49                 beqz    a0,f0002d78 <xTaskIncrementTick+0x124>
f0002ce0:       |  |               4885                 li      a7,1
f0002ce2:       |  |               effffe97             auipc   t4,0xeffff
f0002ce6:       |  |               382e8e93             addi    t4,t4,898 # e0002064 <uxTopReadyPriority>
f0002cea:       |  |               42d1                 li      t0,20
f0002cec:       |  |               effff317             auipc   t1,0xeffff
f0002cf0:       |  |               3d030313             addi    t1,t1,976 # e00020bc <pxReadyTasksLists>
/proc/self/cwd/external/freertos/tasks.c:2783
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
f0002cf4:       |  |  /----------> 000e2503             lw      a0,0(t3)
f0002cf8:       |  |  |            4548                 lw      a0,12(a0)
f0002cfa:       |  |  |            4554                 lw      a3,12(a0)
/proc/self/cwd/external/freertos/tasks.c:2784
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
f0002cfc:       |  |  |            42c8                 lw      a0,4(a3)
/proc/self/cwd/external/freertos/tasks.c:2786
                    if( xConstTickCount < xItemValue )
f0002cfe:       |  |  |  /-------- 06a3ee63             bltu    t2,a0,f0002d7a <xTaskIncrementTick+0x126>
/proc/self/cwd/external/freertos/tasks.c:2802
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
f0002d02:       |  |  |  |         46cc                 lw      a1,12(a3)
f0002d04:       |  |  |  |         469c                 lw      a5,8(a3)
f0002d06:       |  |  |  |         4ac8                 lw      a0,20(a3)
f0002d08:       |  |  |  |         c78c                 sw      a1,8(a5)
f0002d0a:       |  |  |  |         46cc                 lw      a1,12(a3)
f0002d0c:       |  |  |  |         c1dc                 sw      a5,4(a1)
f0002d0e:       |  |  |  |         4150                 lw      a2,4(a0)
f0002d10:       |  |  |  |         00468793             addi    a5,a3,4
f0002d14:       |  |  |  |     /-- 00f61363             bne     a2,a5,f0002d1a <xTaskIncrementTick+0xc6>
f0002d18:       |  |  |  |     |   c14c                 sw      a1,4(a0)
f0002d1a:       |  |  |  |     \-> 410c                 lw      a1,0(a0)
f0002d1c:       |  |  |  |         15fd                 addi    a1,a1,-1
f0002d1e:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f0002d20:       |  |  |  |         5688                 lw      a0,40(a3)
f0002d22:       |  |  |  |  /----- c10d                 beqz    a0,f0002d44 <xTaskIncrementTick+0xf0>
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f0002d24:       |  |  |  |  |      528c                 lw      a1,32(a3)
f0002d26:       |  |  |  |  |      4ed0                 lw      a2,28(a3)
f0002d28:       |  |  |  |  |      c60c                 sw      a1,8(a2)
f0002d2a:       |  |  |  |  |      528c                 lw      a1,32(a3)
f0002d2c:       |  |  |  |  |      c1d0                 sw      a2,4(a1)
f0002d2e:       |  |  |  |  |      4150                 lw      a2,4(a0)
/proc/self/cwd/external/freertos/tasks.c:2806
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
f0002d30:       |  |  |  |  |      01868713             addi    a4,a3,24
/proc/self/cwd/external/freertos/tasks.c:2808
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
f0002d34:       |  |  |  |  |  /-- 00e61363             bne     a2,a4,f0002d3a <xTaskIncrementTick+0xe6>
f0002d38:       |  |  |  |  |  |   c14c                 sw      a1,4(a0)
f0002d3a:       |  |  |  |  |  \-> 0206a423             sw      zero,40(a3)
f0002d3e:       |  |  |  |  |      410c                 lw      a1,0(a0)
f0002d40:       |  |  |  |  |      15fd                 addi    a1,a1,-1
f0002d42:       |  |  |  |  |      c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2817
                    prvAddTaskToReadyList( pxTCB );
f0002d44:       |  |  |  |  \----> 56c8                 lw      a0,44(a3)
f0002d46:       |  |  |  |         000ea583             lw      a1,0(t4)
f0002d4a:       |  |  |  |         00a89633             sll     a2,a7,a0
f0002d4e:       |  |  |  |         8dd1                 or      a1,a1,a2
f0002d50:       |  |  |  |         00bea023             sw      a1,0(t4)
f0002d54:       |  |  |  |         02550533             mul     a0,a0,t0
f0002d58:       |  |  |  |         951a                 add     a0,a0,t1
f0002d5a:       |  |  |  |         414c                 lw      a1,4(a0)
f0002d5c:       |  |  |  |         c68c                 sw      a1,8(a3)
f0002d5e:       |  |  |  |         4590                 lw      a2,8(a1)
f0002d60:       |  |  |  |         c6d0                 sw      a2,12(a3)
f0002d62:       |  |  |  |         4590                 lw      a2,8(a1)
f0002d64:       |  |  |  |         c25c                 sw      a5,4(a2)
f0002d66:       |  |  |  |         c59c                 sw      a5,8(a1)
f0002d68:       |  |  |  |         cac8                 sw      a0,20(a3)
f0002d6a:       |  |  |  |         410c                 lw      a1,0(a0)
f0002d6c:       |  |  |  |         0585                 addi    a1,a1,1
f0002d6e:       |  |  |  |         c10c                 sw      a1,0(a0)
/proc/self/cwd/external/freertos/tasks.c:2767
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
f0002d70:       |  |  |  |         000e2503             lw      a0,0(t3)
f0002d74:       |  |  |  |         4108                 lw      a0,0(a0)
f0002d76:       |  |  \--|-------- fd3d                 bnez    a0,f0002cf4 <xTaskIncrementTick+0xa0>
f0002d78:       |  \-----|-------> 557d                 li      a0,-1
f0002d7a:       |        \-------> 00a82023             sw      a0,0(a6)
/proc/self/cwd/external/freertos/tasks.c:2898
    return xSwitchRequired;
f0002d7e:       \----------------> 4501                 li      a0,0
f0002d80:                          8082                 ret

f0002d82 <vListInitialise>:
vListInitialise():
/proc/self/cwd/external/freertos/list.c:55
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0002d82:       00850593                addi    a1,a0,8
f0002d86:       c14c                    sw      a1,4(a0)
f0002d88:       567d                    li      a2,-1
/proc/self/cwd/external/freertos/list.c:59

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
f0002d8a:       c510                    sw      a2,8(a0)
/proc/self/cwd/external/freertos/list.c:63

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0002d8c:       c54c                    sw      a1,12(a0)
/proc/self/cwd/external/freertos/list.c:64
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
f0002d8e:       c90c                    sw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:66

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
f0002d90:       00052023                sw      zero,0(a0)
/proc/self/cwd/external/freertos/list.c:72

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
f0002d94:       8082                    ret

f0002d96 <vListInitialiseItem>:
vListInitialiseItem():
/proc/self/cwd/external/freertos/list.c:78
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
f0002d96:       00052823                sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:84

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
f0002d9a:       8082                    ret

f0002d9c <uxListRemove>:
uxListRemove():
/proc/self/cwd/external/freertos/list.c:194
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0002d9c:           4510                        lw      a2,8(a0)
f0002d9e:           4154                        lw      a3,4(a0)
/proc/self/cwd/external/freertos/list.c:192
    List_t * const pxList = pxItemToRemove->pxContainer;
f0002da0:           490c                        lw      a1,16(a0)
/proc/self/cwd/external/freertos/list.c:194
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
f0002da2:           c690                        sw      a2,8(a3)
/proc/self/cwd/external/freertos/list.c:195
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
f0002da4:           4510                        lw      a2,8(a0)
f0002da6:           c254                        sw      a3,4(a2)
/proc/self/cwd/external/freertos/list.c:201

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
f0002da8:           41d4                        lw      a3,4(a1)
f0002daa:       /-- 00a69363            bne     a3,a0,f0002db0 <uxListRemove+0x14>
/proc/self/cwd/external/freertos/list.c:203
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
f0002dae:       |   c1d0                        sw      a2,4(a1)
/proc/self/cwd/external/freertos/list.c:210
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
f0002db0:       \-> 00052823            sw      zero,16(a0)
/proc/self/cwd/external/freertos/list.c:211
    ( pxList->uxNumberOfItems )--;
f0002db4:           4188                        lw      a0,0(a1)
f0002db6:           157d                        addi    a0,a0,-1
f0002db8:           c188                        sw      a0,0(a1)
/proc/self/cwd/external/freertos/list.c:213

    return pxList->uxNumberOfItems;
f0002dba:           4188                        lw      a0,0(a1)
f0002dbc:           8082                        ret

f0002dbe <pvPortMalloc>:
pvPortMalloc():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:72
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
f0002dbe:                 1141                  addi    sp,sp,-16
f0002dc0:                 c606                  sw      ra,12(sp)
f0002dc2:                 c422                  sw      s0,8(sp)
f0002dc4:                 c226                  sw      s1,4(sp)
f0002dc6:                 c04a                  sw      s2,0(sp)
f0002dc8:                 842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:79
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
f0002dca:                 9941                  andi    a0,a0,-16
f0002dcc:                 0541                  addi    a0,a0,16
f0002dce:                 00f47593              andi    a1,s0,15
f0002dd2:          /----- 00a46363              bltu    s0,a0,f0002dd8 <pvPortMalloc+0x1a>
f0002dd6:          |      4501                  li      a0,0
f0002dd8:          \--/-X c191                  beqz    a1,f0002ddc <pvPortMalloc+0x1e>
f0002dda:             |   842a                  mv      s0,a0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:94
                }
            }
        }
    #endif

    vTaskSuspendAll();
f0002ddc:             \-> 330d                  jal     f0002afe <vTaskSuspendAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:96
    {
        if( pucAlignedHeap == NULL )
f0002dde:                 effff517              auipc   a0,0xeffff
f0002de2:                 2be50513              addi    a0,a0,702 # e000209c <pvPortMalloc.pucAlignedHeap>
f0002de6:                 4104                  lw      s1,0(a0)
f0002de8:             /-- c099                  beqz    s1,f0002dee <pvPortMalloc+0x30>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
f0002dea:          /--|-- e819                  bnez    s0,f0002e00 <pvPortMalloc+0x42>
f0002dec:       /--|--|-- a089                  j       f0002e2e <pvPortMalloc+0x70>
f0002dee:       |  |  \-> effff597              auipc   a1,0xeffff
f0002df2:       |  |      39658593              addi    a1,a1,918 # e0002184 <ucHeap>
f0002df6:       |  |      05c1                  addi    a1,a1,16
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:99
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
f0002df8:       |  |      ff05f493              andi    s1,a1,-16
f0002dfc:       |  |      c104                  sw      s1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:103
        if( ( xWantedSize > 0 ) && /* valid size */
f0002dfe:       +--|----- c805                  beqz    s0,f0002e2e <pvPortMalloc+0x70>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:104
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
f0002e00:       |  \----> effff517              auipc   a0,0xeffff
f0002e04:       |         2a050513              addi    a0,a0,672 # e00020a0 <xNextFreeByte>
f0002e08:       |         00052903              lw      s2,0(a0)
f0002e0c:       |         008905b3              add     a1,s2,s0
f0002e10:       |         0045d613              srli    a2,a1,0x4
f0002e14:       |         7ff63613              sltiu   a2,a2,2047
f0002e18:       |         00b936b3              sltu    a3,s2,a1
f0002e1c:       |         8e75                  and     a2,a2,a3
f0002e1e:       +-------- ca01                  beqz    a2,f0002e2e <pvPortMalloc+0x70>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:110
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
            xNextFreeByte += xWantedSize;
f0002e20:       |         c10c                  sw      a1,0(a0)
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
f0002e22:       |         cedff0ef              jal     ra,f0002b0e <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:119

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
f0002e26:       |     /-- c491                  beqz    s1,f0002e32 <pvPortMalloc+0x74>
f0002e28:       |     |   01248533              add     a0,s1,s2
f0002e2c:       |  /--|-- a031                  j       f0002e38 <pvPortMalloc+0x7a>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:115
    ( void ) xTaskResumeAll();
f0002e2e:       \--|--|-> ce1ff0ef              jal     ra,f0002b0e <xTaskResumeAll>
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:122
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
f0002e32:          |  \-> 84ffe0ef              jal     ra,f0001680 <vApplicationMallocFailedHook>
f0002e36:          |      4501                  li      a0,0
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:127
            }
        }
    #endif

    return pvReturn;
f0002e38:          \----> 4902                  lw      s2,0(sp)
f0002e3a:                 4492                  lw      s1,4(sp)
f0002e3c:                 4422                  lw      s0,8(sp)
f0002e3e:                 40b2                  lw      ra,12(sp)
f0002e40:                 0141                  addi    sp,sp,16
f0002e42:                 8082                  ret

f0002e44 <vPortFree>:
vPortFree():
/proc/self/cwd/external/freertos/portable/MemMang/heap_1.c:140
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
f0002e44:       8082                    ret

f0002e46 <manufacturer_pre_test_hook>:
manufacturer_pre_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:14
// The default test hooks do nothing, but exist as the OTTF expects some hooks
// to exist. Additionally, they are weak symbols so they may be overridden by
// other custom test hooks.

OT_WEAK
bool manufacturer_pre_test_hook(void) { return true; }
f0002e46:       4505                    li      a0,1
f0002e48:       8082                    ret

f0002e4a <manufacturer_post_test_hook>:
manufacturer_post_test_hook():
/proc/self/cwd/external/manufacturer_test_hooks/test_hooks_default.c:17

OT_WEAK
bool manufacturer_post_test_hook(void) { return true; }
f0002e4a:       4505                    li      a0,1
f0002e4c:       8082                    ret
f0002e4e:       0000                    unimp
