
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xe0000080

Program Header:
    LOAD off    0x00001000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x000028d4 memsz 0x000028d4 flags rwx
    LOAD off    0x00000000 vaddr 0xe0008000 paddr 0xe0008000 align 2**12
         filesz 0x00000000 memsz 0x00002000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .vectors          00000084  e0000000  e0000000  00001000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00001c06  e0000084  e0000084  00001084  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000a00  e0001c90  e0001c90  00002c90  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data             00000094  e0002690  e0002690  00003690  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss              0000000c  e0002724  e0002724  00003724  2**2  ALLOC
  5 .logs.fields      000001a4  e0002730  e0002730  00003730  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .stack            00002000  e0008000  e0008000  00004000  2**0  ALLOC
  7 .debug_loc        000051ec  00000000  00000000  000038d4  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev     000013ec  00000000  00000000  00008ac0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info       0000647a  00000000  00000000  00009eac  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges     00000708  00000000  00000000  00010326  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str        000018c9  00000000  00000000  00010a2e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment          00000074  00000000  00000000  000122f7  2**0  CONTENTS, READONLY
 13 .riscv.attributes 00000026  00000000  00000000  0001236b  2**0  CONTENTS, READONLY
 14 .debug_frame      00000668  00000000  00000000  00012394  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line       00004605  00000000  00000000  000129fc  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges    00000028  00000000  00000000  00017001  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
e0000000 l    d  .vectors       00000000 .vectors
e0000084 l    d  .text  00000000 .text
e0001c90 l    d  .rodata        00000000 .rodata
e0002690 l    d  .data  00000000 .data
e0002724 l    d  .bss   00000000 .bss
e0002730 l    d  .logs.fields   00000000 .logs.fields
e0008000 l    d  .stack 00000000 .stack
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .comment       00000000 .comment
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    df *ABS*  00000000 crt0.o
e0000084 l       .text  00000000 default_exc_handler
e0000084 l       .text  00000000 
e000010e l       .text  00000000 sleep_loop
e0000084 l       .text  00000000 
e0000086 l       .text  00000000 reset_handler
e0000086 l       .text  00000000 
e0000086 l       .text  00000000 
e00000cc l       .text  00000000 
e00000ea l       .text  00000000 zero_loop_end
e00000e0 l       .text  00000000 zero_loop
e00000e0 l       .text  00000000 
e00000ea l       .text  00000000 
e00000ea l       .text  00000000 main_entry
e00000ea l       .text  00000000 
e00000ee l       .text  00000000 
e0000102 l       .text  00000000 success
e00000f2 l       .text  00000000 
e00000f4 l       .text  00000000 
e0000100 l       .text  00000000 
e0000102 l       .text  00000000 
e0000102 l       .text  00000000 
e000010e l       .text  00000000 
e0000112 l       .text  00000000 
e0000000 l       .vectors       00000000 
e000002c l       .vectors       00000000 
e0000030 l       .vectors       00000000 
e000007c l       .vectors       00000000 
e0000080 l       .vectors       00000000 
00001ad4 l       .debug_info    00000000 
000004be l       .debug_abbrev  00000000 
e0000114 l       .text  00000000 
e0000084 l       .vectors       00000000 
00000158 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 sram_aes_smoketest.c
e0000114 l       .text  00000000 
e0000114 l       .text  00000000 
e0000114 l       .text  00000000 
e0000116 l       .text  00000000 
e0000116 l       .text  00000000 
e0000138 l       .text  00000000 
e0000138 l       .text  00000000 
e0000138 l       .text  00000000 
e000013c l       .text  00000000 
e000013e l       .text  00000000 
e0000142 l       .text  00000000 
e0000142 l       .text  00000000 
e000014e l       .text  00000000 
e000014e l       .text  00000000 
e000015a l       .text  00000000 
e000015a l       .text  00000000 
e000015e l       .text  00000000 
e0000168 l       .text  00000000 
e0000174 l       .text  00000000 
e0000176 l       .text  00000000 
e0000176 l       .text  00000000 
e0000182 l       .text  00000000 
e0000182 l       .text  00000000 
e000018c l       .text  00000000 
e000018c l       .text  00000000 
e0000194 l       .text  00000000 
e0000196 l       .text  00000000 
e0000196 l       .text  00000000 
e0000198 l       .text  00000000 
e0000198 l       .text  00000000 
e000019a l       .text  00000000 
e000019c l       .text  00000000 
e0002730 l     O .logs.fields   00000014 main.kLogFields
e000019c l       .text  00000000 
e00001ac l       .text  00000000 
e00001ac l       .text  00000000 
e00001ae l       .text  00000000 
e00001ae l       .text  00000000 
e00001c6 l       .text  00000000 
e00001c6 l       .text  00000000 
e00001cc l       .text  00000000 
e00001d0 l       .text  00000000 
e00001d0 l       .text  00000000 
e00001d6 l       .text  00000000 
e00001d8 l       .text  00000000 
e00001da l       .text  00000000 
e00001da l       .text  00000000 
e00001dc l       .text  00000000 
e00001de l       .text  00000000 
e0002744 l     O .logs.fields   00000014 main.kLogFields.4
e00001de l       .text  00000000 
e00001ee l       .text  00000000 
e00001ee l       .text  00000000 
e00001f0 l       .text  00000000 
e00001f0 l       .text  00000000 
e0000208 l       .text  00000000 
e0000208 l       .text  00000000 
e000020e l       .text  00000000 
e0000212 l       .text  00000000 
e0000212 l       .text  00000000 
e0000214 l       .text  00000000 
e00020fc l     O .rodata        00000020 kAesModesKey256
e000211c l     O .rodata        00000020 kKeyShare1
e000022a l       .text  00000000 
e000022a l       .text  00000000 
e0000232 l       .text  00000000 
e000023a l       .text  00000000 
e000023c l       .text  00000000 
e0000240 l       .text  00000000 
e0000242 l       .text  00000000 
e0000246 l       .text  00000000 
e000024a l       .text  00000000 
e000024a l       .text  00000000 
e0000256 l       .text  00000000 
e0000256 l       .text  00000000 
e0000258 l       .text  00000000 
e0000258 l       .text  00000000 
e0000268 l       .text  00000000 
e0000268 l       .text  00000000 
e0000274 l       .text  00000000 
e0000274 l       .text  00000000 
e0000284 l       .text  00000000 
e0000284 l       .text  00000000 
e0000290 l       .text  00000000 
e0000290 l       .text  00000000 
e0000294 l       .text  00000000 
e0000294 l       .text  00000000 
e0000296 l       .text  00000000 
e0000296 l       .text  00000000 
e0000298 l       .text  00000000 
e0000298 l       .text  00000000 
e000029c l       .text  00000000 
e0002758 l     O .logs.fields   00000014 main.kLogFields.8
e000029c l       .text  00000000 
e00002ac l       .text  00000000 
e00002ac l       .text  00000000 
e00002ae l       .text  00000000 
e00002ae l       .text  00000000 
e00002c6 l       .text  00000000 
e00002c6 l       .text  00000000 
e00002cc l       .text  00000000 
e00002d0 l       .text  00000000 
e000216c l     O .rodata        00000040 kAesModesPlainText
e00002d0 l       .text  00000000 
e00002e2 l       .text  00000000 
e00002e2 l       .text  00000000 
e00002ea l       .text  00000000 
e00002ea l       .text  00000000 
e00002f6 l       .text  00000000 
e0000308 l       .text  00000000 
e0000312 l       .text  00000000 
e0000314 l       .text  00000000 
e0000316 l       .text  00000000 
e0000316 l       .text  00000000 
e0000326 l       .text  00000000 
e0000326 l       .text  00000000 
e000032e l       .text  00000000 
e0000332 l       .text  00000000 
e0000334 l       .text  00000000 
e0000338 l       .text  00000000 
e000276c l     O .logs.fields   00000014 main.kLogFields.11
e0002898 l     O .logs.fields   00000014 aes_testutils_get_status.kLogFields
e000035e l       .text  00000000 
e000035e l       .text  00000000 
e0000368 l       .text  00000000 
e000036a l       .text  00000000 
e000036c l       .text  00000000 
e000036c l       .text  00000000 
e0000370 l       .text  00000000 
e000037a l       .text  00000000 
e000037a l       .text  00000000 
e000037c l       .text  00000000 
e000038e l       .text  00000000 
e000038e l       .text  00000000 
e0000394 l       .text  00000000 
e0000394 l       .text  00000000 
e0000398 l       .text  00000000 
e0000398 l       .text  00000000 
e000039a l       .text  00000000 
e000039a l       .text  00000000 
e00003aa l       .text  00000000 
e00003aa l       .text  00000000 
e00003ac l       .text  00000000 
e00003b2 l       .text  00000000 
e00003b2 l       .text  00000000 
e00003b4 l       .text  00000000 
e00003b4 l       .text  00000000 
e00003b8 l       .text  00000000 
e00003b8 l       .text  00000000 
e00003c6 l       .text  00000000 
e00003c8 l       .text  00000000 
e00003cc l       .text  00000000 
e00003d8 l       .text  00000000 
e00003d8 l       .text  00000000 
e00003da l       .text  00000000 
e00003da l       .text  00000000 
e00003ee l       .text  00000000 
e00003ee l       .text  00000000 
e00003f4 l       .text  00000000 
e00003f4 l       .text  00000000 
e00003f6 l       .text  00000000 
e00003f6 l       .text  00000000 
e000040e l       .text  00000000 
e0000410 l       .text  00000000 
e0000412 l       .text  00000000 
e0000412 l       .text  00000000 
e0000416 l       .text  00000000 
e0002780 l     O .logs.fields   00000014 main.kLogFields.14
e0000416 l       .text  00000000 
e0000426 l       .text  00000000 
e0000426 l       .text  00000000 
e0000428 l       .text  00000000 
e0000428 l       .text  00000000 
e0000440 l       .text  00000000 
e0000440 l       .text  00000000 
e0000446 l       .text  00000000 
e000044a l       .text  00000000 
e000044a l       .text  00000000 
e0000452 l       .text  00000000 
e0000452 l       .text  00000000 
e0000460 l       .text  00000000 
e0000462 l       .text  00000000 
e0000464 l       .text  00000000 
e0000464 l       .text  00000000 
e0000474 l       .text  00000000 
e0000474 l       .text  00000000 
e000047a l       .text  00000000 
e000047a l       .text  00000000 
e000047e l       .text  00000000 
e0000482 l       .text  00000000 
e0000486 l       .text  00000000 
e0002794 l     O .logs.fields   00000014 main.kLogFields.17
e00004ac l       .text  00000000 
e00004ac l       .text  00000000 
e00004b6 l       .text  00000000 
e00004b8 l       .text  00000000 
e00004ba l       .text  00000000 
e00004ba l       .text  00000000 
e00004be l       .text  00000000 
e00004c8 l       .text  00000000 
e00004c8 l       .text  00000000 
e00004ca l       .text  00000000 
e00004dc l       .text  00000000 
e00004dc l       .text  00000000 
e00004e2 l       .text  00000000 
e00004e2 l       .text  00000000 
e00004e6 l       .text  00000000 
e00004e6 l       .text  00000000 
e00004e8 l       .text  00000000 
e00004e8 l       .text  00000000 
e00004f8 l       .text  00000000 
e00004f8 l       .text  00000000 
e00004fa l       .text  00000000 
e0000500 l       .text  00000000 
e0000500 l       .text  00000000 
e0000502 l       .text  00000000 
e0000502 l       .text  00000000 
e0000506 l       .text  00000000 
e0000506 l       .text  00000000 
e0000514 l       .text  00000000 
e0000516 l       .text  00000000 
e000051a l       .text  00000000 
e0000526 l       .text  00000000 
e0000526 l       .text  00000000 
e0000528 l       .text  00000000 
e0000528 l       .text  00000000 
e000053c l       .text  00000000 
e000053c l       .text  00000000 
e0000542 l       .text  00000000 
e0000542 l       .text  00000000 
e0000544 l       .text  00000000 
e0000544 l       .text  00000000 
e000054c l       .text  00000000 
e000054e l       .text  00000000 
e0000550 l       .text  00000000 
e0000550 l       .text  00000000 
e0000554 l       .text  00000000 
e00027a8 l     O .logs.fields   00000014 main.kLogFields.20
e0000554 l       .text  00000000 
e0000564 l       .text  00000000 
e0000564 l       .text  00000000 
e0000566 l       .text  00000000 
e0000566 l       .text  00000000 
e000057e l       .text  00000000 
e000057e l       .text  00000000 
e0000584 l       .text  00000000 
e0000588 l       .text  00000000 
e0000588 l       .text  00000000 
e000058e l       .text  00000000 
e0000590 l       .text  00000000 
e0000592 l       .text  00000000 
e0000592 l       .text  00000000 
e0000596 l       .text  00000000 
e00027bc l     O .logs.fields   00000014 main.kLogFields.23
e0000596 l       .text  00000000 
e00005a6 l       .text  00000000 
e00005a6 l       .text  00000000 
e00005a8 l       .text  00000000 
e00005a8 l       .text  00000000 
e00005c0 l       .text  00000000 
e00005c0 l       .text  00000000 
e00005c6 l       .text  00000000 
e00005ca l       .text  00000000 
e00005ca l       .text  00000000 
e00005d2 l       .text  00000000 
e0002210 l     O .rodata        00000040 kAesModesCipherTextEcb256
e00027e4 l     O .logs.fields   00000014 main.kLogFields.29
e00027d0 l     O .logs.fields   00000014 main.kLogFields.26
e00005fc l       .text  00000000 
e00005fc l       .text  00000000 
e000060c l       .text  00000000 
e0000610 l       .text  00000000 
e0000614 l       .text  00000000 
e000061a l       .text  00000000 
e000061e l       .text  00000000 
e0000626 l       .text  00000000 
e0000626 l       .text  00000000 
e0000636 l       .text  00000000 
e0000636 l       .text  00000000 
e0000638 l       .text  00000000 
e0000638 l       .text  00000000 
e0000648 l       .text  00000000 
e0000648 l       .text  00000000 
e0000662 l       .text  00000000 
e0000662 l       .text  00000000 
e0000664 l       .text  00000000 
e0000666 l       .text  00000000 
e000066a l       .text  00000000 
e000066a l       .text  00000000 
e000066e l       .text  00000000 
e0000674 l       .text  00000000 
e0000678 l       .text  00000000 
e0000678 l       .text  00000000 
e000067a l       .text  00000000 
e000067c l       .text  00000000 
e000067c l       .text  00000000 
e0000688 l       .text  00000000 
e000068a l       .text  00000000 
e000068c l       .text  00000000 
e000068c l       .text  00000000 
e0000690 l       .text  00000000 
e00027f8 l     O .logs.fields   00000014 main.kLogFields.32
e0000690 l       .text  00000000 
e00006a0 l       .text  00000000 
e00006a0 l       .text  00000000 
e00006a2 l       .text  00000000 
e00006a2 l       .text  00000000 
e00006ba l       .text  00000000 
e00006ba l       .text  00000000 
e00006c0 l       .text  00000000 
e00006c4 l       .text  00000000 
e00006c4 l       .text  00000000 
e00006cc l       .text  00000000 
e00006cc l       .text  00000000 
e00006da l       .text  00000000 
e00006dc l       .text  00000000 
e00006de l       .text  00000000 
e00006de l       .text  00000000 
e00006ee l       .text  00000000 
e00006ee l       .text  00000000 
e00006f4 l       .text  00000000 
e00006f4 l       .text  00000000 
e00006f8 l       .text  00000000 
e00006fc l       .text  00000000 
e0000700 l       .text  00000000 
e000280c l     O .logs.fields   00000014 main.kLogFields.34
e0000726 l       .text  00000000 
e0000726 l       .text  00000000 
e0000732 l       .text  00000000 
e0000734 l       .text  00000000 
e0000736 l       .text  00000000 
e0000736 l       .text  00000000 
e000073a l       .text  00000000 
e0000744 l       .text  00000000 
e0000744 l       .text  00000000 
e0000746 l       .text  00000000 
e0000758 l       .text  00000000 
e0000758 l       .text  00000000 
e000075e l       .text  00000000 
e000075e l       .text  00000000 
e0000762 l       .text  00000000 
e0000762 l       .text  00000000 
e0000764 l       .text  00000000 
e0000764 l       .text  00000000 
e0000774 l       .text  00000000 
e0000774 l       .text  00000000 
e0000776 l       .text  00000000 
e000077c l       .text  00000000 
e000077c l       .text  00000000 
e000077e l       .text  00000000 
e000077e l       .text  00000000 
e0000782 l       .text  00000000 
e0000782 l       .text  00000000 
e0000790 l       .text  00000000 
e0000792 l       .text  00000000 
e0000796 l       .text  00000000 
e00007a2 l       .text  00000000 
e00007a2 l       .text  00000000 
e00007a4 l       .text  00000000 
e00007a4 l       .text  00000000 
e00007b8 l       .text  00000000 
e00007b8 l       .text  00000000 
e00007be l       .text  00000000 
e00007be l       .text  00000000 
e00007c0 l       .text  00000000 
e00007c0 l       .text  00000000 
e00007d8 l       .text  00000000 
e00007da l       .text  00000000 
e00007dc l       .text  00000000 
e00007dc l       .text  00000000 
e00007e0 l       .text  00000000 
e0002820 l     O .logs.fields   00000014 main.kLogFields.36
e00007e0 l       .text  00000000 
e00007f0 l       .text  00000000 
e00007f0 l       .text  00000000 
e00007f2 l       .text  00000000 
e00007f2 l       .text  00000000 
e000080a l       .text  00000000 
e000080a l       .text  00000000 
e0000810 l       .text  00000000 
e0000814 l       .text  00000000 
e0000814 l       .text  00000000 
e000081c l       .text  00000000 
e000081c l       .text  00000000 
e000082a l       .text  00000000 
e000082c l       .text  00000000 
e000082e l       .text  00000000 
e000082e l       .text  00000000 
e000083e l       .text  00000000 
e000083e l       .text  00000000 
e0000844 l       .text  00000000 
e0000844 l       .text  00000000 
e0000848 l       .text  00000000 
e000084c l       .text  00000000 
e0000850 l       .text  00000000 
e0002834 l     O .logs.fields   00000014 main.kLogFields.39
e0000876 l       .text  00000000 
e0000876 l       .text  00000000 
e0000882 l       .text  00000000 
e0000884 l       .text  00000000 
e0000886 l       .text  00000000 
e0000886 l       .text  00000000 
e000088a l       .text  00000000 
e0000894 l       .text  00000000 
e0000894 l       .text  00000000 
e0000896 l       .text  00000000 
e00008a8 l       .text  00000000 
e00008a8 l       .text  00000000 
e00008ae l       .text  00000000 
e00008ae l       .text  00000000 
e00008b2 l       .text  00000000 
e00008b2 l       .text  00000000 
e00008b4 l       .text  00000000 
e00008b4 l       .text  00000000 
e00008c4 l       .text  00000000 
e00008c4 l       .text  00000000 
e00008c6 l       .text  00000000 
e00008cc l       .text  00000000 
e00008cc l       .text  00000000 
e00008ce l       .text  00000000 
e00008ce l       .text  00000000 
e00008d2 l       .text  00000000 
e00008d2 l       .text  00000000 
e00008e0 l       .text  00000000 
e00008e2 l       .text  00000000 
e00008e6 l       .text  00000000 
e00008f2 l       .text  00000000 
e00008f2 l       .text  00000000 
e00008f4 l       .text  00000000 
e00008f4 l       .text  00000000 
e0000908 l       .text  00000000 
e0000908 l       .text  00000000 
e000090e l       .text  00000000 
e000090e l       .text  00000000 
e0000910 l       .text  00000000 
e0000910 l       .text  00000000 
e0000918 l       .text  00000000 
e0000918 l       .text  00000000 
e000091a l       .text  00000000 
e000091c l       .text  00000000 
e000091e l       .text  00000000 
e000091e l       .text  00000000 
e0000922 l       .text  00000000 
e0002848 l     O .logs.fields   00000014 main.kLogFields.41
e0000922 l       .text  00000000 
e0000932 l       .text  00000000 
e0000932 l       .text  00000000 
e0000934 l       .text  00000000 
e0000934 l       .text  00000000 
e000094c l       .text  00000000 
e000094c l       .text  00000000 
e0000952 l       .text  00000000 
e0000956 l       .text  00000000 
e0000956 l       .text  00000000 
e000095c l       .text  00000000 
e000095e l       .text  00000000 
e0000960 l       .text  00000000 
e0000960 l       .text  00000000 
e0000964 l       .text  00000000 
e000285c l     O .logs.fields   00000014 main.kLogFields.43
e0000964 l       .text  00000000 
e0000974 l       .text  00000000 
e0000974 l       .text  00000000 
e0000976 l       .text  00000000 
e0000976 l       .text  00000000 
e000098e l       .text  00000000 
e000098e l       .text  00000000 
e0000994 l       .text  00000000 
e0000998 l       .text  00000000 
e0000998 l       .text  00000000 
e00009a2 l       .text  00000000 
e0002884 l     O .logs.fields   00000014 main.kLogFields.48
e0002870 l     O .logs.fields   00000014 main.kLogFields.45
e00009c2 l       .text  00000000 
e00009c2 l       .text  00000000 
e00009d2 l       .text  00000000 
e00009d6 l       .text  00000000 
e00009da l       .text  00000000 
e00009e0 l       .text  00000000 
e00009e4 l       .text  00000000 
e00009ec l       .text  00000000 
e00009ec l       .text  00000000 
e00009fc l       .text  00000000 
e00009fc l       .text  00000000 
e00009fe l       .text  00000000 
e00009fe l       .text  00000000 
e0000a0e l       .text  00000000 
e0000a0e l       .text  00000000 
e0000a28 l       .text  00000000 
e0000a28 l       .text  00000000 
e0000a2a l       .text  00000000 
e0000a2c l       .text  00000000 
e0000a30 l       .text  00000000 
e0000a30 l       .text  00000000 
e0000a34 l       .text  00000000 
e0000a3a l       .text  00000000 
e0000a3e l       .text  00000000 
e0000a3e l       .text  00000000 
e0000a48 l       .text  00000000 
e0000a48 l       .text  00000000 
e0000a70 l       .text  00000000 
e0000a70 l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000001b l       .debug_loc     00000000 
00000036 l       .debug_loc     00000000 
00000172 l       .debug_loc     00000000 
000002c2 l       .debug_loc     00000000 
000002f3 l       .debug_loc     00000000 
00000324 l       .debug_loc     00000000 
00000355 l       .debug_loc     00000000 
000003ab l       .debug_loc     00000000 
000003c7 l       .debug_loc     00000000 
000003ee l       .debug_loc     00000000 
00000415 l       .debug_loc     00000000 
0000043c l       .debug_loc     00000000 
00000462 l       .debug_loc     00000000 
00000489 l       .debug_loc     00000000 
000004b0 l       .debug_loc     00000000 
000004cc l       .debug_loc     00000000 
000004fd l       .debug_loc     00000000 
00000553 l       .debug_loc     00000000 
0000056f l       .debug_loc     00000000 
00000596 l       .debug_loc     00000000 
000005bd l       .debug_loc     00000000 
000005e4 l       .debug_loc     00000000 
0000060a l       .debug_loc     00000000 
00000631 l       .debug_loc     00000000 
00000658 l       .debug_loc     00000000 
00000674 l       .debug_loc     00000000 
000006a5 l       .debug_loc     00000000 
000006d6 l       .debug_loc     00000000 
00000707 l       .debug_loc     00000000 
0000075d l       .debug_loc     00000000 
00000779 l       .debug_loc     00000000 
000007a0 l       .debug_loc     00000000 
000007c7 l       .debug_loc     00000000 
000007ef l       .debug_loc     00000000 
00000815 l       .debug_loc     00000000 
0000083c l       .debug_loc     00000000 
00000863 l       .debug_loc     00000000 
0000087f l       .debug_loc     00000000 
000008b0 l       .debug_loc     00000000 
00000906 l       .debug_loc     00000000 
00000922 l       .debug_loc     00000000 
00000949 l       .debug_loc     00000000 
00000970 l       .debug_loc     00000000 
00000998 l       .debug_loc     00000000 
000009be l       .debug_loc     00000000 
000009e5 l       .debug_loc     00000000 
00000a0c l       .debug_loc     00000000 
00000a28 l       .debug_loc     00000000 
00000a59 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
00000874 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
000008d8 l       .debug_str     00000000 
000008dd l       .debug_str     00000000 
00000658 l       .debug_str     00000000 
00000879 l       .debug_str     00000000 
00000884 l       .debug_str     00000000 
000007e6 l       .debug_str     00000000 
000008b2 l       .debug_str     00000000 
000008cf l       .debug_str     00000000 
000008e2 l       .debug_str     00000000 
000008ec l       .debug_str     00000000 
0000057e l       .debug_str     00000000 
00000238 l       .debug_str     00000000 
0000014b l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
000008f6 l       .debug_str     00000000 
00000908 l       .debug_str     00000000 
00000156 l       .debug_str     00000000 
00000113 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
0000105e l       .debug_str     00000000 
0000013e l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
0000010f l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000eb l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
00000173 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000195 l       .debug_str     00000000 
000001a0 l       .debug_str     00000000 
000001a8 l       .debug_str     00000000 
000001bb l       .debug_str     00000000 
000001d5 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000001f1 l       .debug_str     00000000 
000001fc l       .debug_str     00000000 
0000020c l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
0000022a l       .debug_str     00000000 
000002b8 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
00000258 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000283 l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002a6 l       .debug_str     00000000 
000002f4 l       .debug_str     00000000 
000002c4 l       .debug_str     00000000 
000002dc l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000306 l       .debug_str     00000000 
00000315 l       .debug_str     00000000 
00000324 l       .debug_str     00000000 
00000333 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000388 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
0000036c l       .debug_str     00000000 
0000037a l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
0000039b l       .debug_str     00000000 
000003b6 l       .debug_str     00000000 
0000041a l       .debug_str     00000000 
000003ec l       .debug_str     00000000 
00000407 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
0000042f l       .debug_str     00000000 
00000445 l       .debug_str     00000000 
0000045d l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
0000048c l       .debug_str     00000000 
0000049e l       .debug_str     00000000 
000004b1 l       .debug_str     00000000 
000004c9 l       .debug_str     00000000 
000004e2 l       .debug_str     00000000 
000004fa l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000562 l       .debug_str     00000000 
0000054b l       .debug_str     00000000 
0000056b l       .debug_str     00000000 
00000589 l       .debug_str     00000000 
00000596 l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
000005a9 l       .debug_str     00000000 
000005d7 l       .debug_str     00000000 
000005c8 l       .debug_str     00000000 
000005bb l       .debug_str     00000000 
00000eb8 l       .debug_str     00000000 
0000071e l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
000005f5 l       .debug_str     00000000 
00000602 l       .debug_str     00000000 
0000060d l       .debug_str     00000000 
00000617 l       .debug_str     00000000 
00000666 l       .debug_str     00000000 
00001239 l       .debug_str     00000000 
0000065c l       .debug_str     00000000 
00000654 l       .debug_str     00000000 
00000630 l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00000a7d l       .debug_str     00000000 
0000066b l       .debug_str     00000000 
0000067c l       .debug_str     00000000 
00000689 l       .debug_str     00000000 
000005c0 l       .debug_str     00000000 
0000069c l       .debug_str     00000000 
000006a9 l       .debug_str     00000000 
00000f55 l       .debug_str     00000000 
000006b8 l       .debug_str     00000000 
000006c5 l       .debug_str     00000000 
000006da l       .debug_str     00000000 
000006f1 l       .debug_str     00000000 
00000701 l       .debug_str     00000000 
0000070f l       .debug_str     00000000 
00000716 l       .debug_str     00000000 
000007de l       .debug_str     00000000 
000003e2 l       .debug_str     00000000 
00000359 l       .debug_str     00000000 
00000747 l       .debug_str     00000000 
000003db l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
0000047d l       .debug_str     00000000 
000007af l       .debug_str     00000000 
000007c4 l       .debug_str     00000000 
000007d0 l       .debug_str     00000000 
00000724 l       .debug_str     00000000 
00000738 l       .debug_str     00000000 
0000074f l       .debug_str     00000000 
00000764 l       .debug_str     00000000 
0000077f l       .debug_str     00000000 
00000796 l       .debug_str     00000000 
000007f9 l       .debug_str     00000000 
0000087d l       .debug_str     00000000 
000007f2 l       .debug_str     00000000 
0000080b l       .debug_str     00000000 
00000dcf l       .debug_str     00000000 
00000816 l       .debug_str     00000000 
00000822 l       .debug_str     00000000 
00000835 l       .debug_str     00000000 
00000847 l       .debug_str     00000000 
00000842 l       .debug_str     00000000 
00000854 l       .debug_str     00000000 
00000868 l       .debug_str     00000000 
00000888 l       .debug_str     00000000 
0000089c l       .debug_str     00000000 
000008c0 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
000008ff l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
e0000a70 l       .text  00000000 
00000000 l    df *ABS*  00000000 utils.c
e0000a70 l       .text  00000000 
e0000a70 l       .text  00000000 
e0000a70 l       .text  00000000 
e0000a72 l       .text  00000000 
e0000a8c l       .text  00000000 
e0000a8e l       .text  00000000 
e0000aa2 l       .text  00000000 
e0000aa2 l       .text  00000000 
e0000ac4 l       .text  00000000 
e0000ac4 l       .text  00000000 
e0000ac8 l       .text  00000000 
e0000ad0 l       .text  00000000 
e0000ad4 l       .text  00000000 
e0000ad8 l       .text  00000000 
e0000ad8 l       .text  00000000 
e0000ae4 l       .text  00000000 
e0000aea l       .text  00000000 
e0000aea l       .text  00000000 
e0000aee l       .text  00000000 
e0000af4 l       .text  00000000 
e0000af4 l       .text  00000000 
e0000af8 l       .text  00000000 
e0000af8 l       .text  00000000 
e0000afa l       .text  00000000 
e0000afc l       .text  00000000 
e0000afc l       .text  00000000 
e0000b00 l       .text  00000000 
e0000b02 l       .text  00000000 
e0000b06 l       .text  00000000 
e0000b0a l       .text  00000000 
e0000b0a l       .text  00000000 
e0000b0e l       .text  00000000 
e0000b0e l       .text  00000000 
e0000b10 l       .text  00000000 
e0000b14 l       .text  00000000 
e0000b18 l       .text  00000000 
e0000b26 l       .text  00000000 
e0000b28 l       .text  00000000 
e0000b28 l       .text  00000000 
e0000b30 l       .text  00000000 
e0000b34 l       .text  00000000 
e0000b36 l       .text  00000000 
e0000b3a l       .text  00000000 
e0000b3a l       .text  00000000 
e0000b42 l       .text  00000000 
e0000b46 l       .text  00000000 
e0000b48 l       .text  00000000 
e0000b4c l       .text  00000000 
e0000b4c l       .text  00000000 
e0000b64 l       .text  00000000 
e0000b6a l       .text  00000000 
e0000b74 l       .text  00000000 
e0000b88 l       .text  00000000 
e0000b88 l       .text  00000000 
e0000b8c l       .text  00000000 
e0000b8c l       .text  00000000 
e0000b8e l       .text  00000000 
e0000b8e l       .text  00000000 
e0000b96 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000b9a l       .text  00000000 
e0000b9a l       .text  00000000 
e0000ba0 l       .text  00000000 
e0000ba8 l       .text  00000000 
e0000bae l       .text  00000000 
e0000bb2 l       .text  00000000 
e0000bb6 l       .text  00000000 
e0000bba l       .text  00000000 
e0000caa l     F .text  000000c4 qprints
e0000bc0 l       .text  00000000 
e0000bc2 l       .text  00000000 
e0000bc8 l       .text  00000000 
e0000bcc l       .text  00000000 
e0000bd2 l       .text  00000000 
e0000bd4 l       .text  00000000 
e0000d6e l     F .text  0000013a qprinti
e0000bdc l       .text  00000000 
e0000bde l       .text  00000000 
e0000bde l       .text  00000000 
e0000be0 l       .text  00000000 
e0000be2 l       .text  00000000 
e0000be2 l       .text  00000000 
e0000bf4 l       .text  00000000 
e0000c02 l       .text  00000000 
e0000c02 l       .text  00000000 
e0000c02 l       .text  00000000 
e0000c02 l       .text  00000000 
e0000c02 l       .text  00000000 
e0000c06 l       .text  00000000 
e0000c0a l       .text  00000000 
e0000c0c l       .text  00000000 
e0000c10 l       .text  00000000 
e0000c12 l       .text  00000000 
e0000c16 l       .text  00000000 
e0000c16 l       .text  00000000 
e0000c1c l       .text  00000000 
e0000c20 l       .text  00000000 
e0000c22 l       .text  00000000 
e0000c24 l       .text  00000000 
e0000c28 l       .text  00000000 
e0000c2c l       .text  00000000 
e0000c2e l       .text  00000000 
e0000c30 l       .text  00000000 
e0000c30 l       .text  00000000 
e0000c30 l       .text  00000000 
e0000c30 l       .text  00000000 
e0000c30 l       .text  00000000 
e0000c32 l       .text  00000000 
e0000c32 l       .text  00000000 
e0000c40 l       .text  00000000 
e0000c48 l       .text  00000000 
e0000c4a l       .text  00000000 
e0000c4e l       .text  00000000 
e0000c52 l       .text  00000000 
e0000c5e l       .text  00000000 
e0000c60 l       .text  00000000 
e0000c62 l       .text  00000000 
e0000c62 l       .text  00000000 
e0000c64 l       .text  00000000 
e0000c64 l       .text  00000000 
e0000c66 l       .text  00000000 
e0000c66 l       .text  00000000 
e0000c68 l       .text  00000000 
e0000c68 l       .text  00000000 
e0000c6c l       .text  00000000 
e0000c6c l       .text  00000000 
e0000c74 l       .text  00000000 
e0000c76 l       .text  00000000 
e0000c76 l       .text  00000000 
e0000c78 l       .text  00000000 
e0000c78 l       .text  00000000 
e0000c8e l       .text  00000000 
e0000c92 l       .text  00000000 
e0000c94 l       .text  00000000 
e0000c96 l       .text  00000000 
e0000c96 l       .text  00000000 
e0000c98 l       .text  00000000 
e0000c9c l       .text  00000000 
e0000c9e l       .text  00000000 
e0000caa l       .text  00000000 
e0000caa l       .text  00000000 
e0000caa l       .text  00000000 
e0000caa l       .text  00000000 
e0000caa l       .text  00000000 
e0000caa l       .text  00000000 
e0000cae l       .text  00000000 
e0000cae l       .text  00000000 
e0000cb2 l       .text  00000000 
e0000cb4 l       .text  00000000 
e0000cb6 l       .text  00000000 
e0000cba l       .text  00000000 
e0000cba l       .text  00000000 
e0000cc2 l       .text  00000000 
e0000cc6 l       .text  00000000 
e0000cc6 l       .text  00000000 
e0000cc8 l       .text  00000000 
e0000ccc l       .text  00000000 
e0000ccc l       .text  00000000 
e0000cce l       .text  00000000 
e0000cd4 l       .text  00000000 
e0000cd6 l       .text  00000000 
e0000cd6 l       .text  00000000 
e0000ce0 l       .text  00000000 
e0000ce2 l       .text  00000000 
e0000ce2 l       .text  00000000 
e0000cea l       .text  00000000 
e0000cec l       .text  00000000 
e0000cec l       .text  00000000 
e0000cf0 l       .text  00000000 
e0000cf0 l       .text  00000000 
e0000cfc l       .text  00000000 
e0000cfc l       .text  00000000 
e0000d00 l       .text  00000000 
e0000d08 l       .text  00000000 
e0000d0a l       .text  00000000 
e0000d0a l       .text  00000000 
e0000d0c l       .text  00000000 
e0000d10 l       .text  00000000 
e0000d12 l       .text  00000000 
e0000d12 l       .text  00000000 
e0000d16 l       .text  00000000 
e0000d16 l       .text  00000000 
e0000d18 l       .text  00000000 
e0000d1c l       .text  00000000 
e0000d1c l       .text  00000000 
e0000d20 l       .text  00000000 
e0000d20 l       .text  00000000 
e0000d22 l       .text  00000000 
e0000d24 l       .text  00000000 
e0000d28 l       .text  00000000 
e0000d28 l       .text  00000000 
e0000d2c l       .text  00000000 
e0000d2e l       .text  00000000 
e0000d32 l       .text  00000000 
e0000d32 l       .text  00000000 
e0000d34 l       .text  00000000 
e0000d3a l       .text  00000000 
e0000d3a l       .text  00000000 
e0000d3e l       .text  00000000 
e0000d3e l       .text  00000000 
e0000d40 l       .text  00000000 
e0000d40 l       .text  00000000 
e0000d44 l       .text  00000000 
e0000d46 l       .text  00000000 
e0000d48 l       .text  00000000 
e0000d4a l       .text  00000000 
e0000d4a l       .text  00000000 
e0000d52 l       .text  00000000 
e0000d52 l       .text  00000000 
e0000d56 l       .text  00000000 
e0000d56 l       .text  00000000 
e0000d58 l       .text  00000000 
e0000d5c l       .text  00000000 
e0000d5e l       .text  00000000 
e0000d5e l       .text  00000000 
e0000d60 l       .text  00000000 
e0000d60 l       .text  00000000 
e0000d64 l       .text  00000000 
e0000d64 l       .text  00000000 
e0000d68 l       .text  00000000 
e0000d68 l       .text  00000000 
e0000d6a l       .text  00000000 
e0000d6a l       .text  00000000 
e0000d6e l       .text  00000000 
e0000d6e l       .text  00000000 
e0000d6e l       .text  00000000 
e0000d6e l       .text  00000000 
e0000d6e l       .text  00000000 
e0000d70 l       .text  00000000 
e0000d70 l       .text  00000000 
e0000d74 l       .text  00000000 
e0000d74 l       .text  00000000 
e0000d74 l       .text  00000000 
e0000d76 l       .text  00000000 
e0000d7a l       .text  00000000 
e0000d7a l       .text  00000000 
e0000d82 l       .text  00000000 
e0000d90 l       .text  00000000 
e0000d94 l       .text  00000000 
e0000d94 l       .text  00000000 
e0000d98 l       .text  00000000 
e0000d98 l       .text  00000000 
e0000d9a l       .text  00000000 
e0000d9e l       .text  00000000 
e0000da2 l       .text  00000000 
e0000da4 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000dac l       .text  00000000 
e0000dae l       .text  00000000 
e0000dae l       .text  00000000 
e0000db0 l       .text  00000000 
e0000db0 l       .text  00000000 
e0000db2 l       .text  00000000 
e0000db6 l       .text  00000000 
e0000db8 l       .text  00000000 
e0000dba l       .text  00000000 
e0000dba l       .text  00000000 
e0000dbe l       .text  00000000 
e0000dc2 l       .text  00000000 
e0000dc2 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dca l       .text  00000000 
e0000dca l       .text  00000000 
e0000dcc l       .text  00000000 
e0000dcc l       .text  00000000 
e0000dd2 l       .text  00000000 
e0000dd2 l       .text  00000000 
e0000dd6 l       .text  00000000 
e0000dd6 l       .text  00000000 
e0000dda l       .text  00000000 
e0000dde l       .text  00000000 
e0000de2 l       .text  00000000 
e0000de4 l       .text  00000000 
e0000de6 l       .text  00000000 
e0000de6 l       .text  00000000 
e0000de8 l       .text  00000000 
e0000de8 l       .text  00000000 
e0000dea l       .text  00000000 
e0000dee l       .text  00000000 
e0000df2 l       .text  00000000 
e0000dfc l       .text  00000000 
e0000dfc l       .text  00000000 
e0000e00 l       .text  00000000 
e0000e04 l       .text  00000000 
e0000e06 l       .text  00000000 
e0000e0a l       .text  00000000 
e0000e0c l       .text  00000000 
e0000e0e l       .text  00000000 
e0000e0e l       .text  00000000 
e0000e10 l       .text  00000000 
e0000e14 l       .text  00000000 
e0000e14 l       .text  00000000 
e0000e18 l       .text  00000000 
e0000e18 l       .text  00000000 
e0000e1c l       .text  00000000 
e0000e1e l       .text  00000000 
e0000e1e l       .text  00000000 
e0000e22 l       .text  00000000 
e0000e24 l       .text  00000000 
e0000e28 l       .text  00000000 
e0000e2a l       .text  00000000 
e0000e2e l       .text  00000000 
e0000e30 l       .text  00000000 
e0000e34 l       .text  00000000 
e0000e34 l       .text  00000000 
e0000e38 l       .text  00000000 
e0000e3a l       .text  00000000 
e0000e3a l       .text  00000000 
e0000e3e l       .text  00000000 
e0000e3e l       .text  00000000 
e0000e40 l       .text  00000000 
e0000e42 l       .text  00000000 
e0000e44 l       .text  00000000 
e0000e44 l       .text  00000000 
e0000e4a l       .text  00000000 
e0000e4c l       .text  00000000 
e0000e4c l       .text  00000000 
e0000e50 l       .text  00000000 
e0000e54 l       .text  00000000 
e0000e54 l       .text  00000000 
e0000e5c l       .text  00000000 
e0000e60 l       .text  00000000 
e0000e62 l       .text  00000000 
e0000e66 l       .text  00000000 
e0000e66 l       .text  00000000 
e0000e6a l       .text  00000000 
e0000e70 l       .text  00000000 
e0000e70 l       .text  00000000 
e0000e72 l       .text  00000000 
e0000e74 l       .text  00000000 
e0000e74 l       .text  00000000 
e0000e78 l       .text  00000000 
e0000e78 l       .text  00000000 
e0000e7c l       .text  00000000 
e0000e80 l       .text  00000000 
e0000e80 l       .text  00000000 
e0000e82 l       .text  00000000 
e0000e86 l       .text  00000000 
e0000e88 l       .text  00000000 
e0000e88 l       .text  00000000 
e0000e90 l       .text  00000000 
e0000e92 l       .text  00000000 
e0000e92 l       .text  00000000 
e0000e94 l       .text  00000000 
e0000e96 l       .text  00000000 
e0000e96 l       .text  00000000 
e0000e98 l       .text  00000000 
e0000e9a l       .text  00000000 
e0000e9c l       .text  00000000 
e0000e9e l       .text  00000000 
e0000e9e l       .text  00000000 
e0000ea0 l       .text  00000000 
e0000ea0 l       .text  00000000 
e0000ea8 l       .text  00000000 
e0000ea8 l       .text  00000000 
00000a8a l       .debug_loc     00000000 
00000ab0 l       .debug_loc     00000000 
00000ad8 l       .debug_loc     00000000 
00000afe l       .debug_loc     00000000 
00000b5b l       .debug_loc     00000000 
00000b83 l       .debug_loc     00000000 
00000ba9 l       .debug_loc     00000000 
00000bde l       .debug_loc     00000000 
00000c1e l       .debug_loc     00000000 
00000c39 l       .debug_loc     00000000 
00000c5a l       .debug_loc     00000000 
00000c75 l       .debug_loc     00000000 
00000c90 l       .debug_loc     00000000 
00000cab l       .debug_loc     00000000 
00000cc6 l       .debug_loc     00000000 
00000cee l       .debug_loc     00000000 
00000d1f l       .debug_loc     00000000 
00000d54 l       .debug_loc     00000000 
00000d7c l       .debug_loc     00000000 
00000d98 l       .debug_loc     00000000 
00000db3 l       .debug_loc     00000000 
00000dce l       .debug_loc     00000000 
00000de9 l       .debug_loc     00000000 
00000e04 l       .debug_loc     00000000 
00000e1f l       .debug_loc     00000000 
00000e3a l       .debug_loc     00000000 
00000e55 l       .debug_loc     00000000 
00000eb2 l       .debug_loc     00000000 
00000ed8 l       .debug_loc     00000000 
00000f18 l       .debug_loc     00000000 
00000f40 l       .debug_loc     00000000 
00000f66 l       .debug_loc     00000000 
00000fa6 l       .debug_loc     00000000 
00000fd8 l       .debug_loc     00000000 
00001004 l       .debug_loc     00000000 
0000101f l       .debug_loc     00000000 
0000103a l       .debug_loc     00000000 
0000105b l       .debug_loc     00000000 
00001076 l       .debug_loc     00000000 
0000109c l       .debug_loc     00000000 
000010d8 l       .debug_loc     00000000 
000010fe l       .debug_loc     00000000 
00001145 l       .debug_loc     00000000 
0000118c l       .debug_loc     00000000 
000011c8 l       .debug_loc     00000000 
000011f0 l       .debug_loc     00000000 
0000124d l       .debug_loc     00000000 
00001277 l       .debug_loc     00000000 
000012b9 l       .debug_loc     00000000 
00001342 l       .debug_loc     00000000 
0000135d l       .debug_loc     00000000 
00001383 l       .debug_loc     00000000 
000013a9 l       .debug_loc     00000000 
000013c6 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000090d l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000000f0 l       .debug_ranges  00000000 
0000092f l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
0000099c l       .debug_str     00000000 
00000f55 l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
00000943 l       .debug_str     00000000 
0000095c l       .debug_str     00000000 
0000093c l       .debug_str     00000000 
000015c0 l       .debug_str     00000000 
00000958 l       .debug_str     00000000 
0000095f l       .debug_str     00000000 
00000965 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
00000950 l       .debug_str     00000000 
00000946 l       .debug_str     00000000 
00000969 l       .debug_str     00000000 
00000f0f l       .debug_str     00000000 
00000977 l       .debug_str     00000000 
0000097f l       .debug_str     00000000 
0000098a l       .debug_str     00000000 
000009f2 l       .debug_str     00000000 
00000a5a l       .debug_str     00000000 
00000a61 l       .debug_str     00000000 
00000a69 l       .debug_str     00000000 
00001214 l       .debug_str     00000000 
00000048 l       .debug_ranges  00000000 
00000060 l       .debug_ranges  00000000 
00000078 l       .debug_ranges  00000000 
00000090 l       .debug_ranges  00000000 
000000a8 l       .debug_ranges  00000000 
000000c0 l       .debug_ranges  00000000 
000009fa l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
00000313 l       .debug_str     00000000 
00000a77 l       .debug_str     00000000 
00000a7a l       .debug_str     00000000 
00000a6d l       .debug_str     00000000 
00000a82 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
0000160a l       .debug_str     00000000 
000000d8 l       .debug_ranges  00000000 
0000069c l       .debug_str     00000000 
00000a02 l       .debug_str     00000000 
00000a09 l       .debug_str     00000000 
000009af l       .debug_str     00000000 
000009b9 l       .debug_str     00000000 
000009c6 l       .debug_str     00000000 
000009d8 l       .debug_str     00000000 
00000018 l       .debug_ranges  00000000 
00000030 l       .debug_ranges  00000000 
000009dd l       .debug_str     00000000 
00000a1e l       .debug_str     00000000 
00000a26 l       .debug_str     00000000 
00000845 l       .debug_str     00000000 
00001405 l       .debug_str     00000000 
00000f8e l       .debug_str     00000000 
00000a2c l       .debug_str     00000000 
00000a33 l       .debug_str     00000000 
00000a3e l       .debug_str     00000000 
00000a45 l       .debug_str     00000000 
00000a4c l       .debug_str     00000000 
00000a53 l       .debug_str     00000000 
0000098e l       .debug_str     00000000 
000013c3 l       .debug_str     00000000 
00000995 l       .debug_str     00000000 
000015f6 l       .debug_str     00000000 
00000c25 l       .debug_str     00000000 
00000a15 l       .debug_str     00000000 
000006a9 l       .debug_str     00000000 
00000054 l       .debug_frame   00000000 
e0000c02 l       .text  00000000 
e0000c30 l       .text  00000000 
e0000caa l       .text  00000000 
e0000d6e l       .text  00000000 
e0000ea8 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_aes_autogen.c
e0000ea8 l       .text  00000000 
e0000ea8 l       .text  00000000 
e0000ea8 l       .text  00000000 
e0000ea8 l       .text  00000000 
e0000eaa l       .text  00000000 
e0000eac l       .text  00000000 
e0000eb0 l       .text  00000000 
e0000eb2 l       .text  00000000 
e0000eb4 l       .text  00000000 
e0000eb6 l       .text  00000000 
e0000eb6 l       .text  00000000 
000013e7 l       .debug_loc     00000000 
00001402 l       .debug_loc     00000000 
0000141d l       .debug_loc     00000000 
00001438 l       .debug_loc     00000000 
00001453 l       .debug_loc     00000000 
00001474 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000a88 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000180 l       .debug_ranges  00000000 
00000238 l       .debug_str     00000000 
000001d5 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000001f1 l       .debug_str     00000000 
000001fc l       .debug_str     00000000 
0000020c l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
0000022a l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
00000aea l       .debug_str     00000000 
00000ab4 l       .debug_str     00000000 
00000ad3 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
000006b8 l       .debug_str     00000000 
00000630 l       .debug_str     00000000 
00000658 l       .debug_str     00000000 
00000af8 l       .debug_str     00000000 
00000b0f l       .debug_str     00000000 
00000b12 l       .debug_str     00000000 
00000b41 l       .debug_str     00000000 
00000b2e l       .debug_str     00000000 
00000b1d l       .debug_str     00000000 
00000b18 l       .debug_str     00000000 
00000b60 l       .debug_str     00000000 
00000b47 l       .debug_str     00000000 
00000b5c l       .debug_str     00000000 
00000b66 l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
00000b7d l       .debug_str     00000000 
00000a7d l       .debug_str     00000000 
00000d31 l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00000b91 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000b9b l       .debug_str     00000000 
00000af2 l       .debug_str     00000000 
00000bbf l       .debug_str     00000000 
00000bc9 l       .debug_str     00000000 
0000067c l       .debug_str     00000000 
0000065c l       .debug_str     00000000 
00000654 l       .debug_str     00000000 
00000baf l       .debug_str     00000000 
00000164 l       .debug_frame   00000000 
e0000eb6 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_aes.c
e0000eb6 l       .text  00000000 
e0000eb6 l       .text  00000000 
e0000eb6 l       .text  00000000 
e0000eb6 l       .text  00000000 
e0000eb8 l       .text  00000000 
e0000eba l       .text  00000000 
e0000eba l       .text  00000000 
e0000ebe l       .text  00000000 
e0000ebe l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec2 l       .text  00000000 
e0000ec2 l       .text  00000000 
e0000ec4 l       .text  00000000 
e0000ec4 l       .text  00000000 
e0000ec6 l       .text  00000000 
e0000ec6 l       .text  00000000 
e0000ec8 l       .text  00000000 
e0000ec8 l       .text  00000000 
e0000eca l       .text  00000000 
e0000ecc l       .text  00000000 
e0000ecc l       .text  00000000 
e0000ed2 l       .text  00000000 
e0000ed2 l       .text  00000000 
e0000ed6 l       .text  00000000 
e0000ed6 l       .text  00000000 
e0000ed8 l       .text  00000000 
e0000ed8 l       .text  00000000 
e0000eda l       .text  00000000 
e0000eda l       .text  00000000 
e0000ee0 l       .text  00000000 
e0000ee0 l       .text  00000000 
e0000ee2 l       .text  00000000 
e0000ee2 l       .text  00000000 
e0000ee4 l       .text  00000000 
e0000ee4 l       .text  00000000 
e0000ee6 l       .text  00000000 
e0000ee6 l       .text  00000000 
e0000ee8 l       .text  00000000 
e0000ee8 l       .text  00000000 
e0000eea l       .text  00000000 
e0000eea l       .text  00000000 
e0000eea l       .text  00000000 
e0000eea l       .text  00000000 
e0000eea l       .text  00000000 
e0000eea l       .text  00000000 
e0000ef2 l       .text  00000000 
e0000efa l       .text  00000000 
e0000efc l       .text  00000000 
e0000f02 l       .text  00000000 
e0000f06 l       .text  00000000 
e0000f08 l       .text  00000000 
e0000f0a l       .text  00000000 
e0000f0c l       .text  00000000 
e0000f0c l       .text  00000000 
e0000f10 l       .text  00000000 
e0000f10 l       .text  00000000 
e0000f14 l       .text  00000000 
e0000f14 l       .text  00000000 
e0000f1a l       .text  00000000 
e0000f1a l       .text  00000000 
e0000f1c l       .text  00000000 
e0000f1c l       .text  00000000 
e0000f1e l       .text  00000000 
e0000f22 l       .text  00000000 
e0000f22 l       .text  00000000 
e0000f26 l       .text  00000000 
e0000f26 l       .text  00000000 
e0000f28 l       .text  00000000 
e0000f28 l       .text  00000000 
e0000f30 l       .text  00000000 
e0000f34 l       .text  00000000 
e0000f34 l       .text  00000000 
e0000f36 l       .text  00000000 
e0000f36 l       .text  00000000 
e0000f3a l       .text  00000000 
e0000f3a l       .text  00000000 
e0000f3e l       .text  00000000 
e0000f42 l       .text  00000000 
e0000f42 l       .text  00000000 
e0000f44 l       .text  00000000 
e0000f44 l       .text  00000000 
e0000f48 l       .text  00000000 
e0000f4a l       .text  00000000 
e0000f4e l       .text  00000000 
e0000f4e l       .text  00000000 
e0000f50 l       .text  00000000 
e0000f54 l       .text  00000000 
e0000f58 l       .text  00000000 
e0000f58 l       .text  00000000 
e0000f5a l       .text  00000000 
e0000f5a l       .text  00000000 
e0000f5c l       .text  00000000 
e0000f5c l       .text  00000000 
e0000f64 l       .text  00000000 
e0000f64 l       .text  00000000 
e0000f66 l       .text  00000000 
e0000f66 l       .text  00000000 
e0000f68 l       .text  00000000 
e0000f68 l       .text  00000000 
e0000f6c l       .text  00000000 
e0000f6c l       .text  00000000 
e0000f70 l       .text  00000000 
e0000f70 l       .text  00000000 
e0000f72 l       .text  00000000 
e0000f72 l       .text  00000000 
e0000f74 l       .text  00000000 
e0000f74 l       .text  00000000 
e0000f76 l       .text  00000000 
e0000f76 l       .text  00000000 
e0000f7a l       .text  00000000 
e0000f7a l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f80 l       .text  00000000 
e0000f84 l       .text  00000000 
e0000f88 l       .text  00000000 
e0000f88 l       .text  00000000 
e0000f8a l       .text  00000000 
e0000f8a l       .text  00000000 
e0000f8c l       .text  00000000 
e0000f8c l       .text  00000000 
e0000f90 l       .text  00000000 
e0000f90 l       .text  00000000 
e0000f92 l       .text  00000000 
e0000f96 l       .text  00000000 
e0000f96 l       .text  00000000 
e0000f98 l       .text  00000000 
e0000f98 l       .text  00000000 
e0000f9c l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000fa4 l       .text  00000000 
e0000faa l       .text  00000000 
e0000faa l       .text  00000000 
e0000fac l       .text  00000000 
e0000fac l       .text  00000000 
e0000fae l       .text  00000000 
e0000fae l       .text  00000000 
e0000fb0 l       .text  00000000 
e0000fb0 l       .text  00000000 
e0000fb4 l       .text  00000000 
e0000fb4 l       .text  00000000 
e0000fb6 l       .text  00000000 
e0000fb6 l       .text  00000000 
e0000fba l       .text  00000000 
e0000fba l       .text  00000000 
e0000fbe l       .text  00000000 
e0000fbe l       .text  00000000 
e0000fc0 l       .text  00000000 
e0000fc6 l       .text  00000000 
e0000fc6 l       .text  00000000 
e0000fc8 l       .text  00000000 
e0000fc8 l       .text  00000000 
e0000fca l       .text  00000000 
e0000fca l       .text  00000000 
e0000fcc l       .text  00000000 
e0000fcc l       .text  00000000 
e0000fd0 l       .text  00000000 
e0000fd0 l       .text  00000000 
e0000fd2 l       .text  00000000 
e0000fd6 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fdc l       .text  00000000 
e0000fdc l       .text  00000000 
e0000fde l       .text  00000000 
e0000fde l       .text  00000000 
e0000fe0 l       .text  00000000 
e0000fe0 l       .text  00000000 
e0000fe4 l       .text  00000000 
e0000fe4 l       .text  00000000 
e0000fe6 l       .text  00000000 
e0000fe6 l       .text  00000000 
e0000fea l       .text  00000000 
e0000fea l       .text  00000000 
e0000fec l       .text  00000000 
e0000fec l       .text  00000000 
e0000fee l       .text  00000000 
e0000fee l       .text  00000000 
e0000ff4 l       .text  00000000 
e0000ff4 l       .text  00000000 
e0000ff6 l       .text  00000000 
e0000ff6 l       .text  00000000 
e0000ff8 l       .text  00000000 
e0000ff8 l       .text  00000000 
e0000ffa l       .text  00000000 
e0000ffa l       .text  00000000 
e0000ffe l       .text  00000000 
e0000ffe l       .text  00000000 
e0001000 l       .text  00000000 
e0001002 l       .text  00000000 
e0001004 l       .text  00000000 
e0001004 l       .text  00000000 
e0001006 l       .text  00000000 
e0001006 l       .text  00000000 
e000100a l       .text  00000000 
e0001010 l       .text  00000000 
e0001014 l       .text  00000000 
e0001018 l       .text  00000000 
e0001018 l       .text  00000000 
e000101a l       .text  00000000 
e000101c l       .text  00000000 
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
e0001024 l       .text  00000000 
e0001024 l       .text  00000000 
e0001026 l       .text  00000000 
e0001026 l       .text  00000000 
e000102a l       .text  00000000 
e000102a l       .text  00000000 
e0001030 l       .text  00000000 
e0001030 l       .text  00000000 
e0001032 l       .text  00000000 
e0001032 l       .text  00000000 
e0001036 l       .text  00000000 
e0001036 l       .text  00000000 
e0001038 l       .text  00000000 
e0001038 l       .text  00000000 
e000103a l       .text  00000000 
e000103a l       .text  00000000 
e000103c l       .text  00000000 
e000103c l       .text  00000000 
e000103e l       .text  00000000 
e000103e l       .text  00000000 
e0001040 l       .text  00000000 
e0001040 l       .text  00000000 
e0001044 l       .text  00000000 
e0001044 l       .text  00000000 
e000104a l       .text  00000000 
e000104a l       .text  00000000 
e000104e l       .text  00000000 
e000104e l       .text  00000000 
e0001050 l       .text  00000000 
e0001050 l       .text  00000000 
e0001052 l       .text  00000000 
e0001052 l       .text  00000000 
e0001056 l       .text  00000000 
e0001058 l       .text  00000000 
e0001058 l       .text  00000000 
e000105c l       .text  00000000 
e000105c l       .text  00000000 
e000105c l       .text  00000000 
e000105c l       .text  00000000 
e000105c l       .text  00000000 
e000105c l       .text  00000000 
e000105e l       .text  00000000 
e000105e l       .text  00000000 
e0001060 l       .text  00000000 
e0001060 l       .text  00000000 
e0001064 l       .text  00000000 
e0001064 l       .text  00000000 
e000106a l       .text  00000000 
e000106a l       .text  00000000 
e000106c l       .text  00000000 
e000106c l       .text  00000000 
e0001070 l       .text  00000000 
e0001070 l       .text  00000000 
e0001072 l       .text  00000000 
e0001072 l       .text  00000000 
e0001074 l       .text  00000000 
e0001074 l       .text  00000000 
e0001076 l       .text  00000000 
e0001076 l       .text  00000000 
e0001078 l       .text  00000000 
e0001078 l       .text  00000000 
e000107e l       .text  00000000 
e000107e l       .text  00000000 
e0001080 l       .text  00000000 
e0001080 l       .text  00000000 
e0001082 l       .text  00000000 
e0001082 l       .text  00000000 
e0001084 l       .text  00000000 
e0001084 l       .text  00000000 
e0001088 l       .text  00000000 
e0001088 l       .text  00000000 
e000108c l       .text  00000000 
e000108e l       .text  00000000 
e000108e l       .text  00000000 
e0001090 l       .text  00000000 
e0001092 l       .text  00000000 
e0001092 l       .text  00000000 
e0001092 l       .text  00000000 
e0001092 l       .text  00000000 
e0001092 l       .text  00000000 
e0001092 l       .text  00000000 
e000109a l       .text  00000000 
e00010a0 l       .text  00000000 
e00010a0 l       .text  00000000 
e00010a2 l       .text  00000000 
e00010a2 l       .text  00000000 
e00010a6 l       .text  00000000 
e00010a6 l       .text  00000000 
e00010ac l       .text  00000000 
e00010ac l       .text  00000000 
e00010ae l       .text  00000000 
e00010ae l       .text  00000000 
e00010b0 l       .text  00000000 
e00010b0 l       .text  00000000 
e00010b2 l       .text  00000000 
e00010b2 l       .text  00000000 
e00010b4 l       .text  00000000 
e00010b4 l       .text  00000000 
e00010b6 l       .text  00000000 
e00010b6 l       .text  00000000 
e00010b8 l       .text  00000000 
e00010b8 l       .text  00000000 
e00010ba l       .text  00000000 
e00010ba l       .text  00000000 
e00010bc l       .text  00000000 
e00010be l       .text  00000000 
e00010be l       .text  00000000 
e00010c2 l       .text  00000000 
e00010c2 l       .text  00000000 
e00010c4 l       .text  00000000 
e00010c4 l       .text  00000000 
e00010c6 l       .text  00000000 
e00010c6 l       .text  00000000 
e00010ca l       .text  00000000 
e00010ca l       .text  00000000 
e00010cc l       .text  00000000 
e00010ce l       .text  00000000 
e00010d0 l       .text  00000000 
e00010d0 l       .text  00000000 
e00010d0 l       .text  00000000 
e00010d0 l       .text  00000000 
e00010d0 l       .text  00000000 
e00010d0 l       .text  00000000 
e00010d8 l       .text  00000000 
e00010de l       .text  00000000 
e00010e0 l       .text  00000000 
e00010e4 l       .text  00000000 
e00010e6 l       .text  00000000 
e00010f4 l       .text  00000000 
e00010f4 l       .text  00000000 
e00010f6 l       .text  00000000 
e00010f6 l       .text  00000000 
e00010fa l       .text  00000000 
e00010fa l       .text  00000000 
e00010fc l       .text  00000000 
e0001100 l       .text  00000000 
e0001100 l       .text  00000000 
e0001102 l       .text  00000000 
e0001102 l       .text  00000000 
e0001106 l       .text  00000000 
e0001106 l       .text  00000000 
e000110a l       .text  00000000 
e000110a l       .text  00000000 
e000110c l       .text  00000000 
e000110c l       .text  00000000 
e0001110 l       .text  00000000 
e0001110 l       .text  00000000 
e0001114 l       .text  00000000 
e0001114 l       .text  00000000 
e0001116 l       .text  00000000 
e0001116 l       .text  00000000 
e000111a l       .text  00000000 
e000111a l       .text  00000000 
e000111e l       .text  00000000 
e000111e l       .text  00000000 
e0001120 l       .text  00000000 
e0001120 l       .text  00000000 
e0001124 l       .text  00000000 
e0001124 l       .text  00000000 
e0001128 l       .text  00000000 
e0001128 l       .text  00000000 
e000112a l       .text  00000000 
e000112a l       .text  00000000 
e000112e l       .text  00000000 
e000112e l       .text  00000000 
e0001132 l       .text  00000000 
e0001132 l       .text  00000000 
e0001134 l       .text  00000000 
e0001134 l       .text  00000000 
e0001138 l       .text  00000000 
e0001138 l       .text  00000000 
e000113a l       .text  00000000 
e0001142 l       .text  00000000 
e0001146 l       .text  00000000 
e0001146 l       .text  00000000 
0000148f l       .debug_loc     00000000 
000014b5 l       .debug_loc     00000000 
000014d0 l       .debug_loc     00000000 
000014ef l       .debug_loc     00000000 
0000150b l       .debug_loc     00000000 
00001529 l       .debug_loc     00000000 
0000154f l       .debug_loc     00000000 
00001575 l       .debug_loc     00000000 
0000159b l       .debug_loc     00000000 
000015c1 l       .debug_loc     00000000 
000015dc l       .debug_loc     00000000 
00001603 l       .debug_loc     00000000 
00001625 l       .debug_loc     00000000 
00001661 l       .debug_loc     00000000 
0000167c l       .debug_loc     00000000 
0000169f l       .debug_loc     00000000 
000016c1 l       .debug_loc     00000000 
000016dc l       .debug_loc     00000000 
000016f7 l       .debug_loc     00000000 
00001719 l       .debug_loc     00000000 
0000173b l       .debug_loc     00000000 
0000175b l       .debug_loc     00000000 
0000177b l       .debug_loc     00000000 
000017ab l       .debug_loc     00000000 
000017cd l       .debug_loc     00000000 
000017ed l       .debug_loc     00000000 
0000180d l       .debug_loc     00000000 
00001833 l       .debug_loc     00000000 
00001859 l       .debug_loc     00000000 
00001881 l       .debug_loc     00000000 
000018ce l       .debug_loc     00000000 
000018e9 l       .debug_loc     00000000 
0000190b l       .debug_loc     00000000 
0000192c l       .debug_loc     00000000 
0000195f l       .debug_loc     00000000 
00001985 l       .debug_loc     00000000 
000019a0 l       .debug_loc     00000000 
000019c6 l       .debug_loc     00000000 
000019f9 l       .debug_loc     00000000 
00001a1f l       .debug_loc     00000000 
00001a3a l       .debug_loc     00000000 
00001a60 l       .debug_loc     00000000 
00001ab0 l       .debug_loc     00000000 
00001ae4 l       .debug_loc     00000000 
00001b0a l       .debug_loc     00000000 
00001b3e l       .debug_loc     00000000 
00001b64 l       .debug_loc     00000000 
00001b8a l       .debug_loc     00000000 
00001ba9 l       .debug_loc     00000000 
00001bc5 l       .debug_loc     00000000 
00001be0 l       .debug_loc     00000000 
00001c08 l       .debug_loc     00000000 
00001c58 l       .debug_loc     00000000 
00001c8c l       .debug_loc     00000000 
00001cb2 l       .debug_loc     00000000 
00001ce6 l       .debug_loc     00000000 
00001d0c l       .debug_loc     00000000 
00001d27 l       .debug_loc     00000000 
00001d42 l       .debug_loc     00000000 
00001d92 l       .debug_loc     00000000 
00001dc6 l       .debug_loc     00000000 
00001dfa l       .debug_loc     00000000 
00001e20 l       .debug_loc     00000000 
00001e51 l       .debug_loc     00000000 
00001e77 l       .debug_loc     00000000 
00001ea8 l       .debug_loc     00000000 
00001ece l       .debug_loc     00000000 
00001ee9 l       .debug_loc     00000000 
00001f1c l       .debug_loc     00000000 
00001f37 l       .debug_loc     00000000 
00001f68 l       .debug_loc     00000000 
00001f9b l       .debug_loc     00000000 
00001fc2 l       .debug_loc     00000000 
00001fdd l       .debug_loc     00000000 
00002004 l       .debug_loc     00000000 
0000201f l       .debug_loc     00000000 
00002062 l       .debug_loc     00000000 
00002096 l       .debug_loc     00000000 
000020ca l       .debug_loc     00000000 
000020f0 l       .debug_loc     00000000 
00002116 l       .debug_loc     00000000 
0000213c l       .debug_loc     00000000 
0000216b l       .debug_loc     00000000 
00002186 l       .debug_loc     00000000 
000021ee l       .debug_loc     00000000 
00002214 l       .debug_loc     00000000 
0000223a l       .debug_loc     00000000 
00002255 l       .debug_loc     00000000 
00002270 l       .debug_loc     00000000 
0000228b l       .debug_loc     00000000 
000022a6 l       .debug_loc     00000000 
000022c1 l       .debug_loc     00000000 
000022dc l       .debug_loc     00000000 
000022f7 l       .debug_loc     00000000 
00002312 l       .debug_loc     00000000 
0000232d l       .debug_loc     00000000 
00002348 l       .debug_loc     00000000 
00002363 l       .debug_loc     00000000 
000023b3 l       .debug_loc     00000000 
000023e7 l       .debug_loc     00000000 
0000241b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000bd8 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000378 l       .debug_ranges  00000000 
00000238 l       .debug_str     00000000 
000001d5 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000001f1 l       .debug_str     00000000 
000001fc l       .debug_str     00000000 
0000020c l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
0000022a l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
000002f4 l       .debug_str     00000000 
000002c4 l       .debug_str     00000000 
000002dc l       .debug_str     00000000 
00000351 l       .debug_str     00000000 
00000306 l       .debug_str     00000000 
00000315 l       .debug_str     00000000 
00000324 l       .debug_str     00000000 
00000333 l       .debug_str     00000000 
00000342 l       .debug_str     00000000 
00000388 l       .debug_str     00000000 
0000035e l       .debug_str     00000000 
0000036c l       .debug_str     00000000 
0000037a l       .debug_str     00000000 
000003d3 l       .debug_str     00000000 
0000039b l       .debug_str     00000000 
000003b6 l       .debug_str     00000000 
0000041a l       .debug_str     00000000 
000003ec l       .debug_str     00000000 
00000407 l       .debug_str     00000000 
00000475 l       .debug_str     00000000 
0000042f l       .debug_str     00000000 
00000445 l       .debug_str     00000000 
0000045d l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
00000bf4 l       .debug_str     00000000 
00000c08 l       .debug_str     00000000 
00000c27 l       .debug_str     00000000 
00000c42 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
0000048c l       .debug_str     00000000 
0000049e l       .debug_str     00000000 
000004b1 l       .debug_str     00000000 
000004c9 l       .debug_str     00000000 
000004e2 l       .debug_str     00000000 
000004fa l       .debug_str     00000000 
00000517 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000c6b l       .debug_str     00000000 
00000a7d l       .debug_str     00000000 
00000d31 l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00000b91 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000c7e l       .debug_str     00000000 
00000b5c l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
00000c94 l       .debug_str     00000000 
00000658 l       .debug_str     00000000 
00000cad l       .debug_str     00000000 
00000cb6 l       .debug_str     00000000 
0000065c l       .debug_str     00000000 
00000654 l       .debug_str     00000000 
00000630 l       .debug_str     00000000 
00000cc2 l       .debug_str     00000000 
00000b0f l       .debug_str     00000000 
00000b66 l       .debug_str     00000000 
00000b7d l       .debug_str     00000000 
00000b41 l       .debug_str     00000000 
00000cd6 l       .debug_str     00000000 
00000701 l       .debug_str     00000000 
00000cb2 l       .debug_str     00000000 
00000ce9 l       .debug_str     00000000 
00000cf2 l       .debug_str     00000000 
000007e6 l       .debug_str     00000000 
00000666 l       .debug_str     00000000 
0000067c l       .debug_str     00000000 
0000089c l       .debug_str     00000000 
000007de l       .debug_str     00000000 
000003e2 l       .debug_str     00000000 
00000359 l       .debug_str     00000000 
00000747 l       .debug_str     00000000 
000003db l       .debug_str     00000000 
00000422 l       .debug_str     00000000 
0000047d l       .debug_str     00000000 
000007af l       .debug_str     00000000 
000007c4 l       .debug_str     00000000 
000007d0 l       .debug_str     00000000 
00000724 l       .debug_str     00000000 
00000738 l       .debug_str     00000000 
0000074f l       .debug_str     00000000 
00000764 l       .debug_str     00000000 
0000077f l       .debug_str     00000000 
00000796 l       .debug_str     00000000 
00000af8 l       .debug_str     00000000 
00000b12 l       .debug_str     00000000 
00000b2e l       .debug_str     00000000 
00000b1d l       .debug_str     00000000 
00000b18 l       .debug_str     00000000 
00000b60 l       .debug_str     00000000 
00000b47 l       .debug_str     00000000 
00000cfc l       .debug_str     00000000 
00000d0a l       .debug_str     00000000 
00000d12 l       .debug_str     00000000 
00000842 l       .debug_str     00000000 
00000d23 l       .debug_str     00000000 
00000d2c l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
00000716 l       .debug_str     00000000 
00000884 l       .debug_str     00000000 
00000dcf l       .debug_str     00000000 
0000023c l       .debug_str     00000000 
00000198 l       .debug_ranges  00000000 
000001b0 l       .debug_ranges  00000000 
000001e0 l       .debug_ranges  00000000 
000001c8 l       .debug_ranges  00000000 
00000210 l       .debug_ranges  00000000 
000001f8 l       .debug_ranges  00000000 
00000248 l       .debug_ranges  00000000 
00000228 l       .debug_ranges  00000000 
00000868 l       .debug_str     00000000 
00000d38 l       .debug_str     00000000 
00000835 l       .debug_str     00000000 
00000288 l       .debug_ranges  00000000 
00000268 l       .debug_ranges  00000000 
00000d48 l       .debug_str     00000000 
00000d59 l       .debug_str     00000000 
00000854 l       .debug_str     00000000 
000002c0 l       .debug_ranges  00000000 
000002a8 l       .debug_ranges  00000000 
00000dad l       .debug_str     00000000 
00000ddf l       .debug_str     00000000 
00000dea l       .debug_str     00000000 
00000df6 l       .debug_str     00000000 
00000e02 l       .debug_str     00000000 
000002f8 l       .debug_ranges  00000000 
000002e0 l       .debug_ranges  00000000 
00000328 l       .debug_ranges  00000000 
00000310 l       .debug_ranges  00000000 
00000c63 l       .debug_str     00000000 
00000d6b l       .debug_str     00000000 
00000d77 l       .debug_str     00000000 
00000d87 l       .debug_str     00000000 
00000d97 l       .debug_str     00000000 
00000822 l       .debug_str     00000000 
000006fd l       .debug_str     00000000 
00000dc2 l       .debug_str     00000000 
00000358 l       .debug_ranges  00000000 
00000340 l       .debug_ranges  00000000 
00000888 l       .debug_str     00000000 
000007f9 l       .debug_str     00000000 
0000087d l       .debug_str     00000000 
000007f2 l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000dd2 l       .debug_str     00000000 
0000080b l       .debug_str     00000000 
000008c0 l       .debug_str     00000000 
00000847 l       .debug_str     00000000 
00000e0f l       .debug_str     00000000 
0000066b l       .debug_str     00000000 
00000198 l       .debug_frame   00000000 
e0000eea l       .text  00000000 
e0001022 l       .text  00000000 
e000105c l       .text  00000000 
e0001092 l       .text  00000000 
e00010d0 l       .text  00000000 
e0001146 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e0001146 l       .text  00000000 
e0001146 l       .text  00000000 
e0001146 l       .text  00000000 
e0001148 l       .text  00000000 
e000114a l       .text  00000000 
e0001150 l       .text  00000000 
e0001154 l       .text  00000000 
e0001158 l       .text  00000000 
e000115c l       .text  00000000 
e000115c l       .text  00000000 
e0001166 l       .text  00000000 
e0001168 l       .text  00000000 
e0001168 l       .text  00000000 
e000116a l       .text  00000000 
e000116a l       .text  00000000 
e0001170 l       .text  00000000 
e0001170 l       .text  00000000 
e000117a l       .text  00000000 
e000117c l       .text  00000000 
e000117c l       .text  00000000 
e0001190 l       .text  00000000 
e0001190 l       .text  00000000 
e0001192 l       .text  00000000 
e0001192 l       .text  00000000 
e000119c l       .text  00000000 
e000119e l       .text  00000000 
e000119e l       .text  00000000 
e00011b2 l       .text  00000000 
e00011b2 l       .text  00000000 
e00011b4 l       .text  00000000 
e00028c0 l     O .logs.fields   00000014 test_status_set.kLogFields.2
e00011b4 l       .text  00000000 
e00011c0 l       .text  00000000 
e00011c0 l       .text  00000000 
e00011ca l       .text  00000000 
e00011cc l       .text  00000000 
e00011cc l       .text  00000000 
e00028ac l     O .logs.fields   00000014 test_status_set.kLogFields
e00011d4 l       .text  00000000 
e00011e0 l       .text  00000000 
e00011e0 l       .text  00000000 
e00011ea l       .text  00000000 
e00011ec l       .text  00000000 
e00011ec l       .text  00000000 
e00011f4 l       .text  00000000 
e00011f4 l       .text  00000000 
e00011f4 l       .text  00000000 
00002441 l       .debug_loc     00000000 
0000245f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000e21 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000006f1 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
000002b8 l       .debug_str     00000000 
0000014b l       .debug_str     00000000 
00000156 l       .debug_str     00000000 
00000113 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
0000105e l       .debug_str     00000000 
0000013e l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
0000010f l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000eb l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000243 l       .debug_str     00000000 
00000258 l       .debug_str     00000000 
00000271 l       .debug_str     00000000 
00000283 l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002a6 l       .debug_str     00000000 
00000e4f l       .debug_str     00000000 
00000e76 l       .debug_str     00000000 
00000e68 l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00000a7d l       .debug_str     00000000 
00000b7d l       .debug_str     00000000 
00000d31 l       .debug_str     00000000 
00000b41 l       .debug_str     00000000 
00000b91 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
000006da l       .debug_str     00000000 
000006c5 l       .debug_str     00000000 
00000e8e l       .debug_str     00000000 
00000248 l       .debug_frame   00000000 
e00011f4 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
e00011f4 l       .text  00000000 
e00011f4 l       .text  00000000 
e00011f4 l       .text  00000000 
e00011f4 l       .text  00000000 
e00011f8 l       .text  00000000 
e00011f8 l       .text  00000000 
e00011fa l       .text  00000000 
e00011fa l       .text  00000000 
00002472 l       .debug_loc     00000000 
0000248d l       .debug_loc     00000000 
000024b4 l       .debug_loc     00000000 
000024db l       .debug_loc     00000000 
000024f7 l       .debug_loc     00000000 
00002524 l       .debug_loc     00000000 
0000254b l       .debug_loc     00000000 
00002572 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000e94 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000003c8 l       .debug_ranges  00000000 
00000562 l       .debug_str     00000000 
0000054b l       .debug_str     00000000 
000005e4 l       .debug_str     00000000 
0000060d l       .debug_str     00000000 
00000602 l       .debug_str     00000000 
000005f5 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
00000ed2 l       .debug_str     00000000 
000005df l       .debug_str     00000000 
0000071e l       .debug_str     00000000 
00000eb8 l       .debug_str     00000000 
00000eb1 l       .debug_str     00000000 
00000ebf l       .debug_str     00000000 
00000e8e l       .debug_str     00000000 
00000ee3 l       .debug_str     00000000 
00000274 l       .debug_frame   00000000 
e00011fa l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
e00011fa l       .text  00000000 
e00011fa l       .text  00000000 
e00011fa l       .text  00000000 
e00011fc l       .text  00000000 
e0001202 l       .text  00000000 
e0001204 l       .text  00000000 
e0001212 l       .text  00000000 
e000121c l       .text  00000000 
e0001222 l       .text  00000000 
e0001222 l       .text  00000000 
e0001224 l       .text  00000000 
e0001228 l       .text  00000000 
e0001228 l       .text  00000000 
e0001232 l       .text  00000000 
e0001232 l       .text  00000000 
e0001234 l       .text  00000000 
e0001238 l       .text  00000000 
e0001238 l       .text  00000000 
e000123a l       .text  00000000 
e000123a l       .text  00000000 
e000123c l       .text  00000000 
e000123c l       .text  00000000 
e0001240 l       .text  00000000 
e0001240 l       .text  00000000 
e0001246 l       .text  00000000 
e0001254 l       .text  00000000 
e0001254 l       .text  00000000 
e0002724 l     O .bss   00000002 base_log_internal_core.global_log_counter
e000125c l       .text  00000000 
e0001268 l       .text  00000000 
e000126a l       .text  00000000 
e0001274 l       .text  00000000 
e0001274 l       .text  00000000 
e0001280 l       .text  00000000 
e0001280 l       .text  00000000 
e0001282 l       .text  00000000 
e0001284 l       .text  00000000 
e0001288 l       .text  00000000 
e0001288 l       .text  00000000 
e0001292 l       .text  00000000 
e0001292 l       .text  00000000 
e000129c l       .text  00000000 
e000129c l       .text  00000000 
e000129c l       .text  00000000 
e000129c l       .text  00000000 
e000129c l       .text  00000000 
e000129e l       .text  00000000 
e00012a4 l       .text  00000000 
e00012a4 l       .text  00000000 
e00012ae l       .text  00000000 
e00012ae l       .text  00000000 
e00012b4 l       .text  00000000 
e00012b4 l       .text  00000000 
e00012b8 l       .text  00000000 
e00012b8 l       .text  00000000 
e00012ba l       .text  00000000 
e00012ba l       .text  00000000 
e00012bc l       .text  00000000 
e00012bc l       .text  00000000 
e00012be l       .text  00000000 
e00012c2 l       .text  00000000 
e00012c6 l       .text  00000000 
e00012c8 l       .text  00000000 
e00012c8 l       .text  00000000 
e00012ca l       .text  00000000 
e00012ca l       .text  00000000 
e00012cc l       .text  00000000 
e00012cc l       .text  00000000 
e00012d0 l       .text  00000000 
e00012d0 l       .text  00000000 
0000258e l       .debug_loc     00000000 
000025b6 l       .debug_loc     00000000 
000025d1 l       .debug_loc     00000000 
0000260d l       .debug_loc     00000000 
00002629 l       .debug_loc     00000000 
00002644 l       .debug_loc     00000000 
0000265f l       .debug_loc     00000000 
0000267a l       .debug_loc     00000000 
000026b8 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000ef5 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000003f0 l       .debug_ranges  00000000 
000006da l       .debug_str     00000000 
00000f11 l       .debug_str     00000000 
00000f69 l       .debug_str     00000000 
00000f6d l       .debug_str     00000000 
00000f7b l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000a15 l       .debug_str     00000000 
000006a9 l       .debug_str     00000000 
0000010f l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000eb l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000f24 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000f2e l       .debug_str     00000000 
00000113 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
00000f41 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000f48 l       .debug_str     00000000 
00000f50 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
00000f5c l       .debug_str     00000000 
00000b7d l       .debug_str     00000000 
00000a7d l       .debug_str     00000000 
00000d31 l       .debug_str     00000000 
00000b41 l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00000b91 l       .debug_str     00000000 
000006c5 l       .debug_str     00000000 
0000013e l       .debug_str     00000000 
00000f85 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
00000156 l       .debug_str     00000000 
0000014b l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
0000105e l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
00000950 l       .debug_str     00000000 
00000946 l       .debug_str     00000000 
000002d4 l       .debug_frame   00000000 
e000129c l       .text  00000000 
e00012d0 l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
e00012d0 l     F .text  00000004 base_dev_null
e0002728 l     O .bss   00000008 base_stdout
e00012d0 l       .text  00000000 
e00012d0 l       .text  00000000 
e00012d0 l       .text  00000000 
e00012d2 l       .text  00000000 
e00012d2 l       .text  00000000 
e00012d4 l       .text  00000000 
e00012d4 l       .text  00000000 
e00012d4 l       .text  00000000 
e00012d4 l       .text  00000000 
e00012d4 l       .text  00000000 
e00012d6 l       .text  00000000 
e00012d8 l       .text  00000000 
e00012e6 l       .text  00000000 
e00012ee l       .text  00000000 
e00012ee l       .text  00000000 
e00012f4 l       .text  00000000 
e00012f4 l       .text  00000000 
e00012f6 l       .text  00000000 
e00012f6 l       .text  00000000 
e00012f8 l       .text  00000000 
e00012f8 l       .text  00000000 
e00012fc l       .text  00000000 
e00012fe l       .text  00000000 
e0001300 l       .text  00000000 
e0001300 l       .text  00000000 
e0001306 l       .text  00000000 
e0001306 l       .text  00000000 
e0001306 l       .text  00000000 
e0001306 l       .text  00000000 
e0001306 l       .text  00000000 
e000130e l       .text  00000000 
e0001314 l       .text  00000000 
e0001314 l       .text  00000000 
e0001316 l       .text  00000000 
e0001316 l       .text  00000000 
e000131c l       .text  00000000 
e000131e l       .text  00000000 
e0001320 l       .text  00000000 
e0001320 l       .text  00000000 
e0001320 l       .text  00000000 
e0001320 l       .text  00000000 
e0001320 l       .text  00000000 
e0001320 l       .text  00000000 
e0001322 l       .text  00000000 
e000133c l       .text  00000000 
e000133e l       .text  00000000 
e0001340 l       .text  00000000 
e0001342 l       .text  00000000 
e0001344 l       .text  00000000 
e0001346 l       .text  00000000 
e0001348 l       .text  00000000 
e0001350 l       .text  00000000 
e0001350 l       .text  00000000 
e0001352 l       .text  00000000 
e0001352 l       .text  00000000 
e0001356 l       .text  00000000 
e000135a l       .text  00000000 
e000136e l       .text  00000000 
e000136e l       .text  00000000 
e0001378 l       .text  00000000 
e000137c l       .text  00000000 
e0001380 l       .text  00000000 
e0001382 l       .text  00000000 
e0001384 l       .text  00000000 
e0001384 l       .text  00000000 
e0001386 l       .text  00000000 
e0001388 l       .text  00000000 
e000138e l       .text  00000000 
e000138e l       .text  00000000 
e0001390 l       .text  00000000 
e0001390 l       .text  00000000 
e0001394 l       .text  00000000 
e0001394 l       .text  00000000 
e00013a0 l       .text  00000000 
e00013a4 l       .text  00000000 
e00013a4 l       .text  00000000 
e00013b0 l       .text  00000000 
e00013b0 l       .text  00000000 
e00013b8 l       .text  00000000 
e00013b8 l       .text  00000000 
e00013bc l       .text  00000000 
e00013bc l       .text  00000000 
e00013ca l       .text  00000000 
e00013ca l       .text  00000000 
e00013ce l       .text  00000000 
e00013d6 l       .text  00000000 
e00013da l       .text  00000000 
e00013da l       .text  00000000 
e00013de l       .text  00000000 
e00013e4 l       .text  00000000 
e00013e8 l       .text  00000000 
e00013ea l       .text  00000000 
e00013ee l       .text  00000000 
e00013ee l       .text  00000000 
e00013f2 l       .text  00000000 
e00013f8 l       .text  00000000 
e00013f8 l       .text  00000000 
e00013fc l       .text  00000000 
e0001410 l       .text  00000000 
e0001410 l       .text  00000000 
e0001412 l       .text  00000000 
e0001418 l       .text  00000000 
e000141c l       .text  00000000 
e0001420 l       .text  00000000 
e0001420 l       .text  00000000 
e0001428 l       .text  00000000 
e000142a l       .text  00000000 
e0001438 l       .text  00000000 
e0001438 l       .text  00000000 
e000143c l       .text  00000000 
e0001448 l       .text  00000000 
e0001448 l       .text  00000000 
e000144c l       .text  00000000 
e000144c l       .text  00000000 
e000145a l       .text  00000000 
e000145a l       .text  00000000 
e000145c l       .text  00000000 
e0001460 l       .text  00000000 
e0001460 l       .text  00000000 
e0001464 l       .text  00000000 
e00024a0 l     O .rodata        00000010 kDigitsLow
e0001476 l       .text  00000000 
e0001476 l       .text  00000000 
e000147e l       .text  00000000 
e0001486 l       .text  00000000 
e0001486 l       .text  00000000 
e0001490 l       .text  00000000 
e0001490 l       .text  00000000 
e0001494 l       .text  00000000 
e0001494 l       .text  00000000 
e000149e l       .text  00000000 
e000149e l       .text  00000000 
e00014a6 l       .text  00000000 
e00014a6 l       .text  00000000 
e00014aa l       .text  00000000 
e00024cd l     O .rodata        00000010 kDigitsHigh
e00014b4 l       .text  00000000 
e00014b4 l       .text  00000000 
e00014be l       .text  00000000 
e00014be l       .text  00000000 
e00014c2 l       .text  00000000 
e00014cc l       .text  00000000 
e00014cc l       .text  00000000 
e00014d0 l       .text  00000000 
e00014da l       .text  00000000 
e00014da l       .text  00000000 
e00014e2 l       .text  00000000 
e00014e2 l       .text  00000000 
e00014e6 l       .text  00000000 
e00014f0 l       .text  00000000 
e00014f0 l       .text  00000000 
e00014fa l       .text  00000000 
e00014fe l       .text  00000000 
e0001502 l       .text  00000000 
e0001502 l       .text  00000000 
e000150e l       .text  00000000 
e000150e l       .text  00000000 
e0001512 l       .text  00000000 
e000151c l       .text  00000000 
e0001520 l       .text  00000000 
e0001520 l       .text  00000000 
e0001522 l       .text  00000000 
e0001522 l       .text  00000000 
e0001526 l       .text  00000000 
e0001526 l       .text  00000000 
e000152a l       .text  00000000 
e0001534 l       .text  00000000 
e0001534 l       .text  00000000 
e0001538 l       .text  00000000 
e0001544 l       .text  00000000 
e0001544 l       .text  00000000 
e0001548 l       .text  00000000 
e0001548 l       .text  00000000 
e0001556 l       .text  00000000 
e0001556 l       .text  00000000 
e0001560 l       .text  00000000 
e0001560 l       .text  00000000 
e0001564 l       .text  00000000 
e0001564 l       .text  00000000 
e0001892 l     F .text  0000007e write_digits
e000157a l       .text  00000000 
e000157a l       .text  00000000 
e0001580 l       .text  00000000 
e0001580 l       .text  00000000 
e000158a l       .text  00000000 
e000158a l       .text  00000000 
e000158c l       .text  00000000 
e0001596 l       .text  00000000 
e0001596 l       .text  00000000 
e00015a0 l       .text  00000000 
e00015a0 l       .text  00000000 
e00015a2 l       .text  00000000 
e00015a2 l       .text  00000000 
e00015a4 l       .text  00000000 
e00015a4 l       .text  00000000 
e00015a8 l       .text  00000000 
e00015a8 l       .text  00000000 
e00015ac l       .text  00000000 
e00015ae l       .text  00000000 
e00015b2 l       .text  00000000 
e00015b2 l       .text  00000000 
e00015b6 l       .text  00000000 
e00015b6 l       .text  00000000 
e00015c2 l       .text  00000000 
e00015c2 l       .text  00000000 
e00015c4 l       .text  00000000 
e00015c4 l       .text  00000000 
e00015c6 l       .text  00000000 
e00015c6 l       .text  00000000 
e00015ce l       .text  00000000 
e00015ce l       .text  00000000 
e00015d2 l       .text  00000000 
e00015d2 l       .text  00000000 
e00015e0 l       .text  00000000 
e00015e0 l       .text  00000000 
e00015e2 l       .text  00000000 
e00015f0 l       .text  00000000 
e00015f0 l       .text  00000000 
e00015f4 l       .text  00000000 
e00015f4 l       .text  00000000 
e00015f8 l       .text  00000000 
e00015f8 l       .text  00000000 
e0001606 l       .text  00000000 
e0001606 l       .text  00000000 
e000160a l       .text  00000000 
e000160a l       .text  00000000 
e0001612 l       .text  00000000 
e0001612 l       .text  00000000 
e0001614 l       .text  00000000 
e0001614 l       .text  00000000 
e0001616 l       .text  00000000 
e0001616 l       .text  00000000 
e000162a l       .text  00000000 
e000162a l       .text  00000000 
e000162c l       .text  00000000 
e000163a l       .text  00000000 
e000163a l       .text  00000000 
e000163c l       .text  00000000 
e000163c l       .text  00000000 
e000163e l       .text  00000000 
e0001646 l       .text  00000000 
e000164a l       .text  00000000 
e000164c l       .text  00000000 
e0001656 l       .text  00000000 
e0001656 l       .text  00000000 
e000165a l       .text  00000000 
e0001664 l       .text  00000000 
e0001664 l       .text  00000000 
e0001668 l       .text  00000000 
e0001674 l       .text  00000000 
e0001674 l       .text  00000000 
e0001678 l       .text  00000000 
e0001678 l       .text  00000000 
e0001682 l       .text  00000000 
e0001682 l       .text  00000000 
e000168a l       .text  00000000 
e000168a l       .text  00000000 
e000168e l       .text  00000000 
e0001696 l       .text  00000000 
e0001696 l       .text  00000000 
e00016a0 l       .text  00000000 
e00016a0 l       .text  00000000 
e00016aa l       .text  00000000 
e00016aa l       .text  00000000 
e00016ae l       .text  00000000 
e00016b6 l       .text  00000000 
e00016b6 l       .text  00000000 
e00016c0 l       .text  00000000 
e00016c2 l       .text  00000000 
e00016c2 l       .text  00000000 
e00016c6 l       .text  00000000 
e00016d0 l       .text  00000000 
e00016d0 l       .text  00000000 
e00016d8 l       .text  00000000 
e00016d8 l       .text  00000000 
e00016dc l       .text  00000000 
e00016e4 l       .text  00000000 
e00016e4 l       .text  00000000 
e00017ae l     F .text  000000e4 hex_dump
e00016ee l       .text  00000000 
e00016f0 l       .text  00000000 
e00024dd l     O .rodata        0000000f kUnknownSpec
e00016f0 l       .text  00000000 
e00016fa l       .text  00000000 
e00016fa l       .text  00000000 
e00016fe l       .text  00000000 
e0001700 l       .text  00000000 
e0001700 l       .text  00000000 
e0001704 l       .text  00000000 
e000170a l       .text  00000000 
e000170a l       .text  00000000 
e000170e l       .text  00000000 
e000171a l       .text  00000000 
e000171a l       .text  00000000 
e000171c l       .text  00000000 
e000171c l       .text  00000000 
e0001730 l       .text  00000000 
e0001730 l       .text  00000000 
e0001734 l       .text  00000000 
e0001742 l       .text  00000000 
e0001742 l       .text  00000000 
e0001746 l       .text  00000000 
e0001746 l       .text  00000000 
e000174c l       .text  00000000 
e000174c l       .text  00000000 
e000174e l       .text  00000000 
e000174e l       .text  00000000 
e0001750 l       .text  00000000 
e0001750 l       .text  00000000 
e0001758 l       .text  00000000 
e000175a l       .text  00000000 
e000175c l       .text  00000000 
e0001762 l       .text  00000000 
e0001762 l       .text  00000000 
e000176e l       .text  00000000 
e00024b0 l     O .rodata        00000011 kErrorNul
e000176e l       .text  00000000 
e0001778 l       .text  00000000 
e0001778 l       .text  00000000 
e000177c l       .text  00000000 
e0001780 l       .text  00000000 
e0001782 l       .text  00000000 
e0001782 l       .text  00000000 
e0001792 l       .text  00000000 
e0001796 l       .text  00000000 
e00017a2 l       .text  00000000 
e00024c1 l     O .rodata        0000000c kErrorTooWide
e00017a2 l       .text  00000000 
e00017ae l       .text  00000000 
e00017ae l       .text  00000000 
e00017ae l       .text  00000000 
e00017ae l       .text  00000000 
e00017ae l       .text  00000000 
e00017ae l       .text  00000000 
e00017b0 l       .text  00000000 
e00017c8 l       .text  00000000 
e00017ca l       .text  00000000 
e00017cc l       .text  00000000 
e00017ce l       .text  00000000 
e00017d0 l       .text  00000000 
e00017d4 l       .text  00000000 
e00017d4 l       .text  00000000 
e00017d8 l       .text  00000000 
e00017dc l       .text  00000000 
e00017dc l       .text  00000000 
e00017e6 l       .text  00000000 
e00017e6 l       .text  00000000 
e00017e8 l       .text  00000000 
e00017ea l       .text  00000000 
e00017f0 l       .text  00000000 
e00017f0 l       .text  00000000 
e00017f4 l       .text  00000000 
e00017f8 l       .text  00000000 
e00017f8 l       .text  00000000 
e0001800 l       .text  00000000 
e0001800 l       .text  00000000 
e0001802 l       .text  00000000 
e0001804 l       .text  00000000 
e0001804 l       .text  00000000 
e0001806 l       .text  00000000 
e0001806 l       .text  00000000 
e000180c l       .text  00000000 
e000180c l       .text  00000000 
e000180e l       .text  00000000 
e000180e l       .text  00000000 
e0001812 l       .text  00000000 
e0001816 l       .text  00000000 
e000181c l       .text  00000000 
e000181c l       .text  00000000 
e0001822 l       .text  00000000 
e000182a l       .text  00000000 
e000182a l       .text  00000000 
e000182c l       .text  00000000 
e0001830 l       .text  00000000 
e0001834 l       .text  00000000 
e000183a l       .text  00000000 
e000183e l       .text  00000000 
e0001842 l       .text  00000000 
e0001844 l       .text  00000000 
e000184a l       .text  00000000 
e000184c l       .text  00000000 
e0001854 l       .text  00000000 
e000185a l       .text  00000000 
e000185e l       .text  00000000 
e000185e l       .text  00000000 
e0001860 l       .text  00000000 
e0001862 l       .text  00000000 
e0001862 l       .text  00000000 
e0001864 l       .text  00000000 
e0001866 l       .text  00000000 
e000186a l       .text  00000000 
e000186a l       .text  00000000 
e000186c l       .text  00000000 
e0001872 l       .text  00000000 
e0001872 l       .text  00000000 
e0001874 l       .text  00000000 
e000187c l       .text  00000000 
e000187e l       .text  00000000 
e0001882 l       .text  00000000 
e0001884 l       .text  00000000 
e0001886 l       .text  00000000 
e0001888 l       .text  00000000 
e0001892 l       .text  00000000 
e0001892 l       .text  00000000 
e0001892 l       .text  00000000 
e0001892 l       .text  00000000 
e0001892 l       .text  00000000 
e0001894 l       .text  00000000 
e0001896 l       .text  00000000 
e0001898 l       .text  00000000 
e0001898 l       .text  00000000 
e000189a l       .text  00000000 
e000189c l       .text  00000000 
e00018a0 l       .text  00000000 
e00018a0 l       .text  00000000 
e00018a2 l       .text  00000000 
e00018a2 l       .text  00000000 
e00018ae l       .text  00000000 
e00018ae l       .text  00000000 
e00018b0 l       .text  00000000 
e00018b4 l       .text  00000000 
e00018bc l       .text  00000000 
e00018bc l       .text  00000000 
e00018be l       .text  00000000 
e00018c2 l       .text  00000000 
e00018c6 l       .text  00000000 
e00018c6 l       .text  00000000 
e00018c8 l       .text  00000000 
e00018c8 l       .text  00000000 
e00018cc l       .text  00000000 
e00018d2 l       .text  00000000 
e00018d2 l       .text  00000000 
e00018d4 l       .text  00000000 
e00018d6 l       .text  00000000 
e00018d8 l       .text  00000000 
e00018dc l       .text  00000000 
e00018e0 l       .text  00000000 
e00018e4 l       .text  00000000 
e00018e4 l       .text  00000000 
e00018ee l       .text  00000000 
e00018f2 l       .text  00000000 
e00018f4 l       .text  00000000 
e00018f8 l       .text  00000000 
e00018fc l       .text  00000000 
e00018fe l       .text  00000000 
e0001900 l       .text  00000000 
e0001902 l       .text  00000000 
e0001902 l       .text  00000000 
e0001908 l       .text  00000000 
e000190a l       .text  00000000 
e000190a l       .text  00000000 
e0001910 l       .text  00000000 
e0001910 l       .text  00000000 
000026d5 l       .debug_loc     00000000 
00002701 l       .debug_loc     00000000 
0000271c l       .debug_loc     00000000 
00002742 l       .debug_loc     00000000 
0000276e l       .debug_loc     00000000 
0000279f l       .debug_loc     00000000 
000027d0 l       .debug_loc     00000000 
0000280c l       .debug_loc     00000000 
0000283d l       .debug_loc     00000000 
00002864 l       .debug_loc     00000000 
00002895 l       .debug_loc     00000000 
000028b0 l       .debug_loc     00000000 
000028cc l       .debug_loc     00000000 
000028e7 l       .debug_loc     00000000 
0000290d l       .debug_loc     00000000 
00002933 l       .debug_loc     00000000 
0000296f l       .debug_loc     00000000 
00002a7a l       .debug_loc     00000000 
00002bd4 l       .debug_loc     00000000 
00002cd4 l       .debug_loc     00000000 
00002ddf l       .debug_loc     00000000 
00002dff l       .debug_loc     00000000 
00002e25 l       .debug_loc     00000000 
00002e55 l       .debug_loc     00000000 
0000308d l       .debug_loc     00000000 
000030a9 l       .debug_loc     00000000 
000030c4 l       .debug_loc     00000000 
00003239 l       .debug_loc     00000000 
00003389 l       .debug_loc     00000000 
0000349d l       .debug_loc     00000000 
000034c3 l       .debug_loc     00000000 
000034de l       .debug_loc     00000000 
000034f9 l       .debug_loc     00000000 
00003514 l       .debug_loc     00000000 
0000352f l       .debug_loc     00000000 
0000354a l       .debug_loc     00000000 
00003566 l       .debug_loc     00000000 
00003581 l       .debug_loc     00000000 
0000359c l       .debug_loc     00000000 
000035b7 l       .debug_loc     00000000 
000035d2 l       .debug_loc     00000000 
00003604 l       .debug_loc     00000000 
00003637 l       .debug_loc     00000000 
00003652 l       .debug_loc     00000000 
000036a5 l       .debug_loc     00000000 
000036d8 l       .debug_loc     00000000 
000036f3 l       .debug_loc     00000000 
0000370e l       .debug_loc     00000000 
00003729 l       .debug_loc     00000000 
00003744 l       .debug_loc     00000000 
0000375f l       .debug_loc     00000000 
0000377a l       .debug_loc     00000000 
00003795 l       .debug_loc     00000000 
000037b0 l       .debug_loc     00000000 
000037cb l       .debug_loc     00000000 
000037e6 l       .debug_loc     00000000 
00003801 l       .debug_loc     00000000 
0000381d l       .debug_loc     00000000 
0000383c l       .debug_loc     00000000 
00003857 l       .debug_loc     00000000 
00003888 l       .debug_loc     00000000 
000038ae l       .debug_loc     00000000 
000038df l       .debug_loc     00000000 
00003910 l       .debug_loc     00000000 
0000392b l       .debug_loc     00000000 
00003946 l       .debug_loc     00000000 
00003961 l       .debug_loc     00000000 
00003992 l       .debug_loc     00000000 
000039ad l       .debug_loc     00000000 
000039c8 l       .debug_loc     00000000 
000039e4 l       .debug_loc     00000000 
00003a0a l       .debug_loc     00000000 
00003a3b l       .debug_loc     00000000 
00003a56 l       .debug_loc     00000000 
00003a71 l       .debug_loc     00000000 
00003a97 l       .debug_loc     00000000 
00003abd l       .debug_loc     00000000 
00003ad8 l       .debug_loc     00000000 
00003af3 l       .debug_loc     00000000 
00003b0e l       .debug_loc     00000000 
00003b29 l       .debug_loc     00000000 
00003b48 l       .debug_loc     00000000 
00003b63 l       .debug_loc     00000000 
00003b7e l       .debug_loc     00000000 
00003b9a l       .debug_loc     00000000 
00003bb5 l       .debug_loc     00000000 
00003bd0 l       .debug_loc     00000000 
00003bef l       .debug_loc     00000000 
00003c15 l       .debug_loc     00000000 
00003c46 l       .debug_loc     00000000 
00003c9e l       .debug_loc     00000000 
00003ce8 l       .debug_loc     00000000 
00003d3a l       .debug_loc     00000000 
00003d77 l       .debug_loc     00000000 
00003db3 l       .debug_loc     00000000 
00003e1d l       .debug_loc     00000000 
00003e66 l       .debug_loc     00000000 
00003ed0 l       .debug_loc     00000000 
00003ef6 l       .debug_loc     00000000 
00003f11 l       .debug_loc     00000000 
00003f2c l       .debug_loc     00000000 
00003f53 l       .debug_loc     00000000 
00003f9b l       .debug_loc     00000000 
00003fc1 l       .debug_loc     00000000 
00003fe7 l       .debug_loc     00000000 
0000400d l       .debug_loc     00000000 
00004028 l       .debug_loc     00000000 
00004058 l       .debug_loc     00000000 
0000407e l       .debug_loc     00000000 
000040b0 l       .debug_loc     00000000 
000040ee l       .debug_loc     00000000 
0000411d l       .debug_loc     00000000 
00004138 l       .debug_loc     00000000 
0000416b l       .debug_loc     00000000 
00004186 l       .debug_loc     00000000 
000041c2 l       .debug_loc     00000000 
000041e8 l       .debug_loc     00000000 
00004203 l       .debug_loc     00000000 
0000421e l       .debug_loc     00000000 
00004239 l       .debug_loc     00000000 
0000428f l       .debug_loc     00000000 
000042be l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000f90 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000540 l       .debug_ranges  00000000 
00000fae l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00000fcd l       .debug_str     00000000 
00000fe5 l       .debug_str     00000000 
00000fd9 l       .debug_str     00000000 
00000842 l       .debug_str     00000000 
000012e6 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
00000ff3 l       .debug_str     00000000 
00000ffd l       .debug_str     00000000 
0000133e l       .debug_str     00000000 
0000100b l       .debug_str     00000000 
000015c0 l       .debug_str     00000000 
00000b41 l       .debug_str     00000000 
0000095f l       .debug_str     00000000 
000011ea l       .debug_str     00000000 
00000a7d l       .debug_str     00000000 
000013c5 l       .debug_str     00000000 
0000136b l       .debug_str     00000000 
00001214 l       .debug_str     00000000 
000013d5 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00001015 l       .debug_str     00000000 
00001021 l       .debug_str     00000000 
0000102e l       .debug_str     00000000 
0000107d l       .debug_str     00000000 
0000106c l       .debug_str     00000000 
00001045 l       .debug_str     00000000 
00001054 l       .debug_str     00000000 
00001063 l       .debug_str     00000000 
00001090 l       .debug_str     00000000 
00000238 l       .debug_str     00000000 
000001d5 l       .debug_str     00000000 
000001dc l       .debug_str     00000000 
000001e6 l       .debug_str     00000000 
000001f1 l       .debug_str     00000000 
000001fc l       .debug_str     00000000 
0000020c l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
0000022a l       .debug_str     00000000 
0000109b l       .debug_str     00000000 
000010a4 l       .debug_str     00000000 
000010af l       .debug_str     00000000 
000010b7 l       .debug_str     00000000 
000010c3 l       .debug_str     00000000 
000010cf l       .debug_str     00000000 
000010dc l       .debug_str     00000000 
000010ec l       .debug_str     00000000 
000010fd l       .debug_str     00000000 
0000110a l       .debug_str     00000000 
00001113 l       .debug_str     00000000 
0000111d l       .debug_str     00000000 
00001127 l       .debug_str     00000000 
00001132 l       .debug_str     00000000 
0000113c l       .debug_str     00000000 
00001147 l       .debug_str     00000000 
000008ff l       .debug_str     00000000 
000001a0 l       .debug_str     00000000 
00000173 l       .debug_str     00000000 
0000115e l       .debug_str     00000000 
00001155 l       .debug_str     00000000 
00000630 l       .debug_str     00000000 
00000646 l       .debug_str     00000000 
0000063a l       .debug_str     00000000 
00001174 l       .debug_str     00000000 
00000a73 l       .debug_str     00000000 
00001169 l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
00001294 l       .debug_str     00000000 
00001188 l       .debug_str     00000000 
000012a2 l       .debug_str     00000000 
00001159 l       .debug_str     00000000 
000012b3 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
00001198 l       .debug_str     00000000 
00000f5c l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000950 l       .debug_str     00000000 
00000946 l       .debug_str     00000000 
00000f50 l       .debug_str     00000000 
00000408 l       .debug_ranges  00000000 
000012c1 l       .debug_str     00000000 
0000134b l       .debug_str     00000000 
00001386 l       .debug_str     00000000 
000004e8 l       .debug_ranges  00000000 
0000122e l       .debug_str     00000000 
00000420 l       .debug_ranges  00000000 
00000448 l       .debug_ranges  00000000 
00000468 l       .debug_ranges  00000000 
00000480 l       .debug_ranges  00000000 
000004b8 l       .debug_ranges  00000000 
000004a0 l       .debug_ranges  00000000 
000004d0 l       .debug_ranges  00000000 
000011b2 l       .debug_str     00000000 
000011c8 l       .debug_str     00000000 
00000f0f l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
000011d1 l       .debug_str     00000000 
0000120f l       .debug_str     00000000 
000011fc l       .debug_str     00000000 
000011d9 l       .debug_str     00000000 
000017ab l       .debug_str     00000000 
000011f2 l       .debug_str     00000000 
00001218 l       .debug_str     00000000 
0000122a l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000f24 l       .debug_str     00000000 
0000154b l       .debug_str     00000000 
00001239 l       .debug_str     00000000 
00001233 l       .debug_str     00000000 
00001240 l       .debug_str     00000000 
00001248 l       .debug_str     00000000 
0000071e l       .debug_str     00000000 
0000124c l       .debug_str     00000000 
00000870 l       .debug_str     00000000 
00001569 l       .debug_str     00000000 
00001250 l       .debug_str     00000000 
00001335 l       .debug_str     00000000 
00001620 l       .debug_str     00000000 
000013ba l       .debug_str     00000000 
000013b1 l       .debug_str     00000000 
000013cc l       .debug_str     00000000 
00000bc5 l       .debug_str     00000000 
000012cf l       .debug_str     00000000 
000012dd l       .debug_str     00000000 
00001355 l       .debug_str     00000000 
0000070f l       .debug_str     00000000 
000012eb l       .debug_str     00000000 
0000125f l       .debug_str     00000000 
00001079 l       .debug_str     00000000 
000012f8 l       .debug_str     00000000 
00001322 l       .debug_str     00000000 
00001372 l       .debug_str     00000000 
0000105e l       .debug_str     00000000 
00000528 l       .debug_ranges  00000000 
00001365 l       .debug_str     00000000 
00001381 l       .debug_str     00000000 
00001394 l       .debug_str     00000000 
0000104f l       .debug_str     00000000 
00000508 l       .debug_ranges  00000000 
0000135e l       .debug_str     00000000 
000013a3 l       .debug_str     00000000 
000013ac l       .debug_str     00000000 
00001271 l       .debug_str     00000000 
00001285 l       .debug_str     00000000 
00001305 l       .debug_str     00000000 
00001314 l       .debug_str     00000000 
0000128d l       .debug_str     00000000 
00000318 l       .debug_frame   00000000 
e00012d4 l       .text  00000000 
e0001306 l       .text  00000000 
e0001320 l       .text  00000000 
e00017ae l       .text  00000000 
e0001892 l       .text  00000000 
e0001910 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e0001910 l       .text  00000000 
e0001910 l       .text  00000000 
e0001910 l       .text  00000000 
e0001910 l       .text  00000000 
e0001914 l       .text  00000000 
e000191c l       .text  00000000 
e000191c l       .text  00000000 
e0001920 l       .text  00000000 
e0001920 l       .text  00000000 
e000192c l       .text  00000000 
e000192e l       .text  00000000 
e000192e l       .text  00000000 
e0001932 l       .text  00000000 
e000193e l       .text  00000000 
e0001940 l       .text  00000000 
e0001944 l       .text  00000000 
e0001946 l       .text  00000000 
e0001946 l       .text  00000000 
e000194a l       .text  00000000 
e000194a l       .text  00000000 
e000194e l       .text  00000000 
e000194e l       .text  00000000 
e0001950 l       .text  00000000 
e0001950 l       .text  00000000 
e0001954 l       .text  00000000 
e0001954 l       .text  00000000 
e0001956 l       .text  00000000 
e000195a l       .text  00000000 
e000195a l       .text  00000000 
e000195e l       .text  00000000 
e0001962 l       .text  00000000 
e0001968 l       .text  00000000 
e0001968 l       .text  00000000 
e000196c l       .text  00000000 
e000196e l       .text  00000000 
e000196e l       .text  00000000 
e0001974 l       .text  00000000 
e0001974 l       .text  00000000 
e000197a l       .text  00000000 
e000197a l       .text  00000000 
e000197c l       .text  00000000 
e000197c l       .text  00000000 
e0001982 l       .text  00000000 
e0001982 l       .text  00000000 
000042d9 l       .debug_loc     00000000 
000042f4 l       .debug_loc     00000000 
00004325 l       .debug_loc     00000000 
0000434b l       .debug_loc     00000000 
00004371 l       .debug_loc     00000000 
0000438c l       .debug_loc     00000000 
000043ae l       .debug_loc     00000000 
000043d5 l       .debug_loc     00000000 
000043fc l       .debug_loc     00000000 
00004420 l       .debug_loc     00000000 
00004451 l       .debug_loc     00000000 
0000446c l       .debug_loc     00000000 
0000449d l       .debug_loc     00000000 
000044f7 l       .debug_loc     00000000 
00004533 l       .debug_loc     00000000 
00004557 l       .debug_loc     00000000 
0000457c l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000013db l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000005f0 l       .debug_ranges  00000000 
000013f7 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
00001407 l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000181 l       .debug_str     00000000 
00001535 l       .debug_str     00000000 
00001414 l       .debug_str     00000000 
00001418 l       .debug_str     00000000 
00001423 l       .debug_str     00000000 
0000142c l       .debug_str     00000000 
0000143d l       .debug_str     00000000 
0000144f l       .debug_str     00000000 
00001459 l       .debug_str     00000000 
00001468 l       .debug_str     00000000 
0000147a l       .debug_str     00000000 
0000148d l       .debug_str     00000000 
000014a1 l       .debug_str     00000000 
000014aa l       .debug_str     00000000 
000014b6 l       .debug_str     00000000 
000014c5 l       .debug_str     00000000 
000014cf l       .debug_str     00000000 
000014dc l       .debug_str     00000000 
000014e6 l       .debug_str     00000000 
000014f7 l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
000008ff l       .debug_str     00000000 
00001546 l       .debug_str     00000000 
00001554 l       .debug_str     00000000 
0000155d l       .debug_str     00000000 
000016bc l       .debug_str     00000000 
00000af8 l       .debug_str     00000000 
00000b0f l       .debug_str     00000000 
00000b12 l       .debug_str     00000000 
00000b41 l       .debug_str     00000000 
00000b2e l       .debug_str     00000000 
00000b1d l       .debug_str     00000000 
00000b18 l       .debug_str     00000000 
00000b60 l       .debug_str     00000000 
00001583 l       .debug_str     00000000 
00001541 l       .debug_str     00000000 
00001591 l       .debug_str     00000000 
0000124c l       .debug_str     00000000 
000005d8 l       .debug_ranges  00000000 
00001562 l       .debug_str     00000000 
000000c7 l       .debug_str     00000000 
0000154b l       .debug_str     00000000 
00001239 l       .debug_str     00000000 
0000156d l       .debug_str     00000000 
00001250 l       .debug_str     00000000 
0000159b l       .debug_str     00000000 
00001569 l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
0000050c l       .debug_frame   00000000 
e0001982 l       .text  00000000 
00000000 l    df *ABS*  00000000 math.c
e0001982 l       .text  00000000 
e0001982 l       .text  00000000 
e0001982 l       .text  00000000 
e0001984 l       .text  00000000 
e000198a l       .text  00000000 
e0001996 l       .text  00000000 
e000199e l       .text  00000000 
e000199e l       .text  00000000 
e00019a6 l       .text  00000000 
e00019c8 l       .text  00000000 
e00019cc l       .text  00000000 
e00019cc l       .text  00000000 
e00019d0 l       .text  00000000 
e00019d4 l       .text  00000000 
e00019d4 l       .text  00000000 
e00019d8 l       .text  00000000 
e00019ea l       .text  00000000 
e00019ee l       .text  00000000 
e00019fe l       .text  00000000 
e0001a00 l       .text  00000000 
e0001a00 l       .text  00000000 
e0001a10 l       .text  00000000 
e0001a12 l       .text  00000000 
e0001a12 l       .text  00000000 
e0001a16 l       .text  00000000 
e0001a16 l       .text  00000000 
e0001a1a l       .text  00000000 
e0001a1a l       .text  00000000 
e0001a1c l       .text  00000000 
e0001a24 l       .text  00000000 
e0001a26 l       .text  00000000 
e0001a28 l       .text  00000000 
e0001a32 l       .text  00000000 
e0001a32 l       .text  00000000 
0000459e l       .debug_loc     00000000 
000045b6 l       .debug_loc     00000000 
000045dd l       .debug_loc     00000000 
0000460e l       .debug_loc     00000000 
00004661 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000015a2 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000816 l       .debug_str     00000000 
00000845 l       .debug_str     00000000 
00000313 l       .debug_str     00000000 
000015bc l       .debug_str     00000000 
000015c4 l       .debug_str     00000000 
000015c9 l       .debug_str     00000000 
000015cd l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
00000562 l       .debug_str     00000000 
0000054b l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
00000540 l       .debug_frame   00000000 
e0001a32 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
e0001a32 l       .text  00000000 
e0001a32 l       .text  00000000 
e0001a32 l       .text  00000000 
e0001a32 l       .text  00000000 
e0001a3a l       .text  00000000 
e0001a3e l       .text  00000000 
e0001a3e l       .text  00000000 
e0001a42 l       .text  00000000 
e0001a42 l       .text  00000000 
e0001a46 l       .text  00000000 
e0001a46 l       .text  00000000 
e0001a52 l       .text  00000000 
e0001a54 l       .text  00000000 
e0001a54 l       .text  00000000 
e0001a5a l       .text  00000000 
e0001a5a l       .text  00000000 
e0001a5e l       .text  00000000 
e0001a60 l       .text  00000000 
e0001a64 l       .text  00000000 
e0001a64 l       .text  00000000 
e0001a66 l       .text  00000000 
e0001a66 l       .text  00000000 
e0001a68 l       .text  00000000 
e0001a68 l       .text  00000000 
e0001a70 l       .text  00000000 
e0001a74 l       .text  00000000 
e0001a76 l       .text  00000000 
e0001a7a l       .text  00000000 
e0001a7e l       .text  00000000 
e0001a7e l       .text  00000000 
e0001a82 l       .text  00000000 
e0001a82 l       .text  00000000 
e0001a86 l       .text  00000000 
e0001a88 l       .text  00000000 
e0001a88 l       .text  00000000 
e0001a8c l       .text  00000000 
e0001a8c l       .text  00000000 
e0001a8e l       .text  00000000 
e0001a8e l       .text  00000000 
e0001a90 l       .text  00000000 
e0001a90 l       .text  00000000 
e0001a94 l       .text  00000000 
e0001a94 l       .text  00000000 
e0001a98 l       .text  00000000 
e0001a9a l       .text  00000000 
e0001aa0 l       .text  00000000 
e0001aa0 l       .text  00000000 
e0001aa4 l       .text  00000000 
e0001aa8 l       .text  00000000 
e0001ab0 l       .text  00000000 
e0001ab0 l       .text  00000000 
e0001ab2 l       .text  00000000 
e0001ab2 l       .text  00000000 
e0001ab4 l       .text  00000000 
e0001ab4 l       .text  00000000 
e0001aba l       .text  00000000 
e0001aba l       .text  00000000 
e0001aba l       .text  00000000 
e0001aba l       .text  00000000 
e0001aba l       .text  00000000 
e0001abe l       .text  00000000 
e0001abe l       .text  00000000 
e0001ac2 l       .text  00000000 
e0001ac2 l       .text  00000000 
e0001aca l       .text  00000000 
e0001aca l       .text  00000000 
e0001ace l       .text  00000000 
e0001ad2 l       .text  00000000 
e0001ad2 l       .text  00000000 
e0001ad4 l       .text  00000000 
e0001ad4 l       .text  00000000 
e0001ad8 l       .text  00000000 
e0001ad8 l       .text  00000000 
e0001adc l       .text  00000000 
e0001adc l       .text  00000000 
e0001ade l       .text  00000000 
e0001ae0 l       .text  00000000 
e0001ae2 l       .text  00000000 
e0001ae2 l       .text  00000000 
e0001ae6 l       .text  00000000 
e0001aea l       .text  00000000 
e0001afa l       .text  00000000 
e0001afa l       .text  00000000 
e0001afe l       .text  00000000 
e0001afe l       .text  00000000 
e0001b00 l       .text  00000000 
e0001b00 l       .text  00000000 
e0001b02 l       .text  00000000 
e0001b02 l       .text  00000000 
e0001b06 l       .text  00000000 
e0001b06 l       .text  00000000 
e0001b0c l       .text  00000000 
e0001b10 l       .text  00000000 
e0001b10 l       .text  00000000 
e0001b14 l       .text  00000000 
e0001b18 l       .text  00000000 
e0001b1a l       .text  00000000 
e0001b1c l       .text  00000000 
e0001b1c l       .text  00000000 
e0001b1c l       .text  00000000 
e0001b1c l       .text  00000000 
e0001b1c l       .text  00000000 
e0001b20 l       .text  00000000 
e0001b20 l       .text  00000000 
e0001b24 l       .text  00000000 
e0001b24 l       .text  00000000 
e0001b2c l       .text  00000000 
e0001b30 l       .text  00000000 
e0001b34 l       .text  00000000 
e0001b36 l       .text  00000000 
e0001b38 l       .text  00000000 
e0001b38 l       .text  00000000 
e0001b3c l       .text  00000000 
e0001b40 l       .text  00000000 
e0001b40 l       .text  00000000 
e0001b42 l       .text  00000000 
e0001b44 l       .text  00000000 
e0001b46 l       .text  00000000 
e0001b4c l       .text  00000000 
e0001b4c l       .text  00000000 
e0001b4e l       .text  00000000 
e0001b52 l       .text  00000000 
e0001b5e l       .text  00000000 
e0001b6c l       .text  00000000 
e0001b6c l       .text  00000000 
e0001b70 l       .text  00000000 
e0001b72 l       .text  00000000 
e0001b72 l       .text  00000000 
e0001b76 l       .text  00000000 
e0001b7a l       .text  00000000 
e0001b7a l       .text  00000000 
e0001b7e l       .text  00000000 
e0001b82 l       .text  00000000 
e0001b86 l       .text  00000000 
e0001b8a l       .text  00000000 
e0001b8e l       .text  00000000 
e0001b8e l       .text  00000000 
e0001b92 l       .text  00000000 
e0001b96 l       .text  00000000 
e0001b98 l       .text  00000000 
e0001b98 l       .text  00000000 
e0001b9a l       .text  00000000 
e0001b9e l       .text  00000000 
e0001b9e l       .text  00000000 
e0001ba6 l       .text  00000000 
e0001baa l       .text  00000000 
e0001baa l       .text  00000000 
e0001bae l       .text  00000000 
e0001bb2 l       .text  00000000 
e0001bb6 l       .text  00000000 
e0001bb8 l       .text  00000000 
e0001bbc l       .text  00000000 
e0001bbc l       .text  00000000 
e0001bc0 l       .text  00000000 
e0001bc0 l       .text  00000000 
e0001bc4 l       .text  00000000 
e0001bc6 l       .text  00000000 
e0001bc6 l       .text  00000000 
e0001bca l       .text  00000000 
e0001bca l       .text  00000000 
e0001bca l       .text  00000000 
e0001bca l       .text  00000000 
e0001bca l       .text  00000000 
e0001bce l       .text  00000000 
e0001bce l       .text  00000000 
e0001bd2 l       .text  00000000 
e0001bd2 l       .text  00000000 
e0001bda l       .text  00000000 
e0001bda l       .text  00000000 
e0001bde l       .text  00000000 
e0001be0 l       .text  00000000 
e0001be4 l       .text  00000000 
e0001be4 l       .text  00000000 
e0001be6 l       .text  00000000 
e0001be6 l       .text  00000000 
e0001bea l       .text  00000000 
e0001bea l       .text  00000000 
e0001bf0 l       .text  00000000 
e0001bf0 l       .text  00000000 
e0001bf4 l       .text  00000000 
e0001bf4 l       .text  00000000 
e0001bfc l       .text  00000000 
e0001c00 l       .text  00000000 
e0001c00 l       .text  00000000 
e0001c02 l       .text  00000000 
e0001c06 l       .text  00000000 
e0001c06 l       .text  00000000 
e0001c08 l       .text  00000000 
e0001c0a l       .text  00000000 
e0001c0a l       .text  00000000 
e0001c12 l       .text  00000000 
e0001c12 l       .text  00000000 
e0001c16 l       .text  00000000 
e0001c16 l       .text  00000000 
e0001c20 l       .text  00000000 
e0001c24 l       .text  00000000 
e0001c24 l       .text  00000000 
e0001c28 l       .text  00000000 
e0001c28 l       .text  00000000 
e0001c2c l       .text  00000000 
e0001c30 l       .text  00000000 
e0001c30 l       .text  00000000 
e0001c34 l       .text  00000000 
e0001c38 l       .text  00000000 
e0001c38 l       .text  00000000 
e0001c3a l       .text  00000000 
e0001c3e l       .text  00000000 
e0001c3e l       .text  00000000 
e0001c42 l       .text  00000000 
e0001c46 l       .text  00000000 
e0001c4a l       .text  00000000 
e0001c4e l       .text  00000000 
e0001c52 l       .text  00000000 
e0001c54 l       .text  00000000 
e0001c54 l       .text  00000000 
e0001c58 l       .text  00000000 
e0001c58 l       .text  00000000 
e0001c5a l       .text  00000000 
e0001c5c l       .text  00000000 
e0001c5c l       .text  00000000 
e0001c64 l       .text  00000000 
e0001c68 l       .text  00000000 
e0001c68 l       .text  00000000 
e0001c6a l       .text  00000000 
e0001c6e l       .text  00000000 
e0001c6e l       .text  00000000 
e0001c70 l       .text  00000000 
e0001c72 l       .text  00000000 
e0001c72 l       .text  00000000 
e0001c74 l       .text  00000000 
e0001c74 l       .text  00000000 
e0001c78 l       .text  00000000 
e0001c78 l       .text  00000000 
e0001c7a l       .text  00000000 
e0001c7a l       .text  00000000 
e0001c7e l       .text  00000000 
e0001c7e l       .text  00000000 
e0001c80 l       .text  00000000 
e0001c80 l       .text  00000000 
e0001c84 l       .text  00000000 
e0001c84 l       .text  00000000 
e0001c86 l       .text  00000000 
e0001c86 l       .text  00000000 
e0001c88 l       .text  00000000 
e0001c88 l       .text  00000000 
e0001c8a l       .text  00000000 
e0001c8a l       .text  00000000 
00004694 l       .debug_loc     00000000 
000046ba l       .debug_loc     00000000 
000046e0 l       .debug_loc     00000000 
00004706 l       .debug_loc     00000000 
0000472c l       .debug_loc     00000000 
0000474b l       .debug_loc     00000000 
0000476a l       .debug_loc     00000000 
00004790 l       .debug_loc     00000000 
000047ab l       .debug_loc     00000000 
000047f4 l       .debug_loc     00000000 
0000481a l       .debug_loc     00000000 
0000483c l       .debug_loc     00000000 
00004857 l       .debug_loc     00000000 
00004872 l       .debug_loc     00000000 
0000488d l       .debug_loc     00000000 
000048a8 l       .debug_loc     00000000 
000048c3 l       .debug_loc     00000000 
000048de l       .debug_loc     00000000 
0000492e l       .debug_loc     00000000 
00004949 l       .debug_loc     00000000 
00004964 l       .debug_loc     00000000 
00004986 l       .debug_loc     00000000 
000049a1 l       .debug_loc     00000000 
000049bc l       .debug_loc     00000000 
000049d7 l       .debug_loc     00000000 
000049f2 l       .debug_loc     00000000 
00004a0d l       .debug_loc     00000000 
00004a2c l       .debug_loc     00000000 
00004a4b l       .debug_loc     00000000 
00004a71 l       .debug_loc     00000000 
00004a8c l       .debug_loc     00000000 
00004ad5 l       .debug_loc     00000000 
00004afb l       .debug_loc     00000000 
00004b16 l       .debug_loc     00000000 
00004b31 l       .debug_loc     00000000 
00004b4c l       .debug_loc     00000000 
00004b67 l       .debug_loc     00000000 
00004b82 l       .debug_loc     00000000 
00004b9d l       .debug_loc     00000000 
00004bb8 l       .debug_loc     00000000 
00004bd7 l       .debug_loc     00000000 
00004bf6 l       .debug_loc     00000000 
00004c11 l       .debug_loc     00000000 
00004c58 l       .debug_loc     00000000 
00004c73 l       .debug_loc     00000000 
00004c8e l       .debug_loc     00000000 
00004cb4 l       .debug_loc     00000000 
00004ccf l       .debug_loc     00000000 
00004cea l       .debug_loc     00000000 
00004d05 l       .debug_loc     00000000 
00004d20 l       .debug_loc     00000000 
00004d3b l       .debug_loc     00000000 
00004d61 l       .debug_loc     00000000 
00004d7c l       .debug_loc     00000000 
00004da2 l       .debug_loc     00000000 
00004dc8 l       .debug_loc     00000000 
00004de5 l       .debug_loc     00000000 
00004e40 l       .debug_loc     00000000 
00004e5b l       .debug_loc     00000000 
00004e81 l       .debug_loc     00000000 
00004ea7 l       .debug_loc     00000000 
00004ec2 l       .debug_loc     00000000 
00004ee8 l       .debug_loc     00000000 
00004f45 l       .debug_loc     00000000 
00004f60 l       .debug_loc     00000000 
00004f7b l       .debug_loc     00000000 
00004fd8 l       .debug_loc     00000000 
00004ff5 l       .debug_loc     00000000 
00005010 l       .debug_loc     00000000 
00005057 l       .debug_loc     00000000 
00005072 l       .debug_loc     00000000 
0000508d l       .debug_loc     00000000 
000050a8 l       .debug_loc     00000000 
000050c3 l       .debug_loc     00000000 
000050de l       .debug_loc     00000000 
00005104 l       .debug_loc     00000000 
0000511f l       .debug_loc     00000000 
0000513a l       .debug_loc     00000000 
00005155 l       .debug_loc     00000000 
00005170 l       .debug_loc     00000000 
0000519d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000015d2 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000690 l       .debug_ranges  00000000 
000015ee l       .debug_str     00000000 
000015f8 l       .debug_str     00000000 
00001602 l       .debug_str     00000000 
0000055e l       .debug_str     00000000 
00000173 l       .debug_str     00000000 
000001a0 l       .debug_str     00000000 
00000f24 l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
0000160c l       .debug_str     00000000 
00001709 l       .debug_str     00000000 
00001713 l       .debug_str     00000000 
00001214 l       .debug_str     00000000 
00001626 l       .debug_str     00000000 
00001631 l       .debug_str     00000000 
00000901 l       .debug_str     00000000 
000008ff l       .debug_str     00000000 
0000163d l       .debug_str     00000000 
0000164f l       .debug_str     00000000 
0000165f l       .debug_str     00000000 
00001614 l       .debug_str     00000000 
0000166f l       .debug_str     00000000 
00001679 l       .debug_str     00000000 
00000a69 l       .debug_str     00000000 
00000d0e l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00001681 l       .debug_str     00000000 
00000b41 l       .debug_str     00000000 
0000070f l       .debug_str     00000000 
000016cf l       .debug_str     00000000 
000016d4 l       .debug_str     00000000 
000016d8 l       .debug_str     00000000 
000016de l       .debug_str     00000000 
00001653 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
00001663 l       .debug_str     00000000 
00000620 l       .debug_ranges  00000000 
0000104f l       .debug_str     00000000 
00000608 l       .debug_ranges  00000000 
0000128d l       .debug_str     00000000 
000016e3 l       .debug_str     00000000 
000016ea l       .debug_str     00000000 
00000638 l       .debug_ranges  00000000 
0000169d l       .debug_str     00000000 
000016f2 l       .debug_str     00000000 
000016f6 l       .debug_str     00000000 
000016fa l       .debug_str     00000000 
000016ff l       .debug_str     00000000 
00001704 l       .debug_str     00000000 
0000170e l       .debug_str     00000000 
000016a4 l       .debug_str     00000000 
00000870 l       .debug_str     00000000 
00000f41 l       .debug_str     00000000 
00001719 l       .debug_str     00000000 
00000650 l       .debug_ranges  00000000 
0000171e l       .debug_str     00000000 
0000168a l       .debug_str     00000000 
000013ac l       .debug_str     00000000 
00000f48 l       .debug_str     00000000 
00000668 l       .debug_ranges  00000000 
000016ac l       .debug_str     00000000 
00000e89 l       .debug_str     00000000 
000016be l       .debug_str     00000000 
000016c6 l       .debug_str     00000000 
00000b91 l       .debug_str     00000000 
00000562 l       .debug_str     00000000 
0000054b l       .debug_str     00000000 
00000570 l       .debug_frame   00000000 
e0001aba l       .text  00000000 
e0001b1c l       .text  00000000 
e0001bca l       .text  00000000 
e0001c8a l       .text  00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
000051bd l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001726 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000006f0 l       .debug_ranges  00000000 
00001750 l       .debug_str     00000000 
000017b0 l       .debug_str     00000000 
000017a4 l       .debug_str     00000000 
0000175c l       .debug_str     00000000 
00001769 l       .debug_str     00000000 
0000177d l       .debug_str     00000000 
0000178e l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
000017be l       .debug_str     00000000 
00000562 l       .debug_str     00000000 
0000054b l       .debug_str     00000000 
000017ce l       .debug_str     00000000 
000017ec l       .debug_str     00000000 
00001803 l       .debug_str     00000000 
00001813 l       .debug_str     00000000 
00001823 l       .debug_str     00000000 
00001831 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
0000183f l       .debug_str     00000000 
00001854 l       .debug_str     00000000 
0000186b l       .debug_str     00000000 
00000f24 l       .debug_str     00000000 
00001884 l       .debug_str     00000000 
000018a0 l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
00000eb1 l       .debug_str     00000000 
000005df l       .debug_str     00000000 
000018af l       .debug_str     00000000 
00000634 l       .debug_frame   00000000 
e0000c30 g     F .text  0000007a external_irq_handler
e0000eb6 g     F .text  00000034 dif_aes_reset
e0000a70 g     F .text  00000192 printf
e0001bca g     F .text  000000c0 memrchr
00008000 g       *ABS*  00000000 _stack_len
e0001a32 g     F .text  00000088 memcpy
e000105c g     F .text  00000036 dif_aes_load_data
e0002724 g       .bss   00000000 _bss_start
e000129c g     F .text  00000034 base_log_internal_dv
e0000eea g     F .text  00000138 dif_aes_start
e000a000 g       .stack 00000000 stack
e00011f4 g     F .text  00000006 abort
e0000080 g       *ABS*  00000000 _entry_point
e0002730 g       .bss   00000000 _bss_end
e00010d0 g     F .text  00000076 dif_aes_get_status
e00026a0 g     O .data  00000084 status_codes
e0000c02 g     F .text  0000002e uart_set_cfg
e0001b1c g     F .text  000000ae memchr
e00000cc g       .text  00000000 _start
e0001022 g     F .text  0000003a dif_aes_end
e0001320 g     F .text  0000048e base_vfprintf
e0002690 g     O .data  00000010 remu10_table
e0001306 g     F .text  0000001a base_vprintf
e0001aba g     F .text  00000062 memset
e0000114 g     F .text  0000095c main
e0000084 g       .vectors       00000000 _vectors_end
e0010000 g       .vectors       00000000 _stack_start
e0002680 g     O .rodata        00000008 kClockFreqCpuHz
e0000ea8 g     F .text  0000000e dif_aes_init
00002000 g       *ABS*  00000000 _min_stack
e0002688 g     O .rodata        00000004 kDeviceTestStatusAddress
e0001982 g     F .text  000000b0 udiv64_slow
e00012d4 g     F .text  00000032 base_printf
e0010010 g       *ABS*  00000000 fromhost
e000268c g     O .rodata        00000004 kDeviceLogBypassUartAddress
00020008 g       *ABS*  00000000 tohost
e0001910 g     F .text  00000072 status_extract
e000a000 g       .stack 00000000 _stack
e0000000 g       .vectors       00000000 _vectors_start
e0001146 g     F .text  000000ae test_status_set
e00011fa g     F .text  000000a2 base_log_internal_core
e0001092 g     F .text  0000003e dif_aes_read_output



Disassembly of section .vectors:

e0000000 <_vectors_start>:
e0000000:       0840006f                j       e0000084 <_vectors_end>
e0000004:       0800006f                j       e0000084 <_vectors_end>
e0000008:       07c0006f                j       e0000084 <_vectors_end>
e000000c:       0780006f                j       e0000084 <_vectors_end>
e0000010:       0740006f                j       e0000084 <_vectors_end>
e0000014:       0700006f                j       e0000084 <_vectors_end>
e0000018:       06c0006f                j       e0000084 <_vectors_end>
e000001c:       0680006f                j       e0000084 <_vectors_end>
e0000020:       0640006f                j       e0000084 <_vectors_end>
e0000024:       0600006f                j       e0000084 <_vectors_end>
e0000028:       05c0006f                j       e0000084 <_vectors_end>
e000002c:       4050006f                j       e0000c30 <external_irq_handler>
e0000030:       0540006f                j       e0000084 <_vectors_end>
e0000034:       0500006f                j       e0000084 <_vectors_end>
e0000038:       04c0006f                j       e0000084 <_vectors_end>
e000003c:       0480006f                j       e0000084 <_vectors_end>
e0000040:       0440006f                j       e0000084 <_vectors_end>
e0000044:       0400006f                j       e0000084 <_vectors_end>
e0000048:       03c0006f                j       e0000084 <_vectors_end>
e000004c:       0380006f                j       e0000084 <_vectors_end>
e0000050:       0340006f                j       e0000084 <_vectors_end>
e0000054:       0300006f                j       e0000084 <_vectors_end>
e0000058:       02c0006f                j       e0000084 <_vectors_end>
e000005c:       0280006f                j       e0000084 <_vectors_end>
e0000060:       0240006f                j       e0000084 <_vectors_end>
e0000064:       0200006f                j       e0000084 <_vectors_end>
e0000068:       01c0006f                j       e0000084 <_vectors_end>
e000006c:       0180006f                j       e0000084 <_vectors_end>
e0000070:       0140006f                j       e0000084 <_vectors_end>
e0000074:       0100006f                j       e0000084 <_vectors_end>
e0000078:       00c0006f                j       e0000084 <_vectors_end>
e000007c:       0080006f                j       e0000084 <_vectors_end>
e0000080:       0060006f                j       e0000086 <reset_handler>

Disassembly of section .text:

e0000084 <default_exc_handler>:
default_exc_handler():
e0000084:       a069                    j       e000010e <sleep_loop>

e0000086 <reset_handler>:
reset_handler():
e0000086:       4081                    li      ra,0
e0000088:       8106                    mv      sp,ra
e000008a:       8186                    mv      gp,ra
e000008c:       8206                    mv      tp,ra
e000008e:       8286                    mv      t0,ra
e0000090:       8306                    mv      t1,ra
e0000092:       8386                    mv      t2,ra
e0000094:       8406                    mv      s0,ra
e0000096:       8486                    mv      s1,ra
e0000098:       8506                    mv      a0,ra
e000009a:       8586                    mv      a1,ra
e000009c:       8606                    mv      a2,ra
e000009e:       8686                    mv      a3,ra
e00000a0:       8706                    mv      a4,ra
e00000a2:       8786                    mv      a5,ra
e00000a4:       8806                    mv      a6,ra
e00000a6:       8886                    mv      a7,ra
e00000a8:       8906                    mv      s2,ra
e00000aa:       8986                    mv      s3,ra
e00000ac:       8a06                    mv      s4,ra
e00000ae:       8a86                    mv      s5,ra
e00000b0:       8b06                    mv      s6,ra
e00000b2:       8b86                    mv      s7,ra
e00000b4:       8c06                    mv      s8,ra
e00000b6:       8c86                    mv      s9,ra
e00000b8:       8d06                    mv      s10,ra
e00000ba:       8d86                    mv      s11,ra
e00000bc:       8e06                    mv      t3,ra
e00000be:       8e86                    mv      t4,ra
e00000c0:       8f06                    mv      t5,ra
e00000c2:       8f86                    mv      t6,ra
e00000c4:       00010117                auipc   sp,0x10
e00000c8:       f3c10113                addi    sp,sp,-196 # e0010000 <_stack_start>

e00000cc <_start>:
e00000cc:       00002d17                auipc   s10,0x2
e00000d0:       658d0d13                addi    s10,s10,1624 # e0002724 <base_log_internal_core.global_log_counter>
e00000d4:       00002d97                auipc   s11,0x2
e00000d8:       65cd8d93                addi    s11,s11,1628 # e0002730 <main.kLogFields>
e00000dc:       01bd5763                bge     s10,s11,e00000ea <main_entry>

e00000e0 <zero_loop>:
zero_loop():
e00000e0:       /-> 000d2023            sw      zero,0(s10)
e00000e4:       |   0d11                        addi    s10,s10,4
e00000e6:       \-- ffaddde3            bge     s11,s10,e00000e0 <zero_loop>

e00000ea <main_entry>:
zero_loop_end():
e00000ea:       4501                    li      a0,0
e00000ec:       4581                    li      a1,0
e00000ee:       026000ef                jal     ra,e0000114 <main>
e00000f2:       c901                    beqz    a0,e0000102 <success>
e00000f4:       c11c0537                lui     a0,0xc11c0
e00000f8:       0561                    addi    a0,a0,24
e00000fa:       52fd                    li      t0,-1
e00000fc:       00552023                sw      t0,0(a0) # c11c0000 <fromhost+0xe11afff0>
e0000100:       a039                    j       e000010e <sleep_loop>

e0000102 <success>:
success():
e0000102:       c11c0537                lui     a0,0xc11c0
e0000106:       0561                    addi    a0,a0,24
e0000108:       4285                    li      t0,1
e000010a:       00552023                sw      t0,0(a0) # c11c0000 <fromhost+0xe11afff0>

e000010e <sleep_loop>:
sleep_loop():
e000010e:       /-> 10500073            wfi
e0000112:       \-- bff5                        j       e000010e <sleep_loop>

e0000114 <main>:
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:47
    0x0f, 0x1f, 0x2f, 0x3F, 0x4f, 0x5f, 0x6f, 0x7f, 0x8f, 0x9f, 0xaf,
    0xbf, 0xcf, 0xdf, 0xef, 0xff, 0x0a, 0x1a, 0x2a, 0x3a, 0x4a, 0x5a,
    0x6a, 0x7a, 0x8a, 0x9a, 0xaa, 0xba, 0xca, 0xda, 0xea, 0xfa,
};

int main(int argc, char **argv) {
e0000114:                          716d                 addi    sp,sp,-272
e0000116:                          10112623             sw      ra,268(sp)
e000011a:                          10812423             sw      s0,264(sp)
e000011e:                          10912223             sw      s1,260(sp)
e0000122:                          11212023             sw      s2,256(sp)
e0000126:                          dfce                 sw      s3,252(sp)
e0000128:                          ddd2                 sw      s4,248(sp)
e000012a:                          dbd6                 sw      s5,244(sp)
e000012c:                          d9da                 sw      s6,240(sp)
e000012e:                          d7de                 sw      s7,236(sp)
e0000130:                          d5e2                 sw      s8,232(sp)
e0000132:                          d3e6                 sw      s9,228(sp)
e0000134:                          d1ea                 sw      s10,224(sp)
e0000136:                          cfee                 sw      s11,220(sp)
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:59
  #else
  //set_flls();
  int baud_rate = 115200;
  int test_freq = 100000000;
  #endif
  uart_set_cfg(0,(test_freq/baud_rate)>>4);
e0000138:                          03600593             li      a1,54
e000013c:                          4501                 li      a0,0
e000013e:                          2c5000ef             jal     ra,e0000c02 <uart_set_cfg>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:61

  printf("Init Entropy, RNG and EDN\r\n");
e0000142:                          00002517             auipc   a0,0x2
e0000146:                          b4e50513             addi    a0,a0,-1202 # e0001c90 <memrchr+0xc6>
e000014a:                          127000ef             jal     ra,e0000a70 <printf>
e000014e:                          00909537             lui     a0,0x909
e0000152:                          09950513             addi    a0,a0,153 # 909099 <tohost+0x8e9091>
e0000156:                          c11605b7             lui     a1,0xc1160
entropy_init():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:24
 *entropy_src_enable = 0x00909099;
e000015a:                          d1c8                 sw      a0,36(a1)
e000015c:                          4519                 li      a0,6
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:27
 *entropy_src_enable = 0x6;
e000015e:                          d188                 sw      a0,32(a1)
e0000160:                          c1150537             lui     a0,0xc1150
e0000164:                          66600593             li      a1,1638
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:30
 *csrng_enable = 0x666;
e0000168:                          c94c                 sw      a1,20(a0)
e000016a:                          6529                 lui     a0,0xa
e000016c:                          96650513             addi    a0,a0,-1690 # 9966 <_stack_len+0x1966>
e0000170:                          c11705b7             lui     a1,0xc1170
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:33
 *edn_enable = 0x9966;
e0000174:                          c9c8                 sw      a0,20(a1)
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:63
  entropy_init();
  printf("Init the AES\r\n");
e0000176:                          00002517             auipc   a0,0x2
e000017a:                          b3650513             addi    a0,a0,-1226 # e0001cac <memrchr+0xe2>
e000017e:                          0f3000ef             jal     ra,e0000a70 <printf>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:65
  // Initialise AES.
  CHECK_DIF_OK(
e0000182:                          c1100537             lui     a0,0xc1100
e0000186:                          192c                 addi    a1,sp,184
e0000188:                          521000ef             jal     ra,e0000ea8 <dif_aes_init>
e000018c:                          00002497             auipc   s1,0x2
e0000190:                          50048493             addi    s1,s1,1280 # e000268c <kDeviceLogBypassUartAddress>
e0000194:                /-------- cd15                 beqz    a0,e00001d0 <main+0xbc>
e0000196:                |         842a                 mv      s0,a0
e0000198:                |         4088                 lw      a0,0(s1)
e000019a:                |     /-- c911                 beqz    a0,e00001ae <main+0x9a>
e000019c:                |     |   00002517             auipc   a0,0x2
e00001a0:                |     |   59450513             addi    a0,a0,1428 # e0002730 <main.kLogFields>
e00001a4:                |     |   4585                 li      a1,1
e00001a6:                |     |   8622                 mv      a2,s0
e00001a8:                |     |   0f4010ef             jal     ra,e000129c <base_log_internal_dv>
e00001ac:                |  /--|-- a829                 j       e00001c6 <main+0xb2>
e00001ae:                |  |  \-> 00002597             auipc   a1,0x2
e00001b2:                |  |      f2658593             addi    a1,a1,-218 # e00020d4 <memrchr+0x50a>
e00001b6:                |  |      08a8                 addi    a0,sp,88
e00001b8:                |  |      4651                 li      a2,20
e00001ba:                |  |      079010ef             jal     ra,e0001a32 <memcpy>
e00001be:                |  |      08a8                 addi    a0,sp,88
e00001c0:                |  |      85a2                 mv      a1,s0
e00001c2:                |  |      038010ef             jal     ra,e00011fa <base_log_internal_core>
e00001c6:                |  \----> 6531                 lui     a0,0xc
e00001c8:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00001cc:                |         77b000ef             jal     ra,e0001146 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:67
      dif_aes_init(mmio_region_from_addr(TOP_EARLGREY_AES_BASE_ADDR), &aes));
  CHECK_DIF_OK(dif_aes_reset(&aes));
e00001d0:                \-------> 1928                 addi    a0,sp,184
e00001d2:                          4e5000ef             jal     ra,e0000eb6 <dif_aes_reset>
e00001d6:                /-------- cd15                 beqz    a0,e0000212 <main+0xfe>
e00001d8:                |         842a                 mv      s0,a0
e00001da:                |         4088                 lw      a0,0(s1)
e00001dc:                |     /-- c911                 beqz    a0,e00001f0 <main+0xdc>
e00001de:                |     |   00002517             auipc   a0,0x2
e00001e2:                |     |   56650513             addi    a0,a0,1382 # e0002744 <main.kLogFields.4>
e00001e6:                |     |   4585                 li      a1,1
e00001e8:                |     |   8622                 mv      a2,s0
e00001ea:                |     |   0b2010ef             jal     ra,e000129c <base_log_internal_dv>
e00001ee:                |  /--|-- a829                 j       e0000208 <main+0xf4>
e00001f0:                |  |  \-> 00002597             auipc   a1,0x2
e00001f4:                |  |      ef858593             addi    a1,a1,-264 # e00020e8 <memrchr+0x51e>
e00001f8:                |  |      08a8                 addi    a0,sp,88
e00001fa:                |  |      4651                 li      a2,20
e00001fc:                |  |      037010ef             jal     ra,e0001a32 <memcpy>
e0000200:                |  |      08a8                 addi    a0,sp,88
e0000202:                |  |      85a2                 mv      a1,s0
e0000204:                |  |      7f7000ef             jal     ra,e00011fa <base_log_internal_core>
e0000208:                |  \----> 6531                 lui     a0,0xc
e000020a:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e000020e:                |         739000ef             jal     ra,e0001146 <test_status_set>
e0000212:                \-------> 4501                 li      a0,0
e0000214:                          00002597             auipc   a1,0x2
e0000218:                          ee858593             addi    a1,a1,-280 # e00020fc <kAesModesKey256>
e000021c:                          00002617             auipc   a2,0x2
e0000220:                          f0060613             addi    a2,a2,-256 # e000211c <kKeyShare1>
e0000224:                          0934                 addi    a3,sp,152
e0000226:                          02000713             li      a4,32
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:73

  // Mask the key. Note that this should not be done manually. Software is
  // expected to get the key in two shares right from the beginning.
  uint8_t key_share0[sizeof(kAesModesKey256)];
  for (int i = 0; i < sizeof(kAesModesKey256); ++i) {
    key_share0[i] = kAesModesKey256[i] ^ kKeyShare1[i];
e000022a:                      /-> 00b507b3             add     a5,a0,a1
e000022e:                      |   00078783             lb      a5,0(a5)
e0000232:                      |   00c50433             add     s0,a0,a2
e0000236:                      |   00040403             lb      s0,0(s0)
e000023a:                      |   8fa1                 xor     a5,a5,s0
e000023c:                      |   00a68433             add     s0,a3,a0
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:72
  for (int i = 0; i < sizeof(kAesModesKey256); ++i) {
e0000240:                      |   0505                 addi    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:73
    key_share0[i] = kAesModesKey256[i] ^ kKeyShare1[i];
e0000242:                      |   00f40023             sb      a5,0(s0)
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:72
  for (int i = 0; i < sizeof(kAesModesKey256); ++i) {
e0000246:                      \-- fee512e3             bne     a0,a4,e000022a <main+0x116>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:78
  }

  // "Convert" key share byte arrays to `dif_aes_key_share_t`.
  dif_aes_key_share_t key;
  memcpy(key.share0, key_share0, sizeof(key.share0));
e000024a:                          08a8                 addi    a0,sp,88
e000024c:                          092c                 addi    a1,sp,152
e000024e:                          02000613             li      a2,32
e0000252:                          7e0010ef             jal     ra,e0001a32 <memcpy>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:79
  memcpy(key.share1, kKeyShare1, sizeof(key.share1));
e0000256:                          18a8                 addi    a0,sp,120
e0000258:                          00002597             auipc   a1,0x2
e000025c:                          ec458593             addi    a1,a1,-316 # e000211c <kKeyShare1>
e0000260:                          02000613             li      a2,32
e0000264:                          7ce010ef             jal     ra,e0001a32 <memcpy>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:80
  printf("Setup ECB\r\n");
e0000268:                          00002517             auipc   a0,0x2
e000026c:                          b1250513             addi    a0,a0,-1262 # e0001d7a <memrchr+0x1b0>
e0000270:                          001000ef             jal     ra,e0000a70 <printf>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:82
  // Setup ECB encryption transaction.
  dif_aes_transaction_t transaction = {
e0000274:                          00002597             auipc   a1,0x2
e0000278:                          ec858593             addi    a1,a1,-312 # e000213c <kKeyShare1+0x20>
e000027c:                          1828                 addi    a0,sp,56
e000027e:                          4671                 li      a2,28
e0000280:                          7b2010ef             jal     ra,e0001a32 <memcpy>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:92
      .mask_reseeding = kDifAesReseedPerBlock,
      .manual_operation = kDifAesManualOperationAuto,
      .reseed_on_key_change = false,
      .ctrl_aux_lock = false,
  };
  CHECK_DIF_OK(dif_aes_start(&aes, &transaction, &key, NULL));
e0000284:                          1928                 addi    a0,sp,184
e0000286:                          182c                 addi    a1,sp,56
e0000288:                          08b0                 addi    a2,sp,88
e000028a:                          4681                 li      a3,0
e000028c:                          45f000ef             jal     ra,e0000eea <dif_aes_start>
e0000290:                          0004a903             lw      s2,0(s1)
e0000294:                /-------- cd15                 beqz    a0,e00002d0 <main+0x1bc>
e0000296:                |         842a                 mv      s0,a0
e0000298:                |     /-- 00090b63             beqz    s2,e00002ae <main+0x19a>
e000029c:                |     |   00002517             auipc   a0,0x2
e00002a0:                |     |   4bc50513             addi    a0,a0,1212 # e0002758 <main.kLogFields.8>
e00002a4:                |     |   4585                 li      a1,1
e00002a6:                |     |   8622                 mv      a2,s0
e00002a8:                |     |   7f5000ef             jal     ra,e000129c <base_log_internal_dv>
e00002ac:                |  /--|-- a829                 j       e00002c6 <main+0x1b2>
e00002ae:                |  |  \-> 00002597             auipc   a1,0x2
e00002b2:                |  |      eaa58593             addi    a1,a1,-342 # e0002158 <kKeyShare1+0x3c>
e00002b6:                |  |      0188                 addi    a0,sp,192
e00002b8:                |  |      4651                 li      a2,20
e00002ba:                |  |      778010ef             jal     ra,e0001a32 <memcpy>
e00002be:                |  |      0188                 addi    a0,sp,192
e00002c0:                |  |      85a2                 mv      a1,s0
e00002c2:                |  |      739000ef             jal     ra,e00011fa <base_log_internal_core>
e00002c6:                |  \----> 6531                 lui     a0,0xc
e00002c8:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00002cc:                |         67b000ef             jal     ra,e0001146 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:96

  // "Convert" plain data byte arrays to `dif_aes_data_t`.
  dif_aes_data_t in_data_plain;
  memcpy(in_data_plain.data, kAesModesPlainText, sizeof(in_data_plain.data));
e00002d0:                \-------> 00002597             auipc   a1,0x2
e00002d4:                          e9c58593             addi    a1,a1,-356 # e000216c <kAesModesPlainText>
e00002d8:                          1028                 addi    a0,sp,40
e00002da:                          4641                 li      a2,16
e00002dc:                          c62e                 sw      a1,12(sp)
e00002de:                          754010ef             jal     ra,e0001a32 <memcpy>
e00002e2:                          00002517             auipc   a0,0x2
e00002e6:                          39e50513             addi    a0,a0,926 # e0002680 <kClockFreqCpuHz>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
 * @param timeout_usec Timeout in microseconds.
 * @return The initialized timeout value.
 */
inline ibex_timeout_t ibex_timeout_init(uint32_t timeout_usec) {
  return (ibex_timeout_t){
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
e00002ea:                          414c                 lw      a1,4(a0)
e00002ec:                          4108                 lw      a0,0(a0)
e00002ee:                          000f4637             lui     a2,0xf4
e00002f2:                          24060a93             addi    s5,a2,576 # f4240 <tohost+0xd4238>
e00002f6:                          035585b3             mul     a1,a1,s5
e00002fa:                          03553633             mulhu   a2,a0,s5
e00002fe:                          95b2                 add     a1,a1,a2
e0000300:                          03550533             mul     a0,a0,s5
e0000304:                          c82a                 sw      a0,16(sp)
e0000306:                          ca2e                 sw      a1,20(sp)
e0000308:                          8656                 mv      a2,s5
e000030a:                          4681                 li      a3,0
e000030c:                          4701                 li      a4,0
e000030e:                          674010ef             jal     ra,e0001982 <udiv64_slow>
e0000312:                          8baa                 mv      s7,a0
e0000314:                          84ae                 mv      s1,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e0000316:                      /-> b8002573             csrr    a0,mcycleh
e000031a:                      |   b00025f3             csrr    a1,mcycle
e000031e:                      |   b8002673             csrr    a2,mcycleh
e0000322:                      \-- fec51ae3             bne     a0,a2,e0000316 <main+0x202>
e0000326:                          00193a13             seqz    s4,s2
e000032a:                          40b00933             neg     s2,a1
e000032e:                          00b035b3             snez    a1,a1
e0000332:                          952e                 add     a0,a0,a1
e0000334:                          40a009b3             neg     s3,a0
main():
e0000338:                          00002b17             auipc   s6,0x2
e000033c:                          e74b0b13             addi    s6,s6,-396 # e00021ac <kAesModesPlainText+0x40>
e0000340:                          6531                 lui     a0,0xc
e0000342:                          aad50d93             addi    s11,a0,-1363 # baad <_stack_len+0x3aad>
e0000346:                          00002c17             auipc   s8,0x2
e000034a:                          426c0c13             addi    s8,s8,1062 # e000276c <main.kLogFields.11>
e000034e:                          00002c97             auipc   s9,0x2
e0000352:                          fcac8c93             addi    s9,s9,-54 # e0002318 <kAesModesCipherTextEcb256+0x108>
e0000356:                          00002d17             auipc   s10,0x2
e000035a:                          542d0d13             addi    s10,s10,1346 # e0002898 <aes_testutils_get_status.kLogFields>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
 * @param aes An aes DIF handle.
 * @param flag Status flag to query.
 */
inline bool aes_testutils_get_status(dif_aes_t *aes, dif_aes_status_t flag) {
  bool status;
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
e000035e:             /----------> 1928                 addi    a0,sp,184
e0000360:             |            4591                 li      a1,4
e0000362:             |            0830                 addi    a2,sp,24
e0000364:             |            56d000ef             jal     ra,e00010d0 <dif_aes_get_status>
e0000368:             |  /-------- c515                 beqz    a0,e0000394 <main+0x280>
e000036a:             |  |         842a                 mv      s0,a0
e000036c:             |  |     /-- 000a1863             bnez    s4,e000037c <main+0x268>
e0000370:             |  |     |   4585                 li      a1,1
e0000372:             |  |     |   856a                 mv      a0,s10
e0000374:             |  |     |   8622                 mv      a2,s0
e0000376:             |  |     |   727000ef             jal     ra,e000129c <base_log_internal_dv>
e000037a:             |  |  /--|-- a811                 j       e000038e <main+0x27a>
e000037c:             |  |  |  \-> 0188                 addi    a0,sp,192
e000037e:             |  |  |      4651                 li      a2,20
e0000380:             |  |  |      85e6                 mv      a1,s9
e0000382:             |  |  |      6b0010ef             jal     ra,e0001a32 <memcpy>
e0000386:             |  |  |      0188                 addi    a0,sp,192
e0000388:             |  |  |      85a2                 mv      a1,s0
e000038a:             |  |  |      671000ef             jal     ra,e00011fa <base_log_internal_core>
e000038e:             |  |  \----> 856e                 mv      a0,s11
e0000390:             |  |         5b7000ef             jal     ra,e0001146 <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
e0000394:             |  \-------> 01814503             lbu     a0,24(sp)
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:99

  // Load the plain text to trigger the encryption operation.
  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusInputReady, true, TIMEOUT);
e0000398:             |  /-------- ed39                 bnez    a0,e00003f6 <main+0x2e2>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
e000039a:             |  |     /-> b80025f3             csrr    a1,mcycleh
e000039e:             |  |     |   b0002573             csrr    a0,mcycle
e00003a2:             |  |     |   b8002673             csrr    a2,mcycleh
e00003a6:             |  |     \-- fec59ae3             bne     a1,a2,e000039a <main+0x286>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e00003aa:             |  |         954a                 add     a0,a0,s2
e00003ac:             |  |         01253633             sltu    a2,a0,s2
e00003b0:             |  |         964e                 add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
 *
 * @param timeout Holds the counter start value.
 * @return True if the timeout has expired and false otherwise.
 */
inline bool ibex_timeout_check(const ibex_timeout_t *timeout) {
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
e00003b2:             |  |         95b2                 add     a1,a1,a2
e00003b4:             |  |  /----- 00958563             beq     a1,s1,e00003be <main+0x2aa>
main():
e00003b8:             |  |  |      00b4b533             sltu    a0,s1,a1
e00003bc:             |  |  |  /-- a019                 j       e00003c2 <main+0x2ae>
e00003be:             |  |  \--|-> 00abb533             sltu    a0,s7,a0
e00003c2:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:99
e00003c6:             +--|-------- fd41                 bnez    a0,e000035e <main+0x24a>
e00003c8:             |  |     /-- 000a1963             bnez    s4,e00003da <main+0x2c6>
e00003cc:             |  |     |   4589                 li      a1,2
e00003ce:             |  |     |   8562                 mv      a0,s8
e00003d0:             |  |     |   8656                 mv      a2,s5
e00003d2:             |  |     |   86de                 mv      a3,s7
e00003d4:             |  |     |   6c9000ef             jal     ra,e000129c <base_log_internal_dv>
e00003d8:             |  |  /--|-- a819                 j       e00003ee <main+0x2da>
e00003da:             |  |  |  \-> 0188                 addi    a0,sp,192
e00003dc:             |  |  |      4651                 li      a2,20
e00003de:             |  |  |      85da                 mv      a1,s6
e00003e0:             |  |  |      652010ef             jal     ra,e0001a32 <memcpy>
e00003e4:             |  |  |      0188                 addi    a0,sp,192
e00003e6:             |  |  |      85d6                 mv      a1,s5
e00003e8:             |  |  |      865e                 mv      a2,s7
e00003ea:             |  |  |      611000ef             jal     ra,e00011fa <base_log_internal_core>
e00003ee:             |  |  \----> 856e                 mv      a0,s11
e00003f0:             |  |         557000ef             jal     ra,e0001146 <test_status_set>
e00003f4:             \--|-------- b7ad                 j       e000035e <main+0x24a>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:100
  CHECK_DIF_OK(dif_aes_load_data(&aes, in_data_plain));
e00003f6:                \-------> 5552                 lw      a0,52(sp)
e00003f8:                          55c2                 lw      a1,48(sp)
e00003fa:                          5632                 lw      a2,44(sp)
e00003fc:                          56a2                 lw      a3,40(sp)
e00003fe:                          c7aa                 sw      a0,204(sp)
e0000400:                          c5ae                 sw      a1,200(sp)
e0000402:                          c3b2                 sw      a2,196(sp)
e0000404:                          c1b6                 sw      a3,192(sp)
e0000406:                          1928                 addi    a0,sp,184
e0000408:                          018c                 addi    a1,sp,192
e000040a:                          453000ef             jal     ra,e000105c <dif_aes_load_data>
e000040e:                /-------- cd15                 beqz    a0,e000044a <main+0x336>
e0000410:                |         842a                 mv      s0,a0
e0000412:                |     /-- 000a1b63             bnez    s4,e0000428 <main+0x314>
e0000416:                |     |   00002517             auipc   a0,0x2
e000041a:                |     |   36a50513             addi    a0,a0,874 # e0002780 <main.kLogFields.14>
e000041e:                |     |   4585                 li      a1,1
e0000420:                |     |   8622                 mv      a2,s0
e0000422:                |     |   67b000ef             jal     ra,e000129c <base_log_internal_dv>
e0000426:                |  /--|-- a829                 j       e0000440 <main+0x32c>
e0000428:                |  |  \-> 00002597             auipc   a1,0x2
e000042c:                |  |      d9858593             addi    a1,a1,-616 # e00021c0 <kAesModesPlainText+0x54>
e0000430:                |  |      0188                 addi    a0,sp,192
e0000432:                |  |      4651                 li      a2,20
e0000434:                |  |      5fe010ef             jal     ra,e0001a32 <memcpy>
e0000438:                |  |      0188                 addi    a0,sp,192
e000043a:                |  |      85a2                 mv      a1,s0
e000043c:                |  |      5bf000ef             jal     ra,e00011fa <base_log_internal_core>
e0000440:                |  \----> 6531                 lui     a0,0xc
e0000442:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000446:                |         501000ef             jal     ra,e0001146 <test_status_set>
e000044a:                \-------> 000f4537             lui     a0,0xf4
e000044e:                          24050a93             addi    s5,a0,576 # f4240 <tohost+0xd4238>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
e0000452:                          4542                 lw      a0,16(sp)
e0000454:                          45d2                 lw      a1,20(sp)
e0000456:                          8656                 mv      a2,s5
e0000458:                          4681                 li      a3,0
e000045a:                          4701                 li      a4,0
e000045c:                          526010ef             jal     ra,e0001982 <udiv64_slow>
e0000460:                          8baa                 mv      s7,a0
e0000462:                          892e                 mv      s2,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e0000464:                      /-> b8002573             csrr    a0,mcycleh
e0000468:                      |   b00025f3             csrr    a1,mcycle
e000046c:                      |   b8002673             csrr    a2,mcycleh
e0000470:                      \-- fec51ae3             bne     a0,a2,e0000464 <main+0x350>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e0000474:                          567d                 li      a2,-1
e0000476:                          02c50533             mul     a0,a0,a2
e000047a:                          40b004b3             neg     s1,a1
e000047e:                          00b035b3             snez    a1,a1
e0000482:                          40b509b3             sub     s3,a0,a1
main():
e0000486:                          00002b17             auipc   s6,0x2
e000048a:                          d4eb0b13             addi    s6,s6,-690 # e00021d4 <kAesModesPlainText+0x68>
e000048e:                          6531                 lui     a0,0xc
e0000490:                          aad50d93             addi    s11,a0,-1363 # baad <_stack_len+0x3aad>
e0000494:                          00002c17             auipc   s8,0x2
e0000498:                          300c0c13             addi    s8,s8,768 # e0002794 <main.kLogFields.17>
e000049c:                          00002c97             auipc   s9,0x2
e00004a0:                          e7cc8c93             addi    s9,s9,-388 # e0002318 <kAesModesCipherTextEcb256+0x108>
e00004a4:                          00002d17             auipc   s10,0x2
e00004a8:                          3f4d0d13             addi    s10,s10,1012 # e0002898 <aes_testutils_get_status.kLogFields>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
e00004ac:             /----------> 1928                 addi    a0,sp,184
e00004ae:             |            458d                 li      a1,3
e00004b0:             |            0830                 addi    a2,sp,24
e00004b2:             |            41f000ef             jal     ra,e00010d0 <dif_aes_get_status>
e00004b6:             |  /-------- c515                 beqz    a0,e00004e2 <main+0x3ce>
e00004b8:             |  |         842a                 mv      s0,a0
e00004ba:             |  |     /-- 000a1863             bnez    s4,e00004ca <main+0x3b6>
e00004be:             |  |     |   4585                 li      a1,1
e00004c0:             |  |     |   856a                 mv      a0,s10
e00004c2:             |  |     |   8622                 mv      a2,s0
e00004c4:             |  |     |   5d9000ef             jal     ra,e000129c <base_log_internal_dv>
e00004c8:             |  |  /--|-- a811                 j       e00004dc <main+0x3c8>
e00004ca:             |  |  |  \-> 0188                 addi    a0,sp,192
e00004cc:             |  |  |      4651                 li      a2,20
e00004ce:             |  |  |      85e6                 mv      a1,s9
e00004d0:             |  |  |      562010ef             jal     ra,e0001a32 <memcpy>
e00004d4:             |  |  |      0188                 addi    a0,sp,192
e00004d6:             |  |  |      85a2                 mv      a1,s0
e00004d8:             |  |  |      523000ef             jal     ra,e00011fa <base_log_internal_core>
e00004dc:             |  |  \----> 856e                 mv      a0,s11
e00004de:             |  |         469000ef             jal     ra,e0001146 <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
e00004e2:             |  \-------> 01814503             lbu     a0,24(sp)
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:105

  // Read out the produced cipher text.
  dif_aes_data_t out_data;

  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusOutputValid, true, TIMEOUT);
e00004e6:             |  /-------- ed39                 bnez    a0,e0000544 <main+0x430>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e00004e8:             |  |     /-> b80025f3             csrr    a1,mcycleh
e00004ec:             |  |     |   b0002573             csrr    a0,mcycle
e00004f0:             |  |     |   b8002673             csrr    a2,mcycleh
e00004f4:             |  |     \-- fec59ae3             bne     a1,a2,e00004e8 <main+0x3d4>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e00004f8:             |  |         9526                 add     a0,a0,s1
e00004fa:             |  |         00953633             sltu    a2,a0,s1
e00004fe:             |  |         964e                 add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
e0000500:             |  |         95b2                 add     a1,a1,a2
e0000502:             |  |  /----- 01258563             beq     a1,s2,e000050c <main+0x3f8>
main():
e0000506:             |  |  |      00b93533             sltu    a0,s2,a1
e000050a:             |  |  |  /-- a019                 j       e0000510 <main+0x3fc>
e000050c:             |  |  \--|-> 00abb533             sltu    a0,s7,a0
e0000510:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:105
e0000514:             +--|-------- fd41                 bnez    a0,e00004ac <main+0x398>
e0000516:             |  |     /-- 000a1963             bnez    s4,e0000528 <main+0x414>
e000051a:             |  |     |   4589                 li      a1,2
e000051c:             |  |     |   8562                 mv      a0,s8
e000051e:             |  |     |   8656                 mv      a2,s5
e0000520:             |  |     |   86de                 mv      a3,s7
e0000522:             |  |     |   57b000ef             jal     ra,e000129c <base_log_internal_dv>
e0000526:             |  |  /--|-- a819                 j       e000053c <main+0x428>
e0000528:             |  |  |  \-> 0188                 addi    a0,sp,192
e000052a:             |  |  |      4651                 li      a2,20
e000052c:             |  |  |      85da                 mv      a1,s6
e000052e:             |  |  |      504010ef             jal     ra,e0001a32 <memcpy>
e0000532:             |  |  |      0188                 addi    a0,sp,192
e0000534:             |  |  |      85d6                 mv      a1,s5
e0000536:             |  |  |      865e                 mv      a2,s7
e0000538:             |  |  |      4c3000ef             jal     ra,e00011fa <base_log_internal_core>
e000053c:             |  |  \----> 856e                 mv      a0,s11
e000053e:             |  |         409000ef             jal     ra,e0001146 <test_status_set>
e0000542:             \--|-------- b7ad                 j       e00004ac <main+0x398>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:107

  CHECK_DIF_OK(dif_aes_read_output(&aes, &out_data));
e0000544:                \-------> 1928                 addi    a0,sp,184
e0000546:                          082c                 addi    a1,sp,24
e0000548:                          34b000ef             jal     ra,e0001092 <dif_aes_read_output>
e000054c:                /-------- cd15                 beqz    a0,e0000588 <main+0x474>
e000054e:                |         842a                 mv      s0,a0
e0000550:                |     /-- 000a1b63             bnez    s4,e0000566 <main+0x452>
e0000554:                |     |   00002517             auipc   a0,0x2
e0000558:                |     |   25450513             addi    a0,a0,596 # e00027a8 <main.kLogFields.20>
e000055c:                |     |   4585                 li      a1,1
e000055e:                |     |   8622                 mv      a2,s0
e0000560:                |     |   53d000ef             jal     ra,e000129c <base_log_internal_dv>
e0000564:                |  /--|-- a829                 j       e000057e <main+0x46a>
e0000566:                |  |  \-> 00002597             auipc   a1,0x2
e000056a:                |  |      c8258593             addi    a1,a1,-894 # e00021e8 <kAesModesPlainText+0x7c>
e000056e:                |  |      0188                 addi    a0,sp,192
e0000570:                |  |      4651                 li      a2,20
e0000572:                |  |      4c0010ef             jal     ra,e0001a32 <memcpy>
e0000576:                |  |      0188                 addi    a0,sp,192
e0000578:                |  |      85a2                 mv      a1,s0
e000057a:                |  |      481000ef             jal     ra,e00011fa <base_log_internal_core>
e000057e:                |  \----> 6531                 lui     a0,0xc
e0000580:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000584:                |         3c3000ef             jal     ra,e0001146 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:110

  // Finish the ECB encryption transaction.
  CHECK_DIF_OK(dif_aes_end(&aes));
e0000588:                \-------> 1928                 addi    a0,sp,184
e000058a:                          299000ef             jal     ra,e0001022 <dif_aes_end>
e000058e:                /-------- cd15                 beqz    a0,e00005ca <main+0x4b6>
e0000590:                |         842a                 mv      s0,a0
e0000592:                |     /-- 000a1b63             bnez    s4,e00005a8 <main+0x494>
e0000596:                |     |   00002517             auipc   a0,0x2
e000059a:                |     |   22650513             addi    a0,a0,550 # e00027bc <main.kLogFields.23>
e000059e:                |     |   4585                 li      a1,1
e00005a0:                |     |   8622                 mv      a2,s0
e00005a2:                |     |   4fb000ef             jal     ra,e000129c <base_log_internal_dv>
e00005a6:                |  /--|-- a829                 j       e00005c0 <main+0x4ac>
e00005a8:                |  |  \-> 00002597             auipc   a1,0x2
e00005ac:                |  |      c5458593             addi    a1,a1,-940 # e00021fc <kAesModesPlainText+0x90>
e00005b0:                |  |      0188                 addi    a0,sp,192
e00005b2:                |  |      4651                 li      a2,20
e00005b4:                |  |      47e010ef             jal     ra,e0001a32 <memcpy>
e00005b8:                |  |      0188                 addi    a0,sp,192
e00005ba:                |  |      85a2                 mv      a1,s0
e00005bc:                |  |      43f000ef             jal     ra,e00011fa <base_log_internal_core>
e00005c0:                |  \----> 6531                 lui     a0,0xc
e00005c2:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00005c6:                |         381000ef             jal     ra,e0001146 <test_status_set>
e00005ca:                \-------> 4501                 li      a0,0
e00005cc:                          4401                 li      s0,0
e00005ce:                          01810913             addi    s2,sp,24
e00005d2:                          00002997             auipc   s3,0x2
e00005d6:                          c3e98993             addi    s3,s3,-962 # e0002210 <kAesModesCipherTextEcb256>
e00005da:                          4d41                 li      s10,16
e00005dc:                          00002a97             auipc   s5,0x2
e00005e0:                          c88a8a93             addi    s5,s5,-888 # e0002264 <kAesModesCipherTextEcb256+0x54>
e00005e4:                          00002c17             auipc   s8,0x2
e00005e8:                          200c0c13             addi    s8,s8,512 # e00027e4 <main.kLogFields.29>
e00005ec:                          00002b17             auipc   s6,0x2
e00005f0:                          c64b0b13             addi    s6,s6,-924 # e0002250 <kAesModesCipherTextEcb256+0x40>
e00005f4:                          00002b97             auipc   s7,0x2
e00005f8:                          1dcb8b93             addi    s7,s7,476 # e00027d0 <main.kLogFields.26>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:112

  CHECK_ARRAYS_EQ((uint8_t *)out_data.data, kAesModesCipherTextEcb256,
e00005fc:       /----------------> 008904b3             add     s1,s2,s0
e0000600:       |                  0004c583             lbu     a1,0(s1)
e0000604:       |                  01340633             add     a2,s0,s3
e0000608:       |                  00064d83             lbu     s11,0(a2)
e000060c:       |  /-------------- 05b58c63             beq     a1,s11,e0000664 <main+0x550>
e0000610:       |  |               8905                 andi    a0,a0,1
e0000612:       |  |           /-- c501                 beqz    a0,e000061a <main+0x506>
e0000614:       |  |        /--|-- 000a0963             beqz    s4,e0000626 <main+0x512>
e0000618:       |  |  /-----|--|-- a805                 j       e0000648 <main+0x534>
e000061a:       |  |  |  /--|--\-X 000a1f63             bnez    s4,e0000638 <main+0x524>
e000061e:       |  |  |  |  |      855e                 mv      a0,s7
e0000620:       |  |  |  |  |      4581                 li      a1,0
e0000622:       |  |  |  |  |      47b000ef             jal     ra,e000129c <base_log_internal_dv>
e0000626:       |  |  |  |  \----> 0004c683             lbu     a3,0(s1)
e000062a:       |  |  |  |         458d                 li      a1,3
e000062c:       |  |  |  |         8562                 mv      a0,s8
e000062e:       |  |  |  |         8622                 mv      a2,s0
e0000630:       |  |  |  |         876e                 mv      a4,s11
e0000632:       |  |  |  |         46b000ef             jal     ra,e000129c <base_log_internal_dv>
e0000636:       |  |  |  |     /-- a035                 j       e0000662 <main+0x54e>
e0000638:       |  |  |  \-----|-> 0188                 addi    a0,sp,192
e000063a:       |  |  |        |   4651                 li      a2,20
e000063c:       |  |  |        |   85da                 mv      a1,s6
e000063e:       |  |  |        |   3f4010ef             jal     ra,e0001a32 <memcpy>
e0000642:       |  |  |        |   0188                 addi    a0,sp,192
e0000644:       |  |  |        |   3b7000ef             jal     ra,e00011fa <base_log_internal_core>
e0000648:       |  |  \--------|-> 0004cc83             lbu     s9,0(s1)
e000064c:       |  |           |   0188                 addi    a0,sp,192
e000064e:       |  |           |   4651                 li      a2,20
e0000650:       |  |           |   85d6                 mv      a1,s5
e0000652:       |  |           |   3e0010ef             jal     ra,e0001a32 <memcpy>
e0000656:       |  |           |   0188                 addi    a0,sp,192
e0000658:       |  |           |   85a2                 mv      a1,s0
e000065a:       |  |           |   8666                 mv      a2,s9
e000065c:       |  |           |   86ee                 mv      a3,s11
e000065e:       |  |           |   39d000ef             jal     ra,e00011fa <base_log_internal_core>
e0000662:       |  |           \-> 4505                 li      a0,1
e0000664:       |  \-------------> 0405                 addi    s0,s0,1
e0000666:       \----------------- f9a41be3             bne     s0,s10,e00005fc <main+0x4e8>
e000066a:                          8905                 andi    a0,a0,1
e000066c:                      /-- c511                 beqz    a0,e0000678 <main+0x564>
e000066e:                      |   6531                 lui     a0,0xc
e0000670:                      |   aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000674:                      |   2d3000ef             jal     ra,e0001146 <test_status_set>
e0000678:                      \-> 4509                 li      a0,2
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:116
                  sizeof(out_data.data));

  // Setup ECB decryption transaction.
  transaction.operation = kDifAesOperationDecrypt;
e000067a:                          dc2a                 sw      a0,56(sp)
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:117
  CHECK_DIF_OK(dif_aes_start(&aes, &transaction, &key, NULL));
e000067c:                          1928                 addi    a0,sp,184
e000067e:                          182c                 addi    a1,sp,56
e0000680:                          08b0                 addi    a2,sp,88
e0000682:                          4681                 li      a3,0
e0000684:                          067000ef             jal     ra,e0000eea <dif_aes_start>
e0000688:                /-------- cd15                 beqz    a0,e00006c4 <main+0x5b0>
e000068a:                |         842a                 mv      s0,a0
e000068c:                |     /-- 000a1b63             bnez    s4,e00006a2 <main+0x58e>
e0000690:                |     |   00002517             auipc   a0,0x2
e0000694:                |     |   16850513             addi    a0,a0,360 # e00027f8 <main.kLogFields.32>
e0000698:                |     |   4585                 li      a1,1
e000069a:                |     |   8622                 mv      a2,s0
e000069c:                |     |   401000ef             jal     ra,e000129c <base_log_internal_dv>
e00006a0:                |  /--|-- a829                 j       e00006ba <main+0x5a6>
e00006a2:                |  |  \-> 00002597             auipc   a1,0x2
e00006a6:                |  |      bd658593             addi    a1,a1,-1066 # e0002278 <kAesModesCipherTextEcb256+0x68>
e00006aa:                |  |      0188                 addi    a0,sp,192
e00006ac:                |  |      4651                 li      a2,20
e00006ae:                |  |      384010ef             jal     ra,e0001a32 <memcpy>
e00006b2:                |  |      0188                 addi    a0,sp,192
e00006b4:                |  |      85a2                 mv      a1,s0
e00006b6:                |  |      345000ef             jal     ra,e00011fa <base_log_internal_core>
e00006ba:                |  \----> 6531                 lui     a0,0xc
e00006bc:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00006c0:                |         287000ef             jal     ra,e0001146 <test_status_set>
e00006c4:                \-------> 000f4537             lui     a0,0xf4
e00006c8:                          24050a93             addi    s5,a0,576 # f4240 <tohost+0xd4238>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
e00006cc:                          4542                 lw      a0,16(sp)
e00006ce:                          45d2                 lw      a1,20(sp)
e00006d0:                          8656                 mv      a2,s5
e00006d2:                          4681                 li      a3,0
e00006d4:                          4701                 li      a4,0
e00006d6:                          2ac010ef             jal     ra,e0001982 <udiv64_slow>
e00006da:                          8baa                 mv      s7,a0
e00006dc:                          892e                 mv      s2,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e00006de:                      /-> b8002573             csrr    a0,mcycleh
e00006e2:                      |   b00025f3             csrr    a1,mcycle
e00006e6:                      |   b8002673             csrr    a2,mcycleh
e00006ea:                      \-- fec51ae3             bne     a0,a2,e00006de <main+0x5ca>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e00006ee:                          567d                 li      a2,-1
e00006f0:                          02c50533             mul     a0,a0,a2
e00006f4:                          40b004b3             neg     s1,a1
e00006f8:                          00b035b3             snez    a1,a1
e00006fc:                          40b509b3             sub     s3,a0,a1
main():
e0000700:                          00002b17             auipc   s6,0x2
e0000704:                          b8cb0b13             addi    s6,s6,-1140 # e000228c <kAesModesCipherTextEcb256+0x7c>
e0000708:                          6531                 lui     a0,0xc
e000070a:                          aad50d93             addi    s11,a0,-1363 # baad <_stack_len+0x3aad>
e000070e:                          00002c17             auipc   s8,0x2
e0000712:                          0fec0c13             addi    s8,s8,254 # e000280c <main.kLogFields.34>
e0000716:                          00002c97             auipc   s9,0x2
e000071a:                          c02c8c93             addi    s9,s9,-1022 # e0002318 <kAesModesCipherTextEcb256+0x108>
e000071e:                          00002d17             auipc   s10,0x2
e0000722:                          17ad0d13             addi    s10,s10,378 # e0002898 <aes_testutils_get_status.kLogFields>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
e0000726:             /----------> 1928                 addi    a0,sp,184
e0000728:             |            4591                 li      a1,4
e000072a:             |            0db10613             addi    a2,sp,219
e000072e:             |            1a3000ef             jal     ra,e00010d0 <dif_aes_get_status>
e0000732:             |  /-------- c515                 beqz    a0,e000075e <main+0x64a>
e0000734:             |  |         842a                 mv      s0,a0
e0000736:             |  |     /-- 000a1863             bnez    s4,e0000746 <main+0x632>
e000073a:             |  |     |   4585                 li      a1,1
e000073c:             |  |     |   856a                 mv      a0,s10
e000073e:             |  |     |   8622                 mv      a2,s0
e0000740:             |  |     |   35d000ef             jal     ra,e000129c <base_log_internal_dv>
e0000744:             |  |  /--|-- a811                 j       e0000758 <main+0x644>
e0000746:             |  |  |  \-> 0188                 addi    a0,sp,192
e0000748:             |  |  |      4651                 li      a2,20
e000074a:             |  |  |      85e6                 mv      a1,s9
e000074c:             |  |  |      2e6010ef             jal     ra,e0001a32 <memcpy>
e0000750:             |  |  |      0188                 addi    a0,sp,192
e0000752:             |  |  |      85a2                 mv      a1,s0
e0000754:             |  |  |      2a7000ef             jal     ra,e00011fa <base_log_internal_core>
e0000758:             |  |  \----> 856e                 mv      a0,s11
e000075a:             |  |         1ed000ef             jal     ra,e0001146 <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
e000075e:             |  \-------> 0db14503             lbu     a0,219(sp)
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:120

  // Load the previously produced cipher text to start the decryption operation.
  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusInputReady, true, TIMEOUT);
e0000762:             |  /-------- ed39                 bnez    a0,e00007c0 <main+0x6ac>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e0000764:             |  |     /-> b80025f3             csrr    a1,mcycleh
e0000768:             |  |     |   b0002573             csrr    a0,mcycle
e000076c:             |  |     |   b8002673             csrr    a2,mcycleh
e0000770:             |  |     \-- fec59ae3             bne     a1,a2,e0000764 <main+0x650>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e0000774:             |  |         9526                 add     a0,a0,s1
e0000776:             |  |         00953633             sltu    a2,a0,s1
e000077a:             |  |         964e                 add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
e000077c:             |  |         95b2                 add     a1,a1,a2
e000077e:             |  |  /----- 01258563             beq     a1,s2,e0000788 <main+0x674>
main():
e0000782:             |  |  |      00b93533             sltu    a0,s2,a1
e0000786:             |  |  |  /-- a019                 j       e000078c <main+0x678>
e0000788:             |  |  \--|-> 00abb533             sltu    a0,s7,a0
e000078c:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:120
e0000790:             +--|-------- f959                 bnez    a0,e0000726 <main+0x612>
e0000792:             |  |     /-- 000a1963             bnez    s4,e00007a4 <main+0x690>
e0000796:             |  |     |   4589                 li      a1,2
e0000798:             |  |     |   8562                 mv      a0,s8
e000079a:             |  |     |   8656                 mv      a2,s5
e000079c:             |  |     |   86de                 mv      a3,s7
e000079e:             |  |     |   2ff000ef             jal     ra,e000129c <base_log_internal_dv>
e00007a2:             |  |  /--|-- a819                 j       e00007b8 <main+0x6a4>
e00007a4:             |  |  |  \-> 0188                 addi    a0,sp,192
e00007a6:             |  |  |      4651                 li      a2,20
e00007a8:             |  |  |      85da                 mv      a1,s6
e00007aa:             |  |  |      288010ef             jal     ra,e0001a32 <memcpy>
e00007ae:             |  |  |      0188                 addi    a0,sp,192
e00007b0:             |  |  |      85d6                 mv      a1,s5
e00007b2:             |  |  |      865e                 mv      a2,s7
e00007b4:             |  |  |      247000ef             jal     ra,e00011fa <base_log_internal_core>
e00007b8:             |  |  \----> 856e                 mv      a0,s11
e00007ba:             |  |         18d000ef             jal     ra,e0001146 <test_status_set>
e00007be:             \--|-------- b7a5                 j       e0000726 <main+0x612>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:121
  CHECK_DIF_OK(dif_aes_load_data(&aes, out_data));
e00007c0:                \-------> 5512                 lw      a0,36(sp)
e00007c2:                          5582                 lw      a1,32(sp)
e00007c4:                          4672                 lw      a2,28(sp)
e00007c6:                          46e2                 lw      a3,24(sp)
e00007c8:                          c7aa                 sw      a0,204(sp)
e00007ca:                          c5ae                 sw      a1,200(sp)
e00007cc:                          c3b2                 sw      a2,196(sp)
e00007ce:                          c1b6                 sw      a3,192(sp)
e00007d0:                          1928                 addi    a0,sp,184
e00007d2:                          018c                 addi    a1,sp,192
e00007d4:                          089000ef             jal     ra,e000105c <dif_aes_load_data>
e00007d8:                /-------- cd15                 beqz    a0,e0000814 <main+0x700>
e00007da:                |         842a                 mv      s0,a0
e00007dc:                |     /-- 000a1b63             bnez    s4,e00007f2 <main+0x6de>
e00007e0:                |     |   00002517             auipc   a0,0x2
e00007e4:                |     |   04050513             addi    a0,a0,64 # e0002820 <main.kLogFields.36>
e00007e8:                |     |   4585                 li      a1,1
e00007ea:                |     |   8622                 mv      a2,s0
e00007ec:                |     |   2b1000ef             jal     ra,e000129c <base_log_internal_dv>
e00007f0:                |  /--|-- a829                 j       e000080a <main+0x6f6>
e00007f2:                |  |  \-> 00002597             auipc   a1,0x2
e00007f6:                |  |      aae58593             addi    a1,a1,-1362 # e00022a0 <kAesModesCipherTextEcb256+0x90>
e00007fa:                |  |      0188                 addi    a0,sp,192
e00007fc:                |  |      4651                 li      a2,20
e00007fe:                |  |      234010ef             jal     ra,e0001a32 <memcpy>
e0000802:                |  |      0188                 addi    a0,sp,192
e0000804:                |  |      85a2                 mv      a1,s0
e0000806:                |  |      1f5000ef             jal     ra,e00011fa <base_log_internal_core>
e000080a:                |  \----> 6531                 lui     a0,0xc
e000080c:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000810:                |         137000ef             jal     ra,e0001146 <test_status_set>
e0000814:                \-------> 000f4537             lui     a0,0xf4
e0000818:                          24050a93             addi    s5,a0,576 # f4240 <tohost+0xd4238>
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
e000081c:                          4542                 lw      a0,16(sp)
e000081e:                          45d2                 lw      a1,20(sp)
e0000820:                          8656                 mv      a2,s5
e0000822:                          4681                 li      a3,0
e0000824:                          4701                 li      a4,0
e0000826:                          15c010ef             jal     ra,e0001982 <udiv64_slow>
e000082a:                          89aa                 mv      s3,a0
e000082c:                          8d2e                 mv      s10,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e000082e:                      /-> b8002573             csrr    a0,mcycleh
e0000832:                      |   b00025f3             csrr    a1,mcycle
e0000836:                      |   b8002673             csrr    a2,mcycleh
e000083a:                      \-- fec51ae3             bne     a0,a2,e000082e <main+0x71a>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e000083e:                          567d                 li      a2,-1
e0000840:                          02c50533             mul     a0,a0,a2
e0000844:                          40b004b3             neg     s1,a1
e0000848:                          00b035b3             snez    a1,a1
e000084c:                          40b50db3             sub     s11,a0,a1
main():
e0000850:                          00002917             auipc   s2,0x2
e0000854:                          a6490913             addi    s2,s2,-1436 # e00022b4 <kAesModesCipherTextEcb256+0xa4>
e0000858:                          6531                 lui     a0,0xc
e000085a:                          aad50c93             addi    s9,a0,-1363 # baad <_stack_len+0x3aad>
e000085e:                          00002b17             auipc   s6,0x2
e0000862:                          fd6b0b13             addi    s6,s6,-42 # e0002834 <main.kLogFields.39>
e0000866:                          00002b97             auipc   s7,0x2
e000086a:                          ab2b8b93             addi    s7,s7,-1358 # e0002318 <kAesModesCipherTextEcb256+0x108>
e000086e:                          00002c17             auipc   s8,0x2
e0000872:                          02ac0c13             addi    s8,s8,42 # e0002898 <aes_testutils_get_status.kLogFields>
aes_testutils_get_status():
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:20
  CHECK_DIF_OK(dif_aes_get_status(aes, flag, &status));
e0000876:             /----------> 1928                 addi    a0,sp,184
e0000878:             |            458d                 li      a1,3
e000087a:             |            0db10613             addi    a2,sp,219
e000087e:             |            053000ef             jal     ra,e00010d0 <dif_aes_get_status>
e0000882:             |  /-------- c515                 beqz    a0,e00008ae <main+0x79a>
e0000884:             |  |         842a                 mv      s0,a0
e0000886:             |  |     /-- 000a1863             bnez    s4,e0000896 <main+0x782>
e000088a:             |  |     |   4585                 li      a1,1
e000088c:             |  |     |   8562                 mv      a0,s8
e000088e:             |  |     |   8622                 mv      a2,s0
e0000890:             |  |     |   20d000ef             jal     ra,e000129c <base_log_internal_dv>
e0000894:             |  |  /--|-- a811                 j       e00008a8 <main+0x794>
e0000896:             |  |  |  \-> 0188                 addi    a0,sp,192
e0000898:             |  |  |      4651                 li      a2,20
e000089a:             |  |  |      85de                 mv      a1,s7
e000089c:             |  |  |      196010ef             jal     ra,e0001a32 <memcpy>
e00008a0:             |  |  |      0188                 addi    a0,sp,192
e00008a2:             |  |  |      85a2                 mv      a1,s0
e00008a4:             |  |  |      157000ef             jal     ra,e00011fa <base_log_internal_core>
e00008a8:             |  |  \----> 8566                 mv      a0,s9
e00008aa:             |  |         09d000ef             jal     ra,e0001146 <test_status_set>
/proc/self/cwd/./sw/device/lib/testing/aes_testutils.h:21
  return status;
e00008ae:             |  \-------> 0db14503             lbu     a0,219(sp)
main():
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:124

  // Read out the produced plain text.
  AES_TESTUTILS_WAIT_FOR_STATUS(&aes, kDifAesStatusOutputValid, true, TIMEOUT);
e00008b2:             |  /-------- ed39                 bnez    a0,e0000910 <main+0x7fc>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e00008b4:             |  |     /-> b80025f3             csrr    a1,mcycleh
e00008b8:             |  |     |   b0002573             csrr    a0,mcycle
e00008bc:             |  |     |   b8002673             csrr    a2,mcycleh
e00008c0:             |  |     \-- fec59ae3             bne     a1,a2,e00008b4 <main+0x7a0>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e00008c4:             |  |         9526                 add     a0,a0,s1
e00008c6:             |  |         00953633             sltu    a2,a0,s1
e00008ca:             |  |         966e                 add     a2,a2,s11
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
e00008cc:             |  |         95b2                 add     a1,a1,a2
e00008ce:             |  |  /----- 01a58563             beq     a1,s10,e00008d8 <main+0x7c4>
main():
e00008d2:             |  |  |      00bd3533             sltu    a0,s10,a1
e00008d6:             |  |  |  /-- a019                 j       e00008dc <main+0x7c8>
e00008d8:             |  |  \--|-> 00a9b533             sltu    a0,s3,a0
e00008dc:             |  |     \-> 00154513             xori    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:124
e00008e0:             +--|-------- f959                 bnez    a0,e0000876 <main+0x762>
e00008e2:             |  |     /-- 000a1963             bnez    s4,e00008f4 <main+0x7e0>
e00008e6:             |  |     |   4589                 li      a1,2
e00008e8:             |  |     |   855a                 mv      a0,s6
e00008ea:             |  |     |   8656                 mv      a2,s5
e00008ec:             |  |     |   86ce                 mv      a3,s3
e00008ee:             |  |     |   1af000ef             jal     ra,e000129c <base_log_internal_dv>
e00008f2:             |  |  /--|-- a819                 j       e0000908 <main+0x7f4>
e00008f4:             |  |  |  \-> 0188                 addi    a0,sp,192
e00008f6:             |  |  |      4651                 li      a2,20
e00008f8:             |  |  |      85ca                 mv      a1,s2
e00008fa:             |  |  |      138010ef             jal     ra,e0001a32 <memcpy>
e00008fe:             |  |  |      0188                 addi    a0,sp,192
e0000900:             |  |  |      85d6                 mv      a1,s5
e0000902:             |  |  |      864e                 mv      a2,s3
e0000904:             |  |  |      0f7000ef             jal     ra,e00011fa <base_log_internal_core>
e0000908:             |  |  \----> 8566                 mv      a0,s9
e000090a:             |  |         03d000ef             jal     ra,e0001146 <test_status_set>
e000090e:             \--|-------- b7a5                 j       e0000876 <main+0x762>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:125
  CHECK_DIF_OK(dif_aes_read_output(&aes, &out_data));
e0000910:                \-------> 1928                 addi    a0,sp,184
e0000912:                          082c                 addi    a1,sp,24
e0000914:                          77e000ef             jal     ra,e0001092 <dif_aes_read_output>
e0000918:                          4db2                 lw      s11,12(sp)
e000091a:                /-------- cd15                 beqz    a0,e0000956 <main+0x842>
e000091c:                |         842a                 mv      s0,a0
e000091e:                |     /-- 000a1b63             bnez    s4,e0000934 <main+0x820>
e0000922:                |     |   00002517             auipc   a0,0x2
e0000926:                |     |   f2650513             addi    a0,a0,-218 # e0002848 <main.kLogFields.41>
e000092a:                |     |   4585                 li      a1,1
e000092c:                |     |   8622                 mv      a2,s0
e000092e:                |     |   16f000ef             jal     ra,e000129c <base_log_internal_dv>
e0000932:                |  /--|-- a829                 j       e000094c <main+0x838>
e0000934:                |  |  \-> 00002597             auipc   a1,0x2
e0000938:                |  |      99458593             addi    a1,a1,-1644 # e00022c8 <kAesModesCipherTextEcb256+0xb8>
e000093c:                |  |      0188                 addi    a0,sp,192
e000093e:                |  |      4651                 li      a2,20
e0000940:                |  |      0f2010ef             jal     ra,e0001a32 <memcpy>
e0000944:                |  |      0188                 addi    a0,sp,192
e0000946:                |  |      85a2                 mv      a1,s0
e0000948:                |  |      0b3000ef             jal     ra,e00011fa <base_log_internal_core>
e000094c:                |  \----> 6531                 lui     a0,0xc
e000094e:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000952:                |         7f4000ef             jal     ra,e0001146 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:128

  // Finish the ECB encryption transaction.
  CHECK_DIF_OK(dif_aes_end(&aes));
e0000956:                \-------> 1928                 addi    a0,sp,184
e0000958:                          6ca000ef             jal     ra,e0001022 <dif_aes_end>
e000095c:                /-------- cd15                 beqz    a0,e0000998 <main+0x884>
e000095e:                |         842a                 mv      s0,a0
e0000960:                |     /-- 000a1b63             bnez    s4,e0000976 <main+0x862>
e0000964:                |     |   00002517             auipc   a0,0x2
e0000968:                |     |   ef850513             addi    a0,a0,-264 # e000285c <main.kLogFields.43>
e000096c:                |     |   4585                 li      a1,1
e000096e:                |     |   8622                 mv      a2,s0
e0000970:                |     |   12d000ef             jal     ra,e000129c <base_log_internal_dv>
e0000974:                |  /--|-- a829                 j       e000098e <main+0x87a>
e0000976:                |  |  \-> 00002597             auipc   a1,0x2
e000097a:                |  |      96658593             addi    a1,a1,-1690 # e00022dc <kAesModesCipherTextEcb256+0xcc>
e000097e:                |  |      0188                 addi    a0,sp,192
e0000980:                |  |      4651                 li      a2,20
e0000982:                |  |      0b0010ef             jal     ra,e0001a32 <memcpy>
e0000986:                |  |      0188                 addi    a0,sp,192
e0000988:                |  |      85a2                 mv      a1,s0
e000098a:                |  |      071000ef             jal     ra,e00011fa <base_log_internal_core>
e000098e:                |  \----> 6531                 lui     a0,0xc
e0000990:                |         aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000994:                |         7b2000ef             jal     ra,e0001146 <test_status_set>
e0000998:                \-------> 4401                 li      s0,0
e000099a:                          4501                 li      a0,0
e000099c:                          01810c13             addi    s8,sp,24
e00009a0:                          4cc1                 li      s9,16
e00009a2:                          00002917             auipc   s2,0x2
e00009a6:                          96290913             addi    s2,s2,-1694 # e0002304 <kAesModesCipherTextEcb256+0xf4>
e00009aa:                          00002b17             auipc   s6,0x2
e00009ae:                          edab0b13             addi    s6,s6,-294 # e0002884 <main.kLogFields.48>
e00009b2:                          00002997             auipc   s3,0x2
e00009b6:                          93e98993             addi    s3,s3,-1730 # e00022f0 <kAesModesCipherTextEcb256+0xe0>
e00009ba:                          00002a97             auipc   s5,0x2
e00009be:                          eb6a8a93             addi    s5,s5,-330 # e0002870 <main.kLogFields.45>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:130

  CHECK_ARRAYS_EQ((uint8_t *)out_data.data, kAesModesPlainText,
e00009c2:       /----------------> 008c04b3             add     s1,s8,s0
e00009c6:       |                  0004c583             lbu     a1,0(s1)
e00009ca:       |                  01b40633             add     a2,s0,s11
e00009ce:       |                  00064d03             lbu     s10,0(a2)
e00009d2:       |  /-------------- 05a58c63             beq     a1,s10,e0000a2a <main+0x916>
e00009d6:       |  |               8905                 andi    a0,a0,1
e00009d8:       |  |           /-- c501                 beqz    a0,e00009e0 <main+0x8cc>
e00009da:       |  |        /--|-- 000a0963             beqz    s4,e00009ec <main+0x8d8>
e00009de:       |  |  /-----|--|-- a805                 j       e0000a0e <main+0x8fa>
e00009e0:       |  |  |  /--|--\-X 000a1f63             bnez    s4,e00009fe <main+0x8ea>
e00009e4:       |  |  |  |  |      8556                 mv      a0,s5
e00009e6:       |  |  |  |  |      4581                 li      a1,0
e00009e8:       |  |  |  |  |      0b5000ef             jal     ra,e000129c <base_log_internal_dv>
e00009ec:       |  |  |  |  \----> 0004c683             lbu     a3,0(s1)
e00009f0:       |  |  |  |         458d                 li      a1,3
e00009f2:       |  |  |  |         855a                 mv      a0,s6
e00009f4:       |  |  |  |         8622                 mv      a2,s0
e00009f6:       |  |  |  |         876a                 mv      a4,s10
e00009f8:       |  |  |  |         0a5000ef             jal     ra,e000129c <base_log_internal_dv>
e00009fc:       |  |  |  |     /-- a035                 j       e0000a28 <main+0x914>
e00009fe:       |  |  |  \-----|-> 0188                 addi    a0,sp,192
e0000a00:       |  |  |        |   4651                 li      a2,20
e0000a02:       |  |  |        |   85ce                 mv      a1,s3
e0000a04:       |  |  |        |   02e010ef             jal     ra,e0001a32 <memcpy>
e0000a08:       |  |  |        |   0188                 addi    a0,sp,192
e0000a0a:       |  |  |        |   7f0000ef             jal     ra,e00011fa <base_log_internal_core>
e0000a0e:       |  |  \--------|-> 0004cb83             lbu     s7,0(s1)
e0000a12:       |  |           |   0188                 addi    a0,sp,192
e0000a14:       |  |           |   4651                 li      a2,20
e0000a16:       |  |           |   85ca                 mv      a1,s2
e0000a18:       |  |           |   01a010ef             jal     ra,e0001a32 <memcpy>
e0000a1c:       |  |           |   0188                 addi    a0,sp,192
e0000a1e:       |  |           |   85a2                 mv      a1,s0
e0000a20:       |  |           |   865e                 mv      a2,s7
e0000a22:       |  |           |   86ea                 mv      a3,s10
e0000a24:       |  |           |   7d6000ef             jal     ra,e00011fa <base_log_internal_core>
e0000a28:       |  |           \-> 4505                 li      a0,1
e0000a2a:       |  \-------------> 0405                 addi    s0,s0,1
e0000a2c:       \----------------- f9941be3             bne     s0,s9,e00009c2 <main+0x8ae>
e0000a30:                          8905                 andi    a0,a0,1
e0000a32:                      /-- c511                 beqz    a0,e0000a3e <main+0x92a>
e0000a34:                      |   6531                 lui     a0,0xc
e0000a36:                      |   aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000a3a:                      |   70c000ef             jal     ra,e0001146 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:133
                  sizeof(out_data.data));

  printf("Succeed!\r\n");
e0000a3e:                      \-> 00001517             auipc   a0,0x1
e0000a42:                          62650513             addi    a0,a0,1574 # e0002064 <memrchr+0x49a>
e0000a46:                          202d                 jal     e0000a70 <printf>
/proc/self/cwd/sw/tests/opentitan/sram_aes_smoketest/sram_aes_smoketest.c:134
  return 1;
e0000a48:                          4505                 li      a0,1
e0000a4a:                          4dfe                 lw      s11,220(sp)
e0000a4c:                          5d0e                 lw      s10,224(sp)
e0000a4e:                          5c9e                 lw      s9,228(sp)
e0000a50:                          5c2e                 lw      s8,232(sp)
e0000a52:                          5bbe                 lw      s7,236(sp)
e0000a54:                          5b4e                 lw      s6,240(sp)
e0000a56:                          5ade                 lw      s5,244(sp)
e0000a58:                          5a6e                 lw      s4,248(sp)
e0000a5a:                          59fe                 lw      s3,252(sp)
e0000a5c:                          10012903             lw      s2,256(sp)
e0000a60:                          10412483             lw      s1,260(sp)
e0000a64:                          10812403             lw      s0,264(sp)
e0000a68:                          10c12083             lw      ra,268(sp)
e0000a6c:                          6151                 addi    sp,sp,272
e0000a6e:                          8082                 ret

e0000a70 <printf>:
printf():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:312

  return pc;
}

int printf(const char *format, ...)
{
e0000a70:                                      711d                     addi    sp,sp,-96
e0000a72:                                      de06                     sw      ra,60(sp)
e0000a74:                                      dc22                     sw      s0,56(sp)
e0000a76:                                      da26                     sw      s1,52(sp)
e0000a78:                                      d84a                     sw      s2,48(sp)
e0000a7a:                                      d64e                     sw      s3,44(sp)
e0000a7c:                                      d452                     sw      s4,40(sp)
e0000a7e:                                      d256                     sw      s5,36(sp)
e0000a80:                                      d05a                     sw      s6,32(sp)
e0000a82:                                      ce5e                     sw      s7,28(sp)
e0000a84:                                      cc62                     sw      s8,24(sp)
e0000a86:                                      ca66                     sw      s9,20(sp)
e0000a88:                                      c86a                     sw      s10,16(sp)
e0000a8a:                                      c66e                     sw      s11,12(sp)
e0000a8c:                                      84aa                     mv      s1,a0
e0000a8e:                                      4a01                     li      s4,0
e0000a90:                                      cec6                     sw      a7,92(sp)
e0000a92:                                      ccc2                     sw      a6,88(sp)
e0000a94:                                      cabe                     sw      a5,84(sp)
e0000a96:                                      c8ba                     sw      a4,80(sp)
e0000a98:                                      c6b6                     sw      a3,76(sp)
e0000a9a:                                      c4b2                     sw      a2,72(sp)
e0000a9c:                                      c2ae                     sw      a1,68(sp)
e0000a9e:                                      04410d13                 addi    s10,sp,68
/proc/self/cwd/sw/tests/opentitan/common/utils.c:316
  int pc;
  va_list va;

  va_start(va, format);
e0000aa2:                                      c26a                     sw      s10,4(sp)
e0000aa4:                                      02500913                 li      s2,37
e0000aa8:                                      02d00993                 li      s3,45
e0000aac:                                      03000b13                 li      s6,48
e0000ab0:                                      4aa5                     li      s5,9
e0000ab2:                                      4429                     li      s0,10
e0000ab4:                                      07200b93                 li      s7,114
e0000ab8:                                      05800c13                 li      s8,88
e0000abc:                                      07800d93                 li      s11,120
e0000ac0:                                      40000cb7                 lui     s9,0x40000
qprint():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:249
  for (; *format != 0; ++format)
e0000ac4:       /----------------------------> 0004c583                 lbu     a1,0(s1)
e0000ac8:       |                          /-- 01258463                 beq     a1,s2,e0000ad0 <printf+0x60>
e0000acc:       |                 /--------|-- ed99                     bnez    a1,e0000aea <printf+0x7a>
e0000ace:       |  /--------------|--------|-- aa11                     j       e0000be2 <printf+0x172>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:255
      if (*format == '\0') break;
e0000ad0:       |  |              |        \-> 0014c603                 lbu     a2,1(s1)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:253
      ++format;
e0000ad4:       |  |              |            00148513                 addi    a0,s1,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:255
      if (*format == '\0') break;
e0000ad8:       |  |              |        /-- 01260863                 beq     a2,s2,e0000ae8 <printf+0x78>
e0000adc:       |  |              |  /-----|-- 03360063                 beq     a2,s3,e0000afc <printf+0x8c>
e0000ae0:       |  +--------------|--|-----|-- 10060163                 beqz    a2,e0000be2 <printf+0x172>
e0000ae4:       |  |              |  |     |   4581                     li      a1,0
e0000ae6:       |  |              |  |  /--|-- a831                     j       e0000b02 <printf+0x92>
e0000ae8:       |  |              |  |  |  \-> 84aa                     mv      s1,a0
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e0000aea:       |  |              >--|--|----> 014ca503                 lw      a0,20(s9) # 40000014 <tohost+0x3ffe000c>
e0000aee:       |  |              |  |  |      02057513                 andi    a0,a0,32
e0000af2:       |  |              \--|--|----- dd65                     beqz    a0,e0000aea <printf+0x7a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e0000af4:       |  |                 |  |      00bca023                 sw      a1,0(s9)
qprint():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:303
      ++pc;
e0000af8:       |  |                 |  |      0a05                     addi    s4,s4,1
e0000afa:       |  |  /--------------|--|----- a0d5                     j       e0000bde <printf+0x16e>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:259
        ++format;
e0000afc:       |  |  |              \--|----> 00248513                 addi    a0,s1,2
e0000b00:       |  |  |                 |      4585                     li      a1,1
e0000b02:       |  |  |                 \----> 0025e613                 ori     a2,a1,2
/proc/self/cwd/sw/tests/opentitan/common/utils.c:262
      while (*format == '0')
e0000b06:       |  |  |                        fff50493                 addi    s1,a0,-1
e0000b0a:       |  |  |                    /-> 0014c503                 lbu     a0,1(s1)
e0000b0e:       |  |  |                    |   872e                     mv      a4,a1
e0000b10:       |  |  |                    |   0485                     addi    s1,s1,1
e0000b12:       |  |  |                    |   85b2                     mv      a1,a2
e0000b14:       |  |  |                    \-- ff650be3                 beq     a0,s6,e0000b0a <printf+0x9a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:267
      for ( ; *format >= '0' && *format <= '9'; ++format) {
e0000b18:       |  |  |                        fd050593                 addi    a1,a0,-48
e0000b1c:       |  |  |                        4681                     li      a3,0
e0000b1e:       |  |  |                        0ff5f593                 andi    a1,a1,255
e0000b22:       |  |  |                 /----- 02bae563                 bltu    s5,a1,e0000b4c <printf+0xdc>
e0000b26:       |  |  |                 |      85a6                     mv      a1,s1
e0000b28:       |  |  |                 |  /-> 0ff57613                 andi    a2,a0,255
e0000b2c:       |  |  |                 |  |   0015c503                 lbu     a0,1(a1)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:268
        width *= 10;
e0000b30:       |  |  |                 |  |   028686b3                 mul     a3,a3,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:269
        width += *format - '0';
e0000b34:       |  |  |                 |  |   9636                     add     a2,a2,a3
/proc/self/cwd/sw/tests/opentitan/common/utils.c:267
      for ( ; *format >= '0' && *format <= '9'; ++format) {
e0000b36:       |  |  |                 |  |   00158493                 addi    s1,a1,1
e0000b3a:       |  |  |                 |  |   fd050593                 addi    a1,a0,-48
e0000b3e:       |  |  |                 |  |   0ff5f793                 andi    a5,a1,255
/proc/self/cwd/sw/tests/opentitan/common/utils.c:269
        width += *format - '0';
e0000b42:       |  |  |                 |  |   fd060693                 addi    a3,a2,-48
e0000b46:       |  |  |                 |  |   85a6                     mv      a1,s1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:267
      for ( ; *format >= '0' && *format <= '9'; ++format) {
e0000b48:       |  |  |                 |  \-- fe87e0e3                 bltu    a5,s0,e0000b28 <printf+0xb8>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:271
      if( *format == 's' ) {
e0000b4c:       |  |  |                 \--/-X 02abc463                 blt     s7,a0,e0000b74 <printf+0x104>
e0000b50:       |  |  |                 /--|-- 05850563                 beq     a0,s8,e0000b9a <printf+0x12a>
e0000b54:       |  |  |                 |  |   06300593                 li      a1,99
e0000b58:       |  |  |        /--------|--|-- 04b50863                 beq     a0,a1,e0000ba8 <printf+0x138>
e0000b5c:       |  |  |        |        |  |   06400593                 li      a1,100
e0000b60:       |  |  +--------|--------|--|-- 06b51f63                 bne     a0,a1,e0000bde <printf+0x16e>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:277
        pc += qprinti (out, va_arg(va, int), 10, 1, width, pad, 'a');
e0000b64:       |  |  |        |        |  |   000d2503                 lw      a0,0(s10)
e0000b68:       |  |  |        |        |  |   0d11                     addi    s10,s10,4
e0000b6a:       |  |  |        |        |  |   45a9                     li      a1,10
e0000b6c:       |  |  |        |        |  |   4605                     li      a2,1
e0000b6e:       |  |  |        |        |  |   06100793                 li      a5,97
e0000b72:       |  |  |  /-----|--------|--|-- a0a5                     j       e0000bda <printf+0x16a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:271
      if( *format == 's' ) {
e0000b74:       |  |  |  |     |  /-----|--\-X 05b50763                 beq     a0,s11,e0000bc2 <printf+0x152>
e0000b78:       |  |  |  |     |  |     |      07500593                 li      a1,117
e0000b7c:       |  |  |  |  /--|--|-----|----- 04b50863                 beq     a0,a1,e0000bcc <printf+0x15c>
e0000b80:       |  |  |  |  |  |  |     |      07300593                 li      a1,115
e0000b84:       |  |  +--|--|--|--|-----|----- 04b51d63                 bne     a0,a1,e0000bde <printf+0x16e>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:272
        register char *s = va_arg(va, char*);
e0000b88:       |  |  |  |  |  |  |     |      000d2503                 lw      a0,0(s10)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:273
        pc += qprints (out, s?s:"(null)", width, pad);
e0000b8c:       |  |  |  |  |  |  |     |  /-- e509                     bnez    a0,e0000b96 <printf+0x126>
e0000b8e:       |  |  |  |  |  |  |     |  |   00001517                 auipc   a0,0x1
e0000b92:       |  |  |  |  |  |  |     |  |   7ad50513                 addi    a0,a0,1965 # e000233b <kAesModesCipherTextEcb256+0x12b>
e0000b96:       |  |  |  |  |  |  |     |  \-> 0d11                     addi    s10,s10,4
e0000b98:       |  |  |  |  |  |  |     |  /-- a00d                     j       e0000bba <printf+0x14a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:289
        pc += qprinti (out, va_arg(va, uint32_t), 16, 0, width, pad, 'A');
e0000b9a:       |  |  |  |  |  |  |     \--|-> 000d2503                 lw      a0,0(s10)
e0000b9e:       |  |  |  |  |  |  |        |   0d11                     addi    s10,s10,4
e0000ba0:       |  |  |  |  |  |  |        |   45c1                     li      a1,16
e0000ba2:       |  |  |  |  |  |  |        |   04100793                 li      a5,65
e0000ba6:       |  |  |  |  |  |  |  /-----|-- a80d                     j       e0000bd8 <printf+0x168>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:293
        scr[0] = va_arg(va, int);
e0000ba8:       |  |  |  |  |  \--|--|-----|-> 000d2503                 lw      a0,0(s10)
e0000bac:       |  |  |  |  |     |  |     |   0d11                     addi    s10,s10,4
e0000bae:       |  |  |  |  |     |  |     |   00a10523                 sb      a0,10(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:294
        scr[1] = '\0';
e0000bb2:       |  |  |  |  |     |  |     |   000105a3                 sb      zero,11(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:295
        pc += qprints (out, scr, width, pad);
e0000bb6:       |  |  |  |  |     |  |     |   00a10513                 addi    a0,sp,10
e0000bba:       |  |  |  |  |     |  |     \-> 85b6                     mv      a1,a3
e0000bbc:       |  |  |  |  |     |  |         863a                     mv      a2,a4
e0000bbe:       |  |  |  |  |     |  |         20f5                     jal     e0000caa <qprints>
e0000bc0:       |  |  |  |  |     |  |  /----- a831                     j       e0000bdc <printf+0x16c>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:285
        pc += qprinti (out, va_arg(va, uint32_t), 16, 0, width, pad, 'a');
e0000bc2:       |  |  |  |  |     \--|--|----> 000d2503                 lw      a0,0(s10)
e0000bc6:       |  |  |  |  |        |  |      0d11                     addi    s10,s10,4
e0000bc8:       |  |  |  |  |        |  |      45c1                     li      a1,16
e0000bca:       |  |  |  |  |        |  |  /-- a029                     j       e0000bd4 <printf+0x164>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:281
        pc += qprinti (out, va_arg(va, unsigned int), 10, 0, width, pad, 'a');
e0000bcc:       |  |  |  |  \--------|--|--|-> 000d2503                 lw      a0,0(s10)
e0000bd0:       |  |  |  |           |  |  |   0d11                     addi    s10,s10,4
e0000bd2:       |  |  |  |           |  |  |   45a9                     li      a1,10
e0000bd4:       |  |  |  |           |  |  \-> 06100793                 li      a5,97
e0000bd8:       |  |  |  |           \--|----> 4601                     li      a2,0
e0000bda:       |  |  |  \--------------|----> 2a51                     jal     e0000d6e <qprinti>
e0000bdc:       |  |  |                 \----> 9a2a                     add     s4,s4,a0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:249
  for (; *format != 0; ++format)
e0000bde:       |  |  \----------------------> 0485                     addi    s1,s1,1
e0000be0:       \--|-------------------------- b5d5                     j       e0000ac4 <printf+0x54>
printf():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:322

  pc = qprint(0, format, va);

  va_end(va);

  return pc;
e0000be2:          \-------------------------> 8552                     mv      a0,s4
e0000be4:                                      4db2                     lw      s11,12(sp)
e0000be6:                                      4d42                     lw      s10,16(sp)
e0000be8:                                      4cd2                     lw      s9,20(sp)
e0000bea:                                      4c62                     lw      s8,24(sp)
e0000bec:                                      4bf2                     lw      s7,28(sp)
e0000bee:                                      5b02                     lw      s6,32(sp)
e0000bf0:                                      5a92                     lw      s5,36(sp)
e0000bf2:                                      5a22                     lw      s4,40(sp)
e0000bf4:                                      59b2                     lw      s3,44(sp)
e0000bf6:                                      5942                     lw      s2,48(sp)
e0000bf8:                                      54d2                     lw      s1,52(sp)
e0000bfa:                                      5462                     lw      s0,56(sp)
e0000bfc:                                      50f2                     lw      ra,60(sp)
e0000bfe:                                      6125                     addi    sp,sp,96
e0000c00:                                      8082                     ret

e0000c02 <uart_set_cfg>:
uart_set_cfg():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:42
void uart_set_cfg(int parity, uint16_t clk_counter) {
e0000c02:       40000537                lui     a0,0x40000
e0000c06:       08300613                li      a2,131
/proc/self/cwd/sw/tests/opentitan/common/utils.c:44
  *(volatile unsigned int*)(UART_REG_LCR) = 0x83; //sets 8N1 and set DLAB to 1
e0000c0a:       c550                    sw      a2,12(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:45
  *(volatile unsigned int*)(UART_REG_DLM) = (clk_counter >> 8) & 0xFF;
e0000c0c:       0085d613                srli    a2,a1,0x8
e0000c10:       c150                    sw      a2,4(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:46
  *(volatile unsigned int*)(UART_REG_DLL) =  clk_counter       & 0xFF;
e0000c12:       0ff5f593                andi    a1,a1,255
e0000c16:       c10c                    sw      a1,0(a0)
e0000c18:       0a700593                li      a1,167
/proc/self/cwd/sw/tests/opentitan/common/utils.c:47
  *(volatile unsigned int*)(UART_REG_FCR) = 0xA7; //enables 16byte FIFO and clear FIFOs
e0000c1c:       c50c                    sw      a1,8(a0)
e0000c1e:       458d                    li      a1,3
/proc/self/cwd/sw/tests/opentitan/common/utils.c:48
  *(volatile unsigned int*)(UART_REG_LCR) = 0x03; //sets 8N1 and set DLAB to 0
e0000c20:       c54c                    sw      a1,12(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:50
  *(volatile unsigned int*)(UART_REG_IER) = ((*(volatile unsigned int*)(UART_REG_IER)) & 0xF0) | 0x02; // set IER (interrupt enable register) on UART
e0000c22:       414c                    lw      a1,4(a0)
e0000c24:       0f05f593                andi    a1,a1,240
e0000c28:       0025e593                ori     a1,a1,2
e0000c2c:       c14c                    sw      a1,4(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:51
}
e0000c2e:       8082                    ret

e0000c30 <external_irq_handler>:
external_irq_handler():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:338
  putchar('\n');

  return i;
}

void external_irq_handler(void)  {
e0000c30:           1101                        addi    sp,sp,-32
e0000c32:           ce2a                        sw      a0,28(sp)
e0000c34:           cc2e                        sw      a1,24(sp)
e0000c36:           ca32                        sw      a2,20(sp)
e0000c38:           c836                        sw      a3,16(sp)
e0000c3a:           c63a                        sw      a4,12(sp)
e0000c3c:           c43e                        sw      a5,8(sp)
e0000c3e:           c242                        sw      a6,4(sp)
e0000c40:           c8200537            lui     a0,0xc8200
e0000c44:           09f00593            li      a1,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:355
  p_reg5 = (int *) 0x1040401C;

  // start of """Interrupt Service Routine"""
  
  plic_check = (int *) 0xC8200004;
  while(*plic_check != mbox_id);   //check wether the intr is the correct one
e0000c48:       /-> 4150                        lw      a2,4(a0)
e0000c4a:       \-- feb61fe3            bne     a2,a1,e0000c48 <external_irq_handler+0x18>
e0000c4e:           10404537            lui     a0,0x10404
/proc/self/cwd/sw/tests/opentitan/common/utils.c:358
  
  p_reg = (int *) 0x10404020;
 *p_reg = 0x00000000;        //clearing the pending interrupt signal
e0000c52:           02052023            sw      zero,32(a0) # 10404020 <tohost+0x103e4018>
e0000c56:           c82005b7            lui     a1,0xc8200
e0000c5a:           09f00613            li      a2,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:360
 
 *plic_check = mbox_id;      //completing interrupt
e0000c5e:           c1d0                        sw      a2,4(a1)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:362
 
  a = *p_reg1;
e0000c60:           450c                        lw      a1,8(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:363
  b = *p_reg2;
e0000c62:           4910                        lw      a2,16(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:364
  c = *p_reg3;
e0000c64:           4954                        lw      a3,20(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:365
  d = *p_reg4;
e0000c66:           4d18                        lw      a4,24(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:366
  e = *p_reg5;
e0000c68:           01c52803            lw      a6,28(a0)
e0000c6c:           baadc7b7            lui     a5,0xbaadc
e0000c70:           0de78793            addi    a5,a5,222 # baadc0de <fromhost+0xdaacc0ce>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:369
  
  
  if( a == 0xBAADC0DE &&  b == 0xBAADC0DE && c == 0xBAADC0DE && d == 0xBAADC0DE && e == 0xBAADC0DE){
e0000c74:           8dbd                        xor     a1,a1,a5
e0000c76:           8e3d                        xor     a2,a2,a5
e0000c78:           8dd1                        or      a1,a1,a2
e0000c7a:           00f6c633            xor     a2,a3,a5
e0000c7e:           8dd1                        or      a1,a1,a2
e0000c80:           00f74633            xor     a2,a4,a5
e0000c84:           8dd1                        or      a1,a1,a2
e0000c86:           00f84633            xor     a2,a6,a5
e0000c8a:           8dd1                        or      a1,a1,a2
e0000c8c:       /-- e589                        bnez    a1,e0000c96 <external_irq_handler+0x66>
e0000c8e:       |   02450513            addi    a0,a0,36
e0000c92:       |   4585                        li      a1,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:371
      p_reg = (int *) 0x10404024; // completion interrupt to ariane agent
     *p_reg = 0x00000001;
e0000c94:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:375
  }
  
  return;
}
e0000c96:       \-> 4812                        lw      a6,4(sp)
e0000c98:           47a2                        lw      a5,8(sp)
e0000c9a:           4732                        lw      a4,12(sp)
e0000c9c:           46c2                        lw      a3,16(sp)
e0000c9e:           4652                        lw      a2,20(sp)
e0000ca0:           45e2                        lw      a1,24(sp)
e0000ca2:           4572                        lw      a0,28(sp)
e0000ca4:           6105                        addi    sp,sp,32
e0000ca6:           30200073            mret

e0000caa <qprints>:
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:159
  if (width > 0) {
e0000caa:             /----- 02b05163           blez    a1,e0000ccc <qprints+0x22>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:162
    for (ptr = string; *ptr; ++ptr) ++len;
e0000cae:             |      00054683           lbu     a3,0(a0)
e0000cb2:          /--|----- c28d                       beqz    a3,e0000cd4 <qprints+0x2a>
e0000cb4:          |  |      4781                       li      a5,0
e0000cb6:          |  |      00150813           addi    a6,a0,1
e0000cba:          |  |  /-> 00f806b3           add     a3,a6,a5
e0000cbe:          |  |  |   0006c703           lbu     a4,0(a3)
e0000cc2:          |  |  |   00178693           addi    a3,a5,1
e0000cc6:          |  |  |   87b6                       mv      a5,a3
e0000cc8:          |  |  \-- fb6d                       bnez    a4,e0000cba <qprints+0x10>
e0000cca:          |  |  /-- a031                       j       e0000cd6 <qprints+0x2c>
e0000ccc:          |  \--|-> 4601                       li      a2,0
e0000cce:          |     |   02000893           li      a7,32
e0000cd2:       /--|-----|-- a899                       j       e0000d28 <qprints+0x7e>
e0000cd4:       |  \-----|-> 4681                       li      a3,0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:163
    if (len >= width) width = 0;
e0000cd6:       |        \-> 40d587b3           sub     a5,a1,a3
e0000cda:       |            873e                       mv      a4,a5
e0000cdc:       |        /-- 00b6c363           blt     a3,a1,e0000ce2 <qprints+0x38>
e0000ce0:       |        |   4701                       li      a4,0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:165
    if (pad & PAD_ZERO) padchar = '0';
e0000ce2:       |        \-> 00267593           andi    a1,a2,2
e0000ce6:       |            02000893           li      a7,32
e0000cea:       |        /-- c199                       beqz    a1,e0000cf0 <qprints+0x46>
e0000cec:       |        |   03000893           li      a7,48
/proc/self/cwd/sw/tests/opentitan/common/utils.c:167
  if (!(pad & PAD_RIGHT)) {
e0000cf0:       |        \-> 00167593           andi    a1,a2,1
e0000cf4:       |            0015b593           seqz    a1,a1
e0000cf8:       |            00e02633           sgtz    a2,a4
e0000cfc:       |            8df1                       and     a1,a1,a2
e0000cfe:       |  /-------- c19d                       beqz    a1,e0000d24 <qprints+0x7a>
e0000d00:       |  |         4601                       li      a2,0
e0000d02:       |  |         400005b7           lui     a1,0x40000
e0000d06:       |  |         4805                       li      a6,1
e0000d08:       |  |  /----> 873e                       mv      a4,a5
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e0000d0a:       |  |  |  /-> 49dc                       lw      a5,20(a1)
e0000d0c:       |  |  |  |   0207f793           andi    a5,a5,32
e0000d10:       |  |  |  \-- dfed                       beqz    a5,e0000d0a <qprints+0x60>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e0000d12:       |  |  |      0115a023           sw      a7,0(a1) # 40000000 <tohost+0x3ffdfff8>
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:170
      ++pc;
e0000d16:       |  |  |      0605                       addi    a2,a2,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:168
    for ( ; width > 0; --width) {
e0000d18:       |  |  |      fff70793           addi    a5,a4,-1 # 3fffffff <tohost+0x3ffdfff7>
e0000d1c:       |  |  \----- fee846e3           blt     a6,a4,e0000d08 <qprints+0x5e>
e0000d20:       |  |         85be                       mv      a1,a5
e0000d22:       +--|-------- a019                       j       e0000d28 <qprints+0x7e>
e0000d24:       |  \-------> 4601                       li      a2,0
e0000d26:       |            85ba                       mv      a1,a4
/proc/self/cwd/sw/tests/opentitan/common/utils.c:173
  for ( ; *string ; ++string) {
e0000d28:       \----------> 00054783           lbu     a5,0(a0)
e0000d2c:             /----- cf99                       beqz    a5,e0000d4a <qprints+0xa0>
e0000d2e:             |      40000737           lui     a4,0x40000
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e0000d32:             |  /-> 4b54                       lw      a3,20(a4)
e0000d34:             |  |   0206f693           andi    a3,a3,32
e0000d38:             |  +-- deed                       beqz    a3,e0000d32 <qprints+0x88>
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:174
    qprintchar (out, *string);
e0000d3a:             |  |   0ff7f693           andi    a3,a5,255
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e0000d3e:             |  |   c314                       sw      a3,0(a4)
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:173
  for ( ; *string ; ++string) {
e0000d40:             |  |   00154783           lbu     a5,1(a0)
e0000d44:             |  |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:175
    ++pc;
e0000d46:             |  |   0605                       addi    a2,a2,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:173
  for ( ; *string ; ++string) {
e0000d48:             |  \-- f7ed                       bnez    a5,e0000d32 <qprints+0x88>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:177
  for ( ; width > 0; --width) {
e0000d4a:          /--\----X 02b05063           blez    a1,e0000d6a <qprints+0xc0>
e0000d4e:          |         00c58533           add     a0,a1,a2
e0000d52:          |         400005b7           lui     a1,0x40000
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e0000d56:          |     /-> 49d4                       lw      a3,20(a1)
e0000d58:          |     |   0206f693           andi    a3,a3,32
e0000d5c:          |     +-- deed                       beqz    a3,e0000d56 <qprints+0xac>
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:179
    ++pc;
e0000d5e:          |     |   0605                       addi    a2,a2,1
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e0000d60:          |     |   0115a023           sw      a7,0(a1) # 40000000 <tohost+0x3ffdfff8>
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:177
  for ( ; width > 0; --width) {
e0000d64:          |     \-- fea619e3           bne     a2,a0,e0000d56 <qprints+0xac>
e0000d68:          |         862a                       mv      a2,a0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:182
  return pc;
e0000d6a:          \-------> 8532                       mv      a0,a2
e0000d6c:                    8082                       ret

e0000d6e <qprinti>:
qprinti():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:186
{
e0000d6e:                          7179                 addi    sp,sp,-48
e0000d70:                          d606                 sw      ra,44(sp)
e0000d72:                          d422                 sw      s0,40(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:192
  if (i == 0)
e0000d74:             /----------- cd39                 beqz    a0,e0000dd2 <qprinti+0x64>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:199
  if (sg && b == 10 && i < 0)
e0000d76:             |            00c03633             snez    a2,a2
e0000d7a:             |            ff658413             addi    s0,a1,-10
e0000d7e:             |            00143413             seqz    s0,s0
e0000d82:             |            8e61                 and     a2,a2,s0
e0000d84:             |            00052413             slti    s0,a0,0
e0000d88:             |            00867833             and     a6,a2,s0
e0000d8c:             |        /-- 00080463             beqz    a6,e0000d94 <qprinti+0x26>
e0000d90:             |        |   40a00533             neg     a0,a0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:205
  s = print_buf + PRINT_BUF_LEN-1;
e0000d94:             |        \-> 02710613             addi    a2,sp,39
e0000d98:             |            4441                 li      s0,16
/proc/self/cwd/sw/tests/opentitan/common/utils.c:206
  *s = '\0';
e0000d9a:             |            020103a3             sb      zero,39(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:209
  if(b == 16) {
e0000d9e:             |  /-------- 04859563             bne     a1,s0,e0000de8 <qprinti+0x7a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:211
    while (u) {
e0000da2:       /-----|--|-------- c961                 beqz    a0,e0000e72 <qprinti+0x104>
e0000da4:       |     |  |         0c678793             addi    a5,a5,198
e0000da8:       |     |  |         48a5                 li      a7,9
e0000daa:       |     |  |         42c1                 li      t0,16
e0000dac:       |     |  |  /----> 842a                 mv      s0,a0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:212
      int t = u & 0xF;
e0000dae:       |     |  |  |      893d                 andi    a0,a0,15
e0000db0:       |     |  |  |      85be                 mv      a1,a5
/proc/self/cwd/sw/tests/opentitan/common/utils.c:214
      if (t >= 10)
e0000db2:       |     |  |  |  /-- 00a8e363             bltu    a7,a0,e0000db8 <qprinti+0x4a>
e0000db6:       |     |  |  |  |   4581                 li      a1,0
e0000db8:       |     |  |  |  \-> 952e                 add     a0,a0,a1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:217
      *--s = t + '0';
e0000dba:       |     |  |  |      03050513             addi    a0,a0,48 # 40000030 <tohost+0x3ffe0028>
e0000dbe:       |     |  |  |      fff60593             addi    a1,a2,-1
e0000dc2:       |     |  |  |      fea60fa3             sb      a0,-1(a2)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:218
      u >>= 4;
e0000dc6:       |     |  |  |      00445513             srli    a0,s0,0x4
e0000dca:       |     |  |  |      862e                 mv      a2,a1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:211
    while (u) {
e0000dcc:       |     |  |  \----- fe5470e3             bgeu    s0,t0,e0000dac <qprinti+0x3e>
e0000dd0:       |     |  |  /----- a8b5                 j       e0000e4c <qprinti+0xde>
e0000dd2:       |     \--|--|----> 03000513             li      a0,48
/proc/self/cwd/sw/tests/opentitan/common/utils.c:194
    print_buf[0] = '0';
e0000dd6:       |        |  |      00a10423             sb      a0,8(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:195
    print_buf[1] = '\0';
e0000dda:       |        |  |      000104a3             sb      zero,9(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:196
    return qprints (out, print_buf, width, pad);
e0000dde:       |        |  |      0028                 addi    a0,sp,8
e0000de0:       |        |  |      85b6                 mv      a1,a3
e0000de2:       |        |  |      863a                 mv      a2,a4
e0000de4:       |        |  |      35d9                 jal     e0000caa <qprints>
e0000de6:       |  /-----|--|----- a86d                 j       e0000ea0 <qprinti+0x132>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:222
    while (u) {
e0000de8:       +--|-----\--|----X c549                 beqz    a0,e0000e72 <qprinti+0x104>
e0000dea:       |  |        |      1999a5b7             lui     a1,0x1999a
e0000dee:       |  |        |      99958893             addi    a7,a1,-1639 # 19999999 <tohost+0x19979991>
e0000df2:       |  |        |      00002317             auipc   t1,0x2
e0000df6:       |  |        |      89e30313             addi    t1,t1,-1890 # e0002690 <remu10_table>
e0000dfa:       |  |        |      52d9                 li      t0,-10
remu10():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:134
  n = (0x19999999 * n + (n >> 1) + (n >> 3)) >> 28;
e0000dfc:       |  |        |  /-> 031505b3             mul     a1,a0,a7
e0000e00:       |  |        |  |   00155413             srli    s0,a0,0x1
e0000e04:       |  |        |  |   95a2                 add     a1,a1,s0
e0000e06:       |  |        |  |   00355793             srli    a5,a0,0x3
e0000e0a:       |  |        |  |   95be                 add     a1,a1,a5
e0000e0c:       |  |        |  |   81f1                 srli    a1,a1,0x1c
/proc/self/cwd/sw/tests/opentitan/common/utils.c:135
  return remu10_table[n];
e0000e0e:       |  |        |  |   959a                 add     a1,a1,t1
e0000e10:       |  |        |  |   00058583             lb      a1,0(a1)
qprinti():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:223
      *--s = remu10(u) + '0';
e0000e14:       |  |        |  |   03058793             addi    a5,a1,48
divu10():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:118
  q = (n >> 1) + (n >> 2);
e0000e18:       |  |        |  |   00255593             srli    a1,a0,0x2
e0000e1c:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:119
  q = q + (q >> 4);
e0000e1e:       |  |        |  |   0045d413             srli    s0,a1,0x4
e0000e22:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:120
  q = q + (q >> 8);
e0000e24:       |  |        |  |   0085d413             srli    s0,a1,0x8
e0000e28:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:121
  q = q + (q >> 16);
e0000e2a:       |  |        |  |   0105d413             srli    s0,a1,0x10
e0000e2e:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:122
  q = q >> 3;
e0000e30:       |  |        |  |   0035d413             srli    s0,a1,0x3
/proc/self/cwd/sw/tests/opentitan/common/utils.c:123
  r = n - q * 10;
e0000e34:       |  |        |  |   025405b3             mul     a1,s0,t0
e0000e38:       |  |        |  |   952e                 add     a0,a0,a1
qprinti():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:223
      *--s = remu10(u) + '0';
e0000e3a:       |  |        |  |   fff60593             addi    a1,a2,-1
divu10():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:125
  return q + ((r + 6) >> 4);
e0000e3e:       |  |        |  |   0519                 addi    a0,a0,6
e0000e40:       |  |        |  |   8111                 srli    a0,a0,0x4
e0000e42:       |  |        |  |   9522                 add     a0,a0,s0
qprinti():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:223
      *--s = remu10(u) + '0';
e0000e44:       |  |        |  |   fef60fa3             sb      a5,-1(a2)
e0000e48:       |  |        |  |   862e                 mv      a2,a1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:222
    while (u) {
e0000e4a:       |  |        |  \-- f94d                 bnez    a0,e0000dfc <qprinti+0x8e>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:228
  if (neg) {
e0000e4c:       |  |  /-----\----X 02080663             beqz    a6,e0000e78 <qprinti+0x10a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:229
    if( width && (pad & PAD_ZERO) )
e0000e50:       |  |  |     /----> 0016b513             seqz    a0,a3
e0000e54:       |  |  |     |      00277613             andi    a2,a4,2
e0000e58:       |  |  |     |      00163613             seqz    a2,a2
e0000e5c:       |  |  |     |      8d51                 or      a0,a0,a2
e0000e5e:       |  |  |     |  /-- cd19                 beqz    a0,e0000e7c <qprinti+0x10e>
e0000e60:       |  |  |     |  |   4401                 li      s0,0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:237
      *--s = '-';
e0000e62:       |  |  |     |  |   fff58513             addi    a0,a1,-1
e0000e66:       |  |  |     |  |   02d00613             li      a2,45
e0000e6a:       |  |  |     |  |   fec58fa3             sb      a2,-1(a1)
e0000e6e:       |  |  |     |  |   85aa                 mv      a1,a0
e0000e70:       |  |  |  /--|--|-- a01d                 j       e0000e96 <qprinti+0x128>
e0000e72:       \--|--|--|--|--|-> 85b2                 mv      a1,a2
/proc/self/cwd/sw/tests/opentitan/common/utils.c:228
  if (neg) {
e0000e74:          |  |  |  \--|-- fc081ee3             bnez    a6,e0000e50 <qprinti+0xe2>
e0000e78:          |  \--|-----|-> 4401                 li      s0,0
e0000e7a:          |     +-----|-- a831                 j       e0000e96 <qprinti+0x128>
e0000e7c:          |     |     \-> 40000537             lui     a0,0x40000
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e0000e80:          |     |     /-> 4950                 lw      a2,20(a0)
e0000e82:          |     |     |   02067613             andi    a2,a2,32
e0000e86:          |     |     \-- de6d                 beqz    a2,e0000e80 <qprinti+0x112>
e0000e88:          |     |         40000537             lui     a0,0x40000
e0000e8c:          |     |         02d00613             li      a2,45
/proc/self/cwd/sw/tests/opentitan/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e0000e90:          |     |         c110                 sw      a2,0(a0)
qprinti():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:233
      --width;
e0000e92:          |     |         16fd                 addi    a3,a3,-1
e0000e94:          |     |         4405                 li      s0,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:240
  return pc + qprints (out, s, width, pad);
e0000e96:          |     \-------> 852e                 mv      a0,a1
e0000e98:          |               85b6                 mv      a1,a3
e0000e9a:          |               863a                 mv      a2,a4
e0000e9c:          |               3539                 jal     e0000caa <qprints>
e0000e9e:          |               9522                 add     a0,a0,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:241
}
e0000ea0:          \-------------> 5422                 lw      s0,40(sp)
e0000ea2:                          50b2                 lw      ra,44(sp)
e0000ea4:                          6145                 addi    sp,sp,48
e0000ea6:                          8082                 ret

e0000ea8 <dif_aes_init>:
dif_aes_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_aes_autogen.c:18

#include "aes_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_aes_init(mmio_region_t base_addr, dif_aes_t *aes) {
  if (aes == NULL) {
e0000ea8:       /----- c581                     beqz    a1,e0000eb0 <dif_aes_init+0x8>
e0000eaa:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_aes_autogen.c:22
    return kDifBadArg;
  }

  aes->base_addr = base_addr;
e0000eac:       |      c188                     sw      a0,0(a1)
e0000eae:       |  /-- a011                     j       e0000eb2 <dif_aes_init+0xa>
e0000eb0:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_aes_autogen.c:25

  return kDifOk;
}
e0000eb2:          \-> 8532                     mv      a0,a2
e0000eb4:              8082                     ret

e0000eb6 <dif_aes_reset>:
dif_aes_reset():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:192
    data[i] = mmio_region_read32(aes->base_addr, offset);
  }
}

dif_result_t dif_aes_reset(const dif_aes_t *aes) {
  if (aes == NULL) {
e0000eb6:       /----- c905                     beqz    a0,e0000ee6 <dif_aes_reset+0x30>
e0000eb8:       |      410c                     lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000eba:       |  /-> 0845a603                 lw      a2,132(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
e0000ebe:       |  |   8a05                     andi    a2,a2,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:74
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
e0000ec0:       |  \-- de6d                     beqz    a2,e0000eba <dif_aes_reset+0x4>
e0000ec2:       |      6621                     lui     a2,0x8
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000ec4:       |      d9f0                     sw      a2,116(a1)
e0000ec6:       |      d9f0                     sw      a2,116(a1)
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:89
  mmio_region_write32(aes->base_addr, AES_TRIGGER_REG_OFFSET, trigger_reg);
e0000ec8:       |      410c                     lw      a1,0(a0)
e0000eca:       |      4619                     li      a2,6
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000ecc:       |      08c5a023                 sw      a2,128(a1)
e0000ed0:       |      410c                     lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000ed2:       |  /-> 0845a503                 lw      a0,132(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0000ed6:       |  |   8905                     andi    a0,a0,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:92
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
e0000ed8:       |  \-- dd6d                     beqz    a0,e0000ed2 <dif_aes_reset+0x1c>
e0000eda:       |      4501                     li      a0,0
e0000edc:       |      78300613                 li      a2,1923
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000ee0:       |      d9f0                     sw      a2,116(a1)
e0000ee2:       |      d9f0                     sw      a2,116(a1)
dif_aes_reset():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:211
                               AES_CTRL_SHADOWED_KEY_LEN_MASK);

  aes_shadowed_write(aes->base_addr, AES_CTRL_SHADOWED_REG_OFFSET, reg);

  return kDifOk;
}
e0000ee4:       |      8082                     ret
e0000ee6:       \----> 450d                     li      a0,3
e0000ee8:              8082                     ret

e0000eea <dif_aes_start>:
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:217

dif_result_t dif_aes_start(const dif_aes_t *aes,
                           const dif_aes_transaction_t *transaction,
                           const dif_aes_key_share_t *key,
                           const dif_aes_iv_t *iv) {
  if (aes == NULL || transaction == NULL ||
e0000eea:                       00153713                seqz    a4,a0
e0000eee:                       0015b793                seqz    a5,a1
e0000ef2:                       8fd9                    or      a5,a5,a4
e0000ef4:                       470d                    li      a4,3
e0000ef6:       /-------------- 10079563                bnez    a5,e0001000 <dif_aes_start+0x116>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:218
      (iv == NULL && transaction->mode != kDifAesModeEcb) ||
e0000efa:       |        /----- e691                    bnez    a3,e0000f06 <dif_aes_start+0x1c>
e0000efc:       |        |      0045a803                lw      a6,4(a1)
e0000f00:       |        |      4785                    li      a5,1
e0000f02:       +--------|----- 0ef81f63                bne     a6,a5,e0001000 <dif_aes_start+0x116>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:219
      (key == NULL &&
e0000f06:       |        \--/-X e219                    bnez    a2,e0000f0c <dif_aes_start+0x22>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:220
       transaction->key_provider == kDifAesKeySoftwareProvided)) {
e0000f08:       |           |   499c                    lw      a5,16(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:217
  if (aes == NULL || transaction == NULL ||
e0000f0a:       +-----------|-- cbfd                    beqz    a5,e0001000 <dif_aes_start+0x116>
aes_idle():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:32
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0000f0c:       |           \-> 00052283                lw      t0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000f10:       |               0842a703                lw      a4,132(t0)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0000f14:       |               00177793                andi    a5,a4,1
e0000f18:       |               4739                    li      a4,14
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:224
    return kDifBadArg;
  }

  if (!aes_idle(aes)) {
e0000f1a:       +-------------- c3fd                    beqz    a5,e0001000 <dif_aes_start+0x116>
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:105
                                        transaction->operation);
e0000f1c:       |               4198                    lw      a4,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:108
                               transaction->mode);
e0000f1e:       |               0045a803                lw      a6,4(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000f22:       |               00377893                andi    a7,a4,3
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:111
                               transaction->key_len);
e0000f26:       |               459c                    lw      a5,8(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000f28:       |               00281713                slli    a4,a6,0x2
e0000f2c:       |               0fc77713                andi    a4,a4,252
e0000f30:       |               01176733                or      a4,a4,a7
e0000f34:       |               07a2                    slli    a5,a5,0x8
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:114
                               transaction->mask_reseeding);
e0000f36:       |               0145a883                lw      a7,20(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000f3a:       |               7007f793                andi    a5,a5,1792
e0000f3e:       |               00f76333                or      t1,a4,a5
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:116
  bool flag = transaction->manual_operation == kDifAesManualOperationManual;
e0000f42:       |               45dc                    lw      a5,12(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000f44:       |               01d89713                slli    a4,a7,0x1d
e0000f48:       |               8345                    srli    a4,a4,0x11
e0000f4a:       |               00e36733                or      a4,t1,a4
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:116
e0000f4e:       |               17fd                    addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:119
  flag = transaction->key_provider == kDifAesKeySideload;
e0000f50:       |               0105a883                lw      a7,16(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:116
  bool flag = transaction->manual_operation == kDifAesManualOperationManual;
e0000f54:       |               0017b793                seqz    a5,a5
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000f58:       |               07be                    slli    a5,a5,0xf
e0000f5a:       |               8f5d                    or      a4,a4,a5
configure():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:119
  flag = transaction->key_provider == kDifAesKeySideload;
e0000f5c:       |               fff88793                addi    a5,a7,-1
e0000f60:       |               0017b793                seqz    a5,a5
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000f64:       |               07ae                    slli    a5,a5,0xb
e0000f66:       |               8f5d                    or      a4,a4,a5
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000f68:       |               06e2aa23                sw      a4,116(t0)
e0000f6c:       |               06e2aa23                sw      a4,116(t0)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:138
      mmio_region_read32(aes->base_addr, AES_CTRL_AUX_REGWEN_REG_OFFSET);
e0000f70:       |               4118                    lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000f72:       |               5f7c                    lw      a5,124(a4)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:139
  if (!reg_val) {
e0000f74:       |  /----------- cbc1                    beqz    a5,e0001004 <dif_aes_start+0x11a>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:156
                                 transaction->force_masks);
e0000f76:       |  |            01958783                lb      a5,25(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:154
                           transaction->reseed_on_key_change);
e0000f7a:       |  |            0185c283                lbu     t0,24(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000f7e:       |  |            0786                    slli    a5,a5,0x1
e0000f80:       |  |            0fe7f793                andi    a5,a5,254
e0000f84:       |  |            0057e7b3                or      a5,a5,t0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000f88:       |  |            df3c                    sw      a5,120(a4)
e0000f8a:       |  |            df3c                    sw      a5,120(a4)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:159
  reg_val = transaction->ctrl_aux_lock == false;
e0000f8c:       |  |            01a5c583                lbu     a1,26(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:160
  mmio_region_write32(aes->base_addr, AES_CTRL_AUX_REGWEN_REG_OFFSET, reg_val);
e0000f90:       |  |            4118                    lw      a4,0(a0)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:159
  reg_val = transaction->ctrl_aux_lock == false;
e0000f92:       |  |            0015c593                xori    a1,a1,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000f96:       |  |            df6c                    sw      a1,124(a4)
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:238
  result = configure_aux(aes, transaction);
  if (result != kDifOk) {
    return result;
  }

  if (transaction->key_provider == kDifAesKeySoftwareProvided) {
e0000f98:       |  |  /--/----X 02089c63                bnez    a7,e0000fd0 <dif_aes_start+0xe6>
e0000f9c:       |  |  |  |      4581                    li      a1,0
e0000f9e:       |  |  |  |      02000893                li      a7,32
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e0000fa2:       |  |  |  |  /-> 411c                    lw      a5,0(a0)
e0000fa4:       |  |  |  |  |   00b60733                add     a4,a2,a1
e0000fa8:       |  |  |  |  |   4318                    lw      a4,0(a4)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000faa:       |  |  |  |  |   97ae                    add     a5,a5,a1
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0000fac:       |  |  |  |  |   0591                    addi    a1,a1,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000fae:       |  |  |  |  |   c3d8                    sw      a4,4(a5)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
e0000fb0:       |  |  |  |  \-- ff1599e3                bne     a1,a7,e0000fa2 <dif_aes_start+0xb8>
e0000fb4:       |  |  |  |      4581                    li      a1,0
e0000fb6:       |  |  |  |      02060613                addi    a2,a2,32
e0000fba:       |  |  |  |      02000893                li      a7,32
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e0000fbe:       |  |  |  |  /-> 411c                    lw      a5,0(a0)
e0000fc0:       |  |  |  |  |   00b60733                add     a4,a2,a1
e0000fc4:       |  |  |  |  |   4318                    lw      a4,0(a4)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000fc6:       |  |  |  |  |   97ae                    add     a5,a5,a1
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0000fc8:       |  |  |  |  |   0591                    addi    a1,a1,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000fca:       |  |  |  |  |   d3d8                    sw      a4,36(a5)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
e0000fcc:       |  |  |  |  \-- ff1599e3                bne     a1,a7,e0000fbe <dif_aes_start+0xd4>
e0000fd0:       |  |  |  \----> 4585                    li      a1,1
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:246

    aes_set_multireg(aes, &key->share1[0], AES_KEY_SHARE1_MULTIREG_COUNT,
                     AES_KEY_SHARE1_0_REG_OFFSET);
  }

  if (transaction->mode != kDifAesModeEcb) {
e0000fd2:       |  |  |  /----- 02b80663                beq     a6,a1,e0000ffe <dif_aes_start+0x114>
e0000fd6:       |  |  |  |      410c                    lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000fd8:       |  |  |  |  /-> 0845a603                lw      a2,132(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
e0000fdc:       |  |  |  |  |   8a05                    andi    a2,a2,1
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:250
    // Make sure AES is idle before providing the IV. Depending on the
    // configuration, updating the key might cause the AES to become non-idle
    // and reseed the internal PRNGs.
    AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
e0000fde:       |  |  |  |  \-- de6d                    beqz    a2,e0000fd8 <dif_aes_start+0xee>
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e0000fe0:       |  |  |  |      4298                    lw      a4,0(a3)
e0000fe2:       |  |  |  |      4601                    li      a2,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000fe4:       |  |  |  |      c1f8                    sw      a4,68(a1)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0000fe6:       |  |  |  |      00468593                addi    a1,a3,4
e0000fea:       |  |  |  |      46b1                    li      a3,12
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e0000fec:       |  |  |  |  /-> 4118                    lw      a4,0(a0)
e0000fee:       |  |  |  |  |   00c587b3                add     a5,a1,a2
e0000ff2:       |  |  |  |  |   439c                    lw      a5,0(a5)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000ff4:       |  |  |  |  |   9732                    add     a4,a4,a2
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0000ff6:       |  |  |  |  |   0611                    addi    a2,a2,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000ff8:       |  |  |  |  |   c73c                    sw      a5,72(a4)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
e0000ffa:       |  |  |  |  \-- fed619e3                bne     a2,a3,e0000fec <dif_aes_start+0x102>
e0000ffe:       |  |  |  \----> 4701                    li      a4,0
dif_aes_start():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:256
    aes_set_multireg(aes, &iv->iv[0], AES_IV_MULTIREG_COUNT,
                     AES_IV_0_REG_OFFSET);
  }

  return kDifOk;
}
e0001000:       >--|--|-------> 853a                    mv      a0,a4
e0001002:       |  |  |         8082                    ret
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0001004:       |  \--|-------> 5f3c                    lw      a5,120(a4)
configure_aux():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:144
            transaction->reseed_on_key_change ||
e0001006:       |     |         0185c283                lbu     t0,24(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:143
            reg_val, AES_CTRL_AUX_SHADOWED_KEY_TOUCH_FORCES_RESEED_BIT) !=
e000100a:       |     |         0017f313                andi    t1,a5,1
e000100e:       |     |         4735                    li      a4,13
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:144
            transaction->reseed_on_key_change ||
e0001010:       +-----|-------- fe6298e3                bne     t0,t1,e0001000 <dif_aes_start+0x116>
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:146
            transaction->force_masks) {
e0001014:       |     |         0195c583                lbu     a1,25(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:145
        bitfield_bit32_read(reg_val, AES_CTRL_AUX_SHADOWED_FORCE_MASKS_BIT) !=
e0001018:       |     |         8385                    srli    a5,a5,0x1
e000101a:       |     |         8b85                    andi    a5,a5,1
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:142
    if (bitfield_bit32_read(
e000101c:       |     \-------- f6f58ee3                beq     a1,a5,e0000f98 <dif_aes_start+0xae>
e0001020:       \-------------- b7c5                    j       e0001000 <dif_aes_start+0x116>

e0001022 <dif_aes_end>:
dif_aes_end():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:259

dif_result_t dif_aes_end(const dif_aes_t *aes) {
  if (aes == NULL) {
e0001022:       /-------- c915                  beqz    a0,e0001056 <dif_aes_end+0x34>
aes_idle():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:32
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0001024:       |         4110                  lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0001026:       |         08462583              lw      a1,132(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e000102a:       |         0015f693              andi    a3,a1,1
e000102e:       |         45b9                  li      a1,14
dif_aes_end():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:263
    return kDifBadArg;
  }

  if (!aes_idle(aes)) {
e0001030:       |  /----- c685                  beqz    a3,e0001058 <dif_aes_end+0x36>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0001032:       |  |  /-> 08462583              lw      a1,132(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0001036:       |  |  |   8985                  andi    a1,a1,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:74
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
e0001038:       |  |  \-- dded                  beqz    a1,e0001032 <dif_aes_end+0x10>
e000103a:       |  |      65a1                  lui     a1,0x8
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e000103c:       |  |      da6c                  sw      a1,116(a2)
e000103e:       |  |      da6c                  sw      a1,116(a2)
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:89
  mmio_region_write32(aes->base_addr, AES_TRIGGER_REG_OFFSET, trigger_reg);
e0001040:       |  |      410c                  lw      a1,0(a0)
e0001042:       |  |      4619                  li      a2,6
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0001044:       |  |      08c5a023              sw      a2,128(a1) # 8080 <_stack_len+0x80>
e0001048:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e000104a:       |  |  /-> 08452583              lw      a1,132(a0)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e000104e:       |  |  |   8985                  andi    a1,a1,1
aes_clear_internal_state():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:92
  AES_WAIT_FOR_STATUS(aes, AES_STATUS_IDLE_BIT, true);
e0001050:       |  |  \-- dded                  beqz    a1,e000104a <dif_aes_end+0x28>
e0001052:       |  |      4581                  li      a1,0
e0001054:       |  +----- a011                  j       e0001058 <dif_aes_end+0x36>
e0001056:       \--|----> 458d                  li      a1,3
dif_aes_end():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:270
  }

  aes_clear_internal_state(aes);

  return kDifOk;
}
e0001058:          \----> 852e                  mv      a0,a1
e000105a:                 8082                  ret

e000105c <dif_aes_load_data>:
dif_aes_load_data():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:274

dif_result_t dif_aes_load_data(const dif_aes_t *aes,
                               const dif_aes_data_t data) {
  if (aes == NULL) {
e000105c:       /-------- c905                  beqz    a0,e000108c <dif_aes_load_data+0x30>
aes_input_ready():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:52
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e000105e:       |         4114                  lw      a3,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0001060:       |         0846a603              lw      a2,132(a3)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0001064:       |         01067713              andi    a4,a2,16
e0001068:       |         4639                  li      a2,14
dif_aes_load_data():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:278
    return kDifBadArg;
  }

  if (!aes_input_ready(aes)) {
e000106a:       |  /----- c315                  beqz    a4,e000108e <dif_aes_load_data+0x32>
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e000106c:       |  |      4198                  lw      a4,0(a1)
e000106e:       |  |      4601                  li      a2,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0001070:       |  |      caf8                  sw      a4,84(a3)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0001072:       |  |      0591                  addi    a1,a1,4
e0001074:       |  |      46b1                  li      a3,12
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:178
    mmio_region_write32(aes->base_addr, offset, data[i]);
e0001076:       |  |  /-> 4118                  lw      a4,0(a0)
e0001078:       |  |  |   00c587b3              add     a5,a1,a2
e000107c:       |  |  |   439c                  lw      a5,0(a5)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e000107e:       |  |  |   9732                  add     a4,a4,a2
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
  for (int i = 0; i < regs_num; ++i) {
e0001080:       |  |  |   0611                  addi    a2,a2,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0001082:       |  |  |   cf3c                  sw      a5,88(a4)
aes_set_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:175
e0001084:       |  |  \-- fed619e3              bne     a2,a3,e0001076 <dif_aes_load_data+0x1a>
e0001088:       |  |      4601                  li      a2,0
e000108a:       |  +----- a011                  j       e000108e <dif_aes_load_data+0x32>
e000108c:       \--|----> 460d                  li      a2,3
dif_aes_load_data():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:286

  aes_set_multireg(aes, &data.data[0], AES_DATA_IN_MULTIREG_COUNT,
                   AES_DATA_IN_0_REG_OFFSET);

  return kDifOk;
}
e000108e:          \----> 8532                  mv      a0,a2
e0001090:                 8082                  ret

e0001092 <dif_aes_read_output>:
dif_aes_read_output():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:289

dif_result_t dif_aes_read_output(const dif_aes_t *aes, dif_aes_data_t *data) {
  if (aes == NULL || data == NULL) {
e0001092:              00153613                 seqz    a2,a0
e0001096:              0015b693                 seqz    a3,a1
e000109a:              8ed1                     or      a3,a3,a2
e000109c:              460d                     li      a2,3
e000109e:       /----- e69d                     bnez    a3,e00010cc <dif_aes_read_output+0x3a>
aes_output_valid():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:47
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e00010a0:       |      4114                     lw      a3,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00010a2:       |      0846a603                 lw      a2,132(a3)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e00010a6:       |      00867713                 andi    a4,a2,8
e00010aa:       |      4635                     li      a2,13
dif_aes_read_output():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:293
    return kDifBadArg;
  }

  if (!aes_output_valid(aes)) {
e00010ac:       +----- c305                     beqz    a4,e00010cc <dif_aes_read_output+0x3a>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00010ae:       |      52f4                     lw      a3,100(a3)
e00010b0:       |      4601                     li      a2,0
aes_read_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
    data[i] = mmio_region_read32(aes->base_addr, offset);
e00010b2:       |      c194                     sw      a3,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:184
  for (int i = 0; i < regs_num; ++i) {
e00010b4:       |      0591                     addi    a1,a1,4
e00010b6:       |      46b1                     li      a3,12
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
    data[i] = mmio_region_read32(aes->base_addr, offset);
e00010b8:       |  /-> 4118                     lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00010ba:       |  |   9732                     add     a4,a4,a2
e00010bc:       |  |   5738                     lw      a4,104(a4)
aes_read_multireg():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
e00010be:       |  |   00c587b3                 add     a5,a1,a2
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:184
  for (int i = 0; i < regs_num; ++i) {
e00010c2:       |  |   0611                     addi    a2,a2,4
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:187
    data[i] = mmio_region_read32(aes->base_addr, offset);
e00010c4:       |  |   c398                     sw      a4,0(a5)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:184
  for (int i = 0; i < regs_num; ++i) {
e00010c6:       |  \-- fed619e3                 bne     a2,a3,e00010b8 <dif_aes_read_output+0x26>
e00010ca:       |      4601                     li      a2,0
dif_aes_read_output():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:301

  aes_read_multireg(aes, data->data, AES_DATA_OUT_MULTIREG_COUNT,
                    AES_DATA_OUT_0_REG_OFFSET);

  return kDifOk;
}
e00010cc:       \----> 8532                     mv      a0,a2
e00010ce:              8082                     ret

e00010d0 <dif_aes_get_status>:
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:370
  return kDifOk;
}

dif_result_t dif_aes_get_status(const dif_aes_t *aes, dif_aes_status_t flag,
                                bool *set) {
  if (aes == NULL || set == NULL) {
e00010d0:                 00153693              seqz    a3,a0
e00010d4:                 00163713              seqz    a4,a2
e00010d8:                 8f55                  or      a4,a4,a3
e00010da:                 468d                  li      a3,3
e00010dc:       /-------- e33d                  bnez    a4,e0001142 <dif_aes_get_status+0x72>
e00010de:       |         4699                  li      a3,6
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:374
    return kDifBadArg;
  }

  switch (flag) {
e00010e0:       |     /-- 00b6ee63              bltu    a3,a1,e00010fc <dif_aes_get_status+0x2c>
e00010e4:       |     |   058a                  slli    a1,a1,0x2
e00010e6:       |     |   00001697              auipc   a3,0x1
e00010ea:       |     |   25e68693              addi    a3,a3,606 # e0002344 <kAesModesCipherTextEcb256+0x134>
e00010ee:       |     |   95b6                  add     a1,a1,a3
e00010f0:       |     |   418c                  lw      a1,0(a1)
e00010f2:       |     |   8582                  jr      a1
aes_idle():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:32
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e00010f4:       |     |   4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00010f6:       |     |   08452503              lw      a0,132(a0)
e00010fa:       |  /--|-- a081                  j       e000113a <dif_aes_get_status+0x6a>
e00010fc:       |  |  \-> 46b5                  li      a3,13
e00010fe:       +--|----- a091                  j       e0001142 <dif_aes_get_status+0x72>
aes_stalled():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:37
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0001100:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0001102:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:379
    case kDifAesStatusIdle:
      *set = aes_idle(aes);
      break;
    case kDifAesStatusStall:
      *set = aes_stalled(aes);
e0001106:       |  |      8105                  srli    a0,a0,0x1
e0001108:       |  +----- a80d                  j       e000113a <dif_aes_get_status+0x6a>
aes_output_lost():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:42
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e000110a:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e000110c:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:382
      break;
    case kDifAesStatusOutputLost:
      *set = aes_output_lost(aes);
e0001110:       |  |      8109                  srli    a0,a0,0x2
e0001112:       |  +----- a025                  j       e000113a <dif_aes_get_status+0x6a>
aes_output_valid():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:47
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0001114:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0001116:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:385
      break;
    case kDifAesStatusOutputValid:
      *set = aes_output_valid(aes);
e000111a:       |  |      810d                  srli    a0,a0,0x3
e000111c:       |  +----- a839                  j       e000113a <dif_aes_get_status+0x6a>
aes_input_ready():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:52
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e000111e:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0001120:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:388
      break;
    case kDifAesStatusInputReady:
      *set = aes_input_ready(aes);
e0001124:       |  |      8111                  srli    a0,a0,0x4
e0001126:       |  +----- a811                  j       e000113a <dif_aes_get_status+0x6a>
aes_alert_fatal():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:57
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0001128:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e000112a:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:391
      break;
    case kDifAesStatusAlertFatalFault:
      *set = aes_alert_fatal(aes);
e000112e:       |  |      8119                  srli    a0,a0,0x6
e0001130:       |  +----- a029                  j       e000113a <dif_aes_get_status+0x6a>
aes_alert_recoverable():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:62
  return mmio_region_get_bit32(aes->base_addr, AES_STATUS_REG_OFFSET,
e0001132:       |  |      4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0001134:       |  |      08452503              lw      a0,132(a0)
dif_aes_get_status():
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:394
      break;
    case kDifAesStatusAlertRecovCtrlUpdateErr:
      *set = aes_alert_recoverable(aes);
e0001138:       |  |      8115                  srli    a0,a0,0x5
e000113a:       |  \----> 4681                  li      a3,0
e000113c:       |         8905                  andi    a0,a0,1
e000113e:       |         00a60023              sb      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_aes.c:401
    default:
      return kDifError;
  }

  return kDifOk;
}
e0001142:       \-------> 8536                  mv      a0,a3
e0001144:                 8082                  ret

e0001146 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
e0001146:                    1101                       addi    sp,sp,-32
e0001148:                    ce06                       sw      ra,28(sp)
e000114a:                    65b1                       lui     a1,0xc
e000114c:                    aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
e0001150:             /----- 02b50063           beq     a0,a1,e0001170 <test_status_set+0x2a>
e0001154:             |      65a5                       lui     a1,0x9
e0001156:             |      05b5                       addi    a1,a1,13
e0001158:          /--|----- 02b50d63           beq     a0,a1,e0001192 <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e000115c:          |  |      00001597           auipc   a1,0x1
e0001160:          |  |      52c58593           addi    a1,a1,1324 # e0002688 <kDeviceTestStatusAddress>
e0001164:          |  |      418c                       lw      a1,0(a1)
e0001166:          |  |  /-- c191                       beqz    a1,e000116a <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0001168:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
e000116a:          |  |  \-> 40f2                       lw      ra,28(sp)
e000116c:          |  |      6105                       addi    sp,sp,32
e000116e:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e0001170:          |  \----> 00001517           auipc   a0,0x1
e0001174:          |         51c50513           addi    a0,a0,1308 # e000268c <kDeviceLogBypassUartAddress>
e0001178:          |         4108                       lw      a0,0(a0)
e000117a:          |  /----- ed0d                       bnez    a0,e00011b4 <test_status_set+0x6e>
e000117c:          |  |      00001597           auipc   a1,0x1
e0001180:          |  |      23458593           addi    a1,a1,564 # e00023b0 <kAesModesCipherTextEcb256+0x1a0>
e0001184:          |  |      0028                       addi    a0,sp,8
e0001186:          |  |      4651                       li      a2,20
e0001188:          |  |      0ab000ef           jal     ra,e0001a32 <memcpy>
e000118c:          |  |      0028                       addi    a0,sp,8
e000118e:          |  |      20b5                       jal     e00011fa <base_log_internal_core>
e0001190:          |  |  /-- a805                       j       e00011c0 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e0001192:          \--|--|-> 00001517           auipc   a0,0x1
e0001196:             |  |   4fa50513           addi    a0,a0,1274 # e000268c <kDeviceLogBypassUartAddress>
e000119a:             |  |   4108                       lw      a0,0(a0)
e000119c:       /-----|--|-- ed05                       bnez    a0,e00011d4 <test_status_set+0x8e>
e000119e:       |     |  |   00001597           auipc   a1,0x1
e00011a2:       |     |  |   1fe58593           addi    a1,a1,510 # e000239c <kAesModesCipherTextEcb256+0x18c>
e00011a6:       |     |  |   0028                       addi    a0,sp,8
e00011a8:       |     |  |   4651                       li      a2,20
e00011aa:       |     |  |   089000ef           jal     ra,e0001a32 <memcpy>
e00011ae:       |     |  |   0028                       addi    a0,sp,8
e00011b0:       |     |  |   20a9                       jal     e00011fa <base_log_internal_core>
e00011b2:       |  /--|--|-- a03d                       j       e00011e0 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e00011b4:       |  |  \--|-> 00001517           auipc   a0,0x1
e00011b8:       |  |     |   70c50513           addi    a0,a0,1804 # e00028c0 <test_status_set.kLogFields.2>
e00011bc:       |  |     |   4581                       li      a1,0
e00011be:       |  |     |   28f9                       jal     e000129c <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e00011c0:       |  |     \-> 00001517           auipc   a0,0x1
e00011c4:       |  |         4c850513           addi    a0,a0,1224 # e0002688 <kDeviceTestStatusAddress>
e00011c8:       |  |         4108                       lw      a0,0(a0)
e00011ca:       |  |  /----- c505                       beqz    a0,e00011f2 <test_status_set+0xac>
e00011cc:       |  |  |      65b1                       lui     a1,0xc
e00011ce:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
e00011d2:       |  |  |  /-- a839                       j       e00011f0 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e00011d4:       \--|--|--|-> 00001517           auipc   a0,0x1
e00011d8:          |  |  |   6d850513           addi    a0,a0,1752 # e00028ac <test_status_set.kLogFields>
e00011dc:          |  |  |   4581                       li      a1,0
e00011de:          |  |  |   287d                       jal     e000129c <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e00011e0:          \--|--|-> 00001517           auipc   a0,0x1
e00011e4:             |  |   4a850513           addi    a0,a0,1192 # e0002688 <kDeviceTestStatusAddress>
e00011e8:             |  |   4108                       lw      a0,0(a0)
e00011ea:             +--|-- c501                       beqz    a0,e00011f2 <test_status_set+0xac>
e00011ec:             |  |   65a5                       lui     a1,0x9
e00011ee:             |  |   05b5                       addi    a1,a1,13
e00011f0:             |  \-> c10c                       sw      a1,0(a0)
e00011f2:             \----> 2009                       jal     e00011f4 <abort>

e00011f4 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
e00011f4:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
e00011f8:       \-- bff5                        j       e00011f4 <abort>

e00011fa <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
e00011fa:              7179                     addi    sp,sp,-48
e00011fc:              c606                     sw      ra,12(sp)
e00011fe:              c422                     sw      s0,8(sp)
e0001200:              c226                     sw      s1,4(sp)
e0001202:              842a                     mv      s0,a0
e0001204:              d646                     sw      a7,44(sp)
e0001206:              d442                     sw      a6,40(sp)
e0001208:              d23e                     sw      a5,36(sp)
e000120a:              d03a                     sw      a4,32(sp)
e000120c:              ce36                     sw      a3,28(sp)
e000120e:              cc32                     sw      a2,24(sp)
e0001210:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
e0001212:              4148                     lw      a0,4(a0)
e0001214:              800005b7                 lui     a1,0x80000
e0001218:              fff58613                 addi    a2,a1,-1 # 7fffffff <fromhost+0x9ffeffef>
e000121c:              4581                     li      a1,0
e000121e:              0ff000ef                 jal     ra,e0001b1c <memchr>
e0001222:              4054                     lw      a3,4(s0)
e0001224:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
e0001228:              02f00593                 li      a1,47
e000122c:              8536                     mv      a0,a3
e000122e:              19d000ef                 jal     ra,e0001bca <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
e0001232:       /----- c501                     beqz    a0,e000123a <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
e0001234:       |      00150693                 addi    a3,a0,1
e0001238:       |  /-- a011                     j       e000123c <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
e000123a:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e000123c:          \-> 4008                     lw      a0,0(s0)
e000123e:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
e0001240:       /----- 00a5ea63                 bltu    a1,a0,e0001254 <base_log_internal_core+0x5a>
e0001244:       |      050a                     slli    a0,a0,0x2
e0001246:       |      00001597                 auipc   a1,0x1
e000124a:       |      19a58593                 addi    a1,a1,410 # e00023e0 <kAesModesCipherTextEcb256+0x1d0>
e000124e:       |      952e                     add     a0,a0,a1
e0001250:       |      410c                     lw      a1,0(a0)
e0001252:       |  /-- a029                     j       e000125c <base_log_internal_core+0x62>
e0001254:       \--|-> 00001597                 auipc   a1,0x1
e0001258:          |   18758593                 addi    a1,a1,391 # e00023db <kAesModesCipherTextEcb256+0x1cb>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
e000125c:          \-> 00001497                 auipc   s1,0x1
e0001260:              4c848493                 addi    s1,s1,1224 # e0002724 <base_log_internal_core.global_log_counter>
e0001264:              0004d603                 lhu     a2,0(s1)
e0001268:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e000126a:              00001517                 auipc   a0,0x1
e000126e:              15a50513                 addi    a0,a0,346 # e00023c4 <kAesModesCipherTextEcb256+0x1b4>
e0001272:              208d                     jal     e00012d4 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
e0001274:              00049503                 lh      a0,0(s1)
e0001278:              0505                     addi    a0,a0,1
e000127a:              00a49023                 sh      a0,0(s1)
e000127e:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
e0001280:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
e0001282:              4808                     lw      a0,16(s0)
e0001284:              084c                     addi    a1,sp,20
e0001286:              2041                     jal     e0001306 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
e0001288:              00001517                 auipc   a0,0x1
e000128c:              0b050513                 addi    a0,a0,176 # e0002338 <kAesModesCipherTextEcb256+0x128>
e0001290:              2091                     jal     e00012d4 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
e0001292:              4492                     lw      s1,4(sp)
e0001294:              4422                     lw      s0,8(sp)
e0001296:              40b2                     lw      ra,12(sp)
e0001298:              6145                     addi    sp,sp,48
e000129a:              8082                     ret

e000129c <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
e000129c:              1101                     addi    sp,sp,-32
e000129e:              ce46                     sw      a7,28(sp)
e00012a0:              cc42                     sw      a6,24(sp)
e00012a2:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
e00012a4:              00001797                 auipc   a5,0x1
e00012a8:              3e878793                 addi    a5,a5,1000 # e000268c <kDeviceLogBypassUartAddress>
e00012ac:              439c                     lw      a5,0(a5)
e00012ae:              c83a                     sw      a4,16(sp)
e00012b0:              c636                     sw      a3,12(sp)
e00012b2:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e00012b4:              c388                     sw      a0,0(a5)
e00012b6:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
e00012b8:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e00012ba:       /----- c989                     beqz    a1,e00012cc <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
e00012bc:       |  /-> 4512                     lw      a0,4(sp)
e00012be:       |  |   00450613                 addi    a2,a0,4
e00012c2:       |  |   c232                     sw      a2,4(sp)
e00012c4:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e00012c6:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e00012c8:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
e00012ca:       |  \-- f9ed                     bnez    a1,e00012bc <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
e00012cc:       \----> 6105                     addi    sp,sp,32
e00012ce:              8082                     ret

e00012d0 <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
e00012d0:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
e00012d2:       8082                    ret

e00012d4 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84
void base_uart_stdout(const dif_uart_t *uart) {
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}

size_t base_printf(const char *format, ...) {
e00012d4:       7179                    addi    sp,sp,-48
e00012d6:       c606                    sw      ra,12(sp)
e00012d8:       d646                    sw      a7,44(sp)
e00012da:       d442                    sw      a6,40(sp)
e00012dc:       d23e                    sw      a5,36(sp)
e00012de:       d03a                    sw      a4,32(sp)
e00012e0:       ce36                    sw      a3,28(sp)
e00012e2:       cc32                    sw      a2,24(sp)
e00012e4:       ca2e                    sw      a1,20(sp)
e00012e6:       00001597                auipc   a1,0x1
e00012ea:       44258593                addi    a1,a1,1090 # e0002728 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
e00012ee:       4190                    lw      a2,0(a1)
e00012f0:       41cc                    lw      a1,4(a1)
e00012f2:       872a                    mv      a4,a0
e00012f4:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
e00012f6:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e00012f8:       0854                    addi    a3,sp,20
e00012fa:       8532                    mv      a0,a2
e00012fc:       863a                    mv      a2,a4
e00012fe:       200d                    jal     e0001320 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
e0001300:       40b2                    lw      ra,12(sp)
e0001302:       6145                    addi    sp,sp,48
e0001304:       8082                    ret

e0001306 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
e0001306:       00001697                auipc   a3,0x1
e000130a:       42268693                addi    a3,a3,1058 # e0002728 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e000130e:       4290                    lw      a2,0(a3)
e0001310:       42d4                    lw      a3,4(a3)
e0001312:       872e                    mv      a4,a1
e0001314:       87aa                    mv      a5,a0
e0001316:       8532                    mv      a0,a2
e0001318:       85b6                    mv      a1,a3
e000131a:       863e                    mv      a2,a5
e000131c:       86ba                    mv      a3,a4
e000131e:       a009                    j       e0001320 <base_vfprintf>

e0001320 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
e0001320:                                                                    715d                       addi    sp,sp,-80
e0001322:                                                                    c686                       sw      ra,76(sp)
e0001324:                                                                    c4a2                       sw      s0,72(sp)
e0001326:                                                                    c2a6                       sw      s1,68(sp)
e0001328:                                                                    c0ca                       sw      s2,64(sp)
e000132a:                                                                    de4e                       sw      s3,60(sp)
e000132c:                                                                    dc52                       sw      s4,56(sp)
e000132e:                                                                    da56                       sw      s5,52(sp)
e0001330:                                                                    d85a                       sw      s6,48(sp)
e0001332:                                                                    d65e                       sw      s7,44(sp)
e0001334:                                                                    d462                       sw      s8,40(sp)
e0001336:                                                                    d266                       sw      s9,36(sp)
e0001338:                                                                    d06a                       sw      s10,32(sp)
e000133a:                                                                    ce6e                       sw      s11,28(sp)
e000133c:                                                                    8cb2                       mv      s9,a2
e000133e:                                                                    892a                       mv      s2,a0
e0001340:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
e0001342:                                                                /-- c199                       beqz    a1,e0001348 <base_vfprintf+0x28>
e0001344:                                                                |   89ae                       mv      s3,a1
e0001346:                                                             /--|-- a029                       j       e0001350 <base_vfprintf+0x30>
e0001348:                                                             |  \-> 00000997           auipc   s3,0x0
e000134c:                                                             |      f8898993           addi    s3,s3,-120 # e00012d0 <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
e0001350:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
e0001352:                                                                    000cc503           lbu     a0,0(s9)
e0001356:       /----------------------------------------------------------- 42050563           beqz    a0,e0001780 <base_vfprintf+0x460>
e000135a:       |                                                            4a81                       li      s5,0
e000135c:       |                                                            02500c13           li      s8,37
e0001360:       |                                                            4d25                       li      s10,9
e0001362:       |                                                            4a29                       li      s4,10
e0001364:       |                                                            658d                       lui     a1,0x3
e0001366:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_min_stack+0xc22>
e000136a:       |                                                            c02e                       sw      a1,0(sp)
e000136c:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
e000136e:       |        |                                               /-> 0ff57413           andi    s0,a0,255
e0001372:       |        |                                            /--|-- 01840963           beq     s0,s8,e0001384 <base_vfprintf+0x64>
e0001376:       |        |                                            +--|-- c419                       beqz    s0,e0001384 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
e0001378:       |        |                                            |  |   009c8533           add     a0,s9,s1
e000137c:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
e0001380:       |        |                                            |  |   0485                       addi    s1,s1,1
e0001382:       |        |                                            |  \-- b7f5                       j       e000136e <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
e0001384:       |        |                                            \--/-X c491                       beqz    s1,e0001390 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
e0001386:       |        |                                               |   854a                       mv      a0,s2
e0001388:       |        |                                               |   85e6                       mv      a1,s9
e000138a:       |        |                                               |   8626                       mv      a2,s1
e000138c:       |        |                                               |   9982                       jalr    s3
e000138e:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
e0001390:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,e0001782 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
e0001394:       |  |     |                                                   009c8533           add     a0,s9,s1
e0001398:       |  |     |                                                   00154603           lbu     a2,1(a0)
e000139c:       |  |     |                                                   02100713           li      a4,33
e00013a0:       |  |     |                                            /----- 00e61863           bne     a2,a4,e00013b0 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e00013a4:       |  |     |                                            |      00254583           lbu     a1,2(a0)
e00013a8:       |  |     |                                            |      00250693           addi    a3,a0,2
e00013ac:       |  |     |                                            |      4b05                       li      s6,1
e00013ae:       |  |     |                                            |  /-- a029                       j       e00013b8 <base_vfprintf+0x98>
e00013b0:       |  |     |                                            \--|-> 4b01                       li      s6,0
e00013b2:       |  |     |                                               |   00150693           addi    a3,a0,1
e00013b6:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e00013b8:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,e000176e <base_vfprintf+0x44e>
e00013bc:       |  |  |  |                                                   4481                       li      s1,0
e00013be:       |  |  |  |                                                   4b81                       li      s7,0
e00013c0:       |  |  |  |                                                   4501                       li      a0,0
e00013c2:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
e00013c6:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
e00013ca:       |  |  |  |                                                   00168c93           addi    s9,a3,1
e00013ce:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
e00013d2:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e00013d6:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
e00013da:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,e0001410 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
e00013de:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
e00013e2:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,e00013f8 <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
e00013e4:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
e00013e8:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
e00013ea:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e00013ee:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e00013f2:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
e00013f4:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,e00013ce <base_vfprintf+0xae>
e00013f6:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       e000176e <base_vfprintf+0x44e>
e00013f8:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
e00013fc:       |  |  |  |                                   |     |  |      03000613           li      a2,48
e0001400:       |  |  |  |                                   |     |  |      02000513           li      a0,32
e0001404:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,e00013e4 <base_vfprintf+0xc4>
e0001408:       |  |  |  |                                   |     |         03000513           li      a0,48
e000140c:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
e000140e:       |  |  |  |                                   |     \-------- b7c5                       j       e00013ee <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
e0001410:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,e0001418 <base_vfprintf+0xf8>
e0001412:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,e0001420 <base_vfprintf+0x100>
e0001416:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       e00017a2 <base_vfprintf+0x482>
e0001418:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
e000141c:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,e00017a2 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0001420:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
e0001424:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,e0001476 <base_vfprintf+0x156>
e0001428:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
e000142a:       |  |  |  |  |                                         |      00001597           auipc   a1,0x1
e000142e:       |  |  |  |  |                                         |      fc658593           addi    a1,a1,-58 # e00023f0 <kAesModesCipherTextEcb256+0x1e0>
e0001432:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
e0001434:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
e0001436:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
e0001438:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,e00016f0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
e000143c:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
e000143e:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
e0001442:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
e0001444:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
e0001448:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,e0001460 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
e000144c:       |  |  |  |  |  |                                      |  |   00001597           auipc   a1,0x1
e0001450:       |  |  |  |  |  |                                      |  |   03b58593           addi    a1,a1,59 # e0002487 <kAesModesCipherTextEcb256+0x277>
e0001454:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
e0001456:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
e0001458:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
e000145a:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
e000145c:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0001460:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
e0001464:       |  |  |  |  |  |                                      |      00001817           auipc   a6,0x1
e0001468:       |  |  |  |  |  |                                      |      03c80813           addi    a6,a6,60 # e00024a0 <kDigitsLow>
e000146c:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
e000146e:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
e0001470:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
e0001472:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
e0001474:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       e00016bc <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0001476:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
e000147a:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,e00014b4 <base_vfprintf+0x194>
e000147e:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,e00016f0 <base_vfprintf+0x3d0>
e0001482:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,e00016f0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
e0001486:       |  |  |  |  |  |        |                                |   00001597           auipc   a1,0x1
e000148a:       |  |  |  |  |  |        |                                |   fff58593           addi    a1,a1,-1 # e0002485 <kAesModesCipherTextEcb256+0x275>
e000148e:       |  |  |  |  |  |        |                             /--|-- a851                       j       e0001522 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
e0001490:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,e00014b4 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
e0001494:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
e0001496:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
e000149a:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e000149c:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
e000149e:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
e00014a2:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e00014a4:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e00014a6:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
e00014aa:       |  |  |  |  |  |        |                             |  |   00001897           auipc   a7,0x1
e00014ae:       |  |  |  |  |  |        |                             |  |   02388893           addi    a7,a7,35 # e00024cd <kDigitsHigh>
e00014b2:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       e0001696 <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
e00014b4:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
e00014b6:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
e00014ba:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
e00014bc:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
e00014be:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
e00014c2:       |  |  |  |  |  |        |           |                 |      00001817           auipc   a6,0x1
e00014c6:       |  |  |  |  |  |        |           |                 |      00b80813           addi    a6,a6,11 # e00024cd <kDigitsHigh>
e00014ca:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       e00016b6 <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
e00014cc:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,e00016f0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
e00014d0:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
e00014d2:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
e00014d6:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e00014d8:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
e00014da:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
e00014de:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e00014e0:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e00014e2:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
e00014e6:       |  |  |  |  |  |        |        |  |                 |      00001897           auipc   a7,0x1
e00014ea:       |  |  |  |  |  |        |        |  |                 |      fe788893           addi    a7,a7,-25 # e00024cd <kDigitsHigh>
e00014ee:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       e00016e4 <base_vfprintf+0x3c4>
e00014f0:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
e00014f2:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
e00014f6:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
e00014f8:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
e00014fa:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,e000170a <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
e00014fe:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,e0001762 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
e0001502:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00001597           auipc   a1,0x1
e0001506:       |  |  |  |  |  |  |     |  |  |  |  |                 |      f8a58593           addi    a1,a1,-118 # e000248c <kAesModesCipherTextEcb256+0x27c>
e000150a:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
e000150c:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       e00016fa <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
e000150e:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,e00016f0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
e0001512:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
e0001514:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
e0001518:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
e000151a:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
e000151c:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
e0001520:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
e0001522:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
e0001524:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       e00016fa <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
e0001526:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,e00016f0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
e000152a:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
e000152c:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
e0001530:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
e0001532:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
e0001534:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
e0001538:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00001817           auipc   a6,0x1
e000153c:       |  |  |  |  |  |  |  |  |  |  |  |  |                        f6880813           addi    a6,a6,-152 # e00024a0 <kDigitsLow>
e0001540:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
e0001542:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       e00016b8 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
e0001544:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,e00016f0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0001548:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001597           auipc   a1,0x1
e000154c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     f4158593           addi    a1,a1,-191 # e0002489 <kAesModesCipherTextEcb256+0x279>
e0001550:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
e0001552:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0001554:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
e0001556:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
e0001558:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
e000155c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
e000155e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0001560:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
e0001564:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001817           auipc   a6,0x1
e0001568:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     f3c80813           addi    a6,a6,-196 # e00024a0 <kDigitsLow>
e000156c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
e000156e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
e0001572:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
e0001574:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0001576:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
e0001578:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     e0001892 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
e000157a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
e000157e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       e0001700 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
e0001580:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
e0001582:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
e0001586:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
e0001588:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
e000158a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
e000158c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
e0001590:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
e0001594:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e0001596:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
e0001598:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
e000159a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
e000159e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     e0001910 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
e00015a0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e00015a2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e00015a4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
e00015a8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
e00015ac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e00015ae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
e00015b0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,e00015a8 <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e00015b2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
e00015b6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e00015ba:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ee158593           addi    a1,a1,-287 # e0002497 <kAesModesCipherTextEcb256+0x287>
e00015be:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00015c0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e00015c2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e00015c4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e00015c6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
e00015ca:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00015cc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e00015ce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
e00015d2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e00015d6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ec658593           addi    a1,a1,-314 # e0002498 <kAesModesCipherTextEcb256+0x288>
e00015da:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00015dc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
e00015de:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e00015e0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
e00015e2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e00015e6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  e9a58593           addi    a1,a1,-358 # e000247c <kAesModesCipherTextEcb256+0x26c>
e00015ea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
e00015ec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00015ee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e00015f0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
e00015f4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,e000171a <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
e00015f8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e00015fc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               ea258593           addi    a1,a1,-350 # e000249a <kAesModesCipherTextEcb256+0x28a>
e0001600:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e0001602:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0001604:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e0001606:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e000160a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
e000160c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
e000160e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0001610:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e0001612:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e0001614:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e0001616:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001817           auipc   a6,0x1
e000161a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               e8a80813           addi    a6,a6,-374 # e00024a0 <kDigitsLow>
e000161e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
e0001620:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0001622:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
e0001624:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
e0001626:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
e0001628:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     e0001892 <write_digits>
e000162a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
e000162c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e0001630:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               e7058593           addi    a1,a1,-400 # e000249c <kAesModesCipherTextEcb256+0x28c>
e0001634:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e0001636:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0001638:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e000163a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
e000163c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       e0001734 <base_vfprintf+0x414>
e000163e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
e0001640:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
e0001644:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
e0001646:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,e000174c <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
e000164a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e000164c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
e0001650:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0001652:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
e0001654:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       e00016fa <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
e0001656:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,e00016f0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
e000165a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
e000165c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
e0001660:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0001662:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0001664:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
e0001668:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00001817           auipc   a6,0x1
e000166c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         e3880813           addi    a6,a6,-456 # e00024a0 <kDigitsLow>
e0001670:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
e0001672:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       e00016b8 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
e0001674:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,e00016a0 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
e0001678:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
e000167a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
e000167e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0001680:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
e0001682:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
e0001686:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0001688:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e000168a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
e000168e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00001897           auipc   a7,0x1
e0001692:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   e1288893           addi    a7,a7,-494 # e00024a0 <kDigitsLow>
e0001696:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
e0001698:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
e000169a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
e000169c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
e000169e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       e00016ec <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
e00016a0:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
e00016a2:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
e00016a6:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
e00016a8:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
e00016aa:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
e00016ae:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00001817           auipc   a6,0x1
e00016b2:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      df280813           addi    a6,a6,-526 # e00024a0 <kDigitsLow>
e00016b6:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
e00016b8:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
e00016ba:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
e00016bc:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
e00016be:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     e0001892 <write_digits>
e00016c0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       e00016fe <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
e00016c2:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,e00016f0 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
e00016c6:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
e00016c8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
e00016cc:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e00016ce:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
e00016d0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
e00016d4:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e00016d6:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e00016d8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
e00016dc:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00001897           auipc   a7,0x1
e00016e0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   dc488893           addi    a7,a7,-572 # e00024a0 <kDigitsLow>
e00016e4:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
e00016e6:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
e00016e8:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
e00016ea:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
e00016ec:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     e00017ae <hex_dump>
e00016ee:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       e00016fe <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
e00016f0:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00001597           auipc   a1,0x1
e00016f4:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   ded58593           addi    a1,a1,-531 # e00024dd <kUnknownSpec>
e00016f8:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
e00016fa:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
e00016fc:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
e00016fe:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
e0001700:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
e0001704:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,e000136c <base_vfprintf+0x4c>
e0001708:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       e0001782 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
e000170a:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
e000170e:       |  |  |     |     |  |                 |  |  |  |  |         00001817           auipc   a6,0x1
e0001712:       |  |  |     |     |  |                 |  |  |  |  |         d9280813           addi    a6,a6,-622 # e00024a0 <kDigitsLow>
e0001716:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
e0001718:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       e00016b8 <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e000171a:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
e000171c:       |  |  |     |     |  |                    |     |  |         00001817           auipc   a6,0x1
e0001720:       |  |  |     |     |  |                    |     |  |         d8480813           addi    a6,a6,-636 # e00024a0 <kDigitsLow>
e0001724:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
e0001726:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
e0001728:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
e000172a:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
e000172c:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
e000172e:       |  |  |     |     |  |                    |     |  |         2295                       jal     e0001892 <write_digits>
e0001730:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
e0001734:       |  |  |     |     |  |                    |     |  \-------> 00001597           auipc   a1,0x1
e0001738:       |  |  |     |     |  |                    |     |            d6a58593           addi    a1,a1,-662 # e000249e <kAesModesCipherTextEcb256+0x28e>
e000173c:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
e000173e:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
e0001740:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
e0001742:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
e0001746:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
e000174a:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       e0001700 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e000174c:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
e000174e:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e0001750:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
e0001754:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
e0001758:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e000175a:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,e0001750 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
e000175c:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
e0001760:       |  |  |     |     |  +-------------------------------------- bf69                       j       e00016fa <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
e0001762:       |  |  |     |     \--|-------------------------------------> 00001597           auipc   a1,0x1
e0001766:       |  |  |     |        |                                       d2f58593           addi    a1,a1,-721 # e0002491 <kAesModesCipherTextEcb256+0x281>
e000176a:       |  |  |     |        |                                       4615                       li      a2,5
e000176c:       |  |  |     |        \-------------------------------------- b779                       j       e00016fa <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
e000176e:       |  |  \-----|----------------------------------------------> 00001597           auipc   a1,0x1
e0001772:       |  |        |                                                d4258593           addi    a1,a1,-702 # e00024b0 <kErrorNul>
e0001776:       |  |        |                                                4645                       li      a2,17
e0001778:       |  |        |                                            /-> 854a                       mv      a0,s2
e000177a:       |  |        |                                            |   9982                       jalr    s3
e000177c:       |  |        |                                            |   9aaa                       add     s5,s5,a0
e000177e:       |  +--------|--------------------------------------------|-- a011                       j       e0001782 <base_vfprintf+0x462>
e0001780:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
e0001782:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
e0001784:                   |                                            |   4df2                       lw      s11,28(sp)
e0001786:                   |                                            |   5d02                       lw      s10,32(sp)
e0001788:                   |                                            |   5c92                       lw      s9,36(sp)
e000178a:                   |                                            |   5c22                       lw      s8,40(sp)
e000178c:                   |                                            |   5bb2                       lw      s7,44(sp)
e000178e:                   |                                            |   5b42                       lw      s6,48(sp)
e0001790:                   |                                            |   5ad2                       lw      s5,52(sp)
e0001792:                   |                                            |   5a62                       lw      s4,56(sp)
e0001794:                   |                                            |   59f2                       lw      s3,60(sp)
e0001796:                   |                                            |   4906                       lw      s2,64(sp)
e0001798:                   |                                            |   4496                       lw      s1,68(sp)
e000179a:                   |                                            |   4426                       lw      s0,72(sp)
e000179c:                   |                                            |   40b6                       lw      ra,76(sp)
e000179e:                   |                                            |   6161                       addi    sp,sp,80
e00017a0:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
e00017a2:                   \--------------------------------------------|-> 00001597           auipc   a1,0x1
e00017a6:                                                                |   d1f58593           addi    a1,a1,-737 # e00024c1 <kErrorTooWide>
e00017aa:                                                                |   4631                       li      a2,12
e00017ac:                                                                \-- b7f1                       j       e0001778 <base_vfprintf+0x458>

e00017ae <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
e00017ae:                    715d                       addi    sp,sp,-80
e00017b0:                    c686                       sw      ra,76(sp)
e00017b2:                    c4a2                       sw      s0,72(sp)
e00017b4:                    c2a6                       sw      s1,68(sp)
e00017b6:                    c0ca                       sw      s2,64(sp)
e00017b8:                    de4e                       sw      s3,60(sp)
e00017ba:                    dc52                       sw      s4,56(sp)
e00017bc:                    da56                       sw      s5,52(sp)
e00017be:                    d85a                       sw      s6,48(sp)
e00017c0:                    d65e                       sw      s7,44(sp)
e00017c2:                    d462                       sw      s8,40(sp)
e00017c4:                    d266                       sw      s9,36(sp)
e00017c6:                    d06a                       sw      s10,32(sp)
e00017c8:                    8bc6                       mv      s7,a7
e00017ca:                    8a42                       mv      s4,a6
e00017cc:                    8b36                       mv      s6,a3
e00017ce:                    8ab2                       mv      s5,a2
e00017d0:                    892e                       mv      s2,a1
e00017d2:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
e00017d4:          /-------- 02e6fc63           bgeu    a3,a4,e000180c <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
e00017d8:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
e00017dc:          |         850a                       mv      a0,sp
e00017de:          |         02000613           li      a2,32
e00017e2:          |         85be                       mv      a1,a5
e00017e4:          |         2cd9                       jal     e0001aba <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e00017e6:          +-------- c09d                       beqz    s1,e000180c <hex_dump+0x5e>
e00017e8:          |         4c01                       li      s8,0
e00017ea:          |  /----> 02000513           li      a0,32
e00017ee:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
e00017f0:          |  |  /-- 00a4e463           bltu    s1,a0,e00017f8 <hex_dump+0x4a>
e00017f4:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e00017f8:          |  |  \-> 858a                       mv      a1,sp
e00017fa:          |  |      854e                       mv      a0,s3
e00017fc:          |  |      8622                       mv      a2,s0
e00017fe:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
e0001800:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e0001802:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e0001804:          |  \----- f0fd                       bnez    s1,e00017ea <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e0001806:          |     /-- 000b1663           bnez    s6,e0001812 <hex_dump+0x64>
e000180a:       /--|-----|-- a0ad                       j       e0001874 <hex_dump+0xc6>
e000180c:       |  \-----|-> 4c01                       li      s8,0
e000180e:       +--------|-- 060b0363           beqz    s6,e0001874 <hex_dump+0xc6>
e0001812:       |        \-> 4401                       li      s0,0
e0001814:       |            4601                       li      a2,0
e0001816:       |            fffb0493           addi    s1,s6,-1
e000181a:       |            8b0a                       mv      s6,sp
e000181c:       |            02000c93           li      s9,32
e0001820:       |            5d7d                       li      s10,-1
e0001822:       |     /----> 8526                       mv      a0,s1
e0001824:       |     |  /-- 000a1363           bnez    s4,e000182a <hex_dump+0x7c>
e0001828:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
e000182a:       |     |  \-> 9556                       add     a0,a0,s5
e000182c:       |     |      00054503           lbu     a0,0(a0)
e0001830:       |     |      00455593           srli    a1,a0,0x4
e0001834:       |     |      95de                       add     a1,a1,s7
e0001836:       |     |      00058583           lb      a1,0(a1)
e000183a:       |     |      00cb06b3           add     a3,s6,a2
e000183e:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e0001842:       |     |      893d                       andi    a0,a0,15
e0001844:       |     |      955e                       add     a0,a0,s7
e0001846:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
e000184a:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e000184c:       |     |      00a680a3           sb      a0,1(a3)
e0001850:       |     |  /-- 01961963           bne     a2,s9,e0001862 <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
e0001854:       |     |  |   858a                       mv      a1,sp
e0001856:       |     |  |   02000613           li      a2,32
e000185a:       |     |  |   854e                       mv      a0,s3
e000185c:       |     |  |   9902                       jalr    s2
e000185e:       |     |  |   4601                       li      a2,0
e0001860:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e0001862:       |     |  \-> 14fd                       addi    s1,s1,-1
e0001864:       |     |      0405                       addi    s0,s0,1
e0001866:       |     \----- fba49ee3           bne     s1,s10,e0001822 <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
e000186a:       +----------- c609                       beqz    a2,e0001874 <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
e000186c:       |            858a                       mv      a1,sp
e000186e:       |            854e                       mv      a0,s3
e0001870:       |            9902                       jalr    s2
e0001872:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
e0001874:       \----------> 8562                       mv      a0,s8
e0001876:                    5d02                       lw      s10,32(sp)
e0001878:                    5c92                       lw      s9,36(sp)
e000187a:                    5c22                       lw      s8,40(sp)
e000187c:                    5bb2                       lw      s7,44(sp)
e000187e:                    5b42                       lw      s6,48(sp)
e0001880:                    5ad2                       lw      s5,52(sp)
e0001882:                    5a62                       lw      s4,56(sp)
e0001884:                    59f2                       lw      s3,60(sp)
e0001886:                    4906                       lw      s2,64(sp)
e0001888:                    4496                       lw      s1,68(sp)
e000188a:                    4426                       lw      s0,72(sp)
e000188c:                    40b6                       lw      ra,76(sp)
e000188e:                    6161                       addi    sp,sp,80
e0001890:                    8082                       ret

e0001892 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
e0001892:              7179                     addi    sp,sp,-48
e0001894:              d606                     sw      ra,44(sp)
e0001896:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
e0001898:       /----- ca05                     beqz    a2,e00018c8 <write_digits+0x36>
e000189a:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e000189c:       |      02b10293                 addi    t0,sp,43
e00018a0:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
e00018a2:       |  |   02f65633                 divu    a2,a2,a5
e00018a6:       |  |   02f605b3                 mul     a1,a2,a5
e00018aa:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
e00018ae:       |  |   95c2                     add     a1,a1,a6
e00018b0:       |  |   00058e03                 lb      t3,0(a1)
e00018b4:       |  |   007285b3                 add     a1,t0,t2
e00018b8:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e00018bc:       |  |   13fd                     addi    t2,t2,-1
e00018be:       |  \-- fef371e3                 bgeu    t1,a5,e00018a0 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e00018c2:       |      40700633                 neg     a2,t2
e00018c6:       |  /-- a031                     j       e00018d2 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
e00018c8:       \--|-> 00080583                 lb      a1,0(a6)
e00018cc:          |   02b105a3                 sb      a1,43(sp)
e00018d0:          |   4605                     li      a2,1
e00018d2:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e00018d4:          /-- c291                     beqz    a3,e00018d8 <write_digits+0x46>
e00018d6:          |   85b6                     mv      a1,a3
e00018d8:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
e00018dc:          /-- 00d5e463                 bltu    a1,a3,e00018e4 <write_digits+0x52>
e00018e0:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e00018e4:       /--\-X 00b67e63                 bgeu    a2,a1,e0001900 <write_digits+0x6e>
e00018e8:       |      40c586b3                 sub     a3,a1,a2
e00018ec:       |      007c                     addi    a5,sp,12
e00018ee:       |      40c78633                 sub     a2,a5,a2
e00018f2:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
e00018f4:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e00018f8:       |  |   16fd                     addi    a3,a3,-1
e00018fa:       |  |   167d                     addi    a2,a2,-1
e00018fc:       |  \-- fee5                     bnez    a3,e00018f4 <write_digits+0x62>
e00018fe:       |      862e                     mv      a2,a1
e0001900:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
e0001902:              8d91                     sub     a1,a1,a2
e0001904:              02058593                 addi    a1,a1,32
e0001908:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
e000190a:              50b2                     lw      ra,44(sp)
e000190c:              6145                     addi    sp,sp,48
e000190e:              8082                     ret

e0001910 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
e0001910:              00052813                 slti    a6,a0,0
e0001914:              41f55793                 srai    a5,a0,0x1f
e0001918:              8fe9                     and     a5,a5,a0
e000191a:              8bfd                     andi    a5,a5,31
e000191c:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
e0001920:              00e87833                 and     a6,a6,a4
e0001924:              02000713                 li      a4,32
e0001928:          /-- 00081363                 bnez    a6,e000192e <status_extract+0x1e>
e000192c:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
e000192e:          \-> 00271813                 slli    a6,a4,0x2
e0001932:              00001797                 auipc   a5,0x1
e0001936:              d6e78793                 addi    a5,a5,-658 # e00026a0 <status_codes>
e000193a:              97c2                     add     a5,a5,a6
e000193c:              439c                     lw      a5,0(a5)
e000193e:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
e0001940:              00173593                 seqz    a1,a4
e0001944:       /----- cb1d                     beqz    a4,e000197a <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e0001946:       |      00555713                 srli    a4,a0,0x5
e000194a:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
e000194e:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e0001950:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
e0001954:       |      8a7d                     andi    a2,a2,31
e0001956:       |      04066613                 ori     a2,a2,64
e000195a:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
e000195e:       |      01555613                 srli    a2,a0,0x15
e0001962:       |      8a7d                     andi    a2,a2,31
e0001964:       |      04066613                 ori     a2,a2,64
e0001968:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
e000196c:       |      8169                     srli    a0,a0,0x1a
e000196e:       |      897d                     andi    a0,a0,31
e0001970:       |      04056513                 ori     a0,a0,64
e0001974:       |      00a68123                 sb      a0,2(a3)
e0001978:       |  /-- a011                     j       e000197c <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
e000197a:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
e000197c:          \-> 0015c513                 xori    a0,a1,1
e0001980:              8082                     ret

e0001982 <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:9

#include "sw/device/lib/base/math.h"

#include <stddef.h>

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
e0001982:                 1141                  addi    sp,sp,-16
e0001984:                 c622                  sw      s0,12(sp)
e0001986:                 c426                  sw      s1,8(sp)
e0001988:                 c24a                  sw      s2,4(sp)
e000198a:                 4881                  li      a7,0
e000198c:                 4801                  li      a6,0
e000198e:                 4e01                  li      t3,0
e0001990:                 4e81                  li      t4,0
e0001992:                 03f00793              li      a5,63
e0001996:                 42fd                  li      t0,31
e0001998:                 00159313              slli    t1,a1,0x1
e000199c:                 53fd                  li      t2,-1
/proc/self/cwd/sw/device/lib/base/math.c:23
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
e000199e:       /-------> fe078493              addi    s1,a5,-32
e00019a2:       |     /-- 0004c563              bltz    s1,e00019ac <udiv64_slow+0x2a>
e00019a6:       |     |   0095df33              srl     t5,a1,s1
e00019aa:       |  /--|-- a809                  j       e00019bc <udiv64_slow+0x3a>
e00019ac:       |  |  \-> 00f554b3              srl     s1,a0,a5
e00019b0:       |  |      40f28433              sub     s0,t0,a5
e00019b4:       |  |      00831433              sll     s0,t1,s0
e00019b8:       |  |      0084ef33              or      t5,s1,s0
e00019bc:       |  \----> 01fe5493              srli    s1,t3,0x1f
e00019c0:       |         001e9413              slli    s0,t4,0x1
e00019c4:       |         00946eb3              or      t4,s0,s1
e00019c8:       |         001e1493              slli    s1,t3,0x1
e00019cc:       |         001f7413              andi    s0,t5,1
e00019d0:       |         00946f33              or      t5,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:29

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
e00019d4:       |  /----- 00de8563              beq     t4,a3,e00019de <udiv64_slow+0x5c>
e00019d8:       |  |      00debe33              sltu    t3,t4,a3
e00019dc:       |  |  /-- a019                  j       e00019e2 <udiv64_slow+0x60>
e00019de:       |  \--|-> 00cf3e33              sltu    t3,t5,a2
e00019e2:       |     \-> 001e4f93              xori    t6,t3,1
e00019e6:       |         4901                  li      s2,0
e00019e8:       |         4481                  li      s1,0
e00019ea:       |     /-- 000e1463              bnez    t3,e00019f2 <udiv64_slow+0x70>
e00019ee:       |     |   8936                  mv      s2,a3
e00019f0:       |     |   84b2                  mv      s1,a2
e00019f2:       |     \-> 01f8de13              srli    t3,a7,0x1f
e00019f6:       |         00181413              slli    s0,a6,0x1
e00019fa:       |         01c46833              or      a6,s0,t3
e00019fe:       |         0886                  slli    a7,a7,0x1
e0001a00:       |         409f0e33              sub     t3,t5,s1
e0001a04:       |         009f34b3              sltu    s1,t5,s1
e0001a08:       |         412e8433              sub     s0,t4,s2
e0001a0c:       |         40940eb3              sub     t4,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
e0001a10:       |         17fd                  addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/base/math.c:29
    if (rem >= b) {
e0001a12:       |         01f8e8b3              or      a7,a7,t6
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
e0001a16:       \-------- f87794e3              bne     a5,t2,e000199e <udiv64_slow+0x1c>
/proc/self/cwd/sw/device/lib/base/math.c:35
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
e0001a1a:             /-- c709                  beqz    a4,e0001a24 <udiv64_slow+0xa2>
/proc/self/cwd/sw/device/lib/base/math.c:36
    *rem_out = rem;
e0001a1c:             |   01c72023              sw      t3,0(a4)
e0001a20:             |   01d72223              sw      t4,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:38
  }
  return quot;
e0001a24:             \-> 8546                  mv      a0,a7
e0001a26:                 85c2                  mv      a1,a6
e0001a28:                 4912                  lw      s2,4(sp)
e0001a2a:                 44a2                  lw      s1,8(sp)
e0001a2c:                 4432                  lw      s0,12(sp)
e0001a2e:                 0141                  addi    sp,sp,16
e0001a30:                 8082                  ret

e0001a32 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
e0001a32:                       00153693                seqz    a3,a0
e0001a36:                       0015b713                seqz    a4,a1
e0001a3a:                       8ed9                    or      a3,a3,a4
e0001a3c:       /-------------- eab5                    bnez    a3,e0001ab0 <memcpy+0x7e>
e0001a3e:       |               4711                    li      a4,4
e0001a40:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001a42:       |        /----- 00e66c63                bltu    a2,a4,e0001a5a <memcpy+0x28>
e0001a46:       |        |      00a5c6b3                xor     a3,a1,a0
e0001a4a:       |        |      0036f793                andi    a5,a3,3
e0001a4e:       |        |      8832                    mv      a6,a2
e0001a50:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
e0001a52:       |        |  /-- eb91                    bnez    a5,e0001a66 <memcpy+0x34>
e0001a54:       |        |  |   40a006b3                neg     a3,a0
e0001a58:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e0001a5a:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e0001a5e:       |           |   9b71                    andi    a4,a4,-4
e0001a60:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001a64:       |  /--------|-- c6b9                    beqz    a3,e0001ab2 <memcpy+0x80>
e0001a66:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e0001a68:       |  |        /-> 00f58733                add     a4,a1,a5
e0001a6c:       |  |        |   00070883                lb      a7,0(a4)
e0001a70:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e0001a74:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e0001a76:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e0001a7a:       |  |        \-- fef697e3                bne     a3,a5,e0001a68 <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001a7e:       |  |  /-------- 0106fb63                bgeu    a3,a6,e0001a94 <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  // the pointer points to four bytes of four-byte-aligned memory.
  //
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001a82:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0001a86:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
 */
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001a88:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e0001a8c:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0001a8e:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e0001a90:       |  |  |  +----- ff06e9e3                bltu    a3,a6,e0001a82 <memcpy+0x50>
e0001a94:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,e0001ab0 <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
e0001a98:       |  |  |  |      8e15                    sub     a2,a2,a3
e0001a9a:       |  |  |  |      00d50733                add     a4,a0,a3
e0001a9e:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
e0001aa0:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
e0001aa4:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
e0001aa8:       |  |  |  |  |   167d                    addi    a2,a2,-1
e0001aaa:       |  |  |  |  |   0705                    addi    a4,a4,1
e0001aac:       |  |  |  |  |   0585                    addi    a1,a1,1
e0001aae:       |  |  |  |  \-- fa6d                    bnez    a2,e0001aa0 <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
e0001ab0:       \--|--|--|----> 8082                    ret
e0001ab2:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001ab4:             |  \----- fd06e7e3                bltu    a3,a6,e0001a82 <memcpy+0x50>
e0001ab8:             \-------- bff1                    j       e0001a94 <memcpy+0x62>

e0001aba <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
e0001aba:                 4691                  li      a3,4
e0001abc:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001abe:             /-- 00d66663              bltu    a2,a3,e0001aca <memset+0x10>
e0001ac2:             |   40a006b3              neg     a3,a0
e0001ac6:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e0001aca:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e0001ace:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001ad2:          /----- cb01                  beqz    a4,e0001ae2 <memset+0x28>
e0001ad4:          |      87aa                  mv      a5,a0
e0001ad6:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
e0001ad8:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
e0001adc:          |  |   16fd                  addi    a3,a3,-1
e0001ade:          |  |   0785                  addi    a5,a5,1
e0001ae0:          |  \-- fee5                  bnez    a3,e0001ad8 <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001ae2:       /--\----X 02080263              beqz    a6,e0001b06 <memset+0x4c>
e0001ae6:       |         00e808b3              add     a7,a6,a4
e0001aea:       |         0ff5f813              andi    a6,a1,255
e0001aee:       |         010107b7              lui     a5,0x1010
e0001af2:       |         10178793              addi    a5,a5,257 # 1010101 <tohost+0xff00f9>
e0001af6:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001afa:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e0001afe:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0001b00:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e0001b02:       |     \-- ff176ce3              bltu    a4,a7,e0001afa <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
e0001b06:       \--/----X 00c77a63              bgeu    a4,a2,e0001b1a <memset+0x60>
e0001b0a:          |      8e19                  sub     a2,a2,a4
e0001b0c:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
e0001b10:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
e0001b14:          |  |   167d                  addi    a2,a2,-1
e0001b16:          |  |   0685                  addi    a3,a3,1
e0001b18:          |  \-- fe65                  bnez    a2,e0001b10 <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
e0001b1a:          \----> 8082                  ret

e0001b1c <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
e0001b1c:                             4691                      li      a3,4
e0001b1e:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001b20:                         /-- 00d66663                  bltu    a2,a3,e0001b2c <memchr+0x10>
e0001b24:                         |   40a006b3                  neg     a3,a0
e0001b28:                         |   0036fe93                  andi    t4,a3,3
e0001b2c:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001b30:                      /----- 000e8b63                  beqz    t4,e0001b46 <memchr+0x2a>
e0001b34:                      |      85aa                      mv      a1,a0
e0001b36:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
e0001b38:                      |  /-> 0005c683                  lbu     a3,0(a1)
e0001b3c:       /--------------|--|-- 09c68563                  beq     a3,t3,e0001bc6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
e0001b40:       |              |  |   17fd                      addi    a5,a5,-1
e0001b42:       |              |  |   0585                      addi    a1,a1,1
e0001b44:       |              |  \-- fbf5                      bnez    a5,e0001b38 <memchr+0x1c>
e0001b46:       |              \----> 41d605b3                  sub     a1,a2,t4
e0001b4a:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001b4c:       |  /----------------- c9a9                      beqz    a1,e0001b9e <memchr+0x82>
e0001b4e:       |  |                  01d58833                  add     a6,a1,t4
e0001b52:       |  |                  010105b7                  lui     a1,0x1010
e0001b56:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
e0001b5a:       |  |                  02be02b3                  mul     t0,t3,a1
e0001b5e:       |  |                  0ff00893                  li      a7,255
e0001b62:       |  |                  65c1                      lui     a1,0x10
e0001b64:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_stack_len+0x7f00>
e0001b68:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001b6c:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0001b70:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
e0001b72:       |  |              |   0056c7b3                  xor     a5,a3,t0
e0001b76:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e0001b7a:       |  |              |   0ff6f713                  andi    a4,a3,255
e0001b7e:       +--|--------------|-- 05170463                  beq     a4,a7,e0001bc6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e0001b82:       |  |              |   0076f733                  and     a4,a3,t2
e0001b86:       |  |  /-----------|-- 02770b63                  beq     a4,t2,e0001bbc <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e0001b8a:       |  |  |           |   0066f6b3                  and     a3,a3,t1
e0001b8e:       |  |  |  /--------|-- 02668963                  beq     a3,t1,e0001bc0 <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e0001b92:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
e0001b96:       |  |  |  |  /-----|-- c69d                      beqz    a3,e0001bc4 <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001b98:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
e0001b9a:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,e0001b6c <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
e0001b9e:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,e0001bb8 <memchr+0x9c>
e0001ba2:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
e0001ba6:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
e0001baa:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
e0001bae:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,e0001bc6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
e0001bb2:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
e0001bb4:       |     |  |  |  |  |   0585                      addi    a1,a1,1
e0001bb6:       |     |  |  |  |  \-- fa75                      bnez    a2,e0001baa <memchr+0x8e>
e0001bb8:       |     |  |  |  \----> 4581                      li      a1,0
e0001bba:       +-----|--|--|-------- a031                      j       e0001bc6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
e0001bbc:       |     \--|--|-------> 0585                      addi    a1,a1,1
e0001bbe:       +--------|--|-------- a021                      j       e0001bc6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
e0001bc0:       |        \--|-------> 0589                      addi    a1,a1,2
e0001bc2:       +-----------|-------- a011                      j       e0001bc6 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
e0001bc4:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e0001bc6:       \-------------------> 852e                      mv      a0,a1
e0001bc8:                             8082                      ret

e0001bca <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
e0001bca:                          4691                 li      a3,4
e0001bcc:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001bce:                      /-- 00d66663             bltu    a2,a3,e0001bda <memrchr+0x10>
e0001bd2:                      |   40a006b3             neg     a3,a0
e0001bd6:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e0001bda:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e0001bde:                          9af1                 andi    a3,a3,-4
e0001be0:                          006687b3             add     a5,a3,t1
e0001be4:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
e0001be6:                      /-- 00f66363             bltu    a2,a5,e0001bec <memrchr+0x22>
e0001bea:                      |   86be                 mv      a3,a5
e0001bec:                      \-> 0ff5f393             andi    t2,a1,255
e0001bf0:                   /--/-X 00c7fd63             bgeu    a5,a2,e0001c0a <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
e0001bf4:                   |  |   00c50733             add     a4,a0,a2
e0001bf8:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
e0001bfc:                   |  |   fff60713             addi    a4,a2,-1
e0001c00:                   |  |   863a                 mv      a2,a4
e0001c02:                   |  \-- fe7597e3             bne     a1,t2,e0001bf0 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e0001c06:                   |      953a                 add     a0,a0,a4
e0001c08:                   |      8082                 ret
e0001c0a:                   \----> 010105b7             lui     a1,0x1010
e0001c0e:                          10158593             addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
e0001c12:                          02b382b3             mul     t0,t2,a1
e0001c16:                          00ff0837             lui     a6,0xff0
e0001c1a:                          65c1                 lui     a1,0x10
e0001c1c:                          f0058793             addi    a5,a1,-256 # ff00 <_stack_len+0x7f00>
e0001c20:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
e0001c24:       /--------------/-X 04d37563             bgeu    t1,a3,e0001c6e <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001c28:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0001c2c:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
e0001c30:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e0001c34:       |              |   01875593             srli    a1,a4,0x18
e0001c38:       |  /-----------|-- cd95                 beqz    a1,e0001c74 <memrchr+0xaa>
e0001c3a:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e0001c3e:       |  |           |   010775b3             and     a1,a4,a6
e0001c42:       |  |  /--------|-- 03058c63             beq     a1,a6,e0001c7a <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e0001c46:       |  |  |        |   00f775b3             and     a1,a4,a5
e0001c4a:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,e0001c80 <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e0001c4e:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
e0001c52:       |  |  |  |     |   16f1                 addi    a3,a3,-4
e0001c54:       |  |  |  |     \-- fd1598e3             bne     a1,a7,e0001c24 <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001c58:       |  |  |  |         9536                 add     a0,a0,a3
e0001c5a:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
e0001c5c:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
e0001c60:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
e0001c64:       |  |  |  |     |   fff68613             addi    a2,a3,-1
e0001c68:       |  |  |  |     |   86b2                 mv      a3,a2
e0001c6a:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,e0001c86 <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
e0001c6e:       \--|--|--|--|--\-X f6fd                 bnez    a3,e0001c5c <memrchr+0x92>
e0001c70:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001c72:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
e0001c74:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001c78:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
e0001c7a:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001c7e:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
e0001c80:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001c84:                   |      8082                 ret
e0001c86:                   \----> 9532                 add     a0,a0,a2
e0001c88:                          8082                 ret
