
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xe0000080

Program Header:
    LOAD off    0x00001000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00003c94 memsz 0x00003c94 flags rwx
    LOAD off    0x00000000 vaddr 0xe0008000 paddr 0xe0008000 align 2**12
         filesz 0x00000000 memsz 0x00002000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name                          Size      VMA       LMA       File off  Algn  Flags
  0 .vectors                      00000084  e0000000  e0000000  00001000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text                         00001608  e0000084  e0000084  00001084  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata                       00000594  e0001690  e0001690  00002690  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data                         00000084  e0001c24  e0001c24  00002c24  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .static_critical.sec_mmio_ctx 00001f50  e0001ca8  e0001ca8  00002ca8  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .bss                          00000010  e0003bf8  e0003bf8  00004bf8  2**2  ALLOC
  6 .logs.fields                  0000008c  e0003c08  e0003c08  00004c08  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .stack                        00002000  e0008000  e0008000  00005000  2**0  ALLOC
  8 .debug_loc                    00005ae8  00000000  00000000  00004c94  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev                 00001b49  00000000  00000000  0000a77c  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info                   000080af  00000000  00000000  0000c2c5  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges                 00000848  00000000  00000000  00014374  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str                    000047ad  00000000  00000000  00014bbc  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .comment                      00000074  00000000  00000000  00019369  2**0  CONTENTS, READONLY
 14 .riscv.attributes             00000026  00000000  00000000  000193dd  2**0  CONTENTS, READONLY
 15 .debug_frame                  000008c4  00000000  00000000  00019404  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line                   00005254  00000000  00000000  00019cc8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges                00000028  00000000  00000000  0001ef1c  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
e0000000 l    d  .vectors       00000000 .vectors
e0000084 l    d  .text  00000000 .text
e0001690 l    d  .rodata        00000000 .rodata
e0001c24 l    d  .data  00000000 .data
e0001ca8 l    d  .static_critical.sec_mmio_ctx  00000000 .static_critical.sec_mmio_ctx
e0003bf8 l    d  .bss   00000000 .bss
e0003c08 l    d  .logs.fields   00000000 .logs.fields
e0008000 l    d  .stack 00000000 .stack
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .comment       00000000 .comment
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    df *ABS*  00000000 crt0.o
e0000084 l       .text  00000000 default_exc_handler
e0000084 l       .text  00000000 
e00000fe l       .text  00000000 sleep_loop
e0000084 l       .text  00000000 
e0000086 l       .text  00000000 reset_handler
e0000086 l       .text  00000000 
e0000086 l       .text  00000000 
e00000cc l       .text  00000000 
e00000ea l       .text  00000000 zero_loop_end
e00000e0 l       .text  00000000 zero_loop
e00000e0 l       .text  00000000 
e00000ea l       .text  00000000 
e00000ea l       .text  00000000 main_entry
e00000ea l       .text  00000000 
e00000ee l       .text  00000000 
e00000f2 l       .text  00000000 
e00000fe l       .text  00000000 
e0000102 l       .text  00000000 
e0000000 l       .vectors       00000000 
e000002c l       .vectors       00000000 
e0000030 l       .vectors       00000000 
e000007c l       .vectors       00000000 
e0000080 l       .vectors       00000000 
000012ce l       .debug_info    00000000 
000004a2 l       .debug_abbrev  00000000 
e0000104 l       .text  00000000 
e0000084 l       .vectors       00000000 
00000158 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 sram_spi_host_test.c
e0000104 l       .text  00000000 
e0000104 l       .text  00000000 
e0000104 l       .text  00000000 
e0000106 l       .text  00000000 
e000010e l       .text  00000000 
e0000110 l       .text  00000000 
e0000110 l       .text  00000000 
e0000114 l       .text  00000000 
e0000114 l       .text  00000000 
e000011c l       .text  00000000 
e000011c l       .text  00000000 
e0000120 l       .text  00000000 
e000012c l       .text  00000000 
e0000130 l       .text  00000000 
e0000130 l       .text  00000000 
e0000138 l       .text  00000000 
e000013a l       .text  00000000 
e000013a l       .text  00000000 
e000013c l       .text  00000000 
e000013c l       .text  00000000 
e0000140 l       .text  00000000 
e0000142 l       .text  00000000 
e0003c08 l     O .logs.fields   00000014 init_spi_host.kLogFields
e0000142 l       .text  00000000 
e0000152 l       .text  00000000 
e0000152 l       .text  00000000 
e0000154 l       .text  00000000 
e0000154 l       .text  00000000 
e000016c l       .text  00000000 
e000016c l       .text  00000000 
e0000172 l       .text  00000000 
e0000176 l       .text  00000000 
e0000176 l       .text  00000000 
e000017c l       .text  00000000 
e000017e l       .text  00000000 
e0000180 l       .text  00000000 
e0000180 l       .text  00000000 
e0000184 l       .text  00000000 
e0000186 l       .text  00000000 
e0003c1c l     O .logs.fields   00000014 init_spi_host.kLogFields.2
e0000186 l       .text  00000000 
e0000196 l       .text  00000000 
e0000196 l       .text  00000000 
e0000198 l       .text  00000000 
e0000198 l       .text  00000000 
e00001b0 l       .text  00000000 
e00001b0 l       .text  00000000 
e00001b6 l       .text  00000000 
e00001ba l       .text  00000000 
e00001ba l       .text  00000000 
e00001c6 l       .text  00000000 
e00001c6 l       .text  00000000 
e00001c6 l       .text  00000000 
e00001c6 l       .text  00000000 
e00001c6 l       .text  00000000 
e00001c8 l       .text  00000000 
e00001c8 l       .text  00000000 
e00001e2 l       .text  00000000 
e00001e2 l       .text  00000000 
e00001e4 l       .text  00000000 
e00001e8 l       .text  00000000 
e00001e8 l       .text  00000000 
e00001ea l       .text  00000000 
e00001ea l       .text  00000000 
e00001f4 l       .text  00000000 
e00001f6 l       .text  00000000 
e00001f6 l       .text  00000000 
e0000200 l       .text  00000000 
e0003bf8 l     O .bss   00000004 spi_host
e0000200 l       .text  00000000 
e000020e l       .text  00000000 
e000020e l       .text  00000000 
e000021a l       .text  00000000 
e000021a l       .text  00000000 
e000021c l       .text  00000000 
e000021c l       .text  00000000 
e000021e l       .text  00000000 
e000021e l       .text  00000000 
e0000222 l       .text  00000000 
e0003c30 l     O .logs.fields   00000014 main.kLogFields
e0000222 l       .text  00000000 
e0000232 l       .text  00000000 
e0000232 l       .text  00000000 
e0000234 l       .text  00000000 
e0000234 l       .text  00000000 
e0000250 l       .text  00000000 
e0000250 l       .text  00000000 
e0000256 l       .text  00000000 
e000025a l       .text  00000000 
e000025a l       .text  00000000 
e000026e l       .text  00000000 
e000026e l       .text  00000000 
e0000274 l       .text  00000000 
e0000276 l       .text  00000000 
e0000276 l       .text  00000000 
e000027e l       .text  00000000 
e000027e l       .text  00000000 
e0000282 l       .text  00000000 
e0000282 l       .text  00000000 
e0000286 l       .text  00000000 
e0000286 l       .text  00000000 
e000029e l       .text  00000000 
e000029e l       .text  00000000 
e0003c44 l     O .logs.fields   00000014 main.kLogFields.7
e00002bc l       .text  00000000 
e00002c0 l       .text  00000000 
e00002c0 l       .text  00000000 
e00002c4 l       .text  00000000 
e00002c4 l       .text  00000000 
e00002de l       .text  00000000 
e00002e4 l       .text  00000000 
e00002e4 l       .text  00000000 
e0000308 l       .text  00000000 
e0000318 l       .text  00000000 
e000032a l       .text  00000000 
e000032a l       .text  00000000 
e0000336 l       .text  00000000 
e0000338 l       .text  00000000 
e000033a l       .text  00000000 
e000033a l       .text  00000000 
e0000340 l       .text  00000000 
e000034c l       .text  00000000 
e000034c l       .text  00000000 
e000034e l       .text  00000000 
e000034e l       .text  00000000 
e0000366 l       .text  00000000 
e0000366 l       .text  00000000 
e000036e l       .text  00000000 
e000036e l       .text  00000000 
e0000372 l       .text  00000000 
e0000372 l       .text  00000000 
e0000376 l       .text  00000000 
e000037a l       .text  00000000 
e000037c l       .text  00000000 
e0000380 l       .text  00000000 
e0000382 l       .text  00000000 
e0000386 l       .text  00000000 
e000038a l       .text  00000000 
e000038e l       .text  00000000 
e0000390 l       .text  00000000 
e0000390 l       .text  00000000 
e0000392 l       .text  00000000 
e0000394 l       .text  00000000 
e0000398 l       .text  00000000 
e0000398 l       .text  00000000 
e000039a l       .text  00000000 
e00003a2 l       .text  00000000 
e00003a2 l       .text  00000000 
e00003ae l       .text  00000000 
e00003ae l       .text  00000000 
e00003b0 l       .text  00000000 
e00003b2 l       .text  00000000 
e00003b2 l       .text  00000000 
e00003b8 l       .text  00000000 
e0003c58 l     O .logs.fields   00000014 main.kLogFields.10
e00003b8 l       .text  00000000 
e00003c8 l       .text  00000000 
e00003c8 l       .text  00000000 
e00003ca l       .text  00000000 
e00003ca l       .text  00000000 
e00003e6 l       .text  00000000 
e00003e6 l       .text  00000000 
e00003ec l       .text  00000000 
e00003f0 l       .text  00000000 
e00003f0 l       .text  00000000 
e0000400 l       .text  00000000 
e0000414 l       .text  00000000 
e0000414 l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000003c l       .debug_loc     00000000 
00000057 l       .debug_loc     00000000 
00000146 l       .debug_loc     00000000 
00000177 l       .debug_loc     00000000 
000001a8 l       .debug_loc     00000000 
000001c3 l       .debug_loc     00000000 
000001de l       .debug_loc     00000000 
0000023e l       .debug_loc     00000000 
000002bc l       .debug_loc     00000000 
000002ed l       .debug_loc     00000000 
00000331 l       .debug_loc     00000000 
00000379 l       .debug_loc     00000000 
000003b9 l       .debug_loc     00000000 
000003fd l       .debug_loc     00000000 
00000430 l       .debug_loc     00000000 
00000457 l       .debug_loc     00000000 
0000047e l       .debug_loc     00000000 
000004a6 l       .debug_loc     00000000 
000004c1 l       .debug_loc     00000000 
000004e7 l       .debug_loc     00000000 
00000526 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
00000a00 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
00000831 l       .debug_str     00000000 
0000089f l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
0000014b l       .debug_str     00000000 
00000156 l       .debug_str     00000000 
00000113 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00003fbf l       .debug_str     00000000 
0000013e l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
0000010f l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000eb l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
0000085f l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000a0e l       .debug_str     00000000 
00000a6a l       .debug_str     00000000 
00000a6f l       .debug_str     00000000 
00000a36 l       .debug_str     00000000 
00000a74 l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
00000aa4 l       .debug_str     00000000 
00000aad l       .debug_str     00000000 
00000ab6 l       .debug_str     00000000 
00000c76 l       .debug_str     00000000 
0000370b l       .debug_str     00000000 
00000ac2 l       .debug_str     00000000 
00003dbc l       .debug_str     00000000 
00000ace l       .debug_str     00000000 
00003b38 l       .debug_str     00000000 
00000ad9 l       .debug_str     00000000 
00000adf l       .debug_str     00000000 
00000ae9 l       .debug_str     00000000 
00000af3 l       .debug_str     00000000 
00000afd l       .debug_str     00000000 
00000acc l       .debug_str     00000000 
000014fe l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
00000187 l       .debug_str     00000000 
00000179 l       .debug_str     00000000 
0000016d l       .debug_str     00000000 
00000c80 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
000001aa l       .debug_str     00000000 
000001b4 l       .debug_str     00000000 
000001bf l       .debug_str     00000000 
000001ca l       .debug_str     00000000 
000001da l       .debug_str     00000000 
000001e9 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000286 l       .debug_str     00000000 
00000211 l       .debug_str     00000000 
00000226 l       .debug_str     00000000 
0000023f l       .debug_str     00000000 
00000251 l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
000006a6 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
0000029b l       .debug_str     00000000 
000002a9 l       .debug_str     00000000 
000002ca l       .debug_str     00000000 
000002e0 l       .debug_str     00000000 
000002fc l       .debug_str     00000000 
00000311 l       .debug_str     00000000 
0000032d l       .debug_str     00000000 
00000349 l       .debug_str     00000000 
0000035d l       .debug_str     00000000 
00000371 l       .debug_str     00000000 
00000386 l       .debug_str     00000000 
0000039f l       .debug_str     00000000 
000003b3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
000003d7 l       .debug_str     00000000 
000003ea l       .debug_str     00000000 
00000404 l       .debug_str     00000000 
0000041b l       .debug_str     00000000 
00000435 l       .debug_str     00000000 
00000451 l       .debug_str     00000000 
0000046d l       .debug_str     00000000 
00000484 l       .debug_str     00000000 
0000049a l       .debug_str     00000000 
000004b2 l       .debug_str     00000000 
000004ca l       .debug_str     00000000 
000004e3 l       .debug_str     00000000 
000004fc l       .debug_str     00000000 
00000515 l       .debug_str     00000000 
0000052e l       .debug_str     00000000 
0000054d l       .debug_str     00000000 
0000056b l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
0000059e l       .debug_str     00000000 
000005ba l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000005f4 l       .debug_str     00000000 
00000610 l       .debug_str     00000000 
0000062c l       .debug_str     00000000 
00000643 l       .debug_str     00000000 
0000065c l       .debug_str     00000000 
00000672 l       .debug_str     00000000 
00000691 l       .debug_str     00000000 
0000075d l       .debug_str     00000000 
000006b0 l       .debug_str     00000000 
000006cd l       .debug_str     00000000 
000006eb l       .debug_str     00000000 
00000707 l       .debug_str     00000000 
00000720 l       .debug_str     00000000 
00000739 l       .debug_str     00000000 
000007ba l       .debug_str     00000000 
00000777 l       .debug_str     00000000 
00000790 l       .debug_str     00000000 
000007a5 l       .debug_str     00000000 
000007f9 l       .debug_str     00000000 
000007cd l       .debug_str     00000000 
000007e3 l       .debug_str     00000000 
00000a8d l       .debug_str     00000000 
00000810 l       .debug_str     00000000 
00000892 l       .debug_str     00000000 
00000827 l       .debug_str     00000000 
0000084a l       .debug_str     00000000 
000034ed l       .debug_str     00000000 
0000086c l       .debug_str     00000000 
00000872 l       .debug_str     00000000 
00000877 l       .debug_str     00000000 
00000888 l       .debug_str     00000000 
0000088d l       .debug_str     00000000 
00000864 l       .debug_str     00000000 
00000856 l       .debug_str     00000000 
00000882 l       .debug_str     00000000 
000008a6 l       .debug_str     00000000 
000008bb l       .debug_str     00000000 
000008d2 l       .debug_str     00000000 
000008e2 l       .debug_str     00000000 
00000902 l       .debug_str     00000000 
00000916 l       .debug_str     00000000 
0000091f l       .debug_str     00000000 
0000092d l       .debug_str     00000000 
00000939 l       .debug_str     00000000 
00000943 l       .debug_str     00000000 
0000094e l       .debug_str     00000000 
0000095a l       .debug_str     00000000 
0000096c l       .debug_str     00000000 
000009eb l       .debug_str     00000000 
0000468f l       .debug_str     00000000 
00003aed l       .debug_str     00000000 
000007c7 l       .debug_str     00000000 
00000ad4 l       .debug_str     00000000 
00003b46 l       .debug_str     00000000 
000009cf l       .debug_str     00000000 
00003bf2 l       .debug_str     00000000 
000009d6 l       .debug_str     00000000 
000009d9 l       .debug_str     00000000 
000009df l       .debug_str     00000000 
000009e5 l       .debug_str     00000000 
00000985 l       .debug_str     00000000 
000009a1 l       .debug_str     00000000 
000009b6 l       .debug_str     00000000 
000040b8 l       .debug_str     00000000 
00000a13 l       .debug_str     00000000 
00000a29 l       .debug_str     00000000 
00000a3f l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
00000a91 l       .debug_str     00000000 
00000a7a l       .debug_str     00000000 
00000a9a l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
e00001c6 l       .text  00000000 
e0000414 l       .text  00000000 
00000000 l    df *ABS*  00000000 utils.c
e0000414 l       .text  00000000 
e0000414 l       .text  00000000 
e0000414 l       .text  00000000 
e0000416 l       .text  00000000 
e0000416 l       .text  00000000 
e0000424 l       .text  00000000 
e000042c l       .text  00000000 
e000042e l       .text  00000000 
e0000432 l       .text  00000000 
e0000436 l       .text  00000000 
e0000442 l       .text  00000000 
e0000444 l       .text  00000000 
e0000446 l       .text  00000000 
e0000446 l       .text  00000000 
e0000448 l       .text  00000000 
e0000448 l       .text  00000000 
e000044a l       .text  00000000 
e000044a l       .text  00000000 
e000044c l       .text  00000000 
e000044c l       .text  00000000 
e0000450 l       .text  00000000 
e0000450 l       .text  00000000 
e0000458 l       .text  00000000 
e000045a l       .text  00000000 
e000045a l       .text  00000000 
e000045c l       .text  00000000 
e000045c l       .text  00000000 
e0000472 l       .text  00000000 
e0000476 l       .text  00000000 
e0000478 l       .text  00000000 
e000047a l       .text  00000000 
e000047a l       .text  00000000 
e000047c l       .text  00000000 
e0000480 l       .text  00000000 
e0000482 l       .text  00000000 
e000048e l       .text  00000000 
e000048e l       .text  00000000 
00000557 l       .debug_loc     00000000 
0000057d l       .debug_loc     00000000 
000005a5 l       .debug_loc     00000000 
000005cb l       .debug_loc     00000000 
00000628 l       .debug_loc     00000000 
00000650 l       .debug_loc     00000000 
00000676 l       .debug_loc     00000000 
000006ab l       .debug_loc     00000000 
000006eb l       .debug_loc     00000000 
00000706 l       .debug_loc     00000000 
00000727 l       .debug_loc     00000000 
00000742 l       .debug_loc     00000000 
0000075d l       .debug_loc     00000000 
00000778 l       .debug_loc     00000000 
00000793 l       .debug_loc     00000000 
000007bb l       .debug_loc     00000000 
000007ec l       .debug_loc     00000000 
00000821 l       .debug_loc     00000000 
00000849 l       .debug_loc     00000000 
00000865 l       .debug_loc     00000000 
00000880 l       .debug_loc     00000000 
0000089b l       .debug_loc     00000000 
000008b6 l       .debug_loc     00000000 
000008d1 l       .debug_loc     00000000 
000008ec l       .debug_loc     00000000 
00000907 l       .debug_loc     00000000 
00000922 l       .debug_loc     00000000 
0000097f l       .debug_loc     00000000 
000009a5 l       .debug_loc     00000000 
000009e5 l       .debug_loc     00000000 
00000a0d l       .debug_loc     00000000 
00000a33 l       .debug_loc     00000000 
00000a73 l       .debug_loc     00000000 
00000aa5 l       .debug_loc     00000000 
00000ad1 l       .debug_loc     00000000 
00000aec l       .debug_loc     00000000 
00000b07 l       .debug_loc     00000000 
00000b28 l       .debug_loc     00000000 
00000b43 l       .debug_loc     00000000 
00000b69 l       .debug_loc     00000000 
00000ba5 l       .debug_loc     00000000 
00000bcb l       .debug_loc     00000000 
00000c12 l       .debug_loc     00000000 
00000c59 l       .debug_loc     00000000 
00000c95 l       .debug_loc     00000000 
00000cbd l       .debug_loc     00000000 
00000d1a l       .debug_loc     00000000 
00000d44 l       .debug_loc     00000000 
00000d86 l       .debug_loc     00000000 
00000e0f l       .debug_loc     00000000 
00000e2a l       .debug_loc     00000000 
00000e50 l       .debug_loc     00000000 
00000e76 l       .debug_loc     00000000 
00000e93 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000b02 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000000f0 l       .debug_ranges  00000000 
00000b24 l       .debug_str     00000000 
0000085f l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00000a8d l       .debug_str     00000000 
00000b83 l       .debug_str     00000000 
00003eb6 l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
00000b38 l       .debug_str     00000000 
00000b51 l       .debug_str     00000000 
00000b31 l       .debug_str     00000000 
0000278f l       .debug_str     00000000 
00000b4d l       .debug_str     00000000 
000007c7 l       .debug_str     00000000 
00000b54 l       .debug_str     00000000 
0000218a l       .debug_str     00000000 
00000b45 l       .debug_str     00000000 
00000b3b l       .debug_str     00000000 
00000b58 l       .debug_str     00000000 
00003e7a l       .debug_str     00000000 
00000cc4 l       .debug_str     00000000 
00000b66 l       .debug_str     00000000 
00000b71 l       .debug_str     00000000 
00000be6 l       .debug_str     00000000 
00000c5d l       .debug_str     00000000 
00000c64 l       .debug_str     00000000 
00000c6c l       .debug_str     00000000 
0000417e l       .debug_str     00000000 
00000048 l       .debug_ranges  00000000 
00000060 l       .debug_ranges  00000000 
00000078 l       .debug_ranges  00000000 
00000090 l       .debug_ranges  00000000 
000000a8 l       .debug_ranges  00000000 
000000c0 l       .debug_ranges  00000000 
00000bee l       .debug_str     00000000 
000014fe l       .debug_str     00000000 
000007e1 l       .debug_str     00000000 
00000c7a l       .debug_str     00000000 
00000c7d l       .debug_str     00000000 
00000c70 l       .debug_str     00000000 
00000c85 l       .debug_str     00000000 
00000c87 l       .debug_str     00000000 
00004530 l       .debug_str     00000000 
000000d8 l       .debug_ranges  00000000 
00000b96 l       .debug_str     00000000 
00000bf6 l       .debug_str     00000000 
00000bfd l       .debug_str     00000000 
00000ba3 l       .debug_str     00000000 
00000bad l       .debug_str     00000000 
00000bba l       .debug_str     00000000 
00000bcc l       .debug_str     00000000 
00000018 l       .debug_ranges  00000000 
00000030 l       .debug_ranges  00000000 
00000bd1 l       .debug_str     00000000 
00000c21 l       .debug_str     00000000 
00000c29 l       .debug_str     00000000 
00002c94 l       .debug_str     00000000 
00004371 l       .debug_str     00000000 
00003eef l       .debug_str     00000000 
00000c2f l       .debug_str     00000000 
00000c36 l       .debug_str     00000000 
00000c41 l       .debug_str     00000000 
00000c48 l       .debug_str     00000000 
00000c4f l       .debug_str     00000000 
00000c56 l       .debug_str     00000000 
00000b75 l       .debug_str     00000000 
00001565 l       .debug_str     00000000 
00000b7c l       .debug_str     00000000 
0000451c l       .debug_str     00000000 
00000862 l       .debug_str     00000000 
00000c18 l       .debug_str     00000000 
00000c09 l       .debug_str     00000000 
00000064 l       .debug_frame   00000000 
e000048e l       .text  00000000 
00000000 l    df *ABS*  00000000 rom_print.c
e000048e l       .text  00000000 
e000048e l       .text  00000000 
e000048e l       .text  00000000 
e0000490 l       .text  00000000 
e00004a2 l       .text  00000000 
e00004a4 l       .text  00000000 
e00004b4 l       .text  00000000 
e00004b4 l       .text  00000000 
e00004c6 l       .text  00000000 
e00018bc l     O .rodata        00000010 rom_printf.kHexTable
e00004c6 l       .text  00000000 
e00004d2 l       .text  00000000 
e00004d2 l       .text  00000000 
e00004d6 l       .text  00000000 
e00004dc l       .text  00000000 
e00004de l       .text  00000000 
e00004e0 l       .text  00000000 
e00004e0 l       .text  00000000 
e00004e2 l       .text  00000000 
e00004e2 l       .text  00000000 
e00004e6 l       .text  00000000 
e00004ea l       .text  00000000 
e00004ea l       .text  00000000 
e00004f2 l       .text  00000000 
e00004f2 l       .text  00000000 
e00004f4 l       .text  00000000 
e00004f8 l       .text  00000000 
e00004fc l       .text  00000000 
e00004fc l       .text  00000000 
e0000502 l       .text  00000000 
e0000504 l       .text  00000000 
e0000504 l       .text  00000000 
e0000508 l       .text  00000000 
e0000508 l       .text  00000000 
e000050e l       .text  00000000 
e000050e l       .text  00000000 
e0000512 l       .text  00000000 
e0000518 l       .text  00000000 
e0000518 l       .text  00000000 
e000051a l       .text  00000000 
e000051e l       .text  00000000 
e0000522 l       .text  00000000 
e0000522 l       .text  00000000 
e0000524 l       .text  00000000 
e0000524 l       .text  00000000 
e0000528 l       .text  00000000 
e000052e l       .text  00000000 
e0000530 l       .text  00000000 
e0000530 l       .text  00000000 
e0000532 l       .text  00000000 
e0000532 l       .text  00000000 
e0000534 l       .text  00000000 
e0000534 l       .text  00000000 
e0000536 l       .text  00000000 
e0000536 l       .text  00000000 
e0000538 l       .text  00000000 
e000053e l       .text  00000000 
e000053e l       .text  00000000 
e0000556 l       .text  00000000 
e0000556 l       .text  00000000 
00000eb4 l       .debug_loc     00000000 
00000f00 l       .debug_loc     00000000 
00000f40 l       .debug_loc     00000000 
00000f53 l       .debug_loc     00000000 
00000f66 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000c8b l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000943 l       .debug_str     00000000 
00000cb5 l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000180 l       .debug_ranges  00000000 
00000b71 l       .debug_str     00000000 
000008b9 l       .debug_str     00000000 
000014fe l       .debug_str     00000000 
00000198 l       .debug_ranges  00000000 
00000ccc l       .debug_str     00000000 
0000085f l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
000006a6 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
0000029b l       .debug_str     00000000 
000002a9 l       .debug_str     00000000 
000002ca l       .debug_str     00000000 
000002e0 l       .debug_str     00000000 
000002fc l       .debug_str     00000000 
00000311 l       .debug_str     00000000 
0000032d l       .debug_str     00000000 
00000349 l       .debug_str     00000000 
0000035d l       .debug_str     00000000 
00000371 l       .debug_str     00000000 
00000386 l       .debug_str     00000000 
0000039f l       .debug_str     00000000 
000003b3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
000003d7 l       .debug_str     00000000 
000003ea l       .debug_str     00000000 
00000404 l       .debug_str     00000000 
0000041b l       .debug_str     00000000 
00000435 l       .debug_str     00000000 
00000451 l       .debug_str     00000000 
0000046d l       .debug_str     00000000 
00000484 l       .debug_str     00000000 
0000049a l       .debug_str     00000000 
000004b2 l       .debug_str     00000000 
000004ca l       .debug_str     00000000 
000004e3 l       .debug_str     00000000 
000004fc l       .debug_str     00000000 
00000515 l       .debug_str     00000000 
0000052e l       .debug_str     00000000 
0000054d l       .debug_str     00000000 
0000056b l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
0000059e l       .debug_str     00000000 
000005ba l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000005f4 l       .debug_str     00000000 
00000610 l       .debug_str     00000000 
0000062c l       .debug_str     00000000 
00000643 l       .debug_str     00000000 
0000065c l       .debug_str     00000000 
00000672 l       .debug_str     00000000 
00000691 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00000cbf l       .debug_str     00000000 
00000856 l       .debug_str     00000000 
0000094e l       .debug_str     00000000 
00000b45 l       .debug_str     00000000 
00000b3b l       .debug_str     00000000 
00000a8d l       .debug_str     00000000 
00000174 l       .debug_frame   00000000 
e0000556 l       .text  00000000 
00000000 l    df *ABS*  00000000 pinmux.c
e0000556 l       .text  00000000 
e0000556 l       .text  00000000 
e0000556 l       .text  00000000 
e0000558 l       .text  00000000 
e0000558 l       .text  00000000 
e000055a l       .text  00000000 
e0000560 l       .text  00000000 
e0000560 l       .text  00000000 
e0000562 l       .text  00000000 
e0000562 l       .text  00000000 
e0000566 l       .text  00000000 
e0000566 l       .text  00000000 
e000056a l       .text  00000000 
e000056a l       .text  00000000 
e000057a l       .text  00000000 
e000057a l       .text  00000000 
e000057c l       .text  00000000 
e000057c l       .text  00000000 
e0000580 l       .text  00000000 
e0000580 l       .text  00000000 
e0000584 l       .text  00000000 
e0000584 l       .text  00000000 
e000058a l       .text  00000000 
e000058a l       .text  00000000 
e0000590 l       .text  00000000 
e0000590 l       .text  00000000 
e000059a l       .text  00000000 
e000059a l       .text  00000000 
e000059c l       .text  00000000 
e000059c l       .text  00000000 
e00005a2 l       .text  00000000 
e00005a2 l       .text  00000000 
e00005aa l       .text  00000000 
e00005aa l       .text  00000000 
e00005ae l       .text  00000000 
e00005ae l       .text  00000000 
e00005b4 l       .text  00000000 
e00005b4 l       .text  00000000 
00000f97 l       .debug_loc     00000000 
00000fb5 l       .debug_loc     00000000 
00000fc8 l       .debug_loc     00000000 
00000fe2 l       .debug_loc     00000000 
00000ffc l       .debug_loc     00000000 
00001016 l       .debug_loc     00000000 
00001031 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000cd2 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000d01 l       .debug_str     00000000 
000021b3 l       .debug_str     00000000 
000021a6 l       .debug_str     00000000 
00000d10 l       .debug_str     00000000 
00001c68 l       .debug_str     00000000 
00000b54 l       .debug_str     00000000 
0000169f l       .debug_str     00000000 
0000167d l       .debug_str     00000000 
00000d17 l       .debug_str     00000000 
00000d3f l       .debug_str     00000000 
00000d67 l       .debug_str     00000000 
00000d8f l       .debug_str     00000000 
00000db7 l       .debug_str     00000000 
00000ddf l       .debug_str     00000000 
00000e07 l       .debug_str     00000000 
00000e2f l       .debug_str     00000000 
00000e57 l       .debug_str     00000000 
00000e7f l       .debug_str     00000000 
00000ea7 l       .debug_str     00000000 
00000ed0 l       .debug_str     00000000 
00000ef9 l       .debug_str     00000000 
00000f22 l       .debug_str     00000000 
00000f4b l       .debug_str     00000000 
00000f74 l       .debug_str     00000000 
00000f9d l       .debug_str     00000000 
00000fc6 l       .debug_str     00000000 
00000fef l       .debug_str     00000000 
00001018 l       .debug_str     00000000 
00001041 l       .debug_str     00000000 
0000106a l       .debug_str     00000000 
00001093 l       .debug_str     00000000 
000010bc l       .debug_str     00000000 
000010e5 l       .debug_str     00000000 
0000110e l       .debug_str     00000000 
00001137 l       .debug_str     00000000 
00001160 l       .debug_str     00000000 
00001189 l       .debug_str     00000000 
000011b2 l       .debug_str     00000000 
000011db l       .debug_str     00000000 
00001204 l       .debug_str     00000000 
0000122d l       .debug_str     00000000 
00001253 l       .debug_str     00000000 
00001279 l       .debug_str     00000000 
0000129f l       .debug_str     00000000 
000012c5 l       .debug_str     00000000 
000012eb l       .debug_str     00000000 
00001311 l       .debug_str     00000000 
0000133b l       .debug_str     00000000 
00001365 l       .debug_str     00000000 
0000138f l       .debug_str     00000000 
000013b9 l       .debug_str     00000000 
000013df l       .debug_str     00000000 
00001405 l       .debug_str     00000000 
0000142b l       .debug_str     00000000 
00001451 l       .debug_str     00000000 
0000147f l       .debug_str     00000000 
000014aa l       .debug_str     00000000 
000014d5 l       .debug_str     00000000 
00001500 l       .debug_str     00000000 
00001535 l       .debug_str     00000000 
00001567 l       .debug_str     00000000 
00001599 l       .debug_str     00000000 
000015cb l       .debug_str     00000000 
000015fd l       .debug_str     00000000 
00001630 l       .debug_str     00000000 
0000165a l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00001c6e l       .debug_str     00000000 
00001c54 l       .debug_str     00000000 
000016c3 l       .debug_str     00000000 
000016e7 l       .debug_str     00000000 
0000170a l       .debug_str     00000000 
00001726 l       .debug_str     00000000 
00001742 l       .debug_str     00000000 
0000175e l       .debug_str     00000000 
0000177a l       .debug_str     00000000 
00001796 l       .debug_str     00000000 
000017b2 l       .debug_str     00000000 
000017ce l       .debug_str     00000000 
000017ea l       .debug_str     00000000 
00001806 l       .debug_str     00000000 
00001822 l       .debug_str     00000000 
0000183e l       .debug_str     00000000 
0000185a l       .debug_str     00000000 
00001876 l       .debug_str     00000000 
00001892 l       .debug_str     00000000 
000018ae l       .debug_str     00000000 
000018ca l       .debug_str     00000000 
000018e6 l       .debug_str     00000000 
00001902 l       .debug_str     00000000 
0000191e l       .debug_str     00000000 
0000193b l       .debug_str     00000000 
00001958 l       .debug_str     00000000 
00001975 l       .debug_str     00000000 
00001991 l       .debug_str     00000000 
000019ad l       .debug_str     00000000 
000019c9 l       .debug_str     00000000 
000019e5 l       .debug_str     00000000 
00001a01 l       .debug_str     00000000 
00001a1d l       .debug_str     00000000 
00001a39 l       .debug_str     00000000 
00001a55 l       .debug_str     00000000 
00001a71 l       .debug_str     00000000 
00001a8d l       .debug_str     00000000 
00001aaa l       .debug_str     00000000 
00001ac7 l       .debug_str     00000000 
00001ae4 l       .debug_str     00000000 
00001b00 l       .debug_str     00000000 
00001b1c l       .debug_str     00000000 
00001b38 l       .debug_str     00000000 
00001b54 l       .debug_str     00000000 
00001b70 l       .debug_str     00000000 
00001b8c l       .debug_str     00000000 
00001ba8 l       .debug_str     00000000 
00001bc4 l       .debug_str     00000000 
00001be1 l       .debug_str     00000000 
00001bfe l       .debug_str     00000000 
00001c1b l       .debug_str     00000000 
00001c38 l       .debug_str     00000000 
0000218c l       .debug_str     00000000 
00002174 l       .debug_str     00000000 
00001c8a l       .debug_str     00000000 
00001ca4 l       .debug_str     00000000 
00001cbe l       .debug_str     00000000 
00001cd8 l       .debug_str     00000000 
00001cf2 l       .debug_str     00000000 
00001d0c l       .debug_str     00000000 
00001d26 l       .debug_str     00000000 
00001d40 l       .debug_str     00000000 
00001d5a l       .debug_str     00000000 
00001d74 l       .debug_str     00000000 
00001d8e l       .debug_str     00000000 
00001da8 l       .debug_str     00000000 
00001dc2 l       .debug_str     00000000 
00001ddc l       .debug_str     00000000 
00001df6 l       .debug_str     00000000 
00001e10 l       .debug_str     00000000 
00001e2a l       .debug_str     00000000 
00001e44 l       .debug_str     00000000 
00001e5e l       .debug_str     00000000 
00001e78 l       .debug_str     00000000 
00001e93 l       .debug_str     00000000 
00001eae l       .debug_str     00000000 
00001ec9 l       .debug_str     00000000 
00001ee3 l       .debug_str     00000000 
00001efd l       .debug_str     00000000 
00001f17 l       .debug_str     00000000 
00001f31 l       .debug_str     00000000 
00001f4b l       .debug_str     00000000 
00001f65 l       .debug_str     00000000 
00001f7f l       .debug_str     00000000 
00001f99 l       .debug_str     00000000 
00001fb3 l       .debug_str     00000000 
00001fcd l       .debug_str     00000000 
00001fe8 l       .debug_str     00000000 
00002003 l       .debug_str     00000000 
0000201e l       .debug_str     00000000 
00002038 l       .debug_str     00000000 
00002052 l       .debug_str     00000000 
0000206c l       .debug_str     00000000 
00002086 l       .debug_str     00000000 
000020a0 l       .debug_str     00000000 
000020ba l       .debug_str     00000000 
000020d4 l       .debug_str     00000000 
000020ee l       .debug_str     00000000 
00002109 l       .debug_str     00000000 
00002124 l       .debug_str     00000000 
0000213f l       .debug_str     00000000 
0000215a l       .debug_str     00000000 
000021c2 l       .debug_str     00000000 
000021d1 l       .debug_str     00000000 
000021e0 l       .debug_str     00000000 
000021ec l       .debug_str     00000000 
0000335e l       .debug_str     00000000 
00003350 l       .debug_str     00000000 
000021f9 l       .debug_str     00000000 
0000332c l       .debug_str     00000000 
00002793 l       .debug_str     00000000 
00002777 l       .debug_str     00000000 
000021fd l       .debug_str     00000000 
0000221a l       .debug_str     00000000 
00002237 l       .debug_str     00000000 
00002254 l       .debug_str     00000000 
00002271 l       .debug_str     00000000 
0000228e l       .debug_str     00000000 
000022ab l       .debug_str     00000000 
000022c8 l       .debug_str     00000000 
000022e5 l       .debug_str     00000000 
00002302 l       .debug_str     00000000 
0000231f l       .debug_str     00000000 
0000233c l       .debug_str     00000000 
00002359 l       .debug_str     00000000 
00002376 l       .debug_str     00000000 
00002393 l       .debug_str     00000000 
000023b0 l       .debug_str     00000000 
000023cd l       .debug_str     00000000 
000023ea l       .debug_str     00000000 
00002407 l       .debug_str     00000000 
00002424 l       .debug_str     00000000 
00002442 l       .debug_str     00000000 
00002460 l       .debug_str     00000000 
0000247e l       .debug_str     00000000 
0000249b l       .debug_str     00000000 
000024b8 l       .debug_str     00000000 
000024d5 l       .debug_str     00000000 
000024f2 l       .debug_str     00000000 
0000250f l       .debug_str     00000000 
0000252c l       .debug_str     00000000 
00002549 l       .debug_str     00000000 
00002566 l       .debug_str     00000000 
00002583 l       .debug_str     00000000 
000025a0 l       .debug_str     00000000 
000025be l       .debug_str     00000000 
000025dc l       .debug_str     00000000 
000025fa l       .debug_str     00000000 
00002617 l       .debug_str     00000000 
00002634 l       .debug_str     00000000 
00002651 l       .debug_str     00000000 
0000266e l       .debug_str     00000000 
0000268b l       .debug_str     00000000 
000026a8 l       .debug_str     00000000 
000026c5 l       .debug_str     00000000 
000026e2 l       .debug_str     00000000 
00002700 l       .debug_str     00000000 
0000271e l       .debug_str     00000000 
0000273c l       .debug_str     00000000 
0000275a l       .debug_str     00000000 
00003333 l       .debug_str     00000000 
00003318 l       .debug_str     00000000 
000027b1 l       .debug_str     00000000 
000027d6 l       .debug_str     00000000 
000027fa l       .debug_str     00000000 
00002820 l       .debug_str     00000000 
00002842 l       .debug_str     00000000 
00002864 l       .debug_str     00000000 
00002886 l       .debug_str     00000000 
000028a8 l       .debug_str     00000000 
000028ca l       .debug_str     00000000 
000028ec l       .debug_str     00000000 
0000290e l       .debug_str     00000000 
00002930 l       .debug_str     00000000 
00002952 l       .debug_str     00000000 
00002974 l       .debug_str     00000000 
00002997 l       .debug_str     00000000 
000029ba l       .debug_str     00000000 
000029dd l       .debug_str     00000000 
00002a00 l       .debug_str     00000000 
00002a23 l       .debug_str     00000000 
00002a46 l       .debug_str     00000000 
00002a69 l       .debug_str     00000000 
00002a8c l       .debug_str     00000000 
00002aaf l       .debug_str     00000000 
00002ad2 l       .debug_str     00000000 
00002af5 l       .debug_str     00000000 
00002b18 l       .debug_str     00000000 
00002b3b l       .debug_str     00000000 
00002b5e l       .debug_str     00000000 
00002b81 l       .debug_str     00000000 
00002ba4 l       .debug_str     00000000 
00002bc7 l       .debug_str     00000000 
00002bea l       .debug_str     00000000 
00002c0d l       .debug_str     00000000 
00002c30 l       .debug_str     00000000 
00002c53 l       .debug_str     00000000 
00002c76 l       .debug_str     00000000 
00002c96 l       .debug_str     00000000 
00002cb6 l       .debug_str     00000000 
00002cd6 l       .debug_str     00000000 
00002cf6 l       .debug_str     00000000 
00002d16 l       .debug_str     00000000 
00002d36 l       .debug_str     00000000 
00002d5a l       .debug_str     00000000 
00002d7e l       .debug_str     00000000 
00002da2 l       .debug_str     00000000 
00002dc6 l       .debug_str     00000000 
00002de6 l       .debug_str     00000000 
00002e06 l       .debug_str     00000000 
00002e26 l       .debug_str     00000000 
00002e46 l       .debug_str     00000000 
00002e6c l       .debug_str     00000000 
00002e92 l       .debug_str     00000000 
00002eb8 l       .debug_str     00000000 
00002ede l       .debug_str     00000000 
00002f02 l       .debug_str     00000000 
00002f26 l       .debug_str     00000000 
00002f4b l       .debug_str     00000000 
00002f7a l       .debug_str     00000000 
00002fa9 l       .debug_str     00000000 
00002fd8 l       .debug_str     00000000 
00003007 l       .debug_str     00000000 
00003036 l       .debug_str     00000000 
00003065 l       .debug_str     00000000 
00003094 l       .debug_str     00000000 
000030c3 l       .debug_str     00000000 
000030f2 l       .debug_str     00000000 
00003115 l       .debug_str     00000000 
00003138 l       .debug_str     00000000 
0000315b l       .debug_str     00000000 
0000317e l       .debug_str     00000000 
000031a1 l       .debug_str     00000000 
000031c4 l       .debug_str     00000000 
000031e9 l       .debug_str     00000000 
00003219 l       .debug_str     00000000 
00003246 l       .debug_str     00000000 
00003273 l       .debug_str     00000000 
000032a0 l       .debug_str     00000000 
000032cd l       .debug_str     00000000 
000032fb l       .debug_str     00000000 
00003393 l       .debug_str     00000000 
0000336e l       .debug_str     00000000 
00003380 l       .debug_str     00000000 
000033a1 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
000033a7 l       .debug_str     00000000 
000033b1 l       .debug_str     00000000 
000033b5 l       .debug_str     00000000 
00003dbc l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
000033c6 l       .debug_str     00000000 
00003b0f l       .debug_str     00000000 
000033d7 l       .debug_str     00000000 
000033e1 l       .debug_str     00000000 
000033e7 l       .debug_str     00000000 
000033f1 l       .debug_str     00000000 
0000092d l       .debug_str     00000000 
00003403 l       .debug_str     00000000 
000033f8 l       .debug_str     00000000 
000001b0 l       .debug_frame   00000000 
e00005b4 l       .text  00000000 
00000000 l    df *ABS*  00000000 uart.c
e00005b4 l       .text  00000000 
e00005b4 l       .text  00000000 
e00005b4 l       .text  00000000 
e00005b8 l       .text  00000000 
e00005b8 l       .text  00000000 
e00005be l       .text  00000000 
e00005be l       .text  00000000 
e00005c0 l       .text  00000000 
e00005c0 l       .text  00000000 
e00005c4 l       .text  00000000 
e00005c4 l       .text  00000000 
e00005c8 l       .text  00000000 
e00005c8 l       .text  00000000 
e00005ce l       .text  00000000 
e00005ce l       .text  00000000 
e00005d0 l       .text  00000000 
e00005d0 l       .text  00000000 
e00005d2 l       .text  00000000 
e00005d2 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005d8 l       .text  00000000 
e00005d8 l       .text  00000000 
e00005dc l       .text  00000000 
e00005dc l       .text  00000000 
e00005e0 l       .text  00000000 
e00005e0 l       .text  00000000 
e00005e2 l       .text  00000000 
e00005e2 l       .text  00000000 
e00005e2 l       .text  00000000 
e00005e2 l       .text  00000000 
e00005e2 l       .text  00000000 
e00005e6 l       .text  00000000 
e00005e6 l       .text  00000000 
e00005e8 l       .text  00000000 
e00005e8 l       .text  00000000 
e00005ea l       .text  00000000 
e00005ea l       .text  00000000 
e00005ec l       .text  00000000 
e00005ec l       .text  00000000 
e00005f4 l       .text  00000000 
e00005f4 l       .text  00000000 
e00005f6 l       .text  00000000 
e00005f6 l       .text  00000000 
e00005f8 l       .text  00000000 
e00005f8 l       .text  00000000 
e00005fa l       .text  00000000 
e00005fa l       .text  00000000 
e00005fc l       .text  00000000 
e00005fe l       .text  00000000 
e00005fe l       .text  00000000 
0000104c l       .debug_loc     00000000 
00001067 l       .debug_loc     00000000 
00001083 l       .debug_loc     00000000 
000010aa l       .debug_loc     00000000 
000010cf l       .debug_loc     00000000 
000010f6 l       .debug_loc     00000000 
00001118 l       .debug_loc     00000000 
00001133 l       .debug_loc     00000000 
0000114e l       .debug_loc     00000000 
00001169 l       .debug_loc     00000000 
00001184 l       .debug_loc     00000000 
0000119f l       .debug_loc     00000000 
000011d0 l       .debug_loc     00000000 
000011f6 l       .debug_loc     00000000 
00001211 l       .debug_loc     00000000 
0000122c l       .debug_loc     00000000 
00001247 l       .debug_loc     00000000 
00001262 l       .debug_loc     00000000 
0000127d l       .debug_loc     00000000 
000012a3 l       .debug_loc     00000000 
000012c9 l       .debug_loc     00000000 
000012e4 l       .debug_loc     00000000 
000012ff l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003410 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000001b0 l       .debug_ranges  00000000 
000006a6 l       .debug_str     00000000 
00000292 l       .debug_str     00000000 
0000029b l       .debug_str     00000000 
000002a9 l       .debug_str     00000000 
000002ca l       .debug_str     00000000 
000002e0 l       .debug_str     00000000 
000002fc l       .debug_str     00000000 
00000311 l       .debug_str     00000000 
0000032d l       .debug_str     00000000 
00000349 l       .debug_str     00000000 
0000035d l       .debug_str     00000000 
00000371 l       .debug_str     00000000 
00000386 l       .debug_str     00000000 
0000039f l       .debug_str     00000000 
000003b3 l       .debug_str     00000000 
000003c7 l       .debug_str     00000000 
000003d7 l       .debug_str     00000000 
000003ea l       .debug_str     00000000 
00000404 l       .debug_str     00000000 
0000041b l       .debug_str     00000000 
00000435 l       .debug_str     00000000 
00000451 l       .debug_str     00000000 
0000046d l       .debug_str     00000000 
00000484 l       .debug_str     00000000 
0000049a l       .debug_str     00000000 
000004b2 l       .debug_str     00000000 
000004ca l       .debug_str     00000000 
000004e3 l       .debug_str     00000000 
000004fc l       .debug_str     00000000 
00000515 l       .debug_str     00000000 
0000052e l       .debug_str     00000000 
0000054d l       .debug_str     00000000 
0000056b l       .debug_str     00000000 
00000585 l       .debug_str     00000000 
0000059e l       .debug_str     00000000 
000005ba l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000005f4 l       .debug_str     00000000 
00000610 l       .debug_str     00000000 
0000062c l       .debug_str     00000000 
00000643 l       .debug_str     00000000 
0000065c l       .debug_str     00000000 
00000672 l       .debug_str     00000000 
00000691 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00000864 l       .debug_str     00000000 
00000856 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
000033b5 l       .debug_str     00000000 
00003dbc l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
0000343d l       .debug_str     00000000 
00003b0f l       .debug_str     00000000 
00003448 l       .debug_str     00000000 
00000916 l       .debug_str     00000000 
00000919 l       .debug_str     00000000 
00003475 l       .debug_str     00000000 
00003464 l       .debug_str     00000000 
0000345f l       .debug_str     00000000 
0000370b l       .debug_str     00000000 
00003488 l       .debug_str     00000000 
00003707 l       .debug_str     00000000 
0000349d l       .debug_str     00000000 
00000882 l       .debug_str     00000000 
00000939 l       .debug_str     00000000 
0000350d l       .debug_str     00000000 
000034b4 l       .debug_str     00000000 
000034c4 l       .debug_str     00000000 
000034d1 l       .debug_str     00000000 
000034e5 l       .debug_str     00000000 
00000cbf l       .debug_str     00000000 
00003a69 l       .debug_str     00000000 
000034f2 l       .debug_str     00000000 
00000afd l       .debug_str     00000000 
0000417e l       .debug_str     00000000 
000034fd l       .debug_str     00000000 
000040b8 l       .debug_str     00000000 
00003503 l       .debug_str     00000000 
000040c3 l       .debug_str     00000000 
0000094e l       .debug_str     00000000 
0000085f l       .debug_str     00000000 
000001dc l       .debug_frame   00000000 
e00005e2 l       .text  00000000 
e00005fe l       .text  00000000 
00000000 l    df *ABS*  00000000 otp.c
e00005fe l       .text  00000000 
e00005fe l       .text  00000000 
e00005fe l       .text  00000000 
e0000602 l       .text  00000000 
e0000604 l       .text  00000000 
e0000604 l       .text  00000000 
e0000606 l       .text  00000000 
e0000606 l       .text  00000000 
e0000606 l       .text  00000000 
0000131a l       .debug_loc     00000000 
00001335 l       .debug_loc     00000000 
00001350 l       .debug_loc     00000000 
0000136e l       .debug_loc     00000000 
000013aa l       .debug_loc     00000000 
000013c5 l       .debug_loc     00000000 
000013eb l       .debug_loc     00000000 
00001411 l       .debug_loc     00000000 
0000142f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000351f l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000001d8 l       .debug_ranges  00000000 
000033a1 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
000033f8 l       .debug_str     00000000 
00003b38 l       .debug_str     00000000 
0000354b l       .debug_str     00000000 
0000356c l       .debug_str     00000000 
0000359c l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
00003577 l       .debug_str     00000000 
00000afd l       .debug_str     00000000 
000035a7 l       .debug_str     00000000 
000014fe l       .debug_str     00000000 
00003580 l       .debug_str     00000000 
0000355b l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000a91 l       .debug_str     00000000 
00000a7a l       .debug_str     00000000 
000040b8 l       .debug_str     00000000 
00000230 l       .debug_frame   00000000 
e0000606 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_spi_host_autogen.c
e0000606 l       .text  00000000 
e0000606 l       .text  00000000 
e0000606 l       .text  00000000 
e0000606 l       .text  00000000 
e0000608 l       .text  00000000 
e000060a l       .text  00000000 
e000060e l       .text  00000000 
e0000610 l       .text  00000000 
e0000612 l       .text  00000000 
e0000614 l       .text  00000000 
e0000614 l       .text  00000000 
0000144b l       .debug_loc     00000000 
00001466 l       .debug_loc     00000000 
00001481 l       .debug_loc     00000000 
0000149c l       .debug_loc     00000000 
000014b8 l       .debug_loc     00000000 
000014d4 l       .debug_loc     00000000 
000014ef l       .debug_loc     00000000 
0000150a l       .debug_loc     00000000 
00001525 l       .debug_loc     00000000 
00001540 l       .debug_loc     00000000 
0000155b l       .debug_loc     00000000 
00001576 l       .debug_loc     00000000 
00001591 l       .debug_loc     00000000 
000015ac l       .debug_loc     00000000 
000015d2 l       .debug_loc     00000000 
000015ed l       .debug_loc     00000000 
00001608 l       .debug_loc     00000000 
00001626 l       .debug_loc     00000000 
0000164d l       .debug_loc     00000000 
00001668 l       .debug_loc     00000000 
00001683 l       .debug_loc     00000000 
0000169e l       .debug_loc     00000000 
000016bc l       .debug_loc     00000000 
000016e3 l       .debug_loc     00000000 
000016fe l       .debug_loc     00000000 
00001719 l       .debug_loc     00000000 
00001734 l       .debug_loc     00000000 
0000174f l       .debug_loc     00000000 
00001775 l       .debug_loc     00000000 
00001790 l       .debug_loc     00000000 
000017ab l       .debug_loc     00000000 
000017d1 l       .debug_loc     00000000 
000017f1 l       .debug_loc     00000000 
00001817 l       .debug_loc     00000000 
00001835 l       .debug_loc     00000000 
00001850 l       .debug_loc     00000000 
0000186b l       .debug_loc     00000000 
0000188b l       .debug_loc     00000000 
000018b1 l       .debug_loc     00000000 
000018d7 l       .debug_loc     00000000 
000018f2 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000035b1 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000200 l       .debug_ranges  00000000 
000035e2 l       .debug_str     00000000 
0000361c l       .debug_str     00000000 
0000360f l       .debug_str     00000000 
000035ec l       .debug_str     00000000 
000035fd l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
000001aa l       .debug_str     00000000 
000001b4 l       .debug_str     00000000 
000001bf l       .debug_str     00000000 
000001ca l       .debug_str     00000000 
000001da l       .debug_str     00000000 
000001e9 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00003646 l       .debug_str     00000000 
0000362b l       .debug_str     00000000 
00003684 l       .debug_str     00000000 
00003659 l       .debug_str     00000000 
0000366d l       .debug_str     00000000 
000036ba l       .debug_str     00000000 
00003695 l       .debug_str     00000000 
000036a8 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
0000095a l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
000036c5 l       .debug_str     00000000 
00000c80 l       .debug_str     00000000 
00003d2d l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
00000179 l       .debug_str     00000000 
0000016d l       .debug_str     00000000 
000036d9 l       .debug_str     00000000 
00000a8d l       .debug_str     00000000 
0000372e l       .debug_str     00000000 
00003653 l       .debug_str     00000000 
00003876 l       .debug_str     00000000 
00003880 l       .debug_str     00000000 
00003747 l       .debug_str     00000000 
00003691 l       .debug_str     00000000 
0000468f l       .debug_str     00000000 
000036e3 l       .debug_str     00000000 
00003761 l       .debug_str     00000000 
0000388f l       .debug_str     00000000 
000036f6 l       .debug_str     00000000 
00003724 l       .debug_str     00000000 
00000882 l       .debug_str     00000000 
00003711 l       .debug_str     00000000 
0000349d l       .debug_str     00000000 
000034d1 l       .debug_str     00000000 
00000916 l       .debug_str     00000000 
00003707 l       .debug_str     00000000 
0000377c l       .debug_str     00000000 
0000378d l       .debug_str     00000000 
000038ba l       .debug_str     00000000 
0000370b l       .debug_str     00000000 
00003798 l       .debug_str     00000000 
00003448 l       .debug_str     00000000 
00000919 l       .debug_str     00000000 
00003475 l       .debug_str     00000000 
00003464 l       .debug_str     00000000 
0000345f l       .debug_str     00000000 
00003488 l       .debug_str     00000000 
000037b9 l       .debug_str     00000000 
000037d6 l       .debug_str     00000000 
000033b1 l       .debug_str     00000000 
000038c9 l       .debug_str     00000000 
000037ed l       .debug_str     00000000 
00003776 l       .debug_str     00000000 
000038e4 l       .debug_str     00000000 
000038f4 l       .debug_str     00000000 
0000380a l       .debug_str     00000000 
000038ff l       .debug_str     00000000 
00003827 l       .debug_str     00000000 
00003844 l       .debug_str     00000000 
00000a29 l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
00000187 l       .debug_str     00000000 
00003861 l       .debug_str     00000000 
00003898 l       .debug_str     00000000 
000038d7 l       .debug_str     00000000 
0000390a l       .debug_str     00000000 
0000029c l       .debug_frame   00000000 
e0000614 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_spi_host.c
e0000614 l       .text  00000000 
e0000614 l       .text  00000000 
e0000614 l       .text  00000000 
e0000616 l       .text  00000000 
e0000618 l       .text  00000000 
e0000620 l       .text  00000000 
e0000624 l       .text  00000000 
e0000624 l       .text  00000000 
e0000628 l       .text  00000000 
e0000628 l       .text  00000000 
e000062c l       .text  00000000 
e0000632 l       .text  00000000 
e0000634 l       .text  00000000 
e0000634 l       .text  00000000 
e000063e l       .text  00000000 
e0000640 l       .text  00000000 
e0000640 l       .text  00000000 
e0000642 l       .text  00000000 
e0000642 l       .text  00000000 
e0000646 l       .text  00000000 
e0000646 l       .text  00000000 
e000064a l       .text  00000000 
e000064a l       .text  00000000 
e000064e l       .text  00000000 
e000064e l       .text  00000000 
e0000650 l       .text  00000000 
e0000650 l       .text  00000000 
e0000656 l       .text  00000000 
e0000656 l       .text  00000000 
e000065a l       .text  00000000 
e000065a l       .text  00000000 
e000065e l       .text  00000000 
e0000666 l       .text  00000000 
e0000666 l       .text  00000000 
e000066a l       .text  00000000 
e000066a l       .text  00000000 
e000066c l       .text  00000000 
e000066c l       .text  00000000 
e0000672 l       .text  00000000 
e0000678 l       .text  00000000 
e000067c l       .text  00000000 
e0000684 l       .text  00000000 
e0000684 l       .text  00000000 
e0000686 l       .text  00000000 
e0000686 l       .text  00000000 
e000068a l       .text  00000000 
e000068a l       .text  00000000 
e000068e l       .text  00000000 
e000068e l       .text  00000000 
e0000690 l       .text  00000000 
e0000690 l       .text  00000000 
e0000692 l       .text  00000000 
e0000692 l       .text  00000000 
e0000698 l       .text  00000000 
e0000698 l       .text  00000000 
e000069a l       .text  00000000 
e000069e l       .text  00000000 
e00006a2 l       .text  00000000 
e00006a4 l       .text  00000000 
e00006b0 l       .text  00000000 
e00006b0 l       .text  00000000 
e00006b2 l       .text  00000000 
e00006b2 l       .text  00000000 
e00006b6 l       .text  00000000 
e00006b6 l       .text  00000000 
e00006ba l       .text  00000000 
e00006ba l       .text  00000000 
e00006be l       .text  00000000 
e00006be l       .text  00000000 
e00006c2 l       .text  00000000 
e00006c2 l       .text  00000000 
e00006c8 l       .text  00000000 
e00006ca l       .text  00000000 
e00006cc l       .text  00000000 
e00006ce l       .text  00000000 
e00006d0 l       .text  00000000 
e00006d2 l       .text  00000000 
e00006d2 l       .text  00000000 
e00006d2 l       .text  00000000 
e00006d2 l       .text  00000000 
e00006d2 l       .text  00000000 
e00006d4 l       .text  00000000 
e00006e2 l       .text  00000000 
e00006e4 l       .text  00000000 
e00006e6 l       .text  00000000 
e00006ea l       .text  00000000 
e00006ec l       .text  00000000 
e00006ee l       .text  00000000 
e00006ee l       .text  00000000 
e00006f6 l       .text  00000000 
e00006fc l       .text  00000000 
e00006fc l       .text  00000000 
e0000704 l       .text  00000000 
e0000714 l       .text  00000000 
e0000714 l       .text  00000000 
e0000718 l       .text  00000000 
e0000718 l       .text  00000000 
e000071c l       .text  00000000 
e0000726 l       .text  00000000 
e0000726 l       .text  00000000 
e0000728 l       .text  00000000 
e000072a l       .text  00000000 
e000072a l       .text  00000000 
e0000734 l       .text  00000000 
e0000738 l       .text  00000000 
e0000738 l       .text  00000000 
e000073a l       .text  00000000 
e000073a l       .text  00000000 
e000073c l       .text  00000000 
e000073c l       .text  00000000 
e000073e l       .text  00000000 
e000073e l       .text  00000000 
e0000740 l       .text  00000000 
e0000740 l       .text  00000000 
e00008c8 l     F .text  00000038 enqueue_word
e0000744 l       .text  00000000 
e0000744 l       .text  00000000 
e0000746 l       .text  00000000 
e0000746 l       .text  00000000 
e0000748 l       .text  00000000 
e000074a l       .text  00000000 
e000074a l       .text  00000000 
e000074e l       .text  00000000 
e000074e l       .text  00000000 
e0000754 l       .text  00000000 
e0000758 l       .text  00000000 
e0000758 l       .text  00000000 
e000075c l       .text  00000000 
e000075c l       .text  00000000 
e0000760 l       .text  00000000 
e0000760 l       .text  00000000 
e0000764 l       .text  00000000 
e0000766 l       .text  00000000 
e0000766 l       .text  00000000 
e000076c l       .text  00000000 
e000076c l       .text  00000000 
e0000770 l       .text  00000000 
e0000770 l       .text  00000000 
e0000774 l       .text  00000000 
e000077c l       .text  00000000 
e000077c l       .text  00000000 
e0000784 l       .text  00000000 
e0000784 l       .text  00000000 
e0000788 l       .text  00000000 
e000078e l       .text  00000000 
e0000792 l       .text  00000000 
e000079a l       .text  00000000 
e00007a0 l       .text  00000000 
e00007a4 l       .text  00000000 
e00007a4 l       .text  00000000 
e00007a6 l       .text  00000000 
e00007a6 l       .text  00000000 
e00007a8 l       .text  00000000 
e00007a8 l       .text  00000000 
e00007aa l       .text  00000000 
e00007aa l       .text  00000000 
e00007ac l       .text  00000000 
e00007ac l       .text  00000000 
e00007b0 l       .text  00000000 
e00007b0 l       .text  00000000 
e00007b2 l       .text  00000000 
e00007b2 l       .text  00000000 
e00007b4 l       .text  00000000 
e00007b4 l       .text  00000000 
e00007b6 l       .text  00000000 
e00007b6 l       .text  00000000 
e00007b8 l       .text  00000000 
e00007b8 l       .text  00000000 
e00007bc l       .text  00000000 
e00007bc l       .text  00000000 
e00007be l       .text  00000000 
e00007be l       .text  00000000 
e00007c4 l       .text  00000000 
e00007c6 l       .text  00000000 
e00007ca l       .text  00000000 
e00007ca l       .text  00000000 
e00007d0 l       .text  00000000 
e00007d4 l       .text  00000000 
e00007d6 l       .text  00000000 
e00007d6 l       .text  00000000 
e00007dc l       .text  00000000 
e00007e0 l       .text  00000000 
e00007e0 l       .text  00000000 
e00007e2 l       .text  00000000 
e00007e2 l       .text  00000000 
e00007e4 l       .text  00000000 
e00007e4 l       .text  00000000 
e00007e6 l       .text  00000000 
e00007e6 l       .text  00000000 
e00007e8 l       .text  00000000 
e00007e8 l       .text  00000000 
e00007ec l       .text  00000000 
e00007ec l       .text  00000000 
e00007ee l       .text  00000000 
e00007ee l       .text  00000000 
e00007f0 l       .text  00000000 
e00007f2 l       .text  00000000 
e00007f2 l       .text  00000000 
e00007f6 l       .text  00000000 
e00007f6 l       .text  00000000 
e00007fc l       .text  00000000 
e0000800 l       .text  00000000 
e0000800 l       .text  00000000 
e0000804 l       .text  00000000 
e0000804 l       .text  00000000 
e0000808 l       .text  00000000 
e0000808 l       .text  00000000 
e000080c l       .text  00000000 
e0000812 l       .text  00000000 
e0000814 l       .text  00000000 
e0000814 l       .text  00000000 
e0000816 l       .text  00000000 
e0000816 l       .text  00000000 
e0000818 l       .text  00000000 
e0000818 l       .text  00000000 
e0000820 l       .text  00000000 
e000082a l       .text  00000000 
e000082a l       .text  00000000 
e000082a l       .text  00000000 
e000082a l       .text  00000000 
e000082a l       .text  00000000 
e000082c l       .text  00000000 
e000082e l       .text  00000000 
e0000830 l       .text  00000000 
e0000832 l       .text  00000000 
e0000834 l       .text  00000000 
e0000836 l       .text  00000000 
e000083a l       .text  00000000 
e000083c l       .text  00000000 
e000083e l       .text  00000000 
e000083e l       .text  00000000 
e0000842 l       .text  00000000 
e0000844 l       .text  00000000 
e0000844 l       .text  00000000 
e000084a l       .text  00000000 
e000084a l       .text  00000000 
e000084e l       .text  00000000 
e000084e l       .text  00000000 
e0000850 l       .text  00000000 
e0000850 l       .text  00000000 
e0000852 l       .text  00000000 
e0000852 l       .text  00000000 
e0000854 l       .text  00000000 
e0000854 l       .text  00000000 
e0000858 l       .text  00000000 
e0000858 l       .text  00000000 
e000085a l       .text  00000000 
e000085a l       .text  00000000 
e000085c l       .text  00000000 
e000085c l       .text  00000000 
e000085e l       .text  00000000 
e000085e l       .text  00000000 
e0000862 l       .text  00000000 
e0000862 l       .text  00000000 
e0000866 l       .text  00000000 
e0000866 l       .text  00000000 
e0000868 l       .text  00000000 
e0000868 l       .text  00000000 
e000086a l       .text  00000000 
e000086e l       .text  00000000 
e000086e l       .text  00000000 
e0000872 l       .text  00000000 
e0000872 l       .text  00000000 
e0000876 l       .text  00000000 
e0000876 l       .text  00000000 
e000087c l       .text  00000000 
e000087c l       .text  00000000 
e000087e l       .text  00000000 
e000087e l       .text  00000000 
e0000882 l       .text  00000000 
e0000882 l       .text  00000000 
e0000884 l       .text  00000000 
e0000886 l       .text  00000000 
e0000886 l       .text  00000000 
e000088a l       .text  00000000 
e000088a l       .text  00000000 
e000088c l       .text  00000000 
e000088c l       .text  00000000 
e000088e l       .text  00000000 
e000088e l       .text  00000000 
e0000892 l       .text  00000000 
e0000892 l       .text  00000000 
e0000894 l       .text  00000000 
e0000894 l       .text  00000000 
e0000896 l       .text  00000000 
e0000896 l       .text  00000000 
e0000898 l       .text  00000000 
e0000898 l       .text  00000000 
e000089a l       .text  00000000 
e000089a l       .text  00000000 
e000089c l       .text  00000000 
e000089c l       .text  00000000 
e000089e l       .text  00000000 
e000089e l       .text  00000000 
e00008a0 l       .text  00000000 
e00008a0 l       .text  00000000 
e00008a6 l       .text  00000000 
e00008a6 l       .text  00000000 
e00008a8 l       .text  00000000 
e00008a8 l       .text  00000000 
e00008ac l       .text  00000000 
e00008ac l       .text  00000000 
e00008ac l       .text  00000000 
e00008ac l       .text  00000000 
e00008ac l       .text  00000000 
e00008ac l       .text  00000000 
e00008ae l       .text  00000000 
e00008b0 l       .text  00000000 
e00008b0 l       .text  00000000 
e00008b2 l       .text  00000000 
e00008b2 l       .text  00000000 
e00008b4 l       .text  00000000 
e00008ba l       .text  00000000 
e00008ba l       .text  00000000 
e00008bc l       .text  00000000 
e00008bc l       .text  00000000 
e00008be l       .text  00000000 
e00008be l       .text  00000000 
e00008c0 l       .text  00000000 
e00008c0 l       .text  00000000 
e00008c2 l       .text  00000000 
e00008c2 l       .text  00000000 
e00008c4 l       .text  00000000 
e00008c4 l       .text  00000000 
e00008c6 l       .text  00000000 
e00008c6 l       .text  00000000 
e00008c8 l       .text  00000000 
e00008c8 l       .text  00000000 
e00008c8 l       .text  00000000 
e00008c8 l       .text  00000000 
e00008c8 l       .text  00000000 
e00008c8 l       .text  00000000 
e00008ca l       .text  00000000 
e00008ce l       .text  00000000 
e00008d0 l       .text  00000000 
e00008d0 l       .text  00000000 
e00008d6 l       .text  00000000 
e00008d8 l       .text  00000000 
e00008de l       .text  00000000 
e00008de l       .text  00000000 
e00008e0 l       .text  00000000 
e00008e0 l       .text  00000000 
e00008e2 l       .text  00000000 
e00008e2 l       .text  00000000 
e00008e8 l       .text  00000000 
e00008ea l       .text  00000000 
e00008ea l       .text  00000000 
e00008ec l       .text  00000000 
e00008ec l       .text  00000000 
e00008f0 l       .text  00000000 
e00008f0 l       .text  00000000 
e00008f2 l       .text  00000000 
e00008f2 l       .text  00000000 
e00008f4 l       .text  00000000 
e00008f4 l       .text  00000000 
e00008f6 l       .text  00000000 
e00008f6 l       .text  00000000 
e00008f8 l       .text  00000000 
e00008f8 l       .text  00000000 
e00008fa l       .text  00000000 
e00008fe l       .text  00000000 
e0000900 l       .text  00000000 
e0000900 l       .text  00000000 
e0000900 l       .text  00000000 
e0000900 l       .text  00000000 
e0000900 l       .text  00000000 
e0000902 l       .text  00000000 
e000091c l       .text  00000000 
e000091e l       .text  00000000 
e000091e l       .text  00000000 
e0000920 l       .text  00000000 
e0000920 l       .text  00000000 
e0000922 l       .text  00000000 
e0000922 l       .text  00000000 
e0000926 l       .text  00000000 
e0000928 l       .text  00000000 
e000092a l       .text  00000000 
e0000940 l       .text  00000000 
e0000956 l       .text  00000000 
e0000958 l       .text  00000000 
e0000958 l       .text  00000000 
e000095c l       .text  00000000 
e000095c l       .text  00000000 
e000095e l       .text  00000000 
e000095e l       .text  00000000 
e0000962 l       .text  00000000 
e0000962 l       .text  00000000 
e000096a l       .text  00000000 
e000096e l       .text  00000000 
e000097c l       .text  00000000 
e000097e l       .text  00000000 
e000097e l       .text  00000000 
e0000980 l       .text  00000000 
e0000980 l       .text  00000000 
e0000984 l       .text  00000000 
e0000984 l       .text  00000000 
e0000988 l       .text  00000000 
e0000988 l       .text  00000000 
e000098c l       .text  00000000 
e000098c l       .text  00000000 
e0000992 l       .text  00000000 
e0000992 l       .text  00000000 
e0000996 l       .text  00000000 
e0000996 l       .text  00000000 
e000099a l       .text  00000000 
e000099a l       .text  00000000 
e000099e l       .text  00000000 
e00009a0 l       .text  00000000 
e00009a0 l       .text  00000000 
e00009a2 l       .text  00000000 
e00009a2 l       .text  00000000 
e00009a6 l       .text  00000000 
e00009a6 l       .text  00000000 
e00009aa l       .text  00000000 
e00009aa l       .text  00000000 
e00009ac l       .text  00000000 
e00009ac l       .text  00000000 
e00009be l       .text  00000000 
e00009be l       .text  00000000 
e00009c2 l       .text  00000000 
e00009c2 l       .text  00000000 
e00009ca l       .text  00000000 
e00009ce l       .text  00000000 
e00009ce l       .text  00000000 
e00009d4 l       .text  00000000 
e00009d6 l       .text  00000000 
e00009d8 l       .text  00000000 
e00009d8 l       .text  00000000 
e00009dc l       .text  00000000 
e00009dc l       .text  00000000 
e00009e0 l       .text  00000000 
e00009e2 l       .text  00000000 
e00009e4 l       .text  00000000 
e00009ec l       .text  00000000 
e00009ee l       .text  00000000 
e00009ee l       .text  00000000 
e00009f2 l       .text  00000000 
e00009f2 l       .text  00000000 
e00009f6 l       .text  00000000 
e00009f6 l       .text  00000000 
e00009fa l       .text  00000000 
e00009fa l       .text  00000000 
e0000a00 l       .text  00000000 
e0000a00 l       .text  00000000 
e0000a02 l       .text  00000000 
e0000a02 l       .text  00000000 
e0000a04 l       .text  00000000 
e0000a04 l       .text  00000000 
e0000a06 l       .text  00000000 
e0000a0a l       .text  00000000 
e0000a0a l       .text  00000000 
e0000a0e l       .text  00000000 
e0000a0e l       .text  00000000 
e0000a12 l       .text  00000000 
e0000a14 l       .text  00000000 
e0000a16 l       .text  00000000 
e0000a1a l       .text  00000000 
e0000a1a l       .text  00000000 
e0000a1c l       .text  00000000 
e0000a1c l       .text  00000000 
e0000a1e l       .text  00000000 
e0000a1e l       .text  00000000 
e0000a22 l       .text  00000000 
e0000a22 l       .text  00000000 
e0000a26 l       .text  00000000 
e0000a26 l       .text  00000000 
e0000a28 l       .text  00000000 
e0000a32 l       .text  00000000 
e0000a36 l       .text  00000000 
e0000a36 l       .text  00000000 
e0000a3a l       .text  00000000 
e0000a3a l       .text  00000000 
e0000a3e l       .text  00000000 
e0000a3e l       .text  00000000 
e0000a40 l       .text  00000000 
e0000a42 l       .text  00000000 
e0000a42 l       .text  00000000 
e0000a46 l       .text  00000000 
e0000a46 l       .text  00000000 
e0000a4a l       .text  00000000 
e0000a4a l       .text  00000000 
e0000a4c l       .text  00000000 
e0000a56 l       .text  00000000 
e0000a58 l       .text  00000000 
e0000a58 l       .text  00000000 
e0000a60 l       .text  00000000 
e0000a60 l       .text  00000000 
e0000a64 l       .text  00000000 
e0000a64 l       .text  00000000 
e0000a68 l       .text  00000000 
e0000a6e l       .text  00000000 
e0000a72 l       .text  00000000 
e0000a72 l       .text  00000000 
e0000a76 l       .text  00000000 
e0000a76 l       .text  00000000 
e0000a78 l       .text  00000000 
e0000a78 l       .text  00000000 
e0000a7a l       .text  00000000 
e0000a7a l       .text  00000000 
e0000a7c l       .text  00000000 
e0000a7c l       .text  00000000 
e0000a7e l       .text  00000000 
e0000a7e l       .text  00000000 
e0000a82 l       .text  00000000 
e0000a82 l       .text  00000000 
e0000a86 l       .text  00000000 
e0000a88 l       .text  00000000 
e0000a92 l       .text  00000000 
e0000a92 l       .text  00000000 
e0000a9a l       .text  00000000 
e0000a9e l       .text  00000000 
e0000aa8 l       .text  00000000 
e0000aac l       .text  00000000 
e0000ab2 l       .text  00000000 
e0000abc l       .text  00000000 
e0000abc l       .text  00000000 
e0000abe l       .text  00000000 
e0000ac2 l       .text  00000000 
e0000ac6 l       .text  00000000 
e0000ac6 l       .text  00000000 
e0000ac8 l       .text  00000000 
e0000ad8 l       .text  00000000 
e0000ae6 l       .text  00000000 
e0000ae6 l       .text  00000000 
e0000aea l       .text  00000000 
e0000aea l       .text  00000000 
0000190d l       .debug_loc     00000000 
00001928 l       .debug_loc     00000000 
00001943 l       .debug_loc     00000000 
00001969 l       .debug_loc     00000000 
00001984 l       .debug_loc     00000000 
0000199f l       .debug_loc     00000000 
000019c3 l       .debug_loc     00000000 
000019de l       .debug_loc     00000000 
000019f9 l       .debug_loc     00000000 
00001a14 l       .debug_loc     00000000 
00001a38 l       .debug_loc     00000000 
00001a53 l       .debug_loc     00000000 
00001a6e l       .debug_loc     00000000 
00001a89 l       .debug_loc     00000000 
00001aa4 l       .debug_loc     00000000 
00001ac8 l       .debug_loc     00000000 
00001ae3 l       .debug_loc     00000000 
00001afe l       .debug_loc     00000000 
00001b2f l       .debug_loc     00000000 
00001b60 l       .debug_loc     00000000 
00001b91 l       .debug_loc     00000000 
00001bac l       .debug_loc     00000000 
00001bc7 l       .debug_loc     00000000 
00001bea l       .debug_loc     00000000 
00001c05 l       .debug_loc     00000000 
00001c20 l       .debug_loc     00000000 
00001c5e l       .debug_loc     00000000 
00001c7d l       .debug_loc     00000000 
00001c98 l       .debug_loc     00000000 
00001cc5 l       .debug_loc     00000000 
00001ce8 l       .debug_loc     00000000 
00001d03 l       .debug_loc     00000000 
00001d1e l       .debug_loc     00000000 
00001d41 l       .debug_loc     00000000 
00001d5c l       .debug_loc     00000000 
00001d77 l       .debug_loc     00000000 
00001db5 l       .debug_loc     00000000 
00001dd4 l       .debug_loc     00000000 
00001def l       .debug_loc     00000000 
00001e0f l       .debug_loc     00000000 
00001e2a l       .debug_loc     00000000 
00001e46 l       .debug_loc     00000000 
00001e61 l       .debug_loc     00000000 
00001e7c l       .debug_loc     00000000 
00001e9f l       .debug_loc     00000000 
00001ec0 l       .debug_loc     00000000 
00001f0d l       .debug_loc     00000000 
00001f28 l       .debug_loc     00000000 
00001f4f l       .debug_loc     00000000 
00001f74 l       .debug_loc     00000000 
00001f96 l       .debug_loc     00000000 
00001fb1 l       .debug_loc     00000000 
00001fd3 l       .debug_loc     00000000 
00001ff4 l       .debug_loc     00000000 
0000200f l       .debug_loc     00000000 
0000202f l       .debug_loc     00000000 
0000204b l       .debug_loc     00000000 
00002066 l       .debug_loc     00000000 
00002088 l       .debug_loc     00000000 
000020a3 l       .debug_loc     00000000 
000020c9 l       .debug_loc     00000000 
000020e5 l       .debug_loc     00000000 
00002100 l       .debug_loc     00000000 
00002122 l       .debug_loc     00000000 
0000213e l       .debug_loc     00000000 
0000215e l       .debug_loc     00000000 
00002180 l       .debug_loc     00000000 
0000219b l       .debug_loc     00000000 
000021b6 l       .debug_loc     00000000 
000021dc l       .debug_loc     00000000 
0000220c l       .debug_loc     00000000 
00002227 l       .debug_loc     00000000 
00002247 l       .debug_loc     00000000 
00002269 l       .debug_loc     00000000 
00002289 l       .debug_loc     00000000 
000022af l       .debug_loc     00000000 
000022ca l       .debug_loc     00000000 
000022ff l       .debug_loc     00000000 
00002347 l       .debug_loc     00000000 
00002383 l       .debug_loc     00000000 
0000239e l       .debug_loc     00000000 
000023da l       .debug_loc     00000000 
00002416 l       .debug_loc     00000000 
0000243d l       .debug_loc     00000000 
00002458 l       .debug_loc     00000000 
00002478 l       .debug_loc     00000000 
0000249a l       .debug_loc     00000000 
000024be l       .debug_loc     00000000 
000024d9 l       .debug_loc     00000000 
000024f4 l       .debug_loc     00000000 
00002516 l       .debug_loc     00000000 
0000253f l       .debug_loc     00000000 
00002563 l       .debug_loc     00000000 
0000257e l       .debug_loc     00000000 
00002599 l       .debug_loc     00000000 
000025b4 l       .debug_loc     00000000 
000025cf l       .debug_loc     00000000 
000025ea l       .debug_loc     00000000 
0000260c l       .debug_loc     00000000 
00002627 l       .debug_loc     00000000 
00002649 l       .debug_loc     00000000 
00002665 l       .debug_loc     00000000 
00002680 l       .debug_loc     00000000 
0000269b l       .debug_loc     00000000 
000026b6 l       .debug_loc     00000000 
000026dd l       .debug_loc     00000000 
00002702 l       .debug_loc     00000000 
00002726 l       .debug_loc     00000000 
0000274d l       .debug_loc     00000000 
0000277d l       .debug_loc     00000000 
000027a5 l       .debug_loc     00000000 
000027c2 l       .debug_loc     00000000 
000027e8 l       .debug_loc     00000000 
00002803 l       .debug_loc     00000000 
0000281e l       .debug_loc     00000000 
00002840 l       .debug_loc     00000000 
00002862 l       .debug_loc     00000000 
00002893 l       .debug_loc     00000000 
000028d2 l       .debug_loc     00000000 
00002903 l       .debug_loc     00000000 
0000291e l       .debug_loc     00000000 
0000293a l       .debug_loc     00000000 
0000295e l       .debug_loc     00000000 
00002985 l       .debug_loc     00000000 
000029a7 l       .debug_loc     00000000 
000029c9 l       .debug_loc     00000000 
000029eb l       .debug_loc     00000000 
00002a07 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000392d l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000003c8 l       .debug_ranges  00000000 
00000206 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
000001aa l       .debug_str     00000000 
000001b4 l       .debug_str     00000000 
000001bf l       .debug_str     00000000 
000001ca l       .debug_str     00000000 
000001da l       .debug_str     00000000 
000001e9 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
0000075d l       .debug_str     00000000 
000006b0 l       .debug_str     00000000 
000006cd l       .debug_str     00000000 
000006eb l       .debug_str     00000000 
00000707 l       .debug_str     00000000 
00000720 l       .debug_str     00000000 
00000739 l       .debug_str     00000000 
000007ba l       .debug_str     00000000 
00000777 l       .debug_str     00000000 
00000790 l       .debug_str     00000000 
000007a5 l       .debug_str     00000000 
000007f9 l       .debug_str     00000000 
000007cd l       .debug_str     00000000 
000007e3 l       .debug_str     00000000 
000039b8 l       .debug_str     00000000 
0000394e l       .debug_str     00000000 
00003968 l       .debug_str     00000000 
0000397f l       .debug_str     00000000 
00003996 l       .debug_str     00000000 
00000a9a l       .debug_str     00000000 
00000864 l       .debug_str     00000000 
00000856 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
000039cf l       .debug_str     00000000 
00003dbc l       .debug_str     00000000 
000036d9 l       .debug_str     00000000 
00000a8d l       .debug_str     00000000 
000036e3 l       .debug_str     00000000 
00000c80 l       .debug_str     00000000 
00003d2d l       .debug_str     00000000 
00000179 l       .debug_str     00000000 
0000016d l       .debug_str     00000000 
000039e1 l       .debug_str     00000000 
0000018b l       .debug_str     00000000 
000039ee l       .debug_str     00000000 
00003b0f l       .debug_str     00000000 
00000194 l       .debug_str     00000000 
00000187 l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
000039f3 l       .debug_str     00000000 
00003a02 l       .debug_str     00000000 
00003a0a l       .debug_str     00000000 
00003a0e l       .debug_str     00000000 
00000916 l       .debug_str     00000000 
00000919 l       .debug_str     00000000 
00003475 l       .debug_str     00000000 
00003464 l       .debug_str     00000000 
0000345f l       .debug_str     00000000 
0000370b l       .debug_str     00000000 
00003a24 l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
00003a37 l       .debug_str     00000000 
000033b1 l       .debug_str     00000000 
00003a47 l       .debug_str     00000000 
00000c6c l       .debug_str     00000000 
000036c5 l       .debug_str     00000000 
00003b5d l       .debug_str     00000000 
0000417e l       .debug_str     00000000 
00000268 l       .debug_ranges  00000000 
00000280 l       .debug_ranges  00000000 
00003a4f l       .debug_str     00000000 
00003a5c l       .debug_str     00000000 
00003a61 l       .debug_str     00000000 
00003a6e l       .debug_str     00000000 
00003a7c l       .debug_str     00000000 
00003a74 l       .debug_str     00000000 
000009cf l       .debug_str     00000000 
00000afd l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
00000a91 l       .debug_str     00000000 
00000a7a l       .debug_str     00000000 
00003a82 l       .debug_str     00000000 
00003a8a l       .debug_str     00000000 
00003a93 l       .debug_str     00000000 
00003aa0 l       .debug_str     00000000 
00003b75 l       .debug_str     00000000 
00003b99 l       .debug_str     00000000 
00000298 l       .debug_ranges  00000000 
000002b0 l       .debug_ranges  00000000 
00000aca l       .debug_str     00000000 
00003b8c l       .debug_str     00000000 
000014fe l       .debug_str     00000000 
00000328 l       .debug_ranges  00000000 
00003aa9 l       .debug_str     00000000 
00003ab8 l       .debug_str     00000000 
00000882 l       .debug_str     00000000 
000034d1 l       .debug_str     00000000 
00003707 l       .debug_str     00000000 
0000349d l       .debug_str     00000000 
00003448 l       .debug_str     00000000 
00003488 l       .debug_str     00000000 
00003abf l       .debug_str     00000000 
00003ac8 l       .debug_str     00000000 
00000810 l       .debug_str     00000000 
0000089f l       .debug_str     00000000 
00003b9d l       .debug_str     00000000 
000002c8 l       .debug_ranges  00000000 
000002e0 l       .debug_ranges  00000000 
000002f8 l       .debug_ranges  00000000 
00000310 l       .debug_ranges  00000000 
000008e2 l       .debug_str     00000000 
000038f7 l       .debug_str     00000000 
00003acf l       .debug_str     00000000 
00003adc l       .debug_str     00000000 
00003ae1 l       .debug_str     00000000 
00003ae7 l       .debug_str     00000000 
00003af9 l       .debug_str     00000000 
00003af4 l       .debug_str     00000000 
00000a3f l       .debug_str     00000000 
000009eb l       .debug_str     00000000 
0000468f l       .debug_str     00000000 
00003aed l       .debug_str     00000000 
00003b38 l       .debug_str     00000000 
000007c7 l       .debug_str     00000000 
00000ad4 l       .debug_str     00000000 
00003b46 l       .debug_str     00000000 
00003bf2 l       .debug_str     00000000 
00000c76 l       .debug_str     00000000 
000009d6 l       .debug_str     00000000 
000009d9 l       .debug_str     00000000 
000009df l       .debug_str     00000000 
000009e5 l       .debug_str     00000000 
00000985 l       .debug_str     00000000 
000009a1 l       .debug_str     00000000 
000009b6 l       .debug_str     00000000 
000040b8 l       .debug_str     00000000 
00003b01 l       .debug_str     00000000 
00003b13 l       .debug_str     00000000 
000039c5 l       .debug_str     00000000 
00000c18 l       .debug_str     00000000 
00000c09 l       .debug_str     00000000 
00003b19 l       .debug_str     00000000 
00003b32 l       .debug_str     00000000 
00000902 l       .debug_str     00000000 
00003b40 l       .debug_str     00000000 
00003b4c l       .debug_str     00000000 
00000a29 l       .debug_str     00000000 
0000096c l       .debug_str     00000000 
00003ba5 l       .debug_str     00000000 
00000a36 l       .debug_str     00000000 
000003b0 l       .debug_ranges  00000000 
00000348 l       .debug_ranges  00000000 
00000360 l       .debug_ranges  00000000 
00000378 l       .debug_ranges  00000000 
00000398 l       .debug_ranges  00000000 
000006aa l       .debug_str     00000000 
00000a13 l       .debug_str     00000000 
00000892 l       .debug_str     00000000 
00000827 l       .debug_str     00000000 
00000831 l       .debug_str     00000000 
0000084a l       .debug_str     00000000 
000034ed l       .debug_str     00000000 
0000086c l       .debug_str     00000000 
00000872 l       .debug_str     00000000 
00000877 l       .debug_str     00000000 
00000888 l       .debug_str     00000000 
0000088d l       .debug_str     00000000 
00000370 l       .debug_frame   00000000 
e00006d2 l       .text  00000000 
e000082a l       .text  00000000 
e00008ac l       .text  00000000 
e00008c8 l       .text  00000000 
e0000900 l       .text  00000000 
e0000aea l       .text  00000000 
00000000 l    df *ABS*  00000000 sec_mmio.c
e0000aea l       .text  00000000 
e0000aea l       .text  00000000 
e0000aea l       .text  00000000 
e0000aea l       .text  00000000 
e0000aec l       .text  00000000 
e0000aec l       .text  00000000 
e0000aee l       .text  00000000 
e0000aee l       .text  00000000 
e0000af0 l       .text  00000000 
e0000af0 l       .text  00000000 
e0000af2 l       .text  00000000 
e0000af2 l       .text  00000000 
e0000af2 l       .text  00000000 
e0000af2 l       .text  00000000 
e0000afa l       .text  00000000 
e0000afc l       .text  00000000 
e0000afc l       .text  00000000 
e0000afc l       .text  00000000 
e0000afc l       .text  00000000 
e0000afe l       .text  00000000 
e0000afe l       .text  00000000 
e0000afe l       .text  00000000 
e0000afe l       .text  00000000 
e0000b00 l       .text  00000000 
e0000b00 l       .text  00000000 
e0000b00 l       .text  00000000 
e0000b00 l       .text  00000000 
e0000b08 l       .text  00000000 
e0000b08 l       .text  00000000 
e0000b10 l       .text  00000000 
e0000b12 l       .text  00000000 
e0000b12 l       .text  00000000 
e0000b14 l       .text  00000000 
e0000b16 l       .text  00000000 
e0000b18 l       .text  00000000 
e0000b18 l       .text  00000000 
e0000b20 l       .text  00000000 
e0000b22 l       .text  00000000 
e0000b22 l       .text  00000000 
e0000b24 l       .text  00000000 
e0000b24 l       .text  00000000 
e0000b26 l       .text  00000000 
e0000b28 l       .text  00000000 
e0000b36 l       .text  00000000 
e0000b36 l       .text  00000000 
e0000b42 l       .text  00000000 
e0000b44 l       .text  00000000 
e0000b44 l       .text  00000000 
e0000b44 l       .text  00000000 
e0000b44 l       .text  00000000 
e0000b44 l       .text  00000000 
e0000b46 l       .text  00000000 
e0000b50 l       .text  00000000 
e0000b52 l       .text  00000000 
e0000b52 l       .text  00000000 
e0000b56 l       .text  00000000 
e0000b56 l       .text  00000000 
e0000b5e l       .text  00000000 
e0000b5e l       .text  00000000 
e0000b62 l       .text  00000000 
e0000b62 l       .text  00000000 
e0000b62 l       .text  00000000 
e0000b62 l       .text  00000000 
e0000b8a l     F .text  0000006e upsert_register
e0000b68 l       .text  00000000 
e0000b68 l       .text  00000000 
e0000b6a l       .text  00000000 
e0000b6a l       .text  00000000 
e0000b7a l       .text  00000000 
e0000b80 l       .text  00000000 
e0000b82 l       .text  00000000 
e0000b84 l       .text  00000000 
e0000b8a l       .text  00000000 
e0000b8a l       .text  00000000 
e0000b8a l       .text  00000000 
e0000b8a l       .text  00000000 
e0000b8a l       .text  00000000 
e0000b8a l       .text  00000000 
e0000b96 l       .text  00000000 
e0000b96 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000b98 l       .text  00000000 
e0000b9a l       .text  00000000 
e0000b9a l       .text  00000000 
e0000b9e l       .text  00000000 
e0000b9e l       .text  00000000 
e0000ba2 l       .text  00000000 
e0000ba2 l       .text  00000000 
e0000baa l       .text  00000000 
e0000bae l       .text  00000000 
e0000bb0 l       .text  00000000 
e0000bb0 l       .text  00000000 
e0000bb2 l       .text  00000000 
e0000bb2 l       .text  00000000 
e0000bba l       .text  00000000 
e0000bba l       .text  00000000 
e0000bbc l       .text  00000000 
e0000bbc l       .text  00000000 
e0000bbe l       .text  00000000 
e0000bbe l       .text  00000000 
e0000bc2 l       .text  00000000 
e0000bc2 l       .text  00000000 
e0000bc4 l       .text  00000000 
e0000bc4 l       .text  00000000 
e0000bc8 l       .text  00000000 
e0000bc8 l       .text  00000000 
e0000bcc l       .text  00000000 
e0000bcc l       .text  00000000 
e0000bd6 l       .text  00000000 
e0000bda l       .text  00000000 
e0000bdc l       .text  00000000 
e0000be0 l       .text  00000000 
e0000be6 l       .text  00000000 
e0000bea l       .text  00000000 
e0000bf6 l       .text  00000000 
e0000bf8 l       .text  00000000 
e0000bf8 l       .text  00000000 
00002a2e l       .debug_loc     00000000 
00002a55 l       .debug_loc     00000000 
00002a7c l       .debug_loc     00000000 
00002aa3 l       .debug_loc     00000000 
00002ade l       .debug_loc     00000000 
00002b0d l       .debug_loc     00000000 
00002b28 l       .debug_loc     00000000 
00002b4e l       .debug_loc     00000000 
00002b69 l       .debug_loc     00000000 
00002b84 l       .debug_loc     00000000 
00002b9f l       .debug_loc     00000000 
00002bdc l       .debug_loc     00000000 
00002c03 l       .debug_loc     00000000 
00002c1e l       .debug_loc     00000000 
00002c44 l       .debug_loc     00000000 
00002c6a l       .debug_loc     00000000 
00002c90 l       .debug_loc     00000000 
00002cab l       .debug_loc     00000000 
00002cc6 l       .debug_loc     00000000 
00002cec l       .debug_loc     00000000 
00002d07 l       .debug_loc     00000000 
00002d22 l       .debug_loc     00000000 
00002d3d l       .debug_loc     00000000 
00002d7a l       .debug_loc     00000000 
00002da1 l       .debug_loc     00000000 
00002dbc l       .debug_loc     00000000 
00002dd7 l       .debug_loc     00000000 
00002df2 l       .debug_loc     00000000 
00002e0d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003c2a l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000004c0 l       .debug_ranges  00000000 
00003be8 l       .debug_str     00000000 
00003c1b l       .debug_str     00000000 
00003bf5 l       .debug_str     00000000 
00003c09 l       .debug_str     00000000 
00003c00 l       .debug_str     00000000 
00003d48 l       .debug_str     00000000 
00003cfd l       .debug_str     00000000 
00003c15 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
00003c58 l       .debug_str     00000000 
00003c68 l       .debug_str     00000000 
00003c78 l       .debug_str     00000000 
00003cee l       .debug_str     00000000 
00003c87 l       .debug_str     00000000 
00003d29 l       .debug_str     00000000 
000014fe l       .debug_str     00000000 
00003d2d l       .debug_str     00000000 
00000490 l       .debug_ranges  00000000 
000004a8 l       .debug_ranges  00000000 
00003d34 l       .debug_str     00000000 
00003c8d l       .debug_str     00000000 
00000a91 l       .debug_str     00000000 
00000a7a l       .debug_str     00000000 
000033a7 l       .debug_str     00000000 
000033b1 l       .debug_str     00000000 
0000091f l       .debug_str     00000000 
00000c3b l       .debug_str     00000000 
00000400 l       .debug_ranges  00000000 
00000418 l       .debug_ranges  00000000 
00000430 l       .debug_ranges  00000000 
00000448 l       .debug_ranges  00000000 
00003cab l       .debug_str     00000000 
00000460 l       .debug_ranges  00000000 
000034b4 l       .debug_str     00000000 
00003dbc l       .debug_str     00000000 
00003ca1 l       .debug_str     00000000 
0000354b l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
00003d1c l       .debug_str     00000000 
00003cc4 l       .debug_str     00000000 
00000478 l       .debug_ranges  00000000 
000033b5 l       .debug_str     00000000 
0000355b l       .debug_str     00000000 
00003cd4 l       .debug_str     00000000 
00003d04 l       .debug_str     00000000 
00003d3f l       .debug_str     00000000 
0000020a l       .debug_str     00000000 
000040b8 l       .debug_str     00000000 
00000418 l       .debug_frame   00000000 
e0000b44 l       .text  00000000 
e0000b8a l       .text  00000000 
e0000bf8 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e0000bf8 l       .text  00000000 
e0000bf8 l       .text  00000000 
e0000bf8 l       .text  00000000 
e0000bfa l       .text  00000000 
e0000bfc l       .text  00000000 
e0000c02 l       .text  00000000 
e0000c06 l       .text  00000000 
e0000c0a l       .text  00000000 
e0000c0e l       .text  00000000 
e0000c0e l       .text  00000000 
e0000c18 l       .text  00000000 
e0000c1a l       .text  00000000 
e0000c1a l       .text  00000000 
e0000c1c l       .text  00000000 
e0000c1c l       .text  00000000 
e0000c22 l       .text  00000000 
e0000c22 l       .text  00000000 
e0000c2c l       .text  00000000 
e0000c2e l       .text  00000000 
e0000c2e l       .text  00000000 
e0000c42 l       .text  00000000 
e0000c42 l       .text  00000000 
e0000c44 l       .text  00000000 
e0000c44 l       .text  00000000 
e0000c4e l       .text  00000000 
e0000c50 l       .text  00000000 
e0000c50 l       .text  00000000 
e0000c64 l       .text  00000000 
e0000c64 l       .text  00000000 
e0000c66 l       .text  00000000 
e0003c80 l     O .logs.fields   00000014 test_status_set.kLogFields.2
e0000c66 l       .text  00000000 
e0000c72 l       .text  00000000 
e0000c72 l       .text  00000000 
e0000c7c l       .text  00000000 
e0000c7e l       .text  00000000 
e0000c7e l       .text  00000000 
e0003c6c l     O .logs.fields   00000014 test_status_set.kLogFields
e0000c86 l       .text  00000000 
e0000c92 l       .text  00000000 
e0000c92 l       .text  00000000 
e0000c9c l       .text  00000000 
e0000c9e l       .text  00000000 
e0000c9e l       .text  00000000 
e0000ca6 l       .text  00000000 
e0000ca6 l       .text  00000000 
e0000ca6 l       .text  00000000 
00002e33 l       .debug_loc     00000000 
00002e51 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003d54 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000008d2 l       .debug_str     00000000 
000000be l       .debug_str     00000000 
00000286 l       .debug_str     00000000 
0000014b l       .debug_str     00000000 
00000156 l       .debug_str     00000000 
00000113 l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00003fbf l       .debug_str     00000000 
0000013e l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
0000010f l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000eb l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
0000085f l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000211 l       .debug_str     00000000 
00000226 l       .debug_str     00000000 
0000023f l       .debug_str     00000000 
00000251 l       .debug_str     00000000 
00000262 l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
00003d82 l       .debug_str     00000000 
00003da9 l       .debug_str     00000000 
00003d9b l       .debug_str     00000000 
00000179 l       .debug_str     00000000 
0000016d l       .debug_str     00000000 
00000c80 l       .debug_str     00000000 
000036c5 l       .debug_str     00000000 
00003d2d l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
000036d9 l       .debug_str     00000000 
00000a8d l       .debug_str     00000000 
000008bb l       .debug_str     00000000 
000008a6 l       .debug_str     00000000 
00003dc1 l       .debug_str     00000000 
000004d4 l       .debug_frame   00000000 
e0000ca6 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
e0000ca6 l       .text  00000000 
e0000ca6 l       .text  00000000 
e0000ca6 l       .text  00000000 
e0000ca6 l       .text  00000000 
e0000caa l       .text  00000000 
e0000caa l       .text  00000000 
e0000cac l       .text  00000000 
e0000cac l       .text  00000000 
00002e64 l       .debug_loc     00000000 
00002e7f l       .debug_loc     00000000 
00002ea6 l       .debug_loc     00000000 
00002ecd l       .debug_loc     00000000 
00002ee9 l       .debug_loc     00000000 
00002f16 l       .debug_loc     00000000 
00002f3d l       .debug_loc     00000000 
00002f64 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003dc7 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000508 l       .debug_ranges  00000000 
00000a91 l       .debug_str     00000000 
00000a7a l       .debug_str     00000000 
00003de4 l       .debug_str     00000000 
00003df5 l       .debug_str     00000000 
00003dff l       .debug_str     00000000 
00003e0a l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00003e38 l       .debug_str     00000000 
00003e5b l       .debug_str     00000000 
00000ad9 l       .debug_str     00000000 
00003e1e l       .debug_str     00000000 
00003e17 l       .debug_str     00000000 
00003e25 l       .debug_str     00000000 
00003dc1 l       .debug_str     00000000 
00003e49 l       .debug_str     00000000 
00000500 l       .debug_frame   00000000 
e0000cac l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
e0000cac l       .text  00000000 
e0000cac l       .text  00000000 
e0000cac l       .text  00000000 
e0000cae l       .text  00000000 
e0000cb4 l       .text  00000000 
e0000cb6 l       .text  00000000 
e0000cc4 l       .text  00000000 
e0000cce l       .text  00000000 
e0000cd4 l       .text  00000000 
e0000cd4 l       .text  00000000 
e0000cd6 l       .text  00000000 
e0000cda l       .text  00000000 
e0000cda l       .text  00000000 
e0000ce4 l       .text  00000000 
e0000ce4 l       .text  00000000 
e0000ce6 l       .text  00000000 
e0000cea l       .text  00000000 
e0000cea l       .text  00000000 
e0000cec l       .text  00000000 
e0000cec l       .text  00000000 
e0000cee l       .text  00000000 
e0000cee l       .text  00000000 
e0000cf2 l       .text  00000000 
e0000cf2 l       .text  00000000 
e0000cf8 l       .text  00000000 
e0000d06 l       .text  00000000 
e0000d06 l       .text  00000000 
e0003bfc l     O .bss   00000002 base_log_internal_core.global_log_counter
e0000d0e l       .text  00000000 
e0000d1a l       .text  00000000 
e0000d1c l       .text  00000000 
e0000d26 l       .text  00000000 
e0000d26 l       .text  00000000 
e0000d32 l       .text  00000000 
e0000d32 l       .text  00000000 
e0000d34 l       .text  00000000 
e0000d36 l       .text  00000000 
e0000d3a l       .text  00000000 
e0000d3a l       .text  00000000 
e0000d44 l       .text  00000000 
e0000d44 l       .text  00000000 
e0000d4e l       .text  00000000 
e0000d4e l       .text  00000000 
e0000d4e l       .text  00000000 
e0000d4e l       .text  00000000 
e0000d4e l       .text  00000000 
e0000d50 l       .text  00000000 
e0000d56 l       .text  00000000 
e0000d56 l       .text  00000000 
e0000d60 l       .text  00000000 
e0000d60 l       .text  00000000 
e0000d66 l       .text  00000000 
e0000d66 l       .text  00000000 
e0000d6a l       .text  00000000 
e0000d6a l       .text  00000000 
e0000d6c l       .text  00000000 
e0000d6c l       .text  00000000 
e0000d6e l       .text  00000000 
e0000d6e l       .text  00000000 
e0000d70 l       .text  00000000 
e0000d74 l       .text  00000000 
e0000d78 l       .text  00000000 
e0000d7a l       .text  00000000 
e0000d7a l       .text  00000000 
e0000d7c l       .text  00000000 
e0000d7c l       .text  00000000 
e0000d7e l       .text  00000000 
e0000d7e l       .text  00000000 
e0000d82 l       .text  00000000 
e0000d82 l       .text  00000000 
00002f80 l       .debug_loc     00000000 
00002fa8 l       .debug_loc     00000000 
00002fc3 l       .debug_loc     00000000 
00002fff l       .debug_loc     00000000 
0000301b l       .debug_loc     00000000 
00003036 l       .debug_loc     00000000 
00003051 l       .debug_loc     00000000 
0000306c l       .debug_loc     00000000 
000030aa l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003e60 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000530 l       .debug_ranges  00000000 
000008bb l       .debug_str     00000000 
00003e7c l       .debug_str     00000000 
00003eca l       .debug_str     00000000 
00003ece l       .debug_str     00000000 
00003edc l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000c18 l       .debug_str     00000000 
00000c09 l       .debug_str     00000000 
0000010f l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000000da l       .debug_str     00000000 
000000eb l       .debug_str     00000000 
000000fd l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
0000085f l       .debug_str     00000000 
00000a9a l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00003e8f l       .debug_str     00000000 
00000113 l       .debug_str     00000000 
0000011c l       .debug_str     00000000 
00003ea2 l       .debug_str     00000000 
00000a8d l       .debug_str     00000000 
00003ea9 l       .debug_str     00000000 
00003eb1 l       .debug_str     00000000 
000040b8 l       .debug_str     00000000 
00003ebd l       .debug_str     00000000 
000036c5 l       .debug_str     00000000 
00000c80 l       .debug_str     00000000 
00003d2d l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
00000179 l       .debug_str     00000000 
0000016d l       .debug_str     00000000 
000036d9 l       .debug_str     00000000 
000008a6 l       .debug_str     00000000 
0000013e l       .debug_str     00000000 
00003ee6 l       .debug_str     00000000 
000014fe l       .debug_str     00000000 
00000156 l       .debug_str     00000000 
0000014b l       .debug_str     00000000 
0000012b l       .debug_str     00000000 
00003fbf l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
00000b45 l       .debug_str     00000000 
00000b3b l       .debug_str     00000000 
00000560 l       .debug_frame   00000000 
e0000d4e l       .text  00000000 
e0000d82 l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
e0000d82 l     F .text  00000004 base_dev_null
e0003c00 l     O .bss   00000008 base_stdout
e0000d82 l       .text  00000000 
e0000d82 l       .text  00000000 
e0000d82 l       .text  00000000 
e0000d84 l       .text  00000000 
e0000d84 l       .text  00000000 
e0000d86 l       .text  00000000 
e0000d86 l       .text  00000000 
e0000d86 l       .text  00000000 
e0000d86 l       .text  00000000 
e0000d86 l       .text  00000000 
e0000d88 l       .text  00000000 
e0000d8a l       .text  00000000 
e0000d98 l       .text  00000000 
e0000da0 l       .text  00000000 
e0000da0 l       .text  00000000 
e0000da6 l       .text  00000000 
e0000da6 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000daa l       .text  00000000 
e0000daa l       .text  00000000 
e0000dae l       .text  00000000 
e0000db0 l       .text  00000000 
e0000db2 l       .text  00000000 
e0000db2 l       .text  00000000 
e0000db8 l       .text  00000000 
e0000db8 l       .text  00000000 
e0000db8 l       .text  00000000 
e0000db8 l       .text  00000000 
e0000db8 l       .text  00000000 
e0000dc0 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc8 l       .text  00000000 
e0000dc8 l       .text  00000000 
e0000dce l       .text  00000000 
e0000dd0 l       .text  00000000 
e0000dd2 l       .text  00000000 
e0000dd2 l       .text  00000000 
e0000dd2 l       .text  00000000 
e0000dd2 l       .text  00000000 
e0000dd2 l       .text  00000000 
e0000dd2 l       .text  00000000 
e0000dd4 l       .text  00000000 
e0000dee l       .text  00000000 
e0000df0 l       .text  00000000 
e0000df2 l       .text  00000000 
e0000df4 l       .text  00000000 
e0000df6 l       .text  00000000 
e0000df8 l       .text  00000000 
e0000dfa l       .text  00000000 
e0000e02 l       .text  00000000 
e0000e02 l       .text  00000000 
e0000e04 l       .text  00000000 
e0000e04 l       .text  00000000 
e0000e08 l       .text  00000000 
e0000e0c l       .text  00000000 
e0000e20 l       .text  00000000 
e0000e20 l       .text  00000000 
e0000e2a l       .text  00000000 
e0000e2e l       .text  00000000 
e0000e32 l       .text  00000000 
e0000e34 l       .text  00000000 
e0000e36 l       .text  00000000 
e0000e36 l       .text  00000000 
e0000e38 l       .text  00000000 
e0000e3a l       .text  00000000 
e0000e40 l       .text  00000000 
e0000e40 l       .text  00000000 
e0000e42 l       .text  00000000 
e0000e42 l       .text  00000000 
e0000e46 l       .text  00000000 
e0000e46 l       .text  00000000 
e0000e52 l       .text  00000000 
e0000e56 l       .text  00000000 
e0000e56 l       .text  00000000 
e0000e62 l       .text  00000000 
e0000e62 l       .text  00000000 
e0000e6a l       .text  00000000 
e0000e6a l       .text  00000000 
e0000e6e l       .text  00000000 
e0000e6e l       .text  00000000 
e0000e7c l       .text  00000000 
e0000e7c l       .text  00000000 
e0000e80 l       .text  00000000 
e0000e88 l       .text  00000000 
e0000e8c l       .text  00000000 
e0000e8c l       .text  00000000 
e0000e90 l       .text  00000000 
e0000e96 l       .text  00000000 
e0000e9a l       .text  00000000 
e0000e9c l       .text  00000000 
e0000ea0 l       .text  00000000 
e0000ea0 l       .text  00000000 
e0000ea4 l       .text  00000000 
e0000eaa l       .text  00000000 
e0000eaa l       .text  00000000 
e0000eae l       .text  00000000 
e0000ec2 l       .text  00000000 
e0000ec2 l       .text  00000000 
e0000ec4 l       .text  00000000 
e0000eca l       .text  00000000 
e0000ece l       .text  00000000 
e0000ed2 l       .text  00000000 
e0000ed2 l       .text  00000000 
e0000eda l       .text  00000000 
e0000edc l       .text  00000000 
e0000eea l       .text  00000000 
e0000eea l       .text  00000000 
e0000eee l       .text  00000000 
e0000efa l       .text  00000000 
e0000efa l       .text  00000000 
e0000efe l       .text  00000000 
e0000efe l       .text  00000000 
e0000f0c l       .text  00000000 
e0000f0c l       .text  00000000 
e0000f0e l       .text  00000000 
e0000f12 l       .text  00000000 
e0000f12 l       .text  00000000 
e0000f16 l       .text  00000000 
e0001a38 l     O .rodata        00000010 kDigitsLow
e0000f28 l       .text  00000000 
e0000f28 l       .text  00000000 
e0000f30 l       .text  00000000 
e0000f38 l       .text  00000000 
e0000f38 l       .text  00000000 
e0000f42 l       .text  00000000 
e0000f42 l       .text  00000000 
e0000f46 l       .text  00000000 
e0000f46 l       .text  00000000 
e0000f50 l       .text  00000000 
e0000f50 l       .text  00000000 
e0000f58 l       .text  00000000 
e0000f58 l       .text  00000000 
e0000f5c l       .text  00000000 
e0001a65 l     O .rodata        00000010 kDigitsHigh
e0000f66 l       .text  00000000 
e0000f66 l       .text  00000000 
e0000f70 l       .text  00000000 
e0000f70 l       .text  00000000 
e0000f74 l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f82 l       .text  00000000 
e0000f8c l       .text  00000000 
e0000f8c l       .text  00000000 
e0000f94 l       .text  00000000 
e0000f94 l       .text  00000000 
e0000f98 l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000fac l       .text  00000000 
e0000fb0 l       .text  00000000 
e0000fb4 l       .text  00000000 
e0000fb4 l       .text  00000000 
e0000fc0 l       .text  00000000 
e0000fc0 l       .text  00000000 
e0000fc4 l       .text  00000000 
e0000fce l       .text  00000000 
e0000fd2 l       .text  00000000 
e0000fd2 l       .text  00000000 
e0000fd4 l       .text  00000000 
e0000fd4 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fdc l       .text  00000000 
e0000fe6 l       .text  00000000 
e0000fe6 l       .text  00000000 
e0000fea l       .text  00000000 
e0000ff6 l       .text  00000000 
e0000ff6 l       .text  00000000 
e0000ffa l       .text  00000000 
e0000ffa l       .text  00000000 
e0001008 l       .text  00000000 
e0001008 l       .text  00000000 
e0001012 l       .text  00000000 
e0001012 l       .text  00000000 
e0001016 l       .text  00000000 
e0001016 l       .text  00000000 
e0001344 l     F .text  0000007e write_digits
e000102c l       .text  00000000 
e000102c l       .text  00000000 
e0001032 l       .text  00000000 
e0001032 l       .text  00000000 
e000103c l       .text  00000000 
e000103c l       .text  00000000 
e000103e l       .text  00000000 
e0001048 l       .text  00000000 
e0001048 l       .text  00000000 
e0001052 l       .text  00000000 
e0001052 l       .text  00000000 
e0001054 l       .text  00000000 
e0001054 l       .text  00000000 
e0001056 l       .text  00000000 
e0001056 l       .text  00000000 
e000105a l       .text  00000000 
e000105a l       .text  00000000 
e000105e l       .text  00000000 
e0001060 l       .text  00000000 
e0001064 l       .text  00000000 
e0001064 l       .text  00000000 
e0001068 l       .text  00000000 
e0001068 l       .text  00000000 
e0001074 l       .text  00000000 
e0001074 l       .text  00000000 
e0001076 l       .text  00000000 
e0001076 l       .text  00000000 
e0001078 l       .text  00000000 
e0001078 l       .text  00000000 
e0001080 l       .text  00000000 
e0001080 l       .text  00000000 
e0001084 l       .text  00000000 
e0001084 l       .text  00000000 
e0001092 l       .text  00000000 
e0001092 l       .text  00000000 
e0001094 l       .text  00000000 
e00010a2 l       .text  00000000 
e00010a2 l       .text  00000000 
e00010a6 l       .text  00000000 
e00010a6 l       .text  00000000 
e00010aa l       .text  00000000 
e00010aa l       .text  00000000 
e00010b8 l       .text  00000000 
e00010b8 l       .text  00000000 
e00010bc l       .text  00000000 
e00010bc l       .text  00000000 
e00010c4 l       .text  00000000 
e00010c4 l       .text  00000000 
e00010c6 l       .text  00000000 
e00010c6 l       .text  00000000 
e00010c8 l       .text  00000000 
e00010c8 l       .text  00000000 
e00010dc l       .text  00000000 
e00010dc l       .text  00000000 
e00010de l       .text  00000000 
e00010ec l       .text  00000000 
e00010ec l       .text  00000000 
e00010ee l       .text  00000000 
e00010ee l       .text  00000000 
e00010f0 l       .text  00000000 
e00010f8 l       .text  00000000 
e00010fc l       .text  00000000 
e00010fe l       .text  00000000 
e0001108 l       .text  00000000 
e0001108 l       .text  00000000 
e000110c l       .text  00000000 
e0001116 l       .text  00000000 
e0001116 l       .text  00000000 
e000111a l       .text  00000000 
e0001126 l       .text  00000000 
e0001126 l       .text  00000000 
e000112a l       .text  00000000 
e000112a l       .text  00000000 
e0001134 l       .text  00000000 
e0001134 l       .text  00000000 
e000113c l       .text  00000000 
e000113c l       .text  00000000 
e0001140 l       .text  00000000 
e0001148 l       .text  00000000 
e0001148 l       .text  00000000 
e0001152 l       .text  00000000 
e0001152 l       .text  00000000 
e000115c l       .text  00000000 
e000115c l       .text  00000000 
e0001160 l       .text  00000000 
e0001168 l       .text  00000000 
e0001168 l       .text  00000000 
e0001172 l       .text  00000000 
e0001174 l       .text  00000000 
e0001174 l       .text  00000000 
e0001178 l       .text  00000000 
e0001182 l       .text  00000000 
e0001182 l       .text  00000000 
e000118a l       .text  00000000 
e000118a l       .text  00000000 
e000118e l       .text  00000000 
e0001196 l       .text  00000000 
e0001196 l       .text  00000000 
e0001260 l     F .text  000000e4 hex_dump
e00011a0 l       .text  00000000 
e00011a2 l       .text  00000000 
e0001a75 l     O .rodata        0000000f kUnknownSpec
e00011a2 l       .text  00000000 
e00011ac l       .text  00000000 
e00011ac l       .text  00000000 
e00011b0 l       .text  00000000 
e00011b2 l       .text  00000000 
e00011b2 l       .text  00000000 
e00011b6 l       .text  00000000 
e00011bc l       .text  00000000 
e00011bc l       .text  00000000 
e00011c0 l       .text  00000000 
e00011cc l       .text  00000000 
e00011cc l       .text  00000000 
e00011ce l       .text  00000000 
e00011ce l       .text  00000000 
e00011e2 l       .text  00000000 
e00011e2 l       .text  00000000 
e00011e6 l       .text  00000000 
e00011f4 l       .text  00000000 
e00011f4 l       .text  00000000 
e00011f8 l       .text  00000000 
e00011f8 l       .text  00000000 
e00011fe l       .text  00000000 
e00011fe l       .text  00000000 
e0001200 l       .text  00000000 
e0001200 l       .text  00000000 
e0001202 l       .text  00000000 
e0001202 l       .text  00000000 
e000120a l       .text  00000000 
e000120c l       .text  00000000 
e000120e l       .text  00000000 
e0001214 l       .text  00000000 
e0001214 l       .text  00000000 
e0001220 l       .text  00000000 
e0001a48 l     O .rodata        00000011 kErrorNul
e0001220 l       .text  00000000 
e000122a l       .text  00000000 
e000122a l       .text  00000000 
e000122e l       .text  00000000 
e0001232 l       .text  00000000 
e0001234 l       .text  00000000 
e0001234 l       .text  00000000 
e0001244 l       .text  00000000 
e0001248 l       .text  00000000 
e0001254 l       .text  00000000 
e0001a59 l     O .rodata        0000000c kErrorTooWide
e0001254 l       .text  00000000 
e0001260 l       .text  00000000 
e0001260 l       .text  00000000 
e0001260 l       .text  00000000 
e0001260 l       .text  00000000 
e0001260 l       .text  00000000 
e0001260 l       .text  00000000 
e0001262 l       .text  00000000 
e000127a l       .text  00000000 
e000127c l       .text  00000000 
e000127e l       .text  00000000 
e0001280 l       .text  00000000 
e0001282 l       .text  00000000 
e0001286 l       .text  00000000 
e0001286 l       .text  00000000 
e000128a l       .text  00000000 
e000128e l       .text  00000000 
e000128e l       .text  00000000 
e0001298 l       .text  00000000 
e0001298 l       .text  00000000 
e000129a l       .text  00000000 
e000129c l       .text  00000000 
e00012a2 l       .text  00000000 
e00012a2 l       .text  00000000 
e00012a6 l       .text  00000000 
e00012aa l       .text  00000000 
e00012aa l       .text  00000000 
e00012b2 l       .text  00000000 
e00012b2 l       .text  00000000 
e00012b4 l       .text  00000000 
e00012b6 l       .text  00000000 
e00012b6 l       .text  00000000 
e00012b8 l       .text  00000000 
e00012b8 l       .text  00000000 
e00012be l       .text  00000000 
e00012be l       .text  00000000 
e00012c0 l       .text  00000000 
e00012c0 l       .text  00000000 
e00012c4 l       .text  00000000 
e00012c8 l       .text  00000000 
e00012ce l       .text  00000000 
e00012ce l       .text  00000000 
e00012d4 l       .text  00000000 
e00012dc l       .text  00000000 
e00012dc l       .text  00000000 
e00012de l       .text  00000000 
e00012e2 l       .text  00000000 
e00012e6 l       .text  00000000 
e00012ec l       .text  00000000 
e00012f0 l       .text  00000000 
e00012f4 l       .text  00000000 
e00012f6 l       .text  00000000 
e00012fc l       .text  00000000 
e00012fe l       .text  00000000 
e0001306 l       .text  00000000 
e000130c l       .text  00000000 
e0001310 l       .text  00000000 
e0001310 l       .text  00000000 
e0001312 l       .text  00000000 
e0001314 l       .text  00000000 
e0001314 l       .text  00000000 
e0001316 l       .text  00000000 
e0001318 l       .text  00000000 
e000131c l       .text  00000000 
e000131c l       .text  00000000 
e000131e l       .text  00000000 
e0001324 l       .text  00000000 
e0001324 l       .text  00000000 
e0001326 l       .text  00000000 
e000132e l       .text  00000000 
e0001330 l       .text  00000000 
e0001334 l       .text  00000000 
e0001336 l       .text  00000000 
e0001338 l       .text  00000000 
e000133a l       .text  00000000 
e0001344 l       .text  00000000 
e0001344 l       .text  00000000 
e0001344 l       .text  00000000 
e0001344 l       .text  00000000 
e0001344 l       .text  00000000 
e0001346 l       .text  00000000 
e0001348 l       .text  00000000 
e000134a l       .text  00000000 
e000134a l       .text  00000000 
e000134c l       .text  00000000 
e000134e l       .text  00000000 
e0001352 l       .text  00000000 
e0001352 l       .text  00000000 
e0001354 l       .text  00000000 
e0001354 l       .text  00000000 
e0001360 l       .text  00000000 
e0001360 l       .text  00000000 
e0001362 l       .text  00000000 
e0001366 l       .text  00000000 
e000136e l       .text  00000000 
e000136e l       .text  00000000 
e0001370 l       .text  00000000 
e0001374 l       .text  00000000 
e0001378 l       .text  00000000 
e0001378 l       .text  00000000 
e000137a l       .text  00000000 
e000137a l       .text  00000000 
e000137e l       .text  00000000 
e0001384 l       .text  00000000 
e0001384 l       .text  00000000 
e0001386 l       .text  00000000 
e0001388 l       .text  00000000 
e000138a l       .text  00000000 
e000138e l       .text  00000000 
e0001392 l       .text  00000000 
e0001396 l       .text  00000000 
e0001396 l       .text  00000000 
e00013a0 l       .text  00000000 
e00013a4 l       .text  00000000 
e00013a6 l       .text  00000000 
e00013aa l       .text  00000000 
e00013ae l       .text  00000000 
e00013b0 l       .text  00000000 
e00013b2 l       .text  00000000 
e00013b4 l       .text  00000000 
e00013b4 l       .text  00000000 
e00013ba l       .text  00000000 
e00013bc l       .text  00000000 
e00013bc l       .text  00000000 
e00013c2 l       .text  00000000 
e00013c2 l       .text  00000000 
000030c7 l       .debug_loc     00000000 
000030f3 l       .debug_loc     00000000 
0000310e l       .debug_loc     00000000 
00003134 l       .debug_loc     00000000 
00003160 l       .debug_loc     00000000 
00003191 l       .debug_loc     00000000 
000031c2 l       .debug_loc     00000000 
000031fe l       .debug_loc     00000000 
0000322f l       .debug_loc     00000000 
00003256 l       .debug_loc     00000000 
00003287 l       .debug_loc     00000000 
000032a2 l       .debug_loc     00000000 
000032be l       .debug_loc     00000000 
000032d9 l       .debug_loc     00000000 
000032ff l       .debug_loc     00000000 
00003325 l       .debug_loc     00000000 
00003361 l       .debug_loc     00000000 
0000346c l       .debug_loc     00000000 
000035c6 l       .debug_loc     00000000 
000036c6 l       .debug_loc     00000000 
000037d1 l       .debug_loc     00000000 
000037f1 l       .debug_loc     00000000 
00003817 l       .debug_loc     00000000 
00003847 l       .debug_loc     00000000 
00003a7f l       .debug_loc     00000000 
00003a9b l       .debug_loc     00000000 
00003ab6 l       .debug_loc     00000000 
00003c2b l       .debug_loc     00000000 
00003d7b l       .debug_loc     00000000 
00003e8f l       .debug_loc     00000000 
00003eb5 l       .debug_loc     00000000 
00003ed0 l       .debug_loc     00000000 
00003eeb l       .debug_loc     00000000 
00003f06 l       .debug_loc     00000000 
00003f21 l       .debug_loc     00000000 
00003f3c l       .debug_loc     00000000 
00003f58 l       .debug_loc     00000000 
00003f73 l       .debug_loc     00000000 
00003f8e l       .debug_loc     00000000 
00003fa9 l       .debug_loc     00000000 
00003fc4 l       .debug_loc     00000000 
00003ff6 l       .debug_loc     00000000 
00004029 l       .debug_loc     00000000 
00004044 l       .debug_loc     00000000 
00004097 l       .debug_loc     00000000 
000040ca l       .debug_loc     00000000 
000040e5 l       .debug_loc     00000000 
00004100 l       .debug_loc     00000000 
0000411b l       .debug_loc     00000000 
00004136 l       .debug_loc     00000000 
00004151 l       .debug_loc     00000000 
0000416c l       .debug_loc     00000000 
00004187 l       .debug_loc     00000000 
000041a2 l       .debug_loc     00000000 
000041bd l       .debug_loc     00000000 
000041d8 l       .debug_loc     00000000 
000041f3 l       .debug_loc     00000000 
0000420f l       .debug_loc     00000000 
0000422e l       .debug_loc     00000000 
00004249 l       .debug_loc     00000000 
0000427a l       .debug_loc     00000000 
000042a0 l       .debug_loc     00000000 
000042d1 l       .debug_loc     00000000 
00004302 l       .debug_loc     00000000 
0000431d l       .debug_loc     00000000 
00004338 l       .debug_loc     00000000 
00004353 l       .debug_loc     00000000 
00004384 l       .debug_loc     00000000 
0000439f l       .debug_loc     00000000 
000043ba l       .debug_loc     00000000 
000043d6 l       .debug_loc     00000000 
000043fc l       .debug_loc     00000000 
0000442d l       .debug_loc     00000000 
00004448 l       .debug_loc     00000000 
00004463 l       .debug_loc     00000000 
00004489 l       .debug_loc     00000000 
000044af l       .debug_loc     00000000 
000044ca l       .debug_loc     00000000 
000044e5 l       .debug_loc     00000000 
00004500 l       .debug_loc     00000000 
0000451b l       .debug_loc     00000000 
0000453a l       .debug_loc     00000000 
00004555 l       .debug_loc     00000000 
00004570 l       .debug_loc     00000000 
0000458c l       .debug_loc     00000000 
000045a7 l       .debug_loc     00000000 
000045c2 l       .debug_loc     00000000 
000045e1 l       .debug_loc     00000000 
00004607 l       .debug_loc     00000000 
00004638 l       .debug_loc     00000000 
00004690 l       .debug_loc     00000000 
000046da l       .debug_loc     00000000 
0000472c l       .debug_loc     00000000 
00004769 l       .debug_loc     00000000 
000047a5 l       .debug_loc     00000000 
0000480f l       .debug_loc     00000000 
00004858 l       .debug_loc     00000000 
000048c2 l       .debug_loc     00000000 
000048e8 l       .debug_loc     00000000 
00004903 l       .debug_loc     00000000 
0000491e l       .debug_loc     00000000 
00004945 l       .debug_loc     00000000 
0000498d l       .debug_loc     00000000 
000049b3 l       .debug_loc     00000000 
000049d9 l       .debug_loc     00000000 
000049ff l       .debug_loc     00000000 
00004a1a l       .debug_loc     00000000 
00004a4a l       .debug_loc     00000000 
00004a70 l       .debug_loc     00000000 
00004aa2 l       .debug_loc     00000000 
00004ae0 l       .debug_loc     00000000 
00004b0f l       .debug_loc     00000000 
00004b2a l       .debug_loc     00000000 
00004b5d l       .debug_loc     00000000 
00004b78 l       .debug_loc     00000000 
00004bb4 l       .debug_loc     00000000 
00004bda l       .debug_loc     00000000 
00004bf5 l       .debug_loc     00000000 
00004c10 l       .debug_loc     00000000 
00004c2b l       .debug_loc     00000000 
00004c81 l       .debug_loc     00000000 
00004cb0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00003ef1 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000680 l       .debug_ranges  00000000 
00003f0f l       .debug_str     00000000 
0000085f l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
00003f2e l       .debug_str     00000000 
00003f46 l       .debug_str     00000000 
00003f3a l       .debug_str     00000000 
00000afd l       .debug_str     00000000 
00004257 l       .debug_str     00000000 
000040b8 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00003f54 l       .debug_str     00000000 
00003f5e l       .debug_str     00000000 
000042af l       .debug_str     00000000 
00003f6c l       .debug_str     00000000 
0000278f l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
000007c7 l       .debug_str     00000000 
00004154 l       .debug_str     00000000 
00000c80 l       .debug_str     00000000 
00004331 l       .debug_str     00000000 
000042dc l       .debug_str     00000000 
0000417e l       .debug_str     00000000 
00004341 l       .debug_str     00000000 
00000a8d l       .debug_str     00000000 
00003f76 l       .debug_str     00000000 
00003f82 l       .debug_str     00000000 
00003f8f l       .debug_str     00000000 
00003fde l       .debug_str     00000000 
00003fcd l       .debug_str     00000000 
00003fa6 l       .debug_str     00000000 
00003fb5 l       .debug_str     00000000 
00003fc4 l       .debug_str     00000000 
00003ff1 l       .debug_str     00000000 
00000206 l       .debug_str     00000000 
000001a3 l       .debug_str     00000000 
000001aa l       .debug_str     00000000 
000001b4 l       .debug_str     00000000 
000001bf l       .debug_str     00000000 
000001ca l       .debug_str     00000000 
000001da l       .debug_str     00000000 
000001e9 l       .debug_str     00000000 
000001f8 l       .debug_str     00000000 
00003ffc l       .debug_str     00000000 
00004005 l       .debug_str     00000000 
00004010 l       .debug_str     00000000 
00004018 l       .debug_str     00000000 
00004024 l       .debug_str     00000000 
00004030 l       .debug_str     00000000 
0000403d l       .debug_str     00000000 
0000404d l       .debug_str     00000000 
0000405e l       .debug_str     00000000 
0000406b l       .debug_str     00000000 
00004074 l       .debug_str     00000000 
0000407e l       .debug_str     00000000 
00004088 l       .debug_str     00000000 
00004093 l       .debug_str     00000000 
0000409d l       .debug_str     00000000 
000040a8 l       .debug_str     00000000 
000040b6 l       .debug_str     00000000 
00000864 l       .debug_str     00000000 
00000856 l       .debug_str     00000000 
000040c8 l       .debug_str     00000000 
000040bf l       .debug_str     00000000 
00000163 l       .debug_str     00000000 
00000179 l       .debug_str     00000000 
0000016d l       .debug_str     00000000 
000040de l       .debug_str     00000000 
00000c76 l       .debug_str     00000000 
000040d3 l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
00004205 l       .debug_str     00000000 
000040f2 l       .debug_str     00000000 
00004213 l       .debug_str     00000000 
000040c3 l       .debug_str     00000000 
00004224 l       .debug_str     00000000 
000014fe l       .debug_str     00000000 
00004102 l       .debug_str     00000000 
00003ebd l       .debug_str     00000000 
00000144 l       .debug_str     00000000 
0000013f l       .debug_str     00000000 
00000b45 l       .debug_str     00000000 
00000b3b l       .debug_str     00000000 
00003eb1 l       .debug_str     00000000 
00000548 l       .debug_ranges  00000000 
00004232 l       .debug_str     00000000 
000042bc l       .debug_str     00000000 
000042f7 l       .debug_str     00000000 
00000628 l       .debug_ranges  00000000 
00004198 l       .debug_str     00000000 
00000560 l       .debug_ranges  00000000 
00000588 l       .debug_ranges  00000000 
000005a8 l       .debug_ranges  00000000 
000005c0 l       .debug_ranges  00000000 
000005f8 l       .debug_ranges  00000000 
000005e0 l       .debug_ranges  00000000 
00000610 l       .debug_ranges  00000000 
0000411c l       .debug_str     00000000 
00004132 l       .debug_str     00000000 
00003e7a l       .debug_str     00000000 
00000882 l       .debug_str     00000000 
0000413b l       .debug_str     00000000 
00004179 l       .debug_str     00000000 
00004166 l       .debug_str     00000000 
00004143 l       .debug_str     00000000 
0000468f l       .debug_str     00000000 
0000415c l       .debug_str     00000000 
00004182 l       .debug_str     00000000 
00004194 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000a9a l       .debug_str     00000000 
000044b7 l       .debug_str     00000000 
000041a3 l       .debug_str     00000000 
0000419d l       .debug_str     00000000 
000041aa l       .debug_str     00000000 
000041b2 l       .debug_str     00000000 
00000ad9 l       .debug_str     00000000 
000041b6 l       .debug_str     00000000 
00000ba9 l       .debug_str     00000000 
000044d5 l       .debug_str     00000000 
000041ba l       .debug_str     00000000 
000042a6 l       .debug_str     00000000 
00004546 l       .debug_str     00000000 
00004326 l       .debug_str     00000000 
0000431d l       .debug_str     00000000 
00004338 l       .debug_str     00000000 
0000387c l       .debug_str     00000000 
00004240 l       .debug_str     00000000 
0000424e l       .debug_str     00000000 
000042c6 l       .debug_str     00000000 
000041c9 l       .debug_str     00000000 
0000425c l       .debug_str     00000000 
000041d0 l       .debug_str     00000000 
00003fda l       .debug_str     00000000 
00004269 l       .debug_str     00000000 
00004293 l       .debug_str     00000000 
000042e3 l       .debug_str     00000000 
00003fbf l       .debug_str     00000000 
00000668 l       .debug_ranges  00000000 
000042d6 l       .debug_str     00000000 
000042f2 l       .debug_str     00000000 
00004305 l       .debug_str     00000000 
00003a9b l       .debug_str     00000000 
00000648 l       .debug_ranges  00000000 
000042cf l       .debug_str     00000000 
00004314 l       .debug_str     00000000 
00003a69 l       .debug_str     00000000 
000041e2 l       .debug_str     00000000 
000041f6 l       .debug_str     00000000 
00004276 l       .debug_str     00000000 
00004285 l       .debug_str     00000000 
000041fe l       .debug_str     00000000 
000005a4 l       .debug_frame   00000000 
e0000d86 l       .text  00000000 
e0000db8 l       .text  00000000 
e0000dd2 l       .text  00000000 
e0001260 l       .text  00000000 
e0001344 l       .text  00000000 
e00013c2 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e00013c2 l       .text  00000000 
e00013c2 l       .text  00000000 
e00013c2 l       .text  00000000 
e00013c2 l       .text  00000000 
e00013c6 l       .text  00000000 
e00013ce l       .text  00000000 
e00013ce l       .text  00000000 
e00013d2 l       .text  00000000 
e00013d2 l       .text  00000000 
e00013de l       .text  00000000 
e00013e0 l       .text  00000000 
e00013e0 l       .text  00000000 
e00013e4 l       .text  00000000 
e00013f0 l       .text  00000000 
e00013f2 l       .text  00000000 
e00013f6 l       .text  00000000 
e00013f8 l       .text  00000000 
e00013f8 l       .text  00000000 
e00013fc l       .text  00000000 
e00013fc l       .text  00000000 
e0001400 l       .text  00000000 
e0001400 l       .text  00000000 
e0001402 l       .text  00000000 
e0001402 l       .text  00000000 
e0001406 l       .text  00000000 
e0001406 l       .text  00000000 
e0001408 l       .text  00000000 
e000140c l       .text  00000000 
e000140c l       .text  00000000 
e0001410 l       .text  00000000 
e0001414 l       .text  00000000 
e000141a l       .text  00000000 
e000141a l       .text  00000000 
e000141e l       .text  00000000 
e0001420 l       .text  00000000 
e0001420 l       .text  00000000 
e0001426 l       .text  00000000 
e0001426 l       .text  00000000 
e000142c l       .text  00000000 
e000142c l       .text  00000000 
e000142e l       .text  00000000 
e000142e l       .text  00000000 
e0001434 l       .text  00000000 
e0001434 l       .text  00000000 
00004ccb l       .debug_loc     00000000 
00004ce6 l       .debug_loc     00000000 
00004d17 l       .debug_loc     00000000 
00004d3d l       .debug_loc     00000000 
00004d63 l       .debug_loc     00000000 
00004d7e l       .debug_loc     00000000 
00004da0 l       .debug_loc     00000000 
00004dc7 l       .debug_loc     00000000 
00004dee l       .debug_loc     00000000 
00004e12 l       .debug_loc     00000000 
00004e43 l       .debug_loc     00000000 
00004e5e l       .debug_loc     00000000 
00004e8f l       .debug_loc     00000000 
00004ee9 l       .debug_loc     00000000 
00004f25 l       .debug_loc     00000000 
00004f49 l       .debug_loc     00000000 
00004f6e l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00004347 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000730 l       .debug_ranges  00000000 
00004363 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00004373 l       .debug_str     00000000 
0000085f l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
000044a1 l       .debug_str     00000000 
00004380 l       .debug_str     00000000 
00004384 l       .debug_str     00000000 
0000438f l       .debug_str     00000000 
00004398 l       .debug_str     00000000 
000043a9 l       .debug_str     00000000 
000043bb l       .debug_str     00000000 
000043c5 l       .debug_str     00000000 
000043d4 l       .debug_str     00000000 
000043e6 l       .debug_str     00000000 
000043f9 l       .debug_str     00000000 
0000440d l       .debug_str     00000000 
00004416 l       .debug_str     00000000 
00004422 l       .debug_str     00000000 
00004431 l       .debug_str     00000000 
0000443b l       .debug_str     00000000 
00004448 l       .debug_str     00000000 
00004452 l       .debug_str     00000000 
00004463 l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
00000a8d l       .debug_str     00000000 
000040b8 l       .debug_str     00000000 
000040b6 l       .debug_str     00000000 
000044b2 l       .debug_str     00000000 
000044c0 l       .debug_str     00000000 
000044c9 l       .debug_str     00000000 
000039df l       .debug_str     00000000 
00003448 l       .debug_str     00000000 
00000916 l       .debug_str     00000000 
00000919 l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
00003475 l       .debug_str     00000000 
00003464 l       .debug_str     00000000 
0000345f l       .debug_str     00000000 
0000370b l       .debug_str     00000000 
000044d9 l       .debug_str     00000000 
000044ad l       .debug_str     00000000 
000044e7 l       .debug_str     00000000 
000041b6 l       .debug_str     00000000 
00000718 l       .debug_ranges  00000000 
000044ce l       .debug_str     00000000 
0000218a l       .debug_str     00000000 
000044b7 l       .debug_str     00000000 
000041a3 l       .debug_str     00000000 
00003a0e l       .debug_str     00000000 
000041ba l       .debug_str     00000000 
000044f1 l       .debug_str     00000000 
000044d5 l       .debug_str     00000000 
00000882 l       .debug_str     00000000 
00000798 l       .debug_frame   00000000 
e0001434 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
e0001434 l       .text  00000000 
e0001434 l       .text  00000000 
e0001434 l       .text  00000000 
e0001434 l       .text  00000000 
e000143c l       .text  00000000 
e0001440 l       .text  00000000 
e0001440 l       .text  00000000 
e0001444 l       .text  00000000 
e0001444 l       .text  00000000 
e0001448 l       .text  00000000 
e0001448 l       .text  00000000 
e0001454 l       .text  00000000 
e0001456 l       .text  00000000 
e0001456 l       .text  00000000 
e000145c l       .text  00000000 
e000145c l       .text  00000000 
e0001460 l       .text  00000000 
e0001462 l       .text  00000000 
e0001466 l       .text  00000000 
e0001466 l       .text  00000000 
e0001468 l       .text  00000000 
e0001468 l       .text  00000000 
e000146a l       .text  00000000 
e000146a l       .text  00000000 
e0001472 l       .text  00000000 
e0001476 l       .text  00000000 
e0001478 l       .text  00000000 
e000147c l       .text  00000000 
e0001480 l       .text  00000000 
e0001480 l       .text  00000000 
e0001484 l       .text  00000000 
e0001484 l       .text  00000000 
e0001488 l       .text  00000000 
e000148a l       .text  00000000 
e000148a l       .text  00000000 
e000148e l       .text  00000000 
e000148e l       .text  00000000 
e0001490 l       .text  00000000 
e0001490 l       .text  00000000 
e0001492 l       .text  00000000 
e0001492 l       .text  00000000 
e0001496 l       .text  00000000 
e0001496 l       .text  00000000 
e000149a l       .text  00000000 
e000149c l       .text  00000000 
e00014a2 l       .text  00000000 
e00014a2 l       .text  00000000 
e00014a6 l       .text  00000000 
e00014aa l       .text  00000000 
e00014b2 l       .text  00000000 
e00014b2 l       .text  00000000 
e00014b4 l       .text  00000000 
e00014b4 l       .text  00000000 
e00014b6 l       .text  00000000 
e00014b6 l       .text  00000000 
e00014bc l       .text  00000000 
e00014bc l       .text  00000000 
e00014bc l       .text  00000000 
e00014bc l       .text  00000000 
e00014bc l       .text  00000000 
e00014c0 l       .text  00000000 
e00014c0 l       .text  00000000 
e00014c4 l       .text  00000000 
e00014c4 l       .text  00000000 
e00014cc l       .text  00000000 
e00014cc l       .text  00000000 
e00014d0 l       .text  00000000 
e00014d4 l       .text  00000000 
e00014d4 l       .text  00000000 
e00014d6 l       .text  00000000 
e00014d6 l       .text  00000000 
e00014da l       .text  00000000 
e00014da l       .text  00000000 
e00014de l       .text  00000000 
e00014de l       .text  00000000 
e00014e0 l       .text  00000000 
e00014e2 l       .text  00000000 
e00014e4 l       .text  00000000 
e00014e4 l       .text  00000000 
e00014e8 l       .text  00000000 
e00014ec l       .text  00000000 
e00014fc l       .text  00000000 
e00014fc l       .text  00000000 
e0001500 l       .text  00000000 
e0001500 l       .text  00000000 
e0001502 l       .text  00000000 
e0001502 l       .text  00000000 
e0001504 l       .text  00000000 
e0001504 l       .text  00000000 
e0001508 l       .text  00000000 
e0001508 l       .text  00000000 
e000150e l       .text  00000000 
e0001512 l       .text  00000000 
e0001512 l       .text  00000000 
e0001516 l       .text  00000000 
e000151a l       .text  00000000 
e000151c l       .text  00000000 
e000151e l       .text  00000000 
e000151e l       .text  00000000 
e000151e l       .text  00000000 
e000151e l       .text  00000000 
e000151e l       .text  00000000 
e0001522 l       .text  00000000 
e0001522 l       .text  00000000 
e0001526 l       .text  00000000 
e0001526 l       .text  00000000 
e000152e l       .text  00000000 
e0001532 l       .text  00000000 
e0001536 l       .text  00000000 
e0001538 l       .text  00000000 
e000153a l       .text  00000000 
e000153a l       .text  00000000 
e000153e l       .text  00000000 
e0001542 l       .text  00000000 
e0001542 l       .text  00000000 
e0001544 l       .text  00000000 
e0001546 l       .text  00000000 
e0001548 l       .text  00000000 
e000154e l       .text  00000000 
e000154e l       .text  00000000 
e0001550 l       .text  00000000 
e0001554 l       .text  00000000 
e0001560 l       .text  00000000 
e000156e l       .text  00000000 
e000156e l       .text  00000000 
e0001572 l       .text  00000000 
e0001574 l       .text  00000000 
e0001574 l       .text  00000000 
e0001578 l       .text  00000000 
e000157c l       .text  00000000 
e000157c l       .text  00000000 
e0001580 l       .text  00000000 
e0001584 l       .text  00000000 
e0001588 l       .text  00000000 
e000158c l       .text  00000000 
e0001590 l       .text  00000000 
e0001590 l       .text  00000000 
e0001594 l       .text  00000000 
e0001598 l       .text  00000000 
e000159a l       .text  00000000 
e000159a l       .text  00000000 
e000159c l       .text  00000000 
e00015a0 l       .text  00000000 
e00015a0 l       .text  00000000 
e00015a8 l       .text  00000000 
e00015ac l       .text  00000000 
e00015ac l       .text  00000000 
e00015b0 l       .text  00000000 
e00015b4 l       .text  00000000 
e00015b8 l       .text  00000000 
e00015ba l       .text  00000000 
e00015be l       .text  00000000 
e00015be l       .text  00000000 
e00015c2 l       .text  00000000 
e00015c2 l       .text  00000000 
e00015c6 l       .text  00000000 
e00015c8 l       .text  00000000 
e00015c8 l       .text  00000000 
e00015cc l       .text  00000000 
e00015cc l       .text  00000000 
e00015cc l       .text  00000000 
e00015cc l       .text  00000000 
e00015cc l       .text  00000000 
e00015d0 l       .text  00000000 
e00015d0 l       .text  00000000 
e00015d4 l       .text  00000000 
e00015d4 l       .text  00000000 
e00015dc l       .text  00000000 
e00015dc l       .text  00000000 
e00015e0 l       .text  00000000 
e00015e2 l       .text  00000000 
e00015e6 l       .text  00000000 
e00015e6 l       .text  00000000 
e00015e8 l       .text  00000000 
e00015e8 l       .text  00000000 
e00015ec l       .text  00000000 
e00015ec l       .text  00000000 
e00015f2 l       .text  00000000 
e00015f2 l       .text  00000000 
e00015f6 l       .text  00000000 
e00015f6 l       .text  00000000 
e00015fe l       .text  00000000 
e0001602 l       .text  00000000 
e0001602 l       .text  00000000 
e0001604 l       .text  00000000 
e0001608 l       .text  00000000 
e0001608 l       .text  00000000 
e000160a l       .text  00000000 
e000160c l       .text  00000000 
e000160c l       .text  00000000 
e0001614 l       .text  00000000 
e0001614 l       .text  00000000 
e0001618 l       .text  00000000 
e0001618 l       .text  00000000 
e0001622 l       .text  00000000 
e0001626 l       .text  00000000 
e0001626 l       .text  00000000 
e000162a l       .text  00000000 
e000162a l       .text  00000000 
e000162e l       .text  00000000 
e0001632 l       .text  00000000 
e0001632 l       .text  00000000 
e0001636 l       .text  00000000 
e000163a l       .text  00000000 
e000163a l       .text  00000000 
e000163c l       .text  00000000 
e0001640 l       .text  00000000 
e0001640 l       .text  00000000 
e0001644 l       .text  00000000 
e0001648 l       .text  00000000 
e000164c l       .text  00000000 
e0001650 l       .text  00000000 
e0001654 l       .text  00000000 
e0001656 l       .text  00000000 
e0001656 l       .text  00000000 
e000165a l       .text  00000000 
e000165a l       .text  00000000 
e000165c l       .text  00000000 
e000165e l       .text  00000000 
e000165e l       .text  00000000 
e0001666 l       .text  00000000 
e000166a l       .text  00000000 
e000166a l       .text  00000000 
e000166c l       .text  00000000 
e0001670 l       .text  00000000 
e0001670 l       .text  00000000 
e0001672 l       .text  00000000 
e0001674 l       .text  00000000 
e0001674 l       .text  00000000 
e0001676 l       .text  00000000 
e0001676 l       .text  00000000 
e000167a l       .text  00000000 
e000167a l       .text  00000000 
e000167c l       .text  00000000 
e000167c l       .text  00000000 
e0001680 l       .text  00000000 
e0001680 l       .text  00000000 
e0001682 l       .text  00000000 
e0001682 l       .text  00000000 
e0001686 l       .text  00000000 
e0001686 l       .text  00000000 
e0001688 l       .text  00000000 
e0001688 l       .text  00000000 
e000168a l       .text  00000000 
e000168a l       .text  00000000 
e000168c l       .text  00000000 
e000168c l       .text  00000000 
00004f90 l       .debug_loc     00000000 
00004fb6 l       .debug_loc     00000000 
00004fdc l       .debug_loc     00000000 
00005002 l       .debug_loc     00000000 
00005028 l       .debug_loc     00000000 
00005047 l       .debug_loc     00000000 
00005066 l       .debug_loc     00000000 
0000508c l       .debug_loc     00000000 
000050a7 l       .debug_loc     00000000 
000050f0 l       .debug_loc     00000000 
00005116 l       .debug_loc     00000000 
00005138 l       .debug_loc     00000000 
00005153 l       .debug_loc     00000000 
0000516e l       .debug_loc     00000000 
00005189 l       .debug_loc     00000000 
000051a4 l       .debug_loc     00000000 
000051bf l       .debug_loc     00000000 
000051da l       .debug_loc     00000000 
0000522a l       .debug_loc     00000000 
00005245 l       .debug_loc     00000000 
00005260 l       .debug_loc     00000000 
00005282 l       .debug_loc     00000000 
0000529d l       .debug_loc     00000000 
000052b8 l       .debug_loc     00000000 
000052d3 l       .debug_loc     00000000 
000052ee l       .debug_loc     00000000 
00005309 l       .debug_loc     00000000 
00005328 l       .debug_loc     00000000 
00005347 l       .debug_loc     00000000 
0000536d l       .debug_loc     00000000 
00005388 l       .debug_loc     00000000 
000053d1 l       .debug_loc     00000000 
000053f7 l       .debug_loc     00000000 
00005412 l       .debug_loc     00000000 
0000542d l       .debug_loc     00000000 
00005448 l       .debug_loc     00000000 
00005463 l       .debug_loc     00000000 
0000547e l       .debug_loc     00000000 
00005499 l       .debug_loc     00000000 
000054b4 l       .debug_loc     00000000 
000054d3 l       .debug_loc     00000000 
000054f2 l       .debug_loc     00000000 
0000550d l       .debug_loc     00000000 
00005554 l       .debug_loc     00000000 
0000556f l       .debug_loc     00000000 
0000558a l       .debug_loc     00000000 
000055b0 l       .debug_loc     00000000 
000055cb l       .debug_loc     00000000 
000055e6 l       .debug_loc     00000000 
00005601 l       .debug_loc     00000000 
0000561c l       .debug_loc     00000000 
00005637 l       .debug_loc     00000000 
0000565d l       .debug_loc     00000000 
00005678 l       .debug_loc     00000000 
0000569e l       .debug_loc     00000000 
000056c4 l       .debug_loc     00000000 
000056e1 l       .debug_loc     00000000 
0000573c l       .debug_loc     00000000 
00005757 l       .debug_loc     00000000 
0000577d l       .debug_loc     00000000 
000057a3 l       .debug_loc     00000000 
000057be l       .debug_loc     00000000 
000057e4 l       .debug_loc     00000000 
00005841 l       .debug_loc     00000000 
0000585c l       .debug_loc     00000000 
00005877 l       .debug_loc     00000000 
000058d4 l       .debug_loc     00000000 
000058f1 l       .debug_loc     00000000 
0000590c l       .debug_loc     00000000 
00005953 l       .debug_loc     00000000 
0000596e l       .debug_loc     00000000 
00005989 l       .debug_loc     00000000 
000059a4 l       .debug_loc     00000000 
000059bf l       .debug_loc     00000000 
000059da l       .debug_loc     00000000 
00005a00 l       .debug_loc     00000000 
00005a1b l       .debug_loc     00000000 
00005a36 l       .debug_loc     00000000 
00005a51 l       .debug_loc     00000000 
00005a6c l       .debug_loc     00000000 
00005a99 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000044f8 l       .debug_str     00000000 
000000af l       .debug_str     00000000 
000007d0 l       .debug_ranges  00000000 
00004514 l       .debug_str     00000000 
0000451e l       .debug_str     00000000 
00004528 l       .debug_str     00000000 
00000a8d l       .debug_str     00000000 
00000856 l       .debug_str     00000000 
00000864 l       .debug_str     00000000 
00000a9a l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00004532 l       .debug_str     00000000 
000045ed l       .debug_str     00000000 
000045f7 l       .debug_str     00000000 
0000417e l       .debug_str     00000000 
0000454c l       .debug_str     00000000 
00004557 l       .debug_str     00000000 
000040b8 l       .debug_str     00000000 
000040b6 l       .debug_str     00000000 
00004563 l       .debug_str     00000000 
00004575 l       .debug_str     00000000 
00004585 l       .debug_str     00000000 
0000453a l       .debug_str     00000000 
000035a7 l       .debug_str     00000000 
00003a47 l       .debug_str     00000000 
00000c6c l       .debug_str     00000000 
000033b1 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00003aa0 l       .debug_str     00000000 
00003d39 l       .debug_str     00000000 
000041c9 l       .debug_str     00000000 
000045b7 l       .debug_str     00000000 
00003a0a l       .debug_str     00000000 
000045bc l       .debug_str     00000000 
000045c2 l       .debug_str     00000000 
00004579 l       .debug_str     00000000 
000014fe l       .debug_str     00000000 
00004589 l       .debug_str     00000000 
00000760 l       .debug_ranges  00000000 
00003a9b l       .debug_str     00000000 
00000748 l       .debug_ranges  00000000 
000041fe l       .debug_str     00000000 
000045c7 l       .debug_str     00000000 
000045ce l       .debug_str     00000000 
00000778 l       .debug_ranges  00000000 
000045a8 l       .debug_str     00000000 
000045d6 l       .debug_str     00000000 
000045da l       .debug_str     00000000 
000045de l       .debug_str     00000000 
000045e3 l       .debug_str     00000000 
000045e8 l       .debug_str     00000000 
000045f2 l       .debug_str     00000000 
000045af l       .debug_str     00000000 
00000ba9 l       .debug_str     00000000 
00003ea2 l       .debug_str     00000000 
000045fd l       .debug_str     00000000 
00000790 l       .debug_ranges  00000000 
00004602 l       .debug_str     00000000 
00004595 l       .debug_str     00000000 
00003a69 l       .debug_str     00000000 
00003ea9 l       .debug_str     00000000 
000007a8 l       .debug_ranges  00000000 
000039cf l       .debug_str     00000000 
00003dbc l       .debug_str     00000000 
00003a82 l       .debug_str     00000000 
00003a8a l       .debug_str     00000000 
000036d9 l       .debug_str     00000000 
00000a91 l       .debug_str     00000000 
00000a7a l       .debug_str     00000000 
000007cc l       .debug_frame   00000000 
e00014bc l       .text  00000000 
e000151e l       .text  00000000 
e00015cc l       .text  00000000 
e000168c l       .text  00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
00005ab9 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000460a l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00000830 l       .debug_ranges  00000000 
00004634 l       .debug_str     00000000 
00004694 l       .debug_str     00000000 
00004688 l       .debug_str     00000000 
00004640 l       .debug_str     00000000 
0000464d l       .debug_str     00000000 
00004661 l       .debug_str     00000000 
00004672 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
000046a2 l       .debug_str     00000000 
00000a91 l       .debug_str     00000000 
00000a7a l       .debug_str     00000000 
000046b2 l       .debug_str     00000000 
000046d0 l       .debug_str     00000000 
000046e7 l       .debug_str     00000000 
000046f7 l       .debug_str     00000000 
00004707 l       .debug_str     00000000 
00004715 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00004723 l       .debug_str     00000000 
00004738 l       .debug_str     00000000 
0000474f l       .debug_str     00000000 
00000a9a l       .debug_str     00000000 
00004768 l       .debug_str     00000000 
00004784 l       .debug_str     00000000 
00000882 l       .debug_str     00000000 
00003e17 l       .debug_str     00000000 
00003e5b l       .debug_str     00000000 
00004793 l       .debug_str     00000000 
00000890 l       .debug_frame   00000000 
00000000 l    df *ABS*  00000000 static_critical_sec_mmio.c
00000000 l       .debug_str     00000000 
00003baa l       .debug_str     00000000 
000000af l       .debug_str     00000000 
00003be8 l       .debug_str     00000000 
00003c1b l       .debug_str     00000000 
00003bf5 l       .debug_str     00000000 
00003c09 l       .debug_str     00000000 
00003c00 l       .debug_str     00000000 
00003d48 l       .debug_str     00000000 
00003cfd l       .debug_str     00000000 
00003c15 l       .debug_str     00000000 
00000135 l       .debug_str     00000000 
00000a84 l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
e0000b44 g     F .text  00000046 sec_mmio_read32
e0000414 g     F .text  0000007a external_irq_handler
e00008ac g     F .text  0000001c dif_spi_host_output_set_enabled
e00015cc g     F .text  000000c0 memrchr
00008000 g       *ABS*  00000000 _stack_len
e0001434 g     F .text  00000088 memcpy
e0003bf8 g       .bss   00000000 _bss_start
e0000d4e g     F .text  00000034 base_log_internal_dv
e000a000 g       .stack 00000000 stack
e0000ca6 g     F .text  00000006 abort
e0000614 g     F .text  000000be dif_spi_host_fifo_write
e0000080 g       *ABS*  00000000 _entry_point
e0003c08 g       .bss   00000000 _bss_end
e00005fe g     F .text  00000008 otp_read32
e0001c24 g     O .data  00000084 status_codes
e00005b4 g     F .text  0000002e uart_init
e0000aea g     F .text  0000005a sec_mmio_init
e000151e g     F .text  000000ae memchr
e00000cc g       .text  00000000 _start
e0000900 g     F .text  000001ea dif_spi_host_transaction
e00006d2 g     F .text  00000158 dif_spi_host_fifo_read
e0000dd2 g     F .text  0000048e base_vfprintf
e0000db8 g     F .text  0000001a base_vprintf
e0000614  w    F .text  000000be spi_host_fifo_write_alias
e0001ca8 g     O .static_critical.sec_mmio_ctx  00001f50 sec_mmio_ctx
e00014bc g     F .text  00000062 memset
e00001c6 g     F .text  0000024e main
e0001c18 g     O .rodata        00000004 kUartNCOValue
e0000084 g       .vectors       00000000 _vectors_end
e0010000 g       .vectors       00000000 _stack_start
e00006d2  w    F .text  00000158 spi_host_fifo_read_alias
00002000 g       *ABS*  00000000 _min_stack
e000082a g     F .text  00000082 dif_spi_host_configure
e0001c1c g     O .rodata        00000004 kDeviceTestStatusAddress
e0000d86 g     F .text  00000032 base_printf
e0010010 g       *ABS*  00000000 fromhost
e0001c20 g     O .rodata        00000004 kDeviceLogBypassUartAddress
00020008 g       *ABS*  00000000 tohost
e000048e g     F .text  000000c8 rom_printf
e00013c2 g     F .text  00000072 status_extract
e0000606 g     F .text  0000000e dif_spi_host_init
e000a000 g       .stack 00000000 _stack
e0000104 g     F .text  000000c2 init_spi_host
e0000000 g       .vectors       00000000 _vectors_start
e0000bf8 g     F .text  000000ae test_status_set
e0000556 g     F .text  0000005e pinmux_init
e0000cac g     F .text  000000a2 base_log_internal_core
e00005e2 g     F .text  0000001c uart_putchar



Disassembly of section .vectors:

e0000000 <_vectors_start>:
e0000000:       0840006f                j       e0000084 <_vectors_end>
e0000004:       0800006f                j       e0000084 <_vectors_end>
e0000008:       07c0006f                j       e0000084 <_vectors_end>
e000000c:       0780006f                j       e0000084 <_vectors_end>
e0000010:       0740006f                j       e0000084 <_vectors_end>
e0000014:       0700006f                j       e0000084 <_vectors_end>
e0000018:       06c0006f                j       e0000084 <_vectors_end>
e000001c:       0680006f                j       e0000084 <_vectors_end>
e0000020:       0640006f                j       e0000084 <_vectors_end>
e0000024:       0600006f                j       e0000084 <_vectors_end>
e0000028:       05c0006f                j       e0000084 <_vectors_end>
e000002c:       3e80006f                j       e0000414 <external_irq_handler>
e0000030:       0540006f                j       e0000084 <_vectors_end>
e0000034:       0500006f                j       e0000084 <_vectors_end>
e0000038:       04c0006f                j       e0000084 <_vectors_end>
e000003c:       0480006f                j       e0000084 <_vectors_end>
e0000040:       0440006f                j       e0000084 <_vectors_end>
e0000044:       0400006f                j       e0000084 <_vectors_end>
e0000048:       03c0006f                j       e0000084 <_vectors_end>
e000004c:       0380006f                j       e0000084 <_vectors_end>
e0000050:       0340006f                j       e0000084 <_vectors_end>
e0000054:       0300006f                j       e0000084 <_vectors_end>
e0000058:       02c0006f                j       e0000084 <_vectors_end>
e000005c:       0280006f                j       e0000084 <_vectors_end>
e0000060:       0240006f                j       e0000084 <_vectors_end>
e0000064:       0200006f                j       e0000084 <_vectors_end>
e0000068:       01c0006f                j       e0000084 <_vectors_end>
e000006c:       0180006f                j       e0000084 <_vectors_end>
e0000070:       0140006f                j       e0000084 <_vectors_end>
e0000074:       0100006f                j       e0000084 <_vectors_end>
e0000078:       00c0006f                j       e0000084 <_vectors_end>
e000007c:       0080006f                j       e0000084 <_vectors_end>
e0000080:       0060006f                j       e0000086 <reset_handler>

Disassembly of section .text:

e0000084 <default_exc_handler>:
default_exc_handler():
e0000084:       a8ad                    j       e00000fe <sleep_loop>

e0000086 <reset_handler>:
reset_handler():
e0000086:       4081                    li      ra,0
e0000088:       8106                    mv      sp,ra
e000008a:       8186                    mv      gp,ra
e000008c:       8206                    mv      tp,ra
e000008e:       8286                    mv      t0,ra
e0000090:       8306                    mv      t1,ra
e0000092:       8386                    mv      t2,ra
e0000094:       8406                    mv      s0,ra
e0000096:       8486                    mv      s1,ra
e0000098:       8506                    mv      a0,ra
e000009a:       8586                    mv      a1,ra
e000009c:       8606                    mv      a2,ra
e000009e:       8686                    mv      a3,ra
e00000a0:       8706                    mv      a4,ra
e00000a2:       8786                    mv      a5,ra
e00000a4:       8806                    mv      a6,ra
e00000a6:       8886                    mv      a7,ra
e00000a8:       8906                    mv      s2,ra
e00000aa:       8986                    mv      s3,ra
e00000ac:       8a06                    mv      s4,ra
e00000ae:       8a86                    mv      s5,ra
e00000b0:       8b06                    mv      s6,ra
e00000b2:       8b86                    mv      s7,ra
e00000b4:       8c06                    mv      s8,ra
e00000b6:       8c86                    mv      s9,ra
e00000b8:       8d06                    mv      s10,ra
e00000ba:       8d86                    mv      s11,ra
e00000bc:       8e06                    mv      t3,ra
e00000be:       8e86                    mv      t4,ra
e00000c0:       8f06                    mv      t5,ra
e00000c2:       8f86                    mv      t6,ra
e00000c4:       00010117                auipc   sp,0x10
e00000c8:       f3c10113                addi    sp,sp,-196 # e0010000 <_stack_start>

e00000cc <_start>:
e00000cc:       00004d17                auipc   s10,0x4
e00000d0:       b2cd0d13                addi    s10,s10,-1236 # e0003bf8 <spi_host>
e00000d4:       00004d97                auipc   s11,0x4
e00000d8:       b34d8d93                addi    s11,s11,-1228 # e0003c08 <init_spi_host.kLogFields>
e00000dc:       01bd5763                bge     s10,s11,e00000ea <main_entry>

e00000e0 <zero_loop>:
zero_loop():
e00000e0:       /-> 000d2023            sw      zero,0(s10)
e00000e4:       |   0d11                        addi    s10,s10,4
e00000e6:       \-- ffaddde3            bge     s11,s10,e00000e0 <zero_loop>

e00000ea <main_entry>:
zero_loop_end():
e00000ea:       4501                    li      a0,0
e00000ec:       4581                    li      a1,0
e00000ee:       0d8000ef                jal     ra,e00001c6 <main>
e00000f2:       c11c0537                lui     a0,0xc11c0
e00000f6:       0561                    addi    a0,a0,24
e00000f8:       4285                    li      t0,1
e00000fa:       00552023                sw      t0,0(a0) # c11c0000 <fromhost+0xe11afff0>

e00000fe <sleep_loop>:
sleep_loop():
e00000fe:       /-> 10500073            wfi
e0000102:       \-- bff5                        j       e00000fe <sleep_loop>

e0000104 <init_spi_host>:
init_spi_host():
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:29
#include "hw/top_earlgrey/sw/autogen/top_earlgrey.h"

static dif_spi_host_t spi_host;

void init_spi_host(dif_spi_host_t *spi_host,
                   uint32_t peripheral_clock_freq_hz) {
e0000104:                 7179                  addi    sp,sp,-48
e0000106:                 d606                  sw      ra,44(sp)
e0000108:                 d422                  sw      s0,40(sp)
e000010a:                 d226                  sw      s1,36(sp)
e000010c:                 d04a                  sw      s2,32(sp)
e000010e:                 842a                  mv      s0,a0
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:31
  dif_spi_host_config_t config = {
      .spi_clock = peripheral_clock_freq_hz / 2,
e0000110:                 0015d513              srli    a0,a1,0x1
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:38
      .chip_select = {.idle = 2, .trail = 2, .lead = 2},
      .full_cycle = true,
      .cpha = true,
      .cpol = true,
  };
  CHECK_DIF_OK(dif_spi_host_configure(spi_host, config));
e0000114:                 c42a                  sw      a0,8(sp)
e0000116:                 c62e                  sw      a1,12(sp)
e0000118:                 01020537              lui     a0,0x1020
e000011c:                 20250513              addi    a0,a0,514 # 1020202 <tohost+0x10001fa>
e0000120:                 c82a                  sw      a0,16(sp)
e0000122:                 10100513              li      a0,257
e0000126:                 00a11a23              sh      a0,20(sp)
e000012a:                 002c                  addi    a1,sp,8
e000012c:                 8522                  mv      a0,s0
e000012e:                 2df5                  jal     e000082a <dif_spi_host_configure>
e0000130:                 00002917              auipc   s2,0x2
e0000134:                 af090913              addi    s2,s2,-1296 # e0001c20 <kDeviceLogBypassUartAddress>
e0000138:       /-------- cd1d                  beqz    a0,e0000176 <init_spi_host+0x72>
e000013a:       |         84aa                  mv      s1,a0
e000013c:       |         00092503              lw      a0,0(s2)
e0000140:       |     /-- c911                  beqz    a0,e0000154 <init_spi_host+0x50>
e0000142:       |     |   00004517              auipc   a0,0x4
e0000146:       |     |   ac650513              addi    a0,a0,-1338 # e0003c08 <init_spi_host.kLogFields>
e000014a:       |     |   4585                  li      a1,1
e000014c:       |     |   8626                  mv      a2,s1
e000014e:       |     |   401000ef              jal     ra,e0000d4e <base_log_internal_dv>
e0000152:       |  /--|-- a829                  j       e000016c <init_spi_host+0x68>
e0000154:       |  |  \-> 00001597              auipc   a1,0x1
e0000158:       |  |      70458593              addi    a1,a1,1796 # e0001858 <memrchr+0x28c>
e000015c:       |  |      0028                  addi    a0,sp,8
e000015e:       |  |      4651                  li      a2,20
e0000160:       |  |      2d4010ef              jal     ra,e0001434 <memcpy>
e0000164:       |  |      0028                  addi    a0,sp,8
e0000166:       |  |      85a6                  mv      a1,s1
e0000168:       |  |      345000ef              jal     ra,e0000cac <base_log_internal_core>
e000016c:       |  \----> 6531                  lui     a0,0xc
e000016e:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000172:       |         287000ef              jal     ra,e0000bf8 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:39
  CHECK_DIF_OK(dif_spi_host_output_set_enabled(spi_host, /*enabled=*/true));
e0000176:       \-------> 4585                  li      a1,1
e0000178:                 8522                  mv      a0,s0
e000017a:                 2f0d                  jal     e00008ac <dif_spi_host_output_set_enabled>
e000017c:       /-------- cd1d                  beqz    a0,e00001ba <init_spi_host+0xb6>
e000017e:       |         842a                  mv      s0,a0
e0000180:       |         00092503              lw      a0,0(s2)
e0000184:       |     /-- c911                  beqz    a0,e0000198 <init_spi_host+0x94>
e0000186:       |     |   00004517              auipc   a0,0x4
e000018a:       |     |   a9650513              addi    a0,a0,-1386 # e0003c1c <init_spi_host.kLogFields.2>
e000018e:       |     |   4585                  li      a1,1
e0000190:       |     |   8622                  mv      a2,s0
e0000192:       |     |   3bd000ef              jal     ra,e0000d4e <base_log_internal_dv>
e0000196:       |  /--|-- a829                  j       e00001b0 <init_spi_host+0xac>
e0000198:       |  |  \-> 00001597              auipc   a1,0x1
e000019c:       |  |      6d458593              addi    a1,a1,1748 # e000186c <memrchr+0x2a0>
e00001a0:       |  |      0028                  addi    a0,sp,8
e00001a2:       |  |      4651                  li      a2,20
e00001a4:       |  |      290010ef              jal     ra,e0001434 <memcpy>
e00001a8:       |  |      0028                  addi    a0,sp,8
e00001aa:       |  |      85a2                  mv      a1,s0
e00001ac:       |  |      301000ef              jal     ra,e0000cac <base_log_internal_core>
e00001b0:       |  \----> 6531                  lui     a0,0xc
e00001b2:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00001b6:       |         243000ef              jal     ra,e0000bf8 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:40
}
e00001ba:       \-------> 5902                  lw      s2,32(sp)
e00001bc:                 5492                  lw      s1,36(sp)
e00001be:                 5422                  lw      s0,40(sp)
e00001c0:                 50b2                  lw      ra,44(sp)
e00001c2:                 6145                  addi    sp,sp,48
e00001c4:                 8082                  ret

e00001c6 <main>:
main():
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:43


int main(int argc, char **argv) {
e00001c6:                    7171                       addi    sp,sp,-176
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:45
    
  sec_mmio_init();
e00001c8:                    d706                       sw      ra,172(sp)
e00001ca:                    d522                       sw      s0,168(sp)
e00001cc:                    d326                       sw      s1,164(sp)
e00001ce:                    d14a                       sw      s2,160(sp)
e00001d0:                    cf4e                       sw      s3,156(sp)
e00001d2:                    cd52                       sw      s4,152(sp)
e00001d4:                    cb56                       sw      s5,148(sp)
e00001d6:                    c95a                       sw      s6,144(sp)
e00001d8:                    c75e                       sw      s7,140(sp)
e00001da:                    c562                       sw      s8,136(sp)
e00001dc:                    c366                       sw      s9,132(sp)
e00001de:                    c16a                       sw      s10,128(sp)
e00001e0:                    deee                       sw      s11,124(sp)
e00001e2:                    1900                       addi    s0,sp,176
e00001e4:                    107000ef           jal     ra,e0000aea <sec_mmio_init>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:46
  pinmux_init();
e00001e8:                    26bd                       jal     e0000556 <pinmux_init>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:47
  uart_init(kUartNCOValue);
e00001ea:                    00002517           auipc   a0,0x2
e00001ee:                    a2e50513           addi    a0,a0,-1490 # e0001c18 <kUartNCOValue>
e00001f2:                    4108                       lw      a0,0(a0)
e00001f4:                    26c1                       jal     e00005b4 <uart_init>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:60
  start      = (int *) 0xff000010;
  debug_mode = (int *) 0xff000014;
  
  
  // Setup spi host configuration
  rom_printf("Testing spi_host.\r\n");
e00001f6:                    00001517           auipc   a0,0x1
e00001fa:                    55850513           addi    a0,a0,1368 # e000174e <memrchr+0x182>
e00001fe:                    2c41                       jal     e000048e <rom_printf>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:67
  uint32_t data;
  uint64_t clkHz;
  base_addr = TOP_EARLGREY_SPI_HOST0_BASE_ADDR;
  clkHz = 10000000;
 
  CHECK_DIF_OK(dif_spi_host_init(mmio_region_from_addr(base_addr), &spi_host));
e0000200:                    00004597           auipc   a1,0x4
e0000204:                    9f858593           addi    a1,a1,-1544 # e0003bf8 <spi_host>
e0000208:                    c0300537           lui     a0,0xc0300
e000020c:                    2eed                       jal     e0000606 <dif_spi_host_init>
e000020e:                    00002597           auipc   a1,0x2
e0000212:                    a1258593           addi    a1,a1,-1518 # e0001c20 <kDeviceLogBypassUartAddress>
e0000216:                    0005a903           lw      s2,0(a1)
e000021a:          /-------- c121                       beqz    a0,e000025a <main+0x94>
e000021c:          |         84aa                       mv      s1,a0
e000021e:          |     /-- 00090b63           beqz    s2,e0000234 <main+0x6e>
e0000222:          |     |   00004517           auipc   a0,0x4
e0000226:          |     |   a0e50513           addi    a0,a0,-1522 # e0003c30 <main.kLogFields>
e000022a:          |     |   4585                       li      a1,1
e000022c:          |     |   8626                       mv      a2,s1
e000022e:          |     |   321000ef           jal     ra,e0000d4e <base_log_internal_dv>
e0000232:          |  /--|-- a839                       j       e0000250 <main+0x8a>
e0000234:          |  |  \-> 00001597           auipc   a1,0x1
e0000238:          |  |      64c58593           addi    a1,a1,1612 # e0001880 <memrchr+0x2b4>
e000023c:          |  |      f9040513           addi    a0,s0,-112
e0000240:          |  |      4651                       li      a2,20
e0000242:          |  |      1f2010ef           jal     ra,e0001434 <memcpy>
e0000246:          |  |      f9040513           addi    a0,s0,-112
e000024a:          |  |      85a6                       mv      a1,s1
e000024c:          |  |      261000ef           jal     ra,e0000cac <base_log_internal_core>
e0000250:          |  \----> 6531                       lui     a0,0xc
e0000252:          |         aad50513           addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000256:          |         1a3000ef           jal     ra,e0000bf8 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:68
  init_spi_host(&spi_host, (uint32_t)clkHz);
e000025a:          \-------> 00004b17           auipc   s6,0x4
e000025e:                    99eb0b13           addi    s6,s6,-1634 # e0003bf8 <spi_host>
e0000262:                    00989537           lui     a0,0x989
e0000266:                    68050593           addi    a1,a0,1664 # 989680 <tohost+0x969678>
e000026a:                    855a                       mv      a0,s6
e000026c:                    3d61                       jal     e0000104 <init_spi_host>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:71
  int num_iter = 156;
  int buf_size = 63;
  uint32_t buf[buf_size];
e000026e:                    850a                       mv      a0,sp
e0000270:                    f0050b93           addi    s7,a0,-256
e0000274:                    815e                       mv      sp,s7
e0000276:                    4481                       li      s1,0
e0000278:                    4d01                       li      s10,0
e000027a:                    ff000db7           lui     s11,0xff000
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:77
  dif_spi_host_segment_t segments[3];
  uint32_t addr = 0;
  uint32_t addr_swap = 0;
  int index = 0;
  
  *address = 0;
e000027e:                    000da623           sw      zero,12(s11) # ff00000c <fromhost+0x1efefffc>
e0000282:                    00193593           seqz    a1,s2
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:78
  for(int j=0;j<num_iter;j++){
e0000286:                    f6b42223           sw      a1,-156(s0)
e000028a:                    f0450993           addi    s3,a0,-252
e000028e:                    0fc00a93           li      s5,252
e0000292:                    6541                       lui     a0,0x10
e0000294:                    f0050913           addi    s2,a0,-256 # ff00 <_stack_len+0x7f00>
e0000298:                    4c05                       li      s8,1
e000029a:                    03c00a13           li      s4,60
e000029e:                    00001517           auipc   a0,0x1
e00002a2:                    5f650513           addi    a0,a0,1526 # e0001894 <memrchr+0x2c8>
e00002a6:                    f4a42c23           sw      a0,-168(s0)
e00002aa:                    6531                       lui     a0,0xc
e00002ac:                    aad50513           addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00002b0:                    f6a42023           sw      a0,-160(s0)
e00002b4:                    00004517           auipc   a0,0x4
e00002b8:                    99050513           addi    a0,a0,-1648 # e0003c44 <main.kLogFields.7>
e00002bc:                    f4a42e23           sw      a0,-164(s0)
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:79
     addr = j*sizeof(buf);
e00002c0:       /----------> 035d0533           mul     a0,s10,s5
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
 * @param bitfield Bitfield to reverse bytes of.
 * @return `bitfield` with the order of bytes reversed.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_byteswap32(uint32_t bitfield) {
  return __builtin_bswap32(bitfield);
e00002c4:       |            00855593           srli    a1,a0,0x8
e00002c8:       |            0125f5b3           and     a1,a1,s2
e00002cc:       |            01855613           srli    a2,a0,0x18
e00002d0:       |            8dd1                       or      a1,a1,a2
e00002d2:       |            00851613           slli    a2,a0,0x8
e00002d6:       |            00ff06b7           lui     a3,0xff0
e00002da:       |            8e75                       and     a2,a2,a3
e00002dc:       |            0562                       slli    a0,a0,0x18
e00002de:       |            8d51                       or      a0,a0,a2
e00002e0:       |            00b56cb3           or      s9,a0,a1
main():
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:81
     addr_swap = bitfield_byteswap32(addr);
     segments[0] = (dif_spi_host_segment_t) {
e00002e4:       |            f8140513           addi    a0,s0,-127
e00002e8:       |            463d                       li      a2,15
e00002ea:       |            4581                       li      a1,0
e00002ec:       |            1d0010ef           jal     ra,e00014bc <memset>
e00002f0:       |            f8042823           sw      zero,-112(s0)
e00002f4:       |            454d                       li      a0,19
e00002f6:       |            f8a40a23           sb      a0,-108(s0)
e00002fa:       |            f8140593           addi    a1,s0,-127
e00002fe:       |            463d                       li      a2,15
e0000300:       |            f9540513           addi    a0,s0,-107
e0000304:       |            130010ef           jal     ra,e0001434 <memcpy>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:85
                   .type = kDifSpiHostSegmentTypeOpcode,
                   .opcode = 0x13,
     };
     segments[1] = (dif_spi_host_segment_t) {
e0000308:       |            fb842223           sw      s8,-92(s0)
e000030c:       |            fa042423           sw      zero,-88(s0)
e0000310:       |            fb842623           sw      s8,-84(s0)
e0000314:       |            fb942823           sw      s9,-80(s0)
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:94
                          .width = kDifSpiHostWidthStandard,
                          .mode = kDifSpiHostAddrMode4b,
                          .address = addr_swap,
                      },
     }; 
     segments[2] = (dif_spi_host_segment_t) {
e0000318:       |            4511                       li      a0,4
e000031a:       |            faa42c23           sw      a0,-72(s0)
e000031e:       |            fa042e23           sw      zero,-68(s0)
e0000322:       |            fd742023           sw      s7,-64(s0)
e0000326:       |            fd542223           sw      s5,-60(s0)
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:104
                          .buf = buf,
                          .length= sizeof(buf),
                      },
     };

     CHECK_DIF_OK(
e000032a:       |            f9040613           addi    a2,s0,-112
e000032e:       |            468d                       li      a3,3
e0000330:       |            855a                       mv      a0,s6
e0000332:       |            4581                       li      a1,0
e0000334:       |            23f1                       jal     e0000900 <dif_spi_host_transaction>
e0000336:       |  /-------- cd05                       beqz    a0,e000036e <main+0x1a8>
e0000338:       |  |         8caa                       mv      s9,a0
e000033a:       |  |         f6442503           lw      a0,-156(s0)
e000033e:       |  |     /-- e901                       bnez    a0,e000034e <main+0x188>
e0000340:       |  |     |   4585                       li      a1,1
e0000342:       |  |     |   f5c42503           lw      a0,-164(s0)
e0000346:       |  |     |   8666                       mv      a2,s9
e0000348:       |  |     |   207000ef           jal     ra,e0000d4e <base_log_internal_dv>
e000034c:       |  |  /--|-- a829                       j       e0000366 <main+0x1a0>
e000034e:       |  |  |  \-> f6840513           addi    a0,s0,-152
e0000352:       |  |  |      4651                       li      a2,20
e0000354:       |  |  |      f5842583           lw      a1,-168(s0)
e0000358:       |  |  |      0dc010ef           jal     ra,e0001434 <memcpy>
e000035c:       |  |  |      f6840513           addi    a0,s0,-152
e0000360:       |  |  |      85e6                       mv      a1,s9
e0000362:       |  |  |      14b000ef           jal     ra,e0000cac <base_log_internal_core>
e0000366:       |  |  \----> f6042503           lw      a0,-160(s0)
e000036a:       |  |         08f000ef           jal     ra,e0000bf8 <test_status_set>
e000036e:       |  \-------> 5575                       li      a0,-3
e0000370:       |            85ce                       mv      a1,s3
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:109
          dif_spi_host_transaction(&spi_host, 0, segments, ARRAYSIZE(segments)));
     
     for(int i = 0; i < buf_size; i += 3) {
       if(i + 2 < buf_size) {
         *payload_1 = buf[i];
e0000372:       |        /-> ffc5a603           lw      a2,-4(a1)
e0000376:       |        |   00cda023           sw      a2,0(s11)
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:110
         *payload_2 = buf[i+1];
e000037a:       |        |   4190                       lw      a2,0(a1)
e000037c:       |        |   00cda223           sw      a2,4(s11)
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:111
         *payload_3 = buf[i+2];
e0000380:       |        |   41d0                       lw      a2,4(a1)
e0000382:       |        |   00cda423           sw      a2,8(s11)
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:112
         *address   = index;
e0000386:       |        |   009da623           sw      s1,12(s11)
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:113
         *start = 0x1;
e000038a:       |        |   018da823           sw      s8,16(s11)
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:114
         index++;
e000038e:       |        |   0485                       addi    s1,s1,1
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:107
     for(int i = 0; i < buf_size; i += 3) {
e0000390:       |        |   050d                       addi    a0,a0,3
e0000392:       |        |   05b1                       addi    a1,a1,12
e0000394:       |        \-- fd456fe3           bltu    a0,s4,e0000372 <main+0x1ac>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:78
  for(int j=0;j<num_iter;j++){
e0000398:       |            0d05                       addi    s10,s10,1
e000039a:       |            09c00513           li      a0,156
e000039e:       \----------- f2ad11e3           bne     s10,a0,e00002c0 <main+0xfa>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:119
       }
     }
  } 

  CHECK_DIF_OK(dif_spi_host_output_set_enabled(&spi_host, false));  
e00003a2:                    00004517           auipc   a0,0x4
e00003a6:                    85650513           addi    a0,a0,-1962 # e0003bf8 <spi_host>
e00003aa:                    4581                       li      a1,0
e00003ac:                    2301                       jal     e00008ac <dif_spi_host_output_set_enabled>
e00003ae:          /-------- c129                       beqz    a0,e00003f0 <main+0x22a>
e00003b0:          |         84aa                       mv      s1,a0
e00003b2:          |         f6442503           lw      a0,-156(s0)
e00003b6:          |     /-- e911                       bnez    a0,e00003ca <main+0x204>
e00003b8:          |     |   00004517           auipc   a0,0x4
e00003bc:          |     |   8a050513           addi    a0,a0,-1888 # e0003c58 <main.kLogFields.10>
e00003c0:          |     |   4585                       li      a1,1
e00003c2:          |     |   8626                       mv      a2,s1
e00003c4:          |     |   18b000ef           jal     ra,e0000d4e <base_log_internal_dv>
e00003c8:          |  /--|-- a839                       j       e00003e6 <main+0x220>
e00003ca:          |  |  \-> 00001597           auipc   a1,0x1
e00003ce:          |  |      4de58593           addi    a1,a1,1246 # e00018a8 <memrchr+0x2dc>
e00003d2:          |  |      f6840513           addi    a0,s0,-152
e00003d6:          |  |      4651                       li      a2,20
e00003d8:          |  |      05c010ef           jal     ra,e0001434 <memcpy>
e00003dc:          |  |      f6840513           addi    a0,s0,-152
e00003e0:          |  |      85a6                       mv      a1,s1
e00003e2:          |  |      0cb000ef           jal     ra,e0000cac <base_log_internal_core>
e00003e6:          |  \----> 6531                       lui     a0,0xc
e00003e8:          |         aad50513           addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00003ec:          |         00d000ef           jal     ra,e0000bf8 <test_status_set>
/proc/self/cwd/sw/tests/opentitan/sram_spi_host_test/sram_spi_host_test.c:121
  return 0;
}
e00003f0:          \-------> 4501                       li      a0,0
e00003f2:                    f5040113           addi    sp,s0,-176
e00003f6:                    5df6                       lw      s11,124(sp)
e00003f8:                    4d0a                       lw      s10,128(sp)
e00003fa:                    4c9a                       lw      s9,132(sp)
e00003fc:                    4c2a                       lw      s8,136(sp)
e00003fe:                    4bba                       lw      s7,140(sp)
e0000400:                    4b4a                       lw      s6,144(sp)
e0000402:                    4ada                       lw      s5,148(sp)
e0000404:                    4a6a                       lw      s4,152(sp)
e0000406:                    49fa                       lw      s3,156(sp)
e0000408:                    590a                       lw      s2,160(sp)
e000040a:                    549a                       lw      s1,164(sp)
e000040c:                    542a                       lw      s0,168(sp)
e000040e:                    50ba                       lw      ra,172(sp)
e0000410:                    614d                       addi    sp,sp,176
e0000412:                    8082                       ret

e0000414 <external_irq_handler>:
external_irq_handler():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:338
  putchar('\n');

  return i;
}

void external_irq_handler(void)  {
e0000414:           1101                        addi    sp,sp,-32
e0000416:           ce2a                        sw      a0,28(sp)
e0000418:           cc2e                        sw      a1,24(sp)
e000041a:           ca32                        sw      a2,20(sp)
e000041c:           c836                        sw      a3,16(sp)
e000041e:           c63a                        sw      a4,12(sp)
e0000420:           c43e                        sw      a5,8(sp)
e0000422:           c242                        sw      a6,4(sp)
e0000424:           c8200537            lui     a0,0xc8200
e0000428:           09f00593            li      a1,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:355
  p_reg5 = (int *) 0x1040401C;

  // start of """Interrupt Service Routine"""
  
  plic_check = (int *) 0xC8200004;
  while(*plic_check != mbox_id);   //check wether the intr is the correct one
e000042c:       /-> 4150                        lw      a2,4(a0)
e000042e:       \-- feb61fe3            bne     a2,a1,e000042c <external_irq_handler+0x18>
e0000432:           10404537            lui     a0,0x10404
/proc/self/cwd/sw/tests/opentitan/common/utils.c:358
  
  p_reg = (int *) 0x10404020;
 *p_reg = 0x00000000;        //clearing the pending interrupt signal
e0000436:           02052023            sw      zero,32(a0) # 10404020 <tohost+0x103e4018>
e000043a:           c82005b7            lui     a1,0xc8200
e000043e:           09f00613            li      a2,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:360
 
 *plic_check = mbox_id;      //completing interrupt
e0000442:           c1d0                        sw      a2,4(a1)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:362
 
  a = *p_reg1;
e0000444:           450c                        lw      a1,8(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:363
  b = *p_reg2;
e0000446:           4910                        lw      a2,16(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:364
  c = *p_reg3;
e0000448:           4954                        lw      a3,20(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:365
  d = *p_reg4;
e000044a:           4d18                        lw      a4,24(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:366
  e = *p_reg5;
e000044c:           01c52803            lw      a6,28(a0)
e0000450:           baadc7b7            lui     a5,0xbaadc
e0000454:           0de78793            addi    a5,a5,222 # baadc0de <fromhost+0xdaacc0ce>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:369
  
  
  if( a == 0xBAADC0DE &&  b == 0xBAADC0DE && c == 0xBAADC0DE && d == 0xBAADC0DE && e == 0xBAADC0DE){
e0000458:           8dbd                        xor     a1,a1,a5
e000045a:           8e3d                        xor     a2,a2,a5
e000045c:           8dd1                        or      a1,a1,a2
e000045e:           00f6c633            xor     a2,a3,a5
e0000462:           8dd1                        or      a1,a1,a2
e0000464:           00f74633            xor     a2,a4,a5
e0000468:           8dd1                        or      a1,a1,a2
e000046a:           00f84633            xor     a2,a6,a5
e000046e:           8dd1                        or      a1,a1,a2
e0000470:       /-- e589                        bnez    a1,e000047a <external_irq_handler+0x66>
e0000472:       |   02450513            addi    a0,a0,36
e0000476:       |   4585                        li      a1,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:371
      p_reg = (int *) 0x10404024; // completion interrupt to ariane agent
     *p_reg = 0x00000001;
e0000478:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:375
  }
  
  return;
}
e000047a:       \-> 4812                        lw      a6,4(sp)
e000047c:           47a2                        lw      a5,8(sp)
e000047e:           4732                        lw      a4,12(sp)
e0000480:           46c2                        lw      a3,16(sp)
e0000482:           4652                        lw      a2,20(sp)
e0000484:           45e2                        lw      a1,24(sp)
e0000486:           4572                        lw      a0,28(sp)
e0000488:           6105                        addi    sp,sp,32
e000048a:           30200073            mret

e000048e <rom_printf>:
rom_printf():
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:13
#include <stdarg.h>
#include <stdint.h>

#include "sw/device/silicon_creator/lib/drivers/uart.h"

rom_error_t rom_printf(const char *format, ...) {
e000048e:                          715d                 addi    sp,sp,-80
e0000490:                          d606                 sw      ra,44(sp)
e0000492:                          d422                 sw      s0,40(sp)
e0000494:                          d226                 sw      s1,36(sp)
e0000496:                          d04a                 sw      s2,32(sp)
e0000498:                          ce4e                 sw      s3,28(sp)
e000049a:                          cc52                 sw      s4,24(sp)
e000049c:                          ca56                 sw      s5,20(sp)
e000049e:                          c85a                 sw      s6,16(sp)
e00004a0:                          c65e                 sw      s7,12(sp)
e00004a2:                          84aa                 mv      s1,a0
e00004a4:                          c6c6                 sw      a7,76(sp)
e00004a6:                          c4c2                 sw      a6,72(sp)
e00004a8:                          c2be                 sw      a5,68(sp)
e00004aa:                          c0ba                 sw      a4,64(sp)
e00004ac:                          de36                 sw      a3,60(sp)
e00004ae:                          dc32                 sw      a2,56(sp)
e00004b0:                          da2e                 sw      a1,52(sp)
e00004b2:                          1848                 addi    a0,sp,52
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:15
  va_list args;
  va_start(args, format);
e00004b4:                          c42a                 sw      a0,8(sp)
e00004b6:                          02500a13             li      s4,37
e00004ba:                          014c4537             lui     a0,0x14c4
e00004be:                          70d50913             addi    s2,a0,1805 # 14c470d <tohost+0x14a4705>
e00004c2:                          07800993             li      s3,120
e00004c6:                          00001b97             auipc   s7,0x1
e00004ca:                          3f6b8b93             addi    s7,s7,1014 # e00018bc <rom_printf.kHexTable>
e00004ce:                          07300a93             li      s5,115
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:17

  while (*format != '\0') {
e00004d2:       /----------------> 0004c503             lbu     a0,0(s1)
e00004d6:       |              /-- 01450663             beq     a0,s4,e00004e2 <rom_printf+0x54>
e00004da:       |  /-----------|-- c125                 beqz    a0,e000053a <rom_printf+0xac>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:19
    if (*format != '%') {
      uart_putchar(*format++);
e00004dc:       |  |           |   0485                 addi    s1,s1,1
e00004de:       |  |           |   2211                 jal     e00005e2 <uart_putchar>
e00004e0:       +--|-----------|-- bfcd                 j       e00004d2 <rom_printf+0x44>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:24
      continue;
    }

    ++format;  // Skip over the '%'.
    switch (*format++) {
e00004e2:       |  |           \-> 0014c503             lbu     a0,1(s1)
e00004e6:       |  |               00248b13             addi    s6,s1,2
e00004ea:       |  |     /-------- 03350763             beq     a0,s3,e0000518 <rom_printf+0x8a>
e00004ee:       |  |  /--|-------- 05551863             bne     a0,s5,e000053e <rom_printf+0xb0>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:27
      case 's': {
        // Print a null-terminated string.
        const char *str = va_arg(args, const char *);
e00004f2:       |  |  |  |         4522                 lw      a0,8(sp)
e00004f4:       |  |  |  |         00450593             addi    a1,a0,4
e00004f8:       |  |  |  |         c42e                 sw      a1,8(sp)
e00004fa:       |  |  |  |         410c                 lw      a1,0(a0)
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:28
        while (*str != '\0') {
e00004fc:       |  |  |  |         0005c503             lbu     a0,0(a1)
e0000500:       |  |  |  |         84da                 mv      s1,s6
e0000502:       +--|--|--|-------- d961                 beqz    a0,e00004d2 <rom_printf+0x44>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:17
  while (*format != '\0') {
e0000504:       |  |  |  |         00158413             addi    s0,a1,1
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:29
          uart_putchar(*str++);
e0000508:       |  |  |  |     /-> 0ff57513             andi    a0,a0,255
e000050c:       |  |  |  |     |   28d9                 jal     e00005e2 <uart_putchar>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:28
        while (*str != '\0') {
e000050e:       |  |  |  |     |   00044503             lbu     a0,0(s0)
e0000512:       |  |  |  |     |   0405                 addi    s0,s0,1
e0000514:       |  |  |  |     \-- f975                 bnez    a0,e0000508 <rom_printf+0x7a>
e0000516:       |  |  |  |  /----- a005                 j       e0000536 <rom_printf+0xa8>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:36
        break;
      }
      case 'x': {
        // Print an `unsigned int` in hexadecimal.
        static const char kHexTable[16] = "0123456789abcdef";
        unsigned int v = va_arg(args, unsigned int);
e0000518:       |  |  |  \--|----> 4522                 lw      a0,8(sp)
e000051a:       |  |  |     |      00450593             addi    a1,a0,4
e000051e:       |  |  |     |      c42e                 sw      a1,8(sp)
e0000520:       |  |  |     |      4104                 lw      s1,0(a0)
e0000522:       |  |  |     |      4421                 li      s0,8
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:39
        for (int i = 0; i < sizeof(v) * 2; ++i) {
          int shift = sizeof(v) * 8 - 4;
          uart_putchar(kHexTable[v >> shift]);
e0000524:       |  |  |     |  /-> 01c4d513             srli    a0,s1,0x1c
e0000528:       |  |  |     |  |   955e                 add     a0,a0,s7
e000052a:       |  |  |     |  |   00054503             lbu     a0,0(a0)
e000052e:       |  |  |     |  |   2855                 jal     e00005e2 <uart_putchar>
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:37
        for (int i = 0; i < sizeof(v) * 2; ++i) {
e0000530:       |  |  |     |  |   147d                 addi    s0,s0,-1
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:40
          v <<= 4;
e0000532:       |  |  |     |  |   0492                 slli    s1,s1,0x4
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:37
        for (int i = 0; i < sizeof(v) * 2; ++i) {
e0000534:       |  |  |     |  \-- f865                 bnez    s0,e0000524 <rom_printf+0x96>
e0000536:       |  |  |     \----> 84da                 mv      s1,s6
e0000538:       \--|--|----------- bf69                 j       e00004d2 <rom_printf+0x44>
e000053a:          \--|----------> 73900913             li      s2,1849
/proc/self/cwd/sw/device/silicon_creator/lib/rom_print.c:52
    }
  }

  va_end(args);
  return kErrorOk;
}
e000053e:             \----------> 854a                 mv      a0,s2
e0000540:                          4bb2                 lw      s7,12(sp)
e0000542:                          4b42                 lw      s6,16(sp)
e0000544:                          4ad2                 lw      s5,20(sp)
e0000546:                          4a62                 lw      s4,24(sp)
e0000548:                          49f2                 lw      s3,28(sp)
e000054a:                          5902                 lw      s2,32(sp)
e000054c:                          5492                 lw      s1,36(sp)
e000054e:                          5422                 lw      s0,40(sp)
e0000550:                          50b2                 lw      ra,44(sp)
e0000552:                          6161                 addi    sp,sp,80
e0000554:                          8082                 ret

e0000556 <pinmux_init>:
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:127
  abs_mmio_write32(
      kBase + PINMUX_MIO_OUTSEL_0_REG_OFFSET + output.mio * sizeof(uint32_t),
      output.outsel);
}

void pinmux_init(void) {
e0000556:              1141                     addi    sp,sp,-16
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:129
  uint32_t bootstrap_en =
      otp_read32(OTP_CTRL_PARAM_OWNER_SW_CFG_ROM_BOOTSTRAP_EN_OFFSET);
e0000558:              c606                     sw      ra,12(sp)
e000055a:              36400513                 li      a0,868
e000055e:              2045                     jal     e00005fe <otp_read32>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
  // > of statements.

  // The +r constraint tells the compiler that this is an "inout" parameter: it
  // means that not only does the black box depend on `val`, but it also mutates
  // it in an unspecified way.
  asm volatile("" : "+r"(val));
e0000560:              862a                     mv      a2,a0
e0000562:              73900593                 li      a1,1849
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:130
  if (launder32(bootstrap_en) == kHardenedBoolTrue) {
e0000566:       /----- 02b61b63                 bne     a2,a1,e000059c <pinmux_init+0x46>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:131
    HARDENED_CHECK_EQ(bootstrap_en, kHardenedBoolTrue);
e000056a:       |  /-- 00b50663                 beq     a0,a1,e0000576 <pinmux_init+0x20>
e000056e:       |  |   0000                     unimp
e0000570:       |  |   0000                     unimp
e0000572:       |  |   0000                     unimp
e0000574:       |  |   0000                     unimp
e0000576:       |  \-> c0460537                 lui     a0,0xc0460
e000057a:       |      4591                     li      a1,4
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
 *
 * @param addr the address to write to.
 * @param value the value to write.
 */
inline void abs_mmio_write32(uint32_t addr, uint32_t value) {
  *((volatile uint32_t *)addr) = value;
e000057c:       |      44b52c23                 sw      a1,1112(a0) # c0460458 <fromhost+0xe0450448>
e0000580:       |      44b52e23                 sw      a1,1116(a0)
e0000584:       |      46b52023                 sw      a1,1120(a0)
e0000588:       |      45e1                     li      a1,24
e000058a:       |      14b52023                 sw      a1,320(a0)
e000058e:       |      45e5                     li      a1,25
e0000590:       |      14b52223                 sw      a1,324(a0)
e0000594:       |      14850513                 addi    a0,a0,328
e0000598:       |      45e9                     li      a1,26
e000059a:       |      c10c                     sw      a1,0(a0)
e000059c:       \----> c0460537                 lui     a0,0xc0460
e00005a0:              45ed                     li      a1,27
e00005a2:              18b52823                 sw      a1,400(a0) # c0460190 <fromhost+0xe0450180>
e00005a6:              02d00593                 li      a1,45
e00005aa:              2eb52823                 sw      a1,752(a0)
pinmux_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/pinmux.c:144
    configure_input(kInputSwStrap2);
  }

  configure_input(kInputUart0);
  configure_output(kOutputUart0);
}
e00005ae:              40b2                     lw      ra,12(sp)
e00005b0:              0141                     addi    sp,sp,16
e00005b2:              8082                     ret

e00005b4 <uart_init>:
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:37
                   0u);
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_STATE_REG_OFFSET,
                   UINT32_MAX);
}

rom_error_t uart_init(uint32_t precalculated_nco) {
e00005b4:       c00005b7                lui     a1,0xc0000
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
e00005b8:       0005a823                sw      zero,16(a1) # c0000010 <fromhost+0xdfff0000>
e00005bc:       460d                    li      a2,3
e00005be:       d190                    sw      a2,32(a1)
e00005c0:       0205a423                sw      zero,40(a1)
e00005c4:       0205a823                sw      zero,48(a1)
e00005c8:       0005a223                sw      zero,4(a1)
e00005cc:       567d                    li      a2,-1
e00005ce:       c190                    sw      a2,0(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00005d0:       0542                    slli    a0,a0,0x10
e00005d2:       00156513                ori     a0,a0,1
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
e00005d6:       c988                    sw      a0,16(a1)
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:51
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_CTRL_REG_OFFSET, reg);

  // Disable interrupts.
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_INTR_ENABLE_REG_OFFSET,
                   0u);
  return kErrorOk;
e00005d8:       73900513                li      a0,1849
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
e00005dc:       0005a223                sw      zero,4(a1)
uart_init():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:51
e00005e0:       8082                    ret

e00005e2 <uart_putchar>:
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:66
  uint32_t reg =
      abs_mmio_read32(TOP_EARLGREY_UART0_BASE_ADDR + UART_STATUS_REG_OFFSET);
  return bitfield_bit32_read(reg, UART_STATUS_TXIDLE_BIT);
}

void uart_putchar(uint8_t byte) {
e00005e2:           c00005b7            lui     a1,0xc0000
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
e00005e6:       /-> 49d0                        lw      a2,20(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
e00005e8:       |   8a05                        andi    a2,a2,1
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:68
  // If the transmit FIFO is full, wait.
  while (uart_tx_full()) {
e00005ea:       \-- fe75                        bnez    a2,e00005e6 <uart_putchar+0x4>
e00005ec:           c00005b7            lui     a1,0xc0000
e00005f0:           01c58613            addi    a2,a1,28 # c000001c <fromhost+0xdfff000c>
abs_mmio_write32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:83
  *((volatile uint32_t *)addr) = value;
e00005f4:           c208                        sw      a0,0(a2)
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
  return *((volatile uint32_t *)addr);
e00005f6:       /-> 49c8                        lw      a0,20(a1)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e00005f8:       |   8921                        andi    a0,a0,8
uart_putchar():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:74
  }
  uint32_t reg = bitfield_field32_write(0, UART_WDATA_WDATA_FIELD, byte);
  abs_mmio_write32(TOP_EARLGREY_UART0_BASE_ADDR + UART_WDATA_REG_OFFSET, reg);

  // If the transmitter is active, wait.
  while (!uart_tx_idle()) {
e00005fa:       \-- dd75                        beqz    a0,e00005f6 <uart_putchar+0x14>
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/uart.c:76
  }
}
e00005fc:           8082                        ret

e00005fe <otp_read32>:
otp_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/otp.c:18
#include "hw/top_earlgrey/sw/autogen/top_earlgrey.h"
#include "otp_ctrl_regs.h"  // Generated.

enum { kBase = TOP_EARLGREY_OTP_CTRL_CORE_BASE_ADDR };

uint32_t otp_read32(uint32_t address) {
e00005fe:       c01315b7                lui     a1,0xc0131
/proc/self/cwd/sw/device/silicon_creator/lib/drivers/otp.c:19
  return sec_mmio_read32(kBase + OTP_CTRL_SW_CFG_WINDOW_REG_OFFSET + address);
e0000602:       952e                    add     a0,a0,a1
e0000604:       a381                    j       e0000b44 <sec_mmio_read32>

e0000606 <dif_spi_host_init>:
dif_spi_host_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:19
#include "spi_host_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_spi_host_init(mmio_region_t base_addr,
                               dif_spi_host_t *spi_host) {
  if (spi_host == NULL) {
e0000606:       /----- c581                     beqz    a1,e000060e <dif_spi_host_init+0x8>
e0000608:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:23
    return kDifBadArg;
  }

  spi_host->base_addr = base_addr;
e000060a:       |      c188                     sw      a0,0(a1)
e000060c:       |  /-- a011                     j       e0000610 <dif_spi_host_init+0xa>
e000060e:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_spi_host_autogen.c:26

  return kDifOk;
}
e0000610:          \-> 8532                     mv      a0,a2
e0000612:              8082                     ret

e0000614 <dif_spi_host_fifo_write>:
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:156
  uint32_t val = read_32((const void *)srcaddr);
  mmio_region_write32(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, val);
}

dif_result_t dif_spi_host_fifo_write(const dif_spi_host_t *spi_host,
                                     const void *src, uint16_t len) {
e0000614:                    468d                       li      a3,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:158
  uintptr_t ptr = (uintptr_t)src;
  if (spi_host == NULL || (src == NULL && len > 0)) {
e0000616:       /----------- cd45                       beqz    a0,e00006ce <dif_spi_host_fifo_write+0xba>
e0000618:       |            00b03733           snez    a4,a1
e000061c:       |            00163793           seqz    a5,a2
e0000620:       |            8f5d                       or      a4,a4,a5
e0000622:       +----------- c755                       beqz    a4,e00006ce <dif_spi_host_fifo_write+0xba>
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
/**
 * Computes how many bytes `addr` is ahead of the previous 32-bit word alignment
 * boundary.
 */
inline ptrdiff_t misalignment32_of(uintptr_t addr) {
  return addr % alignof(uint32_t);
e0000624:       |            0035f693           andi    a3,a1,3
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
    return kDifBadArg;
  }

  // If the pointer starts mis-aligned, write until we are aligned.
  while (misalignment32_of(ptr) && len > 0) {
e0000628:       |            00d036b3           snez    a3,a3
e000062c:       |            00c03733           snez    a4,a2
e0000630:       |            8ef9                       and     a3,a3,a4
e0000632:       |  /-------- ce8d                       beqz    a3,e000066c <dif_spi_host_fifo_write+0x58>
e0000634:       |  |         04800693           li      a3,72
e0000638:       |  |         6741                       lui     a4,0x10
e000063a:       |  |         fff70813           addi    a6,a4,-1 # ffff <_stack_len+0x7fff>
e000063e:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000640:       |  |  |  /-> 4bd8                       lw      a4,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e0000642:       |  |  |  |   0ff77713           andi    a4,a4,255
e0000646:       |  |  |  \-- fed70de3           beq     a4,a3,e0000640 <dif_spi_host_fifo_write+0x2c>
tx_fifo_write8():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:145
  mmio_region_write8(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, *src);
e000064a:       |  |  |      00058883           lb      a7,0(a1)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:165
    tx_fifo_write8(spi_host, ptr);
    ptr += 1;
e000064e:       |  |  |      0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:166
    len -= 1;
e0000650:       |  |  |      167d                       addi    a2,a2,-1
e0000652:       |  |  |      010672b3           and     t0,a2,a6
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
e0000656:       |  |  |      0035f713           andi    a4,a1,3
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
  while (misalignment32_of(ptr) && len > 0) {
e000065a:       |  |  |      00e03333           snez    t1,a4
e000065e:       |  |  |      00503733           snez    a4,t0
e0000662:       |  |  |      00e37733           and     a4,t1,a4
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write8(mmio_region_t base, ptrdiff_t offset,
                               uint8_t value) {
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
e0000666:       |  |  |      03178423           sb      a7,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:163
e000066a:       |  |  \----- fb71                       bnez    a4,e000063e <dif_spi_host_fifo_write+0x2a>
e000066c:       |  \-------> 66c1                       lui     a3,0x10
e000066e:       |            fff68893           addi    a7,a3,-1 # ffff <_stack_len+0x7fff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:170
  }

  // Write complete 32-bit words to the fifo.
  while (len > 3) {
e0000672:       |            01167733           and     a4,a2,a7
e0000676:       |            4791                       li      a5,4
e0000678:       |  /-------- 02f76363           bltu    a4,a5,e000069e <dif_spi_host_fifo_write+0x8a>
e000067c:       |  |         04800713           li      a4,72
e0000680:       |  |         480d                       li      a6,3
e0000682:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000684:       |  |  |  /-> 4bd4                       lw      a3,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e0000686:       |  |  |  |   0ff6f693           andi    a3,a3,255
e000068a:       |  |  |  \-- fee68de3           beq     a3,a4,e0000684 <dif_spi_host_fifo_write+0x70>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e000068e:       |  |  |      4194                       lw      a3,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000690:       |  |  |      d794                       sw      a3,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:173
    tx_fifo_write32(spi_host, ptr);
    ptr += 4;
    len -= 4;
e0000692:       |  |  |      1671                       addi    a2,a2,-4
e0000694:       |  |  |      011676b3           and     a3,a2,a7
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:172
    ptr += 4;
e0000698:       |  |  |      0591                       addi    a1,a1,4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:170
  while (len > 3) {
e000069a:       |  |  \----- fed864e3           bltu    a6,a3,e0000682 <dif_spi_host_fifo_write+0x6e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:177
  }

  // Clean up any leftover bytes.
  while (len > 0) {
e000069e:       |  \-------> 011676b3           and     a3,a2,a7
e00006a2:       |  /-------- c68d                       beqz    a3,e00006cc <dif_spi_host_fifo_write+0xb8>
e00006a4:       |  |         04800693           li      a3,72
e00006a8:       |  |         6741                       lui     a4,0x10
e00006aa:       |  |         fff70813           addi    a6,a4,-1 # ffff <_stack_len+0x7fff>
e00006ae:       |  |  /----> 411c                       lw      a5,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00006b0:       |  |  |  /-> 4bd8                       lw      a4,20(a5)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e00006b2:       |  |  |  |   0ff77713           andi    a4,a4,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
e00006b6:       |  |  |  \-- fed70de3           beq     a4,a3,e00006b0 <dif_spi_host_fifo_write+0x9c>
tx_fifo_write8():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:145
  mmio_region_write8(spi_host->base_addr, SPI_HOST_TXDATA_REG_OFFSET, *src);
e00006ba:       |  |  |      00058703           lb      a4,0(a1)
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
e00006be:       |  |  |      02e78423           sb      a4,40(a5)
dif_spi_host_fifo_write():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:180
    tx_fifo_write8(spi_host, ptr);
    ptr += 1;
    len -= 1;
e00006c2:       |  |  |      167d                       addi    a2,a2,-1
e00006c4:       |  |  |      01067733           and     a4,a2,a6
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:179
    ptr += 1;
e00006c8:       |  |  |      0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:177
  while (len > 0) {
e00006ca:       |  |  \----- f375                       bnez    a4,e00006ae <dif_spi_host_fifo_write+0x9a>
e00006cc:       |  \-------> 4681                       li      a3,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:184
  }

  return kDifOk;
}
e00006ce:       \----------> 8536                       mv      a0,a3
e00006d0:                    8082                       ret

e00006d2 <dif_spi_host_fifo_read>:
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:223
  queue->length -= 4;
  return val;
}

dif_result_t dif_spi_host_fifo_read(const dif_spi_host_t *spi_host, void *dst,
                                    uint16_t len) {
e00006d2:                       7179                    addi    sp,sp,-48
e00006d4:                       d606                    sw      ra,44(sp)
e00006d6:                       d422                    sw      s0,40(sp)
e00006d8:                       d226                    sw      s1,36(sp)
e00006da:                       d04a                    sw      s2,32(sp)
e00006dc:                       ce4e                    sw      s3,28(sp)
e00006de:                       cc52                    sw      s4,24(sp)
e00006e0:                       ca56                    sw      s5,20(sp)
e00006e2:                       892a                    mv      s2,a0
e00006e4:                       450d                    li      a0,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:224
  if (spi_host == NULL || (dst == NULL && len > 0)) {
e00006e6:       /-------------- 12090963                beqz    s2,e0000818 <dif_spi_host_fifo_read+0x146>
e00006ea:       |               89b2                    mv      s3,a2
e00006ec:       |               84ae                    mv      s1,a1
e00006ee:       |               00b035b3                snez    a1,a1
e00006f2:       |               00163613                seqz    a2,a2
e00006f6:       |               8dd1                    or      a1,a1,a2
e00006f8:       +-------------- 12058063                beqz    a1,e0000818 <dif_spi_host_fifo_read+0x146>
e00006fc:       |               00001517                auipc   a0,0x1
e0000700:       |               1ec50513                addi    a0,a0,492 # e00018e8 <rom_printf.kHexTable+0x2c>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:231
  }

  uintptr_t ptr = (uintptr_t)dst;
  // We always have to read from the RXFIFO as a 32-bit word.  We use a
  // two-word queue to handle destination and length mis-alignments.
  queue_t queue = {0};
e0000704:       |               454c                    lw      a1,12(a0)
e0000706:       |               4510                    lw      a2,8(a0)
e0000708:       |               4154                    lw      a3,4(a0)
e000070a:       |               c62e                    sw      a1,12(sp)
e000070c:       |               6a41                    lui     s4,0x10
e000070e:       |               c432                    sw      a2,8(sp)
e0000710:       |               c236                    sw      a3,4(sp)
e0000712:       |               4108                    lw      a0,0(a0)
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
e0000714:       |               0034f593                andi    a1,s1,3
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235

  // If the buffer is misaligned, write a byte at a time until we reach
  // alignment.
  while (misalignment32_of(ptr) && len > 0) {
e0000718:       |               00b035b3                snez    a1,a1
e000071c:       |               01303633                snez    a2,s3
e0000720:       |               8df1                    and     a1,a1,a2
e0000722:       |               f00a0413                addi    s0,s4,-256 # ff00 <_stack_len+0x7f00>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:231
  queue_t queue = {0};
e0000726:       |               c02a                    sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235
  while (misalignment32_of(ptr) && len > 0) {
e0000728:       |  /----------- cdb1                    beqz    a1,e0000784 <dif_spi_host_fifo_read+0xb2>
e000072a:       |  |            4501                    li      a0,0
e000072c:       |  |            fffa0a93                addi    s5,s4,-1
e0000730:       |  |     /----- 00a04b63                bgtz    a0,e0000746 <dif_spi_host_fifo_read+0x74>
e0000734:       |  |  /--|----> 00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000738:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
e000073a:       |  |  |  |  |   8de1                    and     a1,a1,s0
e000073c:       |  |  |  |  \-- ddf5                    beqz    a1,e0000738 <dif_spi_host_fifo_read+0x66>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e000073e:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:238
    if (queue.length < 1) {
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
e0000740:       |  |  |  |      850a                    mv      a0,sp
e0000742:       |  |  |  |      2259                    jal     e00008c8 <enqueue_word>
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e0000744:       |  |  |  |      4502                    lw      a0,0(sp)
read_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:120
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considred a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint64_t));
  uint64_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint64_t));
e0000746:       |  |  |  >----> 45b2                    lw      a1,12(sp)
e0000748:       |  |  |  |      4622                    lw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:208
  uint8_t val = queue->data[0];
e000074a:       |  |  |  |      00810683                lb      a3,8(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:210
  write_64(qword >> 8, queue->data);
e000074e:       |  |  |  |      01859713                slli    a4,a1,0x18
e0000752:       |  |  |  |      8221                    srli    a2,a2,0x8
e0000754:       |  |  |  |      8e59                    or      a2,a2,a4
e0000756:       |  |  |  |      81a1                    srli    a1,a1,0x8
write_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:172
inline void write_64(uint64_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_64()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint64_t));
  __builtin_memcpy(ptr, &value, sizeof(uint64_t));
e0000758:       |  |  |  |      c62e                    sw      a1,12(sp)
e000075a:       |  |  |  |      c432                    sw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e000075c:       |  |  |  |      157d                    addi    a0,a0,-1
e000075e:       |  |  |  |      c02a                    sw      a0,0(sp)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:242
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    uint8_t *p = (uint8_t *)ptr;
    *p = dequeue_byte(&queue);
e0000760:       |  |  |  |      00d48023                sb      a3,0(s1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:243
    ptr += 1;
e0000764:       |  |  |  |      0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:244
    len -= 1;
e0000766:       |  |  |  |      19fd                    addi    s3,s3,-1
e0000768:       |  |  |  |      0159f533                and     a0,s3,s5
misalignment32_of():
/proc/self/cwd/./sw/device/lib/base/memory.h:57
  return addr % alignof(uint32_t);
e000076c:       |  |  |  |      0034f593                andi    a1,s1,3
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:235
  while (misalignment32_of(ptr) && len > 0) {
e0000770:       |  |  |  |      00b035b3                snez    a1,a1
e0000774:       |  |  |  |      00a03533                snez    a0,a0
e0000778:       |  |  |  |      8d6d                    and     a0,a0,a1
e000077a:       |  +--|--|----- c509                    beqz    a0,e0000784 <dif_spi_host_fifo_read+0xb2>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:236
    if (queue.length < 1) {
e000077c:       |  |  |  |      4502                    lw      a0,0(sp)
e000077e:       |  |  |  \----- fca044e3                bgtz    a0,e0000746 <dif_spi_host_fifo_read+0x74>
e0000782:       |  |  \-------- bf4d                    j       e0000734 <dif_spi_host_fifo_read+0x62>
e0000784:       |  \----------> fffa0513                addi    a0,s4,-1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:248
  }

  // While we can write complete words to memory, operate on 4 bytes at a time.
  while (len > 3) {
e0000788:       |               00a9f533                and     a0,s3,a0
e000078c:       |               4591                    li      a1,4
e000078e:       |  /----------- 02b56e63                bltu    a0,a1,e00007ca <dif_spi_host_fifo_read+0xf8>
e0000792:       |  |            4a0d                    li      s4,3
e0000794:       |  |            6541                    lui     a0,0x10
e0000796:       |  |            fff50a93                addi    s5,a0,-1 # ffff <_stack_len+0x7fff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:249
    if (queue.length < 4) {
e000079a:       |  |  /-------> 4502                    lw      a0,0(sp)
e000079c:       |  |  |  /----- 00aa4b63                blt     s4,a0,e00007b2 <dif_spi_host_fifo_read+0xe0>
e00007a0:       |  |  |  |      00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00007a4:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
e00007a6:       |  |  |  |  |   8de1                    and     a1,a1,s0
e00007a8:       |  |  |  |  \-- ddf5                    beqz    a1,e00007a4 <dif_spi_host_fifo_read+0xd2>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00007aa:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:251
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
e00007ac:       |  |  |  |      850a                    mv      a0,sp
e00007ae:       |  |  |  |      2a29                    jal     e00008c8 <enqueue_word>
dequeue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:218
  queue->length -= 4;
e00007b0:       |  |  |  |      4502                    lw      a0,0(sp)
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e00007b2:       |  |  |  \----> 45b2                    lw      a1,12(sp)
e00007b4:       |  |  |         4622                    lw      a2,8(sp)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e00007b6:       |  |  |         c42e                    sw      a1,8(sp)
dequeue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:218
e00007b8:       |  |  |         1571                    addi    a0,a0,-4
e00007ba:       |  |  |         c02a                    sw      a0,0(sp)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
e00007bc:       |  |  |         c090                    sw      a2,0(s1)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:256
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    write_32(dequeue_word(&queue), (void *)ptr);
    ptr += 4;
    len -= 4;
e00007be:       |  |  |         19f1                    addi    s3,s3,-4
e00007c0:       |  |  |         0159f533                and     a0,s3,s5
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:255
    ptr += 4;
e00007c4:       |  |  |         0491                    addi    s1,s1,4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:248
  while (len > 3) {
e00007c6:       |  |  \-------- fcaa6ae3                bltu    s4,a0,e000079a <dif_spi_host_fifo_read+0xc8>
e00007ca:       |  \----------> 6541                    lui     a0,0x10
e00007cc:       |               fff50a13                addi    s4,a0,-1 # ffff <_stack_len+0x7fff>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:260
  }

  // Finish up any left over buffer a byte at a time.
  while (len > 0) {
e00007d0:       |               0149f533                and     a0,s3,s4
e00007d4:       |  /----------- c129                    beqz    a0,e0000816 <dif_spi_host_fifo_read+0x144>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:261
    if (queue.length < 1) {
e00007d6:       |  |  /-------> 4502                    lw      a0,0(sp)
e00007d8:       |  |  |  /----- 00a04b63                bgtz    a0,e00007ee <dif_spi_host_fifo_read+0x11c>
e00007dc:       |  |  |  |      00092503                lw      a0,0(s2)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00007e0:       |  |  |  |  /-> 494c                    lw      a1,20(a0)
wait_rx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:138
  } while (rxqd == 0);
e00007e2:       |  |  |  |  |   8de1                    and     a1,a1,s0
e00007e4:       |  |  |  |  \-- ddf5                    beqz    a1,e00007e0 <dif_spi_host_fifo_read+0x10e>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e00007e6:       |  |  |  |      514c                    lw      a1,36(a0)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:263
      wait_rx_fifo(spi_host);
      enqueue_word(&queue, mmio_region_read32(spi_host->base_addr,
e00007e8:       |  |  |  |      850a                    mv      a0,sp
e00007ea:       |  |  |  |      28f9                    jal     e00008c8 <enqueue_word>
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e00007ec:       |  |  |  |      4502                    lw      a0,0(sp)
read_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:120
  __builtin_memcpy(&val, ptr, sizeof(uint64_t));
e00007ee:       |  |  |  \----> 45b2                    lw      a1,12(sp)
e00007f0:       |  |  |         4622                    lw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:208
  uint8_t val = queue->data[0];
e00007f2:       |  |  |         00810683                lb      a3,8(sp)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:210
  write_64(qword >> 8, queue->data);
e00007f6:       |  |  |         01859713                slli    a4,a1,0x18
e00007fa:       |  |  |         8221                    srli    a2,a2,0x8
e00007fc:       |  |  |         8e59                    or      a2,a2,a4
e00007fe:       |  |  |         81a1                    srli    a1,a1,0x8
write_64():
/proc/self/cwd/./sw/device/lib/base/memory.h:172
  __builtin_memcpy(ptr, &value, sizeof(uint64_t));
e0000800:       |  |  |         c62e                    sw      a1,12(sp)
e0000802:       |  |  |         c432                    sw      a2,8(sp)
dequeue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:211
  queue->length -= 1;
e0000804:       |  |  |         157d                    addi    a0,a0,-1
e0000806:       |  |  |         c02a                    sw      a0,0(sp)
dif_spi_host_fifo_read():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:267
                                              SPI_HOST_RXDATA_REG_OFFSET));
    }
    uint8_t *p = (uint8_t *)ptr;
    *p = dequeue_byte(&queue);
e0000808:       |  |  |         00d48023                sb      a3,0(s1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:269
    ptr += 1;
    len -= 1;
e000080c:       |  |  |         19fd                    addi    s3,s3,-1
e000080e:       |  |  |         0149f533                and     a0,s3,s4
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:268
    ptr += 1;
e0000812:       |  |  |         0485                    addi    s1,s1,1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:260
  while (len > 0) {
e0000814:       |  |  \-------- f169                    bnez    a0,e00007d6 <dif_spi_host_fifo_read+0x104>
e0000816:       |  \----------> 4501                    li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:273
  }

  return kDifOk;
}
e0000818:       \-------------> 4ad2                    lw      s5,20(sp)
e000081a:                       4a62                    lw      s4,24(sp)
e000081c:                       49f2                    lw      s3,28(sp)
e000081e:                       5902                    lw      s2,32(sp)
e0000820:                       5492                    lw      s1,36(sp)
e0000822:                       5422                    lw      s0,40(sp)
e0000824:                       50b2                    lw      ra,44(sp)
e0000826:                       6145                    addi    sp,sp,48
e0000828:                       8082                    ret

e000082a <dif_spi_host_configure>:
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:66
                                    dif_spi_host_config_t config) {
e000082a:              460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:67
  if (spi_host == NULL) {
e000082c:       /----- cd35                     beqz    a0,e00008a8 <dif_spi_host_configure+0x7e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:70
  if (config.peripheral_clock_freq_hz == 0 || config.spi_clock == 0) {
e000082e:       |      41d4                     lw      a3,4(a1)
e0000830:       +----- cea5                     beqz    a3,e00008a8 <dif_spi_host_configure+0x7e>
e0000832:       |      4198                     lw      a4,0(a1)
e0000834:       +----- cb35                     beqz    a4,e00008a8 <dif_spi_host_configure+0x7e>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:75
      ((config.peripheral_clock_freq_hz / config.spi_clock) / 2) - 1;
e0000836:       |      02e6d6b3                 divu    a3,a3,a4
e000083a:       |      8285                     srli    a3,a3,0x1
e000083c:       |      16fd                     addi    a3,a3,-1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:76
  if (divider & ~SPI_HOST_CONFIGOPTS_CLKDIV_0_MASK) {
e000083e:       |      0106d713                 srli    a4,a3,0x10
e0000842:       +----- e33d                     bnez    a4,e00008a8 <dif_spi_host_configure+0x7e>
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:32
  mmio_region_write32(
e0000844:       |      4110                     lw      a2,0(a0)
e0000846:       |      40000737                 lui     a4,0x40000
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e000084a:       |      ca18                     sw      a4,16(a2)
e000084c:       |      4110                     lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e000084e:       |  /-> 4a5c                     lw      a5,20(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
e0000850:       |  |   8ff9                     and     a5,a5,a4
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:42
  } while (active);
e0000852:       |  \-- fff5                     bnez    a5,e000084e <dif_spi_host_configure+0x24>
e0000854:       |      6741                     lui     a4,0x10
e0000856:       |      177d                     addi    a4,a4,-1
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000858:       |  /-> 4a5c                     lw      a5,20(a2)
spi_host_reset():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:51
  } while (txqd != 0 || rxqd != 0);
e000085a:       |  |   8ff9                     and     a5,a5,a4
e000085c:       |  \-- fff5                     bnez    a5,e0000858 <dif_spi_host_configure+0x2e>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e000085e:       |      00062823                 sw      zero,16(a2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000862:       |      00858603                 lb      a2,8(a1) # 80000008 <fromhost+0x9ffefff8>
e0000866:       |      8ef9                     and     a3,a3,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e0000868:       |      0672                     slli    a2,a2,0x1c
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e000086a:       |      00958703                 lb      a4,9(a1)
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e000086e:       |      8231                     srli    a2,a2,0xc
e0000870:       |      8e55                     or      a2,a2,a3
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:89
                               config.chip_select.lead);
e0000872:       |      00a5c683                 lbu     a3,10(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
e0000876:       |      0772                     slli    a4,a4,0x1c
e0000878:       |      8321                     srli    a4,a4,0x8
e000087a:       |      8e59                     or      a2,a2,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e000087c:       |      8abd                     andi    a3,a3,15
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
e000087e:       |      00b58703                 lb      a4,11(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000882:       |      06e2                     slli    a3,a3,0x18
e0000884:       |      8e55                     or      a2,a2,a3
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
e0000886:       |      00c58683                 lb      a3,12(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e000088a:       |      0776                     slli    a4,a4,0x1d
e000088c:       |      8e59                     or      a2,a2,a4
bitfield_bit32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:138
                                value ? 0x1u : 0x0u);
e000088e:       |      00d58583                 lb      a1,13(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000892:       |      06fa                     slli    a3,a3,0x1e
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:94
  mmio_region_write32(spi_host->base_addr, SPI_HOST_CONFIGOPTS_REG_OFFSET, reg);
e0000894:       |      4118                     lw      a4,0(a0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e0000896:       |      8e55                     or      a2,a2,a3
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000898:       |      05fe                     slli    a1,a1,0x1f
e000089a:       |      8dd1                     or      a1,a1,a2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e000089c:       |      cf0c                     sw      a1,24(a4)
spi_host_enable():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:60
  mmio_region_write32(
e000089e:       |      4108                     lw      a0,0(a0)
e00008a0:       |      4601                     li      a2,0
e00008a2:       |      800005b7                 lui     a1,0x80000
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e00008a6:       |      c90c                     sw      a1,16(a0)
dif_spi_host_configure():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:97
}
e00008a8:       \----> 8532                     mv      a0,a2
e00008aa:              8082                     ret

e00008ac <dif_spi_host_output_set_enabled>:
dif_spi_host_output_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:101
  if (spi_host == NULL) {
e00008ac:       /-- cd01                        beqz    a0,e00008c4 <dif_spi_host_output_set_enabled+0x18>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:106
      mmio_region_read32(spi_host->base_addr, SPI_HOST_CONTROL_REG_OFFSET);
e00008ae:       |   4110                        lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00008b0:       |   4a14                        lw      a3,16(a2)
e00008b2:       |   4501                        li      a0,0
e00008b4:       |   e0000737            lui     a4,0xe0000
e00008b8:       |   177d                        addi    a4,a4,-1
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e00008ba:       |   8ef9                        and     a3,a3,a4
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00008bc:       |   05f6                        slli    a1,a1,0x1d
e00008be:       |   8dd5                        or      a1,a1,a3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e00008c0:       |   ca0c                        sw      a1,16(a2)
dif_spi_host_output_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:112
}
e00008c2:       |   8082                        ret
e00008c4:       \-> 450d                        li      a0,3
e00008c6:           8082                        ret

e00008c8 <enqueue_word>:
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:196
  if (queue->length % sizeof(uint32_t) == 0) {
e00008c8:              4110                     lw      a2,0(a0)
e00008ca:              00367693                 andi    a3,a2,3
e00008ce:       /----- c29d                     beqz    a3,e00008f4 <enqueue_word+0x2c>
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
e00008d0:       |      00160693                 addi    a3,a2,1
e00008d4:       |      c114                     sw      a3,0(a0)
e00008d6:       |      962a                     add     a2,a2,a0
e00008d8:       |      00b60423                 sb      a1,8(a2)
e00008dc:       |      460d                     li      a2,3
e00008de:       |  /-> 4114                     lw      a3,0(a0)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:202
      data >>= 8;
e00008e0:       |  |   81a1                     srli    a1,a1,0x8
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
e00008e2:       |  |   00168713                 addi    a4,a3,1
e00008e6:       |  |   c118                     sw      a4,0(a0)
e00008e8:       |  |   96aa                     add     a3,a3,a0
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:200
    for (size_t i = 0; i < sizeof(uint32_t); ++i) {
e00008ea:       |  |   167d                     addi    a2,a2,-1
enqueue_byte():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:192
  queue->data[queue->length++] = data;
e00008ec:       |  |   00b68423                 sb      a1,8(a3)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:200
    for (size_t i = 0; i < sizeof(uint32_t); ++i) {
e00008f0:       |  \-- f67d                     bnez    a2,e00008de <enqueue_word+0x16>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:205
}
e00008f2:       |      8082                     ret
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:197
    write_32(data, queue->data + queue->length);
e00008f4:       \----> 962a                     add     a2,a2,a0
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e00008f6:              c60c                     sw      a1,8(a2)
enqueue_word():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:198
    queue->length += 4;
e00008f8:              410c                     lw      a1,0(a0)
e00008fa:              0591                     addi    a1,a1,4
e00008fc:              c10c                     sw      a1,0(a0)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:205
}
e00008fe:              8082                     ret

e0000900 <dif_spi_host_transaction>:
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:362
}

dif_result_t dif_spi_host_transaction(const dif_spi_host_t *spi_host,
                                      uint32_t csid,
                                      dif_spi_host_segment_t *segments,
                                      size_t length) {
e0000900:                          7139                 addi    sp,sp,-64
e0000902:                          de06                 sw      ra,60(sp)
e0000904:                          dc22                 sw      s0,56(sp)
e0000906:                          da26                 sw      s1,52(sp)
e0000908:                          d84a                 sw      s2,48(sp)
e000090a:                          d64e                 sw      s3,44(sp)
e000090c:                          d452                 sw      s4,40(sp)
e000090e:                          d256                 sw      s5,36(sp)
e0000910:                          d05a                 sw      s6,32(sp)
e0000912:                          ce5e                 sw      s7,28(sp)
e0000914:                          cc62                 sw      s8,24(sp)
e0000916:                          ca66                 sw      s9,20(sp)
e0000918:                          c86a                 sw      s10,16(sp)
e000091a:                          c66e                 sw      s11,12(sp)
e000091c:                          8a2a                 mv      s4,a0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:364
  // Write to chip select ID.
  mmio_region_write32(spi_host->base_addr, SPI_HOST_CSID_REG_OFFSET, csid);
e000091e:                          4108                 lw      a0,0(a0)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000920:                          cd4c                 sw      a1,28(a0)
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:368

  // For each segment, write the segment information to the
  // COMMAND register and transmit FIFO.
  for (size_t i = 0; i < length; ++i) {
e0000922:       /----------------- 1a068263             beqz    a3,e0000ac6 <dif_spi_host_transaction+0x1c6>
e0000926:       |                  8d36                 mv      s10,a3
e0000928:       |                  8932                 mv      s2,a2
e000092a:       |                  4401                 li      s0,0
e000092c:       |                  fff68a93             addi    s5,a3,-1
e0000930:       |                  0016b513             seqz    a0,a3
e0000934:       |                  c02a                 sw      a0,0(sp)
e0000936:       |                  6505                 lui     a0,0x1
e0000938:       |                  c0050b13             addi    s6,a0,-1024 # c00 <_min_stack-0x1400>
e000093c:       |                  4851                 li      a6,20
e000093e:       |                  4c15                 li      s8,5
e0000940:       |                  00001c97             auipc   s9,0x1
e0000944:       |                  f8cc8c93             addi    s9,s9,-116 # e00018cc <rom_printf.kHexTable+0x10>
e0000948:       |                  04800493             li      s1,72
e000094c:       |                  6541                 lui     a0,0x10
e000094e:       |                  f0050593             addi    a1,a0,-256 # ff00 <_stack_len+0x7f00>
e0000952:       |                  c22e                 sw      a1,4(sp)
e0000954:       |                  157d                 addi    a0,a0,-1
e0000956:       |                  c42a                 sw      a0,8(sp)
e0000958:       |        /-------> 000a2503             lw      a0,0(s4)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e000095c:       |        |     /-> 494c                 lw      a1,20(a0)
wait_ready():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:120
  } while (!ready);
e000095e:       |        |     \-- fe05dfe3             bgez    a1,e000095c <dif_spi_host_transaction+0x5c>
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:372
    bool last_segment = i == length - 1;
    wait_ready(spi_host);
    dif_spi_host_segment_t *segment = &segments[i];
    switch (segment->type) {
e0000962:       |        |         030405b3             mul     a1,s0,a6
e0000966:       |        |         95ca                 add     a1,a1,s2
e0000968:       |        |         4190                 lw      a2,0(a1)
e000096a:       |  /-----|-------- 16cc6e63             bltu    s8,a2,e0000ae6 <dif_spi_host_transaction+0x1e6>
e000096e:       |  |     |         060a                 slli    a2,a2,0x2
e0000970:       |  |     |         9666                 add     a2,a2,s9
e0000972:       |  |     |         4210                 lw      a2,0(a2)
e0000974:       |  |     |         015446b3             xor     a3,s0,s5
e0000978:       |  |     |         0016bd93             seqz    s11,a3
e000097c:       |  |     |         8602                 jr      a2
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e000097e:       |  |     |     /-> 4950                 lw      a2,20(a0)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e0000980:       |  |     |     |   0ff67613             andi    a2,a2,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
e0000984:       |  |     |     \-- fe960de3             beq     a2,s1,e000097e <dif_spi_host_transaction+0x7e>
issue_opcode():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:292
                     segment->opcode);
e0000988:       |  |     |         00458583             lb      a1,4(a1) # 3004 <_min_stack+0x1004>
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
e000098c:       |  |     |         02b50423             sb      a1,40(a0)
e0000990:       |  |     |         6589                 lui     a1,0x2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000992:       |  |     |     /-- 000d9463             bnez    s11,e000099a <dif_spi_host_transaction+0x9a>
e0000996:       |  |     |     |   20058593             addi    a1,a1,512 # 2200 <_min_stack+0x200>
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
e000099a:       |  |     |     \-> 000a2503             lw      a0,0(s4)
e000099e:       |  |     |  /----- a8f1                 j       e0000a7a <dif_spi_host_transaction+0x17a>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00009a0:       |  |     |  |  /-> 4950                 lw      a2,20(a0)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e00009a2:       |  |     |  |  |   0ff67613             andi    a2,a2,255
wait_tx_fifo():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:129
  } while (txqd == SPI_HOST_PARAM_TX_DEPTH);
e00009a6:       |  |     |  |  \-- fe960de3             beq     a2,s1,e00009a0 <dif_spi_host_transaction+0xa0>
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:301
  uint32_t address = bitfield_byteswap32(segment->address.address);
e00009aa:       |  |     |  |      45d4                 lw      a3,12(a1)
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
  return __builtin_bswap32(bitfield);
e00009ac:       |  |     |  |      0086d613             srli    a2,a3,0x8
e00009b0:       |  |     |  |      4712                 lw      a4,4(sp)
e00009b2:       |  |     |  |      8e79                 and     a2,a2,a4
e00009b4:       |  |     |  |      0186d713             srli    a4,a3,0x18
e00009b8:       |  |     |  |      8f51                 or      a4,a4,a2
e00009ba:       |  |     |  |      00869793             slli    a5,a3,0x8
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
  if (segment->address.mode == kDifSpiHostAddrMode4b) {
e00009be:       |  |     |  |      0085a883             lw      a7,8(a1)
bitfield_byteswap32():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:293
e00009c2:       |  |     |  |      00ff0637             lui     a2,0xff0
e00009c6:       |  |     |  |      8ff1                 and     a5,a5,a2
e00009c8:       |  |     |  |      06e2                 slli    a3,a3,0x18
e00009ca:       |  |     |  |      8edd                 or      a3,a3,a5
e00009cc:       |  |     |  |      8ed9                 or      a3,a3,a4
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
e00009ce:       |  |     |  |      4605                 li      a2,1
e00009d0:       |  |     |  |  /-- 00c88363             beq     a7,a2,e00009d6 <dif_spi_host_transaction+0xd6>
e00009d4:       |  |     |  |  |   82a1                 srli    a3,a3,0x8
e00009d6:       |  |     |  |  \-> 6709                 lui     a4,0x2
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00009d8:       |  |     |  |  /-- 000d9463             bnez    s11,e00009e0 <dif_spi_host_transaction+0xe0>
e00009dc:       |  |     |  |  |   20070713             addi    a4,a4,512 # 2200 <_min_stack+0x200>
e00009e0:       |  |     |  |  \-> d514                 sw      a3,40(a0)
issue_address():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:313
  write_command_reg(spi_host, length, segment->address.width,
e00009e2:       |  |     |  |      41c8                 lw      a0,4(a1)
e00009e4:       |  |     |  |      fff88593             addi    a1,a7,-1
e00009e8:       |  |     |  |      0015b593             seqz    a1,a1
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:303
  if (segment->address.mode == kDifSpiHostAddrMode4b) {
e00009ec:       |  |     |  |      8dd9                 or      a1,a1,a4
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e00009ee:       |  |     |  |      00a51613             slli    a2,a0,0xa
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
e00009f2:       |  |     |  |      000a2503             lw      a0,0(s4)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e00009f6:       |  |     |  |      01667633             and     a2,a2,s6
e00009fa:       |  |     |  |      8dd1                 or      a1,a1,a2
e00009fc:       |  |     |  |      0025e593             ori     a1,a1,2
e0000a00:       |  |     |  +----- a8ad                 j       e0000a7a <dif_spi_host_transaction+0x17a>
issue_dummy():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:319
  write_command_reg(spi_host, segment->dummy.length, segment->dummy.width,
e0000a02:       |  |     |  |      4590                 lw      a2,8(a1)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000a04:       |  |     |  |      167d                 addi    a2,a2,-1
e0000a06:       |  |     |  |      1ff67613             andi    a2,a2,511
e0000a0a:       |  |     |  |  /-- 000d9463             bnez    s11,e0000a12 <dif_spi_host_transaction+0x112>
e0000a0e:       |  |     |  |  |   20066613             ori     a2,a2,512
e0000a12:       |  |     |  |  \-> 41cc                 lw      a1,4(a1)
e0000a14:       |  |     |  |      05aa                 slli    a1,a1,0xa
e0000a16:       |  |     |  |      0165f5b3             and     a1,a1,s6
e0000a1a:       |  |     |  |      8dd1                 or      a1,a1,a2
e0000a1c:       |  |     |  +----- a8b9                 j       e0000a7a <dif_spi_host_transaction+0x17a>
issue_data_phase():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:332
      width = segment->tx.width;
e0000a1e:       |  |     |  |      0045a983             lw      s3,4(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:333
      length = segment->tx.length;
e0000a22:       |  |     |  |      00c5ab83             lw      s7,12(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:335
      spi_host_fifo_write_alias(spi_host, segment->tx.buf, segment->tx.length);
e0000a26:       |  |     |  |      458c                 lw      a1,8(a1)
e0000a28:       |  |     |  |      4522                 lw      a0,8(sp)
e0000a2a:       |  |     |  |      00abf633             and     a2,s7,a0
e0000a2e:       |  |     |  |      8552                 mv      a0,s4
e0000a30:       |  |     |  |      36d5                 jal     e0000614 <dif_spi_host_fifo_write>
e0000a32:       |  |     |  |      6589                 lui     a1,0x2
e0000a34:       |  |     |  |  /-- a015                 j       e0000a58 <dif_spi_host_transaction+0x158>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:345
      width = segment->rx.width;
e0000a36:       |  |     |  |  |   0045a983             lw      s3,4(a1) # 2004 <_min_stack+0x4>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:346
      length = segment->rx.length;
e0000a3a:       |  |     |  |  |   00c5ab83             lw      s7,12(a1)
e0000a3e:       |  |     |  |  |   6585                 lui     a1,0x1
e0000a40:       |  |     |  |  +-- a821                 j       e0000a58 <dif_spi_host_transaction+0x158>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:338
      width = segment->bidir.width;
e0000a42:       |  |     |  |  |   0045a983             lw      s3,4(a1) # 1004 <_min_stack-0xffc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:339
      length = segment->bidir.length;
e0000a46:       |  |     |  |  |   0105ab83             lw      s7,16(a1)
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:341
      spi_host_fifo_write_alias(spi_host, segment->bidir.txbuf,
e0000a4a:       |  |     |  |  |   458c                 lw      a1,8(a1)
e0000a4c:       |  |     |  |  |   4522                 lw      a0,8(sp)
e0000a4e:       |  |     |  |  |   00abf633             and     a2,s7,a0
e0000a52:       |  |     |  |  |   8552                 mv      a0,s4
e0000a54:       |  |     |  |  |   36c1                 jal     e0000614 <dif_spi_host_fifo_write>
e0000a56:       |  |     |  |  |   658d                 lui     a1,0x3
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000a58:       |  |     |  |  \-> fffb8513             addi    a0,s7,-1
e0000a5c:       |  |     |  |      1ff57613             andi    a2,a0,511
e0000a60:       |  |     |  |  /-- 000d9463             bnez    s11,e0000a68 <dif_spi_host_transaction+0x168>
e0000a64:       |  |     |  |  |   20066613             ori     a2,a2,512
e0000a68:       |  |     |  |  \-> 4851                 li      a6,20
e0000a6a:       |  |     |  |      00a99693             slli    a3,s3,0xa
write_command_reg():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:285
  mmio_region_write32(spi_host->base_addr, SPI_HOST_COMMAND_REG_OFFSET, reg);
e0000a6e:       |  |     |  |      000a2503             lw      a0,0(s4)
e0000a72:       |  |     |  |      0166f6b3             and     a3,a3,s6
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000a76:       |  |     |  |      8dd1                 or      a1,a1,a2
e0000a78:       |  |     |  |      8dd5                 or      a1,a1,a3
dif_spi_host_transaction():
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:368
  for (size_t i = 0; i < length; ++i) {
e0000a7a:       |  |     |  \----> 0405                 addi    s0,s0,1
e0000a7c:       |  |     |         d10c                 sw      a1,32(a0)
e0000a7e:       |  |     \-------- eda41de3             bne     s0,s10,e0000958 <dif_spi_host_transaction+0x58>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:397
        return kDifBadArg;
    }
  }

  // For each segment which receives data, read from the receive FIFO.
  for (size_t i = 0; i < length; ++i) {
e0000a82:       |  |               4502                 lw      a0,0(sp)
e0000a84:       +--|-------------- e129                 bnez    a0,e0000ac6 <dif_spi_host_transaction+0x1c6>
e0000a86:       |  |               4401                 li      s0,0
e0000a88:       |  |               00c90493             addi    s1,s2,12
e0000a8c:       |  |               4995                 li      s3,5
e0000a8e:       |  |               4a91                 li      s5,4
e0000a90:       |  |               4b51                 li      s6,20
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:399
    dif_spi_host_segment_t *segment = &segments[i];
    switch (segment->type) {
e0000a92:       |  |  /----------> ff44a503             lw      a0,-12(s1)
e0000a96:       |  |  |     /----- 01350b63             beq     a0,s3,e0000aac <dif_spi_host_transaction+0x1ac>
e0000a9a:       |  |  |  /--|----- 03551163             bne     a0,s5,e0000abc <dif_spi_host_transaction+0x1bc>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:401
      case kDifSpiHostSegmentTypeRx:
        spi_host_fifo_read_alias(spi_host, segment->rx.buf, segment->rx.length);
e0000a9e:       |  |  |  |  |      03640533             mul     a0,s0,s6
e0000aa2:       |  |  |  |  |      954a                 add     a0,a0,s2
e0000aa4:       |  |  |  |  |      00850593             addi    a1,a0,8
e0000aa8:       |  |  |  |  |      0531                 addi    a0,a0,12
e0000aaa:       |  |  |  |  |  /-- a021                 j       e0000ab2 <dif_spi_host_transaction+0x1b2>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:406
        break;
      case kDifSpiHostSegmentTypeBidirectional:
        spi_host_fifo_read_alias(spi_host, segment->bidir.rxbuf,
                                 segment->bidir.length);
        break;
e0000aac:       |  |  |  |  \--|-> 00448513             addi    a0,s1,4
e0000ab0:       |  |  |  |     |   85a6                 mv      a1,s1
e0000ab2:       |  |  |  |     \-> 418c                 lw      a1,0(a1)
e0000ab4:       |  |  |  |         00055603             lhu     a2,0(a0)
e0000ab8:       |  |  |  |         8552                 mv      a0,s4
e0000aba:       |  |  |  |         3921                 jal     e00006d2 <dif_spi_host_fifo_read>
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:397
  for (size_t i = 0; i < length; ++i) {
e0000abc:       |  |  |  \-------> 0405                 addi    s0,s0,1
e0000abe:       |  |  |            1d7d                 addi    s10,s10,-1
e0000ac0:       |  |  |            04d1                 addi    s1,s1,20
e0000ac2:       |  |  \----------- fc0d18e3             bnez    s10,e0000a92 <dif_spi_host_transaction+0x192>
e0000ac6:       \--|-------------> 4501                 li      a0,0
/proc/self/cwd/sw/device/lib/dif/dif_spi_host.c:412
      default:
          /* do nothing */;
    }
  }
  return kDifOk;
}
e0000ac8:          |           /-> 4db2                 lw      s11,12(sp)
e0000aca:          |           |   4d42                 lw      s10,16(sp)
e0000acc:          |           |   4cd2                 lw      s9,20(sp)
e0000ace:          |           |   4c62                 lw      s8,24(sp)
e0000ad0:          |           |   4bf2                 lw      s7,28(sp)
e0000ad2:          |           |   5b02                 lw      s6,32(sp)
e0000ad4:          |           |   5a92                 lw      s5,36(sp)
e0000ad6:          |           |   5a22                 lw      s4,40(sp)
e0000ad8:          |           |   59b2                 lw      s3,44(sp)
e0000ada:          |           |   5942                 lw      s2,48(sp)
e0000adc:          |           |   54d2                 lw      s1,52(sp)
e0000ade:          |           |   5462                 lw      s0,56(sp)
e0000ae0:          |           |   50f2                 lw      ra,60(sp)
e0000ae2:          |           |   6121                 addi    sp,sp,64
e0000ae4:          |           |   8082                 ret
e0000ae6:          \-----------|-> 450d                 li      a0,3
e0000ae8:                      \-- b7c5                 j       e0000ac8 <dif_spi_host_transaction+0x1c8>

e0000aea <sec_mmio_init>:
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
e0000aea:           4601                        li      a2,0
e0000aec:           4681                        li      a3,0
e0000aee:           4701                        li      a4,0
e0000af0:           4501                        li      a0,0
e0000af2:           00001597            auipc   a1,0x1
e0000af6:           1b658593            addi    a1,a1,438 # e0001ca8 <sec_mmio_ctx>
sec_mmio_init():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:53
  // mechanism.
  HARDENED_CHECK_LT(i, kSecMmioRegFileSize);
}

void sec_mmio_init(void) {
  sec_mmio_ctx.last_index = launder32(0);
e0000afa:           c190                        sw      a2,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:54
  sec_mmio_ctx.write_count = launder32(0);
e0000afc:           c1d4                        sw      a3,4(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:55
  sec_mmio_ctx.check_count = launder32(0);
e0000afe:           c5d8                        sw      a4,12(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:56
  sec_mmio_ctx.expected_write_count = launder32(0);
e0000b00:           c588                        sw      a0,8(a1)
e0000b02:           3e800613            li      a2,1000
e0000b06:           56fd                        li      a3,-1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:58
  for (size_t i = 0; i < ARRAYSIZE(sec_mmio_ctx.addrs); ++i) {
    sec_mmio_ctx.addrs[i] = UINT32_MAX;
e0000b08:       /-> 7d858713            addi    a4,a1,2008
e0000b0c:       |   7cd72c23            sw      a3,2008(a4)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:59
    sec_mmio_ctx.values[i] = UINT32_MAX;
e0000b10:       |   c994                        sw      a3,16(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:57
  for (size_t i = 0; i < ARRAYSIZE(sec_mmio_ctx.addrs); ++i) {
e0000b12:       |   167d                        addi    a2,a2,-1
e0000b14:       |   0591                        addi    a1,a1,4
e0000b16:       \-- fa6d                        bnez    a2,e0000b08 <sec_mmio_init+0x1e>
e0000b18:           00001597            auipc   a1,0x1
e0000b1c:           19058593            addi    a1,a1,400 # e0001ca8 <sec_mmio_ctx>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:61
  }
  uint32_t check = kSecMmioValZero ^ sec_mmio_ctx.last_index;
e0000b20:           4190                        lw      a2,0(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:62
  check ^= sec_mmio_ctx.write_count;
e0000b22:           41d4                        lw      a3,4(a1)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:63
  check ^= sec_mmio_ctx.check_count;
e0000b24:           45cc                        lw      a1,12(a1)
e0000b26:           8e35                        xor     a2,a2,a3
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:64
  check ^= sec_mmio_ctx.expected_write_count;
e0000b28:           8db1                        xor     a1,a1,a2
e0000b2a:           8d2d                        xor     a0,a0,a1
e0000b2c:           3ca595b7            lui     a1,0x3ca59
e0000b30:           65a58593            addi    a1,a1,1626 # 3ca5965a <tohost+0x3ca39652>
e0000b34:           8d2d                        xor     a0,a0,a1
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:65
  HARDENED_CHECK_EQ(check, kSecMmioValZero);
e0000b36:       /-- 00b50663            beq     a0,a1,e0000b42 <sec_mmio_init+0x58>
e0000b3a:       |   0000                        unimp
e0000b3c:       |   0000                        unimp
e0000b3e:       |   0000                        unimp
e0000b40:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:66
}
e0000b42:       \-> 8082                        ret

e0000b44 <sec_mmio_read32>:
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:78
    sec_mmio_ctx.values[i] = UINT32_MAX;
  }
  HARDENED_CHECK_EQ(sec_mmio_ctx.check_count, 0);
}

uint32_t sec_mmio_read32(uint32_t addr) {
e0000b44:           1101                        addi    sp,sp,-32
e0000b46:           ce06                        sw      ra,28(sp)
e0000b48:           cc22                        sw      s0,24(sp)
e0000b4a:           ca26                        sw      s1,20(sp)
e0000b4c:           c84a                        sw      s2,16(sp)
e0000b4e:           c64e                        sw      s3,12(sp)
e0000b50:           842a                        mv      s0,a0
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
e0000b52:           00052903            lw      s2,0(a0)
e0000b56:           21692537            lui     a0,0x21692
e0000b5a:           43650993            addi    s3,a0,1078 # 21692436 <tohost+0x2167242e>
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:80
  uint32_t value = abs_mmio_read32(addr);
  uint32_t masked_value = value ^ kSecMmioMaskVal;
e0000b5e:           013944b3            xor     s1,s2,s3
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:82
  barrier32(masked_value);
  upsert_register(addr, masked_value);
e0000b62:           8522                        mv      a0,s0
e0000b64:           85a6                        mv      a1,s1
e0000b66:           2015                        jal     e0000b8a <upsert_register>
abs_mmio_read32():
/proc/self/cwd/./sw/device/lib/base/abs_mmio.h:73
e0000b68:           4008                        lw      a0,0(s0)
sec_mmio_read32():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:83
  HARDENED_CHECK_EQ((abs_mmio_read32(addr) ^ kSecMmioMaskVal), masked_value);
e0000b6a:           01354533            xor     a0,a0,s3
e0000b6e:       /-- 00950663            beq     a0,s1,e0000b7a <sec_mmio_read32+0x36>
e0000b72:       |   0000                        unimp
e0000b74:       |   0000                        unimp
e0000b76:       |   0000                        unimp
e0000b78:       |   0000                        unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:85

  return value;
e0000b7a:       \-> 854a                        mv      a0,s2
e0000b7c:           49b2                        lw      s3,12(sp)
e0000b7e:           4942                        lw      s2,16(sp)
e0000b80:           44d2                        lw      s1,20(sp)
e0000b82:           4462                        lw      s0,24(sp)
e0000b84:           40f2                        lw      ra,28(sp)
e0000b86:           6105                        addi    sp,sp,32
e0000b88:           8082                        ret

e0000b8a <upsert_register>:
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:34
  const size_t last_index = sec_mmio_ctx.last_index;
e0000b8a:                 00001817              auipc   a6,0x1
e0000b8e:                 11e80813              addi    a6,a6,286 # e0001ca8 <sec_mmio_ctx>
e0000b92:                 00082703              lw      a4,0(a6)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
e0000b96:                 4781                  li      a5,0
e0000b98:                 4681                  li      a3,0
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
  for (; launder32(i) < last_index; ++i) {
e0000b9a:       /-------- 02e7f163              bgeu    a5,a4,e0000bbc <upsert_register+0x32>
e0000b9e:       |         4681                  li      a3,0
e0000ba0:       |         87c2                  mv      a5,a6
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:37
    if (sec_mmio_ctx.addrs[i] == addr) {
e0000ba2:       |  /----> 7d878613              addi    a2,a5,2008
e0000ba6:       |  |      7d862603              lw      a2,2008(a2)
e0000baa:       |  |  /-- 00a60863              beq     a2,a0,e0000bba <upsert_register+0x30>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
  for (; launder32(i) < last_index; ++i) {
e0000bae:       |  |  |   0685                  addi    a3,a3,1
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
e0000bb0:       |  |  |   8636                  mv      a2,a3
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:36
e0000bb2:       |  |  |   0791                  addi    a5,a5,4
e0000bb4:       |  \--|-- fee667e3              bltu    a2,a4,e0000ba2 <upsert_register+0x18>
e0000bb8:       +-----|-- a011                  j       e0000bbc <upsert_register+0x32>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:38
      sec_mmio_ctx.values[i] = value;
e0000bba:       |     \-> cb8c                  sw      a1,16(a5)
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
e0000bbc:       \-------> 8636                  mv      a2,a3
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:42
  if (launder32(i) == last_index && launder32(i) < kSecMmioRegFileSize) {
e0000bbe:             /-- 02e61463              bne     a2,a4,e0000be6 <upsert_register+0x5c>
launder32():
/proc/self/cwd/./sw/device/lib/base/hardened.h:244
e0000bc2:             |   8636                  mv      a2,a3
e0000bc4:             |   3e700713              li      a4,999
upsert_register():
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:42
e0000bc8:             +-- 00c76f63              bltu    a4,a2,e0000be6 <upsert_register+0x5c>
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:43
    sec_mmio_ctx.addrs[i] = addr;
e0000bcc:             |   00269613              slli    a2,a3,0x2
e0000bd0:             |   9642                  add     a2,a2,a6
e0000bd2:             |   7d860713              addi    a4,a2,2008
e0000bd6:             |   7ca72c23              sw      a0,2008(a4)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:44
    sec_mmio_ctx.values[i] = value;
e0000bda:             |   ca0c                  sw      a1,16(a2)
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:45
    ++sec_mmio_ctx.last_index;
e0000bdc:             |   00082503              lw      a0,0(a6)
e0000be0:             |   0505                  addi    a0,a0,1
e0000be2:             |   00a82023              sw      a0,0(a6)
e0000be6:             \-> 3e800513              li      a0,1000
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:49
  HARDENED_CHECK_LT(i, kSecMmioRegFileSize);
e0000bea:             /-- 00a6e663              bltu    a3,a0,e0000bf6 <upsert_register+0x6c>
e0000bee:             |   0000                  unimp
e0000bf0:             |   0000                  unimp
e0000bf2:             |   0000                  unimp
e0000bf4:             |   0000                  unimp
/proc/self/cwd/sw/device/silicon_creator/lib/base/sec_mmio.c:50
}
e0000bf6:             \-> 8082                  ret

e0000bf8 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
e0000bf8:                    1101                       addi    sp,sp,-32
e0000bfa:                    ce06                       sw      ra,28(sp)
e0000bfc:                    65b1                       lui     a1,0xc
e0000bfe:                    aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
e0000c02:             /----- 02b50063           beq     a0,a1,e0000c22 <test_status_set+0x2a>
e0000c06:             |      65a5                       lui     a1,0x9
e0000c08:             |      05b5                       addi    a1,a1,13
e0000c0a:          /--|----- 02b50d63           beq     a0,a1,e0000c44 <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000c0e:          |  |      00001597           auipc   a1,0x1
e0000c12:          |  |      00e58593           addi    a1,a1,14 # e0001c1c <kDeviceTestStatusAddress>
e0000c16:          |  |      418c                       lw      a1,0(a1)
e0000c18:          |  |  /-- c191                       beqz    a1,e0000c1c <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000c1a:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
e0000c1c:          |  |  \-> 40f2                       lw      ra,28(sp)
e0000c1e:          |  |      6105                       addi    sp,sp,32
e0000c20:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e0000c22:          |  \----> 00001517           auipc   a0,0x1
e0000c26:          |         ffe50513           addi    a0,a0,-2 # e0001c20 <kDeviceLogBypassUartAddress>
e0000c2a:          |         4108                       lw      a0,0(a0)
e0000c2c:          |  /----- ed0d                       bnez    a0,e0000c66 <test_status_set+0x6e>
e0000c2e:          |  |      00001597           auipc   a1,0x1
e0000c32:          |  |      d1a58593           addi    a1,a1,-742 # e0001948 <rom_printf.kHexTable+0x8c>
e0000c36:          |  |      0028                       addi    a0,sp,8
e0000c38:          |  |      4651                       li      a2,20
e0000c3a:          |  |      7fa000ef           jal     ra,e0001434 <memcpy>
e0000c3e:          |  |      0028                       addi    a0,sp,8
e0000c40:          |  |      20b5                       jal     e0000cac <base_log_internal_core>
e0000c42:          |  |  /-- a805                       j       e0000c72 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e0000c44:          \--|--|-> 00001517           auipc   a0,0x1
e0000c48:             |  |   fdc50513           addi    a0,a0,-36 # e0001c20 <kDeviceLogBypassUartAddress>
e0000c4c:             |  |   4108                       lw      a0,0(a0)
e0000c4e:       /-----|--|-- ed05                       bnez    a0,e0000c86 <test_status_set+0x8e>
e0000c50:       |     |  |   00001597           auipc   a1,0x1
e0000c54:       |     |  |   ce458593           addi    a1,a1,-796 # e0001934 <rom_printf.kHexTable+0x78>
e0000c58:       |     |  |   0028                       addi    a0,sp,8
e0000c5a:       |     |  |   4651                       li      a2,20
e0000c5c:       |     |  |   7d8000ef           jal     ra,e0001434 <memcpy>
e0000c60:       |     |  |   0028                       addi    a0,sp,8
e0000c62:       |     |  |   20a9                       jal     e0000cac <base_log_internal_core>
e0000c64:       |  /--|--|-- a03d                       j       e0000c92 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e0000c66:       |  |  \--|-> 00003517           auipc   a0,0x3
e0000c6a:       |  |     |   01a50513           addi    a0,a0,26 # e0003c80 <test_status_set.kLogFields.2>
e0000c6e:       |  |     |   4581                       li      a1,0
e0000c70:       |  |     |   28f9                       jal     e0000d4e <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000c72:       |  |     \-> 00001517           auipc   a0,0x1
e0000c76:       |  |         faa50513           addi    a0,a0,-86 # e0001c1c <kDeviceTestStatusAddress>
e0000c7a:       |  |         4108                       lw      a0,0(a0)
e0000c7c:       |  |  /----- c505                       beqz    a0,e0000ca4 <test_status_set+0xac>
e0000c7e:       |  |  |      65b1                       lui     a1,0xc
e0000c80:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
e0000c84:       |  |  |  /-- a839                       j       e0000ca2 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e0000c86:       \--|--|--|-> 00003517           auipc   a0,0x3
e0000c8a:          |  |  |   fe650513           addi    a0,a0,-26 # e0003c6c <test_status_set.kLogFields>
e0000c8e:          |  |  |   4581                       li      a1,0
e0000c90:          |  |  |   287d                       jal     e0000d4e <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000c92:          \--|--|-> 00001517           auipc   a0,0x1
e0000c96:             |  |   f8a50513           addi    a0,a0,-118 # e0001c1c <kDeviceTestStatusAddress>
e0000c9a:             |  |   4108                       lw      a0,0(a0)
e0000c9c:             +--|-- c501                       beqz    a0,e0000ca4 <test_status_set+0xac>
e0000c9e:             |  |   65a5                       lui     a1,0x9
e0000ca0:             |  |   05b5                       addi    a1,a1,13
e0000ca2:             |  \-> c10c                       sw      a1,0(a0)
e0000ca4:             \----> 2009                       jal     e0000ca6 <abort>

e0000ca6 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
e0000ca6:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
e0000caa:       \-- bff5                        j       e0000ca6 <abort>

e0000cac <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
e0000cac:              7179                     addi    sp,sp,-48
e0000cae:              c606                     sw      ra,12(sp)
e0000cb0:              c422                     sw      s0,8(sp)
e0000cb2:              c226                     sw      s1,4(sp)
e0000cb4:              842a                     mv      s0,a0
e0000cb6:              d646                     sw      a7,44(sp)
e0000cb8:              d442                     sw      a6,40(sp)
e0000cba:              d23e                     sw      a5,36(sp)
e0000cbc:              d03a                     sw      a4,32(sp)
e0000cbe:              ce36                     sw      a3,28(sp)
e0000cc0:              cc32                     sw      a2,24(sp)
e0000cc2:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
e0000cc4:              4148                     lw      a0,4(a0)
e0000cc6:              800005b7                 lui     a1,0x80000
e0000cca:              fff58613                 addi    a2,a1,-1 # 7fffffff <fromhost+0x9ffeffef>
e0000cce:              4581                     li      a1,0
e0000cd0:              04f000ef                 jal     ra,e000151e <memchr>
e0000cd4:              4054                     lw      a3,4(s0)
e0000cd6:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
e0000cda:              02f00593                 li      a1,47
e0000cde:              8536                     mv      a0,a3
e0000ce0:              0ed000ef                 jal     ra,e00015cc <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
e0000ce4:       /----- c501                     beqz    a0,e0000cec <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
e0000ce6:       |      00150693                 addi    a3,a0,1
e0000cea:       |  /-- a011                     j       e0000cee <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
e0000cec:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e0000cee:          \-> 4008                     lw      a0,0(s0)
e0000cf0:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
e0000cf2:       /----- 00a5ea63                 bltu    a1,a0,e0000d06 <base_log_internal_core+0x5a>
e0000cf6:       |      050a                     slli    a0,a0,0x2
e0000cf8:       |      00001597                 auipc   a1,0x1
e0000cfc:       |      c8058593                 addi    a1,a1,-896 # e0001978 <rom_printf.kHexTable+0xbc>
e0000d00:       |      952e                     add     a0,a0,a1
e0000d02:       |      410c                     lw      a1,0(a0)
e0000d04:       |  /-- a029                     j       e0000d0e <base_log_internal_core+0x62>
e0000d06:       \--|-> 00001597                 auipc   a1,0x1
e0000d0a:          |   c6d58593                 addi    a1,a1,-915 # e0001973 <rom_printf.kHexTable+0xb7>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
e0000d0e:          \-> 00003497                 auipc   s1,0x3
e0000d12:              eee48493                 addi    s1,s1,-274 # e0003bfc <base_log_internal_core.global_log_counter>
e0000d16:              0004d603                 lhu     a2,0(s1)
e0000d1a:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e0000d1c:              00001517                 auipc   a0,0x1
e0000d20:              c4050513                 addi    a0,a0,-960 # e000195c <rom_printf.kHexTable+0xa0>
e0000d24:              208d                     jal     e0000d86 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
e0000d26:              00049503                 lh      a0,0(s1)
e0000d2a:              0505                     addi    a0,a0,1
e0000d2c:              00a49023                 sh      a0,0(s1)
e0000d30:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
e0000d32:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
e0000d34:              4808                     lw      a0,16(s0)
e0000d36:              084c                     addi    a1,sp,20
e0000d38:              2041                     jal     e0000db8 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
e0000d3a:              00001517                 auipc   a0,0x1
e0000d3e:              a2550513                 addi    a0,a0,-1499 # e000175f <memrchr+0x193>
e0000d42:              2091                     jal     e0000d86 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
e0000d44:              4492                     lw      s1,4(sp)
e0000d46:              4422                     lw      s0,8(sp)
e0000d48:              40b2                     lw      ra,12(sp)
e0000d4a:              6145                     addi    sp,sp,48
e0000d4c:              8082                     ret

e0000d4e <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
e0000d4e:              1101                     addi    sp,sp,-32
e0000d50:              ce46                     sw      a7,28(sp)
e0000d52:              cc42                     sw      a6,24(sp)
e0000d54:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
e0000d56:              00001797                 auipc   a5,0x1
e0000d5a:              eca78793                 addi    a5,a5,-310 # e0001c20 <kDeviceLogBypassUartAddress>
e0000d5e:              439c                     lw      a5,0(a5)
e0000d60:              c83a                     sw      a4,16(sp)
e0000d62:              c636                     sw      a3,12(sp)
e0000d64:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000d66:              c388                     sw      a0,0(a5)
e0000d68:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
e0000d6a:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e0000d6c:       /----- c989                     beqz    a1,e0000d7e <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
e0000d6e:       |  /-> 4512                     lw      a0,4(sp)
e0000d70:       |  |   00450613                 addi    a2,a0,4
e0000d74:       |  |   c232                     sw      a2,4(sp)
e0000d76:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e0000d78:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000d7a:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
e0000d7c:       |  \-- f9ed                     bnez    a1,e0000d6e <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
e0000d7e:       \----> 6105                     addi    sp,sp,32
e0000d80:              8082                     ret

e0000d82 <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
e0000d82:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
e0000d84:       8082                    ret

e0000d86 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84
void base_uart_stdout(const dif_uart_t *uart) {
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}

size_t base_printf(const char *format, ...) {
e0000d86:       7179                    addi    sp,sp,-48
e0000d88:       c606                    sw      ra,12(sp)
e0000d8a:       d646                    sw      a7,44(sp)
e0000d8c:       d442                    sw      a6,40(sp)
e0000d8e:       d23e                    sw      a5,36(sp)
e0000d90:       d03a                    sw      a4,32(sp)
e0000d92:       ce36                    sw      a3,28(sp)
e0000d94:       cc32                    sw      a2,24(sp)
e0000d96:       ca2e                    sw      a1,20(sp)
e0000d98:       00003597                auipc   a1,0x3
e0000d9c:       e6858593                addi    a1,a1,-408 # e0003c00 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
e0000da0:       4190                    lw      a2,0(a1)
e0000da2:       41cc                    lw      a1,4(a1)
e0000da4:       872a                    mv      a4,a0
e0000da6:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
e0000da8:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e0000daa:       0854                    addi    a3,sp,20
e0000dac:       8532                    mv      a0,a2
e0000dae:       863a                    mv      a2,a4
e0000db0:       200d                    jal     e0000dd2 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
e0000db2:       40b2                    lw      ra,12(sp)
e0000db4:       6145                    addi    sp,sp,48
e0000db6:       8082                    ret

e0000db8 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
e0000db8:       00003697                auipc   a3,0x3
e0000dbc:       e4868693                addi    a3,a3,-440 # e0003c00 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e0000dc0:       4290                    lw      a2,0(a3)
e0000dc2:       42d4                    lw      a3,4(a3)
e0000dc4:       872e                    mv      a4,a1
e0000dc6:       87aa                    mv      a5,a0
e0000dc8:       8532                    mv      a0,a2
e0000dca:       85b6                    mv      a1,a3
e0000dcc:       863e                    mv      a2,a5
e0000dce:       86ba                    mv      a3,a4
e0000dd0:       a009                    j       e0000dd2 <base_vfprintf>

e0000dd2 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
e0000dd2:                                                                    715d                       addi    sp,sp,-80
e0000dd4:                                                                    c686                       sw      ra,76(sp)
e0000dd6:                                                                    c4a2                       sw      s0,72(sp)
e0000dd8:                                                                    c2a6                       sw      s1,68(sp)
e0000dda:                                                                    c0ca                       sw      s2,64(sp)
e0000ddc:                                                                    de4e                       sw      s3,60(sp)
e0000dde:                                                                    dc52                       sw      s4,56(sp)
e0000de0:                                                                    da56                       sw      s5,52(sp)
e0000de2:                                                                    d85a                       sw      s6,48(sp)
e0000de4:                                                                    d65e                       sw      s7,44(sp)
e0000de6:                                                                    d462                       sw      s8,40(sp)
e0000de8:                                                                    d266                       sw      s9,36(sp)
e0000dea:                                                                    d06a                       sw      s10,32(sp)
e0000dec:                                                                    ce6e                       sw      s11,28(sp)
e0000dee:                                                                    8cb2                       mv      s9,a2
e0000df0:                                                                    892a                       mv      s2,a0
e0000df2:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
e0000df4:                                                                /-- c199                       beqz    a1,e0000dfa <base_vfprintf+0x28>
e0000df6:                                                                |   89ae                       mv      s3,a1
e0000df8:                                                             /--|-- a029                       j       e0000e02 <base_vfprintf+0x30>
e0000dfa:                                                             |  \-> 00000997           auipc   s3,0x0
e0000dfe:                                                             |      f8898993           addi    s3,s3,-120 # e0000d82 <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
e0000e02:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
e0000e04:                                                                    000cc503           lbu     a0,0(s9)
e0000e08:       /----------------------------------------------------------- 42050563           beqz    a0,e0001232 <base_vfprintf+0x460>
e0000e0c:       |                                                            4a81                       li      s5,0
e0000e0e:       |                                                            02500c13           li      s8,37
e0000e12:       |                                                            4d25                       li      s10,9
e0000e14:       |                                                            4a29                       li      s4,10
e0000e16:       |                                                            658d                       lui     a1,0x3
e0000e18:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_min_stack+0xc22>
e0000e1c:       |                                                            c02e                       sw      a1,0(sp)
e0000e1e:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
e0000e20:       |        |                                               /-> 0ff57413           andi    s0,a0,255
e0000e24:       |        |                                            /--|-- 01840963           beq     s0,s8,e0000e36 <base_vfprintf+0x64>
e0000e28:       |        |                                            +--|-- c419                       beqz    s0,e0000e36 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
e0000e2a:       |        |                                            |  |   009c8533           add     a0,s9,s1
e0000e2e:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
e0000e32:       |        |                                            |  |   0485                       addi    s1,s1,1
e0000e34:       |        |                                            |  \-- b7f5                       j       e0000e20 <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
e0000e36:       |        |                                            \--/-X c491                       beqz    s1,e0000e42 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
e0000e38:       |        |                                               |   854a                       mv      a0,s2
e0000e3a:       |        |                                               |   85e6                       mv      a1,s9
e0000e3c:       |        |                                               |   8626                       mv      a2,s1
e0000e3e:       |        |                                               |   9982                       jalr    s3
e0000e40:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
e0000e42:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,e0001234 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
e0000e46:       |  |     |                                                   009c8533           add     a0,s9,s1
e0000e4a:       |  |     |                                                   00154603           lbu     a2,1(a0)
e0000e4e:       |  |     |                                                   02100713           li      a4,33
e0000e52:       |  |     |                                            /----- 00e61863           bne     a2,a4,e0000e62 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e0000e56:       |  |     |                                            |      00254583           lbu     a1,2(a0)
e0000e5a:       |  |     |                                            |      00250693           addi    a3,a0,2
e0000e5e:       |  |     |                                            |      4b05                       li      s6,1
e0000e60:       |  |     |                                            |  /-- a029                       j       e0000e6a <base_vfprintf+0x98>
e0000e62:       |  |     |                                            \--|-> 4b01                       li      s6,0
e0000e64:       |  |     |                                               |   00150693           addi    a3,a0,1
e0000e68:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000e6a:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,e0001220 <base_vfprintf+0x44e>
e0000e6e:       |  |  |  |                                                   4481                       li      s1,0
e0000e70:       |  |  |  |                                                   4b81                       li      s7,0
e0000e72:       |  |  |  |                                                   4501                       li      a0,0
e0000e74:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
e0000e78:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
e0000e7c:       |  |  |  |                                                   00168c93           addi    s9,a3,1
e0000e80:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
e0000e84:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000e88:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
e0000e8c:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,e0000ec2 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
e0000e90:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
e0000e94:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,e0000eaa <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
e0000e96:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
e0000e9a:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
e0000e9c:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e0000ea0:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000ea4:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
e0000ea6:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,e0000e80 <base_vfprintf+0xae>
e0000ea8:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       e0001220 <base_vfprintf+0x44e>
e0000eaa:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
e0000eae:       |  |  |  |                                   |     |  |      03000613           li      a2,48
e0000eb2:       |  |  |  |                                   |     |  |      02000513           li      a0,32
e0000eb6:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,e0000e96 <base_vfprintf+0xc4>
e0000eba:       |  |  |  |                                   |     |         03000513           li      a0,48
e0000ebe:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
e0000ec0:       |  |  |  |                                   |     \-------- b7c5                       j       e0000ea0 <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
e0000ec2:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,e0000eca <base_vfprintf+0xf8>
e0000ec4:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,e0000ed2 <base_vfprintf+0x100>
e0000ec8:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       e0001254 <base_vfprintf+0x482>
e0000eca:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
e0000ece:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,e0001254 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0000ed2:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
e0000ed6:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,e0000f28 <base_vfprintf+0x156>
e0000eda:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
e0000edc:       |  |  |  |  |                                         |      00001597           auipc   a1,0x1
e0000ee0:       |  |  |  |  |                                         |      aac58593           addi    a1,a1,-1364 # e0001988 <rom_printf.kHexTable+0xcc>
e0000ee4:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
e0000ee6:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
e0000ee8:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
e0000eea:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,e00011a2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
e0000eee:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
e0000ef0:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
e0000ef4:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
e0000ef6:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
e0000efa:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,e0000f12 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
e0000efe:       |  |  |  |  |  |                                      |  |   00001597           auipc   a1,0x1
e0000f02:       |  |  |  |  |  |                                      |  |   b2158593           addi    a1,a1,-1247 # e0001a1f <rom_printf.kHexTable+0x163>
e0000f06:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
e0000f08:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
e0000f0a:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
e0000f0c:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
e0000f0e:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0000f12:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
e0000f16:       |  |  |  |  |  |                                      |      00001817           auipc   a6,0x1
e0000f1a:       |  |  |  |  |  |                                      |      b2280813           addi    a6,a6,-1246 # e0001a38 <kDigitsLow>
e0000f1e:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
e0000f20:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
e0000f22:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
e0000f24:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
e0000f26:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       e000116e <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0000f28:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
e0000f2c:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,e0000f66 <base_vfprintf+0x194>
e0000f30:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,e00011a2 <base_vfprintf+0x3d0>
e0000f34:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,e00011a2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
e0000f38:       |  |  |  |  |  |        |                                |   00001597           auipc   a1,0x1
e0000f3c:       |  |  |  |  |  |        |                                |   ae558593           addi    a1,a1,-1307 # e0001a1d <rom_printf.kHexTable+0x161>
e0000f40:       |  |  |  |  |  |        |                             /--|-- a851                       j       e0000fd4 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
e0000f42:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,e0000f66 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
e0000f46:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
e0000f48:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
e0000f4c:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e0000f4e:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
e0000f50:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
e0000f54:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e0000f56:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000f58:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
e0000f5c:       |  |  |  |  |  |        |                             |  |   00001897           auipc   a7,0x1
e0000f60:       |  |  |  |  |  |        |                             |  |   b0988893           addi    a7,a7,-1271 # e0001a65 <kDigitsHigh>
e0000f64:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       e0001148 <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
e0000f66:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
e0000f68:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
e0000f6c:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
e0000f6e:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
e0000f70:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
e0000f74:       |  |  |  |  |  |        |           |                 |      00001817           auipc   a6,0x1
e0000f78:       |  |  |  |  |  |        |           |                 |      af180813           addi    a6,a6,-1295 # e0001a65 <kDigitsHigh>
e0000f7c:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       e0001168 <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
e0000f7e:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,e00011a2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
e0000f82:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
e0000f84:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
e0000f88:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e0000f8a:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
e0000f8c:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
e0000f90:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e0000f92:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000f94:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
e0000f98:       |  |  |  |  |  |        |        |  |                 |      00001897           auipc   a7,0x1
e0000f9c:       |  |  |  |  |  |        |        |  |                 |      acd88893           addi    a7,a7,-1331 # e0001a65 <kDigitsHigh>
e0000fa0:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       e0001196 <base_vfprintf+0x3c4>
e0000fa2:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
e0000fa4:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
e0000fa8:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
e0000faa:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
e0000fac:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,e00011bc <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
e0000fb0:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,e0001214 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
e0000fb4:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00001597           auipc   a1,0x1
e0000fb8:       |  |  |  |  |  |  |     |  |  |  |  |                 |      a7058593           addi    a1,a1,-1424 # e0001a24 <rom_printf.kHexTable+0x168>
e0000fbc:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
e0000fbe:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       e00011ac <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
e0000fc0:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,e00011a2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
e0000fc4:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
e0000fc6:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
e0000fca:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
e0000fcc:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
e0000fce:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
e0000fd2:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
e0000fd4:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
e0000fd6:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       e00011ac <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
e0000fd8:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,e00011a2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
e0000fdc:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
e0000fde:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
e0000fe2:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
e0000fe4:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
e0000fe6:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
e0000fea:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00001817           auipc   a6,0x1
e0000fee:       |  |  |  |  |  |  |  |  |  |  |  |  |                        a4e80813           addi    a6,a6,-1458 # e0001a38 <kDigitsLow>
e0000ff2:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
e0000ff4:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       e000116a <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
e0000ff6:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,e00011a2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0000ffa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001597           auipc   a1,0x1
e0000ffe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     a2758593           addi    a1,a1,-1497 # e0001a21 <rom_printf.kHexTable+0x165>
e0001002:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
e0001004:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0001006:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
e0001008:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
e000100a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
e000100e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
e0001010:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0001012:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
e0001016:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001817           auipc   a6,0x1
e000101a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     a2280813           addi    a6,a6,-1502 # e0001a38 <kDigitsLow>
e000101e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
e0001020:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
e0001024:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
e0001026:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0001028:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
e000102a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     e0001344 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
e000102c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
e0001030:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       e00011b2 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
e0001032:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
e0001034:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
e0001038:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
e000103a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
e000103c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
e000103e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
e0001042:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
e0001046:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e0001048:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
e000104a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
e000104c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
e0001050:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     e00013c2 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
e0001052:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e0001054:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e0001056:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
e000105a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
e000105e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e0001060:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
e0001062:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,e000105a <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e0001064:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
e0001068:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e000106c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9c758593           addi    a1,a1,-1593 # e0001a2f <rom_printf.kHexTable+0x173>
e0001070:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0001072:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e0001074:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e0001076:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e0001078:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
e000107c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e000107e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e0001080:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
e0001084:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e0001088:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9ac58593           addi    a1,a1,-1620 # e0001a30 <rom_printf.kHexTable+0x174>
e000108c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e000108e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
e0001090:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e0001092:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
e0001094:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e0001098:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  98058593           addi    a1,a1,-1664 # e0001a14 <rom_printf.kHexTable+0x158>
e000109c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
e000109e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00010a0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e00010a2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
e00010a6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,e00011cc <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
e00010aa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e00010ae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               98858593           addi    a1,a1,-1656 # e0001a32 <rom_printf.kHexTable+0x176>
e00010b2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e00010b4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00010b6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e00010b8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e00010bc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
e00010be:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
e00010c0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00010c2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00010c4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e00010c6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00010c8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001817           auipc   a6,0x1
e00010cc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               97080813           addi    a6,a6,-1680 # e0001a38 <kDigitsLow>
e00010d0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
e00010d2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00010d4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
e00010d6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
e00010d8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
e00010da:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     e0001344 <write_digits>
e00010dc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
e00010de:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e00010e2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               95658593           addi    a1,a1,-1706 # e0001a34 <rom_printf.kHexTable+0x178>
e00010e6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e00010e8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00010ea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e00010ec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
e00010ee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       e00011e6 <base_vfprintf+0x414>
e00010f0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
e00010f2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
e00010f6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
e00010f8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,e00011fe <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
e00010fc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e00010fe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
e0001102:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0001104:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
e0001106:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       e00011ac <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
e0001108:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,e00011a2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
e000110c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
e000110e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
e0001112:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0001114:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0001116:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
e000111a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00001817           auipc   a6,0x1
e000111e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         91e80813           addi    a6,a6,-1762 # e0001a38 <kDigitsLow>
e0001122:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
e0001124:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       e000116a <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
e0001126:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,e0001152 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
e000112a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
e000112c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
e0001130:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0001132:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
e0001134:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
e0001138:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e000113a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e000113c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
e0001140:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00001897           auipc   a7,0x1
e0001144:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   8f888893           addi    a7,a7,-1800 # e0001a38 <kDigitsLow>
e0001148:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
e000114a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
e000114c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
e000114e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
e0001150:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       e000119e <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
e0001152:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
e0001154:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
e0001158:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
e000115a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
e000115c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
e0001160:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00001817           auipc   a6,0x1
e0001164:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      8d880813           addi    a6,a6,-1832 # e0001a38 <kDigitsLow>
e0001168:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
e000116a:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
e000116c:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
e000116e:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
e0001170:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     e0001344 <write_digits>
e0001172:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       e00011b0 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
e0001174:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,e00011a2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
e0001178:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
e000117a:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
e000117e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e0001180:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
e0001182:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
e0001186:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e0001188:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e000118a:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
e000118e:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00001897           auipc   a7,0x1
e0001192:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   8aa88893           addi    a7,a7,-1878 # e0001a38 <kDigitsLow>
e0001196:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
e0001198:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
e000119a:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
e000119c:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
e000119e:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     e0001260 <hex_dump>
e00011a0:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       e00011b0 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
e00011a2:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00001597           auipc   a1,0x1
e00011a6:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   8d358593           addi    a1,a1,-1837 # e0001a75 <kUnknownSpec>
e00011aa:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
e00011ac:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
e00011ae:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
e00011b0:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
e00011b2:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
e00011b6:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,e0000e1e <base_vfprintf+0x4c>
e00011ba:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       e0001234 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
e00011bc:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
e00011c0:       |  |  |     |     |  |                 |  |  |  |  |         00001817           auipc   a6,0x1
e00011c4:       |  |  |     |     |  |                 |  |  |  |  |         87880813           addi    a6,a6,-1928 # e0001a38 <kDigitsLow>
e00011c8:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
e00011ca:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       e000116a <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00011cc:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
e00011ce:       |  |  |     |     |  |                    |     |  |         00001817           auipc   a6,0x1
e00011d2:       |  |  |     |     |  |                    |     |  |         86a80813           addi    a6,a6,-1942 # e0001a38 <kDigitsLow>
e00011d6:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
e00011d8:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
e00011da:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
e00011dc:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
e00011de:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
e00011e0:       |  |  |     |     |  |                    |     |  |         2295                       jal     e0001344 <write_digits>
e00011e2:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
e00011e6:       |  |  |     |     |  |                    |     |  \-------> 00001597           auipc   a1,0x1
e00011ea:       |  |  |     |     |  |                    |     |            85058593           addi    a1,a1,-1968 # e0001a36 <rom_printf.kHexTable+0x17a>
e00011ee:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
e00011f0:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
e00011f2:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
e00011f4:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
e00011f8:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
e00011fc:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       e00011b2 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e00011fe:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
e0001200:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e0001202:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
e0001206:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
e000120a:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e000120c:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,e0001202 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
e000120e:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
e0001212:       |  |  |     |     |  +-------------------------------------- bf69                       j       e00011ac <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
e0001214:       |  |  |     |     \--|-------------------------------------> 00001597           auipc   a1,0x1
e0001218:       |  |  |     |        |                                       81558593           addi    a1,a1,-2027 # e0001a29 <rom_printf.kHexTable+0x16d>
e000121c:       |  |  |     |        |                                       4615                       li      a2,5
e000121e:       |  |  |     |        \-------------------------------------- b779                       j       e00011ac <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
e0001220:       |  |  \-----|----------------------------------------------> 00001597           auipc   a1,0x1
e0001224:       |  |        |                                                82858593           addi    a1,a1,-2008 # e0001a48 <kErrorNul>
e0001228:       |  |        |                                                4645                       li      a2,17
e000122a:       |  |        |                                            /-> 854a                       mv      a0,s2
e000122c:       |  |        |                                            |   9982                       jalr    s3
e000122e:       |  |        |                                            |   9aaa                       add     s5,s5,a0
e0001230:       |  +--------|--------------------------------------------|-- a011                       j       e0001234 <base_vfprintf+0x462>
e0001232:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
e0001234:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
e0001236:                   |                                            |   4df2                       lw      s11,28(sp)
e0001238:                   |                                            |   5d02                       lw      s10,32(sp)
e000123a:                   |                                            |   5c92                       lw      s9,36(sp)
e000123c:                   |                                            |   5c22                       lw      s8,40(sp)
e000123e:                   |                                            |   5bb2                       lw      s7,44(sp)
e0001240:                   |                                            |   5b42                       lw      s6,48(sp)
e0001242:                   |                                            |   5ad2                       lw      s5,52(sp)
e0001244:                   |                                            |   5a62                       lw      s4,56(sp)
e0001246:                   |                                            |   59f2                       lw      s3,60(sp)
e0001248:                   |                                            |   4906                       lw      s2,64(sp)
e000124a:                   |                                            |   4496                       lw      s1,68(sp)
e000124c:                   |                                            |   4426                       lw      s0,72(sp)
e000124e:                   |                                            |   40b6                       lw      ra,76(sp)
e0001250:                   |                                            |   6161                       addi    sp,sp,80
e0001252:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
e0001254:                   \--------------------------------------------|-> 00001597           auipc   a1,0x1
e0001258:                                                                |   80558593           addi    a1,a1,-2043 # e0001a59 <kErrorTooWide>
e000125c:                                                                |   4631                       li      a2,12
e000125e:                                                                \-- b7f1                       j       e000122a <base_vfprintf+0x458>

e0001260 <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
e0001260:                    715d                       addi    sp,sp,-80
e0001262:                    c686                       sw      ra,76(sp)
e0001264:                    c4a2                       sw      s0,72(sp)
e0001266:                    c2a6                       sw      s1,68(sp)
e0001268:                    c0ca                       sw      s2,64(sp)
e000126a:                    de4e                       sw      s3,60(sp)
e000126c:                    dc52                       sw      s4,56(sp)
e000126e:                    da56                       sw      s5,52(sp)
e0001270:                    d85a                       sw      s6,48(sp)
e0001272:                    d65e                       sw      s7,44(sp)
e0001274:                    d462                       sw      s8,40(sp)
e0001276:                    d266                       sw      s9,36(sp)
e0001278:                    d06a                       sw      s10,32(sp)
e000127a:                    8bc6                       mv      s7,a7
e000127c:                    8a42                       mv      s4,a6
e000127e:                    8b36                       mv      s6,a3
e0001280:                    8ab2                       mv      s5,a2
e0001282:                    892e                       mv      s2,a1
e0001284:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
e0001286:          /-------- 02e6fc63           bgeu    a3,a4,e00012be <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
e000128a:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
e000128e:          |         850a                       mv      a0,sp
e0001290:          |         02000613           li      a2,32
e0001294:          |         85be                       mv      a1,a5
e0001296:          |         241d                       jal     e00014bc <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e0001298:          +-------- c09d                       beqz    s1,e00012be <hex_dump+0x5e>
e000129a:          |         4c01                       li      s8,0
e000129c:          |  /----> 02000513           li      a0,32
e00012a0:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
e00012a2:          |  |  /-- 00a4e463           bltu    s1,a0,e00012aa <hex_dump+0x4a>
e00012a6:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e00012aa:          |  |  \-> 858a                       mv      a1,sp
e00012ac:          |  |      854e                       mv      a0,s3
e00012ae:          |  |      8622                       mv      a2,s0
e00012b0:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
e00012b2:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e00012b4:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e00012b6:          |  \----- f0fd                       bnez    s1,e000129c <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e00012b8:          |     /-- 000b1663           bnez    s6,e00012c4 <hex_dump+0x64>
e00012bc:       /--|-----|-- a0ad                       j       e0001326 <hex_dump+0xc6>
e00012be:       |  \-----|-> 4c01                       li      s8,0
e00012c0:       +--------|-- 060b0363           beqz    s6,e0001326 <hex_dump+0xc6>
e00012c4:       |        \-> 4401                       li      s0,0
e00012c6:       |            4601                       li      a2,0
e00012c8:       |            fffb0493           addi    s1,s6,-1
e00012cc:       |            8b0a                       mv      s6,sp
e00012ce:       |            02000c93           li      s9,32
e00012d2:       |            5d7d                       li      s10,-1
e00012d4:       |     /----> 8526                       mv      a0,s1
e00012d6:       |     |  /-- 000a1363           bnez    s4,e00012dc <hex_dump+0x7c>
e00012da:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
e00012dc:       |     |  \-> 9556                       add     a0,a0,s5
e00012de:       |     |      00054503           lbu     a0,0(a0)
e00012e2:       |     |      00455593           srli    a1,a0,0x4
e00012e6:       |     |      95de                       add     a1,a1,s7
e00012e8:       |     |      00058583           lb      a1,0(a1)
e00012ec:       |     |      00cb06b3           add     a3,s6,a2
e00012f0:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e00012f4:       |     |      893d                       andi    a0,a0,15
e00012f6:       |     |      955e                       add     a0,a0,s7
e00012f8:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
e00012fc:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e00012fe:       |     |      00a680a3           sb      a0,1(a3)
e0001302:       |     |  /-- 01961963           bne     a2,s9,e0001314 <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
e0001306:       |     |  |   858a                       mv      a1,sp
e0001308:       |     |  |   02000613           li      a2,32
e000130c:       |     |  |   854e                       mv      a0,s3
e000130e:       |     |  |   9902                       jalr    s2
e0001310:       |     |  |   4601                       li      a2,0
e0001312:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e0001314:       |     |  \-> 14fd                       addi    s1,s1,-1
e0001316:       |     |      0405                       addi    s0,s0,1
e0001318:       |     \----- fba49ee3           bne     s1,s10,e00012d4 <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
e000131c:       +----------- c609                       beqz    a2,e0001326 <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
e000131e:       |            858a                       mv      a1,sp
e0001320:       |            854e                       mv      a0,s3
e0001322:       |            9902                       jalr    s2
e0001324:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
e0001326:       \----------> 8562                       mv      a0,s8
e0001328:                    5d02                       lw      s10,32(sp)
e000132a:                    5c92                       lw      s9,36(sp)
e000132c:                    5c22                       lw      s8,40(sp)
e000132e:                    5bb2                       lw      s7,44(sp)
e0001330:                    5b42                       lw      s6,48(sp)
e0001332:                    5ad2                       lw      s5,52(sp)
e0001334:                    5a62                       lw      s4,56(sp)
e0001336:                    59f2                       lw      s3,60(sp)
e0001338:                    4906                       lw      s2,64(sp)
e000133a:                    4496                       lw      s1,68(sp)
e000133c:                    4426                       lw      s0,72(sp)
e000133e:                    40b6                       lw      ra,76(sp)
e0001340:                    6161                       addi    sp,sp,80
e0001342:                    8082                       ret

e0001344 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
e0001344:              7179                     addi    sp,sp,-48
e0001346:              d606                     sw      ra,44(sp)
e0001348:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
e000134a:       /----- ca05                     beqz    a2,e000137a <write_digits+0x36>
e000134c:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e000134e:       |      02b10293                 addi    t0,sp,43
e0001352:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
e0001354:       |  |   02f65633                 divu    a2,a2,a5
e0001358:       |  |   02f605b3                 mul     a1,a2,a5
e000135c:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
e0001360:       |  |   95c2                     add     a1,a1,a6
e0001362:       |  |   00058e03                 lb      t3,0(a1)
e0001366:       |  |   007285b3                 add     a1,t0,t2
e000136a:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e000136e:       |  |   13fd                     addi    t2,t2,-1
e0001370:       |  \-- fef371e3                 bgeu    t1,a5,e0001352 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e0001374:       |      40700633                 neg     a2,t2
e0001378:       |  /-- a031                     j       e0001384 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
e000137a:       \--|-> 00080583                 lb      a1,0(a6)
e000137e:          |   02b105a3                 sb      a1,43(sp)
e0001382:          |   4605                     li      a2,1
e0001384:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e0001386:          /-- c291                     beqz    a3,e000138a <write_digits+0x46>
e0001388:          |   85b6                     mv      a1,a3
e000138a:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
e000138e:          /-- 00d5e463                 bltu    a1,a3,e0001396 <write_digits+0x52>
e0001392:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e0001396:       /--\-X 00b67e63                 bgeu    a2,a1,e00013b2 <write_digits+0x6e>
e000139a:       |      40c586b3                 sub     a3,a1,a2
e000139e:       |      007c                     addi    a5,sp,12
e00013a0:       |      40c78633                 sub     a2,a5,a2
e00013a4:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
e00013a6:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e00013aa:       |  |   16fd                     addi    a3,a3,-1
e00013ac:       |  |   167d                     addi    a2,a2,-1
e00013ae:       |  \-- fee5                     bnez    a3,e00013a6 <write_digits+0x62>
e00013b0:       |      862e                     mv      a2,a1
e00013b2:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
e00013b4:              8d91                     sub     a1,a1,a2
e00013b6:              02058593                 addi    a1,a1,32
e00013ba:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
e00013bc:              50b2                     lw      ra,44(sp)
e00013be:              6145                     addi    sp,sp,48
e00013c0:              8082                     ret

e00013c2 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
e00013c2:              00052813                 slti    a6,a0,0
e00013c6:              41f55793                 srai    a5,a0,0x1f
e00013ca:              8fe9                     and     a5,a5,a0
e00013cc:              8bfd                     andi    a5,a5,31
e00013ce:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
e00013d2:              00e87833                 and     a6,a6,a4
e00013d6:              02000713                 li      a4,32
e00013da:          /-- 00081363                 bnez    a6,e00013e0 <status_extract+0x1e>
e00013de:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
e00013e0:          \-> 00271813                 slli    a6,a4,0x2
e00013e4:              00001797                 auipc   a5,0x1
e00013e8:              84078793                 addi    a5,a5,-1984 # e0001c24 <status_codes>
e00013ec:              97c2                     add     a5,a5,a6
e00013ee:              439c                     lw      a5,0(a5)
e00013f0:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
e00013f2:              00173593                 seqz    a1,a4
e00013f6:       /----- cb1d                     beqz    a4,e000142c <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e00013f8:       |      00555713                 srli    a4,a0,0x5
e00013fc:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
e0001400:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e0001402:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
e0001406:       |      8a7d                     andi    a2,a2,31
e0001408:       |      04066613                 ori     a2,a2,64
e000140c:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
e0001410:       |      01555613                 srli    a2,a0,0x15
e0001414:       |      8a7d                     andi    a2,a2,31
e0001416:       |      04066613                 ori     a2,a2,64
e000141a:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
e000141e:       |      8169                     srli    a0,a0,0x1a
e0001420:       |      897d                     andi    a0,a0,31
e0001422:       |      04056513                 ori     a0,a0,64
e0001426:       |      00a68123                 sb      a0,2(a3)
e000142a:       |  /-- a011                     j       e000142e <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
e000142c:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
e000142e:          \-> 0015c513                 xori    a0,a1,1
e0001432:              8082                     ret

e0001434 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
e0001434:                       00153693                seqz    a3,a0
e0001438:                       0015b713                seqz    a4,a1
e000143c:                       8ed9                    or      a3,a3,a4
e000143e:       /-------------- eab5                    bnez    a3,e00014b2 <memcpy+0x7e>
e0001440:       |               4711                    li      a4,4
e0001442:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001444:       |        /----- 00e66c63                bltu    a2,a4,e000145c <memcpy+0x28>
e0001448:       |        |      00a5c6b3                xor     a3,a1,a0
e000144c:       |        |      0036f793                andi    a5,a3,3
e0001450:       |        |      8832                    mv      a6,a2
e0001452:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
e0001454:       |        |  /-- eb91                    bnez    a5,e0001468 <memcpy+0x34>
e0001456:       |        |  |   40a006b3                neg     a3,a0
e000145a:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e000145c:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e0001460:       |           |   9b71                    andi    a4,a4,-4
e0001462:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001466:       |  /--------|-- c6b9                    beqz    a3,e00014b4 <memcpy+0x80>
e0001468:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e000146a:       |  |        /-> 00f58733                add     a4,a1,a5
e000146e:       |  |        |   00070883                lb      a7,0(a4)
e0001472:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e0001476:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e0001478:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e000147c:       |  |        \-- fef697e3                bne     a3,a5,e000146a <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001480:       |  |  /-------- 0106fb63                bgeu    a3,a6,e0001496 <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001484:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0001488:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000148a:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e000148e:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0001490:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e0001492:       |  |  |  +----- ff06e9e3                bltu    a3,a6,e0001484 <memcpy+0x50>
e0001496:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,e00014b2 <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
e000149a:       |  |  |  |      8e15                    sub     a2,a2,a3
e000149c:       |  |  |  |      00d50733                add     a4,a0,a3
e00014a0:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
e00014a2:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
e00014a6:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
e00014aa:       |  |  |  |  |   167d                    addi    a2,a2,-1
e00014ac:       |  |  |  |  |   0705                    addi    a4,a4,1
e00014ae:       |  |  |  |  |   0585                    addi    a1,a1,1
e00014b0:       |  |  |  |  \-- fa6d                    bnez    a2,e00014a2 <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
e00014b2:       \--|--|--|----> 8082                    ret
e00014b4:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e00014b6:             |  \----- fd06e7e3                bltu    a3,a6,e0001484 <memcpy+0x50>
e00014ba:             \-------- bff1                    j       e0001496 <memcpy+0x62>

e00014bc <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
e00014bc:                 4691                  li      a3,4
e00014be:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e00014c0:             /-- 00d66663              bltu    a2,a3,e00014cc <memset+0x10>
e00014c4:             |   40a006b3              neg     a3,a0
e00014c8:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e00014cc:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e00014d0:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e00014d4:          /----- cb01                  beqz    a4,e00014e4 <memset+0x28>
e00014d6:          |      87aa                  mv      a5,a0
e00014d8:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
e00014da:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
e00014de:          |  |   16fd                  addi    a3,a3,-1
e00014e0:          |  |   0785                  addi    a5,a5,1
e00014e2:          |  \-- fee5                  bnez    a3,e00014da <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e00014e4:       /--\----X 02080263              beqz    a6,e0001508 <memset+0x4c>
e00014e8:       |         00e808b3              add     a7,a6,a4
e00014ec:       |         0ff5f813              andi    a6,a1,255
e00014f0:       |         010107b7              lui     a5,0x1010
e00014f4:       |         10178793              addi    a5,a5,257 # 1010101 <tohost+0xff00f9>
e00014f8:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e00014fc:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e0001500:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0001502:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e0001504:       |     \-- ff176ce3              bltu    a4,a7,e00014fc <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
e0001508:       \--/----X 00c77a63              bgeu    a4,a2,e000151c <memset+0x60>
e000150c:          |      8e19                  sub     a2,a2,a4
e000150e:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
e0001512:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
e0001516:          |  |   167d                  addi    a2,a2,-1
e0001518:          |  |   0685                  addi    a3,a3,1
e000151a:          |  \-- fe65                  bnez    a2,e0001512 <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
e000151c:          \----> 8082                  ret

e000151e <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
e000151e:                             4691                      li      a3,4
e0001520:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001522:                         /-- 00d66663                  bltu    a2,a3,e000152e <memchr+0x10>
e0001526:                         |   40a006b3                  neg     a3,a0
e000152a:                         |   0036fe93                  andi    t4,a3,3
e000152e:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001532:                      /----- 000e8b63                  beqz    t4,e0001548 <memchr+0x2a>
e0001536:                      |      85aa                      mv      a1,a0
e0001538:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
e000153a:                      |  /-> 0005c683                  lbu     a3,0(a1)
e000153e:       /--------------|--|-- 09c68563                  beq     a3,t3,e00015c8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
e0001542:       |              |  |   17fd                      addi    a5,a5,-1
e0001544:       |              |  |   0585                      addi    a1,a1,1
e0001546:       |              |  \-- fbf5                      bnez    a5,e000153a <memchr+0x1c>
e0001548:       |              \----> 41d605b3                  sub     a1,a2,t4
e000154c:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e000154e:       |  /----------------- c9a9                      beqz    a1,e00015a0 <memchr+0x82>
e0001550:       |  |                  01d58833                  add     a6,a1,t4
e0001554:       |  |                  010105b7                  lui     a1,0x1010
e0001558:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
e000155c:       |  |                  02be02b3                  mul     t0,t3,a1
e0001560:       |  |                  0ff00893                  li      a7,255
e0001564:       |  |                  65c1                      lui     a1,0x10
e0001566:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_stack_len+0x7f00>
e000156a:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000156e:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0001572:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
e0001574:       |  |              |   0056c7b3                  xor     a5,a3,t0
e0001578:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e000157c:       |  |              |   0ff6f713                  andi    a4,a3,255
e0001580:       +--|--------------|-- 05170463                  beq     a4,a7,e00015c8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e0001584:       |  |              |   0076f733                  and     a4,a3,t2
e0001588:       |  |  /-----------|-- 02770b63                  beq     a4,t2,e00015be <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e000158c:       |  |  |           |   0066f6b3                  and     a3,a3,t1
e0001590:       |  |  |  /--------|-- 02668963                  beq     a3,t1,e00015c2 <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e0001594:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
e0001598:       |  |  |  |  /-----|-- c69d                      beqz    a3,e00015c6 <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e000159a:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
e000159c:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,e000156e <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
e00015a0:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,e00015ba <memchr+0x9c>
e00015a4:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
e00015a8:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
e00015ac:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
e00015b0:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,e00015c8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
e00015b4:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
e00015b6:       |     |  |  |  |  |   0585                      addi    a1,a1,1
e00015b8:       |     |  |  |  |  \-- fa75                      bnez    a2,e00015ac <memchr+0x8e>
e00015ba:       |     |  |  |  \----> 4581                      li      a1,0
e00015bc:       +-----|--|--|-------- a031                      j       e00015c8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
e00015be:       |     \--|--|-------> 0585                      addi    a1,a1,1
e00015c0:       +--------|--|-------- a021                      j       e00015c8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
e00015c2:       |        \--|-------> 0589                      addi    a1,a1,2
e00015c4:       +-----------|-------- a011                      j       e00015c8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
e00015c6:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e00015c8:       \-------------------> 852e                      mv      a0,a1
e00015ca:                             8082                      ret

e00015cc <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
e00015cc:                          4691                 li      a3,4
e00015ce:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e00015d0:                      /-- 00d66663             bltu    a2,a3,e00015dc <memrchr+0x10>
e00015d4:                      |   40a006b3             neg     a3,a0
e00015d8:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e00015dc:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e00015e0:                          9af1                 andi    a3,a3,-4
e00015e2:                          006687b3             add     a5,a3,t1
e00015e6:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
e00015e8:                      /-- 00f66363             bltu    a2,a5,e00015ee <memrchr+0x22>
e00015ec:                      |   86be                 mv      a3,a5
e00015ee:                      \-> 0ff5f393             andi    t2,a1,255
e00015f2:                   /--/-X 00c7fd63             bgeu    a5,a2,e000160c <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
e00015f6:                   |  |   00c50733             add     a4,a0,a2
e00015fa:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
e00015fe:                   |  |   fff60713             addi    a4,a2,-1
e0001602:                   |  |   863a                 mv      a2,a4
e0001604:                   |  \-- fe7597e3             bne     a1,t2,e00015f2 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e0001608:                   |      953a                 add     a0,a0,a4
e000160a:                   |      8082                 ret
e000160c:                   \----> 010105b7             lui     a1,0x1010
e0001610:                          10158593             addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
e0001614:                          02b382b3             mul     t0,t2,a1
e0001618:                          00ff0837             lui     a6,0xff0
e000161c:                          65c1                 lui     a1,0x10
e000161e:                          f0058793             addi    a5,a1,-256 # ff00 <_stack_len+0x7f00>
e0001622:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
e0001626:       /--------------/-X 04d37563             bgeu    t1,a3,e0001670 <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000162a:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e000162e:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
e0001632:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e0001636:       |              |   01875593             srli    a1,a4,0x18
e000163a:       |  /-----------|-- cd95                 beqz    a1,e0001676 <memrchr+0xaa>
e000163c:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e0001640:       |  |           |   010775b3             and     a1,a4,a6
e0001644:       |  |  /--------|-- 03058c63             beq     a1,a6,e000167c <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e0001648:       |  |  |        |   00f775b3             and     a1,a4,a5
e000164c:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,e0001682 <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e0001650:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
e0001654:       |  |  |  |     |   16f1                 addi    a3,a3,-4
e0001656:       |  |  |  |     \-- fd1598e3             bne     a1,a7,e0001626 <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e000165a:       |  |  |  |         9536                 add     a0,a0,a3
e000165c:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
e000165e:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
e0001662:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
e0001666:       |  |  |  |     |   fff68613             addi    a2,a3,-1
e000166a:       |  |  |  |     |   86b2                 mv      a3,a2
e000166c:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,e0001688 <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
e0001670:       \--|--|--|--|--\-X f6fd                 bnez    a3,e000165e <memrchr+0x92>
e0001672:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001674:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
e0001676:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e000167a:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
e000167c:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001680:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
e0001682:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001686:                   |      8082                 ret
e0001688:                   \----> 9532                 add     a0,a0,a2
e000168a:                          8082                 ret
