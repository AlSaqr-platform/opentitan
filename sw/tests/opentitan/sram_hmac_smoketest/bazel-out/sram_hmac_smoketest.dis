
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xe0000080

Program Header:
    LOAD off    0x00001000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x00002464 memsz 0x00002464 flags rwx
    LOAD off    0x00000000 vaddr 0xe0008000 paddr 0xe0008000 align 2**12
         filesz 0x00000000 memsz 0x00002000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .vectors          00000084  e0000000  e0000000  00001000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             000018e8  e0000084  e0000084  00001084  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           00000908  e0001970  e0001970  00002970  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data             000000b4  e0002278  e0002278  00003278  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss              0000000c  e000232c  e000232c  0000332c  2**2  ALLOC
  5 .logs.fields      0000012c  e0002338  e0002338  00003338  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .stack            00002000  e0008000  e0008000  00004000  2**0  ALLOC
  7 .debug_loc        00004c22  00000000  00000000  00003464  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev     0000157d  00000000  00000000  00008086  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info       00005e89  00000000  00000000  00009603  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges     000006a0  00000000  00000000  0000f48c  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str        000018da  00000000  00000000  0000fb2c  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment          00000074  00000000  00000000  00011406  2**0  CONTENTS, READONLY
 13 .riscv.attributes 00000026  00000000  00000000  0001147a  2**0  CONTENTS, READONLY
 14 .debug_frame      000007d0  00000000  00000000  000114a0  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line       00004377  00000000  00000000  00011c70  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges    00000028  00000000  00000000  00015fe7  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
e0000000 l    d  .vectors       00000000 .vectors
e0000084 l    d  .text  00000000 .text
e0001970 l    d  .rodata        00000000 .rodata
e0002278 l    d  .data  00000000 .data
e000232c l    d  .bss   00000000 .bss
e0002338 l    d  .logs.fields   00000000 .logs.fields
e0008000 l    d  .stack 00000000 .stack
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .comment       00000000 .comment
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    df *ABS*  00000000 crt0.o
e0000084 l       .text  00000000 default_exc_handler
e0000084 l       .text  00000000 
e00000fe l       .text  00000000 sleep_loop
e0000084 l       .text  00000000 
e0000086 l       .text  00000000 reset_handler
e0000086 l       .text  00000000 
e0000086 l       .text  00000000 
e00000cc l       .text  00000000 
e00000ea l       .text  00000000 zero_loop_end
e00000e0 l       .text  00000000 zero_loop
e00000e0 l       .text  00000000 
e00000ea l       .text  00000000 
e00000ea l       .text  00000000 main_entry
e00000ea l       .text  00000000 
e00000ee l       .text  00000000 
e00000f2 l       .text  00000000 
e00000fe l       .text  00000000 
e0000102 l       .text  00000000 
e0000000 l       .vectors       00000000 
e000002c l       .vectors       00000000 
e0000030 l       .vectors       00000000 
e000007c l       .vectors       00000000 
e0000080 l       .vectors       00000000 
00000f50 l       .debug_info    00000000 
00000467 l       .debug_abbrev  00000000 
e0000104 l       .text  00000000 
e0000084 l       .vectors       00000000 
00000188 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 sram_hmac_smoketest.c
e0000104 l       .text  00000000 
e0000104 l       .text  00000000 
e0000104 l       .text  00000000 
e0000106 l       .text  00000000 
e0000106 l       .text  00000000 
e000010c l       .text  00000000 
e000010c l       .text  00000000 
e000010c l       .text  00000000 
e000010e l       .text  00000000 
e0000110 l       .text  00000000 
e0000112 l       .text  00000000 
e0000112 l       .text  00000000 
e000011c l       .text  00000000 
e000011e l       .text  00000000 
e0000120 l       .text  00000000 
e0000120 l       .text  00000000 
e000012a l       .text  00000000 
e0002338 l     O .logs.fields   00000014 test_setup.kLogFields
e000012c l       .text  00000000 
e000013c l       .text  00000000 
e000013c l       .text  00000000 
e000013e l       .text  00000000 
e0000156 l       .text  00000000 
e0000156 l       .text  00000000 
e000015c l       .text  00000000 
e0000160 l       .text  00000000 
e0000160 l       .text  00000000 
e000016a l       .text  00000000 
e0001bb0 l     O .rodata        00000020 kExpectedShaDigest
e000016a l       .text  00000000 
e00001d4 l     F .text  00000104 run_test
e000017a l       .text  00000000 
e000017a l       .text  00000000 
e0000184 l       .text  00000000 
e0000184 l       .text  00000000 
e000018c l       .text  00000000 
e000018c l       .text  00000000 
e0000196 l       .text  00000000 
e0002278 l     O .data  00000020 kHmacKey
e0000196 l       .text  00000000 
e0001bd0 l     O .rodata        00000020 kExpectedHmacDigest
e00001ae l       .text  00000000 
e00001ae l       .text  00000000 
e00001b8 l       .text  00000000 
e00001b8 l       .text  00000000 
e00001c0 l       .text  00000000 
e00001c0 l       .text  00000000 
e00001c6 l       .text  00000000 
e00001c8 l       .text  00000000 
e00001d4 l       .text  00000000 
e00001d4 l       .text  00000000 
e00001d4 l       .text  00000000 
e00001d4 l       .text  00000000 
e00001d4 l       .text  00000000 
e00001d6 l       .text  00000000 
e00001e0 l       .text  00000000 
e00001e2 l       .text  00000000 
e00001e4 l       .text  00000000 
e00001ec l       .text  00000000 
e00001ec l       .text  00000000 
e00001ee l       .text  00000000 
e00001ee l       .text  00000000 
e00001f8 l       .text  00000000 
e00001fa l       .text  00000000 
e00001fc l       .text  00000000 
e00001fc l       .text  00000000 
e0000200 l       .text  00000000 
e0000202 l       .text  00000000 
e0002360 l     O .logs.fields   00000014 test_start.kLogFields.7
e0000202 l       .text  00000000 
e000020c l       .text  00000000 
e000020c l       .text  00000000 
e000020e l       .text  00000000 
e0000216 l       .text  00000000 
e0000218 l       .text  00000000 
e000021a l       .text  00000000 
e000021a l       .text  00000000 
e000021e l       .text  00000000 
e0000220 l       .text  00000000 
e000234c l     O .logs.fields   00000014 test_start.kLogFields
e0000220 l       .text  00000000 
e0000228 l       .text  00000000 
e0000228 l       .text  00000000 
e0000230 l       .text  00000000 
e0000232 l       .text  00000000 
e0000232 l       .text  00000000 
e000023c l       .text  00000000 
e000023c l       .text  00000000 
e0000244 l       .text  00000000 
e0000244 l       .text  00000000 
e0000254 l       .text  00000000 
e000025e l       .text  00000000 
e0001b20 l     O .rodata        0000008e kData
e000025e l       .text  00000000 
e0000270 l       .text  00000000 
e0000270 l       .text  00000000 
e0000274 l       .text  00000000 
e0000274 l       .text  00000000 
e000027e l       .text  00000000 
e000027e l       .text  00000000 
e0000284 l       .text  00000000 
e0000286 l       .text  00000000 
e0000286 l       .text  00000000 
e0000288 l       .text  00000000 
e0000288 l       .text  00000000 
e000028c l       .text  00000000 
e000028e l       .text  00000000 
e0002374 l     O .logs.fields   00000014 run_hmac.kLogFields
e000028e l       .text  00000000 
e000029e l       .text  00000000 
e000029e l       .text  00000000 
e00002a0 l       .text  00000000 
e00002b8 l       .text  00000000 
e00002b8 l       .text  00000000 
e00002be l       .text  00000000 
e00002c2 l       .text  00000000 
e00002c2 l       .text  00000000 
e00002ca l       .text  00000000 
e00002ca l       .text  00000000 
e00002ce l       .text  00000000 
e00002d0 l       .text  00000000 
e00002d8 l       .text  00000000 
e00002d8 l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000001b l       .debug_loc     00000000 
00000036 l       .debug_loc     00000000 
00000064 l       .debug_loc     00000000 
00000094 l       .debug_loc     00000000 
000000be l       .debug_loc     00000000 
000000fa l       .debug_loc     00000000 
00000120 l       .debug_loc     00000000 
0000017d l       .debug_loc     00000000 
000001ae l       .debug_loc     00000000 
00000216 l       .debug_loc     00000000 
00000288 l       .debug_loc     00000000 
000002ae l       .debug_loc     00000000 
000002d4 l       .debug_loc     00000000 
000002fa l       .debug_loc     00000000 
00000320 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000030 l       .debug_ranges  00000000 
000000c0 l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
0000014d l       .debug_str     00000000 
00000115 l       .debug_str     00000000 
0000012d l       .debug_str     00000000 
00001082 l       .debug_str     00000000 
00000140 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
0000011e l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
000000ed l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000004df l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00000137 l       .debug_str     00000000 
00000165 l       .debug_str     00000000 
000001ea l       .debug_str     00000000 
000001d5 l       .debug_str     00000000 
00000ce6 l       .debug_str     00000000 
00000cfe l       .debug_str     00000000 
000001bf l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000192 l       .debug_str     00000000 
00000201 l       .debug_str     00000000 
00000207 l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
0000023e l       .debug_str     00000000 
0000022e l       .debug_str     00000000 
00000237 l       .debug_str     00000000 
00000250 l       .debug_str     00000000 
00000259 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
0000026d l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
0000027e l       .debug_str     00000000 
00000289 l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002a4 l       .debug_str     00000000 
000002b3 l       .debug_str     00000000 
000002c2 l       .debug_str     00000000 
00000350 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002f0 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
0000031b l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
0000033e l       .debug_str     00000000 
0000036a l       .debug_str     00000000 
0000035c l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
00000372 l       .debug_str     00000000 
0000037d l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
00000387 l       .debug_str     00000000 
000006d7 l       .debug_str     00000000 
000003aa l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
00000524 l       .debug_str     00000000 
00000532 l       .debug_str     00000000 
00000537 l       .debug_str     00000000 
0000053c l       .debug_str     00000000 
00000546 l       .debug_str     00000000 
00000710 l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
000003cf l       .debug_str     00000000 
000003de l       .debug_str     00000000 
000003ec l       .debug_str     00000000 
00000401 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000f79 l       .debug_str     00000000 
00000529 l       .debug_str     00000000 
00000560 l       .debug_str     00000000 
00001241 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000550 l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
00000018 l       .debug_ranges  00000000 
00000428 l       .debug_str     00000000 
00000437 l       .debug_str     00000000 
00000440 l       .debug_str     00000000 
00000459 l       .debug_str     00000000 
00000474 l       .debug_str     00000000 
00000490 l       .debug_str     00000000 
000004b1 l       .debug_str     00000000 
000004d5 l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
000004fd l       .debug_str     00000000 
0000117b l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
e00001d4 l       .text  00000000 
e00002d8 l       .text  00000000 
00000000 l    df *ABS*  00000000 utils.c
e00002d8 l       .text  00000000 
e00002d8 l       .text  00000000 
e00002d8 l       .text  00000000 
e00002da l       .text  00000000 
e00002f4 l       .text  00000000 
e00002f6 l       .text  00000000 
e000030a l       .text  00000000 
e000030a l       .text  00000000 
e000032c l       .text  00000000 
e000032c l       .text  00000000 
e0000330 l       .text  00000000 
e0000338 l       .text  00000000 
e000033c l       .text  00000000 
e0000340 l       .text  00000000 
e0000340 l       .text  00000000 
e000034c l       .text  00000000 
e0000352 l       .text  00000000 
e0000352 l       .text  00000000 
e0000356 l       .text  00000000 
e000035c l       .text  00000000 
e000035c l       .text  00000000 
e0000360 l       .text  00000000 
e0000360 l       .text  00000000 
e0000362 l       .text  00000000 
e0000364 l       .text  00000000 
e0000364 l       .text  00000000 
e0000368 l       .text  00000000 
e000036a l       .text  00000000 
e000036e l       .text  00000000 
e0000372 l       .text  00000000 
e0000372 l       .text  00000000 
e0000376 l       .text  00000000 
e0000376 l       .text  00000000 
e0000378 l       .text  00000000 
e000037c l       .text  00000000 
e0000380 l       .text  00000000 
e000038e l       .text  00000000 
e0000390 l       .text  00000000 
e0000390 l       .text  00000000 
e0000398 l       .text  00000000 
e000039c l       .text  00000000 
e000039e l       .text  00000000 
e00003a2 l       .text  00000000 
e00003a2 l       .text  00000000 
e00003aa l       .text  00000000 
e00003ae l       .text  00000000 
e00003b0 l       .text  00000000 
e00003b4 l       .text  00000000 
e00003b4 l       .text  00000000 
e00003cc l       .text  00000000 
e00003d2 l       .text  00000000 
e00003dc l       .text  00000000 
e00003f0 l       .text  00000000 
e00003f0 l       .text  00000000 
e00003f4 l       .text  00000000 
e00003f4 l       .text  00000000 
e00003f6 l       .text  00000000 
e00003f6 l       .text  00000000 
e00003fe l       .text  00000000 
e0000400 l       .text  00000000 
e0000402 l       .text  00000000 
e0000402 l       .text  00000000 
e0000408 l       .text  00000000 
e0000410 l       .text  00000000 
e0000416 l       .text  00000000 
e000041a l       .text  00000000 
e000041e l       .text  00000000 
e0000422 l       .text  00000000 
e0000512 l     F .text  000000c4 qprints
e0000428 l       .text  00000000 
e000042a l       .text  00000000 
e0000430 l       .text  00000000 
e0000434 l       .text  00000000 
e000043a l       .text  00000000 
e000043c l       .text  00000000 
e00005d6 l     F .text  0000013a qprinti
e0000444 l       .text  00000000 
e0000446 l       .text  00000000 
e0000446 l       .text  00000000 
e0000448 l       .text  00000000 
e000044a l       .text  00000000 
e000044a l       .text  00000000 
e000045c l       .text  00000000 
e000046a l       .text  00000000 
e000046a l       .text  00000000 
e000046a l       .text  00000000 
e000046a l       .text  00000000 
e000046a l       .text  00000000 
e000046e l       .text  00000000 
e0000472 l       .text  00000000 
e0000474 l       .text  00000000 
e0000478 l       .text  00000000 
e000047a l       .text  00000000 
e000047e l       .text  00000000 
e000047e l       .text  00000000 
e0000484 l       .text  00000000 
e0000488 l       .text  00000000 
e000048a l       .text  00000000 
e000048c l       .text  00000000 
e0000490 l       .text  00000000 
e0000494 l       .text  00000000 
e0000496 l       .text  00000000 
e0000498 l       .text  00000000 
e0000498 l       .text  00000000 
e0000498 l       .text  00000000 
e0000498 l       .text  00000000 
e0000498 l       .text  00000000 
e000049a l       .text  00000000 
e000049a l       .text  00000000 
e00004a8 l       .text  00000000 
e00004b0 l       .text  00000000 
e00004b2 l       .text  00000000 
e00004b6 l       .text  00000000 
e00004ba l       .text  00000000 
e00004c6 l       .text  00000000 
e00004c8 l       .text  00000000 
e00004ca l       .text  00000000 
e00004ca l       .text  00000000 
e00004cc l       .text  00000000 
e00004cc l       .text  00000000 
e00004ce l       .text  00000000 
e00004ce l       .text  00000000 
e00004d0 l       .text  00000000 
e00004d0 l       .text  00000000 
e00004d4 l       .text  00000000 
e00004d4 l       .text  00000000 
e00004dc l       .text  00000000 
e00004de l       .text  00000000 
e00004de l       .text  00000000 
e00004e0 l       .text  00000000 
e00004e0 l       .text  00000000 
e00004f6 l       .text  00000000 
e00004fa l       .text  00000000 
e00004fc l       .text  00000000 
e00004fe l       .text  00000000 
e00004fe l       .text  00000000 
e0000500 l       .text  00000000 
e0000504 l       .text  00000000 
e0000506 l       .text  00000000 
e0000512 l       .text  00000000 
e0000512 l       .text  00000000 
e0000512 l       .text  00000000 
e0000512 l       .text  00000000 
e0000512 l       .text  00000000 
e0000512 l       .text  00000000 
e0000516 l       .text  00000000 
e0000516 l       .text  00000000 
e000051a l       .text  00000000 
e000051c l       .text  00000000 
e000051e l       .text  00000000 
e0000522 l       .text  00000000 
e0000522 l       .text  00000000 
e000052a l       .text  00000000 
e000052e l       .text  00000000 
e000052e l       .text  00000000 
e0000530 l       .text  00000000 
e0000534 l       .text  00000000 
e0000534 l       .text  00000000 
e0000536 l       .text  00000000 
e000053c l       .text  00000000 
e000053e l       .text  00000000 
e000053e l       .text  00000000 
e0000548 l       .text  00000000 
e000054a l       .text  00000000 
e000054a l       .text  00000000 
e0000552 l       .text  00000000 
e0000554 l       .text  00000000 
e0000554 l       .text  00000000 
e0000558 l       .text  00000000 
e0000558 l       .text  00000000 
e0000564 l       .text  00000000 
e0000564 l       .text  00000000 
e0000568 l       .text  00000000 
e0000570 l       .text  00000000 
e0000572 l       .text  00000000 
e0000572 l       .text  00000000 
e0000574 l       .text  00000000 
e0000578 l       .text  00000000 
e000057a l       .text  00000000 
e000057a l       .text  00000000 
e000057e l       .text  00000000 
e000057e l       .text  00000000 
e0000580 l       .text  00000000 
e0000584 l       .text  00000000 
e0000584 l       .text  00000000 
e0000588 l       .text  00000000 
e0000588 l       .text  00000000 
e000058a l       .text  00000000 
e000058c l       .text  00000000 
e0000590 l       .text  00000000 
e0000590 l       .text  00000000 
e0000594 l       .text  00000000 
e0000596 l       .text  00000000 
e000059a l       .text  00000000 
e000059a l       .text  00000000 
e000059c l       .text  00000000 
e00005a2 l       .text  00000000 
e00005a2 l       .text  00000000 
e00005a6 l       .text  00000000 
e00005a6 l       .text  00000000 
e00005a8 l       .text  00000000 
e00005a8 l       .text  00000000 
e00005ac l       .text  00000000 
e00005ae l       .text  00000000 
e00005b0 l       .text  00000000 
e00005b2 l       .text  00000000 
e00005b2 l       .text  00000000 
e00005ba l       .text  00000000 
e00005ba l       .text  00000000 
e00005be l       .text  00000000 
e00005be l       .text  00000000 
e00005c0 l       .text  00000000 
e00005c4 l       .text  00000000 
e00005c6 l       .text  00000000 
e00005c6 l       .text  00000000 
e00005c8 l       .text  00000000 
e00005c8 l       .text  00000000 
e00005cc l       .text  00000000 
e00005cc l       .text  00000000 
e00005d0 l       .text  00000000 
e00005d0 l       .text  00000000 
e00005d2 l       .text  00000000 
e00005d2 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005d8 l       .text  00000000 
e00005d8 l       .text  00000000 
e00005dc l       .text  00000000 
e00005dc l       .text  00000000 
e00005dc l       .text  00000000 
e00005de l       .text  00000000 
e00005e2 l       .text  00000000 
e00005e2 l       .text  00000000 
e00005ea l       .text  00000000 
e00005f8 l       .text  00000000 
e00005fc l       .text  00000000 
e00005fc l       .text  00000000 
e0000600 l       .text  00000000 
e0000600 l       .text  00000000 
e0000602 l       .text  00000000 
e0000606 l       .text  00000000 
e000060a l       .text  00000000 
e000060c l       .text  00000000 
e0000610 l       .text  00000000 
e0000614 l       .text  00000000 
e0000616 l       .text  00000000 
e0000616 l       .text  00000000 
e0000618 l       .text  00000000 
e0000618 l       .text  00000000 
e000061a l       .text  00000000 
e000061e l       .text  00000000 
e0000620 l       .text  00000000 
e0000622 l       .text  00000000 
e0000622 l       .text  00000000 
e0000626 l       .text  00000000 
e000062a l       .text  00000000 
e000062a l       .text  00000000 
e000062e l       .text  00000000 
e0000632 l       .text  00000000 
e0000632 l       .text  00000000 
e0000634 l       .text  00000000 
e0000634 l       .text  00000000 
e000063a l       .text  00000000 
e000063a l       .text  00000000 
e000063e l       .text  00000000 
e000063e l       .text  00000000 
e0000642 l       .text  00000000 
e0000646 l       .text  00000000 
e000064a l       .text  00000000 
e000064c l       .text  00000000 
e000064e l       .text  00000000 
e000064e l       .text  00000000 
e0000650 l       .text  00000000 
e0000650 l       .text  00000000 
e0000652 l       .text  00000000 
e0000656 l       .text  00000000 
e000065a l       .text  00000000 
e0000664 l       .text  00000000 
e0000664 l       .text  00000000 
e0000668 l       .text  00000000 
e000066c l       .text  00000000 
e000066e l       .text  00000000 
e0000672 l       .text  00000000 
e0000674 l       .text  00000000 
e0000676 l       .text  00000000 
e0000676 l       .text  00000000 
e0000678 l       .text  00000000 
e000067c l       .text  00000000 
e000067c l       .text  00000000 
e0000680 l       .text  00000000 
e0000680 l       .text  00000000 
e0000684 l       .text  00000000 
e0000686 l       .text  00000000 
e0000686 l       .text  00000000 
e000068a l       .text  00000000 
e000068c l       .text  00000000 
e0000690 l       .text  00000000 
e0000692 l       .text  00000000 
e0000696 l       .text  00000000 
e0000698 l       .text  00000000 
e000069c l       .text  00000000 
e000069c l       .text  00000000 
e00006a0 l       .text  00000000 
e00006a2 l       .text  00000000 
e00006a2 l       .text  00000000 
e00006a6 l       .text  00000000 
e00006a6 l       .text  00000000 
e00006a8 l       .text  00000000 
e00006aa l       .text  00000000 
e00006ac l       .text  00000000 
e00006ac l       .text  00000000 
e00006b2 l       .text  00000000 
e00006b4 l       .text  00000000 
e00006b4 l       .text  00000000 
e00006b8 l       .text  00000000 
e00006bc l       .text  00000000 
e00006bc l       .text  00000000 
e00006c4 l       .text  00000000 
e00006c8 l       .text  00000000 
e00006ca l       .text  00000000 
e00006ce l       .text  00000000 
e00006ce l       .text  00000000 
e00006d2 l       .text  00000000 
e00006d8 l       .text  00000000 
e00006d8 l       .text  00000000 
e00006da l       .text  00000000 
e00006dc l       .text  00000000 
e00006dc l       .text  00000000 
e00006e0 l       .text  00000000 
e00006e0 l       .text  00000000 
e00006e4 l       .text  00000000 
e00006e8 l       .text  00000000 
e00006e8 l       .text  00000000 
e00006ea l       .text  00000000 
e00006ee l       .text  00000000 
e00006f0 l       .text  00000000 
e00006f0 l       .text  00000000 
e00006f8 l       .text  00000000 
e00006fa l       .text  00000000 
e00006fa l       .text  00000000 
e00006fc l       .text  00000000 
e00006fe l       .text  00000000 
e00006fe l       .text  00000000 
e0000700 l       .text  00000000 
e0000702 l       .text  00000000 
e0000704 l       .text  00000000 
e0000706 l       .text  00000000 
e0000706 l       .text  00000000 
e0000708 l       .text  00000000 
e0000708 l       .text  00000000 
e0000710 l       .text  00000000 
e0000710 l       .text  00000000 
00000351 l       .debug_loc     00000000 
00000377 l       .debug_loc     00000000 
0000039f l       .debug_loc     00000000 
000003c5 l       .debug_loc     00000000 
00000422 l       .debug_loc     00000000 
0000044a l       .debug_loc     00000000 
00000470 l       .debug_loc     00000000 
000004a5 l       .debug_loc     00000000 
000004e5 l       .debug_loc     00000000 
00000500 l       .debug_loc     00000000 
00000521 l       .debug_loc     00000000 
0000053c l       .debug_loc     00000000 
00000557 l       .debug_loc     00000000 
00000572 l       .debug_loc     00000000 
0000058d l       .debug_loc     00000000 
000005b5 l       .debug_loc     00000000 
000005e6 l       .debug_loc     00000000 
0000061b l       .debug_loc     00000000 
00000643 l       .debug_loc     00000000 
0000065f l       .debug_loc     00000000 
0000067a l       .debug_loc     00000000 
00000695 l       .debug_loc     00000000 
000006b0 l       .debug_loc     00000000 
000006cb l       .debug_loc     00000000 
000006e6 l       .debug_loc     00000000 
00000701 l       .debug_loc     00000000 
0000071c l       .debug_loc     00000000 
00000779 l       .debug_loc     00000000 
0000079f l       .debug_loc     00000000 
000007df l       .debug_loc     00000000 
00000807 l       .debug_loc     00000000 
0000082d l       .debug_loc     00000000 
0000086d l       .debug_loc     00000000 
0000089f l       .debug_loc     00000000 
000008cb l       .debug_loc     00000000 
000008e6 l       .debug_loc     00000000 
00000901 l       .debug_loc     00000000 
00000922 l       .debug_loc     00000000 
0000093d l       .debug_loc     00000000 
00000963 l       .debug_loc     00000000 
0000099f l       .debug_loc     00000000 
000009c5 l       .debug_loc     00000000 
00000a0c l       .debug_loc     00000000 
00000a53 l       .debug_loc     00000000 
00000a8f l       .debug_loc     00000000 
00000ab7 l       .debug_loc     00000000 
00000b14 l       .debug_loc     00000000 
00000b3e l       .debug_loc     00000000 
00000b80 l       .debug_loc     00000000 
00000c09 l       .debug_loc     00000000 
00000c24 l       .debug_loc     00000000 
00000c4a l       .debug_loc     00000000 
00000c70 l       .debug_loc     00000000 
00000c8d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000565 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000120 l       .debug_ranges  00000000 
00000587 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00000207 l       .debug_str     00000000 
000004df l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
000005f4 l       .debug_str     00000000 
00000f79 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
0000059b l       .debug_str     00000000 
000005b4 l       .debug_str     00000000 
00000594 l       .debug_str     00000000 
000015de l       .debug_str     00000000 
000005b0 l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
000005bd l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
000005a8 l       .debug_str     00000000 
0000059e l       .debug_str     00000000 
000005c1 l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
000005cf l       .debug_str     00000000 
000005d7 l       .debug_str     00000000 
000005e2 l       .debug_str     00000000 
0000064a l       .debug_str     00000000 
000006b4 l       .debug_str     00000000 
000006bb l       .debug_str     00000000 
000006c3 l       .debug_str     00000000 
00001241 l       .debug_str     00000000 
00000078 l       .debug_ranges  00000000 
00000090 l       .debug_ranges  00000000 
000000a8 l       .debug_ranges  00000000 
000000c0 l       .debug_ranges  00000000 
000000d8 l       .debug_ranges  00000000 
000000f0 l       .debug_ranges  00000000 
00000652 l       .debug_str     00000000 
0000032a l       .debug_str     00000000 
00000684 l       .debug_str     00000000 
000006d1 l       .debug_str     00000000 
000006d4 l       .debug_str     00000000 
000006c7 l       .debug_str     00000000 
000006dc l       .debug_str     00000000 
000006de l       .debug_str     00000000 
00001623 l       .debug_str     00000000 
00000108 l       .debug_ranges  00000000 
000003c2 l       .debug_str     00000000 
0000065a l       .debug_str     00000000 
00000661 l       .debug_str     00000000 
00000607 l       .debug_str     00000000 
00000611 l       .debug_str     00000000 
0000061e l       .debug_str     00000000 
00000630 l       .debug_str     00000000 
00000048 l       .debug_ranges  00000000 
00000060 l       .debug_ranges  00000000 
00000635 l       .debug_str     00000000 
00000676 l       .debug_str     00000000 
0000067e l       .debug_str     00000000 
00000710 l       .debug_str     00000000 
00001439 l       .debug_str     00000000 
00000d7e l       .debug_str     00000000 
00000686 l       .debug_str     00000000 
0000068d l       .debug_str     00000000 
00000698 l       .debug_str     00000000 
0000069f l       .debug_str     00000000 
000006a6 l       .debug_str     00000000 
000006ad l       .debug_str     00000000 
000005e6 l       .debug_str     00000000 
000013f7 l       .debug_str     00000000 
000005ed l       .debug_str     00000000 
0000160f l       .debug_str     00000000 
00000368 l       .debug_str     00000000 
0000066d l       .debug_str     00000000 
000003cf l       .debug_str     00000000 
00000050 l       .debug_frame   00000000 
e000046a l       .text  00000000 
e0000498 l       .text  00000000 
e0000512 l       .text  00000000 
e00005d6 l       .text  00000000 
e0000710 l       .text  00000000 
00000000 l    df *ABS*  00000000 hmac_testutils.c
e0000710 l       .text  00000000 
e0000710 l       .text  00000000 
e0000710 l       .text  00000000 
e0000712 l       .text  00000000 
e000071e l       .text  00000000 
e0000722 l       .text  00000000 
e0000722 l       .text  00000000 
e0000726 l       .text  00000000 
e0000726 l       .text  00000000 
e000072e l       .text  00000000 
e0000730 l       .text  00000000 
e0000730 l       .text  00000000 
e0000732 l       .text  00000000 
e0000732 l       .text  00000000 
e0000736 l       .text  00000000 
e0000738 l       .text  00000000 
e0002388 l     O .logs.fields   00000014 hmac_testutils_check_message_length.kLogFields
e0000738 l       .text  00000000 
e0000748 l       .text  00000000 
e0000748 l       .text  00000000 
e000074a l       .text  00000000 
e000074a l       .text  00000000 
e0000762 l       .text  00000000 
e0000762 l       .text  00000000 
e0000768 l       .text  00000000 
e000076a l       .text  00000000 
e000076a l       .text  00000000 
e000076c l       .text  00000000 
e000076e l       .text  00000000 
e0000778 l       .text  00000000 
e000077a l       .text  00000000 
e000077e l       .text  00000000 
e0000780 l       .text  00000000 
e000239c l     O .logs.fields   00000014 hmac_testutils_check_message_length.kLogFields.2
e0000780 l       .text  00000000 
e0000796 l       .text  00000000 
e0000796 l       .text  00000000 
e0000798 l       .text  00000000 
e0000798 l       .text  00000000 
e00007b6 l       .text  00000000 
e00007b6 l       .text  00000000 
e00007bc l       .text  00000000 
e00007be l       .text  00000000 
e00007be l       .text  00000000 
e00007c2 l       .text  00000000 
e00007c4 l       .text  00000000 
e00007ce l       .text  00000000 
e00007ce l       .text  00000000 
e00007ce l       .text  00000000 
e00007ce l       .text  00000000 
e00007ce l       .text  00000000 
e00007d0 l       .text  00000000 
e00007ea l       .text  00000000 
e00007ea l       .text  00000000 
e00007f2 l       .text  00000000 
e00007f2 l       .text  00000000 
e00007fc l       .text  00000000 
e00007fc l       .text  00000000 
e0000806 l       .text  00000000 
e0000812 l       .text  00000000 
e0000814 l       .text  00000000 
e0000814 l       .text  00000000 
e0000822 l       .text  00000000 
e0000822 l       .text  00000000 
e000082a l       .text  00000000 
e0000832 l       .text  00000000 
e0000832 l       .text  00000000 
e000083c l       .text  00000000 
e000083e l       .text  00000000 
e0000840 l       .text  00000000 
e0000840 l       .text  00000000 
e0000850 l       .text  00000000 
e0000850 l       .text  00000000 
e0000858 l       .text  00000000 
e000085c l       .text  00000000 
e000085e l       .text  00000000 
e0000862 l       .text  00000000 
e00023b0 l     O .logs.fields   00000014 hmac_testutils_fifo_empty_polled.kLogFields
e0002414 l     O .logs.fields   00000014 check_fifo_empty.kLogFields
e000088e l       .text  00000000 
e000088e l       .text  00000000 
e0000894 l       .text  00000000 
e0000896 l       .text  00000000 
e0000898 l       .text  00000000 
e0000898 l       .text  00000000 
e000089c l       .text  00000000 
e00008a4 l       .text  00000000 
e00008a4 l       .text  00000000 
e00008a6 l       .text  00000000 
e00008b6 l       .text  00000000 
e00008b6 l       .text  00000000 
e00008ba l       .text  00000000 
e00008ba l       .text  00000000 
e00008bc l       .text  00000000 
e00008bc l       .text  00000000 
e00008be l       .text  00000000 
e00008be l       .text  00000000 
e00008ce l       .text  00000000 
e00008ce l       .text  00000000 
e00008d0 l       .text  00000000 
e00008d6 l       .text  00000000 
e00008d6 l       .text  00000000 
e00008d8 l       .text  00000000 
e00008d8 l       .text  00000000 
e00008dc l       .text  00000000 
e00008dc l       .text  00000000 
e00008ea l       .text  00000000 
e00008ec l       .text  00000000 
e00008fa l       .text  00000000 
e0000906 l       .text  00000000 
e000090a l       .text  00000000 
e0000916 l       .text  00000000 
e0000916 l       .text  00000000 
e0000918 l       .text  00000000 
e0000918 l       .text  00000000 
e000092c l       .text  00000000 
e000092c l       .text  00000000 
e0000930 l       .text  00000000 
e0000930 l       .text  00000000 
e0000932 l       .text  00000000 
e0000932 l       .text  00000000 
e0000940 l       .text  00000000 
e0000950 l       .text  00000000 
e0000950 l       .text  00000000 
e0000950 l       .text  00000000 
e0000950 l       .text  00000000 
e0000950 l       .text  00000000 
e0000952 l       .text  00000000 
e000096c l       .text  00000000 
e000096c l       .text  00000000 
e0000974 l       .text  00000000 
e0000974 l       .text  00000000 
e000097a l       .text  00000000 
e000097a l       .text  00000000 
e000097c l       .text  00000000 
e0000986 l       .text  00000000 
e0000992 l       .text  00000000 
e0000996 l       .text  00000000 
e0000996 l       .text  00000000 
e00009a6 l       .text  00000000 
e00009a6 l       .text  00000000 
e00009ae l       .text  00000000 
e00009b6 l       .text  00000000 
e00009b6 l       .text  00000000 
e00009c0 l       .text  00000000 
e00009c2 l       .text  00000000 
e00009c4 l       .text  00000000 
e00009c4 l       .text  00000000 
e00009d4 l       .text  00000000 
e00009d4 l       .text  00000000 
e00009dc l       .text  00000000 
e00009e0 l       .text  00000000 
e00009e2 l       .text  00000000 
e00009e6 l       .text  00000000 
e00009e8 l       .text  00000000 
e00023c4 l     O .logs.fields   00000014 hmac_testutils_finish_polled.kLogFields
e0002428 l     O .logs.fields   00000014 check_finished.kLogFields
e0000a16 l       .text  00000000 
e0000a16 l       .text  00000000 
e0000a1c l       .text  00000000 
e0000a1c l       .text  00000000 
e0000a20 l       .text  00000000 
e0000a22 l       .text  00000000 
e0000a22 l       .text  00000000 
e0000a24 l       .text  00000000 
e0000a28 l       .text  00000000 
e0000a30 l       .text  00000000 
e0000a30 l       .text  00000000 
e0000a32 l       .text  00000000 
e0000a42 l       .text  00000000 
e0000a42 l       .text  00000000 
e0000a46 l       .text  00000000 
e0000a46 l       .text  00000000 
e0000a56 l       .text  00000000 
e0000a56 l       .text  00000000 
e0000a58 l       .text  00000000 
e0000a5e l       .text  00000000 
e0000a5e l       .text  00000000 
e0000a60 l       .text  00000000 
e0000a60 l       .text  00000000 
e0000a64 l       .text  00000000 
e0000a64 l       .text  00000000 
e0000a72 l       .text  00000000 
e0000a74 l       .text  00000000 
e0000a82 l       .text  00000000 
e0000a8e l       .text  00000000 
e0000a92 l       .text  00000000 
e0000a9e l       .text  00000000 
e0000a9e l       .text  00000000 
e0000aa0 l       .text  00000000 
e0000aa0 l       .text  00000000 
e0000ab4 l       .text  00000000 
e0000ab4 l       .text  00000000 
e0000ab8 l       .text  00000000 
e0000ab8 l       .text  00000000 
e0000aba l       .text  00000000 
e0000aba l       .text  00000000 
e0000ac6 l       .text  00000000 
e0000ac8 l       .text  00000000 
e0000ad8 l       .text  00000000 
e0000ad8 l       .text  00000000 
e0000ad8 l       .text  00000000 
e0000ad8 l       .text  00000000 
e0000ad8 l       .text  00000000 
e0000ada l       .text  00000000 
e0000af2 l       .text  00000000 
e0000af4 l       .text  00000000 
e0000af4 l       .text  00000000 
e0000afa l       .text  00000000 
e0000afa l       .text  00000000 
e00023ec l     O .logs.fields   00000014 hmac_testutils_finish_and_check_polled.kLogFields.8
e00023d8 l     O .logs.fields   00000014 hmac_testutils_finish_and_check_polled.kLogFields
e0000b2e l       .text  00000000 
e0000b2e l       .text  00000000 
e0000b34 l       .text  00000000 
e0000b38 l       .text  00000000 
e0000b3c l       .text  00000000 
e0000b42 l       .text  00000000 
e0000b46 l       .text  00000000 
e0000b4c l       .text  00000000 
e0000b4c l       .text  00000000 
e0000b5a l       .text  00000000 
e0000b5a l       .text  00000000 
e0000b5c l       .text  00000000 
e0000b5c l       .text  00000000 
e0000b6a l       .text  00000000 
e0000b6a l       .text  00000000 
e0000b86 l       .text  00000000 
e0000b86 l       .text  00000000 
e0000b88 l       .text  00000000 
e0000b8e l       .text  00000000 
e0000b92 l       .text  00000000 
e0000b92 l       .text  00000000 
e0000b96 l       .text  00000000 
e0000b9c l       .text  00000000 
e0000b9e l       .text  00000000 
e0000b9e l       .text  00000000 
e0000bba l       .text  00000000 
e0000bba l       .text  00000000 
e0000bba l       .text  00000000 
e0000bba l       .text  00000000 
e0000bba l       .text  00000000 
e0000bbc l       .text  00000000 
e0000bbc l       .text  00000000 
e0000bd0 l       .text  00000000 
e0000bd0 l       .text  00000000 
e0000bd2 l       .text  00000000 
e0000bd4 l       .text  00000000 
e0000bd6 l       .text  00000000 
e0000bd8 l       .text  00000000 
e0002400 l     O .logs.fields   00000014 hmac_testutils_push_message.kLogFields
e0000c00 l       .text  00000000 
e0000c00 l       .text  00000000 
e0000c04 l       .text  00000000 
e0000c04 l       .text  00000000 
e0000c0c l       .text  00000000 
e0000c0e l       .text  00000000 
e0000c0e l       .text  00000000 
e0000c12 l       .text  00000000 
e0000c16 l       .text  00000000 
e0000c1e l       .text  00000000 
e0000c1e l       .text  00000000 
e0000c20 l       .text  00000000 
e0000c20 l       .text  00000000 
e0000c30 l       .text  00000000 
e0000c30 l       .text  00000000 
e0000c34 l       .text  00000000 
e0000c34 l       .text  00000000 
e0000c3c l       .text  00000000 
e0000c3e l       .text  00000000 
e0000c42 l       .text  00000000 
e0000c42 l       .text  00000000 
e0000c44 l       .text  00000000 
e0000c44 l       .text  00000000 
e0000c46 l       .text  00000000 
e0000c46 l       .text  00000000 
e0000c4a l       .text  00000000 
e0000c4a l       .text  00000000 
e0000c4e l       .text  00000000 
e0000c4e l       .text  00000000 
e0000c66 l       .text  00000000 
e0000c66 l       .text  00000000 
00000cae l       .debug_loc     00000000 
00000cc9 l       .debug_loc     00000000 
00000d1a l       .debug_loc     00000000 
00000d77 l       .debug_loc     00000000 
00000da8 l       .debug_loc     00000000 
00000dd9 l       .debug_loc     00000000 
00000df4 l       .debug_loc     00000000 
00000e4a l       .debug_loc     00000000 
00000e66 l       .debug_loc     00000000 
00000e8d l       .debug_loc     00000000 
00000eb4 l       .debug_loc     00000000 
00000edb l       .debug_loc     00000000 
00000f01 l       .debug_loc     00000000 
00000f28 l       .debug_loc     00000000 
00000f4f l       .debug_loc     00000000 
00000f6b l       .debug_loc     00000000 
00000f9c l       .debug_loc     00000000 
00000fcd l       .debug_loc     00000000 
00000fe8 l       .debug_loc     00000000 
00001054 l       .debug_loc     00000000 
00001070 l       .debug_loc     00000000 
00001097 l       .debug_loc     00000000 
000010be l       .debug_loc     00000000 
000010e4 l       .debug_loc     00000000 
0000110b l       .debug_loc     00000000 
00001132 l       .debug_loc     00000000 
0000114e l       .debug_loc     00000000 
00001169 l       .debug_loc     00000000 
0000118f l       .debug_loc     00000000 
000011b5 l       .debug_loc     00000000 
000011e6 l       .debug_loc     00000000 
00001217 l       .debug_loc     00000000 
00001232 l       .debug_loc     00000000 
00001259 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000006e2 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000001b0 l       .debug_ranges  00000000 
00000709 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00000207 l       .debug_str     00000000 
00000712 l       .debug_str     00000000 
0000036a l       .debug_str     00000000 
0000035c l       .debug_str     00000000 
00000722 l       .debug_str     00000000 
0000023e l       .debug_str     00000000 
0000022e l       .debug_str     00000000 
00000237 l       .debug_str     00000000 
00000137 l       .debug_str     00000000 
000004df l       .debug_str     00000000 
00000738 l       .debug_str     00000000 
000004b1 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000899 l       .debug_str     00000000 
000008a2 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
0000014d l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
00000115 l       .debug_str     00000000 
0000012d l       .debug_str     00000000 
00001082 l       .debug_str     00000000 
00000140 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
0000011e l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
000000ed l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
00000490 l       .debug_str     00000000 
000008ac l       .debug_str     00000000 
0000087c l       .debug_str     00000000 
0000084e l       .debug_str     00000000 
000004fd l       .debug_str     00000000 
000008b5 l       .debug_str     00000000 
000008be l       .debug_str     00000000 
0000032a l       .debug_str     00000000 
00000474 l       .debug_str     00000000 
00000560 l       .debug_str     00000000 
00001241 l       .debug_str     00000000 
000008c3 l       .debug_str     00000000 
000008c6 l       .debug_str     00000000 
0000138e l       .debug_str     00000000 
0000026d l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
0000027e l       .debug_str     00000000 
00000289 l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002a4 l       .debug_str     00000000 
000002b3 l       .debug_str     00000000 
000002c2 l       .debug_str     00000000 
00000350 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002f0 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
0000031b l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
0000033e l       .debug_str     00000000 
0000074f l       .debug_str     00000000 
000004d5 l       .debug_str     00000000 
00000758 l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
0000037d l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
00000387 l       .debug_str     00000000 
000006d7 l       .debug_str     00000000 
000003ec l       .debug_str     00000000 
00000401 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
00000774 l       .debug_str     00000000 
000007a2 l       .debug_str     00000000 
00000793 l       .debug_str     00000000 
00000786 l       .debug_str     00000000 
00000ee6 l       .debug_str     00000000 
0000046e l       .debug_str     00000000 
000007af l       .debug_str     00000000 
000007c0 l       .debug_str     00000000 
000007cd l       .debug_str     00000000 
000007d8 l       .debug_str     00000000 
000007e2 l       .debug_str     00000000 
000007f9 l       .debug_str     00000000 
000007f3 l       .debug_str     00000000 
000003aa l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
00000804 l       .debug_str     00000000 
0000078b l       .debug_str     00000000 
00000817 l       .debug_str     00000000 
00000823 l       .debug_str     00000000 
0000083f l       .debug_str     00000000 
00000859 l       .debug_str     00000000 
00000869 l       .debug_str     00000000 
0000117b l       .debug_str     00000000 
00000160 l       .debug_frame   00000000 
e00007ce l       .text  00000000 
e0000950 l       .text  00000000 
e0000ad8 l       .text  00000000 
e0000bba l       .text  00000000 
e0000c66 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_hmac_autogen.c
e0000c66 l       .text  00000000 
e0000c66 l       .text  00000000 
e0000c66 l       .text  00000000 
e0000c66 l       .text  00000000 
e0000c68 l       .text  00000000 
e0000c6a l       .text  00000000 
e0000c6e l       .text  00000000 
e0000c70 l       .text  00000000 
e0000c72 l       .text  00000000 
e0000c74 l       .text  00000000 
e0000c74 l       .text  00000000 
00001274 l       .debug_loc     00000000 
0000128f l       .debug_loc     00000000 
000012aa l       .debug_loc     00000000 
000012c5 l       .debug_loc     00000000 
000012e1 l       .debug_loc     00000000 
000012fd l       .debug_loc     00000000 
00001318 l       .debug_loc     00000000 
00001333 l       .debug_loc     00000000 
0000134e l       .debug_loc     00000000 
00001369 l       .debug_loc     00000000 
00001384 l       .debug_loc     00000000 
0000139f l       .debug_loc     00000000 
000013ba l       .debug_loc     00000000 
000013d5 l       .debug_loc     00000000 
000013fb l       .debug_loc     00000000 
00001416 l       .debug_loc     00000000 
00001431 l       .debug_loc     00000000 
0000144f l       .debug_loc     00000000 
00001476 l       .debug_loc     00000000 
00001491 l       .debug_loc     00000000 
000014ac l       .debug_loc     00000000 
000014c7 l       .debug_loc     00000000 
000014e5 l       .debug_loc     00000000 
0000150c l       .debug_loc     00000000 
00001527 l       .debug_loc     00000000 
00001542 l       .debug_loc     00000000 
0000155d l       .debug_loc     00000000 
00001578 l       .debug_loc     00000000 
0000159e l       .debug_loc     00000000 
000015b9 l       .debug_loc     00000000 
000015d4 l       .debug_loc     00000000 
000015fa l       .debug_loc     00000000 
0000161a l       .debug_loc     00000000 
00001640 l       .debug_loc     00000000 
0000165e l       .debug_loc     00000000 
00001679 l       .debug_loc     00000000 
0000169f l       .debug_loc     00000000 
000016c5 l       .debug_loc     00000000 
000016e0 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000008d1 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000001e0 l       .debug_ranges  00000000 
000008fe l       .debug_str     00000000 
00000938 l       .debug_str     00000000 
0000092b l       .debug_str     00000000 
00000908 l       .debug_str     00000000 
00000919 l       .debug_str     00000000 
000004df l       .debug_str     00000000 
00000207 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
0000026d l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
0000027e l       .debug_str     00000000 
00000289 l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002a4 l       .debug_str     00000000 
000002b3 l       .debug_str     00000000 
000002c2 l       .debug_str     00000000 
0000095f l       .debug_str     00000000 
00000947 l       .debug_str     00000000 
000009aa l       .debug_str     00000000 
0000096e l       .debug_str     00000000 
00000982 l       .debug_str     00000000 
00000997 l       .debug_str     00000000 
000009dc l       .debug_str     00000000 
000009b7 l       .debug_str     00000000 
000009ca l       .debug_str     00000000 
00000137 l       .debug_str     00000000 
000003de l       .debug_str     00000000 
0000037d l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
000009e7 l       .debug_str     00000000 
000006d7 l       .debug_str     00000000 
00000dd9 l       .debug_str     00000000 
00000ccd l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
00000387 l       .debug_str     00000000 
000009fb l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
00000aab l       .debug_str     00000000 
00000968 l       .debug_str     00000000 
00000bc3 l       .debug_str     00000000 
00000bcd l       .debug_str     00000000 
00000ac0 l       .debug_str     00000000 
000009b3 l       .debug_str     00000000 
000017bc l       .debug_str     00000000 
00000a05 l       .debug_str     00000000 
00000ad6 l       .debug_str     00000000 
00000beb l       .debug_str     00000000 
00000a18 l       .debug_str     00000000 
00000a2c l       .debug_str     00000000 
00000a35 l       .debug_str     00000000 
000007f3 l       .debug_str     00000000 
00000a3f l       .debug_str     00000000 
00000aed l       .debug_str     00000000 
00000afa l       .debug_str     00000000 
00000c12 l       .debug_str     00000000 
00000a39 l       .debug_str     00000000 
00000b05 l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
00000a2f l       .debug_str     00000000 
00000a83 l       .debug_str     00000000 
00000a72 l       .debug_str     00000000 
00000a6d l       .debug_str     00000000 
00000a96 l       .debug_str     00000000 
00000b22 l       .debug_str     00000000 
00000b3b l       .debug_str     00000000 
00000c21 l       .debug_str     00000000 
00000c25 l       .debug_str     00000000 
00000b4e l       .debug_str     00000000 
00000ae7 l       .debug_str     00000000 
00000c40 l       .debug_str     00000000 
00000c50 l       .debug_str     00000000 
00000b67 l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
00000b80 l       .debug_str     00000000 
00000b99 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
000003aa l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
00000bb2 l       .debug_str     00000000 
00000bdc l       .debug_str     00000000 
00000bf4 l       .debug_str     00000000 
00000c33 l       .debug_str     00000000 
00000c66 l       .debug_str     00000000 
00000248 l       .debug_frame   00000000 
e0000c74 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_hmac.c
e0000c74 l       .text  00000000 
e0000c74 l       .text  00000000 
e0000c74 l       .text  00000000 
e0000c74 l       .text  00000000 
e0000c7c l       .text  00000000 
e0000c82 l       .text  00000000 
e0000c86 l       .text  00000000 
e0000c86 l       .text  00000000 
e0000c8a l       .text  00000000 
e0000c8a l       .text  00000000 
e0000c8c l       .text  00000000 
e0000c8c l       .text  00000000 
e0000c8e l       .text  00000000 
e0000c90 l       .text  00000000 
e0000c94 l       .text  00000000 
e0000c94 l       .text  00000000 
e0000c96 l       .text  00000000 
e0000c96 l       .text  00000000 
e0000c98 l       .text  00000000 
e0000c9a l       .text  00000000 
e0000c9e l       .text  00000000 
e0000c9e l       .text  00000000 
e0000ca2 l       .text  00000000 
e0000ca4 l       .text  00000000 
e0000ca6 l       .text  00000000 
e0000ca6 l       .text  00000000 
e0000ca8 l       .text  00000000 
e0000ca8 l       .text  00000000 
e0000caa l       .text  00000000 
e0000caa l       .text  00000000 
e0000cae l       .text  00000000 
e0000cae l       .text  00000000 
e0000cb0 l       .text  00000000 
e0000cb0 l       .text  00000000 
e0000cb4 l       .text  00000000 
e0000cb8 l       .text  00000000 
e0000cb8 l       .text  00000000 
e0000cba l       .text  00000000 
e0000cba l       .text  00000000 
e0000cbc l       .text  00000000 
e0000cbc l       .text  00000000 
e0000cbe l       .text  00000000 
e0000cbe l       .text  00000000 
e0000cc0 l       .text  00000000 
e0000cc0 l       .text  00000000 
e0000cc4 l       .text  00000000 
e0000cc8 l       .text  00000000 
e0000cc8 l       .text  00000000 
e0000ccc l       .text  00000000 
e0000ccc l       .text  00000000 
e0000cce l       .text  00000000 
e0000cce l       .text  00000000 
e0000cd2 l       .text  00000000 
e0000cd2 l       .text  00000000 
e0000cda l       .text  00000000 
e0000cda l       .text  00000000 
e0000cdc l       .text  00000000 
e0000cdc l       .text  00000000 
e0000cde l       .text  00000000 
e0000cde l       .text  00000000 
e0000ce0 l       .text  00000000 
e0000ce0 l       .text  00000000 
e0000ce2 l       .text  00000000 
e0000ce2 l       .text  00000000 
e0000ce6 l       .text  00000000 
e0000ce6 l       .text  00000000 
e0000ce8 l       .text  00000000 
e0000ce8 l       .text  00000000 
e0000cec l       .text  00000000 
e0000cec l       .text  00000000 
e0000cec l       .text  00000000 
e0000cec l       .text  00000000 
e0000cec l       .text  00000000 
e0000cec l       .text  00000000 
e0000cee l       .text  00000000 
e0000cf0 l       .text  00000000 
e0000cf0 l       .text  00000000 
e0000cf4 l       .text  00000000 
e0000cf4 l       .text  00000000 
e0000cf6 l       .text  00000000 
e0000cf6 l       .text  00000000 
e0000cf8 l       .text  00000000 
e0000cfa l       .text  00000000 
e0000cfe l       .text  00000000 
e0000cfe l       .text  00000000 
e0000d00 l       .text  00000000 
e0000d00 l       .text  00000000 
e0000d02 l       .text  00000000 
e0000d04 l       .text  00000000 
e0000d08 l       .text  00000000 
e0000d08 l       .text  00000000 
e0000d0a l       .text  00000000 
e0000d0c l       .text  00000000 
e0000d10 l       .text  00000000 
e0000d12 l       .text  00000000 
e0000d12 l       .text  00000000 
e0000d14 l       .text  00000000 
e0000d16 l       .text  00000000 
e0000d16 l       .text  00000000 
e0000d1a l       .text  00000000 
e0000d1a l       .text  00000000 
e0000d1c l       .text  00000000 
e0000d1c l       .text  00000000 
e0000d22 l       .text  00000000 
e0000d22 l       .text  00000000 
e0000d24 l       .text  00000000 
e0000d24 l       .text  00000000 
e0000d26 l       .text  00000000 
e0000d26 l       .text  00000000 
e0000d28 l       .text  00000000 
e0000d28 l       .text  00000000 
e0000d2a l       .text  00000000 
e0000d2a l       .text  00000000 
e0000d2e l       .text  00000000 
e0000d2e l       .text  00000000 
e0000d30 l       .text  00000000 
e0000d30 l       .text  00000000 
e0000d34 l       .text  00000000 
e0000d34 l       .text  00000000 
e0000d34 l       .text  00000000 
e0000d34 l       .text  00000000 
e0000d34 l       .text  00000000 
e0000d34 l       .text  00000000 
e0000d3c l       .text  00000000 
e0000d42 l       .text  00000000 
e0000d42 l       .text  00000000 
e0000d44 l       .text  00000000 
e0000d48 l       .text  00000000 
e0000d48 l       .text  00000000 
e0000d4c l       .text  00000000 
e0000d4c l       .text  00000000 
e0000d50 l       .text  00000000 
e0000d50 l       .text  00000000 
e0000d54 l       .text  00000000 
e0000d58 l       .text  00000000 
e0000d5a l       .text  00000000 
e0000d5e l       .text  00000000 
e0000d5e l       .text  00000000 
e0000d62 l       .text  00000000 
e0000d68 l       .text  00000000 
e0000d68 l       .text  00000000 
e0000d6a l       .text  00000000 
e0000d6c l       .text  00000000 
e0000d6c l       .text  00000000 
e0000d70 l       .text  00000000 
e0000d70 l       .text  00000000 
e0000d74 l       .text  00000000 
e0000d74 l       .text  00000000 
e0000d78 l       .text  00000000 
e0000d7e l       .text  00000000 
e0000d7e l       .text  00000000 
e0000d80 l       .text  00000000 
e0000d82 l       .text  00000000 
e0000d84 l       .text  00000000 
e0000d86 l       .text  00000000 
e0000d86 l       .text  00000000 
e0000d88 l       .text  00000000 
e0000d8a l       .text  00000000 
e0000d8a l       .text  00000000 
e0000d8a l       .text  00000000 
e0000d8a l       .text  00000000 
e0000d8a l       .text  00000000 
e0000d8a l       .text  00000000 
e0000d92 l       .text  00000000 
e0000d98 l       .text  00000000 
e0000d98 l       .text  00000000 
e0000d9a l       .text  00000000 
e0000d9a l       .text  00000000 
e0000d9c l       .text  00000000 
e0000d9c l       .text  00000000 
e0000d9e l       .text  00000000 
e0000d9e l       .text  00000000 
e0000da0 l       .text  00000000 
e0000da0 l       .text  00000000 
e0000da2 l       .text  00000000 
e0000da2 l       .text  00000000 
e0000da4 l       .text  00000000 
e0000da4 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000da8 l       .text  00000000 
e0000db0 l       .text  00000000 
e0000db6 l       .text  00000000 
e0000db8 l       .text  00000000 
e0000db8 l       .text  00000000 
e0000dba l       .text  00000000 
e0000dba l       .text  00000000 
e0000dbc l       .text  00000000 
e0000dbc l       .text  00000000 
e0000dbe l       .text  00000000 
e0000dc2 l       .text  00000000 
e0000dc2 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dc8 l       .text  00000000 
e0000dca l       .text  00000000 
e0000dca l       .text  00000000 
e0000dcc l       .text  00000000 
e0000dcc l       .text  00000000 
e0000dce l       .text  00000000 
e0000dce l       .text  00000000 
e0000dd2 l       .text  00000000 
e0000dd2 l       .text  00000000 
e0000dd4 l       .text  00000000 
e0000dd4 l       .text  00000000 
e0000dd6 l       .text  00000000 
e0000dd6 l       .text  00000000 
e0000dd8 l       .text  00000000 
e0000dd8 l       .text  00000000 
e0000dda l       .text  00000000 
e0000dda l       .text  00000000 
e0000dda l       .text  00000000 
e0000dda l       .text  00000000 
e0000dda l       .text  00000000 
e0000dda l       .text  00000000 
e0000de2 l       .text  00000000 
e0000de8 l       .text  00000000 
e0000dea l       .text  00000000 
e0000dea l       .text  00000000 
e0000dec l       .text  00000000 
e0000dec l       .text  00000000 
e0000dee l       .text  00000000 
e0000dee l       .text  00000000 
e0000df0 l       .text  00000000 
e0000df0 l       .text  00000000 
e0000df2 l       .text  00000000 
e0000df2 l       .text  00000000 
e0000df4 l       .text  00000000 
e0000df4 l       .text  00000000 
e0000df6 l       .text  00000000 
e0000df6 l       .text  00000000 
e0000dfa l       .text  00000000 
e0000dfa l       .text  00000000 
e0000dfc l       .text  00000000 
e0000dfc l       .text  00000000 
e0000e00 l       .text  00000000 
e0000e00 l       .text  00000000 
e0000e02 l       .text  00000000 
e0000e02 l       .text  00000000 
e0000e0a l       .text  00000000 
e0000e0a l       .text  00000000 
e0000e0c l       .text  00000000 
e0000e0c l       .text  00000000 
e0000e0e l       .text  00000000 
e0000e10 l       .text  00000000 
e0000e10 l       .text  00000000 
e0000e12 l       .text  00000000 
e0000e12 l       .text  00000000 
e0000e14 l       .text  00000000 
e0000e16 l       .text  00000000 
e0000e1a l       .text  00000000 
e0000e1a l       .text  00000000 
e0000e1c l       .text  00000000 
e0000e1c l       .text  00000000 
e0000e1e l       .text  00000000 
e0000e1e l       .text  00000000 
e0000e20 l       .text  00000000 
e0000e20 l       .text  00000000 
e0000e22 l       .text  00000000 
e0000e22 l       .text  00000000 
e0000e24 l       .text  00000000 
e0000e24 l       .text  00000000 
e0000e28 l       .text  00000000 
e0000e28 l       .text  00000000 
000016fb l       .debug_loc     00000000 
00001716 l       .debug_loc     00000000 
00001731 l       .debug_loc     00000000 
00001757 l       .debug_loc     00000000 
00001777 l       .debug_loc     00000000 
00001793 l       .debug_loc     00000000 
000017af l       .debug_loc     00000000 
000017d7 l       .debug_loc     00000000 
000017f3 l       .debug_loc     00000000 
0000180e l       .debug_loc     00000000 
00001834 l       .debug_loc     00000000 
00001851 l       .debug_loc     00000000 
00001877 l       .debug_loc     00000000 
00001892 l       .debug_loc     00000000 
000018b4 l       .debug_loc     00000000 
000018cf l       .debug_loc     00000000 
000018f1 l       .debug_loc     00000000 
0000190c l       .debug_loc     00000000 
00001932 l       .debug_loc     00000000 
00001980 l       .debug_loc     00000000 
0000199c l       .debug_loc     00000000 
000019b8 l       .debug_loc     00000000 
000019da l       .debug_loc     00000000 
000019f5 l       .debug_loc     00000000 
00001a11 l       .debug_loc     00000000 
00001a33 l       .debug_loc     00000000 
00001a55 l       .debug_loc     00000000 
00001a70 l       .debug_loc     00000000 
00001a92 l       .debug_loc     00000000 
00001aad l       .debug_loc     00000000 
00001ac8 l       .debug_loc     00000000 
00001ae3 l       .debug_loc     00000000 
00001b09 l       .debug_loc     00000000 
00001b48 l       .debug_loc     00000000 
00001b63 l       .debug_loc     00000000 
00001b7e l       .debug_loc     00000000 
00001b99 l       .debug_loc     00000000 
00001bb4 l       .debug_loc     00000000 
00001bcf l       .debug_loc     00000000 
00001bf1 l       .debug_loc     00000000 
00001c0c l       .debug_loc     00000000 
00001c27 l       .debug_loc     00000000 
00001c44 l       .debug_loc     00000000 
00001c61 l       .debug_loc     00000000 
00001c87 l       .debug_loc     00000000 
00001ca2 l       .debug_loc     00000000 
00001cc4 l       .debug_loc     00000000 
00001cdf l       .debug_loc     00000000 
00001cfa l       .debug_loc     00000000 
00001d15 l       .debug_loc     00000000 
00001d31 l       .debug_loc     00000000 
00001d4d l       .debug_loc     00000000 
00001d68 l       .debug_loc     00000000 
00001d8a l       .debug_loc     00000000 
00001da5 l       .debug_loc     00000000 
00001de0 l       .debug_loc     00000000 
00001dfb l       .debug_loc     00000000 
00001e2f l       .debug_loc     00000000 
00001e51 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000c85 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000318 l       .debug_ranges  00000000 
000002d0 l       .debug_str     00000000 
0000026d l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
0000027e l       .debug_str     00000000 
00000289 l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002a4 l       .debug_str     00000000 
000002b3 l       .debug_str     00000000 
000002c2 l       .debug_str     00000000 
000004df l       .debug_str     00000000 
000001ab l       .debug_str     00000000 
0000017c l       .debug_str     00000000 
00000192 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
0000036a l       .debug_str     00000000 
0000035c l       .debug_str     00000000 
00000ca2 l       .debug_str     00000000 
00000137 l       .debug_str     00000000 
00000a05 l       .debug_str     00000000 
000006d7 l       .debug_str     00000000 
00000dd9 l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
00000387 l       .debug_str     00000000 
000009fb l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
00000cac l       .debug_str     00000000 
00000cd3 l       .debug_str     00000000 
00000cda l       .debug_str     00000000 
00000ce1 l       .debug_str     00000000 
00000cf9 l       .debug_str     00000000 
000003b5 l       .debug_str     00000000 
000001ea l       .debug_str     00000000 
000001d5 l       .debug_str     00000000 
00000ce6 l       .debug_str     00000000 
00000cfe l       .debug_str     00000000 
000001bf l       .debug_str     00000000 
000007f3 l       .debug_str     00000000 
00000d10 l       .debug_str     00000000 
000006c3 l       .debug_str     00000000 
00000c21 l       .debug_str     00000000 
000009e7 l       .debug_str     00000000 
00000ccd l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
00000a2c l       .debug_str     00000000 
00000a2f l       .debug_str     00000000 
00000a83 l       .debug_str     00000000 
00000a72 l       .debug_str     00000000 
00000a6d l       .debug_str     00000000 
00000a39 l       .debug_str     00000000 
00000a96 l       .debug_str     00000000 
00000a35 l       .debug_str     00000000 
00000a3f l       .debug_str     00000000 
00000d18 l       .debug_str     00000000 
00000d38 l       .debug_str     00000000 
00000440 l       .debug_str     00000000 
000003a5 l       .debug_str     00000000 
00000433 l       .debug_str     00000000 
00000c4c l       .debug_str     00000000 
00000268 l       .debug_ranges  00000000 
00000de0 l       .debug_str     00000000 
00000248 l       .debug_ranges  00000000 
0000032a l       .debug_str     00000000 
000002b8 l       .debug_ranges  00000000 
00000dd4 l       .debug_str     00000000 
00000288 l       .debug_ranges  00000000 
000002a0 l       .debug_ranges  00000000 
00000459 l       .debug_str     00000000 
00000d47 l       .debug_str     00000000 
000003aa l       .debug_str     00000000 
000003a1 l       .debug_str     00000000 
0000037d l       .debug_str     00000000 
00000d52 l       .debug_str     00000000 
00000d67 l       .debug_str     00000000 
00000d80 l       .debug_str     00000000 
00000869 l       .debug_str     00000000 
00000560 l       .debug_str     00000000 
00001241 l       .debug_str     00000000 
00000ded l       .debug_str     00000000 
00000df8 l       .debug_str     00000000 
00000e02 l       .debug_str     00000000 
000002d0 l       .debug_ranges  00000000 
000013ba l       .debug_str     00000000 
00000e12 l       .debug_str     00000000 
00001073 l       .debug_str     00000000 
00000d93 l       .debug_str     00000000 
00000823 l       .debug_str     00000000 
00000e1f l       .debug_str     00000000 
00000758 l       .debug_str     00000000 
00000e2b l       .debug_str     00000000 
00000e33 l       .debug_str     00000000 
00000e3d l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
00000da9 l       .debug_str     00000000 
00000a18 l       .debug_str     00000000 
00000859 l       .debug_str     00000000 
00000237 l       .debug_str     00000000 
0000062b l       .debug_str     00000000 
000007e8 l       .debug_str     00000000 
000002e8 l       .debug_ranges  00000000 
00000300 l       .debug_ranges  00000000 
00000dbf l       .debug_str     00000000 
00000e47 l       .debug_str     00000000 
0000117b l       .debug_str     00000000 
0000074f l       .debug_str     00000000 
000004d5 l       .debug_str     00000000 
0000023e l       .debug_str     00000000 
0000022e l       .debug_str     00000000 
00000207 l       .debug_str     00000000 
0000031c l       .debug_frame   00000000 
e0000cec l       .text  00000000 
e0000d34 l       .text  00000000 
e0000d8a l       .text  00000000 
e0000da8 l       .text  00000000 
e0000dc6 l       .text  00000000 
e0000dda l       .text  00000000 
e0000e28 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e0000e28 l       .text  00000000 
e0000e28 l       .text  00000000 
e0000e28 l       .text  00000000 
e0000e2a l       .text  00000000 
e0000e2c l       .text  00000000 
e0000e32 l       .text  00000000 
e0000e36 l       .text  00000000 
e0000e3a l       .text  00000000 
e0000e3e l       .text  00000000 
e0000e3e l       .text  00000000 
e0000e48 l       .text  00000000 
e0000e4a l       .text  00000000 
e0000e4a l       .text  00000000 
e0000e4c l       .text  00000000 
e0000e4c l       .text  00000000 
e0000e52 l       .text  00000000 
e0000e52 l       .text  00000000 
e0000e5c l       .text  00000000 
e0000e5e l       .text  00000000 
e0000e5e l       .text  00000000 
e0000e72 l       .text  00000000 
e0000e72 l       .text  00000000 
e0000e74 l       .text  00000000 
e0000e74 l       .text  00000000 
e0000e7e l       .text  00000000 
e0000e80 l       .text  00000000 
e0000e80 l       .text  00000000 
e0000e94 l       .text  00000000 
e0000e94 l       .text  00000000 
e0000e96 l       .text  00000000 
e0002450 l     O .logs.fields   00000014 test_status_set.kLogFields.2
e0000e96 l       .text  00000000 
e0000ea2 l       .text  00000000 
e0000ea2 l       .text  00000000 
e0000eac l       .text  00000000 
e0000eae l       .text  00000000 
e0000eae l       .text  00000000 
e000243c l     O .logs.fields   00000014 test_status_set.kLogFields
e0000eb6 l       .text  00000000 
e0000ec2 l       .text  00000000 
e0000ec2 l       .text  00000000 
e0000ecc l       .text  00000000 
e0000ece l       .text  00000000 
e0000ece l       .text  00000000 
e0000ed6 l       .text  00000000 
e0000ed6 l       .text  00000000 
e0000ed6 l       .text  00000000 
00001e77 l       .debug_loc     00000000 
00001e95 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000e4f l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000418 l       .debug_str     00000000 
000000c0 l       .debug_str     00000000 
00000350 l       .debug_str     00000000 
0000014d l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
00000115 l       .debug_str     00000000 
0000012d l       .debug_str     00000000 
00001082 l       .debug_str     00000000 
00000140 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
0000011e l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
000000ed l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000004df l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00000137 l       .debug_str     00000000 
000002db l       .debug_str     00000000 
000002f0 l       .debug_str     00000000 
00000309 l       .debug_str     00000000 
0000031b l       .debug_str     00000000 
0000032c l       .debug_str     00000000 
0000033e l       .debug_str     00000000 
00000e7d l       .debug_str     00000000 
00000ea4 l       .debug_str     00000000 
00000e96 l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
00000387 l       .debug_str     00000000 
000006d7 l       .debug_str     00000000 
000009e7 l       .debug_str     00000000 
00000dd9 l       .debug_str     00000000 
00000ccd l       .debug_str     00000000 
000009fb l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
00000401 l       .debug_str     00000000 
000003ec l       .debug_str     00000000 
00000ebc l       .debug_str     00000000 
000003b0 l       .debug_frame   00000000 
e0000ed6 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
e0000ed6 l       .text  00000000 
e0000ed6 l       .text  00000000 
e0000ed6 l       .text  00000000 
e0000ed6 l       .text  00000000 
e0000eda l       .text  00000000 
e0000eda l       .text  00000000 
e0000edc l       .text  00000000 
e0000edc l       .text  00000000 
00001ea8 l       .debug_loc     00000000 
00001ec3 l       .debug_loc     00000000 
00001eea l       .debug_loc     00000000 
00001f11 l       .debug_loc     00000000 
00001f2d l       .debug_loc     00000000 
00001f5a l       .debug_loc     00000000 
00001f81 l       .debug_loc     00000000 
00001fa8 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000ec2 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000360 l       .debug_ranges  00000000 
0000074f l       .debug_str     00000000 
000004d5 l       .debug_str     00000000 
000007af l       .debug_str     00000000 
000007d8 l       .debug_str     00000000 
000007cd l       .debug_str     00000000 
000007c0 l       .debug_str     00000000 
00000137 l       .debug_str     00000000 
000004df l       .debug_str     00000000 
00000f00 l       .debug_str     00000000 
000007aa l       .debug_str     00000000 
0000046e l       .debug_str     00000000 
00000ee6 l       .debug_str     00000000 
00000edf l       .debug_str     00000000 
00000eed l       .debug_str     00000000 
00000ebc l       .debug_str     00000000 
00000f11 l       .debug_str     00000000 
000003dc l       .debug_frame   00000000 
e0000edc l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
e0000edc l       .text  00000000 
e0000edc l       .text  00000000 
e0000edc l       .text  00000000 
e0000ede l       .text  00000000 
e0000ee4 l       .text  00000000 
e0000ee6 l       .text  00000000 
e0000ef4 l       .text  00000000 
e0000efe l       .text  00000000 
e0000f04 l       .text  00000000 
e0000f04 l       .text  00000000 
e0000f06 l       .text  00000000 
e0000f0a l       .text  00000000 
e0000f0a l       .text  00000000 
e0000f14 l       .text  00000000 
e0000f14 l       .text  00000000 
e0000f16 l       .text  00000000 
e0000f1a l       .text  00000000 
e0000f1a l       .text  00000000 
e0000f1c l       .text  00000000 
e0000f1c l       .text  00000000 
e0000f1e l       .text  00000000 
e0000f1e l       .text  00000000 
e0000f22 l       .text  00000000 
e0000f22 l       .text  00000000 
e0000f28 l       .text  00000000 
e0000f36 l       .text  00000000 
e0000f36 l       .text  00000000 
e000232c l     O .bss   00000002 base_log_internal_core.global_log_counter
e0000f3e l       .text  00000000 
e0000f4a l       .text  00000000 
e0000f4c l       .text  00000000 
e0000f56 l       .text  00000000 
e0000f56 l       .text  00000000 
e0000f62 l       .text  00000000 
e0000f62 l       .text  00000000 
e0000f64 l       .text  00000000 
e0000f66 l       .text  00000000 
e0000f6a l       .text  00000000 
e0000f6a l       .text  00000000 
e0000f74 l       .text  00000000 
e0000f74 l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f80 l       .text  00000000 
e0000f86 l       .text  00000000 
e0000f86 l       .text  00000000 
e0000f90 l       .text  00000000 
e0000f90 l       .text  00000000 
e0000f96 l       .text  00000000 
e0000f96 l       .text  00000000 
e0000f9a l       .text  00000000 
e0000f9a l       .text  00000000 
e0000f9c l       .text  00000000 
e0000f9c l       .text  00000000 
e0000f9e l       .text  00000000 
e0000f9e l       .text  00000000 
e0000fa0 l       .text  00000000 
e0000fa4 l       .text  00000000 
e0000fa8 l       .text  00000000 
e0000faa l       .text  00000000 
e0000faa l       .text  00000000 
e0000fac l       .text  00000000 
e0000fac l       .text  00000000 
e0000fae l       .text  00000000 
e0000fae l       .text  00000000 
e0000fb2 l       .text  00000000 
e0000fb2 l       .text  00000000 
00001fc4 l       .debug_loc     00000000 
00001fec l       .debug_loc     00000000 
00002007 l       .debug_loc     00000000 
00002043 l       .debug_loc     00000000 
0000205f l       .debug_loc     00000000 
0000207a l       .debug_loc     00000000 
00002095 l       .debug_loc     00000000 
000020b0 l       .debug_loc     00000000 
000020ee l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000f23 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000388 l       .debug_ranges  00000000 
00000401 l       .debug_str     00000000 
00000f3f l       .debug_str     00000000 
00000f8d l       .debug_str     00000000 
00000f91 l       .debug_str     00000000 
00000f9f l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
0000066d l       .debug_str     00000000 
000003cf l       .debug_str     00000000 
00000111 l       .debug_str     00000000 
000000cb l       .debug_str     00000000 
000000dc l       .debug_str     00000000 
000000ed l       .debug_str     00000000 
000000ff l       .debug_str     00000000 
000004df l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00000ca2 l       .debug_str     00000000 
00000137 l       .debug_str     00000000 
00000f52 l       .debug_str     00000000 
00000115 l       .debug_str     00000000 
0000011e l       .debug_str     00000000 
00000f65 l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
00000f6c l       .debug_str     00000000 
00000f74 l       .debug_str     00000000 
0000117b l       .debug_str     00000000 
00000f80 l       .debug_str     00000000 
000009e7 l       .debug_str     00000000 
000006d7 l       .debug_str     00000000 
00000dd9 l       .debug_str     00000000 
00000ccd l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
00000387 l       .debug_str     00000000 
000009fb l       .debug_str     00000000 
000003ec l       .debug_str     00000000 
00000140 l       .debug_str     00000000 
00000fa9 l       .debug_str     00000000 
0000032a l       .debug_str     00000000 
00000158 l       .debug_str     00000000 
0000014d l       .debug_str     00000000 
0000012d l       .debug_str     00000000 
00001082 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
000005a8 l       .debug_str     00000000 
0000059e l       .debug_str     00000000 
0000043c l       .debug_frame   00000000 
e0000f7e l       .text  00000000 
e0000fb2 l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
e0000fb2 l     F .text  00000004 base_dev_null
e0002330 l     O .bss   00000008 base_stdout
e0000fb2 l       .text  00000000 
e0000fb2 l       .text  00000000 
e0000fb2 l       .text  00000000 
e0000fb4 l       .text  00000000 
e0000fb4 l       .text  00000000 
e0000fb6 l       .text  00000000 
e0000fb6 l       .text  00000000 
e0000fb6 l       .text  00000000 
e0000fb6 l       .text  00000000 
e0000fb6 l       .text  00000000 
e0000fb8 l       .text  00000000 
e0000fba l       .text  00000000 
e0000fc8 l       .text  00000000 
e0000fd0 l       .text  00000000 
e0000fd0 l       .text  00000000 
e0000fd6 l       .text  00000000 
e0000fd6 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fda l       .text  00000000 
e0000fda l       .text  00000000 
e0000fde l       .text  00000000 
e0000fe0 l       .text  00000000 
e0000fe2 l       .text  00000000 
e0000fe2 l       .text  00000000 
e0000fe8 l       .text  00000000 
e0000fe8 l       .text  00000000 
e0000fe8 l       .text  00000000 
e0000fe8 l       .text  00000000 
e0000fe8 l       .text  00000000 
e0000ff0 l       .text  00000000 
e0000ff6 l       .text  00000000 
e0000ff6 l       .text  00000000 
e0000ff8 l       .text  00000000 
e0000ff8 l       .text  00000000 
e0000ffe l       .text  00000000 
e0001000 l       .text  00000000 
e0001002 l       .text  00000000 
e0001002 l       .text  00000000 
e0001002 l       .text  00000000 
e0001002 l       .text  00000000 
e0001002 l       .text  00000000 
e0001002 l       .text  00000000 
e0001004 l       .text  00000000 
e000101e l       .text  00000000 
e0001020 l       .text  00000000 
e0001022 l       .text  00000000 
e0001024 l       .text  00000000 
e0001026 l       .text  00000000 
e0001028 l       .text  00000000 
e000102a l       .text  00000000 
e0001032 l       .text  00000000 
e0001032 l       .text  00000000 
e0001034 l       .text  00000000 
e0001034 l       .text  00000000 
e0001038 l       .text  00000000 
e000103c l       .text  00000000 
e0001050 l       .text  00000000 
e0001050 l       .text  00000000 
e000105a l       .text  00000000 
e000105e l       .text  00000000 
e0001062 l       .text  00000000 
e0001064 l       .text  00000000 
e0001066 l       .text  00000000 
e0001066 l       .text  00000000 
e0001068 l       .text  00000000 
e000106a l       .text  00000000 
e0001070 l       .text  00000000 
e0001070 l       .text  00000000 
e0001072 l       .text  00000000 
e0001072 l       .text  00000000 
e0001076 l       .text  00000000 
e0001076 l       .text  00000000 
e0001082 l       .text  00000000 
e0001086 l       .text  00000000 
e0001086 l       .text  00000000 
e0001092 l       .text  00000000 
e0001092 l       .text  00000000 
e000109a l       .text  00000000 
e000109a l       .text  00000000 
e000109e l       .text  00000000 
e000109e l       .text  00000000 
e00010ac l       .text  00000000 
e00010ac l       .text  00000000 
e00010b0 l       .text  00000000 
e00010b8 l       .text  00000000 
e00010bc l       .text  00000000 
e00010bc l       .text  00000000 
e00010c0 l       .text  00000000 
e00010c6 l       .text  00000000 
e00010ca l       .text  00000000 
e00010cc l       .text  00000000 
e00010d0 l       .text  00000000 
e00010d0 l       .text  00000000 
e00010d4 l       .text  00000000 
e00010da l       .text  00000000 
e00010da l       .text  00000000 
e00010de l       .text  00000000 
e00010f2 l       .text  00000000 
e00010f2 l       .text  00000000 
e00010f4 l       .text  00000000 
e00010fa l       .text  00000000 
e00010fe l       .text  00000000 
e0001102 l       .text  00000000 
e0001102 l       .text  00000000 
e000110a l       .text  00000000 
e000110c l       .text  00000000 
e000111a l       .text  00000000 
e000111a l       .text  00000000 
e000111e l       .text  00000000 
e000112a l       .text  00000000 
e000112a l       .text  00000000 
e000112e l       .text  00000000 
e000112e l       .text  00000000 
e000113c l       .text  00000000 
e000113c l       .text  00000000 
e000113e l       .text  00000000 
e0001142 l       .text  00000000 
e0001142 l       .text  00000000 
e0001146 l       .text  00000000 
e0002088 l     O .rodata        00000010 kDigitsLow
e0001158 l       .text  00000000 
e0001158 l       .text  00000000 
e0001160 l       .text  00000000 
e0001168 l       .text  00000000 
e0001168 l       .text  00000000 
e0001172 l       .text  00000000 
e0001172 l       .text  00000000 
e0001176 l       .text  00000000 
e0001176 l       .text  00000000 
e0001180 l       .text  00000000 
e0001180 l       .text  00000000 
e0001188 l       .text  00000000 
e0001188 l       .text  00000000 
e000118c l       .text  00000000 
e00020b5 l     O .rodata        00000010 kDigitsHigh
e0001196 l       .text  00000000 
e0001196 l       .text  00000000 
e00011a0 l       .text  00000000 
e00011a0 l       .text  00000000 
e00011a4 l       .text  00000000 
e00011ae l       .text  00000000 
e00011ae l       .text  00000000 
e00011b2 l       .text  00000000 
e00011bc l       .text  00000000 
e00011bc l       .text  00000000 
e00011c4 l       .text  00000000 
e00011c4 l       .text  00000000 
e00011c8 l       .text  00000000 
e00011d2 l       .text  00000000 
e00011d2 l       .text  00000000 
e00011dc l       .text  00000000 
e00011e0 l       .text  00000000 
e00011e4 l       .text  00000000 
e00011e4 l       .text  00000000 
e00011f0 l       .text  00000000 
e00011f0 l       .text  00000000 
e00011f4 l       .text  00000000 
e00011fe l       .text  00000000 
e0001202 l       .text  00000000 
e0001202 l       .text  00000000 
e0001204 l       .text  00000000 
e0001204 l       .text  00000000 
e0001208 l       .text  00000000 
e0001208 l       .text  00000000 
e000120c l       .text  00000000 
e0001216 l       .text  00000000 
e0001216 l       .text  00000000 
e000121a l       .text  00000000 
e0001226 l       .text  00000000 
e0001226 l       .text  00000000 
e000122a l       .text  00000000 
e000122a l       .text  00000000 
e0001238 l       .text  00000000 
e0001238 l       .text  00000000 
e0001242 l       .text  00000000 
e0001242 l       .text  00000000 
e0001246 l       .text  00000000 
e0001246 l       .text  00000000 
e0001574 l     F .text  0000007e write_digits
e000125c l       .text  00000000 
e000125c l       .text  00000000 
e0001262 l       .text  00000000 
e0001262 l       .text  00000000 
e000126c l       .text  00000000 
e000126c l       .text  00000000 
e000126e l       .text  00000000 
e0001278 l       .text  00000000 
e0001278 l       .text  00000000 
e0001282 l       .text  00000000 
e0001282 l       .text  00000000 
e0001284 l       .text  00000000 
e0001284 l       .text  00000000 
e0001286 l       .text  00000000 
e0001286 l       .text  00000000 
e000128a l       .text  00000000 
e000128a l       .text  00000000 
e000128e l       .text  00000000 
e0001290 l       .text  00000000 
e0001294 l       .text  00000000 
e0001294 l       .text  00000000 
e0001298 l       .text  00000000 
e0001298 l       .text  00000000 
e00012a4 l       .text  00000000 
e00012a4 l       .text  00000000 
e00012a6 l       .text  00000000 
e00012a6 l       .text  00000000 
e00012a8 l       .text  00000000 
e00012a8 l       .text  00000000 
e00012b0 l       .text  00000000 
e00012b0 l       .text  00000000 
e00012b4 l       .text  00000000 
e00012b4 l       .text  00000000 
e00012c2 l       .text  00000000 
e00012c2 l       .text  00000000 
e00012c4 l       .text  00000000 
e00012d2 l       .text  00000000 
e00012d2 l       .text  00000000 
e00012d6 l       .text  00000000 
e00012d6 l       .text  00000000 
e00012da l       .text  00000000 
e00012da l       .text  00000000 
e00012e8 l       .text  00000000 
e00012e8 l       .text  00000000 
e00012ec l       .text  00000000 
e00012ec l       .text  00000000 
e00012f4 l       .text  00000000 
e00012f4 l       .text  00000000 
e00012f6 l       .text  00000000 
e00012f6 l       .text  00000000 
e00012f8 l       .text  00000000 
e00012f8 l       .text  00000000 
e000130c l       .text  00000000 
e000130c l       .text  00000000 
e000130e l       .text  00000000 
e000131c l       .text  00000000 
e000131c l       .text  00000000 
e000131e l       .text  00000000 
e000131e l       .text  00000000 
e0001320 l       .text  00000000 
e0001328 l       .text  00000000 
e000132c l       .text  00000000 
e000132e l       .text  00000000 
e0001338 l       .text  00000000 
e0001338 l       .text  00000000 
e000133c l       .text  00000000 
e0001346 l       .text  00000000 
e0001346 l       .text  00000000 
e000134a l       .text  00000000 
e0001356 l       .text  00000000 
e0001356 l       .text  00000000 
e000135a l       .text  00000000 
e000135a l       .text  00000000 
e0001364 l       .text  00000000 
e0001364 l       .text  00000000 
e000136c l       .text  00000000 
e000136c l       .text  00000000 
e0001370 l       .text  00000000 
e0001378 l       .text  00000000 
e0001378 l       .text  00000000 
e0001382 l       .text  00000000 
e0001382 l       .text  00000000 
e000138c l       .text  00000000 
e000138c l       .text  00000000 
e0001390 l       .text  00000000 
e0001398 l       .text  00000000 
e0001398 l       .text  00000000 
e00013a2 l       .text  00000000 
e00013a4 l       .text  00000000 
e00013a4 l       .text  00000000 
e00013a8 l       .text  00000000 
e00013b2 l       .text  00000000 
e00013b2 l       .text  00000000 
e00013ba l       .text  00000000 
e00013ba l       .text  00000000 
e00013be l       .text  00000000 
e00013c6 l       .text  00000000 
e00013c6 l       .text  00000000 
e0001490 l     F .text  000000e4 hex_dump
e00013d0 l       .text  00000000 
e00013d2 l       .text  00000000 
e00020c5 l     O .rodata        0000000f kUnknownSpec
e00013d2 l       .text  00000000 
e00013dc l       .text  00000000 
e00013dc l       .text  00000000 
e00013e0 l       .text  00000000 
e00013e2 l       .text  00000000 
e00013e2 l       .text  00000000 
e00013e6 l       .text  00000000 
e00013ec l       .text  00000000 
e00013ec l       .text  00000000 
e00013f0 l       .text  00000000 
e00013fc l       .text  00000000 
e00013fc l       .text  00000000 
e00013fe l       .text  00000000 
e00013fe l       .text  00000000 
e0001412 l       .text  00000000 
e0001412 l       .text  00000000 
e0001416 l       .text  00000000 
e0001424 l       .text  00000000 
e0001424 l       .text  00000000 
e0001428 l       .text  00000000 
e0001428 l       .text  00000000 
e000142e l       .text  00000000 
e000142e l       .text  00000000 
e0001430 l       .text  00000000 
e0001430 l       .text  00000000 
e0001432 l       .text  00000000 
e0001432 l       .text  00000000 
e000143a l       .text  00000000 
e000143c l       .text  00000000 
e000143e l       .text  00000000 
e0001444 l       .text  00000000 
e0001444 l       .text  00000000 
e0001450 l       .text  00000000 
e0002098 l     O .rodata        00000011 kErrorNul
e0001450 l       .text  00000000 
e000145a l       .text  00000000 
e000145a l       .text  00000000 
e000145e l       .text  00000000 
e0001462 l       .text  00000000 
e0001464 l       .text  00000000 
e0001464 l       .text  00000000 
e0001474 l       .text  00000000 
e0001478 l       .text  00000000 
e0001484 l       .text  00000000 
e00020a9 l     O .rodata        0000000c kErrorTooWide
e0001484 l       .text  00000000 
e0001490 l       .text  00000000 
e0001490 l       .text  00000000 
e0001490 l       .text  00000000 
e0001490 l       .text  00000000 
e0001490 l       .text  00000000 
e0001490 l       .text  00000000 
e0001492 l       .text  00000000 
e00014aa l       .text  00000000 
e00014ac l       .text  00000000 
e00014ae l       .text  00000000 
e00014b0 l       .text  00000000 
e00014b2 l       .text  00000000 
e00014b6 l       .text  00000000 
e00014b6 l       .text  00000000 
e00014ba l       .text  00000000 
e00014be l       .text  00000000 
e00014be l       .text  00000000 
e00014c8 l       .text  00000000 
e00014c8 l       .text  00000000 
e00014ca l       .text  00000000 
e00014cc l       .text  00000000 
e00014d2 l       .text  00000000 
e00014d2 l       .text  00000000 
e00014d6 l       .text  00000000 
e00014da l       .text  00000000 
e00014da l       .text  00000000 
e00014e2 l       .text  00000000 
e00014e2 l       .text  00000000 
e00014e4 l       .text  00000000 
e00014e6 l       .text  00000000 
e00014e6 l       .text  00000000 
e00014e8 l       .text  00000000 
e00014e8 l       .text  00000000 
e00014ee l       .text  00000000 
e00014ee l       .text  00000000 
e00014f0 l       .text  00000000 
e00014f0 l       .text  00000000 
e00014f4 l       .text  00000000 
e00014f8 l       .text  00000000 
e00014fe l       .text  00000000 
e00014fe l       .text  00000000 
e0001504 l       .text  00000000 
e000150c l       .text  00000000 
e000150c l       .text  00000000 
e000150e l       .text  00000000 
e0001512 l       .text  00000000 
e0001516 l       .text  00000000 
e000151c l       .text  00000000 
e0001520 l       .text  00000000 
e0001524 l       .text  00000000 
e0001526 l       .text  00000000 
e000152c l       .text  00000000 
e000152e l       .text  00000000 
e0001536 l       .text  00000000 
e000153c l       .text  00000000 
e0001540 l       .text  00000000 
e0001540 l       .text  00000000 
e0001542 l       .text  00000000 
e0001544 l       .text  00000000 
e0001544 l       .text  00000000 
e0001546 l       .text  00000000 
e0001548 l       .text  00000000 
e000154c l       .text  00000000 
e000154c l       .text  00000000 
e000154e l       .text  00000000 
e0001554 l       .text  00000000 
e0001554 l       .text  00000000 
e0001556 l       .text  00000000 
e000155e l       .text  00000000 
e0001560 l       .text  00000000 
e0001564 l       .text  00000000 
e0001566 l       .text  00000000 
e0001568 l       .text  00000000 
e000156a l       .text  00000000 
e0001574 l       .text  00000000 
e0001574 l       .text  00000000 
e0001574 l       .text  00000000 
e0001574 l       .text  00000000 
e0001574 l       .text  00000000 
e0001576 l       .text  00000000 
e0001578 l       .text  00000000 
e000157a l       .text  00000000 
e000157a l       .text  00000000 
e000157c l       .text  00000000 
e000157e l       .text  00000000 
e0001582 l       .text  00000000 
e0001582 l       .text  00000000 
e0001584 l       .text  00000000 
e0001584 l       .text  00000000 
e0001590 l       .text  00000000 
e0001590 l       .text  00000000 
e0001592 l       .text  00000000 
e0001596 l       .text  00000000 
e000159e l       .text  00000000 
e000159e l       .text  00000000 
e00015a0 l       .text  00000000 
e00015a4 l       .text  00000000 
e00015a8 l       .text  00000000 
e00015a8 l       .text  00000000 
e00015aa l       .text  00000000 
e00015aa l       .text  00000000 
e00015ae l       .text  00000000 
e00015b4 l       .text  00000000 
e00015b4 l       .text  00000000 
e00015b6 l       .text  00000000 
e00015b8 l       .text  00000000 
e00015ba l       .text  00000000 
e00015be l       .text  00000000 
e00015c2 l       .text  00000000 
e00015c6 l       .text  00000000 
e00015c6 l       .text  00000000 
e00015d0 l       .text  00000000 
e00015d4 l       .text  00000000 
e00015d6 l       .text  00000000 
e00015da l       .text  00000000 
e00015de l       .text  00000000 
e00015e0 l       .text  00000000 
e00015e2 l       .text  00000000 
e00015e4 l       .text  00000000 
e00015e4 l       .text  00000000 
e00015ea l       .text  00000000 
e00015ec l       .text  00000000 
e00015ec l       .text  00000000 
e00015f2 l       .text  00000000 
e00015f2 l       .text  00000000 
0000210b l       .debug_loc     00000000 
00002137 l       .debug_loc     00000000 
00002152 l       .debug_loc     00000000 
00002178 l       .debug_loc     00000000 
000021a4 l       .debug_loc     00000000 
000021d5 l       .debug_loc     00000000 
00002206 l       .debug_loc     00000000 
00002242 l       .debug_loc     00000000 
00002273 l       .debug_loc     00000000 
0000229a l       .debug_loc     00000000 
000022cb l       .debug_loc     00000000 
000022e6 l       .debug_loc     00000000 
00002302 l       .debug_loc     00000000 
0000231d l       .debug_loc     00000000 
00002343 l       .debug_loc     00000000 
00002369 l       .debug_loc     00000000 
000023a5 l       .debug_loc     00000000 
000024b0 l       .debug_loc     00000000 
0000260a l       .debug_loc     00000000 
0000270a l       .debug_loc     00000000 
00002815 l       .debug_loc     00000000 
00002835 l       .debug_loc     00000000 
0000285b l       .debug_loc     00000000 
0000288b l       .debug_loc     00000000 
00002ac3 l       .debug_loc     00000000 
00002adf l       .debug_loc     00000000 
00002afa l       .debug_loc     00000000 
00002c6f l       .debug_loc     00000000 
00002dbf l       .debug_loc     00000000 
00002ed3 l       .debug_loc     00000000 
00002ef9 l       .debug_loc     00000000 
00002f14 l       .debug_loc     00000000 
00002f2f l       .debug_loc     00000000 
00002f4a l       .debug_loc     00000000 
00002f65 l       .debug_loc     00000000 
00002f80 l       .debug_loc     00000000 
00002f9c l       .debug_loc     00000000 
00002fb7 l       .debug_loc     00000000 
00002fd2 l       .debug_loc     00000000 
00002fed l       .debug_loc     00000000 
00003008 l       .debug_loc     00000000 
0000303a l       .debug_loc     00000000 
0000306d l       .debug_loc     00000000 
00003088 l       .debug_loc     00000000 
000030db l       .debug_loc     00000000 
0000310e l       .debug_loc     00000000 
00003129 l       .debug_loc     00000000 
00003144 l       .debug_loc     00000000 
0000315f l       .debug_loc     00000000 
0000317a l       .debug_loc     00000000 
00003195 l       .debug_loc     00000000 
000031b0 l       .debug_loc     00000000 
000031cb l       .debug_loc     00000000 
000031e6 l       .debug_loc     00000000 
00003201 l       .debug_loc     00000000 
0000321c l       .debug_loc     00000000 
00003237 l       .debug_loc     00000000 
00003253 l       .debug_loc     00000000 
00003272 l       .debug_loc     00000000 
0000328d l       .debug_loc     00000000 
000032be l       .debug_loc     00000000 
000032e4 l       .debug_loc     00000000 
00003315 l       .debug_loc     00000000 
00003346 l       .debug_loc     00000000 
00003361 l       .debug_loc     00000000 
0000337c l       .debug_loc     00000000 
00003397 l       .debug_loc     00000000 
000033c8 l       .debug_loc     00000000 
000033e3 l       .debug_loc     00000000 
000033fe l       .debug_loc     00000000 
0000341a l       .debug_loc     00000000 
00003440 l       .debug_loc     00000000 
00003471 l       .debug_loc     00000000 
0000348c l       .debug_loc     00000000 
000034a7 l       .debug_loc     00000000 
000034cd l       .debug_loc     00000000 
000034f3 l       .debug_loc     00000000 
0000350e l       .debug_loc     00000000 
00003529 l       .debug_loc     00000000 
00003544 l       .debug_loc     00000000 
0000355f l       .debug_loc     00000000 
0000357e l       .debug_loc     00000000 
00003599 l       .debug_loc     00000000 
000035b4 l       .debug_loc     00000000 
000035d0 l       .debug_loc     00000000 
000035eb l       .debug_loc     00000000 
00003606 l       .debug_loc     00000000 
00003625 l       .debug_loc     00000000 
0000364b l       .debug_loc     00000000 
0000367c l       .debug_loc     00000000 
000036d4 l       .debug_loc     00000000 
0000371e l       .debug_loc     00000000 
00003770 l       .debug_loc     00000000 
000037ad l       .debug_loc     00000000 
000037e9 l       .debug_loc     00000000 
00003853 l       .debug_loc     00000000 
0000389c l       .debug_loc     00000000 
00003906 l       .debug_loc     00000000 
0000392c l       .debug_loc     00000000 
00003947 l       .debug_loc     00000000 
00003962 l       .debug_loc     00000000 
00003989 l       .debug_loc     00000000 
000039d1 l       .debug_loc     00000000 
000039f7 l       .debug_loc     00000000 
00003a1d l       .debug_loc     00000000 
00003a43 l       .debug_loc     00000000 
00003a5e l       .debug_loc     00000000 
00003a8e l       .debug_loc     00000000 
00003ab4 l       .debug_loc     00000000 
00003ae6 l       .debug_loc     00000000 
00003b24 l       .debug_loc     00000000 
00003b53 l       .debug_loc     00000000 
00003b6e l       .debug_loc     00000000 
00003ba1 l       .debug_loc     00000000 
00003bbc l       .debug_loc     00000000 
00003bf8 l       .debug_loc     00000000 
00003c1e l       .debug_loc     00000000 
00003c39 l       .debug_loc     00000000 
00003c54 l       .debug_loc     00000000 
00003c6f l       .debug_loc     00000000 
00003cc5 l       .debug_loc     00000000 
00003cf4 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000fb4 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
000004d8 l       .debug_ranges  00000000 
00000fd2 l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00000207 l       .debug_str     00000000 
00000ff1 l       .debug_str     00000000 
00001009 l       .debug_str     00000000 
00000ffd l       .debug_str     00000000 
00000560 l       .debug_str     00000000 
0000131a l       .debug_str     00000000 
0000117b l       .debug_str     00000000 
000004df l       .debug_str     00000000 
00001017 l       .debug_str     00000000 
00001021 l       .debug_str     00000000 
00001372 l       .debug_str     00000000 
0000102f l       .debug_str     00000000 
000015de l       .debug_str     00000000 
00000ccd l       .debug_str     00000000 
000005b7 l       .debug_str     00000000 
00001217 l       .debug_str     00000000 
000006d7 l       .debug_str     00000000 
000013f9 l       .debug_str     00000000 
0000139f l       .debug_str     00000000 
00001241 l       .debug_str     00000000 
00001409 l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
00001039 l       .debug_str     00000000 
00001045 l       .debug_str     00000000 
00001052 l       .debug_str     00000000 
000010a1 l       .debug_str     00000000 
00001090 l       .debug_str     00000000 
00001069 l       .debug_str     00000000 
00001078 l       .debug_str     00000000 
00001087 l       .debug_str     00000000 
000010b4 l       .debug_str     00000000 
000002d0 l       .debug_str     00000000 
0000026d l       .debug_str     00000000 
00000274 l       .debug_str     00000000 
0000027e l       .debug_str     00000000 
00000289 l       .debug_str     00000000 
00000294 l       .debug_str     00000000 
000002a4 l       .debug_str     00000000 
000002b3 l       .debug_str     00000000 
000002c2 l       .debug_str     00000000 
000010bf l       .debug_str     00000000 
000010c8 l       .debug_str     00000000 
000010d3 l       .debug_str     00000000 
000010db l       .debug_str     00000000 
000010e7 l       .debug_str     00000000 
000010f3 l       .debug_str     00000000 
00001100 l       .debug_str     00000000 
00001110 l       .debug_str     00000000 
00001121 l       .debug_str     00000000 
0000112e l       .debug_str     00000000 
00001137 l       .debug_str     00000000 
00001141 l       .debug_str     00000000 
0000114b l       .debug_str     00000000 
00001156 l       .debug_str     00000000 
00001160 l       .debug_str     00000000 
0000116b l       .debug_str     00000000 
00001179 l       .debug_str     00000000 
0000036a l       .debug_str     00000000 
0000035c l       .debug_str     00000000 
0000118b l       .debug_str     00000000 
00001182 l       .debug_str     00000000 
0000037d l       .debug_str     00000000 
00000393 l       .debug_str     00000000 
00000387 l       .debug_str     00000000 
000011a1 l       .debug_str     00000000 
000006cd l       .debug_str     00000000 
00001196 l       .debug_str     00000000 
00000138 l       .debug_str     00000000 
000012c8 l       .debug_str     00000000 
000011b5 l       .debug_str     00000000 
000012d6 l       .debug_str     00000000 
00001186 l       .debug_str     00000000 
000012e7 l       .debug_str     00000000 
0000032a l       .debug_str     00000000 
000011c5 l       .debug_str     00000000 
00000f80 l       .debug_str     00000000 
00000146 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
000005a8 l       .debug_str     00000000 
0000059e l       .debug_str     00000000 
00000f74 l       .debug_str     00000000 
000003a0 l       .debug_ranges  00000000 
000012f5 l       .debug_str     00000000 
0000137f l       .debug_str     00000000 
000013ba l       .debug_str     00000000 
00000480 l       .debug_ranges  00000000 
0000125b l       .debug_str     00000000 
000003b8 l       .debug_ranges  00000000 
000003e0 l       .debug_ranges  00000000 
00000400 l       .debug_ranges  00000000 
00000418 l       .debug_ranges  00000000 
00000450 l       .debug_ranges  00000000 
00000438 l       .debug_ranges  00000000 
00000468 l       .debug_ranges  00000000 
000011df l       .debug_str     00000000 
000011f5 l       .debug_str     00000000 
00000ca0 l       .debug_str     00000000 
000007f3 l       .debug_str     00000000 
000011fe l       .debug_str     00000000 
0000123c l       .debug_str     00000000 
00001229 l       .debug_str     00000000 
00001206 l       .debug_str     00000000 
000017bc l       .debug_str     00000000 
0000121f l       .debug_str     00000000 
00001245 l       .debug_str     00000000 
00001257 l       .debug_str     00000000 
00000137 l       .debug_str     00000000 
00000ca2 l       .debug_str     00000000 
0000157f l       .debug_str     00000000 
00001266 l       .debug_str     00000000 
00001260 l       .debug_str     00000000 
0000126d l       .debug_str     00000000 
00001275 l       .debug_str     00000000 
0000046e l       .debug_str     00000000 
00001279 l       .debug_str     00000000 
0000060d l       .debug_str     00000000 
0000159d l       .debug_str     00000000 
0000127d l       .debug_str     00000000 
00001369 l       .debug_str     00000000 
00001639 l       .debug_str     00000000 
000013ee l       .debug_str     00000000 
000013e5 l       .debug_str     00000000 
00001400 l       .debug_str     00000000 
00000bc9 l       .debug_str     00000000 
00001303 l       .debug_str     00000000 
00001311 l       .debug_str     00000000 
00001389 l       .debug_str     00000000 
0000128c l       .debug_str     00000000 
0000131f l       .debug_str     00000000 
00001293 l       .debug_str     00000000 
0000109d l       .debug_str     00000000 
0000132c l       .debug_str     00000000 
00001356 l       .debug_str     00000000 
000013a6 l       .debug_str     00000000 
00001082 l       .debug_str     00000000 
000004c0 l       .debug_ranges  00000000 
00001399 l       .debug_str     00000000 
000013b5 l       .debug_str     00000000 
000013c8 l       .debug_str     00000000 
00001073 l       .debug_str     00000000 
000004a0 l       .debug_ranges  00000000 
00001392 l       .debug_str     00000000 
000013d7 l       .debug_str     00000000 
000013e0 l       .debug_str     00000000 
000012a5 l       .debug_str     00000000 
000012b9 l       .debug_str     00000000 
00001339 l       .debug_str     00000000 
00001348 l       .debug_str     00000000 
000012c1 l       .debug_str     00000000 
00000480 l       .debug_frame   00000000 
e0000fb6 l       .text  00000000 
e0000fe8 l       .text  00000000 
e0001002 l       .text  00000000 
e0001490 l       .text  00000000 
e0001574 l       .text  00000000 
e00015f2 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e00015f2 l       .text  00000000 
e00015f2 l       .text  00000000 
e00015f2 l       .text  00000000 
e00015f2 l       .text  00000000 
e00015f6 l       .text  00000000 
e00015fe l       .text  00000000 
e00015fe l       .text  00000000 
e0001602 l       .text  00000000 
e0001602 l       .text  00000000 
e000160e l       .text  00000000 
e0001610 l       .text  00000000 
e0001610 l       .text  00000000 
e0001614 l       .text  00000000 
e0001620 l       .text  00000000 
e0001622 l       .text  00000000 
e0001626 l       .text  00000000 
e0001628 l       .text  00000000 
e0001628 l       .text  00000000 
e000162c l       .text  00000000 
e000162c l       .text  00000000 
e0001630 l       .text  00000000 
e0001630 l       .text  00000000 
e0001632 l       .text  00000000 
e0001632 l       .text  00000000 
e0001636 l       .text  00000000 
e0001636 l       .text  00000000 
e0001638 l       .text  00000000 
e000163c l       .text  00000000 
e000163c l       .text  00000000 
e0001640 l       .text  00000000 
e0001644 l       .text  00000000 
e000164a l       .text  00000000 
e000164a l       .text  00000000 
e000164e l       .text  00000000 
e0001650 l       .text  00000000 
e0001650 l       .text  00000000 
e0001656 l       .text  00000000 
e0001656 l       .text  00000000 
e000165c l       .text  00000000 
e000165c l       .text  00000000 
e000165e l       .text  00000000 
e000165e l       .text  00000000 
e0001664 l       .text  00000000 
e0001664 l       .text  00000000 
00003d0f l       .debug_loc     00000000 
00003d2a l       .debug_loc     00000000 
00003d5b l       .debug_loc     00000000 
00003d81 l       .debug_loc     00000000 
00003da7 l       .debug_loc     00000000 
00003dc2 l       .debug_loc     00000000 
00003de4 l       .debug_loc     00000000 
00003e0b l       .debug_loc     00000000 
00003e32 l       .debug_loc     00000000 
00003e56 l       .debug_loc     00000000 
00003e87 l       .debug_loc     00000000 
00003ea2 l       .debug_loc     00000000 
00003ed3 l       .debug_loc     00000000 
00003f2d l       .debug_loc     00000000 
00003f69 l       .debug_loc     00000000 
00003f8d l       .debug_loc     00000000 
00003fb2 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000140f l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000588 l       .debug_ranges  00000000 
0000142b l       .debug_str     00000000 
00000137 l       .debug_str     00000000 
000004df l       .debug_str     00000000 
0000143b l       .debug_str     00000000 
00000365 l       .debug_str     00000000 
00000207 l       .debug_str     00000000 
00001569 l       .debug_str     00000000 
00001448 l       .debug_str     00000000 
0000144c l       .debug_str     00000000 
00001457 l       .debug_str     00000000 
00001460 l       .debug_str     00000000 
00001471 l       .debug_str     00000000 
00001483 l       .debug_str     00000000 
0000148d l       .debug_str     00000000 
0000149c l       .debug_str     00000000 
000014ae l       .debug_str     00000000 
000014c1 l       .debug_str     00000000 
000014d5 l       .debug_str     00000000 
000014de l       .debug_str     00000000 
000014ea l       .debug_str     00000000 
000014f9 l       .debug_str     00000000 
00001503 l       .debug_str     00000000 
00001510 l       .debug_str     00000000 
0000151a l       .debug_str     00000000 
0000152b l       .debug_str     00000000 
00000138 l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
0000117b l       .debug_str     00000000 
00001179 l       .debug_str     00000000 
0000157a l       .debug_str     00000000 
00001588 l       .debug_str     00000000 
00001591 l       .debug_str     00000000 
000016cd l       .debug_str     00000000 
00000a56 l       .debug_str     00000000 
00000a2c l       .debug_str     00000000 
00000a2f l       .debug_str     00000000 
00000ccd l       .debug_str     00000000 
00000a83 l       .debug_str     00000000 
00000a72 l       .debug_str     00000000 
00000a6d l       .debug_str     00000000 
00000a39 l       .debug_str     00000000 
000015a1 l       .debug_str     00000000 
00001575 l       .debug_str     00000000 
000015af l       .debug_str     00000000 
00001279 l       .debug_str     00000000 
00000570 l       .debug_ranges  00000000 
00001596 l       .debug_str     00000000 
000000c9 l       .debug_str     00000000 
0000157f l       .debug_str     00000000 
00001266 l       .debug_str     00000000 
00000d93 l       .debug_str     00000000 
0000127d l       .debug_str     00000000 
000015b9 l       .debug_str     00000000 
0000159d l       .debug_str     00000000 
000007f3 l       .debug_str     00000000 
00000674 l       .debug_frame   00000000 
e0001664 l       .text  00000000 
00000000 l    df *ABS*  00000000 math.c
e0001664 l       .text  00000000 
e0001664 l       .text  00000000 
e0001664 l       .text  00000000 
e0001666 l       .text  00000000 
e000166c l       .text  00000000 
e0001678 l       .text  00000000 
e0001680 l       .text  00000000 
e0001680 l       .text  00000000 
e0001688 l       .text  00000000 
e00016aa l       .text  00000000 
e00016ae l       .text  00000000 
e00016ae l       .text  00000000 
e00016b2 l       .text  00000000 
e00016b6 l       .text  00000000 
e00016b6 l       .text  00000000 
e00016ba l       .text  00000000 
e00016cc l       .text  00000000 
e00016d0 l       .text  00000000 
e00016e0 l       .text  00000000 
e00016e2 l       .text  00000000 
e00016e2 l       .text  00000000 
e00016f2 l       .text  00000000 
e00016f4 l       .text  00000000 
e00016f4 l       .text  00000000 
e00016f8 l       .text  00000000 
e00016f8 l       .text  00000000 
e00016fc l       .text  00000000 
e00016fc l       .text  00000000 
e00016fe l       .text  00000000 
e0001706 l       .text  00000000 
e0001708 l       .text  00000000 
e000170a l       .text  00000000 
e0001714 l       .text  00000000 
e0001714 l       .text  00000000 
00003fd4 l       .debug_loc     00000000 
00003fec l       .debug_loc     00000000 
00004013 l       .debug_loc     00000000 
00004044 l       .debug_loc     00000000 
00004097 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000015c0 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000817 l       .debug_str     00000000 
00000710 l       .debug_str     00000000 
00000684 l       .debug_str     00000000 
000015da l       .debug_str     00000000 
000008a7 l       .debug_str     00000000 
000015e2 l       .debug_str     00000000 
000015e6 l       .debug_str     00000000 
0000032a l       .debug_str     00000000 
0000074f l       .debug_str     00000000 
000004d5 l       .debug_str     00000000 
0000117b l       .debug_str     00000000 
000004df l       .debug_str     00000000 
000006a8 l       .debug_frame   00000000 
e0001714 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
e0001714 l       .text  00000000 
e0001714 l       .text  00000000 
e0001714 l       .text  00000000 
e0001714 l       .text  00000000 
e000171c l       .text  00000000 
e0001720 l       .text  00000000 
e0001720 l       .text  00000000 
e0001724 l       .text  00000000 
e0001724 l       .text  00000000 
e0001728 l       .text  00000000 
e0001728 l       .text  00000000 
e0001734 l       .text  00000000 
e0001736 l       .text  00000000 
e0001736 l       .text  00000000 
e000173c l       .text  00000000 
e000173c l       .text  00000000 
e0001740 l       .text  00000000 
e0001742 l       .text  00000000 
e0001746 l       .text  00000000 
e0001746 l       .text  00000000 
e0001748 l       .text  00000000 
e0001748 l       .text  00000000 
e000174a l       .text  00000000 
e000174a l       .text  00000000 
e0001752 l       .text  00000000 
e0001756 l       .text  00000000 
e0001758 l       .text  00000000 
e000175c l       .text  00000000 
e0001760 l       .text  00000000 
e0001760 l       .text  00000000 
e0001764 l       .text  00000000 
e0001764 l       .text  00000000 
e0001768 l       .text  00000000 
e000176a l       .text  00000000 
e000176a l       .text  00000000 
e000176e l       .text  00000000 
e000176e l       .text  00000000 
e0001770 l       .text  00000000 
e0001770 l       .text  00000000 
e0001772 l       .text  00000000 
e0001772 l       .text  00000000 
e0001776 l       .text  00000000 
e0001776 l       .text  00000000 
e000177a l       .text  00000000 
e000177c l       .text  00000000 
e0001782 l       .text  00000000 
e0001782 l       .text  00000000 
e0001786 l       .text  00000000 
e000178a l       .text  00000000 
e0001792 l       .text  00000000 
e0001792 l       .text  00000000 
e0001794 l       .text  00000000 
e0001794 l       .text  00000000 
e0001796 l       .text  00000000 
e0001796 l       .text  00000000 
e000179c l       .text  00000000 
e000179c l       .text  00000000 
e000179c l       .text  00000000 
e000179c l       .text  00000000 
e000179c l       .text  00000000 
e00017a0 l       .text  00000000 
e00017a0 l       .text  00000000 
e00017a4 l       .text  00000000 
e00017a4 l       .text  00000000 
e00017ac l       .text  00000000 
e00017ac l       .text  00000000 
e00017b0 l       .text  00000000 
e00017b4 l       .text  00000000 
e00017b4 l       .text  00000000 
e00017b6 l       .text  00000000 
e00017b6 l       .text  00000000 
e00017ba l       .text  00000000 
e00017ba l       .text  00000000 
e00017be l       .text  00000000 
e00017be l       .text  00000000 
e00017c0 l       .text  00000000 
e00017c2 l       .text  00000000 
e00017c4 l       .text  00000000 
e00017c4 l       .text  00000000 
e00017c8 l       .text  00000000 
e00017cc l       .text  00000000 
e00017dc l       .text  00000000 
e00017dc l       .text  00000000 
e00017e0 l       .text  00000000 
e00017e0 l       .text  00000000 
e00017e2 l       .text  00000000 
e00017e2 l       .text  00000000 
e00017e4 l       .text  00000000 
e00017e4 l       .text  00000000 
e00017e8 l       .text  00000000 
e00017e8 l       .text  00000000 
e00017ee l       .text  00000000 
e00017f2 l       .text  00000000 
e00017f2 l       .text  00000000 
e00017f6 l       .text  00000000 
e00017fa l       .text  00000000 
e00017fc l       .text  00000000 
e00017fe l       .text  00000000 
e00017fe l       .text  00000000 
e00017fe l       .text  00000000 
e00017fe l       .text  00000000 
e00017fe l       .text  00000000 
e0001802 l       .text  00000000 
e0001802 l       .text  00000000 
e0001806 l       .text  00000000 
e0001806 l       .text  00000000 
e000180e l       .text  00000000 
e0001812 l       .text  00000000 
e0001816 l       .text  00000000 
e0001818 l       .text  00000000 
e000181a l       .text  00000000 
e000181a l       .text  00000000 
e000181e l       .text  00000000 
e0001822 l       .text  00000000 
e0001822 l       .text  00000000 
e0001824 l       .text  00000000 
e0001826 l       .text  00000000 
e0001828 l       .text  00000000 
e000182e l       .text  00000000 
e000182e l       .text  00000000 
e0001830 l       .text  00000000 
e0001834 l       .text  00000000 
e0001840 l       .text  00000000 
e000184e l       .text  00000000 
e000184e l       .text  00000000 
e0001852 l       .text  00000000 
e0001854 l       .text  00000000 
e0001854 l       .text  00000000 
e0001858 l       .text  00000000 
e000185c l       .text  00000000 
e000185c l       .text  00000000 
e0001860 l       .text  00000000 
e0001864 l       .text  00000000 
e0001868 l       .text  00000000 
e000186c l       .text  00000000 
e0001870 l       .text  00000000 
e0001870 l       .text  00000000 
e0001874 l       .text  00000000 
e0001878 l       .text  00000000 
e000187a l       .text  00000000 
e000187a l       .text  00000000 
e000187c l       .text  00000000 
e0001880 l       .text  00000000 
e0001880 l       .text  00000000 
e0001888 l       .text  00000000 
e000188c l       .text  00000000 
e000188c l       .text  00000000 
e0001890 l       .text  00000000 
e0001894 l       .text  00000000 
e0001898 l       .text  00000000 
e000189a l       .text  00000000 
e000189e l       .text  00000000 
e000189e l       .text  00000000 
e00018a2 l       .text  00000000 
e00018a2 l       .text  00000000 
e00018a6 l       .text  00000000 
e00018a8 l       .text  00000000 
e00018a8 l       .text  00000000 
e00018ac l       .text  00000000 
e00018ac l       .text  00000000 
e00018ac l       .text  00000000 
e00018ac l       .text  00000000 
e00018ac l       .text  00000000 
e00018b0 l       .text  00000000 
e00018b0 l       .text  00000000 
e00018b4 l       .text  00000000 
e00018b4 l       .text  00000000 
e00018bc l       .text  00000000 
e00018bc l       .text  00000000 
e00018c0 l       .text  00000000 
e00018c2 l       .text  00000000 
e00018c6 l       .text  00000000 
e00018c6 l       .text  00000000 
e00018c8 l       .text  00000000 
e00018c8 l       .text  00000000 
e00018cc l       .text  00000000 
e00018cc l       .text  00000000 
e00018d2 l       .text  00000000 
e00018d2 l       .text  00000000 
e00018d6 l       .text  00000000 
e00018d6 l       .text  00000000 
e00018de l       .text  00000000 
e00018e2 l       .text  00000000 
e00018e2 l       .text  00000000 
e00018e4 l       .text  00000000 
e00018e8 l       .text  00000000 
e00018e8 l       .text  00000000 
e00018ea l       .text  00000000 
e00018ec l       .text  00000000 
e00018ec l       .text  00000000 
e00018f4 l       .text  00000000 
e00018f4 l       .text  00000000 
e00018f8 l       .text  00000000 
e00018f8 l       .text  00000000 
e0001902 l       .text  00000000 
e0001906 l       .text  00000000 
e0001906 l       .text  00000000 
e000190a l       .text  00000000 
e000190a l       .text  00000000 
e000190e l       .text  00000000 
e0001912 l       .text  00000000 
e0001912 l       .text  00000000 
e0001916 l       .text  00000000 
e000191a l       .text  00000000 
e000191a l       .text  00000000 
e000191c l       .text  00000000 
e0001920 l       .text  00000000 
e0001920 l       .text  00000000 
e0001924 l       .text  00000000 
e0001928 l       .text  00000000 
e000192c l       .text  00000000 
e0001930 l       .text  00000000 
e0001934 l       .text  00000000 
e0001936 l       .text  00000000 
e0001936 l       .text  00000000 
e000193a l       .text  00000000 
e000193a l       .text  00000000 
e000193c l       .text  00000000 
e000193e l       .text  00000000 
e000193e l       .text  00000000 
e0001946 l       .text  00000000 
e000194a l       .text  00000000 
e000194a l       .text  00000000 
e000194c l       .text  00000000 
e0001950 l       .text  00000000 
e0001950 l       .text  00000000 
e0001952 l       .text  00000000 
e0001954 l       .text  00000000 
e0001954 l       .text  00000000 
e0001956 l       .text  00000000 
e0001956 l       .text  00000000 
e000195a l       .text  00000000 
e000195a l       .text  00000000 
e000195c l       .text  00000000 
e000195c l       .text  00000000 
e0001960 l       .text  00000000 
e0001960 l       .text  00000000 
e0001962 l       .text  00000000 
e0001962 l       .text  00000000 
e0001966 l       .text  00000000 
e0001966 l       .text  00000000 
e0001968 l       .text  00000000 
e0001968 l       .text  00000000 
e000196a l       .text  00000000 
e000196a l       .text  00000000 
e000196c l       .text  00000000 
e000196c l       .text  00000000 
000040ca l       .debug_loc     00000000 
000040f0 l       .debug_loc     00000000 
00004116 l       .debug_loc     00000000 
0000413c l       .debug_loc     00000000 
00004162 l       .debug_loc     00000000 
00004181 l       .debug_loc     00000000 
000041a0 l       .debug_loc     00000000 
000041c6 l       .debug_loc     00000000 
000041e1 l       .debug_loc     00000000 
0000422a l       .debug_loc     00000000 
00004250 l       .debug_loc     00000000 
00004272 l       .debug_loc     00000000 
0000428d l       .debug_loc     00000000 
000042a8 l       .debug_loc     00000000 
000042c3 l       .debug_loc     00000000 
000042de l       .debug_loc     00000000 
000042f9 l       .debug_loc     00000000 
00004314 l       .debug_loc     00000000 
00004364 l       .debug_loc     00000000 
0000437f l       .debug_loc     00000000 
0000439a l       .debug_loc     00000000 
000043bc l       .debug_loc     00000000 
000043d7 l       .debug_loc     00000000 
000043f2 l       .debug_loc     00000000 
0000440d l       .debug_loc     00000000 
00004428 l       .debug_loc     00000000 
00004443 l       .debug_loc     00000000 
00004462 l       .debug_loc     00000000 
00004481 l       .debug_loc     00000000 
000044a7 l       .debug_loc     00000000 
000044c2 l       .debug_loc     00000000 
0000450b l       .debug_loc     00000000 
00004531 l       .debug_loc     00000000 
0000454c l       .debug_loc     00000000 
00004567 l       .debug_loc     00000000 
00004582 l       .debug_loc     00000000 
0000459d l       .debug_loc     00000000 
000045b8 l       .debug_loc     00000000 
000045d3 l       .debug_loc     00000000 
000045ee l       .debug_loc     00000000 
0000460d l       .debug_loc     00000000 
0000462c l       .debug_loc     00000000 
00004647 l       .debug_loc     00000000 
0000468e l       .debug_loc     00000000 
000046a9 l       .debug_loc     00000000 
000046c4 l       .debug_loc     00000000 
000046ea l       .debug_loc     00000000 
00004705 l       .debug_loc     00000000 
00004720 l       .debug_loc     00000000 
0000473b l       .debug_loc     00000000 
00004756 l       .debug_loc     00000000 
00004771 l       .debug_loc     00000000 
00004797 l       .debug_loc     00000000 
000047b2 l       .debug_loc     00000000 
000047d8 l       .debug_loc     00000000 
000047fe l       .debug_loc     00000000 
0000481b l       .debug_loc     00000000 
00004876 l       .debug_loc     00000000 
00004891 l       .debug_loc     00000000 
000048b7 l       .debug_loc     00000000 
000048dd l       .debug_loc     00000000 
000048f8 l       .debug_loc     00000000 
0000491e l       .debug_loc     00000000 
0000497b l       .debug_loc     00000000 
00004996 l       .debug_loc     00000000 
000049b1 l       .debug_loc     00000000 
00004a0e l       .debug_loc     00000000 
00004a2b l       .debug_loc     00000000 
00004a46 l       .debug_loc     00000000 
00004a8d l       .debug_loc     00000000 
00004aa8 l       .debug_loc     00000000 
00004ac3 l       .debug_loc     00000000 
00004ade l       .debug_loc     00000000 
00004af9 l       .debug_loc     00000000 
00004b14 l       .debug_loc     00000000 
00004b3a l       .debug_loc     00000000 
00004b55 l       .debug_loc     00000000 
00004b70 l       .debug_loc     00000000 
00004b8b l       .debug_loc     00000000 
00004ba6 l       .debug_loc     00000000 
00004bd3 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000015eb l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000628 l       .debug_ranges  00000000 
00001607 l       .debug_str     00000000 
00001611 l       .debug_str     00000000 
0000161b l       .debug_str     00000000 
000004e8 l       .debug_str     00000000 
0000035c l       .debug_str     00000000 
0000036a l       .debug_str     00000000 
00000ca2 l       .debug_str     00000000 
000004df l       .debug_str     00000000 
00001625 l       .debug_str     00000000 
0000171a l       .debug_str     00000000 
00001724 l       .debug_str     00000000 
00001241 l       .debug_str     00000000 
0000163f l       .debug_str     00000000 
0000164a l       .debug_str     00000000 
0000117b l       .debug_str     00000000 
00001179 l       .debug_str     00000000 
00001656 l       .debug_str     00000000 
00001668 l       .debug_str     00000000 
00001678 l       .debug_str     00000000 
0000162d l       .debug_str     00000000 
00001688 l       .debug_str     00000000 
00000d10 l       .debug_str     00000000 
000006c3 l       .debug_str     00000000 
00000c21 l       .debug_str     00000000 
00000137 l       .debug_str     00000000 
00001692 l       .debug_str     00000000 
00000ccd l       .debug_str     00000000 
0000128c l       .debug_str     00000000 
000016e0 l       .debug_str     00000000 
000016e5 l       .debug_str     00000000 
000016e9 l       .debug_str     00000000 
000016ef l       .debug_str     00000000 
0000166c l       .debug_str     00000000 
0000032a l       .debug_str     00000000 
0000167c l       .debug_str     00000000 
000005b8 l       .debug_ranges  00000000 
00001073 l       .debug_str     00000000 
000005a0 l       .debug_ranges  00000000 
000012c1 l       .debug_str     00000000 
000016f4 l       .debug_str     00000000 
000016fb l       .debug_str     00000000 
000005d0 l       .debug_ranges  00000000 
000016ae l       .debug_str     00000000 
00001703 l       .debug_str     00000000 
00001707 l       .debug_str     00000000 
0000170b l       .debug_str     00000000 
00001710 l       .debug_str     00000000 
00001715 l       .debug_str     00000000 
0000171f l       .debug_str     00000000 
000016b5 l       .debug_str     00000000 
0000060d l       .debug_str     00000000 
00000f65 l       .debug_str     00000000 
0000172a l       .debug_str     00000000 
000005e8 l       .debug_ranges  00000000 
0000172f l       .debug_str     00000000 
0000169b l       .debug_str     00000000 
000013e0 l       .debug_str     00000000 
00000f6c l       .debug_str     00000000 
00000600 l       .debug_ranges  00000000 
000016bd l       .debug_str     00000000 
00000eb7 l       .debug_str     00000000 
000016cf l       .debug_str     00000000 
000016d7 l       .debug_str     00000000 
000009fb l       .debug_str     00000000 
0000074f l       .debug_str     00000000 
000004d5 l       .debug_str     00000000 
000006d8 l       .debug_frame   00000000 
e000179c l       .text  00000000 
e00017fe l       .text  00000000 
e00018ac l       .text  00000000 
e000196c l       .text  00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
00004bf3 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001737 l       .debug_str     00000000 
000000b1 l       .debug_str     00000000 
00000688 l       .debug_ranges  00000000 
00001761 l       .debug_str     00000000 
000017c1 l       .debug_str     00000000 
000017b5 l       .debug_str     00000000 
0000176d l       .debug_str     00000000 
0000177a l       .debug_str     00000000 
0000178e l       .debug_str     00000000 
0000179f l       .debug_str     00000000 
000004df l       .debug_str     00000000 
000017cf l       .debug_str     00000000 
0000074f l       .debug_str     00000000 
000004d5 l       .debug_str     00000000 
000017df l       .debug_str     00000000 
000017fd l       .debug_str     00000000 
00001814 l       .debug_str     00000000 
00001824 l       .debug_str     00000000 
00001834 l       .debug_str     00000000 
00001842 l       .debug_str     00000000 
00000137 l       .debug_str     00000000 
00001850 l       .debug_str     00000000 
00001865 l       .debug_str     00000000 
0000187c l       .debug_str     00000000 
00000ca2 l       .debug_str     00000000 
00001895 l       .debug_str     00000000 
000018b1 l       .debug_str     00000000 
000007f3 l       .debug_str     00000000 
00000edf l       .debug_str     00000000 
000007aa l       .debug_str     00000000 
000018c0 l       .debug_str     00000000 
0000079c l       .debug_frame   00000000 
e0000498 g     F .text  0000007a external_irq_handler
e00002d8 g     F .text  00000192 printf
e0000ad8 g     F .text  000000e2 hmac_testutils_finish_and_check_polled
e00018ac g     F .text  000000c0 memrchr
e0000d34 g     F .text  00000056 dif_hmac_fifo_push
00008000 g       *ABS*  00000000 _stack_len
e0001714 g     F .text  00000088 memcpy
e0000c66 g     F .text  0000000e dif_hmac_init
e000232c g       .bss   00000000 _bss_start
e0000f7e g     F .text  00000034 base_log_internal_dv
e000a000 g       .stack 00000000 stack
e0000ed6 g     F .text  00000006 abort
e0000cec g     F .text  00000048 dif_hmac_mode_sha256_start
e0000080 g       *ABS*  00000000 _entry_point
e0002338 g       .bss   00000000 _bss_end
e0000dda g     F .text  0000004e dif_hmac_finish
e00022a8 g     O .data  00000084 status_codes
e000046a g     F .text  0000002e uart_set_cfg
e00017fe g     F .text  000000ae memchr
e00000cc g       .text  00000000 _start
e0001002 g     F .text  0000048e base_vfprintf
e0000c74 g     F .text  00000078 dif_hmac_mode_hmac_start
e0002298 g     O .data  00000010 remu10_table
e0000fe8 g     F .text  0000001a base_vprintf
e000179c g     F .text  00000062 memset
e0000104 g     F .text  000000d0 main
e0000950 g     F .text  00000188 hmac_testutils_finish_polled
e0000084 g       .vectors       00000000 _vectors_end
e0000d8a g     F .text  0000001e dif_hmac_fifo_count_entries
e0010000 g       .vectors       00000000 _stack_start
e0002268 g     O .rodata        00000008 kClockFreqCpuHz
e0000710 g     F .text  000000be hmac_testutils_check_message_length
e0000da8 g     F .text  0000001e dif_hmac_get_message_length
00002000 g       *ABS*  00000000 _min_stack
e0002270 g     O .rodata        00000004 kDeviceTestStatusAddress
e0001664 g     F .text  000000b0 udiv64_slow
e0000fb6 g     F .text  00000032 base_printf
e0010010 g       *ABS*  00000000 fromhost
e0002274 g     O .rodata        00000004 kDeviceLogBypassUartAddress
00020008 g       *ABS*  00000000 tohost
e00007ce g     F .text  00000182 hmac_testutils_fifo_empty_polled
e00015f2 g     F .text  00000072 status_extract
e0000dc6 g     F .text  00000014 dif_hmac_process
e000a000 g       .stack 00000000 _stack
e0000000 g       .vectors       00000000 _vectors_start
e0000e28 g     F .text  000000ae test_status_set
e0000edc g     F .text  000000a2 base_log_internal_core
e0000bba g     F .text  000000ac hmac_testutils_push_message



Disassembly of section .vectors:

e0000000 <_vectors_start>:
e0000000:       0840006f                j       e0000084 <_vectors_end>
e0000004:       0800006f                j       e0000084 <_vectors_end>
e0000008:       07c0006f                j       e0000084 <_vectors_end>
e000000c:       0780006f                j       e0000084 <_vectors_end>
e0000010:       0740006f                j       e0000084 <_vectors_end>
e0000014:       0700006f                j       e0000084 <_vectors_end>
e0000018:       06c0006f                j       e0000084 <_vectors_end>
e000001c:       0680006f                j       e0000084 <_vectors_end>
e0000020:       0640006f                j       e0000084 <_vectors_end>
e0000024:       0600006f                j       e0000084 <_vectors_end>
e0000028:       05c0006f                j       e0000084 <_vectors_end>
e000002c:       46c0006f                j       e0000498 <external_irq_handler>
e0000030:       0540006f                j       e0000084 <_vectors_end>
e0000034:       0500006f                j       e0000084 <_vectors_end>
e0000038:       04c0006f                j       e0000084 <_vectors_end>
e000003c:       0480006f                j       e0000084 <_vectors_end>
e0000040:       0440006f                j       e0000084 <_vectors_end>
e0000044:       0400006f                j       e0000084 <_vectors_end>
e0000048:       03c0006f                j       e0000084 <_vectors_end>
e000004c:       0380006f                j       e0000084 <_vectors_end>
e0000050:       0340006f                j       e0000084 <_vectors_end>
e0000054:       0300006f                j       e0000084 <_vectors_end>
e0000058:       02c0006f                j       e0000084 <_vectors_end>
e000005c:       0280006f                j       e0000084 <_vectors_end>
e0000060:       0240006f                j       e0000084 <_vectors_end>
e0000064:       0200006f                j       e0000084 <_vectors_end>
e0000068:       01c0006f                j       e0000084 <_vectors_end>
e000006c:       0180006f                j       e0000084 <_vectors_end>
e0000070:       0140006f                j       e0000084 <_vectors_end>
e0000074:       0100006f                j       e0000084 <_vectors_end>
e0000078:       00c0006f                j       e0000084 <_vectors_end>
e000007c:       0080006f                j       e0000084 <_vectors_end>
e0000080:       0060006f                j       e0000086 <reset_handler>

Disassembly of section .text:

e0000084 <default_exc_handler>:
default_exc_handler():
e0000084:       a8ad                    j       e00000fe <sleep_loop>

e0000086 <reset_handler>:
reset_handler():
e0000086:       4081                    li      ra,0
e0000088:       8106                    mv      sp,ra
e000008a:       8186                    mv      gp,ra
e000008c:       8206                    mv      tp,ra
e000008e:       8286                    mv      t0,ra
e0000090:       8306                    mv      t1,ra
e0000092:       8386                    mv      t2,ra
e0000094:       8406                    mv      s0,ra
e0000096:       8486                    mv      s1,ra
e0000098:       8506                    mv      a0,ra
e000009a:       8586                    mv      a1,ra
e000009c:       8606                    mv      a2,ra
e000009e:       8686                    mv      a3,ra
e00000a0:       8706                    mv      a4,ra
e00000a2:       8786                    mv      a5,ra
e00000a4:       8806                    mv      a6,ra
e00000a6:       8886                    mv      a7,ra
e00000a8:       8906                    mv      s2,ra
e00000aa:       8986                    mv      s3,ra
e00000ac:       8a06                    mv      s4,ra
e00000ae:       8a86                    mv      s5,ra
e00000b0:       8b06                    mv      s6,ra
e00000b2:       8b86                    mv      s7,ra
e00000b4:       8c06                    mv      s8,ra
e00000b6:       8c86                    mv      s9,ra
e00000b8:       8d06                    mv      s10,ra
e00000ba:       8d86                    mv      s11,ra
e00000bc:       8e06                    mv      t3,ra
e00000be:       8e86                    mv      t4,ra
e00000c0:       8f06                    mv      t5,ra
e00000c2:       8f86                    mv      t6,ra
e00000c4:       00010117                auipc   sp,0x10
e00000c8:       f3c10113                addi    sp,sp,-196 # e0010000 <_stack_start>

e00000cc <_start>:
e00000cc:       00002d17                auipc   s10,0x2
e00000d0:       260d0d13                addi    s10,s10,608 # e000232c <base_log_internal_core.global_log_counter>
e00000d4:       00002d97                auipc   s11,0x2
e00000d8:       264d8d93                addi    s11,s11,612 # e0002338 <test_setup.kLogFields>
e00000dc:       01bd5763                bge     s10,s11,e00000ea <main_entry>

e00000e0 <zero_loop>:
zero_loop():
e00000e0:       /-> 000d2023            sw      zero,0(s10)
e00000e4:       |   0d11                        addi    s10,s10,4
e00000e6:       \-- ffaddde3            bge     s11,s10,e00000e0 <zero_loop>

e00000ea <main_entry>:
zero_loop_end():
e00000ea:       4501                    li      a0,0
e00000ec:       4581                    li      a1,0
e00000ee:       016000ef                jal     ra,e0000104 <main>
e00000f2:       c11c0537                lui     a0,0xc11c0
e00000f6:       0561                    addi    a0,a0,24
e00000f8:       4285                    li      t0,1
e00000fa:       00552023                sw      t0,0(a0) # c11c0000 <fromhost+0xe11afff0>

e00000fe <sleep_loop>:
sleep_loop():
e00000fe:       /-> 10500073            wfi
e0000102:       \-- bff5                        j       e00000fe <sleep_loop>

e0000104 <main>:
main():
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:99
  hmac_testutils_check_message_length(hmac, len * 8);
  run_hmac(hmac);
  hmac_testutils_finish_and_check_polled(hmac, expected_digest);
}

int main(int argc, char **argv) {
e0000104:                 7179                  addi    sp,sp,-48
e0000106:                 d606                  sw      ra,44(sp)
e0000108:                 d422                  sw      s0,40(sp)
e000010a:                 d226                  sw      s1,36(sp)
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:110
  #else
  //set_flls();
  int baud_rate = 115200;
  int test_freq = 100000000;
  #endif
  uart_set_cfg(0,(test_freq/baud_rate)>>4);
e000010c:                 45ed                  li      a1,27
e000010e:                 4501                  li      a0,0
e0000110:                 2ea9                  jal     e000046a <uart_set_cfg>
test_setup():
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:65
  CHECK_DIF_OK(dif_hmac_init(base_addr, hmac));
e0000112:                 c1110537              lui     a0,0xc1110
e0000116:                 002c                  addi    a1,sp,8
e0000118:                 34f000ef              jal     ra,e0000c66 <dif_hmac_init>
e000011c:       /-------- c131                  beqz    a0,e0000160 <main+0x5c>
e000011e:       |         842a                  mv      s0,a0
e0000120:       |         00002517              auipc   a0,0x2
e0000124:       |         15450513              addi    a0,a0,340 # e0002274 <kDeviceLogBypassUartAddress>
e0000128:       |         4108                  lw      a0,0(a0)
e000012a:       |     /-- c911                  beqz    a0,e000013e <main+0x3a>
e000012c:       |     |   00002517              auipc   a0,0x2
e0000130:       |     |   20c50513              addi    a0,a0,524 # e0002338 <test_setup.kLogFields>
e0000134:       |     |   4585                  li      a1,1
e0000136:       |     |   8622                  mv      a2,s0
e0000138:       |     |   647000ef              jal     ra,e0000f7e <base_log_internal_dv>
e000013c:       |  /--|-- a829                  j       e0000156 <main+0x52>
e000013e:       |  |  \-> 00002597              auipc   a1,0x2
e0000142:       |  |      ab258593              addi    a1,a1,-1358 # e0001bf0 <kExpectedHmacDigest+0x20>
e0000146:       |  |      0808                  addi    a0,sp,16
e0000148:       |  |      4651                  li      a2,20
e000014a:       |  |      5ca010ef              jal     ra,e0001714 <memcpy>
e000014e:       |  |      0808                  addi    a0,sp,16
e0000150:       |  |      85a2                  mv      a1,s0
e0000152:       |  |      58b000ef              jal     ra,e0000edc <base_log_internal_core>
e0000156:       |  \----> 6531                  lui     a0,0xc
e0000158:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e000015c:       |         4cd000ef              jal     ra,e0000e28 <test_status_set>
main():
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:116
  
  int volatile * a;
  dif_hmac_t hmac;
  test_setup(mmio_region_from_addr(TOP_EARLGREY_HMAC_BASE_ADDR), &hmac);
  
  printf("Running test SHA256 pass 1...");
e0000160:       \-------> 00002517              auipc   a0,0x2
e0000164:                 81050513              addi    a0,a0,-2032 # e0001970 <memrchr+0xc4>
e0000168:                 2a85                  jal     e00002d8 <printf>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:117
  run_test(&hmac, kData, sizeof(kData), NULL, &kExpectedShaDigest);
e000016a:                 00002417              auipc   s0,0x2
e000016e:                 a4640413              addi    s0,s0,-1466 # e0001bb0 <kExpectedShaDigest>
e0000172:                 0028                  addi    a0,sp,8
e0000174:                 4581                  li      a1,0
e0000176:                 8622                  mv      a2,s0
e0000178:                 28b1                  jal     e00001d4 <run_test>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:119

  printf("Running test SHA256 pass 2...");
e000017a:                 00002517              auipc   a0,0x2
e000017e:                 81450513              addi    a0,a0,-2028 # e000198e <memrchr+0xe2>
e0000182:                 2a99                  jal     e00002d8 <printf>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:120
  run_test(&hmac, kData, sizeof(kData), NULL, &kExpectedShaDigest);
e0000184:                 0028                  addi    a0,sp,8
e0000186:                 4581                  li      a1,0
e0000188:                 8622                  mv      a2,s0
e000018a:                 20a9                  jal     e00001d4 <run_test>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:122

  printf("Running test HMAC pass 1...");
e000018c:                 00002517              auipc   a0,0x2
e0000190:                 82050513              addi    a0,a0,-2016 # e00019ac <memrchr+0x100>
e0000194:                 2291                  jal     e00002d8 <printf>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:123
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
e0000196:                 00002417              auipc   s0,0x2
e000019a:                 0e240413              addi    s0,s0,226 # e0002278 <kHmacKey>
e000019e:                 00002497              auipc   s1,0x2
e00001a2:                 a3248493              addi    s1,s1,-1486 # e0001bd0 <kExpectedHmacDigest>
e00001a6:                 0028                  addi    a0,sp,8
e00001a8:                 85a2                  mv      a1,s0
e00001aa:                 8626                  mv      a2,s1
e00001ac:                 2025                  jal     e00001d4 <run_test>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:126
           &kExpectedHmacDigest);

  printf("Running test HMAC pass 2...");
e00001ae:                 00002517              auipc   a0,0x2
e00001b2:                 81a50513              addi    a0,a0,-2022 # e00019c8 <memrchr+0x11c>
e00001b6:                 220d                  jal     e00002d8 <printf>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:127
  run_test(&hmac, kData, sizeof(kData), (uint8_t *)(&kHmacKey[0]),
e00001b8:                 0028                  addi    a0,sp,8
e00001ba:                 85a2                  mv      a1,s0
e00001bc:                 8626                  mv      a2,s1
e00001be:                 2819                  jal     e00001d4 <run_test>
e00001c0:                 c11c0537              lui     a0,0xc11c0
e00001c4:                 4585                  li      a1,1
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:130
           &kExpectedHmacDigest);
  a = (int *) 0xc11c0018;
  *a = 0x1;
e00001c6:                 cd0c                  sw      a1,24(a0)
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:132
  
  return 0;
e00001c8:                 4501                  li      a0,0
e00001ca:                 5492                  lw      s1,36(sp)
e00001cc:                 5422                  lw      s0,40(sp)
e00001ce:                 50b2                  lw      ra,44(sp)
e00001d0:                 6145                  addi    sp,sp,48
e00001d2:                 8082                  ret

e00001d4 <run_test>:
run_test():
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:90
                     const dif_hmac_digest_t *expected_digest) {
e00001d4:                       7179                    addi    sp,sp,-48
e00001d6:                       d606                    sw      ra,44(sp)
e00001d8:                       d422                    sw      s0,40(sp)
e00001da:                       d226                    sw      s1,36(sp)
e00001dc:                       d04a                    sw      s2,32(sp)
e00001de:                       ce4e                    sw      s3,28(sp)
e00001e0:                       8932                    mv      s2,a2
e00001e2:                       84aa                    mv      s1,a0
e00001e4:                       00002997                auipc   s3,0x2
e00001e8:                       09098993                addi    s3,s3,144 # e0002274 <kDeviceLogBypassUartAddress>
test_start():
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:74
  if (key == NULL) {
e00001ec:                /----- c185                    beqz    a1,e000020c <run_test+0x38>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:77
    CHECK_DIF_OK(dif_hmac_mode_hmac_start(hmac, key, kHmacTransactionConfig));
e00001ee:                |      4605                    li      a2,1
e00001f0:                |      4685                    li      a3,1
e00001f2:                |      8526                    mv      a0,s1
e00001f4:                |      281000ef                jal     ra,e0000c74 <dif_hmac_mode_hmac_start>
e00001f8:       /--------|----- c13d                    beqz    a0,e000025e <run_test+0x8a>
e00001fa:       |        |      842a                    mv      s0,a0
e00001fc:       |        |      0009a503                lw      a0,0(s3)
e0000200:       |  /-----|----- c90d                    beqz    a0,e0000232 <run_test+0x5e>
e0000202:       |  |     |      00002517                auipc   a0,0x2
e0000206:       |  |     |      15e50513                addi    a0,a0,350 # e0002360 <test_start.kLogFields.7>
e000020a:       |  |     |  /-- a839                    j       e0000228 <run_test+0x54>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:75
    CHECK_DIF_OK(dif_hmac_mode_sha256_start(hmac, kHmacTransactionConfig));
e000020c:       |  |     \--|-> 4585                    li      a1,1
e000020e:       |  |        |   4605                    li      a2,1
e0000210:       |  |        |   8526                    mv      a0,s1
e0000212:       |  |        |   2db000ef                jal     ra,e0000cec <dif_hmac_mode_sha256_start>
e0000216:       +--|--------|-- c521                    beqz    a0,e000025e <run_test+0x8a>
e0000218:       |  |        |   842a                    mv      s0,a0
e000021a:       |  |        |   0009a503                lw      a0,0(s3)
e000021e:       |  |     /--|-- cd19                    beqz    a0,e000023c <run_test+0x68>
e0000220:       |  |     |  |   00002517                auipc   a0,0x2
e0000224:       |  |     |  |   12c50513                addi    a0,a0,300 # e000234c <test_start.kLogFields>
e0000228:       |  |     |  \-> 4585                    li      a1,1
e000022a:       |  |     |      8622                    mv      a2,s0
e000022c:       |  |     |      553000ef                jal     ra,e0000f7e <base_log_internal_dv>
e0000230:       |  |  /--|----- a015                    j       e0000254 <run_test+0x80>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:77
    CHECK_DIF_OK(dif_hmac_mode_hmac_start(hmac, key, kHmacTransactionConfig));
e0000232:       |  \--|--|----> 00002597                auipc   a1,0x2
e0000236:       |     |  |      9e658593                addi    a1,a1,-1562 # e0001c18 <kExpectedHmacDigest+0x48>
e000023a:       |     |  |  /-- a029                    j       e0000244 <run_test+0x70>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:75
    CHECK_DIF_OK(dif_hmac_mode_sha256_start(hmac, kHmacTransactionConfig));
e000023c:       |     |  \--|-> 00002597                auipc   a1,0x2
e0000240:       |     |     |   9c858593                addi    a1,a1,-1592 # e0001c04 <kExpectedHmacDigest+0x34>
e0000244:       |     |     \-> 0028                    addi    a0,sp,8
e0000246:       |     |         4651                    li      a2,20
e0000248:       |     |         4cc010ef                jal     ra,e0001714 <memcpy>
e000024c:       |     |         0028                    addi    a0,sp,8
e000024e:       |     |         85a2                    mv      a1,s0
e0000250:       |     |         48d000ef                jal     ra,e0000edc <base_log_internal_core>
e0000254:       |     \-------> 6531                    lui     a0,0xc
e0000256:       |               aad50513                addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e000025a:       |               3cf000ef                jal     ra,e0000e28 <test_status_set>
run_test():
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:92
  hmac_testutils_push_message(hmac, data, len);
e000025e:       \-------------> 00002597                auipc   a1,0x2
e0000262:                       8c258593                addi    a1,a1,-1854 # e0001b20 <kData>
e0000266:                       08e00613                li      a2,142
e000026a:                       8526                    mv      a0,s1
e000026c:                       14f000ef                jal     ra,e0000bba <hmac_testutils_push_message>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:93
  hmac_testutils_fifo_empty_polled(hmac);
e0000270:                       8526                    mv      a0,s1
e0000272:                       2bb1                    jal     e00007ce <hmac_testutils_fifo_empty_polled>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:94
  hmac_testutils_check_message_length(hmac, len * 8);
e0000274:                       47000593                li      a1,1136
e0000278:                       8526                    mv      a0,s1
e000027a:                       4601                    li      a2,0
e000027c:                       2951                    jal     e0000710 <hmac_testutils_check_message_length>
run_hmac():
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:85
  CHECK_DIF_OK(dif_hmac_process(hmac));
e000027e:                       8526                    mv      a0,s1
e0000280:                       347000ef                jal     ra,e0000dc6 <dif_hmac_process>
e0000284:             /-------- cd1d                    beqz    a0,e00002c2 <run_test+0xee>
e0000286:             |         842a                    mv      s0,a0
e0000288:             |         0009a503                lw      a0,0(s3)
e000028c:             |     /-- c911                    beqz    a0,e00002a0 <run_test+0xcc>
e000028e:             |     |   00002517                auipc   a0,0x2
e0000292:             |     |   0e650513                addi    a0,a0,230 # e0002374 <run_hmac.kLogFields>
e0000296:             |     |   4585                    li      a1,1
e0000298:             |     |   8622                    mv      a2,s0
e000029a:             |     |   4e5000ef                jal     ra,e0000f7e <base_log_internal_dv>
e000029e:             |  /--|-- a829                    j       e00002b8 <run_test+0xe4>
e00002a0:             |  |  \-> 00002597                auipc   a1,0x2
e00002a4:             |  |      98c58593                addi    a1,a1,-1652 # e0001c2c <kExpectedHmacDigest+0x5c>
e00002a8:             |  |      0028                    addi    a0,sp,8
e00002aa:             |  |      4651                    li      a2,20
e00002ac:             |  |      468010ef                jal     ra,e0001714 <memcpy>
e00002b0:             |  |      0028                    addi    a0,sp,8
e00002b2:             |  |      85a2                    mv      a1,s0
e00002b4:             |  |      429000ef                jal     ra,e0000edc <base_log_internal_core>
e00002b8:             |  \----> 6531                    lui     a0,0xc
e00002ba:             |         aad50513                addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00002be:             |         36b000ef                jal     ra,e0000e28 <test_status_set>
run_test():
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:96
  hmac_testutils_finish_and_check_polled(hmac, expected_digest);
e00002c2:             \-------> 8526                    mv      a0,s1
e00002c4:                       85ca                    mv      a1,s2
e00002c6:                       013000ef                jal     ra,e0000ad8 <hmac_testutils_finish_and_check_polled>
/proc/self/cwd/sw/tests/opentitan/sram_hmac_smoketest/sram_hmac_smoketest.c:97
}
e00002ca:                       49f2                    lw      s3,28(sp)
e00002cc:                       5902                    lw      s2,32(sp)
e00002ce:                       5492                    lw      s1,36(sp)
e00002d0:                       5422                    lw      s0,40(sp)
e00002d2:                       50b2                    lw      ra,44(sp)
e00002d4:                       6145                    addi    sp,sp,48
e00002d6:                       8082                    ret

e00002d8 <printf>:
printf():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:312

  return pc;
}

int printf(const char *format, ...)
{
e00002d8:                                      711d                     addi    sp,sp,-96
e00002da:                                      de06                     sw      ra,60(sp)
e00002dc:                                      dc22                     sw      s0,56(sp)
e00002de:                                      da26                     sw      s1,52(sp)
e00002e0:                                      d84a                     sw      s2,48(sp)
e00002e2:                                      d64e                     sw      s3,44(sp)
e00002e4:                                      d452                     sw      s4,40(sp)
e00002e6:                                      d256                     sw      s5,36(sp)
e00002e8:                                      d05a                     sw      s6,32(sp)
e00002ea:                                      ce5e                     sw      s7,28(sp)
e00002ec:                                      cc62                     sw      s8,24(sp)
e00002ee:                                      ca66                     sw      s9,20(sp)
e00002f0:                                      c86a                     sw      s10,16(sp)
e00002f2:                                      c66e                     sw      s11,12(sp)
e00002f4:                                      84aa                     mv      s1,a0
e00002f6:                                      4a01                     li      s4,0
e00002f8:                                      cec6                     sw      a7,92(sp)
e00002fa:                                      ccc2                     sw      a6,88(sp)
e00002fc:                                      cabe                     sw      a5,84(sp)
e00002fe:                                      c8ba                     sw      a4,80(sp)
e0000300:                                      c6b6                     sw      a3,76(sp)
e0000302:                                      c4b2                     sw      a2,72(sp)
e0000304:                                      c2ae                     sw      a1,68(sp)
e0000306:                                      04410d13                 addi    s10,sp,68
/proc/self/cwd/sw/tests/opentitan/common/utils.c:316
  int pc;
  va_list va;

  va_start(va, format);
e000030a:                                      c26a                     sw      s10,4(sp)
e000030c:                                      02500913                 li      s2,37
e0000310:                                      02d00993                 li      s3,45
e0000314:                                      03000b13                 li      s6,48
e0000318:                                      4aa5                     li      s5,9
e000031a:                                      4429                     li      s0,10
e000031c:                                      07200b93                 li      s7,114
e0000320:                                      05800c13                 li      s8,88
e0000324:                                      07800d93                 li      s11,120
e0000328:                                      40000cb7                 lui     s9,0x40000
qprint():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:249
  for (; *format != 0; ++format)
e000032c:       /----------------------------> 0004c583                 lbu     a1,0(s1)
e0000330:       |                          /-- 01258463                 beq     a1,s2,e0000338 <printf+0x60>
e0000334:       |                 /--------|-- ed99                     bnez    a1,e0000352 <printf+0x7a>
e0000336:       |  /--------------|--------|-- aa11                     j       e000044a <printf+0x172>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:255
      if (*format == '\0') break;
e0000338:       |  |              |        \-> 0014c603                 lbu     a2,1(s1)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:253
      ++format;
e000033c:       |  |              |            00148513                 addi    a0,s1,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:255
      if (*format == '\0') break;
e0000340:       |  |              |        /-- 01260863                 beq     a2,s2,e0000350 <printf+0x78>
e0000344:       |  |              |  /-----|-- 03360063                 beq     a2,s3,e0000364 <printf+0x8c>
e0000348:       |  +--------------|--|-----|-- 10060163                 beqz    a2,e000044a <printf+0x172>
e000034c:       |  |              |  |     |   4581                     li      a1,0
e000034e:       |  |              |  |  /--|-- a831                     j       e000036a <printf+0x92>
e0000350:       |  |              |  |  |  \-> 84aa                     mv      s1,a0
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e0000352:       |  |              >--|--|----> 014ca503                 lw      a0,20(s9) # 40000014 <tohost+0x3ffe000c>
e0000356:       |  |              |  |  |      02057513                 andi    a0,a0,32
e000035a:       |  |              \--|--|----- dd65                     beqz    a0,e0000352 <printf+0x7a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e000035c:       |  |                 |  |      00bca023                 sw      a1,0(s9)
qprint():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:303
      ++pc;
e0000360:       |  |                 |  |      0a05                     addi    s4,s4,1
e0000362:       |  |  /--------------|--|----- a0d5                     j       e0000446 <printf+0x16e>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:259
        ++format;
e0000364:       |  |  |              \--|----> 00248513                 addi    a0,s1,2
e0000368:       |  |  |                 |      4585                     li      a1,1
e000036a:       |  |  |                 \----> 0025e613                 ori     a2,a1,2
/proc/self/cwd/sw/tests/opentitan/common/utils.c:262
      while (*format == '0')
e000036e:       |  |  |                        fff50493                 addi    s1,a0,-1
e0000372:       |  |  |                    /-> 0014c503                 lbu     a0,1(s1)
e0000376:       |  |  |                    |   872e                     mv      a4,a1
e0000378:       |  |  |                    |   0485                     addi    s1,s1,1
e000037a:       |  |  |                    |   85b2                     mv      a1,a2
e000037c:       |  |  |                    \-- ff650be3                 beq     a0,s6,e0000372 <printf+0x9a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:267
      for ( ; *format >= '0' && *format <= '9'; ++format) {
e0000380:       |  |  |                        fd050593                 addi    a1,a0,-48
e0000384:       |  |  |                        4681                     li      a3,0
e0000386:       |  |  |                        0ff5f593                 andi    a1,a1,255
e000038a:       |  |  |                 /----- 02bae563                 bltu    s5,a1,e00003b4 <printf+0xdc>
e000038e:       |  |  |                 |      85a6                     mv      a1,s1
e0000390:       |  |  |                 |  /-> 0ff57613                 andi    a2,a0,255
e0000394:       |  |  |                 |  |   0015c503                 lbu     a0,1(a1)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:268
        width *= 10;
e0000398:       |  |  |                 |  |   028686b3                 mul     a3,a3,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:269
        width += *format - '0';
e000039c:       |  |  |                 |  |   9636                     add     a2,a2,a3
/proc/self/cwd/sw/tests/opentitan/common/utils.c:267
      for ( ; *format >= '0' && *format <= '9'; ++format) {
e000039e:       |  |  |                 |  |   00158493                 addi    s1,a1,1
e00003a2:       |  |  |                 |  |   fd050593                 addi    a1,a0,-48
e00003a6:       |  |  |                 |  |   0ff5f793                 andi    a5,a1,255
/proc/self/cwd/sw/tests/opentitan/common/utils.c:269
        width += *format - '0';
e00003aa:       |  |  |                 |  |   fd060693                 addi    a3,a2,-48
e00003ae:       |  |  |                 |  |   85a6                     mv      a1,s1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:267
      for ( ; *format >= '0' && *format <= '9'; ++format) {
e00003b0:       |  |  |                 |  \-- fe87e0e3                 bltu    a5,s0,e0000390 <printf+0xb8>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:271
      if( *format == 's' ) {
e00003b4:       |  |  |                 \--/-X 02abc463                 blt     s7,a0,e00003dc <printf+0x104>
e00003b8:       |  |  |                 /--|-- 05850563                 beq     a0,s8,e0000402 <printf+0x12a>
e00003bc:       |  |  |                 |  |   06300593                 li      a1,99
e00003c0:       |  |  |        /--------|--|-- 04b50863                 beq     a0,a1,e0000410 <printf+0x138>
e00003c4:       |  |  |        |        |  |   06400593                 li      a1,100
e00003c8:       |  |  +--------|--------|--|-- 06b51f63                 bne     a0,a1,e0000446 <printf+0x16e>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:277
        pc += qprinti (out, va_arg(va, int), 10, 1, width, pad, 'a');
e00003cc:       |  |  |        |        |  |   000d2503                 lw      a0,0(s10)
e00003d0:       |  |  |        |        |  |   0d11                     addi    s10,s10,4
e00003d2:       |  |  |        |        |  |   45a9                     li      a1,10
e00003d4:       |  |  |        |        |  |   4605                     li      a2,1
e00003d6:       |  |  |        |        |  |   06100793                 li      a5,97
e00003da:       |  |  |  /-----|--------|--|-- a0a5                     j       e0000442 <printf+0x16a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:271
      if( *format == 's' ) {
e00003dc:       |  |  |  |     |  /-----|--\-X 05b50763                 beq     a0,s11,e000042a <printf+0x152>
e00003e0:       |  |  |  |     |  |     |      07500593                 li      a1,117
e00003e4:       |  |  |  |  /--|--|-----|----- 04b50863                 beq     a0,a1,e0000434 <printf+0x15c>
e00003e8:       |  |  |  |  |  |  |     |      07300593                 li      a1,115
e00003ec:       |  |  +--|--|--|--|-----|----- 04b51d63                 bne     a0,a1,e0000446 <printf+0x16e>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:272
        register char *s = va_arg(va, char*);
e00003f0:       |  |  |  |  |  |  |     |      000d2503                 lw      a0,0(s10)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:273
        pc += qprints (out, s?s:"(null)", width, pad);
e00003f4:       |  |  |  |  |  |  |     |  /-- e509                     bnez    a0,e00003fe <printf+0x126>
e00003f6:       |  |  |  |  |  |  |     |  |   00002517                 auipc   a0,0x2
e00003fa:       |  |  |  |  |  |  |     |  |   85950513                 addi    a0,a0,-1959 # e0001c4f <kExpectedHmacDigest+0x7f>
e00003fe:       |  |  |  |  |  |  |     |  \-> 0d11                     addi    s10,s10,4
e0000400:       |  |  |  |  |  |  |     |  /-- a00d                     j       e0000422 <printf+0x14a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:289
        pc += qprinti (out, va_arg(va, uint32_t), 16, 0, width, pad, 'A');
e0000402:       |  |  |  |  |  |  |     \--|-> 000d2503                 lw      a0,0(s10)
e0000406:       |  |  |  |  |  |  |        |   0d11                     addi    s10,s10,4
e0000408:       |  |  |  |  |  |  |        |   45c1                     li      a1,16
e000040a:       |  |  |  |  |  |  |        |   04100793                 li      a5,65
e000040e:       |  |  |  |  |  |  |  /-----|-- a80d                     j       e0000440 <printf+0x168>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:293
        scr[0] = va_arg(va, int);
e0000410:       |  |  |  |  |  \--|--|-----|-> 000d2503                 lw      a0,0(s10)
e0000414:       |  |  |  |  |     |  |     |   0d11                     addi    s10,s10,4
e0000416:       |  |  |  |  |     |  |     |   00a10523                 sb      a0,10(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:294
        scr[1] = '\0';
e000041a:       |  |  |  |  |     |  |     |   000105a3                 sb      zero,11(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:295
        pc += qprints (out, scr, width, pad);
e000041e:       |  |  |  |  |     |  |     |   00a10513                 addi    a0,sp,10
e0000422:       |  |  |  |  |     |  |     \-> 85b6                     mv      a1,a3
e0000424:       |  |  |  |  |     |  |         863a                     mv      a2,a4
e0000426:       |  |  |  |  |     |  |         20f5                     jal     e0000512 <qprints>
e0000428:       |  |  |  |  |     |  |  /----- a831                     j       e0000444 <printf+0x16c>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:285
        pc += qprinti (out, va_arg(va, uint32_t), 16, 0, width, pad, 'a');
e000042a:       |  |  |  |  |     \--|--|----> 000d2503                 lw      a0,0(s10)
e000042e:       |  |  |  |  |        |  |      0d11                     addi    s10,s10,4
e0000430:       |  |  |  |  |        |  |      45c1                     li      a1,16
e0000432:       |  |  |  |  |        |  |  /-- a029                     j       e000043c <printf+0x164>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:281
        pc += qprinti (out, va_arg(va, unsigned int), 10, 0, width, pad, 'a');
e0000434:       |  |  |  |  \--------|--|--|-> 000d2503                 lw      a0,0(s10)
e0000438:       |  |  |  |           |  |  |   0d11                     addi    s10,s10,4
e000043a:       |  |  |  |           |  |  |   45a9                     li      a1,10
e000043c:       |  |  |  |           |  |  \-> 06100793                 li      a5,97
e0000440:       |  |  |  |           \--|----> 4601                     li      a2,0
e0000442:       |  |  |  \--------------|----> 2a51                     jal     e00005d6 <qprinti>
e0000444:       |  |  |                 \----> 9a2a                     add     s4,s4,a0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:249
  for (; *format != 0; ++format)
e0000446:       |  |  \----------------------> 0485                     addi    s1,s1,1
e0000448:       \--|-------------------------- b5d5                     j       e000032c <printf+0x54>
printf():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:322

  pc = qprint(0, format, va);

  va_end(va);

  return pc;
e000044a:          \-------------------------> 8552                     mv      a0,s4
e000044c:                                      4db2                     lw      s11,12(sp)
e000044e:                                      4d42                     lw      s10,16(sp)
e0000450:                                      4cd2                     lw      s9,20(sp)
e0000452:                                      4c62                     lw      s8,24(sp)
e0000454:                                      4bf2                     lw      s7,28(sp)
e0000456:                                      5b02                     lw      s6,32(sp)
e0000458:                                      5a92                     lw      s5,36(sp)
e000045a:                                      5a22                     lw      s4,40(sp)
e000045c:                                      59b2                     lw      s3,44(sp)
e000045e:                                      5942                     lw      s2,48(sp)
e0000460:                                      54d2                     lw      s1,52(sp)
e0000462:                                      5462                     lw      s0,56(sp)
e0000464:                                      50f2                     lw      ra,60(sp)
e0000466:                                      6125                     addi    sp,sp,96
e0000468:                                      8082                     ret

e000046a <uart_set_cfg>:
uart_set_cfg():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:42
void uart_set_cfg(int parity, uint16_t clk_counter) {
e000046a:       40000537                lui     a0,0x40000
e000046e:       08300613                li      a2,131
/proc/self/cwd/sw/tests/opentitan/common/utils.c:44
  *(volatile unsigned int*)(UART_REG_LCR) = 0x83; //sets 8N1 and set DLAB to 1
e0000472:       c550                    sw      a2,12(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:45
  *(volatile unsigned int*)(UART_REG_DLM) = (clk_counter >> 8) & 0xFF;
e0000474:       0085d613                srli    a2,a1,0x8
e0000478:       c150                    sw      a2,4(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:46
  *(volatile unsigned int*)(UART_REG_DLL) =  clk_counter       & 0xFF;
e000047a:       0ff5f593                andi    a1,a1,255
e000047e:       c10c                    sw      a1,0(a0)
e0000480:       0a700593                li      a1,167
/proc/self/cwd/sw/tests/opentitan/common/utils.c:47
  *(volatile unsigned int*)(UART_REG_FCR) = 0xA7; //enables 16byte FIFO and clear FIFOs
e0000484:       c50c                    sw      a1,8(a0)
e0000486:       458d                    li      a1,3
/proc/self/cwd/sw/tests/opentitan/common/utils.c:48
  *(volatile unsigned int*)(UART_REG_LCR) = 0x03; //sets 8N1 and set DLAB to 0
e0000488:       c54c                    sw      a1,12(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:50
  *(volatile unsigned int*)(UART_REG_IER) = ((*(volatile unsigned int*)(UART_REG_IER)) & 0xF0) | 0x02; // set IER (interrupt enable register) on UART
e000048a:       414c                    lw      a1,4(a0)
e000048c:       0f05f593                andi    a1,a1,240
e0000490:       0025e593                ori     a1,a1,2
e0000494:       c14c                    sw      a1,4(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:51
}
e0000496:       8082                    ret

e0000498 <external_irq_handler>:
external_irq_handler():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:338
  putchar('\n');

  return i;
}

void external_irq_handler(void)  {
e0000498:           1101                        addi    sp,sp,-32
e000049a:           ce2a                        sw      a0,28(sp)
e000049c:           cc2e                        sw      a1,24(sp)
e000049e:           ca32                        sw      a2,20(sp)
e00004a0:           c836                        sw      a3,16(sp)
e00004a2:           c63a                        sw      a4,12(sp)
e00004a4:           c43e                        sw      a5,8(sp)
e00004a6:           c242                        sw      a6,4(sp)
e00004a8:           c8200537            lui     a0,0xc8200
e00004ac:           09f00593            li      a1,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:355
  p_reg5 = (int *) 0x1040401C;

  // start of """Interrupt Service Routine"""
  
  plic_check = (int *) 0xC8200004;
  while(*plic_check != mbox_id);   //check wether the intr is the correct one
e00004b0:       /-> 4150                        lw      a2,4(a0)
e00004b2:       \-- feb61fe3            bne     a2,a1,e00004b0 <external_irq_handler+0x18>
e00004b6:           10404537            lui     a0,0x10404
/proc/self/cwd/sw/tests/opentitan/common/utils.c:358
  
  p_reg = (int *) 0x10404020;
 *p_reg = 0x00000000;        //clearing the pending interrupt signal
e00004ba:           02052023            sw      zero,32(a0) # 10404020 <tohost+0x103e4018>
e00004be:           c82005b7            lui     a1,0xc8200
e00004c2:           09f00613            li      a2,159
/proc/self/cwd/sw/tests/opentitan/common/utils.c:360
 
 *plic_check = mbox_id;      //completing interrupt
e00004c6:           c1d0                        sw      a2,4(a1)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:362
 
  a = *p_reg1;
e00004c8:           450c                        lw      a1,8(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:363
  b = *p_reg2;
e00004ca:           4910                        lw      a2,16(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:364
  c = *p_reg3;
e00004cc:           4954                        lw      a3,20(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:365
  d = *p_reg4;
e00004ce:           4d18                        lw      a4,24(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:366
  e = *p_reg5;
e00004d0:           01c52803            lw      a6,28(a0)
e00004d4:           baadc7b7            lui     a5,0xbaadc
e00004d8:           0de78793            addi    a5,a5,222 # baadc0de <fromhost+0xdaacc0ce>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:369
  
  
  if( a == 0xBAADC0DE &&  b == 0xBAADC0DE && c == 0xBAADC0DE && d == 0xBAADC0DE && e == 0xBAADC0DE){
e00004dc:           8dbd                        xor     a1,a1,a5
e00004de:           8e3d                        xor     a2,a2,a5
e00004e0:           8dd1                        or      a1,a1,a2
e00004e2:           00f6c633            xor     a2,a3,a5
e00004e6:           8dd1                        or      a1,a1,a2
e00004e8:           00f74633            xor     a2,a4,a5
e00004ec:           8dd1                        or      a1,a1,a2
e00004ee:           00f84633            xor     a2,a6,a5
e00004f2:           8dd1                        or      a1,a1,a2
e00004f4:       /-- e589                        bnez    a1,e00004fe <external_irq_handler+0x66>
e00004f6:       |   02450513            addi    a0,a0,36
e00004fa:       |   4585                        li      a1,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:371
      p_reg = (int *) 0x10404024; // completion interrupt to ariane agent
     *p_reg = 0x00000001;
e00004fc:       |   c10c                        sw      a1,0(a0)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:375
  }
  
  return;
}
e00004fe:       \-> 4812                        lw      a6,4(sp)
e0000500:           47a2                        lw      a5,8(sp)
e0000502:           4732                        lw      a4,12(sp)
e0000504:           46c2                        lw      a3,16(sp)
e0000506:           4652                        lw      a2,20(sp)
e0000508:           45e2                        lw      a1,24(sp)
e000050a:           4572                        lw      a0,28(sp)
e000050c:           6105                        addi    sp,sp,32
e000050e:           30200073            mret

e0000512 <qprints>:
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:159
  if (width > 0) {
e0000512:             /----- 02b05163           blez    a1,e0000534 <qprints+0x22>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:162
    for (ptr = string; *ptr; ++ptr) ++len;
e0000516:             |      00054683           lbu     a3,0(a0)
e000051a:          /--|----- c28d                       beqz    a3,e000053c <qprints+0x2a>
e000051c:          |  |      4781                       li      a5,0
e000051e:          |  |      00150813           addi    a6,a0,1
e0000522:          |  |  /-> 00f806b3           add     a3,a6,a5
e0000526:          |  |  |   0006c703           lbu     a4,0(a3)
e000052a:          |  |  |   00178693           addi    a3,a5,1
e000052e:          |  |  |   87b6                       mv      a5,a3
e0000530:          |  |  \-- fb6d                       bnez    a4,e0000522 <qprints+0x10>
e0000532:          |  |  /-- a031                       j       e000053e <qprints+0x2c>
e0000534:          |  \--|-> 4601                       li      a2,0
e0000536:          |     |   02000893           li      a7,32
e000053a:       /--|-----|-- a899                       j       e0000590 <qprints+0x7e>
e000053c:       |  \-----|-> 4681                       li      a3,0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:163
    if (len >= width) width = 0;
e000053e:       |        \-> 40d587b3           sub     a5,a1,a3
e0000542:       |            873e                       mv      a4,a5
e0000544:       |        /-- 00b6c363           blt     a3,a1,e000054a <qprints+0x38>
e0000548:       |        |   4701                       li      a4,0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:165
    if (pad & PAD_ZERO) padchar = '0';
e000054a:       |        \-> 00267593           andi    a1,a2,2
e000054e:       |            02000893           li      a7,32
e0000552:       |        /-- c199                       beqz    a1,e0000558 <qprints+0x46>
e0000554:       |        |   03000893           li      a7,48
/proc/self/cwd/sw/tests/opentitan/common/utils.c:167
  if (!(pad & PAD_RIGHT)) {
e0000558:       |        \-> 00167593           andi    a1,a2,1
e000055c:       |            0015b593           seqz    a1,a1
e0000560:       |            00e02633           sgtz    a2,a4
e0000564:       |            8df1                       and     a1,a1,a2
e0000566:       |  /-------- c19d                       beqz    a1,e000058c <qprints+0x7a>
e0000568:       |  |         4601                       li      a2,0
e000056a:       |  |         400005b7           lui     a1,0x40000
e000056e:       |  |         4805                       li      a6,1
e0000570:       |  |  /----> 873e                       mv      a4,a5
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e0000572:       |  |  |  /-> 49dc                       lw      a5,20(a1)
e0000574:       |  |  |  |   0207f793           andi    a5,a5,32
e0000578:       |  |  |  \-- dfed                       beqz    a5,e0000572 <qprints+0x60>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e000057a:       |  |  |      0115a023           sw      a7,0(a1) # 40000000 <tohost+0x3ffdfff8>
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:170
      ++pc;
e000057e:       |  |  |      0605                       addi    a2,a2,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:168
    for ( ; width > 0; --width) {
e0000580:       |  |  |      fff70793           addi    a5,a4,-1 # 3fffffff <tohost+0x3ffdfff7>
e0000584:       |  |  \----- fee846e3           blt     a6,a4,e0000570 <qprints+0x5e>
e0000588:       |  |         85be                       mv      a1,a5
e000058a:       +--|-------- a019                       j       e0000590 <qprints+0x7e>
e000058c:       |  \-------> 4601                       li      a2,0
e000058e:       |            85ba                       mv      a1,a4
/proc/self/cwd/sw/tests/opentitan/common/utils.c:173
  for ( ; *string ; ++string) {
e0000590:       \----------> 00054783           lbu     a5,0(a0)
e0000594:             /----- cf99                       beqz    a5,e00005b2 <qprints+0xa0>
e0000596:             |      40000737           lui     a4,0x40000
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e000059a:             |  /-> 4b54                       lw      a3,20(a4)
e000059c:             |  |   0206f693           andi    a3,a3,32
e00005a0:             |  +-- deed                       beqz    a3,e000059a <qprints+0x88>
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:174
    qprintchar (out, *string);
e00005a2:             |  |   0ff7f693           andi    a3,a5,255
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e00005a6:             |  |   c314                       sw      a3,0(a4)
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:173
  for ( ; *string ; ++string) {
e00005a8:             |  |   00154783           lbu     a5,1(a0)
e00005ac:             |  |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:175
    ++pc;
e00005ae:             |  |   0605                       addi    a2,a2,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:173
  for ( ; *string ; ++string) {
e00005b0:             |  \-- f7ed                       bnez    a5,e000059a <qprints+0x88>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:177
  for ( ; width > 0; --width) {
e00005b2:          /--\----X 02b05063           blez    a1,e00005d2 <qprints+0xc0>
e00005b6:          |         00c58533           add     a0,a1,a2
e00005ba:          |         400005b7           lui     a1,0x40000
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e00005be:          |     /-> 49d4                       lw      a3,20(a1)
e00005c0:          |     |   0206f693           andi    a3,a3,32
e00005c4:          |     +-- deed                       beqz    a3,e00005be <qprints+0xac>
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:179
    ++pc;
e00005c6:          |     |   0605                       addi    a2,a2,1
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e00005c8:          |     |   0115a023           sw      a7,0(a1) # 40000000 <tohost+0x3ffdfff8>
qprints():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:177
  for ( ; width > 0; --width) {
e00005cc:          |     \-- fea619e3           bne     a2,a0,e00005be <qprints+0xac>
e00005d0:          |         862a                       mv      a2,a0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:182
  return pc;
e00005d2:          \-------> 8532                       mv      a0,a2
e00005d4:                    8082                       ret

e00005d6 <qprinti>:
qprinti():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:186
{
e00005d6:                          7179                 addi    sp,sp,-48
e00005d8:                          d606                 sw      ra,44(sp)
e00005da:                          d422                 sw      s0,40(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:192
  if (i == 0)
e00005dc:             /----------- cd39                 beqz    a0,e000063a <qprinti+0x64>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:199
  if (sg && b == 10 && i < 0)
e00005de:             |            00c03633             snez    a2,a2
e00005e2:             |            ff658413             addi    s0,a1,-10
e00005e6:             |            00143413             seqz    s0,s0
e00005ea:             |            8e61                 and     a2,a2,s0
e00005ec:             |            00052413             slti    s0,a0,0
e00005f0:             |            00867833             and     a6,a2,s0
e00005f4:             |        /-- 00080463             beqz    a6,e00005fc <qprinti+0x26>
e00005f8:             |        |   40a00533             neg     a0,a0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:205
  s = print_buf + PRINT_BUF_LEN-1;
e00005fc:             |        \-> 02710613             addi    a2,sp,39
e0000600:             |            4441                 li      s0,16
/proc/self/cwd/sw/tests/opentitan/common/utils.c:206
  *s = '\0';
e0000602:             |            020103a3             sb      zero,39(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:209
  if(b == 16) {
e0000606:             |  /-------- 04859563             bne     a1,s0,e0000650 <qprinti+0x7a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:211
    while (u) {
e000060a:       /-----|--|-------- c961                 beqz    a0,e00006da <qprinti+0x104>
e000060c:       |     |  |         0c678793             addi    a5,a5,198
e0000610:       |     |  |         48a5                 li      a7,9
e0000612:       |     |  |         42c1                 li      t0,16
e0000614:       |     |  |  /----> 842a                 mv      s0,a0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:212
      int t = u & 0xF;
e0000616:       |     |  |  |      893d                 andi    a0,a0,15
e0000618:       |     |  |  |      85be                 mv      a1,a5
/proc/self/cwd/sw/tests/opentitan/common/utils.c:214
      if (t >= 10)
e000061a:       |     |  |  |  /-- 00a8e363             bltu    a7,a0,e0000620 <qprinti+0x4a>
e000061e:       |     |  |  |  |   4581                 li      a1,0
e0000620:       |     |  |  |  \-> 952e                 add     a0,a0,a1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:217
      *--s = t + '0';
e0000622:       |     |  |  |      03050513             addi    a0,a0,48 # 40000030 <tohost+0x3ffe0028>
e0000626:       |     |  |  |      fff60593             addi    a1,a2,-1
e000062a:       |     |  |  |      fea60fa3             sb      a0,-1(a2)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:218
      u >>= 4;
e000062e:       |     |  |  |      00445513             srli    a0,s0,0x4
e0000632:       |     |  |  |      862e                 mv      a2,a1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:211
    while (u) {
e0000634:       |     |  |  \----- fe5470e3             bgeu    s0,t0,e0000614 <qprinti+0x3e>
e0000638:       |     |  |  /----- a8b5                 j       e00006b4 <qprinti+0xde>
e000063a:       |     \--|--|----> 03000513             li      a0,48
/proc/self/cwd/sw/tests/opentitan/common/utils.c:194
    print_buf[0] = '0';
e000063e:       |        |  |      00a10423             sb      a0,8(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:195
    print_buf[1] = '\0';
e0000642:       |        |  |      000104a3             sb      zero,9(sp)
/proc/self/cwd/sw/tests/opentitan/common/utils.c:196
    return qprints (out, print_buf, width, pad);
e0000646:       |        |  |      0028                 addi    a0,sp,8
e0000648:       |        |  |      85b6                 mv      a1,a3
e000064a:       |        |  |      863a                 mv      a2,a4
e000064c:       |        |  |      35d9                 jal     e0000512 <qprints>
e000064e:       |  /-----|--|----- a86d                 j       e0000708 <qprinti+0x132>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:222
    while (u) {
e0000650:       +--|-----\--|----X c549                 beqz    a0,e00006da <qprinti+0x104>
e0000652:       |  |        |      1999a5b7             lui     a1,0x1999a
e0000656:       |  |        |      99958893             addi    a7,a1,-1639 # 19999999 <tohost+0x19979991>
e000065a:       |  |        |      00002317             auipc   t1,0x2
e000065e:       |  |        |      c3e30313             addi    t1,t1,-962 # e0002298 <remu10_table>
e0000662:       |  |        |      52d9                 li      t0,-10
remu10():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:134
  n = (0x19999999 * n + (n >> 1) + (n >> 3)) >> 28;
e0000664:       |  |        |  /-> 031505b3             mul     a1,a0,a7
e0000668:       |  |        |  |   00155413             srli    s0,a0,0x1
e000066c:       |  |        |  |   95a2                 add     a1,a1,s0
e000066e:       |  |        |  |   00355793             srli    a5,a0,0x3
e0000672:       |  |        |  |   95be                 add     a1,a1,a5
e0000674:       |  |        |  |   81f1                 srli    a1,a1,0x1c
/proc/self/cwd/sw/tests/opentitan/common/utils.c:135
  return remu10_table[n];
e0000676:       |  |        |  |   959a                 add     a1,a1,t1
e0000678:       |  |        |  |   00058583             lb      a1,0(a1)
qprinti():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:223
      *--s = remu10(u) + '0';
e000067c:       |  |        |  |   03058793             addi    a5,a1,48
divu10():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:118
  q = (n >> 1) + (n >> 2);
e0000680:       |  |        |  |   00255593             srli    a1,a0,0x2
e0000684:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:119
  q = q + (q >> 4);
e0000686:       |  |        |  |   0045d413             srli    s0,a1,0x4
e000068a:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:120
  q = q + (q >> 8);
e000068c:       |  |        |  |   0085d413             srli    s0,a1,0x8
e0000690:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:121
  q = q + (q >> 16);
e0000692:       |  |        |  |   0105d413             srli    s0,a1,0x10
e0000696:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:122
  q = q >> 3;
e0000698:       |  |        |  |   0035d413             srli    s0,a1,0x3
/proc/self/cwd/sw/tests/opentitan/common/utils.c:123
  r = n - q * 10;
e000069c:       |  |        |  |   025405b3             mul     a1,s0,t0
e00006a0:       |  |        |  |   952e                 add     a0,a0,a1
qprinti():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:223
      *--s = remu10(u) + '0';
e00006a2:       |  |        |  |   fff60593             addi    a1,a2,-1
divu10():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:125
  return q + ((r + 6) >> 4);
e00006a6:       |  |        |  |   0519                 addi    a0,a0,6
e00006a8:       |  |        |  |   8111                 srli    a0,a0,0x4
e00006aa:       |  |        |  |   9522                 add     a0,a0,s0
qprinti():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:223
      *--s = remu10(u) + '0';
e00006ac:       |  |        |  |   fef60fa3             sb      a5,-1(a2)
e00006b0:       |  |        |  |   862e                 mv      a2,a1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:222
    while (u) {
e00006b2:       |  |        |  \-- f94d                 bnez    a0,e0000664 <qprinti+0x8e>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:228
  if (neg) {
e00006b4:       |  |  /-----\----X 02080663             beqz    a6,e00006e0 <qprinti+0x10a>
/proc/self/cwd/sw/tests/opentitan/common/utils.c:229
    if( width && (pad & PAD_ZERO) )
e00006b8:       |  |  |     /----> 0016b513             seqz    a0,a3
e00006bc:       |  |  |     |      00277613             andi    a2,a4,2
e00006c0:       |  |  |     |      00163613             seqz    a2,a2
e00006c4:       |  |  |     |      8d51                 or      a0,a0,a2
e00006c6:       |  |  |     |  /-- cd19                 beqz    a0,e00006e4 <qprinti+0x10e>
e00006c8:       |  |  |     |  |   4401                 li      s0,0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:237
      *--s = '-';
e00006ca:       |  |  |     |  |   fff58513             addi    a0,a1,-1
e00006ce:       |  |  |     |  |   02d00613             li      a2,45
e00006d2:       |  |  |     |  |   fec58fa3             sb      a2,-1(a1)
e00006d6:       |  |  |     |  |   85aa                 mv      a1,a0
e00006d8:       |  |  |  /--|--|-- a01d                 j       e00006fe <qprinti+0x128>
e00006da:       \--|--|--|--|--|-> 85b2                 mv      a1,a2
/proc/self/cwd/sw/tests/opentitan/common/utils.c:228
  if (neg) {
e00006dc:          |  |  |  \--|-- fc081ee3             bnez    a6,e00006b8 <qprinti+0xe2>
e00006e0:          |  \--|-----|-> 4401                 li      s0,0
e00006e2:          |     +-----|-- a831                 j       e00006fe <qprinti+0x128>
e00006e4:          |     |     \-> 40000537             lui     a0,0x40000
uart_sendchar():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e00006e8:          |     |     /-> 4950                 lw      a2,20(a0)
e00006ea:          |     |     |   02067613             andi    a2,a2,32
e00006ee:          |     |     \-- de6d                 beqz    a2,e00006e8 <qprinti+0x112>
e00006f0:          |     |         40000537             lui     a0,0x40000
e00006f4:          |     |         02d00613             li      a2,45
/proc/self/cwd/sw/tests/opentitan/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e00006f8:          |     |         c110                 sw      a2,0(a0)
qprinti():
/proc/self/cwd/sw/tests/opentitan/common/utils.c:233
      --width;
e00006fa:          |     |         16fd                 addi    a3,a3,-1
e00006fc:          |     |         4405                 li      s0,1
/proc/self/cwd/sw/tests/opentitan/common/utils.c:240
  return pc + qprints (out, s, width, pad);
e00006fe:          |     \-------> 852e                 mv      a0,a1
e0000700:          |               85b6                 mv      a1,a3
e0000702:          |               863a                 mv      a2,a4
e0000704:          |               3539                 jal     e0000512 <qprints>
e0000706:          |               9522                 add     a0,a0,s0
/proc/self/cwd/sw/tests/opentitan/common/utils.c:241
}
e0000708:          \-------------> 5422                 lw      s0,40(sp)
e000070a:                          50b2                 lw      ra,44(sp)
e000070c:                          6145                 addi    sp,sp,48
e000070e:                          8082                 ret

e0000710 <hmac_testutils_check_message_length>:
hmac_testutils_check_message_length():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:60
            0xBDCCB6C7,
        },
};

void hmac_testutils_check_message_length(const dif_hmac_t *hmac,
                                         uint64_t expected_sent_bits) {
e0000710:                 7139                  addi    sp,sp,-64
e0000712:                 de06                  sw      ra,60(sp)
e0000714:                 dc22                  sw      s0,56(sp)
e0000716:                 da26                  sw      s1,52(sp)
e0000718:                 d84a                  sw      s2,48(sp)
e000071a:                 d64e                  sw      s3,44(sp)
e000071c:                 d452                  sw      s4,40(sp)
e000071e:                 89b2                  mv      s3,a2
e0000720:                 892e                  mv      s2,a1
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:62
  uint64_t sent_bits;
  CHECK_DIF_OK(dif_hmac_get_message_length(hmac, &sent_bits));
e0000722:                 100c                  addi    a1,sp,32
e0000724:                 2551                  jal     e0000da8 <dif_hmac_get_message_length>
e0000726:                 00002a17              auipc   s4,0x2
e000072a:                 b4ea0a13              addi    s4,s4,-1202 # e0002274 <kDeviceLogBypassUartAddress>
e000072e:       /-------- cd15                  beqz    a0,e000076a <hmac_testutils_check_message_length+0x5a>
e0000730:       |         842a                  mv      s0,a0
e0000732:       |         000a2503              lw      a0,0(s4)
e0000736:       |     /-- c911                  beqz    a0,e000074a <hmac_testutils_check_message_length+0x3a>
e0000738:       |     |   00002517              auipc   a0,0x2
e000073c:       |     |   c5050513              addi    a0,a0,-944 # e0002388 <hmac_testutils_check_message_length.kLogFields>
e0000740:       |     |   4585                  li      a1,1
e0000742:       |     |   8622                  mv      a2,s0
e0000744:       |     |   03b000ef              jal     ra,e0000f7e <base_log_internal_dv>
e0000748:       |  /--|-- a829                  j       e0000762 <hmac_testutils_check_message_length+0x52>
e000074a:       |  |  \-> 00001597              auipc   a1,0x1
e000074e:       |  |      74a58593              addi    a1,a1,1866 # e0001e94 <kExpectedHmacDigest+0x2c4>
e0000752:       |  |      0028                  addi    a0,sp,8
e0000754:       |  |      4651                  li      a2,20
e0000756:       |  |      7bf000ef              jal     ra,e0001714 <memcpy>
e000075a:       |  |      0028                  addi    a0,sp,8
e000075c:       |  |      85a2                  mv      a1,s0
e000075e:       |  |      77e000ef              jal     ra,e0000edc <base_log_internal_core>
e0000762:       |  \----> 6531                  lui     a0,0xc
e0000764:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000768:       |         25c1                  jal     e0000e28 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:66

  // 64bit formatting is not supported, so split into hi and lo hex 32bit
  // values. These should appear as 64bit hex values in the debug output.
  CHECK(expected_sent_bits == sent_bits,
e000076a:       \-------> 5402                  lw      s0,32(sp)
e000076c:                 5492                  lw      s1,36(sp)
e000076e:                 01244533              xor     a0,s0,s2
e0000772:                 0134c5b3              xor     a1,s1,s3
e0000776:                 8d4d                  or      a0,a0,a1
e0000778:       /-------- c139                  beqz    a0,e00007be <hmac_testutils_check_message_length+0xae>
e000077a:       |         000a2503              lw      a0,0(s4)
e000077e:       |     /-- cd09                  beqz    a0,e0000798 <hmac_testutils_check_message_length+0x88>
e0000780:       |     |   00002517              auipc   a0,0x2
e0000784:       |     |   c1c50513              addi    a0,a0,-996 # e000239c <hmac_testutils_check_message_length.kLogFields.2>
e0000788:       |     |   4591                  li      a1,4
e000078a:       |     |   864e                  mv      a2,s3
e000078c:       |     |   86ca                  mv      a3,s2
e000078e:       |     |   8726                  mv      a4,s1
e0000790:       |     |   87a2                  mv      a5,s0
e0000792:       |     |   7ec000ef              jal     ra,e0000f7e <base_log_internal_dv>
e0000796:       |  /--|-- a005                  j       e00007b6 <hmac_testutils_check_message_length+0xa6>
e0000798:       |  |  \-> 00001597              auipc   a1,0x1
e000079c:       |  |      71058593              addi    a1,a1,1808 # e0001ea8 <kExpectedHmacDigest+0x2d8>
e00007a0:       |  |      0028                  addi    a0,sp,8
e00007a2:       |  |      4651                  li      a2,20
e00007a4:       |  |      771000ef              jal     ra,e0001714 <memcpy>
e00007a8:       |  |      0028                  addi    a0,sp,8
e00007aa:       |  |      85ce                  mv      a1,s3
e00007ac:       |  |      864a                  mv      a2,s2
e00007ae:       |  |      86a6                  mv      a3,s1
e00007b0:       |  |      8722                  mv      a4,s0
e00007b2:       |  |      72a000ef              jal     ra,e0000edc <base_log_internal_core>
e00007b6:       |  \----> 6531                  lui     a0,0xc
e00007b8:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00007bc:       |         25b5                  jal     e0000e28 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:71
        "Message length mismatch. "
        "Expected 0x%08x%08x bits but got 0x%08x%08x bits.",
        (uint32_t)(expected_sent_bits >> 32), (uint32_t)expected_sent_bits,
        (uint32_t)(sent_bits >> 32), (uint32_t)sent_bits);
}
e00007be:       \-------> 5a22                  lw      s4,40(sp)
e00007c0:                 59b2                  lw      s3,44(sp)
e00007c2:                 5942                  lw      s2,48(sp)
e00007c4:                 54d2                  lw      s1,52(sp)
e00007c6:                 5462                  lw      s0,56(sp)
e00007c8:                 50f2                  lw      ra,60(sp)
e00007ca:                 6121                  addi    sp,sp,64
e00007cc:                 8082                  ret

e00007ce <hmac_testutils_fifo_empty_polled>:
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:82
  uint32_t fifo_depth;
  CHECK_DIF_OK(dif_hmac_fifo_count_entries(hmac, &fifo_depth));
  return fifo_depth == 0;
}

void hmac_testutils_fifo_empty_polled(const dif_hmac_t *hmac) {
e00007ce:                    711d                       addi    sp,sp,-96
e00007d0:                    ce86                       sw      ra,92(sp)
e00007d2:                    cca2                       sw      s0,88(sp)
e00007d4:                    caa6                       sw      s1,84(sp)
e00007d6:                    c8ca                       sw      s2,80(sp)
e00007d8:                    c6ce                       sw      s3,76(sp)
e00007da:                    c4d2                       sw      s4,72(sp)
e00007dc:                    c2d6                       sw      s5,68(sp)
e00007de:                    c0da                       sw      s6,64(sp)
e00007e0:                    de5e                       sw      s7,60(sp)
e00007e2:                    dc62                       sw      s8,56(sp)
e00007e4:                    da66                       sw      s9,52(sp)
e00007e6:                    d86a                       sw      s10,48(sp)
e00007e8:                    d66e                       sw      s11,44(sp)
e00007ea:                    00002597           auipc   a1,0x2
e00007ee:                    a7e58593           addi    a1,a1,-1410 # e0002268 <kClockFreqCpuHz>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:83
  IBEX_SPIN_FOR(check_fifo_empty(hmac), HMAC_TESTUTILS_FIFO_EMPTY_USEC);
e00007f2:                    0045a903           lw      s2,4(a1)
e00007f6:                    0005aa03           lw      s4,0(a1)
e00007fa:                    8aaa                       mv      s5,a0
e00007fc:                    055d5537           lui     a0,0x55d5
e0000800:                    a8050513           addi    a0,a0,-1408 # 55d4a80 <tohost+0x55b4a78>
e0000804:                    c62a                       sw      a0,12(sp)
e0000806:                    4581                       li      a1,0
e0000808:                    8652                       mv      a2,s4
e000080a:                    86ca                       mv      a3,s2
e000080c:                    4701                       li      a4,0
e000080e:                    657000ef           jal     ra,e0001664 <udiv64_slow>
e0000812:                    0505                       addi    a0,a0,1
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
 * @param timeout_usec Timeout in microseconds.
 * @return The initialized timeout value.
 */
inline ibex_timeout_t ibex_timeout_init(uint32_t timeout_usec) {
  return (ibex_timeout_t){
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
e0000814:                    02a905b3           mul     a1,s2,a0
e0000818:                    02aa3633           mulhu   a2,s4,a0
e000081c:                    95b2                       add     a1,a1,a2
e000081e:                    02aa0533           mul     a0,s4,a0
e0000822:                    000f4637           lui     a2,0xf4
e0000826:                    24060613           addi    a2,a2,576 # f4240 <tohost+0xd4238>
e000082a:                    4681                       li      a3,0
e000082c:                    4701                       li      a4,0
e000082e:                    637000ef           jal     ra,e0001664 <udiv64_slow>
e0000832:                    00002617           auipc   a2,0x2
e0000836:                    a4260613           addi    a2,a2,-1470 # e0002274 <kDeviceLogBypassUartAddress>
e000083a:                    4210                       lw      a2,0(a2)
e000083c:                    8baa                       mv      s7,a0
e000083e:                    842e                       mv      s0,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e0000840:                /-> b8002573           csrr    a0,mcycleh
e0000844:                |   b00025f3           csrr    a1,mcycle
e0000848:                |   b80026f3           csrr    a3,mcycleh
e000084c:                \-- fed51ae3           bne     a0,a3,e0000840 <hmac_testutils_fifo_empty_polled+0x72>
e0000850:                    00163c93           seqz    s9,a2
e0000854:                    40b00c33           neg     s8,a1
e0000858:                    00b035b3           snez    a1,a1
e000085c:                    952e                       add     a0,a0,a1
e000085e:                    40a009b3           neg     s3,a0
e0000862:                    00001517           auipc   a0,0x1
e0000866:                    65a50513           addi    a0,a0,1626 # e0001ebc <kExpectedHmacDigest+0x2ec>
e000086a:                    c02a                       sw      a0,0(sp)
e000086c:                    6531                       lui     a0,0xc
e000086e:                    aad50d93           addi    s11,a0,-1363 # baad <_stack_len+0x3aad>
e0000872:                    00002517           auipc   a0,0x2
e0000876:                    b3e50513           addi    a0,a0,-1218 # e00023b0 <hmac_testutils_fifo_empty_polled.kLogFields>
e000087a:                    c42a                       sw      a0,8(sp)
e000087c:                    00001517           auipc   a0,0x1
e0000880:                    6a450513           addi    a0,a0,1700 # e0001f20 <kExpectedHmacDigest+0x350>
e0000884:                    c22a                       sw      a0,4(sp)
e0000886:                    00002d17           auipc   s10,0x2
e000088a:                    b8ed0d13           addi    s10,s10,-1138 # e0002414 <check_fifo_empty.kLogFields>
check_fifo_empty():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:78
  CHECK_DIF_OK(dif_hmac_fifo_count_entries(hmac, &fifo_depth));
e000088e:       /----------> 102c                       addi    a1,sp,40
e0000890:       |            8556                       mv      a0,s5
e0000892:       |            29e5                       jal     e0000d8a <dif_hmac_fifo_count_entries>
e0000894:       |  /-------- c11d                       beqz    a0,e00008ba <hmac_testutils_fifo_empty_polled+0xec>
e0000896:       |  |         84aa                       mv      s1,a0
e0000898:       |  |     /-- 000c9763           bnez    s9,e00008a6 <hmac_testutils_fifo_empty_polled+0xd8>
e000089c:       |  |     |   4585                       li      a1,1
e000089e:       |  |     |   856a                       mv      a0,s10
e00008a0:       |  |     |   8626                       mv      a2,s1
e00008a2:       |  |     |   2df1                       jal     e0000f7e <base_log_internal_dv>
e00008a4:       |  |  /--|-- a809                       j       e00008b6 <hmac_testutils_fifo_empty_polled+0xe8>
e00008a6:       |  |  |  \-> 0808                       addi    a0,sp,16
e00008a8:       |  |  |      4651                       li      a2,20
e00008aa:       |  |  |      4592                       lw      a1,4(sp)
e00008ac:       |  |  |      669000ef           jal     ra,e0001714 <memcpy>
e00008b0:       |  |  |      0808                       addi    a0,sp,16
e00008b2:       |  |  |      85a6                       mv      a1,s1
e00008b4:       |  |  |      2525                       jal     e0000edc <base_log_internal_core>
e00008b6:       |  |  \----> 856e                       mv      a0,s11
e00008b8:       |  |         2b85                       jal     e0000e28 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:79
  return fifo_depth == 0;
e00008ba:       |  \-------> 5522                       lw      a0,40(sp)
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:83
  IBEX_SPIN_FOR(check_fifo_empty(hmac), HMAC_TESTUTILS_FIFO_EMPTY_USEC);
e00008bc:       |  /-------- c93d                       beqz    a0,e0000932 <hmac_testutils_fifo_empty_polled+0x164>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
e00008be:       |  |     /-> b80025f3           csrr    a1,mcycleh
e00008c2:       |  |     |   b0002573           csrr    a0,mcycle
e00008c6:       |  |     |   b8002673           csrr    a2,mcycleh
e00008ca:       |  |     \-- fec59ae3           bne     a1,a2,e00008be <hmac_testutils_fifo_empty_polled+0xf0>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e00008ce:       |  |         9562                       add     a0,a0,s8
e00008d0:       |  |         01853633           sltu    a2,a0,s8
e00008d4:       |  |         964e                       add     a2,a2,s3
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
 *
 * @param timeout Holds the counter start value.
 * @return True if the timeout has expired and false otherwise.
 */
inline bool ibex_timeout_check(const ibex_timeout_t *timeout) {
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
e00008d6:       |  |         95b2                       add     a1,a1,a2
e00008d8:       |  |  /----- 00858563           beq     a1,s0,e00008e2 <hmac_testutils_fifo_empty_polled+0x114>
e00008dc:       |  |  |      00b43533           sltu    a0,s0,a1
e00008e0:       |  |  |  /-- a019                       j       e00008e6 <hmac_testutils_fifo_empty_polled+0x118>
e00008e2:       |  |  \--|-> 00abb533           sltu    a0,s7,a0
e00008e6:       |  |     \-> 00154513           xori    a0,a0,1
hmac_testutils_fifo_empty_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:83
e00008ea:       +--|-------- f155                       bnez    a0,e000088e <hmac_testutils_fifo_empty_polled+0xc0>
e00008ec:       |  |         4532                       lw      a0,12(sp)
e00008ee:       |  |         4581                       li      a1,0
e00008f0:       |  |         8652                       mv      a2,s4
e00008f2:       |  |         86ca                       mv      a3,s2
e00008f4:       |  |         4701                       li      a4,0
e00008f6:       |  |         56f000ef           jal     ra,e0001664 <udiv64_slow>
e00008fa:       |  |         00150493           addi    s1,a0,1
e00008fe:       |  |         00a4b533           sltu    a0,s1,a0
e0000902:       |  |         00a58b33           add     s6,a1,a0
e0000906:       |  |     /-- 000c9963           bnez    s9,e0000918 <hmac_testutils_fifo_empty_polled+0x14a>
e000090a:       |  |     |   4589                       li      a1,2
e000090c:       |  |     |   4522                       lw      a0,8(sp)
e000090e:       |  |     |   8626                       mv      a2,s1
e0000910:       |  |     |   86da                       mv      a3,s6
e0000912:       |  |     |   875e                       mv      a4,s7
e0000914:       |  |     |   25ad                       jal     e0000f7e <base_log_internal_dv>
e0000916:       |  |  /--|-- a819                       j       e000092c <hmac_testutils_fifo_empty_polled+0x15e>
e0000918:       |  |  |  \-> 0808                       addi    a0,sp,16
e000091a:       |  |  |      4651                       li      a2,20
e000091c:       |  |  |      4582                       lw      a1,0(sp)
e000091e:       |  |  |      5f7000ef           jal     ra,e0001714 <memcpy>
e0000922:       |  |  |      0808                       addi    a0,sp,16
e0000924:       |  |  |      8626                       mv      a2,s1
e0000926:       |  |  |      86da                       mv      a3,s6
e0000928:       |  |  |      875e                       mv      a4,s7
e000092a:       |  |  |      2b4d                       jal     e0000edc <base_log_internal_core>
e000092c:       |  |  \----> 856e                       mv      a0,s11
e000092e:       |  |         29ed                       jal     e0000e28 <test_status_set>
e0000930:       \--|-------- bfb9                       j       e000088e <hmac_testutils_fifo_empty_polled+0xc0>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:84
}
e0000932:          \-------> 5db2                       lw      s11,44(sp)
e0000934:                    5d42                       lw      s10,48(sp)
e0000936:                    5cd2                       lw      s9,52(sp)
e0000938:                    5c62                       lw      s8,56(sp)
e000093a:                    5bf2                       lw      s7,60(sp)
e000093c:                    4b06                       lw      s6,64(sp)
e000093e:                    4a96                       lw      s5,68(sp)
e0000940:                    4a26                       lw      s4,72(sp)
e0000942:                    49b6                       lw      s3,76(sp)
e0000944:                    4946                       lw      s2,80(sp)
e0000946:                    44d6                       lw      s1,84(sp)
e0000948:                    4466                       lw      s0,88(sp)
e000094a:                    40f6                       lw      ra,92(sp)
e000094c:                    6125                       addi    sp,sp,96
e000094e:                    8082                       ret

e0000950 <hmac_testutils_finish_polled>:
hmac_testutils_finish_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:95

  return res == kDifOk;
}

void hmac_testutils_finish_polled(const dif_hmac_t *hmac,
                                  dif_hmac_digest_t *digest_out) {
e0000950:                       7159                    addi    sp,sp,-112
e0000952:                       d686                    sw      ra,108(sp)
e0000954:                       d4a2                    sw      s0,104(sp)
e0000956:                       d2a6                    sw      s1,100(sp)
e0000958:                       d0ca                    sw      s2,96(sp)
e000095a:                       cece                    sw      s3,92(sp)
e000095c:                       ccd2                    sw      s4,88(sp)
e000095e:                       cad6                    sw      s5,84(sp)
e0000960:                       c8da                    sw      s6,80(sp)
e0000962:                       c6de                    sw      s7,76(sp)
e0000964:                       c4e2                    sw      s8,72(sp)
e0000966:                       c2e6                    sw      s9,68(sp)
e0000968:                       c0ea                    sw      s10,64(sp)
e000096a:                       de6e                    sw      s11,60(sp)
e000096c:                       00002617                auipc   a2,0x2
e0000970:                       8fc60613                addi    a2,a2,-1796 # e0002268 <kClockFreqCpuHz>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:96
  IBEX_SPIN_FOR(check_finished(hmac, digest_out),
e0000974:                       4240                    lw      s0,4(a2)
e0000976:                       4204                    lw      s1,0(a2)
e0000978:                       8aae                    mv      s5,a1
e000097a:                       8b2a                    mv      s6,a0
e000097c:                       160dc537                lui     a0,0x160dc
e0000980:                       08050513                addi    a0,a0,128 # 160dc080 <tohost+0x160bc078>
e0000984:                       ce2a                    sw      a0,28(sp)
e0000986:                       4581                    li      a1,0
e0000988:                       8626                    mv      a2,s1
e000098a:                       86a2                    mv      a3,s0
e000098c:                       4701                    li      a4,0
e000098e:                       4d7000ef                jal     ra,e0001664 <udiv64_slow>
e0000992:                       0505                    addi    a0,a0,1
e0000994:                       d222                    sw      s0,36(sp)
ibex_timeout_init():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:172
      .cycles = udiv64_slow(kClockFreqCpuHz * timeout_usec, 1000000, NULL),
e0000996:                       02a405b3                mul     a1,s0,a0
e000099a:                       02a4b633                mulhu   a2,s1,a0
e000099e:                       95b2                    add     a1,a1,a2
e00009a0:                       d026                    sw      s1,32(sp)
e00009a2:                       02a48533                mul     a0,s1,a0
e00009a6:                       000f4637                lui     a2,0xf4
e00009aa:                       24060613                addi    a2,a2,576 # f4240 <tohost+0xd4238>
e00009ae:                       4681                    li      a3,0
e00009b0:                       4701                    li      a4,0
e00009b2:                       4b3000ef                jal     ra,e0001664 <udiv64_slow>
e00009b6:                       00002617                auipc   a2,0x2
e00009ba:                       8be60613                addi    a2,a2,-1858 # e0002274 <kDeviceLogBypassUartAddress>
e00009be:                       4210                    lw      a2,0(a2)
e00009c0:                       8c2a                    mv      s8,a0
e00009c2:                       8cae                    mv      s9,a1
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
  asm volatile(
e00009c4:                   /-> b8002573                csrr    a0,mcycleh
e00009c8:                   |   b00025f3                csrr    a1,mcycle
e00009cc:                   |   b80026f3                csrr    a3,mcycleh
e00009d0:                   \-- fed51ae3                bne     a0,a3,e00009c4 <hmac_testutils_finish_polled+0x74>
e00009d4:                       00163d93                seqz    s11,a2
e00009d8:                       40b00a33                neg     s4,a1
e00009dc:                       00b035b3                snez    a1,a1
e00009e0:                       952e                    add     a0,a0,a1
e00009e2:                       40a00933                neg     s2,a0
e00009e6:                       49b9                    li      s3,14
e00009e8:                       00001517                auipc   a0,0x1
e00009ec:                       4e850513                addi    a0,a0,1256 # e0001ed0 <kExpectedHmacDigest+0x300>
e00009f0:                       c82a                    sw      a0,16(sp)
e00009f2:                       6531                    lui     a0,0xc
e00009f4:                       aad50d13                addi    s10,a0,-1363 # baad <_stack_len+0x3aad>
e00009f8:                       00002517                auipc   a0,0x2
e00009fc:                       9cc50513                addi    a0,a0,-1588 # e00023c4 <hmac_testutils_finish_polled.kLogFields>
e0000a00:                       cc2a                    sw      a0,24(sp)
e0000a02:                       00001517                auipc   a0,0x1
e0000a06:                       53250513                addi    a0,a0,1330 # e0001f34 <kExpectedHmacDigest+0x364>
e0000a0a:                       c62a                    sw      a0,12(sp)
e0000a0c:                       00002517                auipc   a0,0x2
e0000a10:                       a1c50513                addi    a0,a0,-1508 # e0002428 <check_finished.kLogFields>
e0000a14:                       ca2a                    sw      a0,20(sp)
check_finished():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:88
  dif_result_t res = dif_hmac_finish(hmac, digest_out);
e0000a16:       /-------------> 855a                    mv      a0,s6
e0000a18:       |               85d6                    mv      a1,s5
e0000a1a:       |               26c1                    jal     e0000dda <dif_hmac_finish>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:89
  CHECK(res == kDifOk || res == kDifUnavailable, "HMAC error = %d", res);
e0000a1c:       |     /-------- 03350563                beq     a0,s3,e0000a46 <hmac_testutils_finish_polled+0xf6>
e0000a20:       |     |         8baa                    mv      s7,a0
e0000a22:       |  /--|-------- cd41                    beqz    a0,e0000aba <hmac_testutils_finish_polled+0x16a>
e0000a24:       |  |  |     /-- 000d9763                bnez    s11,e0000a32 <hmac_testutils_finish_polled+0xe2>
e0000a28:       |  |  |     |   4585                    li      a1,1
e0000a2a:       |  |  |     |   4552                    lw      a0,20(sp)
e0000a2c:       |  |  |     |   865e                    mv      a2,s7
e0000a2e:       |  |  |     |   2b81                    jal     e0000f7e <base_log_internal_dv>
e0000a30:       |  |  |  /--|-- a809                    j       e0000a42 <hmac_testutils_finish_polled+0xf2>
e0000a32:       |  |  |  |  \-> 1028                    addi    a0,sp,40
e0000a34:       |  |  |  |      4651                    li      a2,20
e0000a36:       |  |  |  |      45b2                    lw      a1,12(sp)
e0000a38:       |  |  |  |      4dd000ef                jal     ra,e0001714 <memcpy>
e0000a3c:       |  |  |  |      1028                    addi    a0,sp,40
e0000a3e:       |  |  |  |      85de                    mv      a1,s7
e0000a40:       |  |  |  |      2971                    jal     e0000edc <base_log_internal_core>
e0000a42:       |  |  |  \----> 856a                    mv      a0,s10
e0000a44:       |  |  |         26d5                    jal     e0000e28 <test_status_set>
ibex_mcycle_read():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:80
e0000a46:       |  |  >-------> b80025f3                csrr    a1,mcycleh
e0000a4a:       |  |  |         b0002573                csrr    a0,mcycle
e0000a4e:       |  |  |         b8002673                csrr    a2,mcycleh
e0000a52:       |  |  \-------- fec59ae3                bne     a1,a2,e0000a46 <hmac_testutils_finish_polled+0xf6>
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:89
  return (uint64_t)cycle_high << 32 | cycle_low;
e0000a56:       |  |            9552                    add     a0,a0,s4
e0000a58:       |  |            01453633                sltu    a2,a0,s4
e0000a5c:       |  |            964a                    add     a2,a2,s2
ibex_timeout_check():
/proc/self/cwd/./sw/device/lib/runtime/ibex.h:184
  return ibex_mcycle_read() - timeout->start > timeout->cycles;
e0000a5e:       |  |            95b2                    add     a1,a1,a2
e0000a60:       |  |     /----- 01958563                beq     a1,s9,e0000a6a <hmac_testutils_finish_polled+0x11a>
e0000a64:       |  |     |      00bcb533                sltu    a0,s9,a1
e0000a68:       |  |     |  /-- a019                    j       e0000a6e <hmac_testutils_finish_polled+0x11e>
e0000a6a:       |  |     \--|-> 00ac3533                sltu    a0,s8,a0
e0000a6e:       |  |        \-> 00154513                xori    a0,a0,1
hmac_testutils_finish_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:96
  IBEX_SPIN_FOR(check_finished(hmac, digest_out),
e0000a72:       +--|----------- f155                    bnez    a0,e0000a16 <hmac_testutils_finish_polled+0xc6>
e0000a74:       |  |            4572                    lw      a0,28(sp)
e0000a76:       |  |            4581                    li      a1,0
e0000a78:       |  |            5602                    lw      a2,32(sp)
e0000a7a:       |  |            5692                    lw      a3,36(sp)
e0000a7c:       |  |            4701                    li      a4,0
e0000a7e:       |  |            3e7000ef                jal     ra,e0001664 <udiv64_slow>
e0000a82:       |  |            00150413                addi    s0,a0,1
e0000a86:       |  |            00a43533                sltu    a0,s0,a0
e0000a8a:       |  |            00a584b3                add     s1,a1,a0
e0000a8e:       |  |        /-- 000d9963                bnez    s11,e0000aa0 <hmac_testutils_finish_polled+0x150>
e0000a92:       |  |        |   4589                    li      a1,2
e0000a94:       |  |        |   4562                    lw      a0,24(sp)
e0000a96:       |  |        |   8622                    mv      a2,s0
e0000a98:       |  |        |   86a6                    mv      a3,s1
e0000a9a:       |  |        |   8762                    mv      a4,s8
e0000a9c:       |  |        |   21cd                    jal     e0000f7e <base_log_internal_dv>
e0000a9e:       |  |     /--|-- a819                    j       e0000ab4 <hmac_testutils_finish_polled+0x164>
e0000aa0:       |  |     |  \-> 1028                    addi    a0,sp,40
e0000aa2:       |  |     |      4651                    li      a2,20
e0000aa4:       |  |     |      45c2                    lw      a1,16(sp)
e0000aa6:       |  |     |      46f000ef                jal     ra,e0001714 <memcpy>
e0000aaa:       |  |     |      1028                    addi    a0,sp,40
e0000aac:       |  |     |      8622                    mv      a2,s0
e0000aae:       |  |     |      86a6                    mv      a3,s1
e0000ab0:       |  |     |      8762                    mv      a4,s8
e0000ab2:       |  |     |      212d                    jal     e0000edc <base_log_internal_core>
e0000ab4:       |  |     \----> 856a                    mv      a0,s10
e0000ab6:       |  |            2e8d                    jal     e0000e28 <test_status_set>
e0000ab8:       \--|----------- bfb9                    j       e0000a16 <hmac_testutils_finish_polled+0xc6>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:98
                HMAC_TESTUTILS_FINISH_TIMEOUT_USEC);
}
e0000aba:          \----------> 5df2                    lw      s11,60(sp)
e0000abc:                       4d06                    lw      s10,64(sp)
e0000abe:                       4c96                    lw      s9,68(sp)
e0000ac0:                       4c26                    lw      s8,72(sp)
e0000ac2:                       4bb6                    lw      s7,76(sp)
e0000ac4:                       4b46                    lw      s6,80(sp)
e0000ac6:                       4ad6                    lw      s5,84(sp)
e0000ac8:                       4a66                    lw      s4,88(sp)
e0000aca:                       49f6                    lw      s3,92(sp)
e0000acc:                       5906                    lw      s2,96(sp)
e0000ace:                       5496                    lw      s1,100(sp)
e0000ad0:                       5426                    lw      s0,104(sp)
e0000ad2:                       50b6                    lw      ra,108(sp)
e0000ad4:                       6165                    addi    sp,sp,112
e0000ad6:                       8082                    ret

e0000ad8 <hmac_testutils_finish_and_check_polled>:
hmac_testutils_finish_and_check_polled():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:101

void hmac_testutils_finish_and_check_polled(const dif_hmac_t *hmac,
                                            const dif_hmac_digest_t *expected) {
e0000ad8:                          7159                 addi    sp,sp,-112
e0000ada:                          d686                 sw      ra,108(sp)
e0000adc:                          d4a2                 sw      s0,104(sp)
e0000ade:                          d2a6                 sw      s1,100(sp)
e0000ae0:                          d0ca                 sw      s2,96(sp)
e0000ae2:                          cece                 sw      s3,92(sp)
e0000ae4:                          ccd2                 sw      s4,88(sp)
e0000ae6:                          cad6                 sw      s5,84(sp)
e0000ae8:                          c8da                 sw      s6,80(sp)
e0000aea:                          c6de                 sw      s7,76(sp)
e0000aec:                          c4e2                 sw      s8,72(sp)
e0000aee:                          c2e6                 sw      s9,68(sp)
e0000af0:                          c0ea                 sw      s10,64(sp)
e0000af2:                          8c2e                 mv      s8,a1
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:103
  dif_hmac_digest_t digest;
  hmac_testutils_finish_polled(hmac, &digest);
e0000af4:                          100c                 addi    a1,sp,32
e0000af6:                          1000                 addi    s0,sp,32
e0000af8:                          3da1                 jal     e0000950 <hmac_testutils_finish_polled>
e0000afa:                          00001517             auipc   a0,0x1
e0000afe:                          77a50513             addi    a0,a0,1914 # e0002274 <kDeviceLogBypassUartAddress>
e0000b02:                          410c                 lw      a1,0(a0)
e0000b04:                          4481                 li      s1,0
e0000b06:                          4501                 li      a0,0
e0000b08:                          0015bc93             seqz    s9,a1
e0000b0c:                          4d21                 li      s10,8
e0000b0e:                          00001917             auipc   s2,0x1
e0000b12:                          3ea90913             addi    s2,s2,1002 # e0001ef8 <kExpectedHmacDigest+0x328>
e0000b16:                          00002997             auipc   s3,0x2
e0000b1a:                          8d698993             addi    s3,s3,-1834 # e00023ec <hmac_testutils_finish_and_check_polled.kLogFields.8>
e0000b1e:                          00001a17             auipc   s4,0x1
e0000b22:                          3c6a0a13             addi    s4,s4,966 # e0001ee4 <kExpectedHmacDigest+0x314>
e0000b26:                          00002a97             auipc   s5,0x2
e0000b2a:                          8b2a8a93             addi    s5,s5,-1870 # e00023d8 <hmac_testutils_finish_and_check_polled.kLogFields>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:104
  CHECK_ARRAYS_EQ(digest.digest, expected->digest, ARRAYSIZE(digest.digest));
e0000b2e:       /----------------> 400c                 lw      a1,0(s0)
e0000b30:       |                  000c2603             lw      a2,0(s8)
e0000b34:       |  /-------------- 04c58a63             beq     a1,a2,e0000b88 <hmac_testutils_finish_and_check_polled+0xb0>
e0000b38:       |  |               8905                 andi    a0,a0,1
e0000b3a:       |  |           /-- c501                 beqz    a0,e0000b42 <hmac_testutils_finish_and_check_polled+0x6a>
e0000b3c:       |  |        /--|-- 000c8863             beqz    s9,e0000b4c <hmac_testutils_finish_and_check_polled+0x74>
e0000b40:       |  |  /-----|--|-- a02d                 j       e0000b6a <hmac_testutils_finish_and_check_polled+0x92>
e0000b42:       |  |  |  /--|--\-X 000c9d63             bnez    s9,e0000b5c <hmac_testutils_finish_and_check_polled+0x84>
e0000b46:       |  |  |  |  |      8556                 mv      a0,s5
e0000b48:       |  |  |  |  |      4581                 li      a1,0
e0000b4a:       |  |  |  |  |      2915                 jal     e0000f7e <base_log_internal_dv>
e0000b4c:       |  |  |  |  \----> 4014                 lw      a3,0(s0)
e0000b4e:       |  |  |  |         000c2703             lw      a4,0(s8)
e0000b52:       |  |  |  |         458d                 li      a1,3
e0000b54:       |  |  |  |         854e                 mv      a0,s3
e0000b56:       |  |  |  |         8626                 mv      a2,s1
e0000b58:       |  |  |  |         211d                 jal     e0000f7e <base_log_internal_dv>
e0000b5a:       |  |  |  |     /-- a035                 j       e0000b86 <hmac_testutils_finish_and_check_polled+0xae>
e0000b5c:       |  |  |  \-----|-> 0028                 addi    a0,sp,8
e0000b5e:       |  |  |        |   4651                 li      a2,20
e0000b60:       |  |  |        |   85d2                 mv      a1,s4
e0000b62:       |  |  |        |   3b3000ef             jal     ra,e0001714 <memcpy>
e0000b66:       |  |  |        |   0028                 addi    a0,sp,8
e0000b68:       |  |  |        |   2e95                 jal     e0000edc <base_log_internal_core>
e0000b6a:       |  |  \--------|-> 00042b03             lw      s6,0(s0)
e0000b6e:       |  |           |   000c2b83             lw      s7,0(s8)
e0000b72:       |  |           |   0028                 addi    a0,sp,8
e0000b74:       |  |           |   4651                 li      a2,20
e0000b76:       |  |           |   85ca                 mv      a1,s2
e0000b78:       |  |           |   39d000ef             jal     ra,e0001714 <memcpy>
e0000b7c:       |  |           |   0028                 addi    a0,sp,8
e0000b7e:       |  |           |   85a6                 mv      a1,s1
e0000b80:       |  |           |   865a                 mv      a2,s6
e0000b82:       |  |           |   86de                 mv      a3,s7
e0000b84:       |  |           |   2ea1                 jal     e0000edc <base_log_internal_core>
e0000b86:       |  |           \-> 4505                 li      a0,1
e0000b88:       |  \-------------> 0485                 addi    s1,s1,1
e0000b8a:       |                  0411                 addi    s0,s0,4
e0000b8c:       |                  0c11                 addi    s8,s8,4
e0000b8e:       \----------------- fba490e3             bne     s1,s10,e0000b2e <hmac_testutils_finish_and_check_polled+0x56>
e0000b92:                          8905                 andi    a0,a0,1
e0000b94:                      /-- c509                 beqz    a0,e0000b9e <hmac_testutils_finish_and_check_polled+0xc6>
e0000b96:                      |   6531                 lui     a0,0xc
e0000b98:                      |   aad50513             addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000b9c:                      |   2471                 jal     e0000e28 <test_status_set>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:105
}
e0000b9e:                      \-> 4d06                 lw      s10,64(sp)
e0000ba0:                          4c96                 lw      s9,68(sp)
e0000ba2:                          4c26                 lw      s8,72(sp)
e0000ba4:                          4bb6                 lw      s7,76(sp)
e0000ba6:                          4b46                 lw      s6,80(sp)
e0000ba8:                          4ad6                 lw      s5,84(sp)
e0000baa:                          4a66                 lw      s4,88(sp)
e0000bac:                          49f6                 lw      s3,92(sp)
e0000bae:                          5906                 lw      s2,96(sp)
e0000bb0:                          5496                 lw      s1,100(sp)
e0000bb2:                          5426                 lw      s0,104(sp)
e0000bb4:                          50b6                 lw      ra,108(sp)
e0000bb6:                          6165                 addi    sp,sp,112
e0000bb8:                          8082                 ret

e0000bba <hmac_testutils_push_message>:
hmac_testutils_push_message():
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:108

void hmac_testutils_push_message(const dif_hmac_t *hmac, const char *data,
                                 size_t len) {
e0000bba:                       7139                    addi    sp,sp,-64
e0000bbc:                       de06                    sw      ra,60(sp)
e0000bbe:                       dc22                    sw      s0,56(sp)
e0000bc0:                       da26                    sw      s1,52(sp)
e0000bc2:                       d84a                    sw      s2,48(sp)
e0000bc4:                       d64e                    sw      s3,44(sp)
e0000bc6:                       d452                    sw      s4,40(sp)
e0000bc8:                       d256                    sw      s5,36(sp)
e0000bca:                       d05a                    sw      s6,32(sp)
e0000bcc:                       ce5e                    sw      s7,28(sp)
e0000bce:                       cc62                    sw      s8,24(sp)
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:112
  const char *dp = data;
  size_t sent_bytes;

  while (dp - data < len) {
e0000bd0:       /-------------- ce3d                    beqz    a2,e0000c4e <hmac_testutils_push_message+0x94>
e0000bd2:       |               8bb2                    mv      s7,a2
e0000bd4:       |               892e                    mv      s2,a1
e0000bd6:       |               8b2a                    mv      s6,a0
e0000bd8:       |               00001517                auipc   a0,0x1
e0000bdc:       |               69c50513                addi    a0,a0,1692 # e0002274 <kDeviceLogBypassUartAddress>
e0000be0:       |               410c                    lw      a1,0(a0)
e0000be2:       |               4501                    li      a0,0
e0000be4:       |               0015bc13                seqz    s8,a1
e0000be8:       |               00001997                auipc   s3,0x1
e0000bec:       |               32498993                addi    s3,s3,804 # e0001f0c <kExpectedHmacDigest+0x33c>
e0000bf0:       |               65b1                    lui     a1,0xc
e0000bf2:       |               aad58a13                addi    s4,a1,-1363 # baad <_stack_len+0x3aad>
e0000bf6:       |               00002a97                auipc   s5,0x2
e0000bfa:       |               80aa8a93                addi    s5,s5,-2038 # e0002400 <hmac_testutils_push_message.kLogFields>
e0000bfe:       |               84ca                    mv      s1,s2
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:114
    dif_result_t res =
        dif_hmac_fifo_push(hmac, dp, len - (dp - data), &sent_bytes);
e0000c00:       |  /----------> 40ab8633                sub     a2,s7,a0
e0000c04:       |  |            0854                    addi    a3,sp,20
e0000c06:       |  |            855a                    mv      a0,s6
e0000c08:       |  |            85a6                    mv      a1,s1
e0000c0a:       |  |            222d                    jal     e0000d34 <dif_hmac_fifo_push>
e0000c0c:       |  |            842a                    mv      s0,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:115
    CHECK(res == kDifOk || res == kDifIpFifoFull, "HMAC error = %d", res);
e0000c0e:       |  |            995d                    andi    a0,a0,-9
e0000c10:       |  |  /-------- c115                    beqz    a0,e0000c34 <hmac_testutils_push_message+0x7a>
e0000c12:       |  |  |     /-- 000c1763                bnez    s8,e0000c20 <hmac_testutils_push_message+0x66>
e0000c16:       |  |  |     |   4585                    li      a1,1
e0000c18:       |  |  |     |   8556                    mv      a0,s5
e0000c1a:       |  |  |     |   8622                    mv      a2,s0
e0000c1c:       |  |  |     |   268d                    jal     e0000f7e <base_log_internal_dv>
e0000c1e:       |  |  |  /--|-- a809                    j       e0000c30 <hmac_testutils_push_message+0x76>
e0000c20:       |  |  |  |  \-> 850a                    mv      a0,sp
e0000c22:       |  |  |  |      4651                    li      a2,20
e0000c24:       |  |  |  |      85ce                    mv      a1,s3
e0000c26:       |  |  |  |      2ef000ef                jal     ra,e0001714 <memcpy>
e0000c2a:       |  |  |  |      850a                    mv      a0,sp
e0000c2c:       |  |  |  |      85a2                    mv      a1,s0
e0000c2e:       |  |  |  |      247d                    jal     e0000edc <base_log_internal_core>
e0000c30:       |  |  |  \----> 8552                    mv      a0,s4
e0000c32:       |  |  |         2add                    jal     e0000e28 <test_status_set>
e0000c34:       |  |  \-------> ff840513                addi    a0,s0,-8
e0000c38:       |  |            00153513                seqz    a0,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:119

    // Wait until the FIFO is drained before pushing more data. This helps
    // to prevent the undesirable back pressure condition.
    if (res == kDifIpFifoFull) {
e0000c3c:       |  |        /-- c119                    beqz    a0,e0000c42 <hmac_testutils_push_message+0x88>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:120
      hmac_testutils_fifo_empty_polled(hmac);
e0000c3e:       |  |        |   855a                    mv      a0,s6
e0000c40:       |  |        |   3679                    jal     e00007ce <hmac_testutils_fifo_empty_polled>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:123
    }

    dp += sent_bytes;
e0000c42:       |  |        \-> 4552                    lw      a0,20(sp)
e0000c44:       |  |            94aa                    add     s1,s1,a0
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:112
  while (dp - data < len) {
e0000c46:       |  |            41248533                sub     a0,s1,s2
e0000c4a:       |  \----------- fb756be3                bltu    a0,s7,e0000c00 <hmac_testutils_push_message+0x46>
/proc/self/cwd/sw/device/lib/testing/hmac_testutils.c:125
  }
}
e0000c4e:       \-------------> 4c62                    lw      s8,24(sp)
e0000c50:                       4bf2                    lw      s7,28(sp)
e0000c52:                       5b02                    lw      s6,32(sp)
e0000c54:                       5a92                    lw      s5,36(sp)
e0000c56:                       5a22                    lw      s4,40(sp)
e0000c58:                       59b2                    lw      s3,44(sp)
e0000c5a:                       5942                    lw      s2,48(sp)
e0000c5c:                       54d2                    lw      s1,52(sp)
e0000c5e:                       5462                    lw      s0,56(sp)
e0000c60:                       50f2                    lw      ra,60(sp)
e0000c62:                       6121                    addi    sp,sp,64
e0000c64:                       8082                    ret

e0000c66 <dif_hmac_init>:
dif_hmac_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:18

#include "hmac_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_hmac_init(mmio_region_t base_addr, dif_hmac_t *hmac) {
  if (hmac == NULL) {
e0000c66:       /----- c581                     beqz    a1,e0000c6e <dif_hmac_init+0x8>
e0000c68:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:22
    return kDifBadArg;
  }

  hmac->base_addr = base_addr;
e0000c6a:       |      c188                     sw      a0,0(a1)
e0000c6c:       |  /-- a011                     j       e0000c70 <dif_hmac_init+0xa>
e0000c6e:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_hmac_autogen.c:25

  return kDifOk;
}
e0000c70:          \-> 8532                     mv      a0,a2
e0000c72:              8082                     ret

e0000c74 <dif_hmac_mode_hmac_start>:
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:99
}

dif_result_t dif_hmac_mode_hmac_start(const dif_hmac_t *hmac,
                                      const uint8_t *key,
                                      const dif_hmac_transaction_t config) {
  if (hmac == NULL || key == NULL) {
e0000c74:                       00153713                seqz    a4,a0
e0000c78:                       0015b793                seqz    a5,a1
e0000c7c:                       8fd9                    or      a5,a5,a4
e0000c7e:                       470d                    li      a4,3
e0000c80:       /-------------- e7a5                    bnez    a5,e0000ce8 <dif_hmac_mode_hmac_start+0x74>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:104
    return kDifBadArg;
  }

  // Read current CFG register value.
  uint32_t reg = mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
e0000c82:       |               00052883                lw      a7,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000c86:       |               0108a803                lw      a6,16(a7)
e0000c8a:       |               4735                    li      a4,13
dif_hmac_calculate_device_config_value():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:62
  switch (config.message_endianness) {
e0000c8c:       |  /----------- ca19                    beqz    a2,e0000ca2 <dif_hmac_mode_hmac_start+0x2e>
e0000c8e:       |  |            4785                    li      a5,1
e0000c90:       +--|----------- 04f61c63                bne     a2,a5,e0000ce8 <dif_hmac_mode_hmac_start+0x74>
e0000c94:       |  |            4281                    li      t0,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:75
  switch (config.digest_endianness) {
e0000c96:       |  |  /-------- ca81                    beqz    a3,e0000ca6 <dif_hmac_mode_hmac_start+0x32>
e0000c98:       |  |  |  /----> 4785                    li      a5,1
e0000c9a:       +--|--|--|----- 04f69763                bne     a3,a5,e0000ce8 <dif_hmac_mode_hmac_start+0x74>
e0000c9e:       |  |  |  |      4301                    li      t1,0
e0000ca0:       |  |  |  |  /-- a021                    j       e0000ca8 <dif_hmac_mode_hmac_start+0x34>
e0000ca2:       |  \--|--|--|-> 4291                    li      t0,4
e0000ca4:       |     |  \--|-- faf5                    bnez    a3,e0000c98 <dif_hmac_mode_hmac_start+0x24>
e0000ca6:       |     \-----|-> 4321                    li      t1,8
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0000ca8:       |           \-> 4198                    lw      a4,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000caa:       |               04e8a023                sw      a4,64(a7)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:113

  // Set the HMAC key.
  // The least significant word is at HMAC_KEY_7_REG_OFFSET.
  // From the HWIP spec: "Order of the secret key is: key[255:0] = {KEY0, KEY1,
  // KEY2, ... , KEY7};"
  for (size_t i = 0; i < HMAC_PARAM_NUM_WORDS; ++i) {
e0000cae:       |               0591                    addi    a1,a1,4
e0000cb0:       |               03c00713                li      a4,60
e0000cb4:       |               02000793                li      a5,32
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:115
    const uint32_t word_offset = i * sizeof(uint32_t);
    mmio_region_write32(hmac->base_addr, HMAC_KEY_7_REG_OFFSET - word_offset,
e0000cb8:       |           /-> 4110                    lw      a2,0(a0)
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
e0000cba:       |           |   4194                    lw      a3,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000cbc:       |           |   963a                    add     a2,a2,a4
e0000cbe:       |           |   c214                    sw      a3,0(a2)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:113
  for (size_t i = 0; i < HMAC_PARAM_NUM_WORDS; ++i) {
e0000cc0:       |           |   1771                    addi    a4,a4,-4
e0000cc2:       |           |   0591                    addi    a1,a1,4
e0000cc4:       |           \-- fef71ae3                bne     a4,a5,e0000cb8 <dif_hmac_mode_hmac_start+0x44>
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
e0000cc8:       |               ff087593                andi    a1,a6,-16
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:122
  }

  // Set HMAC to process in HMAC mode (not SHA256-only mode).
  reg = bitfield_bit32_write(reg, HMAC_CFG_SHA_EN_BIT, true);
  reg = bitfield_bit32_write(reg, HMAC_CFG_HMAC_EN_BIT, true);
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, reg);
e0000ccc:       |               4118                    lw      a4,0(a0)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000cce:       |               0055e5b3                or      a1,a1,t0
e0000cd2:       |               0065e5b3                or      a1,a1,t1
e0000cd6:       |               0035e593                ori     a1,a1,3
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000cda:       |               cb0c                    sw      a1,16(a4)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:125

  // Begin HMAC operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
e0000cdc:       |               4108                    lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000cde:       |               494c                    lw      a1,20(a0)
e0000ce0:       |               4701                    li      a4,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000ce2:       |               0015e593                ori     a1,a1,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000ce6:       |               c94c                    sw      a1,20(a0)
dif_hmac_mode_hmac_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:128
                                  HMAC_CMD_HASH_START_BIT);
  return kDifOk;
}
e0000ce8:       \-------------> 853a                    mv      a0,a4
e0000cea:                       8082                    ret

e0000cec <dif_hmac_mode_sha256_start>:
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:132

dif_result_t dif_hmac_mode_sha256_start(const dif_hmac_t *hmac,
                                        const dif_hmac_transaction_t config) {
  if (hmac == NULL) {
e0000cec:          /-------------- c105                 beqz    a0,e0000d0c <dif_hmac_mode_sha256_start+0x20>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:137
    return kDifBadArg;
  }

  // Read current CFG register value.
  uint32_t reg = mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
e0000cee:          |               4118                 lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000cf0:          |               01072803             lw      a6,16(a4)
e0000cf4:          |               46b5                 li      a3,13
dif_hmac_calculate_device_config_value():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:62
  switch (config.message_endianness) {
e0000cf6:          |  /----------- cd89                 beqz    a1,e0000d10 <dif_hmac_mode_sha256_start+0x24>
e0000cf8:          |  |            4785                 li      a5,1
e0000cfa:       /--|--|----------- 02f59b63             bne     a1,a5,e0000d30 <dif_hmac_mode_sha256_start+0x44>
e0000cfe:       |  |  |            4581                 li      a1,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:75
  switch (config.digest_endianness) {
e0000d00:       |  |  |  /-------- ca11                 beqz    a2,e0000d14 <dif_hmac_mode_sha256_start+0x28>
e0000d02:       |  |  |  |  /----> 4785                 li      a5,1
e0000d04:       +--|--|--|--|----- 02f61663             bne     a2,a5,e0000d30 <dif_hmac_mode_sha256_start+0x44>
e0000d08:       |  |  |  |  |      4601                 li      a2,0
e0000d0a:       |  |  |  |  |  /-- a031                 j       e0000d16 <dif_hmac_mode_sha256_start+0x2a>
e0000d0c:       |  \--|--|--|--|-> 468d                 li      a3,3
e0000d0e:       +-----|--|--|--|-- a00d                 j       e0000d30 <dif_hmac_mode_sha256_start+0x44>
e0000d10:       |     \--|--|--|-> 4591                 li      a1,4
e0000d12:       |        |  \--|-- fa65                 bnez    a2,e0000d02 <dif_hmac_mode_sha256_start+0x16>
e0000d14:       |        \-----|-> 4621                 li      a2,8
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e0000d16:       |              \-> ff087693             andi    a3,a6,-16
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000d1a:       |                  8dd5                 or      a1,a1,a3
e0000d1c:       |                  8dd1                 or      a1,a1,a2
e0000d1e:       |                  0025e593             ori     a1,a1,2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000d22:       |                  cb0c                 sw      a1,16(a4)
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:150

  // Write new CFG register value.
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, reg);

  // Begin SHA256-only operation.
  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
e0000d24:       |                  4108                 lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000d26:       |                  494c                 lw      a1,20(a0)
e0000d28:       |                  4681                 li      a3,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
e0000d2a:       |                  0015e593             ori     a1,a1,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000d2e:       |                  c94c                 sw      a1,20(a0)
dif_hmac_mode_sha256_start():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:154
                                  HMAC_CMD_HASH_START_BIT);

  return kDifOk;
}
e0000d30:       \----------------> 8536                 mv      a0,a3
e0000d32:                          8082                 ret

e0000d34 <dif_hmac_fifo_push>:
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:158

dif_result_t dif_hmac_fifo_push(const dif_hmac_t *hmac, const void *data,
                                size_t len, size_t *bytes_sent) {
  if (hmac == NULL || data == NULL) {
e0000d34:                       00153713                seqz    a4,a0
e0000d38:                       0015b793                seqz    a5,a1
e0000d3c:                       8fd9                    or      a5,a5,a4
e0000d3e:                       470d                    li      a4,3
e0000d40:       /-------------- e3b9                    bnez    a5,e0000d86 <dif_hmac_fifo_push+0x52>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:165
  }

  const uint8_t *data_sent = (const uint8_t *)data;
  size_t bytes_remaining = len;

  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
e0000d42:       |  /----------- ce1d                    beqz    a2,e0000d80 <dif_hmac_fifo_push+0x4c>
e0000d44:       |  |            4811                    li      a6,4
e0000d46:       |  |            87b2                    mv      a5,a2
get_status():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
e0000d48:       |  |  /-------> 00052883                lw      a7,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000d4c:       |  |  |         0188a703                lw      a4,24(a7)
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:169
    bool word_aligned = (uintptr_t)data_sent % sizeof(uint32_t) == 0;
    size_t bytes_written = 0;

    if (bytes_remaining < sizeof(uint32_t) || !word_aligned) {
e0000d50:       |  |  |     /-- 0107e563                bltu    a5,a6,e0000d5a <dif_hmac_fifo_push+0x26>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:166
    bool word_aligned = (uintptr_t)data_sent % sizeof(uint32_t) == 0;
e0000d54:       |  |  |     |   0035f713                andi    a4,a1,3
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:169
    if (bytes_remaining < sizeof(uint32_t) || !word_aligned) {
e0000d58:       |  |  |  /--|-- cf01                    beqz    a4,e0000d70 <dif_hmac_fifo_push+0x3c>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:172
      // Individual byte writes are needed if the buffer isn't aligned or there
      // are no more full words to write.
      mmio_region_write8(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, *data_sent);
e0000d5a:       |  |  |  |  \-> 00058283                lb      t0,0(a1)
mmio_region_write8():
/proc/self/cwd/./sw/device/lib/base/mmio.h:112
  ((volatile uint8_t *)base.base)[offset / sizeof(uint8_t)] = value;
e0000d5e:       |  |  |  |      40088713                addi    a4,a7,1024
e0000d62:       |  |  |  |      40570023                sb      t0,1024(a4)
e0000d66:       |  |  |  |      4705                    li      a4,1
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:181
      uint32_t word = read_32(data_sent);
      mmio_region_write32(hmac->base_addr, HMAC_MSG_FIFO_REG_OFFSET, word);
      bytes_written = sizeof(uint32_t);
    }

    bytes_remaining -= bytes_written;
e0000d68:       |  |  |  |  /-> 8f99                    sub     a5,a5,a4
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:182
    data_sent += bytes_written;
e0000d6a:       |  |  |  |  |   95ba                    add     a1,a1,a4
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:165
  while (bytes_remaining > 0 && get_fifo_available_space(hmac) > 0) {
e0000d6c:       |  |  \--|--|-- fff1                    bnez    a5,e0000d48 <dif_hmac_fifo_push+0x14>
e0000d6e:       |  +-----|--|-- a809                    j       e0000d80 <dif_hmac_fifo_push+0x4c>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:88
e0000d70:       |  |     \--|-> 0005a283                lw      t0,0(a1)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000d74:       |  |        |   40088713                addi    a4,a7,1024
e0000d78:       |  |        |   40572023                sw      t0,1024(a4)
e0000d7c:       |  |        |   4711                    li      a4,4
e0000d7e:       |  |        \-- b7ed                    j       e0000d68 <dif_hmac_fifo_push+0x34>
e0000d80:       |  \----------> 4701                    li      a4,0
dif_hmac_fifo_push():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:185
  }

  if (bytes_sent != NULL) {
e0000d82:       +-------------- c291                    beqz    a3,e0000d86 <dif_hmac_fifo_push+0x52>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:186
    *bytes_sent = len - bytes_remaining;
e0000d84:       |               c290                    sw      a2,0(a3)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:194
  if (bytes_remaining > 0) {
    return kDifIpFifoFull;
  }

  return kDifOk;
}
e0000d86:       \-------------> 853a                    mv      a0,a4
e0000d88:                       8082                    ret

e0000d8a <dif_hmac_fifo_count_entries>:
dif_hmac_fifo_count_entries():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:198

dif_result_t dif_hmac_fifo_count_entries(const dif_hmac_t *hmac,
                                         uint32_t *num_entries) {
  if (hmac == NULL || num_entries == NULL) {
e0000d8a:           00153613            seqz    a2,a0
e0000d8e:           0015b693            seqz    a3,a1
e0000d92:           8ed1                        or      a3,a3,a2
e0000d94:           460d                        li      a2,3
e0000d96:       /-- e699                        bnez    a3,e0000da4 <dif_hmac_fifo_count_entries+0x1a>
get_status():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:20
  return mmio_region_read32(hmac->base_addr, HMAC_STATUS_REG_OFFSET);
e0000d98:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000d9a:       |   4d08                        lw      a0,24(a0)
e0000d9c:       |   4601                        li      a2,0
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e0000d9e:       |   8111                        srli    a0,a0,0x4
e0000da0:       |   897d                        andi    a0,a0,31
dif_hmac_fifo_count_entries():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:202
    return kDifBadArg;
  }

  *num_entries = get_fifo_entry_count(hmac);
e0000da2:       |   c188                        sw      a0,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:205

  return kDifOk;
}
e0000da4:       \-> 8532                        mv      a0,a2
e0000da6:           8082                        ret

e0000da8 <dif_hmac_get_message_length>:
dif_hmac_get_message_length():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:209

dif_result_t dif_hmac_get_message_length(const dif_hmac_t *hmac,
                                         uint64_t *msg_len) {
  if (hmac == NULL || msg_len == NULL) {
e0000da8:           00153613            seqz    a2,a0
e0000dac:           0015b693            seqz    a3,a1
e0000db0:           8ed1                        or      a3,a3,a2
e0000db2:           460d                        li      a2,3
e0000db4:       /-- e699                        bnez    a3,e0000dc2 <dif_hmac_get_message_length+0x1a>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:214
    return kDifBadArg;
  }

  uint64_t msg_lower =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_LOWER_REG_OFFSET);
e0000db6:       |   4108                        lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000db8:       |   5174                        lw      a3,100(a0)
dif_hmac_get_message_length():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:216
  uint64_t msg_upper =
      mmio_region_read32(hmac->base_addr, HMAC_MSG_LENGTH_UPPER_REG_OFFSET);
e0000dba:       |   5528                        lw      a0,104(a0)
e0000dbc:       |   4601                        li      a2,0
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:218

  *msg_len = (msg_upper << 32) | msg_lower;
e0000dbe:       |   c1c8                        sw      a0,4(a1)
e0000dc0:       |   c194                        sw      a3,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:221

  return kDifOk;
}
e0000dc2:       \-> 8532                        mv      a0,a2
e0000dc4:           8082                        ret

e0000dc6 <dif_hmac_process>:
dif_hmac_process():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:224

dif_result_t dif_hmac_process(const dif_hmac_t *hmac) {
  if (hmac == NULL) {
e0000dc6:       /-- c901                        beqz    a0,e0000dd6 <dif_hmac_process+0x10>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:228
    return kDifBadArg;
  }

  mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_CMD_REG_OFFSET,
e0000dc8:       |   410c                        lw      a1,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000dca:       |   49d0                        lw      a2,20(a1)
e0000dcc:       |   4501                        li      a0,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000dce:       |   00266613            ori     a2,a2,2
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000dd2:       |   c9d0                        sw      a2,20(a1)
dif_hmac_process():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:231
                                  HMAC_CMD_HASH_PROCESS_BIT);
  return kDifOk;
}
e0000dd4:       |   8082                        ret
e0000dd6:       \-> 450d                        li      a0,3
e0000dd8:           8082                        ret

e0000dda <dif_hmac_finish>:
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:235

dif_result_t dif_hmac_finish(const dif_hmac_t *hmac,
                             dif_hmac_digest_t *digest) {
  if (hmac == NULL || digest == NULL) {
e0000dda:                 00153613              seqz    a2,a0
e0000dde:                 0015b693              seqz    a3,a1
e0000de2:                 8ed1                  or      a3,a3,a2
e0000de4:                 460d                  li      a2,3
e0000de6:       /-------- ee9d                  bnez    a3,e0000e24 <dif_hmac_finish+0x4a>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:240
    return kDifBadArg;
  }

  // Check if hmac_done is asserted.
  bool done = mmio_region_get_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
e0000de8:       |         4110                  lw      a2,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000dea:       |         4218                  lw      a4,0(a2)
e0000dec:       |         4e14                  lw      a3,24(a2)
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
 */
OT_WARN_UNUSED_RESULT
inline bool bitfield_bit32_read(uint32_t bitfield,
                                bitfield_bit32_index_t bit_index) {
  return bitfield_field32_read(bitfield,
                               bitfield_bit32_to_field32(bit_index)) == 0x1u;
e0000dee:       |         8b05                  andi    a4,a4,1
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:247

  // Check if fifo_empty is asserted.
  bool fifo_empty = mmio_region_get_bit32(
      hmac->base_addr, HMAC_STATUS_REG_OFFSET, HMAC_STATUS_FIFO_EMPTY_BIT);

  if (done) {
e0000df0:       |     /-- e709                  bnez    a4,e0000dfa <dif_hmac_finish+0x20>
bitfield_bit32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:122
e0000df2:       |     |   8a85                  andi    a3,a3,1
e0000df4:       |     |   4639                  li      a2,14
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:251
    // Clear hmac_done.
    mmio_region_nonatomic_set_bit32(hmac->base_addr, HMAC_INTR_STATE_REG_OFFSET,
                                    HMAC_INTR_STATE_HMAC_DONE_BIT);
  } else if (!fifo_empty) {
e0000df6:       |  /--|-- e691                  bnez    a3,e0000e02 <dif_hmac_finish+0x28>
e0000df8:       +--|--|-- a035                  j       e0000e24 <dif_hmac_finish+0x4a>
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000dfa:       |  |  \-> 4214                  lw      a3,0(a2)
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e0000dfc:       |  |      0016e693              ori     a3,a3,1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000e00:       |  |      c214                  sw      a3,0(a2)
e0000e02:       |  \----> 06000613              li      a2,96
e0000e06:       |         04000693              li      a3,64
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:260
  // Read the digest in reverse to preserve the numerical value.
  // The least significant word is at HMAC_DIGEST_7_REG_OFFSET.
  // From the HWIP spec: "Order of the digest is: digest[255:0] = {DIGEST0,
  // DIGEST1, DIGEST2, ... , DIGEST7};"
  for (size_t i = 0; i < ARRAYSIZE(digest->digest); ++i) {
    digest->digest[i] = mmio_region_read32(
e0000e0a:       |     /-> 4118                  lw      a4,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e0000e0c:       |     |   9732                  add     a4,a4,a2
e0000e0e:       |     |   4318                  lw      a4,0(a4)
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:260
e0000e10:       |     |   c198                  sw      a4,0(a1)
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:259
  for (size_t i = 0; i < ARRAYSIZE(digest->digest); ++i) {
e0000e12:       |     |   1671                  addi    a2,a2,-4
e0000e14:       |     |   0591                  addi    a1,a1,4
e0000e16:       |     \-- fed61ae3              bne     a2,a3,e0000e0a <dif_hmac_finish+0x30>
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:267
  }

  // Disable HMAC and SHA256 until the next transaction, clearing the current
  // digest.
  uint32_t device_config =
      mmio_region_read32(hmac->base_addr, HMAC_CFG_REG_OFFSET);
e0000e1a:       |         4108                  lw      a0,0(a0)
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
e0000e1c:       |         490c                  lw      a1,16(a0)
e0000e1e:       |         4601                  li      a2,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
  bitfield &= ~(field.mask << field.index);
e0000e20:       |         99f1                  andi    a1,a1,-4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e0000e22:       |         c90c                  sw      a1,16(a0)
dif_hmac_finish():
/proc/self/cwd/sw/device/lib/dif/dif_hmac.c:275
  device_config =
      bitfield_bit32_write(device_config, HMAC_CFG_HMAC_EN_BIT, false);
  mmio_region_write32(hmac->base_addr, HMAC_CFG_REG_OFFSET, device_config);

  return kDifOk;
}
e0000e24:       \-------> 8532                  mv      a0,a2
e0000e26:                 8082                  ret

e0000e28 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
e0000e28:                    1101                       addi    sp,sp,-32
e0000e2a:                    ce06                       sw      ra,28(sp)
e0000e2c:                    65b1                       lui     a1,0xc
e0000e2e:                    aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
e0000e32:             /----- 02b50063           beq     a0,a1,e0000e52 <test_status_set+0x2a>
e0000e36:             |      65a5                       lui     a1,0x9
e0000e38:             |      05b5                       addi    a1,a1,13
e0000e3a:          /--|----- 02b50d63           beq     a0,a1,e0000e74 <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000e3e:          |  |      00001597           auipc   a1,0x1
e0000e42:          |  |      43258593           addi    a1,a1,1074 # e0002270 <kDeviceTestStatusAddress>
e0000e46:          |  |      418c                       lw      a1,0(a1)
e0000e48:          |  |  /-- c191                       beqz    a1,e0000e4c <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000e4a:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
e0000e4c:          |  |  \-> 40f2                       lw      ra,28(sp)
e0000e4e:          |  |      6105                       addi    sp,sp,32
e0000e50:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e0000e52:          |  \----> 00001517           auipc   a0,0x1
e0000e56:          |         42250513           addi    a0,a0,1058 # e0002274 <kDeviceLogBypassUartAddress>
e0000e5a:          |         4108                       lw      a0,0(a0)
e0000e5c:          |  /----- ed0d                       bnez    a0,e0000e96 <test_status_set+0x6e>
e0000e5e:          |  |      00001597           auipc   a1,0x1
e0000e62:          |  |      13a58593           addi    a1,a1,314 # e0001f98 <kExpectedHmacDigest+0x3c8>
e0000e66:          |  |      0028                       addi    a0,sp,8
e0000e68:          |  |      4651                       li      a2,20
e0000e6a:          |  |      0ab000ef           jal     ra,e0001714 <memcpy>
e0000e6e:          |  |      0028                       addi    a0,sp,8
e0000e70:          |  |      20b5                       jal     e0000edc <base_log_internal_core>
e0000e72:          |  |  /-- a805                       j       e0000ea2 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e0000e74:          \--|--|-> 00001517           auipc   a0,0x1
e0000e78:             |  |   40050513           addi    a0,a0,1024 # e0002274 <kDeviceLogBypassUartAddress>
e0000e7c:             |  |   4108                       lw      a0,0(a0)
e0000e7e:       /-----|--|-- ed05                       bnez    a0,e0000eb6 <test_status_set+0x8e>
e0000e80:       |     |  |   00001597           auipc   a1,0x1
e0000e84:       |     |  |   10458593           addi    a1,a1,260 # e0001f84 <kExpectedHmacDigest+0x3b4>
e0000e88:       |     |  |   0028                       addi    a0,sp,8
e0000e8a:       |     |  |   4651                       li      a2,20
e0000e8c:       |     |  |   089000ef           jal     ra,e0001714 <memcpy>
e0000e90:       |     |  |   0028                       addi    a0,sp,8
e0000e92:       |     |  |   20a9                       jal     e0000edc <base_log_internal_core>
e0000e94:       |  /--|--|-- a03d                       j       e0000ec2 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e0000e96:       |  |  \--|-> 00001517           auipc   a0,0x1
e0000e9a:       |  |     |   5ba50513           addi    a0,a0,1466 # e0002450 <test_status_set.kLogFields.2>
e0000e9e:       |  |     |   4581                       li      a1,0
e0000ea0:       |  |     |   28f9                       jal     e0000f7e <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000ea2:       |  |     \-> 00001517           auipc   a0,0x1
e0000ea6:       |  |         3ce50513           addi    a0,a0,974 # e0002270 <kDeviceTestStatusAddress>
e0000eaa:       |  |         4108                       lw      a0,0(a0)
e0000eac:       |  |  /----- c505                       beqz    a0,e0000ed4 <test_status_set+0xac>
e0000eae:       |  |  |      65b1                       lui     a1,0xc
e0000eb0:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
e0000eb4:       |  |  |  /-- a839                       j       e0000ed2 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e0000eb6:       \--|--|--|-> 00001517           auipc   a0,0x1
e0000eba:          |  |  |   58650513           addi    a0,a0,1414 # e000243c <test_status_set.kLogFields>
e0000ebe:          |  |  |   4581                       li      a1,0
e0000ec0:          |  |  |   287d                       jal     e0000f7e <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000ec2:          \--|--|-> 00001517           auipc   a0,0x1
e0000ec6:             |  |   3ae50513           addi    a0,a0,942 # e0002270 <kDeviceTestStatusAddress>
e0000eca:             |  |   4108                       lw      a0,0(a0)
e0000ecc:             +--|-- c501                       beqz    a0,e0000ed4 <test_status_set+0xac>
e0000ece:             |  |   65a5                       lui     a1,0x9
e0000ed0:             |  |   05b5                       addi    a1,a1,13
e0000ed2:             |  \-> c10c                       sw      a1,0(a0)
e0000ed4:             \----> 2009                       jal     e0000ed6 <abort>

e0000ed6 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
e0000ed6:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
e0000eda:       \-- bff5                        j       e0000ed6 <abort>

e0000edc <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
e0000edc:              7179                     addi    sp,sp,-48
e0000ede:              c606                     sw      ra,12(sp)
e0000ee0:              c422                     sw      s0,8(sp)
e0000ee2:              c226                     sw      s1,4(sp)
e0000ee4:              842a                     mv      s0,a0
e0000ee6:              d646                     sw      a7,44(sp)
e0000ee8:              d442                     sw      a6,40(sp)
e0000eea:              d23e                     sw      a5,36(sp)
e0000eec:              d03a                     sw      a4,32(sp)
e0000eee:              ce36                     sw      a3,28(sp)
e0000ef0:              cc32                     sw      a2,24(sp)
e0000ef2:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
e0000ef4:              4148                     lw      a0,4(a0)
e0000ef6:              800005b7                 lui     a1,0x80000
e0000efa:              fff58613                 addi    a2,a1,-1 # 7fffffff <fromhost+0x9ffeffef>
e0000efe:              4581                     li      a1,0
e0000f00:              0ff000ef                 jal     ra,e00017fe <memchr>
e0000f04:              4054                     lw      a3,4(s0)
e0000f06:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
e0000f0a:              02f00593                 li      a1,47
e0000f0e:              8536                     mv      a0,a3
e0000f10:              19d000ef                 jal     ra,e00018ac <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
e0000f14:       /----- c501                     beqz    a0,e0000f1c <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
e0000f16:       |      00150693                 addi    a3,a0,1
e0000f1a:       |  /-- a011                     j       e0000f1e <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
e0000f1c:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e0000f1e:          \-> 4008                     lw      a0,0(s0)
e0000f20:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
e0000f22:       /----- 00a5ea63                 bltu    a1,a0,e0000f36 <base_log_internal_core+0x5a>
e0000f26:       |      050a                     slli    a0,a0,0x2
e0000f28:       |      00001597                 auipc   a1,0x1
e0000f2c:       |      0a058593                 addi    a1,a1,160 # e0001fc8 <kExpectedHmacDigest+0x3f8>
e0000f30:       |      952e                     add     a0,a0,a1
e0000f32:       |      410c                     lw      a1,0(a0)
e0000f34:       |  /-- a029                     j       e0000f3e <base_log_internal_core+0x62>
e0000f36:       \--|-> 00001597                 auipc   a1,0x1
e0000f3a:          |   08d58593                 addi    a1,a1,141 # e0001fc3 <kExpectedHmacDigest+0x3f3>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
e0000f3e:          \-> 00001497                 auipc   s1,0x1
e0000f42:              3ee48493                 addi    s1,s1,1006 # e000232c <base_log_internal_core.global_log_counter>
e0000f46:              0004d603                 lhu     a2,0(s1)
e0000f4a:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e0000f4c:              00001517                 auipc   a0,0x1
e0000f50:              06050513                 addi    a0,a0,96 # e0001fac <kExpectedHmacDigest+0x3dc>
e0000f54:              208d                     jal     e0000fb6 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
e0000f56:              00049503                 lh      a0,0(s1)
e0000f5a:              0505                     addi    a0,a0,1
e0000f5c:              00a49023                 sh      a0,0(s1)
e0000f60:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
e0000f62:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
e0000f64:              4808                     lw      a0,16(s0)
e0000f66:              084c                     addi    a1,sp,20
e0000f68:              2041                     jal     e0000fe8 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
e0000f6a:              00001517                 auipc   a0,0x1
e0000f6e:              ce250513                 addi    a0,a0,-798 # e0001c4c <kExpectedHmacDigest+0x7c>
e0000f72:              2091                     jal     e0000fb6 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
e0000f74:              4492                     lw      s1,4(sp)
e0000f76:              4422                     lw      s0,8(sp)
e0000f78:              40b2                     lw      ra,12(sp)
e0000f7a:              6145                     addi    sp,sp,48
e0000f7c:              8082                     ret

e0000f7e <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
e0000f7e:              1101                     addi    sp,sp,-32
e0000f80:              ce46                     sw      a7,28(sp)
e0000f82:              cc42                     sw      a6,24(sp)
e0000f84:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
e0000f86:              00001797                 auipc   a5,0x1
e0000f8a:              2ee78793                 addi    a5,a5,750 # e0002274 <kDeviceLogBypassUartAddress>
e0000f8e:              439c                     lw      a5,0(a5)
e0000f90:              c83a                     sw      a4,16(sp)
e0000f92:              c636                     sw      a3,12(sp)
e0000f94:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000f96:              c388                     sw      a0,0(a5)
e0000f98:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
e0000f9a:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e0000f9c:       /----- c989                     beqz    a1,e0000fae <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
e0000f9e:       |  /-> 4512                     lw      a0,4(sp)
e0000fa0:       |  |   00450613                 addi    a2,a0,4
e0000fa4:       |  |   c232                     sw      a2,4(sp)
e0000fa6:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e0000fa8:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000faa:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
e0000fac:       |  \-- f9ed                     bnez    a1,e0000f9e <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
e0000fae:       \----> 6105                     addi    sp,sp,32
e0000fb0:              8082                     ret

e0000fb2 <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
e0000fb2:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
e0000fb4:       8082                    ret

e0000fb6 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84
void base_uart_stdout(const dif_uart_t *uart) {
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}

size_t base_printf(const char *format, ...) {
e0000fb6:       7179                    addi    sp,sp,-48
e0000fb8:       c606                    sw      ra,12(sp)
e0000fba:       d646                    sw      a7,44(sp)
e0000fbc:       d442                    sw      a6,40(sp)
e0000fbe:       d23e                    sw      a5,36(sp)
e0000fc0:       d03a                    sw      a4,32(sp)
e0000fc2:       ce36                    sw      a3,28(sp)
e0000fc4:       cc32                    sw      a2,24(sp)
e0000fc6:       ca2e                    sw      a1,20(sp)
e0000fc8:       00001597                auipc   a1,0x1
e0000fcc:       36858593                addi    a1,a1,872 # e0002330 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
e0000fd0:       4190                    lw      a2,0(a1)
e0000fd2:       41cc                    lw      a1,4(a1)
e0000fd4:       872a                    mv      a4,a0
e0000fd6:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
e0000fd8:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e0000fda:       0854                    addi    a3,sp,20
e0000fdc:       8532                    mv      a0,a2
e0000fde:       863a                    mv      a2,a4
e0000fe0:       200d                    jal     e0001002 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
e0000fe2:       40b2                    lw      ra,12(sp)
e0000fe4:       6145                    addi    sp,sp,48
e0000fe6:       8082                    ret

e0000fe8 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
e0000fe8:       00001697                auipc   a3,0x1
e0000fec:       34868693                addi    a3,a3,840 # e0002330 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e0000ff0:       4290                    lw      a2,0(a3)
e0000ff2:       42d4                    lw      a3,4(a3)
e0000ff4:       872e                    mv      a4,a1
e0000ff6:       87aa                    mv      a5,a0
e0000ff8:       8532                    mv      a0,a2
e0000ffa:       85b6                    mv      a1,a3
e0000ffc:       863e                    mv      a2,a5
e0000ffe:       86ba                    mv      a3,a4
e0001000:       a009                    j       e0001002 <base_vfprintf>

e0001002 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
e0001002:                                                                    715d                       addi    sp,sp,-80
e0001004:                                                                    c686                       sw      ra,76(sp)
e0001006:                                                                    c4a2                       sw      s0,72(sp)
e0001008:                                                                    c2a6                       sw      s1,68(sp)
e000100a:                                                                    c0ca                       sw      s2,64(sp)
e000100c:                                                                    de4e                       sw      s3,60(sp)
e000100e:                                                                    dc52                       sw      s4,56(sp)
e0001010:                                                                    da56                       sw      s5,52(sp)
e0001012:                                                                    d85a                       sw      s6,48(sp)
e0001014:                                                                    d65e                       sw      s7,44(sp)
e0001016:                                                                    d462                       sw      s8,40(sp)
e0001018:                                                                    d266                       sw      s9,36(sp)
e000101a:                                                                    d06a                       sw      s10,32(sp)
e000101c:                                                                    ce6e                       sw      s11,28(sp)
e000101e:                                                                    8cb2                       mv      s9,a2
e0001020:                                                                    892a                       mv      s2,a0
e0001022:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
e0001024:                                                                /-- c199                       beqz    a1,e000102a <base_vfprintf+0x28>
e0001026:                                                                |   89ae                       mv      s3,a1
e0001028:                                                             /--|-- a029                       j       e0001032 <base_vfprintf+0x30>
e000102a:                                                             |  \-> 00000997           auipc   s3,0x0
e000102e:                                                             |      f8898993           addi    s3,s3,-120 # e0000fb2 <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
e0001032:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
e0001034:                                                                    000cc503           lbu     a0,0(s9)
e0001038:       /----------------------------------------------------------- 42050563           beqz    a0,e0001462 <base_vfprintf+0x460>
e000103c:       |                                                            4a81                       li      s5,0
e000103e:       |                                                            02500c13           li      s8,37
e0001042:       |                                                            4d25                       li      s10,9
e0001044:       |                                                            4a29                       li      s4,10
e0001046:       |                                                            658d                       lui     a1,0x3
e0001048:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_min_stack+0xc22>
e000104c:       |                                                            c02e                       sw      a1,0(sp)
e000104e:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
e0001050:       |        |                                               /-> 0ff57413           andi    s0,a0,255
e0001054:       |        |                                            /--|-- 01840963           beq     s0,s8,e0001066 <base_vfprintf+0x64>
e0001058:       |        |                                            +--|-- c419                       beqz    s0,e0001066 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
e000105a:       |        |                                            |  |   009c8533           add     a0,s9,s1
e000105e:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
e0001062:       |        |                                            |  |   0485                       addi    s1,s1,1
e0001064:       |        |                                            |  \-- b7f5                       j       e0001050 <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
e0001066:       |        |                                            \--/-X c491                       beqz    s1,e0001072 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
e0001068:       |        |                                               |   854a                       mv      a0,s2
e000106a:       |        |                                               |   85e6                       mv      a1,s9
e000106c:       |        |                                               |   8626                       mv      a2,s1
e000106e:       |        |                                               |   9982                       jalr    s3
e0001070:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
e0001072:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,e0001464 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
e0001076:       |  |     |                                                   009c8533           add     a0,s9,s1
e000107a:       |  |     |                                                   00154603           lbu     a2,1(a0)
e000107e:       |  |     |                                                   02100713           li      a4,33
e0001082:       |  |     |                                            /----- 00e61863           bne     a2,a4,e0001092 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e0001086:       |  |     |                                            |      00254583           lbu     a1,2(a0)
e000108a:       |  |     |                                            |      00250693           addi    a3,a0,2
e000108e:       |  |     |                                            |      4b05                       li      s6,1
e0001090:       |  |     |                                            |  /-- a029                       j       e000109a <base_vfprintf+0x98>
e0001092:       |  |     |                                            \--|-> 4b01                       li      s6,0
e0001094:       |  |     |                                               |   00150693           addi    a3,a0,1
e0001098:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e000109a:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,e0001450 <base_vfprintf+0x44e>
e000109e:       |  |  |  |                                                   4481                       li      s1,0
e00010a0:       |  |  |  |                                                   4b81                       li      s7,0
e00010a2:       |  |  |  |                                                   4501                       li      a0,0
e00010a4:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
e00010a8:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
e00010ac:       |  |  |  |                                                   00168c93           addi    s9,a3,1
e00010b0:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
e00010b4:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e00010b8:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
e00010bc:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,e00010f2 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
e00010c0:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
e00010c4:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,e00010da <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
e00010c6:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
e00010ca:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
e00010cc:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e00010d0:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e00010d4:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
e00010d6:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,e00010b0 <base_vfprintf+0xae>
e00010d8:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       e0001450 <base_vfprintf+0x44e>
e00010da:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
e00010de:       |  |  |  |                                   |     |  |      03000613           li      a2,48
e00010e2:       |  |  |  |                                   |     |  |      02000513           li      a0,32
e00010e6:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,e00010c6 <base_vfprintf+0xc4>
e00010ea:       |  |  |  |                                   |     |         03000513           li      a0,48
e00010ee:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
e00010f0:       |  |  |  |                                   |     \-------- b7c5                       j       e00010d0 <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
e00010f2:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,e00010fa <base_vfprintf+0xf8>
e00010f4:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,e0001102 <base_vfprintf+0x100>
e00010f8:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       e0001484 <base_vfprintf+0x482>
e00010fa:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
e00010fe:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,e0001484 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0001102:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
e0001106:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,e0001158 <base_vfprintf+0x156>
e000110a:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
e000110c:       |  |  |  |  |                                         |      00001597           auipc   a1,0x1
e0001110:       |  |  |  |  |                                         |      ecc58593           addi    a1,a1,-308 # e0001fd8 <kExpectedHmacDigest+0x408>
e0001114:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
e0001116:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
e0001118:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
e000111a:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,e00013d2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
e000111e:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
e0001120:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
e0001124:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
e0001126:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
e000112a:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,e0001142 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
e000112e:       |  |  |  |  |  |                                      |  |   00001597           auipc   a1,0x1
e0001132:       |  |  |  |  |  |                                      |  |   f4158593           addi    a1,a1,-191 # e000206f <kExpectedHmacDigest+0x49f>
e0001136:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
e0001138:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
e000113a:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
e000113c:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
e000113e:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0001142:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
e0001146:       |  |  |  |  |  |                                      |      00001817           auipc   a6,0x1
e000114a:       |  |  |  |  |  |                                      |      f4280813           addi    a6,a6,-190 # e0002088 <kDigitsLow>
e000114e:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
e0001150:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
e0001152:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
e0001154:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
e0001156:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       e000139e <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0001158:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
e000115c:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,e0001196 <base_vfprintf+0x194>
e0001160:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,e00013d2 <base_vfprintf+0x3d0>
e0001164:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,e00013d2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
e0001168:       |  |  |  |  |  |        |                                |   00001597           auipc   a1,0x1
e000116c:       |  |  |  |  |  |        |                                |   f0558593           addi    a1,a1,-251 # e000206d <kExpectedHmacDigest+0x49d>
e0001170:       |  |  |  |  |  |        |                             /--|-- a851                       j       e0001204 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
e0001172:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,e0001196 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
e0001176:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
e0001178:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
e000117c:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e000117e:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
e0001180:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
e0001184:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e0001186:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0001188:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
e000118c:       |  |  |  |  |  |        |                             |  |   00001897           auipc   a7,0x1
e0001190:       |  |  |  |  |  |        |                             |  |   f2988893           addi    a7,a7,-215 # e00020b5 <kDigitsHigh>
e0001194:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       e0001378 <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
e0001196:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
e0001198:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
e000119c:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
e000119e:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
e00011a0:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
e00011a4:       |  |  |  |  |  |        |           |                 |      00001817           auipc   a6,0x1
e00011a8:       |  |  |  |  |  |        |           |                 |      f1180813           addi    a6,a6,-239 # e00020b5 <kDigitsHigh>
e00011ac:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       e0001398 <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
e00011ae:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,e00013d2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
e00011b2:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
e00011b4:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
e00011b8:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e00011ba:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
e00011bc:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
e00011c0:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e00011c2:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e00011c4:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
e00011c8:       |  |  |  |  |  |        |        |  |                 |      00001897           auipc   a7,0x1
e00011cc:       |  |  |  |  |  |        |        |  |                 |      eed88893           addi    a7,a7,-275 # e00020b5 <kDigitsHigh>
e00011d0:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       e00013c6 <base_vfprintf+0x3c4>
e00011d2:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
e00011d4:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
e00011d8:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
e00011da:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
e00011dc:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,e00013ec <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
e00011e0:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,e0001444 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
e00011e4:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00001597           auipc   a1,0x1
e00011e8:       |  |  |  |  |  |  |     |  |  |  |  |                 |      e9058593           addi    a1,a1,-368 # e0002074 <kExpectedHmacDigest+0x4a4>
e00011ec:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
e00011ee:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       e00013dc <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
e00011f0:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,e00013d2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
e00011f4:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
e00011f6:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
e00011fa:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
e00011fc:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
e00011fe:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
e0001202:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
e0001204:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
e0001206:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       e00013dc <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
e0001208:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,e00013d2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
e000120c:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
e000120e:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
e0001212:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
e0001214:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
e0001216:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
e000121a:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00001817           auipc   a6,0x1
e000121e:       |  |  |  |  |  |  |  |  |  |  |  |  |                        e6e80813           addi    a6,a6,-402 # e0002088 <kDigitsLow>
e0001222:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
e0001224:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       e000139a <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
e0001226:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,e00013d2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e000122a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001597           auipc   a1,0x1
e000122e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     e4758593           addi    a1,a1,-441 # e0002071 <kExpectedHmacDigest+0x4a1>
e0001232:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
e0001234:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0001236:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
e0001238:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
e000123a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
e000123e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
e0001240:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0001242:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
e0001246:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001817           auipc   a6,0x1
e000124a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     e4280813           addi    a6,a6,-446 # e0002088 <kDigitsLow>
e000124e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
e0001250:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
e0001254:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
e0001256:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0001258:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
e000125a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     e0001574 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
e000125c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
e0001260:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       e00013e2 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
e0001262:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
e0001264:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
e0001268:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
e000126a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
e000126c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
e000126e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
e0001272:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
e0001276:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e0001278:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
e000127a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
e000127c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
e0001280:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     e00015f2 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
e0001282:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e0001284:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e0001286:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
e000128a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
e000128e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e0001290:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
e0001292:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,e000128a <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e0001294:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
e0001298:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e000129c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  de758593           addi    a1,a1,-537 # e000207f <kExpectedHmacDigest+0x4af>
e00012a0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00012a2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e00012a4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e00012a6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e00012a8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
e00012ac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00012ae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e00012b0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
e00012b4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e00012b8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  dcc58593           addi    a1,a1,-564 # e0002080 <kExpectedHmacDigest+0x4b0>
e00012bc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00012be:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
e00012c0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e00012c2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
e00012c4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e00012c8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  da058593           addi    a1,a1,-608 # e0002064 <kExpectedHmacDigest+0x494>
e00012cc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
e00012ce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e00012d0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e00012d2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
e00012d6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,e00013fc <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
e00012da:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e00012de:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               da858593           addi    a1,a1,-600 # e0002082 <kExpectedHmacDigest+0x4b2>
e00012e2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e00012e4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00012e6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e00012e8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e00012ec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
e00012ee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
e00012f0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e00012f2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00012f4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e00012f6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00012f8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001817           auipc   a6,0x1
e00012fc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               d9080813           addi    a6,a6,-624 # e0002088 <kDigitsLow>
e0001300:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
e0001302:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0001304:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
e0001306:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
e0001308:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
e000130a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     e0001574 <write_digits>
e000130c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
e000130e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e0001312:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               d7658593           addi    a1,a1,-650 # e0002084 <kExpectedHmacDigest+0x4b4>
e0001316:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e0001318:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e000131a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e000131c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
e000131e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       e0001416 <base_vfprintf+0x414>
e0001320:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
e0001322:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
e0001326:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
e0001328:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,e000142e <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
e000132c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e000132e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
e0001332:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0001334:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
e0001336:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       e00013dc <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
e0001338:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,e00013d2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
e000133c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
e000133e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
e0001342:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0001344:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0001346:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
e000134a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00001817           auipc   a6,0x1
e000134e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         d3e80813           addi    a6,a6,-706 # e0002088 <kDigitsLow>
e0001352:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
e0001354:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       e000139a <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
e0001356:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,e0001382 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
e000135a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
e000135c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
e0001360:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0001362:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
e0001364:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
e0001368:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e000136a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e000136c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
e0001370:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00001897           auipc   a7,0x1
e0001374:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   d1888893           addi    a7,a7,-744 # e0002088 <kDigitsLow>
e0001378:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
e000137a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
e000137c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
e000137e:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
e0001380:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       e00013ce <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
e0001382:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
e0001384:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
e0001388:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
e000138a:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
e000138c:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
e0001390:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00001817           auipc   a6,0x1
e0001394:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      cf880813           addi    a6,a6,-776 # e0002088 <kDigitsLow>
e0001398:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
e000139a:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
e000139c:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
e000139e:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
e00013a0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     e0001574 <write_digits>
e00013a2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       e00013e0 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
e00013a4:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,e00013d2 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
e00013a8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
e00013aa:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
e00013ae:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e00013b0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
e00013b2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
e00013b6:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e00013b8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e00013ba:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
e00013be:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00001897           auipc   a7,0x1
e00013c2:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   cca88893           addi    a7,a7,-822 # e0002088 <kDigitsLow>
e00013c6:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
e00013c8:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
e00013ca:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
e00013cc:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
e00013ce:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     e0001490 <hex_dump>
e00013d0:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       e00013e0 <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
e00013d2:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00001597           auipc   a1,0x1
e00013d6:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   cf358593           addi    a1,a1,-781 # e00020c5 <kUnknownSpec>
e00013da:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
e00013dc:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
e00013de:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
e00013e0:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
e00013e2:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
e00013e6:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,e000104e <base_vfprintf+0x4c>
e00013ea:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       e0001464 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
e00013ec:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
e00013f0:       |  |  |     |     |  |                 |  |  |  |  |         00001817           auipc   a6,0x1
e00013f4:       |  |  |     |     |  |                 |  |  |  |  |         c9880813           addi    a6,a6,-872 # e0002088 <kDigitsLow>
e00013f8:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
e00013fa:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       e000139a <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e00013fc:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
e00013fe:       |  |  |     |     |  |                    |     |  |         00001817           auipc   a6,0x1
e0001402:       |  |  |     |     |  |                    |     |  |         c8a80813           addi    a6,a6,-886 # e0002088 <kDigitsLow>
e0001406:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
e0001408:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
e000140a:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
e000140c:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
e000140e:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
e0001410:       |  |  |     |     |  |                    |     |  |         2295                       jal     e0001574 <write_digits>
e0001412:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
e0001416:       |  |  |     |     |  |                    |     |  \-------> 00001597           auipc   a1,0x1
e000141a:       |  |  |     |     |  |                    |     |            c7058593           addi    a1,a1,-912 # e0002086 <kExpectedHmacDigest+0x4b6>
e000141e:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
e0001420:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
e0001422:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
e0001424:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
e0001428:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
e000142c:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       e00013e2 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e000142e:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
e0001430:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e0001432:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
e0001436:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
e000143a:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e000143c:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,e0001432 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
e000143e:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
e0001442:       |  |  |     |     |  +-------------------------------------- bf69                       j       e00013dc <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
e0001444:       |  |  |     |     \--|-------------------------------------> 00001597           auipc   a1,0x1
e0001448:       |  |  |     |        |                                       c3558593           addi    a1,a1,-971 # e0002079 <kExpectedHmacDigest+0x4a9>
e000144c:       |  |  |     |        |                                       4615                       li      a2,5
e000144e:       |  |  |     |        \-------------------------------------- b779                       j       e00013dc <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
e0001450:       |  |  \-----|----------------------------------------------> 00001597           auipc   a1,0x1
e0001454:       |  |        |                                                c4858593           addi    a1,a1,-952 # e0002098 <kErrorNul>
e0001458:       |  |        |                                                4645                       li      a2,17
e000145a:       |  |        |                                            /-> 854a                       mv      a0,s2
e000145c:       |  |        |                                            |   9982                       jalr    s3
e000145e:       |  |        |                                            |   9aaa                       add     s5,s5,a0
e0001460:       |  +--------|--------------------------------------------|-- a011                       j       e0001464 <base_vfprintf+0x462>
e0001462:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
e0001464:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
e0001466:                   |                                            |   4df2                       lw      s11,28(sp)
e0001468:                   |                                            |   5d02                       lw      s10,32(sp)
e000146a:                   |                                            |   5c92                       lw      s9,36(sp)
e000146c:                   |                                            |   5c22                       lw      s8,40(sp)
e000146e:                   |                                            |   5bb2                       lw      s7,44(sp)
e0001470:                   |                                            |   5b42                       lw      s6,48(sp)
e0001472:                   |                                            |   5ad2                       lw      s5,52(sp)
e0001474:                   |                                            |   5a62                       lw      s4,56(sp)
e0001476:                   |                                            |   59f2                       lw      s3,60(sp)
e0001478:                   |                                            |   4906                       lw      s2,64(sp)
e000147a:                   |                                            |   4496                       lw      s1,68(sp)
e000147c:                   |                                            |   4426                       lw      s0,72(sp)
e000147e:                   |                                            |   40b6                       lw      ra,76(sp)
e0001480:                   |                                            |   6161                       addi    sp,sp,80
e0001482:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
e0001484:                   \--------------------------------------------|-> 00001597           auipc   a1,0x1
e0001488:                                                                |   c2558593           addi    a1,a1,-987 # e00020a9 <kErrorTooWide>
e000148c:                                                                |   4631                       li      a2,12
e000148e:                                                                \-- b7f1                       j       e000145a <base_vfprintf+0x458>

e0001490 <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
e0001490:                    715d                       addi    sp,sp,-80
e0001492:                    c686                       sw      ra,76(sp)
e0001494:                    c4a2                       sw      s0,72(sp)
e0001496:                    c2a6                       sw      s1,68(sp)
e0001498:                    c0ca                       sw      s2,64(sp)
e000149a:                    de4e                       sw      s3,60(sp)
e000149c:                    dc52                       sw      s4,56(sp)
e000149e:                    da56                       sw      s5,52(sp)
e00014a0:                    d85a                       sw      s6,48(sp)
e00014a2:                    d65e                       sw      s7,44(sp)
e00014a4:                    d462                       sw      s8,40(sp)
e00014a6:                    d266                       sw      s9,36(sp)
e00014a8:                    d06a                       sw      s10,32(sp)
e00014aa:                    8bc6                       mv      s7,a7
e00014ac:                    8a42                       mv      s4,a6
e00014ae:                    8b36                       mv      s6,a3
e00014b0:                    8ab2                       mv      s5,a2
e00014b2:                    892e                       mv      s2,a1
e00014b4:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
e00014b6:          /-------- 02e6fc63           bgeu    a3,a4,e00014ee <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
e00014ba:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
e00014be:          |         850a                       mv      a0,sp
e00014c0:          |         02000613           li      a2,32
e00014c4:          |         85be                       mv      a1,a5
e00014c6:          |         2cd9                       jal     e000179c <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e00014c8:          +-------- c09d                       beqz    s1,e00014ee <hex_dump+0x5e>
e00014ca:          |         4c01                       li      s8,0
e00014cc:          |  /----> 02000513           li      a0,32
e00014d0:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
e00014d2:          |  |  /-- 00a4e463           bltu    s1,a0,e00014da <hex_dump+0x4a>
e00014d6:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e00014da:          |  |  \-> 858a                       mv      a1,sp
e00014dc:          |  |      854e                       mv      a0,s3
e00014de:          |  |      8622                       mv      a2,s0
e00014e0:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
e00014e2:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e00014e4:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e00014e6:          |  \----- f0fd                       bnez    s1,e00014cc <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e00014e8:          |     /-- 000b1663           bnez    s6,e00014f4 <hex_dump+0x64>
e00014ec:       /--|-----|-- a0ad                       j       e0001556 <hex_dump+0xc6>
e00014ee:       |  \-----|-> 4c01                       li      s8,0
e00014f0:       +--------|-- 060b0363           beqz    s6,e0001556 <hex_dump+0xc6>
e00014f4:       |        \-> 4401                       li      s0,0
e00014f6:       |            4601                       li      a2,0
e00014f8:       |            fffb0493           addi    s1,s6,-1
e00014fc:       |            8b0a                       mv      s6,sp
e00014fe:       |            02000c93           li      s9,32
e0001502:       |            5d7d                       li      s10,-1
e0001504:       |     /----> 8526                       mv      a0,s1
e0001506:       |     |  /-- 000a1363           bnez    s4,e000150c <hex_dump+0x7c>
e000150a:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
e000150c:       |     |  \-> 9556                       add     a0,a0,s5
e000150e:       |     |      00054503           lbu     a0,0(a0)
e0001512:       |     |      00455593           srli    a1,a0,0x4
e0001516:       |     |      95de                       add     a1,a1,s7
e0001518:       |     |      00058583           lb      a1,0(a1)
e000151c:       |     |      00cb06b3           add     a3,s6,a2
e0001520:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e0001524:       |     |      893d                       andi    a0,a0,15
e0001526:       |     |      955e                       add     a0,a0,s7
e0001528:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
e000152c:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e000152e:       |     |      00a680a3           sb      a0,1(a3)
e0001532:       |     |  /-- 01961963           bne     a2,s9,e0001544 <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
e0001536:       |     |  |   858a                       mv      a1,sp
e0001538:       |     |  |   02000613           li      a2,32
e000153c:       |     |  |   854e                       mv      a0,s3
e000153e:       |     |  |   9902                       jalr    s2
e0001540:       |     |  |   4601                       li      a2,0
e0001542:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e0001544:       |     |  \-> 14fd                       addi    s1,s1,-1
e0001546:       |     |      0405                       addi    s0,s0,1
e0001548:       |     \----- fba49ee3           bne     s1,s10,e0001504 <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
e000154c:       +----------- c609                       beqz    a2,e0001556 <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
e000154e:       |            858a                       mv      a1,sp
e0001550:       |            854e                       mv      a0,s3
e0001552:       |            9902                       jalr    s2
e0001554:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
e0001556:       \----------> 8562                       mv      a0,s8
e0001558:                    5d02                       lw      s10,32(sp)
e000155a:                    5c92                       lw      s9,36(sp)
e000155c:                    5c22                       lw      s8,40(sp)
e000155e:                    5bb2                       lw      s7,44(sp)
e0001560:                    5b42                       lw      s6,48(sp)
e0001562:                    5ad2                       lw      s5,52(sp)
e0001564:                    5a62                       lw      s4,56(sp)
e0001566:                    59f2                       lw      s3,60(sp)
e0001568:                    4906                       lw      s2,64(sp)
e000156a:                    4496                       lw      s1,68(sp)
e000156c:                    4426                       lw      s0,72(sp)
e000156e:                    40b6                       lw      ra,76(sp)
e0001570:                    6161                       addi    sp,sp,80
e0001572:                    8082                       ret

e0001574 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
e0001574:              7179                     addi    sp,sp,-48
e0001576:              d606                     sw      ra,44(sp)
e0001578:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
e000157a:       /----- ca05                     beqz    a2,e00015aa <write_digits+0x36>
e000157c:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e000157e:       |      02b10293                 addi    t0,sp,43
e0001582:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
e0001584:       |  |   02f65633                 divu    a2,a2,a5
e0001588:       |  |   02f605b3                 mul     a1,a2,a5
e000158c:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
e0001590:       |  |   95c2                     add     a1,a1,a6
e0001592:       |  |   00058e03                 lb      t3,0(a1)
e0001596:       |  |   007285b3                 add     a1,t0,t2
e000159a:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e000159e:       |  |   13fd                     addi    t2,t2,-1
e00015a0:       |  \-- fef371e3                 bgeu    t1,a5,e0001582 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e00015a4:       |      40700633                 neg     a2,t2
e00015a8:       |  /-- a031                     j       e00015b4 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
e00015aa:       \--|-> 00080583                 lb      a1,0(a6)
e00015ae:          |   02b105a3                 sb      a1,43(sp)
e00015b2:          |   4605                     li      a2,1
e00015b4:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e00015b6:          /-- c291                     beqz    a3,e00015ba <write_digits+0x46>
e00015b8:          |   85b6                     mv      a1,a3
e00015ba:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
e00015be:          /-- 00d5e463                 bltu    a1,a3,e00015c6 <write_digits+0x52>
e00015c2:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e00015c6:       /--\-X 00b67e63                 bgeu    a2,a1,e00015e2 <write_digits+0x6e>
e00015ca:       |      40c586b3                 sub     a3,a1,a2
e00015ce:       |      007c                     addi    a5,sp,12
e00015d0:       |      40c78633                 sub     a2,a5,a2
e00015d4:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
e00015d6:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e00015da:       |  |   16fd                     addi    a3,a3,-1
e00015dc:       |  |   167d                     addi    a2,a2,-1
e00015de:       |  \-- fee5                     bnez    a3,e00015d6 <write_digits+0x62>
e00015e0:       |      862e                     mv      a2,a1
e00015e2:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
e00015e4:              8d91                     sub     a1,a1,a2
e00015e6:              02058593                 addi    a1,a1,32
e00015ea:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
e00015ec:              50b2                     lw      ra,44(sp)
e00015ee:              6145                     addi    sp,sp,48
e00015f0:              8082                     ret

e00015f2 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
e00015f2:              00052813                 slti    a6,a0,0
e00015f6:              41f55793                 srai    a5,a0,0x1f
e00015fa:              8fe9                     and     a5,a5,a0
e00015fc:              8bfd                     andi    a5,a5,31
e00015fe:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
e0001602:              00e87833                 and     a6,a6,a4
e0001606:              02000713                 li      a4,32
e000160a:          /-- 00081363                 bnez    a6,e0001610 <status_extract+0x1e>
e000160e:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
e0001610:          \-> 00271813                 slli    a6,a4,0x2
e0001614:              00001797                 auipc   a5,0x1
e0001618:              c9478793                 addi    a5,a5,-876 # e00022a8 <status_codes>
e000161c:              97c2                     add     a5,a5,a6
e000161e:              439c                     lw      a5,0(a5)
e0001620:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
e0001622:              00173593                 seqz    a1,a4
e0001626:       /----- cb1d                     beqz    a4,e000165c <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e0001628:       |      00555713                 srli    a4,a0,0x5
e000162c:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
e0001630:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e0001632:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
e0001636:       |      8a7d                     andi    a2,a2,31
e0001638:       |      04066613                 ori     a2,a2,64
e000163c:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
e0001640:       |      01555613                 srli    a2,a0,0x15
e0001644:       |      8a7d                     andi    a2,a2,31
e0001646:       |      04066613                 ori     a2,a2,64
e000164a:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
e000164e:       |      8169                     srli    a0,a0,0x1a
e0001650:       |      897d                     andi    a0,a0,31
e0001652:       |      04056513                 ori     a0,a0,64
e0001656:       |      00a68123                 sb      a0,2(a3)
e000165a:       |  /-- a011                     j       e000165e <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
e000165c:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
e000165e:          \-> 0015c513                 xori    a0,a1,1
e0001662:              8082                     ret

e0001664 <udiv64_slow>:
udiv64_slow():
/proc/self/cwd/sw/device/lib/base/math.c:9

#include "sw/device/lib/base/math.h"

#include <stddef.h>

uint64_t udiv64_slow(uint64_t a, uint64_t b, uint64_t *rem_out) {
e0001664:                 1141                  addi    sp,sp,-16
e0001666:                 c622                  sw      s0,12(sp)
e0001668:                 c426                  sw      s1,8(sp)
e000166a:                 c24a                  sw      s2,4(sp)
e000166c:                 4881                  li      a7,0
e000166e:                 4801                  li      a6,0
e0001670:                 4e01                  li      t3,0
e0001672:                 4e81                  li      t4,0
e0001674:                 03f00793              li      a5,63
e0001678:                 42fd                  li      t0,31
e000167a:                 00159313              slli    t1,a1,0x1
e000167e:                 53fd                  li      t2,-1
/proc/self/cwd/sw/device/lib/base/math.c:23
  // upon.
  size_t bits = sizeof(uint64_t) * 8;
  for (size_t i = 0; i < bits; ++i) {
    rem <<= 1;
    quot <<= 1;
    rem |= (a >> (bits - i - 1)) & 1;
e0001680:       /-------> fe078493              addi    s1,a5,-32
e0001684:       |     /-- 0004c563              bltz    s1,e000168e <udiv64_slow+0x2a>
e0001688:       |     |   0095df33              srl     t5,a1,s1
e000168c:       |  /--|-- a809                  j       e000169e <udiv64_slow+0x3a>
e000168e:       |  |  \-> 00f554b3              srl     s1,a0,a5
e0001692:       |  |      40f28433              sub     s0,t0,a5
e0001696:       |  |      00831433              sll     s0,t1,s0
e000169a:       |  |      0084ef33              or      t5,s1,s0
e000169e:       |  \----> 01fe5493              srli    s1,t3,0x1f
e00016a2:       |         001e9413              slli    s0,t4,0x1
e00016a6:       |         00946eb3              or      t4,s0,s1
e00016aa:       |         001e1493              slli    s1,t3,0x1
e00016ae:       |         001f7413              andi    s0,t5,1
e00016b2:       |         00946f33              or      t5,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:29

    // We need to keep bringing down zeros until `rem`, the running total, is
    // large enough that we can subtract off `b`; this tells us the value we
    // would have had to multiply `a` by to produce this current step in the
    // division.
    if (rem >= b) {
e00016b6:       |  /----- 00de8563              beq     t4,a3,e00016c0 <udiv64_slow+0x5c>
e00016ba:       |  |      00debe33              sltu    t3,t4,a3
e00016be:       |  |  /-- a019                  j       e00016c4 <udiv64_slow+0x60>
e00016c0:       |  \--|-> 00cf3e33              sltu    t3,t5,a2
e00016c4:       |     \-> 001e4f93              xori    t6,t3,1
e00016c8:       |         4901                  li      s2,0
e00016ca:       |         4481                  li      s1,0
e00016cc:       |     /-- 000e1463              bnez    t3,e00016d4 <udiv64_slow+0x70>
e00016d0:       |     |   8936                  mv      s2,a3
e00016d2:       |     |   84b2                  mv      s1,a2
e00016d4:       |     \-> 01f8de13              srli    t3,a7,0x1f
e00016d8:       |         00181413              slli    s0,a6,0x1
e00016dc:       |         01c46833              or      a6,s0,t3
e00016e0:       |         0886                  slli    a7,a7,0x1
e00016e2:       |         409f0e33              sub     t3,t5,s1
e00016e6:       |         009f34b3              sltu    s1,t5,s1
e00016ea:       |         412e8433              sub     s0,t4,s2
e00016ee:       |         40940eb3              sub     t4,s0,s1
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
e00016f2:       |         17fd                  addi    a5,a5,-1
/proc/self/cwd/sw/device/lib/base/math.c:29
    if (rem >= b) {
e00016f4:       |         01f8e8b3              or      a7,a7,t6
/proc/self/cwd/sw/device/lib/base/math.c:20
  for (size_t i = 0; i < bits; ++i) {
e00016f8:       \-------- f87794e3              bne     a5,t2,e0001680 <udiv64_slow+0x1c>
/proc/self/cwd/sw/device/lib/base/math.c:35
      rem -= b;
      quot |= 1;
    }
  }

  if (rem_out != NULL) {
e00016fc:             /-- c709                  beqz    a4,e0001706 <udiv64_slow+0xa2>
/proc/self/cwd/sw/device/lib/base/math.c:36
    *rem_out = rem;
e00016fe:             |   01c72023              sw      t3,0(a4)
e0001702:             |   01d72223              sw      t4,4(a4)
/proc/self/cwd/sw/device/lib/base/math.c:38
  }
  return quot;
e0001706:             \-> 8546                  mv      a0,a7
e0001708:                 85c2                  mv      a1,a6
e000170a:                 4912                  lw      s2,4(sp)
e000170c:                 44a2                  lw      s1,8(sp)
e000170e:                 4432                  lw      s0,12(sp)
e0001710:                 0141                  addi    sp,sp,16
e0001712:                 8082                  ret

e0001714 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
e0001714:                       00153693                seqz    a3,a0
e0001718:                       0015b713                seqz    a4,a1
e000171c:                       8ed9                    or      a3,a3,a4
e000171e:       /-------------- eab5                    bnez    a3,e0001792 <memcpy+0x7e>
e0001720:       |               4711                    li      a4,4
e0001722:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001724:       |        /----- 00e66c63                bltu    a2,a4,e000173c <memcpy+0x28>
e0001728:       |        |      00a5c6b3                xor     a3,a1,a0
e000172c:       |        |      0036f793                andi    a5,a3,3
e0001730:       |        |      8832                    mv      a6,a2
e0001732:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
e0001734:       |        |  /-- eb91                    bnez    a5,e0001748 <memcpy+0x34>
e0001736:       |        |  |   40a006b3                neg     a3,a0
e000173a:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e000173c:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e0001740:       |           |   9b71                    andi    a4,a4,-4
e0001742:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001746:       |  /--------|-- c6b9                    beqz    a3,e0001794 <memcpy+0x80>
e0001748:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e000174a:       |  |        /-> 00f58733                add     a4,a1,a5
e000174e:       |  |        |   00070883                lb      a7,0(a4)
e0001752:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e0001756:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e0001758:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e000175c:       |  |        \-- fef697e3                bne     a3,a5,e000174a <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001760:       |  |  /-------- 0106fb63                bgeu    a3,a6,e0001776 <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001764:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0001768:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
 */
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000176a:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e000176e:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0001770:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e0001772:       |  |  |  +----- ff06e9e3                bltu    a3,a6,e0001764 <memcpy+0x50>
e0001776:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,e0001792 <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
e000177a:       |  |  |  |      8e15                    sub     a2,a2,a3
e000177c:       |  |  |  |      00d50733                add     a4,a0,a3
e0001780:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
e0001782:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
e0001786:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
e000178a:       |  |  |  |  |   167d                    addi    a2,a2,-1
e000178c:       |  |  |  |  |   0705                    addi    a4,a4,1
e000178e:       |  |  |  |  |   0585                    addi    a1,a1,1
e0001790:       |  |  |  |  \-- fa6d                    bnez    a2,e0001782 <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
e0001792:       \--|--|--|----> 8082                    ret
e0001794:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001796:             |  \----- fd06e7e3                bltu    a3,a6,e0001764 <memcpy+0x50>
e000179a:             \-------- bff1                    j       e0001776 <memcpy+0x62>

e000179c <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
e000179c:                 4691                  li      a3,4
e000179e:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e00017a0:             /-- 00d66663              bltu    a2,a3,e00017ac <memset+0x10>
e00017a4:             |   40a006b3              neg     a3,a0
e00017a8:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e00017ac:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e00017b0:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e00017b4:          /----- cb01                  beqz    a4,e00017c4 <memset+0x28>
e00017b6:          |      87aa                  mv      a5,a0
e00017b8:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
e00017ba:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
e00017be:          |  |   16fd                  addi    a3,a3,-1
e00017c0:          |  |   0785                  addi    a5,a5,1
e00017c2:          |  \-- fee5                  bnez    a3,e00017ba <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e00017c4:       /--\----X 02080263              beqz    a6,e00017e8 <memset+0x4c>
e00017c8:       |         00e808b3              add     a7,a6,a4
e00017cc:       |         0ff5f813              andi    a6,a1,255
e00017d0:       |         010107b7              lui     a5,0x1010
e00017d4:       |         10178793              addi    a5,a5,257 # 1010101 <tohost+0xff00f9>
e00017d8:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e00017dc:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e00017e0:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e00017e2:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e00017e4:       |     \-- ff176ce3              bltu    a4,a7,e00017dc <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
e00017e8:       \--/----X 00c77a63              bgeu    a4,a2,e00017fc <memset+0x60>
e00017ec:          |      8e19                  sub     a2,a2,a4
e00017ee:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
e00017f2:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
e00017f6:          |  |   167d                  addi    a2,a2,-1
e00017f8:          |  |   0685                  addi    a3,a3,1
e00017fa:          |  \-- fe65                  bnez    a2,e00017f2 <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
e00017fc:          \----> 8082                  ret

e00017fe <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
e00017fe:                             4691                      li      a3,4
e0001800:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001802:                         /-- 00d66663                  bltu    a2,a3,e000180e <memchr+0x10>
e0001806:                         |   40a006b3                  neg     a3,a0
e000180a:                         |   0036fe93                  andi    t4,a3,3
e000180e:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001812:                      /----- 000e8b63                  beqz    t4,e0001828 <memchr+0x2a>
e0001816:                      |      85aa                      mv      a1,a0
e0001818:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
e000181a:                      |  /-> 0005c683                  lbu     a3,0(a1)
e000181e:       /--------------|--|-- 09c68563                  beq     a3,t3,e00018a8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
e0001822:       |              |  |   17fd                      addi    a5,a5,-1
e0001824:       |              |  |   0585                      addi    a1,a1,1
e0001826:       |              |  \-- fbf5                      bnez    a5,e000181a <memchr+0x1c>
e0001828:       |              \----> 41d605b3                  sub     a1,a2,t4
e000182c:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e000182e:       |  /----------------- c9a9                      beqz    a1,e0001880 <memchr+0x82>
e0001830:       |  |                  01d58833                  add     a6,a1,t4
e0001834:       |  |                  010105b7                  lui     a1,0x1010
e0001838:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
e000183c:       |  |                  02be02b3                  mul     t0,t3,a1
e0001840:       |  |                  0ff00893                  li      a7,255
e0001844:       |  |                  65c1                      lui     a1,0x10
e0001846:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_stack_len+0x7f00>
e000184a:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000184e:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0001852:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
e0001854:       |  |              |   0056c7b3                  xor     a5,a3,t0
e0001858:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e000185c:       |  |              |   0ff6f713                  andi    a4,a3,255
e0001860:       +--|--------------|-- 05170463                  beq     a4,a7,e00018a8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e0001864:       |  |              |   0076f733                  and     a4,a3,t2
e0001868:       |  |  /-----------|-- 02770b63                  beq     a4,t2,e000189e <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e000186c:       |  |  |           |   0066f6b3                  and     a3,a3,t1
e0001870:       |  |  |  /--------|-- 02668963                  beq     a3,t1,e00018a2 <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e0001874:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
e0001878:       |  |  |  |  /-----|-- c69d                      beqz    a3,e00018a6 <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e000187a:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
e000187c:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,e000184e <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
e0001880:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,e000189a <memchr+0x9c>
e0001884:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
e0001888:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
e000188c:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
e0001890:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,e00018a8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
e0001894:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
e0001896:       |     |  |  |  |  |   0585                      addi    a1,a1,1
e0001898:       |     |  |  |  |  \-- fa75                      bnez    a2,e000188c <memchr+0x8e>
e000189a:       |     |  |  |  \----> 4581                      li      a1,0
e000189c:       +-----|--|--|-------- a031                      j       e00018a8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
e000189e:       |     \--|--|-------> 0585                      addi    a1,a1,1
e00018a0:       +--------|--|-------- a021                      j       e00018a8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
e00018a2:       |        \--|-------> 0589                      addi    a1,a1,2
e00018a4:       +-----------|-------- a011                      j       e00018a8 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
e00018a6:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e00018a8:       \-------------------> 852e                      mv      a0,a1
e00018aa:                             8082                      ret

e00018ac <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
e00018ac:                          4691                 li      a3,4
e00018ae:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e00018b0:                      /-- 00d66663             bltu    a2,a3,e00018bc <memrchr+0x10>
e00018b4:                      |   40a006b3             neg     a3,a0
e00018b8:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e00018bc:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e00018c0:                          9af1                 andi    a3,a3,-4
e00018c2:                          006687b3             add     a5,a3,t1
e00018c6:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
e00018c8:                      /-- 00f66363             bltu    a2,a5,e00018ce <memrchr+0x22>
e00018cc:                      |   86be                 mv      a3,a5
e00018ce:                      \-> 0ff5f393             andi    t2,a1,255
e00018d2:                   /--/-X 00c7fd63             bgeu    a5,a2,e00018ec <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
e00018d6:                   |  |   00c50733             add     a4,a0,a2
e00018da:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
e00018de:                   |  |   fff60713             addi    a4,a2,-1
e00018e2:                   |  |   863a                 mv      a2,a4
e00018e4:                   |  \-- fe7597e3             bne     a1,t2,e00018d2 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e00018e8:                   |      953a                 add     a0,a0,a4
e00018ea:                   |      8082                 ret
e00018ec:                   \----> 010105b7             lui     a1,0x1010
e00018f0:                          10158593             addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
e00018f4:                          02b382b3             mul     t0,t2,a1
e00018f8:                          00ff0837             lui     a6,0xff0
e00018fc:                          65c1                 lui     a1,0x10
e00018fe:                          f0058793             addi    a5,a1,-256 # ff00 <_stack_len+0x7f00>
e0001902:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
e0001906:       /--------------/-X 04d37563             bgeu    t1,a3,e0001950 <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000190a:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e000190e:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
e0001912:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e0001916:       |              |   01875593             srli    a1,a4,0x18
e000191a:       |  /-----------|-- cd95                 beqz    a1,e0001956 <memrchr+0xaa>
e000191c:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e0001920:       |  |           |   010775b3             and     a1,a4,a6
e0001924:       |  |  /--------|-- 03058c63             beq     a1,a6,e000195c <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e0001928:       |  |  |        |   00f775b3             and     a1,a4,a5
e000192c:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,e0001962 <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e0001930:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
e0001934:       |  |  |  |     |   16f1                 addi    a3,a3,-4
e0001936:       |  |  |  |     \-- fd1598e3             bne     a1,a7,e0001906 <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e000193a:       |  |  |  |         9536                 add     a0,a0,a3
e000193c:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
e000193e:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
e0001942:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
e0001946:       |  |  |  |     |   fff68613             addi    a2,a3,-1
e000194a:       |  |  |  |     |   86b2                 mv      a3,a2
e000194c:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,e0001968 <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
e0001950:       \--|--|--|--|--\-X f6fd                 bnez    a3,e000193e <memrchr+0x92>
e0001952:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001954:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
e0001956:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e000195a:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
e000195c:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001960:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
e0001962:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e0001966:                   |      8082                 ret
e0001968:                   \----> 9532                 add     a0,a0,a2
e000196a:                          8082                 ret
