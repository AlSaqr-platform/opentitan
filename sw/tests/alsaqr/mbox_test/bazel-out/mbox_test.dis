
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/alsaqr/mbox_test/mbox_test_sim_verilator.elf:     file format elf32-littleriscv
bazel-out/k8-fastbuild-ST-2cc462681f62/bin/sw/tests/alsaqr/mbox_test/mbox_test_sim_verilator.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xe0000080

Program Header:
    LOAD off    0x00001000 vaddr 0xe0000000 paddr 0xe0000000 align 2**12
         filesz 0x000017d0 memsz 0x000017d0 flags rwx
    LOAD off    0x00000000 vaddr 0xe0008000 paddr 0xe0008000 align 2**12
         filesz 0x00000000 memsz 0x00002000 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .vectors          00000084  e0000000  e0000000  00001000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text             00001176  e0000084  e0000084  00001084  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata           000004e0  e00011fc  e00011fc  000021fc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data             00000094  e00016dc  e00016dc  000026dc  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .bss              00000010  e0001770  e0001770  00002770  2**2  ALLOC
  5 .logs.fields      00000050  e0001780  e0001780  00002780  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .stack            00002000  e0008000  e0008000  00003000  2**0  ALLOC
  7 .debug_loc        00003f5f  00000000  00000000  000027d0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev     00001207  00000000  00000000  0000672f  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info       000044d0  00000000  00000000  00007936  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges     000005c8  00000000  00000000  0000be06  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str        00001418  00000000  00000000  0000c3ce  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment          00000074  00000000  00000000  0000d7e6  2**0  CONTENTS, READONLY
 13 .riscv.attributes 00000026  00000000  00000000  0000d85a  2**0  CONTENTS, READONLY
 14 .debug_frame      0000064c  00000000  00000000  0000d880  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line       0000378f  00000000  00000000  0000decc  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges    00000028  00000000  00000000  0001165b  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
e0000000 l    d  .vectors       00000000 .vectors
e0000084 l    d  .text  00000000 .text
e00011fc l    d  .rodata        00000000 .rodata
e00016dc l    d  .data  00000000 .data
e0001770 l    d  .bss   00000000 .bss
e0001780 l    d  .logs.fields   00000000 .logs.fields
e0008000 l    d  .stack 00000000 .stack
00000000 l    d  .debug_loc     00000000 .debug_loc
00000000 l    d  .debug_abbrev  00000000 .debug_abbrev
00000000 l    d  .debug_info    00000000 .debug_info
00000000 l    d  .debug_ranges  00000000 .debug_ranges
00000000 l    d  .debug_str     00000000 .debug_str
00000000 l    d  .comment       00000000 .comment
00000000 l    d  .riscv.attributes      00000000 .riscv.attributes
00000000 l    d  .debug_frame   00000000 .debug_frame
00000000 l    d  .debug_line    00000000 .debug_line
00000000 l    d  .debug_aranges 00000000 .debug_aranges
00000000 l    df *ABS*  00000000 crt0.o
e0000084 l       .text  00000000 default_exc_handler
e0000084 l       .text  00000000 
e000010e l       .text  00000000 sleep_loop
e0000084 l       .text  00000000 
e0000086 l       .text  00000000 reset_handler
e0000086 l       .text  00000000 
e0000086 l       .text  00000000 
e00000cc l       .text  00000000 
e00000ea l       .text  00000000 zero_loop_end
e00000e0 l       .text  00000000 zero_loop
e00000e0 l       .text  00000000 
e00000ea l       .text  00000000 
e00000ea l       .text  00000000 main_entry
e00000ea l       .text  00000000 
e00000ee l       .text  00000000 
e0000102 l       .text  00000000 success
e00000f2 l       .text  00000000 
e00000f4 l       .text  00000000 
e0000100 l       .text  00000000 
e0000102 l       .text  00000000 
e0000102 l       .text  00000000 
e000010e l       .text  00000000 
e0000112 l       .text  00000000 
e0000000 l       .vectors       00000000 
e000002c l       .vectors       00000000 
e0000030 l       .vectors       00000000 
e000007c l       .vectors       00000000 
e0000080 l       .vectors       00000000 
00000cb6 l       .debug_info    00000000 
000003df l       .debug_abbrev  00000000 
e0000114 l       .text  00000000 
e0000084 l       .vectors       00000000 
00000158 l       .debug_ranges  00000000 
00000000 l    df *ABS*  00000000 mbox_test.c
e0000114 l       .text  00000000 
e0000114 l       .text  00000000 
e0000114 l       .text  00000000 
e0000116 l       .text  00000000 
e0000116 l       .text  00000000 
e000011c l       .text  00000000 
e000011c l       .text  00000000 
e000011c l       .text  00000000 
e0000120 l       .text  00000000 
e0000122 l       .text  00000000 
e0000124 l       .text  00000000 
e0000124 l       .text  00000000 
e000012a l       .text  00000000 
e000012a l       .text  00000000 
e0000138 l       .text  00000000 
e000013a l       .text  00000000 
e000013a l       .text  00000000 
e0000144 l       .text  00000000 
e0001770 l     O .bss   00000004 plic0
e0000144 l       .text  00000000 
e0000154 l       .text  00000000 
e0000154 l       .text  00000000 
e000015e l       .text  00000000 
e000015e l       .text  00000000 
e000016a l       .text  00000000 
e000016a l       .text  00000000 
e0000174 l       .text  00000000 
e0000174 l       .text  00000000 
e0000176 l       .text  00000000 
e0000176 l       .text  00000000 
e0000182 l       .text  00000000 
e0000182 l       .text  00000000 
e0000184 l       .text  00000000 
e0000186 l       .text  00000000 
e0000186 l       .text  00000000 
e000018a l       .text  00000000 
e000019c l       .text  00000000 
e000019e l       .text  00000000 
e00001a0 l       .text  00000000 
e00001a0 l       .text  00000000 
e00001a4 l       .text  00000000 
e00001a6 l       .text  00000000 
e00001a6 l       .text  00000000 
e00001a8 l       .text  00000000 
e00001a8 l       .text  00000000 
e00001aa l       .text  00000000 
e00001aa l       .text  00000000 
e00001ac l       .text  00000000 
e00001ac l       .text  00000000 
e00001ae l       .text  00000000 
e00001ae l       .text  00000000 
e00001b0 l       .text  00000000 
e00001b0 l       .text  00000000 
e00001b2 l       .text  00000000 
e00001b2 l       .text  00000000 
e00001c8 l       .text  00000000 
e00001d0 l       .text  00000000 
e00001d2 l       .text  00000000 
e00001d4 l       .text  00000000 
e00001d6 l       .text  00000000 
e00001d6 l       .text  00000000 
e00001e0 l       .text  00000000 
e00001e0 l       .text  00000000 
e00001ec l       .text  00000000 
e00001ec l       .text  00000000 
e00001ec l       .text  00000000 
e00001ec l       .text  00000000 
e00001ec l       .text  00000000 
e00001ee l       .text  00000000 
e00001ee l       .text  00000000 
e0000212 l       .text  00000000 
e0000216 l       .text  00000000 
e000021a l       .text  00000000 
e000021a l       .text  00000000 
e0000228 l       .text  00000000 
e0000228 l       .text  00000000 
e0000230 l       .text  00000000 
e0000232 l       .text  00000000 
e0000232 l       .text  00000000 
e0000234 l       .text  00000000 
e0000234 l       .text  00000000 
e0000236 l       .text  00000000 
e0000238 l       .text  00000000 
e0001780 l     O .logs.fields   00000014 external_irq_handler.kLogFields
e0000238 l       .text  00000000 
e0000244 l       .text  00000000 
e0000246 l       .text  00000000 
e0000246 l       .text  00000000 
e0000248 l       .text  00000000 
e0000248 l       .text  00000000 
e000025c l       .text  00000000 
e000025e l       .text  00000000 
e000025e l       .text  00000000 
e0000264 l       .text  00000000 
e0000266 l       .text  00000000 
e0000266 l       .text  00000000 
e0000268 l       .text  00000000 
e0000274 l       .text  00000000 
e0000276 l       .text  00000000 
e0000278 l       .text  00000000 
e0000278 l       .text  00000000 
e000027a l       .text  00000000 
e000027c l       .text  00000000 
e0001794 l     O .logs.fields   00000014 external_irq_handler.kLogFields.7
e000027c l       .text  00000000 
e0000288 l       .text  00000000 
e000028a l       .text  00000000 
e000028a l       .text  00000000 
e000028c l       .text  00000000 
e000028c l       .text  00000000 
e00002a0 l       .text  00000000 
e00002a2 l       .text  00000000 
e00002a2 l       .text  00000000 
e00002a8 l       .text  00000000 
e00002aa l       .text  00000000 
e00002aa l       .text  00000000 
e00002d4 l       .text  00000000 
e00002d4 l       .text  00000000 
00000000 l       .debug_loc     00000000 
0000001b l       .debug_loc     00000000 
00000036 l       .debug_loc     00000000 
00000064 l       .debug_loc     00000000 
00000094 l       .debug_loc     00000000 
000000d0 l       .debug_loc     00000000 
000000f6 l       .debug_loc     00000000 
00000127 l       .debug_loc     00000000 
0000014d l       .debug_loc     00000000 
00000168 l       .debug_loc     00000000 
00000183 l       .debug_loc     00000000 
0000019e l       .debug_loc     00000000 
000001b9 l       .debug_loc     00000000 
000001e1 l       .debug_loc     00000000 
0000021d l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000074 l       .debug_str     00000000 
0000009a l       .debug_str     00000000 
00000000 l       .debug_ranges  00000000 
0000038f l       .debug_str     00000000 
000000a9 l       .debug_str     00000000 
0000042e l       .debug_str     00000000 
000003d5 l       .debug_str     00000000 
000001eb l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
000000fe l       .debug_str     00000000 
00000116 l       .debug_str     00000000 
00000bcd l       .debug_str     00000000 
00000129 l       .debug_str     00000000 
0000012f l       .debug_str     00000000 
00000107 l       .debug_str     00000000 
000000fa l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
000000c5 l       .debug_str     00000000 
000000d6 l       .debug_str     00000000 
000000e8 l       .debug_str     00000000 
000009cc l       .debug_str     00000000 
00000729 l       .debug_str     00000000 
00000120 l       .debug_str     00000000 
0000014e l       .debug_str     00000000 
0000017a l       .debug_str     00000000 
0000016e l       .debug_str     00000000 
000003cb l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000154 l       .debug_str     00000000 
00000571 l       .debug_str     00000000 
00000188 l       .debug_str     00000000 
0000018f l       .debug_str     00000000 
00000199 l       .debug_str     00000000 
000001a4 l       .debug_str     00000000 
000001af l       .debug_str     00000000 
000001bf l       .debug_str     00000000 
000001ce l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
000001f6 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
0000029b l       .debug_str     00000000 
00000226 l       .debug_str     00000000 
0000023b l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000266 l       .debug_str     00000000 
00000277 l       .debug_str     00000000 
00000289 l       .debug_str     00000000 
000009d5 l       .debug_str     00000000 
0000038a l       .debug_str     00000000 
000003a4 l       .debug_str     00000000 
000003a9 l       .debug_str     00000000 
000003ae l       .debug_str     00000000 
000003b8 l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
000003c6 l       .debug_str     00000000 
00000915 l       .debug_str     00000000 
000003db l       .debug_str     00000000 
00000670 l       .debug_str     00000000 
00000f84 l       .debug_str     00000000 
00000afd l       .debug_str     00000000 
000003dd l       .debug_str     00000000 
000003e7 l       .debug_str     00000000 
000003ef l       .debug_str     00000000 
000003fa l       .debug_str     00000000 
00000401 l       .debug_str     00000000 
0000040c l       .debug_str     00000000 
00000413 l       .debug_str     00000000 
0000041a l       .debug_str     00000000 
00000421 l       .debug_str     00000000 
00001159 l       .debug_str     00000000 
000002a7 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
00000ac4 l       .debug_str     00000000 
000002c3 l       .debug_str     00000000 
000002d4 l       .debug_str     00000000 
000002f1 l       .debug_str     00000000 
0000030d l       .debug_str     00000000 
0000031f l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
0000034a l       .debug_str     00000000 
00000361 l       .debug_str     00000000 
00000371 l       .debug_str     00000000 
00000428 l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
0000044d l       .debug_str     00000000 
00000000 l       .debug_frame   00000000 
e00001ec l       .text  00000000 
e00002d4 l       .text  00000000 
00000000 l    df *ABS*  00000000 utils.c
e00002d4 l       .text  00000000 
e00002d4 l       .text  00000000 
e00002d4 l       .text  00000000 
e00002d6 l       .text  00000000 
e00002f0 l       .text  00000000 
e00002f2 l       .text  00000000 
e0000306 l       .text  00000000 
e0000306 l       .text  00000000 
e0000328 l       .text  00000000 
e0000328 l       .text  00000000 
e000032c l       .text  00000000 
e0000334 l       .text  00000000 
e0000338 l       .text  00000000 
e000033c l       .text  00000000 
e000033c l       .text  00000000 
e0000348 l       .text  00000000 
e000034e l       .text  00000000 
e000034e l       .text  00000000 
e0000352 l       .text  00000000 
e0000358 l       .text  00000000 
e0000358 l       .text  00000000 
e000035c l       .text  00000000 
e000035c l       .text  00000000 
e000035e l       .text  00000000 
e0000360 l       .text  00000000 
e0000360 l       .text  00000000 
e0000364 l       .text  00000000 
e0000366 l       .text  00000000 
e000036a l       .text  00000000 
e000036e l       .text  00000000 
e000036e l       .text  00000000 
e0000372 l       .text  00000000 
e0000372 l       .text  00000000 
e0000374 l       .text  00000000 
e0000378 l       .text  00000000 
e000037c l       .text  00000000 
e000038a l       .text  00000000 
e000038c l       .text  00000000 
e000038c l       .text  00000000 
e0000394 l       .text  00000000 
e0000398 l       .text  00000000 
e000039a l       .text  00000000 
e000039e l       .text  00000000 
e000039e l       .text  00000000 
e00003a6 l       .text  00000000 
e00003aa l       .text  00000000 
e00003ac l       .text  00000000 
e00003b0 l       .text  00000000 
e00003b0 l       .text  00000000 
e00003c8 l       .text  00000000 
e00003ce l       .text  00000000 
e00003d8 l       .text  00000000 
e00003ec l       .text  00000000 
e00003ec l       .text  00000000 
e00003f0 l       .text  00000000 
e00003f0 l       .text  00000000 
e00003f2 l       .text  00000000 
e00003f2 l       .text  00000000 
e00003fa l       .text  00000000 
e00003fc l       .text  00000000 
e00003fe l       .text  00000000 
e00003fe l       .text  00000000 
e0000404 l       .text  00000000 
e000040c l       .text  00000000 
e0000412 l       .text  00000000 
e0000416 l       .text  00000000 
e000041a l       .text  00000000 
e000041e l       .text  00000000 
e00004a2 l     F .text  000000c4 qprints
e0000424 l       .text  00000000 
e0000426 l       .text  00000000 
e000042c l       .text  00000000 
e0000430 l       .text  00000000 
e0000436 l       .text  00000000 
e0000438 l       .text  00000000 
e0000566 l     F .text  0000013a qprinti
e0000440 l       .text  00000000 
e0000442 l       .text  00000000 
e0000442 l       .text  00000000 
e0000444 l       .text  00000000 
e0000446 l       .text  00000000 
e0000446 l       .text  00000000 
e0000458 l       .text  00000000 
e0000466 l       .text  00000000 
e0000466 l       .text  00000000 
e0000466 l       .text  00000000 
e0000466 l       .text  00000000 
e0000466 l       .text  00000000 
e000046a l       .text  00000000 
e000046e l       .text  00000000 
e0000470 l       .text  00000000 
e0000474 l       .text  00000000 
e0000476 l       .text  00000000 
e000047a l       .text  00000000 
e000047a l       .text  00000000 
e0000480 l       .text  00000000 
e0000484 l       .text  00000000 
e0000486 l       .text  00000000 
e0000488 l       .text  00000000 
e000048c l       .text  00000000 
e0000490 l       .text  00000000 
e0000492 l       .text  00000000 
e0000494 l       .text  00000000 
e0000494 l       .text  00000000 
e0000494 l       .text  00000000 
e0000494 l       .text  00000000 
e0000494 l       .text  00000000 
e0000498 l       .text  00000000 
e000049a l       .text  00000000 
e000049e l       .text  00000000 
e00004a0 l       .text  00000000 
e00004a2 l       .text  00000000 
e00004a2 l       .text  00000000 
e00004a2 l       .text  00000000 
e00004a2 l       .text  00000000 
e00004a2 l       .text  00000000 
e00004a2 l       .text  00000000 
e00004a6 l       .text  00000000 
e00004a6 l       .text  00000000 
e00004aa l       .text  00000000 
e00004ac l       .text  00000000 
e00004ae l       .text  00000000 
e00004b2 l       .text  00000000 
e00004b2 l       .text  00000000 
e00004ba l       .text  00000000 
e00004be l       .text  00000000 
e00004be l       .text  00000000 
e00004c0 l       .text  00000000 
e00004c4 l       .text  00000000 
e00004c4 l       .text  00000000 
e00004c6 l       .text  00000000 
e00004cc l       .text  00000000 
e00004ce l       .text  00000000 
e00004ce l       .text  00000000 
e00004d8 l       .text  00000000 
e00004da l       .text  00000000 
e00004da l       .text  00000000 
e00004e2 l       .text  00000000 
e00004e4 l       .text  00000000 
e00004e4 l       .text  00000000 
e00004e8 l       .text  00000000 
e00004e8 l       .text  00000000 
e00004f4 l       .text  00000000 
e00004f4 l       .text  00000000 
e00004f8 l       .text  00000000 
e0000500 l       .text  00000000 
e0000502 l       .text  00000000 
e0000502 l       .text  00000000 
e0000504 l       .text  00000000 
e0000508 l       .text  00000000 
e000050a l       .text  00000000 
e000050a l       .text  00000000 
e000050e l       .text  00000000 
e000050e l       .text  00000000 
e0000510 l       .text  00000000 
e0000514 l       .text  00000000 
e0000514 l       .text  00000000 
e0000518 l       .text  00000000 
e0000518 l       .text  00000000 
e000051c l       .text  00000000 
e0000520 l       .text  00000000 
e0000520 l       .text  00000000 
e0000524 l       .text  00000000 
e0000526 l       .text  00000000 
e000052a l       .text  00000000 
e000052a l       .text  00000000 
e000052c l       .text  00000000 
e0000532 l       .text  00000000 
e0000532 l       .text  00000000 
e0000536 l       .text  00000000 
e0000536 l       .text  00000000 
e0000538 l       .text  00000000 
e0000538 l       .text  00000000 
e000053c l       .text  00000000 
e000053e l       .text  00000000 
e0000540 l       .text  00000000 
e0000542 l       .text  00000000 
e0000542 l       .text  00000000 
e000054a l       .text  00000000 
e000054a l       .text  00000000 
e000054e l       .text  00000000 
e000054e l       .text  00000000 
e0000550 l       .text  00000000 
e0000554 l       .text  00000000 
e0000556 l       .text  00000000 
e0000556 l       .text  00000000 
e0000558 l       .text  00000000 
e0000558 l       .text  00000000 
e000055c l       .text  00000000 
e000055c l       .text  00000000 
e0000560 l       .text  00000000 
e0000560 l       .text  00000000 
e0000562 l       .text  00000000 
e0000562 l       .text  00000000 
e0000566 l       .text  00000000 
e0000566 l       .text  00000000 
e0000566 l       .text  00000000 
e0000566 l       .text  00000000 
e0000566 l       .text  00000000 
e0000568 l       .text  00000000 
e0000568 l       .text  00000000 
e000056c l       .text  00000000 
e000056c l       .text  00000000 
e000056c l       .text  00000000 
e000056e l       .text  00000000 
e0000572 l       .text  00000000 
e0000572 l       .text  00000000 
e000057a l       .text  00000000 
e0000588 l       .text  00000000 
e000058c l       .text  00000000 
e000058c l       .text  00000000 
e0000590 l       .text  00000000 
e0000590 l       .text  00000000 
e0000592 l       .text  00000000 
e0000596 l       .text  00000000 
e000059a l       .text  00000000 
e000059c l       .text  00000000 
e00005a0 l       .text  00000000 
e00005a4 l       .text  00000000 
e00005a6 l       .text  00000000 
e00005a6 l       .text  00000000 
e00005a8 l       .text  00000000 
e00005a8 l       .text  00000000 
e00005aa l       .text  00000000 
e00005ae l       .text  00000000 
e00005b0 l       .text  00000000 
e00005b2 l       .text  00000000 
e00005b2 l       .text  00000000 
e00005b6 l       .text  00000000 
e00005ba l       .text  00000000 
e00005ba l       .text  00000000 
e00005be l       .text  00000000 
e00005c2 l       .text  00000000 
e00005c2 l       .text  00000000 
e00005c4 l       .text  00000000 
e00005c4 l       .text  00000000 
e00005ca l       .text  00000000 
e00005ca l       .text  00000000 
e00005ce l       .text  00000000 
e00005ce l       .text  00000000 
e00005d2 l       .text  00000000 
e00005d6 l       .text  00000000 
e00005da l       .text  00000000 
e00005dc l       .text  00000000 
e00005de l       .text  00000000 
e00005de l       .text  00000000 
e00005e0 l       .text  00000000 
e00005e0 l       .text  00000000 
e00005e2 l       .text  00000000 
e00005e6 l       .text  00000000 
e00005ea l       .text  00000000 
e00005f4 l       .text  00000000 
e00005f4 l       .text  00000000 
e00005f8 l       .text  00000000 
e00005fc l       .text  00000000 
e00005fe l       .text  00000000 
e0000602 l       .text  00000000 
e0000604 l       .text  00000000 
e0000606 l       .text  00000000 
e0000606 l       .text  00000000 
e0000608 l       .text  00000000 
e000060c l       .text  00000000 
e000060c l       .text  00000000 
e0000610 l       .text  00000000 
e0000610 l       .text  00000000 
e0000614 l       .text  00000000 
e0000616 l       .text  00000000 
e0000616 l       .text  00000000 
e000061a l       .text  00000000 
e000061c l       .text  00000000 
e0000620 l       .text  00000000 
e0000622 l       .text  00000000 
e0000626 l       .text  00000000 
e0000628 l       .text  00000000 
e000062c l       .text  00000000 
e000062c l       .text  00000000 
e0000630 l       .text  00000000 
e0000632 l       .text  00000000 
e0000632 l       .text  00000000 
e0000636 l       .text  00000000 
e0000636 l       .text  00000000 
e0000638 l       .text  00000000 
e000063a l       .text  00000000 
e000063c l       .text  00000000 
e000063c l       .text  00000000 
e0000642 l       .text  00000000 
e0000644 l       .text  00000000 
e0000644 l       .text  00000000 
e0000648 l       .text  00000000 
e000064c l       .text  00000000 
e000064c l       .text  00000000 
e0000654 l       .text  00000000 
e0000658 l       .text  00000000 
e000065a l       .text  00000000 
e000065e l       .text  00000000 
e000065e l       .text  00000000 
e0000662 l       .text  00000000 
e0000668 l       .text  00000000 
e0000668 l       .text  00000000 
e000066a l       .text  00000000 
e000066c l       .text  00000000 
e000066c l       .text  00000000 
e0000670 l       .text  00000000 
e0000670 l       .text  00000000 
e0000674 l       .text  00000000 
e0000678 l       .text  00000000 
e0000678 l       .text  00000000 
e000067a l       .text  00000000 
e000067e l       .text  00000000 
e0000680 l       .text  00000000 
e0000680 l       .text  00000000 
e0000688 l       .text  00000000 
e000068a l       .text  00000000 
e000068a l       .text  00000000 
e000068c l       .text  00000000 
e000068e l       .text  00000000 
e000068e l       .text  00000000 
e0000692 l       .text  00000000 
e0000696 l       .text  00000000 
e0000696 l       .text  00000000 
e0000698 l       .text  00000000 
e0000698 l       .text  00000000 
e00006a0 l       .text  00000000 
e00006a0 l       .text  00000000 
00000259 l       .debug_loc     00000000 
0000027f l       .debug_loc     00000000 
000002a7 l       .debug_loc     00000000 
000002cd l       .debug_loc     00000000 
0000032a l       .debug_loc     00000000 
00000352 l       .debug_loc     00000000 
00000378 l       .debug_loc     00000000 
000003ad l       .debug_loc     00000000 
000003ed l       .debug_loc     00000000 
00000408 l       .debug_loc     00000000 
00000429 l       .debug_loc     00000000 
00000444 l       .debug_loc     00000000 
0000045f l       .debug_loc     00000000 
0000047a l       .debug_loc     00000000 
00000495 l       .debug_loc     00000000 
000004bd l       .debug_loc     00000000 
000004ee l       .debug_loc     00000000 
00000523 l       .debug_loc     00000000 
0000054b l       .debug_loc     00000000 
00000567 l       .debug_loc     00000000 
00000582 l       .debug_loc     00000000 
000005d4 l       .debug_loc     00000000 
000005fa l       .debug_loc     00000000 
0000063a l       .debug_loc     00000000 
00000662 l       .debug_loc     00000000 
00000688 l       .debug_loc     00000000 
000006c8 l       .debug_loc     00000000 
000006fa l       .debug_loc     00000000 
00000726 l       .debug_loc     00000000 
00000741 l       .debug_loc     00000000 
0000075c l       .debug_loc     00000000 
0000077d l       .debug_loc     00000000 
00000798 l       .debug_loc     00000000 
000007be l       .debug_loc     00000000 
000007fa l       .debug_loc     00000000 
00000820 l       .debug_loc     00000000 
00000851 l       .debug_loc     00000000 
00000882 l       .debug_loc     00000000 
000008be l       .debug_loc     00000000 
000008e6 l       .debug_loc     00000000 
00000943 l       .debug_loc     00000000 
0000096d l       .debug_loc     00000000 
000009af l       .debug_loc     00000000 
00000a2d l       .debug_loc     00000000 
00000a48 l       .debug_loc     00000000 
00000a6e l       .debug_loc     00000000 
00000a94 l       .debug_loc     00000000 
00000ab1 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000045a l       .debug_str     00000000 
0000009a l       .debug_str     00000000 
000000f0 l       .debug_ranges  00000000 
00000472 l       .debug_str     00000000 
00000729 l       .debug_str     00000000 
0000047f l       .debug_str     00000000 
000009cc l       .debug_str     00000000 
000009d5 l       .debug_str     00000000 
000004f3 l       .debug_str     00000000 
00000ac4 l       .debug_str     00000000 
0000012f l       .debug_str     00000000 
0000049a l       .debug_str     00000000 
000004b3 l       .debug_str     00000000 
00000493 l       .debug_str     00000000 
00000b44 l       .debug_str     00000000 
000004af l       .debug_str     00000000 
000004b6 l       .debug_str     00000000 
000004bc l       .debug_str     00000000 
000000b2 l       .debug_str     00000000 
000004a7 l       .debug_str     00000000 
0000049d l       .debug_str     00000000 
000004c0 l       .debug_str     00000000 
00000670 l       .debug_str     00000000 
000004ce l       .debug_str     00000000 
000004d6 l       .debug_str     00000000 
000004e1 l       .debug_str     00000000 
00000522 l       .debug_str     00000000 
0000054e l       .debug_str     00000000 
00000555 l       .debug_str     00000000 
0000055d l       .debug_str     00000000 
00000d8c l       .debug_str     00000000 
00000048 l       .debug_ranges  00000000 
00000060 l       .debug_ranges  00000000 
00000078 l       .debug_ranges  00000000 
00000090 l       .debug_ranges  00000000 
000000a8 l       .debug_ranges  00000000 
000000c0 l       .debug_ranges  00000000 
0000052a l       .debug_str     00000000 
00000275 l       .debug_str     00000000 
000003db l       .debug_str     00000000 
0000056b l       .debug_str     00000000 
0000056e l       .debug_str     00000000 
00000561 l       .debug_str     00000000 
00000576 l       .debug_str     00000000 
00000578 l       .debug_str     00000000 
00001159 l       .debug_str     00000000 
000000d8 l       .debug_ranges  00000000 
000002a7 l       .debug_str     00000000 
00000532 l       .debug_str     00000000 
00000539 l       .debug_str     00000000 
00000506 l       .debug_str     00000000 
00000510 l       .debug_str     00000000 
0000030d l       .debug_str     00000000 
0000051d l       .debug_str     00000000 
00000018 l       .debug_ranges  00000000 
00000030 l       .debug_ranges  00000000 
0000038f l       .debug_str     00000000 
000004e5 l       .debug_str     00000000 
00000f42 l       .debug_str     00000000 
000004ec l       .debug_str     00000000 
00001145 l       .debug_str     00000000 
0000072c l       .debug_str     00000000 
00000545 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
00000068 l       .debug_frame   00000000 
e0000466 l       .text  00000000 
e0000494 l       .text  00000000 
e00004a2 l       .text  00000000 
e0000566 l       .text  00000000 
e00006a0 l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic_autogen.c
e00006a0 l       .text  00000000 
e00006a0 l       .text  00000000 
e00006a0 l       .text  00000000 
e00006a0 l       .text  00000000 
e00006a2 l       .text  00000000 
e00006a4 l       .text  00000000 
e00006a8 l       .text  00000000 
e00006aa l       .text  00000000 
e00006ac l       .text  00000000 
e00006ae l       .text  00000000 
e00006ae l       .text  00000000 
00000ad2 l       .debug_loc     00000000 
00000aed l       .debug_loc     00000000 
00000b08 l       .debug_loc     00000000 
00000b23 l       .debug_loc     00000000 
00000b3f l       .debug_loc     00000000 
00000b5b l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
0000057c l       .debug_str     00000000 
0000009a l       .debug_str     00000000 
00000180 l       .debug_ranges  00000000 
000001eb l       .debug_str     00000000 
00000188 l       .debug_str     00000000 
0000018f l       .debug_str     00000000 
00000199 l       .debug_str     00000000 
000001a4 l       .debug_str     00000000 
000001af l       .debug_str     00000000 
000001bf l       .debug_str     00000000 
000001ce l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
000009cc l       .debug_str     00000000 
000005c6 l       .debug_str     00000000 
000005ac l       .debug_str     00000000 
00000120 l       .debug_str     00000000 
000002c3 l       .debug_str     00000000 
000003cb l       .debug_str     00000000 
00000172 l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
00000571 l       .debug_str     00000000 
000008e4 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000154 l       .debug_str     00000000 
000005ec l       .debug_str     00000000 
000009d5 l       .debug_str     00000000 
000005f6 l       .debug_str     00000000 
000005d2 l       .debug_str     00000000 
00000622 l       .debug_str     00000000 
00000643 l       .debug_str     00000000 
0000044d l       .debug_str     00000000 
0000017a l       .debug_str     00000000 
0000016e l       .debug_str     00000000 
0000060e l       .debug_str     00000000 
0000062c l       .debug_str     00000000 
00000164 l       .debug_frame   00000000 
e00006ae l       .text  00000000 
00000000 l    df *ABS*  00000000 dif_rv_plic.c
e00006ae l       .text  00000000 
e00006ae l       .text  00000000 
e00006ae l       .text  00000000 
e00006ae l       .text  00000000 
e00006ba l       .text  00000000 
e00006c0 l       .text  00000000 
e00006c6 l       .text  00000000 
e00006c8 l       .text  00000000 
e00006ce l       .text  00000000 
e00006ce l       .text  00000000 
e00006d0 l       .text  00000000 
e00006d0 l       .text  00000000 
e00006d4 l       .text  00000000 
e00006d4 l       .text  00000000 
e00006d6 l       .text  00000000 
e00006d6 l       .text  00000000 
e00006d8 l       .text  00000000 
e00006d8 l       .text  00000000 
e00006da l       .text  00000000 
e00006da l       .text  00000000 
e00006de l       .text  00000000 
e00006e0 l       .text  00000000 
e00006e0 l       .text  00000000 
e00006e2 l       .text  00000000 
e00006e2 l       .text  00000000 
e00006e6 l       .text  00000000 
e00006ea l       .text  00000000 
e00006ec l       .text  00000000 
e00006ec l       .text  00000000 
e00006f0 l       .text  00000000 
e00006f0 l       .text  00000000 
e00006f2 l       .text  00000000 
e00006f2 l       .text  00000000 
e00006f4 l       .text  00000000 
e00006f4 l       .text  00000000 
e00006f8 l       .text  00000000 
e00006f8 l       .text  00000000 
e00006f8 l       .text  00000000 
e00006f8 l       .text  00000000 
e00006f8 l       .text  00000000 
e00006f8 l       .text  00000000 
e0000704 l       .text  00000000 
e0000710 l       .text  00000000 
e0000710 l       .text  00000000 
e0000712 l       .text  00000000 
e0000712 l       .text  00000000 
e0000714 l       .text  00000000 
e0000714 l       .text  00000000 
e0000716 l       .text  00000000 
e0000718 l       .text  00000000 
e0000718 l       .text  00000000 
e000071a l       .text  00000000 
e000071a l       .text  00000000 
e000071e l       .text  00000000 
e000071e l       .text  00000000 
e000071e l       .text  00000000 
e000071e l       .text  00000000 
e000071e l       .text  00000000 
e000071e l       .text  00000000 
e0000726 l       .text  00000000 
e0000726 l       .text  00000000 
e0000732 l       .text  00000000 
e0000732 l       .text  00000000 
e0000734 l       .text  00000000 
e0000734 l       .text  00000000 
e000073a l       .text  00000000 
e000073a l       .text  00000000 
e000073c l       .text  00000000 
e0000740 l       .text  00000000 
e0000740 l       .text  00000000 
e0000742 l       .text  00000000 
e0000742 l       .text  00000000 
e0000746 l       .text  00000000 
e0000746 l       .text  00000000 
e0000746 l       .text  00000000 
e0000746 l       .text  00000000 
e0000746 l       .text  00000000 
e0000746 l       .text  00000000 
e000074e l       .text  00000000 
e000074e l       .text  00000000 
e0000754 l       .text  00000000 
e0000754 l       .text  00000000 
e0000756 l       .text  00000000 
e0000756 l       .text  00000000 
e000075e l       .text  00000000 
e000075e l       .text  00000000 
e0000760 l       .text  00000000 
e0000760 l       .text  00000000 
e0000762 l       .text  00000000 
e0000762 l       .text  00000000 
e0000766 l       .text  00000000 
e0000766 l       .text  00000000 
00000b76 l       .debug_loc     00000000 
00000b9c l       .debug_loc     00000000 
00000bcf l       .debug_loc     00000000 
00000bf1 l       .debug_loc     00000000 
00000c0c l       .debug_loc     00000000 
00000c2e l       .debug_loc     00000000 
00000c61 l       .debug_loc     00000000 
00000c89 l       .debug_loc     00000000 
00000cb1 l       .debug_loc     00000000 
00000ccc l       .debug_loc     00000000 
00000cfc l       .debug_loc     00000000 
00000d17 l       .debug_loc     00000000 
00000d32 l       .debug_loc     00000000 
00000d4d l       .debug_loc     00000000 
00000d68 l       .debug_loc     00000000 
00000d83 l       .debug_loc     00000000 
00000d9e l       .debug_loc     00000000 
00000db9 l       .debug_loc     00000000 
00000dd4 l       .debug_loc     00000000 
00000def l       .debug_loc     00000000 
00000e0a l       .debug_loc     00000000 
00000e26 l       .debug_loc     00000000 
00000e41 l       .debug_loc     00000000 
00000e5f l       .debug_loc     00000000 
00000e85 l       .debug_loc     00000000 
00000eb6 l       .debug_loc     00000000 
00000ed1 l       .debug_loc     00000000 
00000eec l       .debug_loc     00000000 
00000f0b l       .debug_loc     00000000 
00000f2a l       .debug_loc     00000000 
00000f45 l       .debug_loc     00000000 
00000f60 l       .debug_loc     00000000 
00000f7b l       .debug_loc     00000000 
00000f9b l       .debug_loc     00000000 
00000fb6 l       .debug_loc     00000000 
00000fd1 l       .debug_loc     00000000 
00000fec l       .debug_loc     00000000 
00001009 l       .debug_loc     00000000 
00001024 l       .debug_loc     00000000 
0000103f l       .debug_loc     00000000 
0000105a l       .debug_loc     00000000 
00001075 l       .debug_loc     00000000 
00001090 l       .debug_loc     00000000 
000010b0 l       .debug_loc     00000000 
000010cb l       .debug_loc     00000000 
000010e6 l       .debug_loc     00000000 
00001101 l       .debug_loc     00000000 
00001121 l       .debug_loc     00000000 
0000113c l       .debug_loc     00000000 
00001157 l       .debug_loc     00000000 
00001172 l       .debug_loc     00000000 
00001192 l       .debug_loc     00000000 
000011ad l       .debug_loc     00000000 
000011c8 l       .debug_loc     00000000 
000011e3 l       .debug_loc     00000000 
00001203 l       .debug_loc     00000000 
0000121e l       .debug_loc     00000000 
00001239 l       .debug_loc     00000000 
00001254 l       .debug_loc     00000000 
00001274 l       .debug_loc     00000000 
0000128f l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000652 l       .debug_str     00000000 
0000009a l       .debug_str     00000000 
00000228 l       .debug_ranges  00000000 
00000672 l       .debug_str     00000000 
00000120 l       .debug_str     00000000 
000009cc l       .debug_str     00000000 
00000688 l       .debug_str     00000000 
000001eb l       .debug_str     00000000 
00000188 l       .debug_str     00000000 
0000018f l       .debug_str     00000000 
00000199 l       .debug_str     00000000 
000001a4 l       .debug_str     00000000 
000001af l       .debug_str     00000000 
000001bf l       .debug_str     00000000 
000001ce l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
0000021b l       .debug_str     00000000 
000001f6 l       .debug_str     00000000 
00000209 l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
00000571 l       .debug_str     00000000 
000008e4 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000154 l       .debug_str     00000000 
000005ec l       .debug_str     00000000 
000009d5 l       .debug_str     00000000 
000007d5 l       .debug_str     00000000 
00000175 l       .debug_str     00000000 
00000275 l       .debug_str     00000000 
000001b0 l       .debug_ranges  00000000 
00000198 l       .debug_ranges  00000000 
000006df l       .debug_str     00000000 
000001e0 l       .debug_ranges  00000000 
000008a7 l       .debug_str     00000000 
000001c8 l       .debug_ranges  00000000 
0000069e l       .debug_str     00000000 
00000434 l       .debug_str     00000000 
000006cf l       .debug_str     00000000 
000006c1 l       .debug_str     00000000 
000006b7 l       .debug_str     00000000 
0000062c l       .debug_str     00000000 
00000438 l       .debug_str     00000000 
000006e6 l       .debug_str     00000000 
000006fb l       .debug_str     00000000 
00000711 l       .debug_str     00000000 
0000072e l       .debug_str     00000000 
00000720 l       .debug_str     00000000 
00000736 l       .debug_str     00000000 
000007e7 l       .debug_str     00000000 
000008b7 l       .debug_str     00000000 
00000905 l       .debug_str     00000000 
000006c6 l       .debug_str     00000000 
000008ca l       .debug_str     00000000 
000001f8 l       .debug_ranges  00000000 
00000749 l       .debug_str     00000000 
00000760 l       .debug_str     00000000 
00000763 l       .debug_str     00000000 
0000077f l       .debug_str     00000000 
0000076e l       .debug_str     00000000 
00000769 l       .debug_str     00000000 
0000071a l       .debug_str     00000000 
00000792 l       .debug_str     00000000 
00000428 l       .debug_str     00000000 
000002f1 l       .debug_str     00000000 
000008d5 l       .debug_str     00000000 
00000210 l       .debug_ranges  00000000 
000002d4 l       .debug_str     00000000 
000002e8 l       .debug_str     00000000 
00000803 l       .debug_str     00000000 
0000081a l       .debug_str     00000000 
000008da l       .debug_str     00000000 
000007a7 l       .debug_str     00000000 
000007c1 l       .debug_str     00000000 
00000824 l       .debug_str     00000000 
00000834 l       .debug_str     00000000 
0000031f l       .debug_str     00000000 
000008eb l       .debug_str     00000000 
000008f6 l       .debug_str     00000000 
00000371 l       .debug_str     00000000 
00000909 l       .debug_str     00000000 
0000083f l       .debug_str     00000000 
00000917 l       .debug_str     00000000 
0000085e l       .debug_str     00000000 
00000883 l       .debug_str     00000000 
00000923 l       .debug_str     00000000 
0000044d l       .debug_str     00000000 
0000017a l       .debug_str     00000000 
0000016e l       .debug_str     00000000 
000003cb l       .debug_str     00000000 
000008bd l       .debug_str     00000000 
00000198 l       .debug_frame   00000000 
e00006f8 l       .text  00000000 
e000071e l       .text  00000000 
e0000746 l       .text  00000000 
e0000766 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e0000766 l       .text  00000000 
e0000766 l       .text  00000000 
e0000766 l       .text  00000000 
e0000768 l       .text  00000000 
e000076a l       .text  00000000 
e0000770 l       .text  00000000 
e0000774 l       .text  00000000 
e0000778 l       .text  00000000 
e000077c l       .text  00000000 
e000077c l       .text  00000000 
e0000786 l       .text  00000000 
e0000788 l       .text  00000000 
e0000788 l       .text  00000000 
e000078a l       .text  00000000 
e000078a l       .text  00000000 
e0000790 l       .text  00000000 
e0000790 l       .text  00000000 
e000079a l       .text  00000000 
e000079c l       .text  00000000 
e000079c l       .text  00000000 
e00007b0 l       .text  00000000 
e00007b0 l       .text  00000000 
e00007b2 l       .text  00000000 
e00007b2 l       .text  00000000 
e00007bc l       .text  00000000 
e00007be l       .text  00000000 
e00007be l       .text  00000000 
e00007d2 l       .text  00000000 
e00007d2 l       .text  00000000 
e00007d4 l       .text  00000000 
e00017bc l     O .logs.fields   00000014 test_status_set.kLogFields.2
e00007d4 l       .text  00000000 
e00007e0 l       .text  00000000 
e00007e0 l       .text  00000000 
e00007ea l       .text  00000000 
e00007ec l       .text  00000000 
e00007ec l       .text  00000000 
e00017a8 l     O .logs.fields   00000014 test_status_set.kLogFields
e00007f4 l       .text  00000000 
e0000800 l       .text  00000000 
e0000800 l       .text  00000000 
e000080a l       .text  00000000 
e000080c l       .text  00000000 
e000080c l       .text  00000000 
e0000814 l       .text  00000000 
e0000814 l       .text  00000000 
e0000814 l       .text  00000000 
000012aa l       .debug_loc     00000000 
000012c8 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000932 l       .debug_str     00000000 
0000009a l       .debug_str     00000000 
00000361 l       .debug_str     00000000 
000000a9 l       .debug_str     00000000 
0000029b l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
000000fe l       .debug_str     00000000 
00000116 l       .debug_str     00000000 
00000bcd l       .debug_str     00000000 
00000129 l       .debug_str     00000000 
0000012f l       .debug_str     00000000 
00000107 l       .debug_str     00000000 
000000fa l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
000000c5 l       .debug_str     00000000 
000000d6 l       .debug_str     00000000 
000000e8 l       .debug_str     00000000 
000009cc l       .debug_str     00000000 
00000729 l       .debug_str     00000000 
00000120 l       .debug_str     00000000 
00000226 l       .debug_str     00000000 
0000023b l       .debug_str     00000000 
00000254 l       .debug_str     00000000 
00000266 l       .debug_str     00000000 
00000277 l       .debug_str     00000000 
00000289 l       .debug_str     00000000 
00000960 l       .debug_str     00000000 
00000987 l       .debug_str     00000000 
00000979 l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000154 l       .debug_str     00000000 
00000571 l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
000008e4 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
000005ec l       .debug_str     00000000 
000009d5 l       .debug_str     00000000 
0000034a l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
0000099f l       .debug_str     00000000 
0000025c l       .debug_frame   00000000 
e0000814 l       .text  00000000 
00000000 l    df *ABS*  00000000 hart.c
e0000814 l       .text  00000000 
e0000814 l       .text  00000000 
e0000814 l       .text  00000000 
e0000814 l       .text  00000000 
e0000818 l       .text  00000000 
e0000818 l       .text  00000000 
e000081a l       .text  00000000 
e000081a l       .text  00000000 
000012db l       .debug_loc     00000000 
000012f6 l       .debug_loc     00000000 
0000131d l       .debug_loc     00000000 
00001344 l       .debug_loc     00000000 
00001360 l       .debug_loc     00000000 
0000138d l       .debug_loc     00000000 
000013b4 l       .debug_loc     00000000 
000013db l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
000009a5 l       .debug_str     00000000 
0000009a l       .debug_str     00000000 
00000288 l       .debug_ranges  00000000 
000009d9 l       .debug_str     00000000 
000009c2 l       .debug_str     00000000 
000009e2 l       .debug_str     00000000 
000009f3 l       .debug_str     00000000 
000009fd l       .debug_str     00000000 
00000a08 l       .debug_str     00000000 
00000120 l       .debug_str     00000000 
000009cc l       .debug_str     00000000 
00000a36 l       .debug_str     00000000 
00000a59 l       .debug_str     00000000 
00000a5e l       .debug_str     00000000 
00000a1c l       .debug_str     00000000 
00000a15 l       .debug_str     00000000 
00000a23 l       .debug_str     00000000 
0000099f l       .debug_str     00000000 
00000a47 l       .debug_str     00000000 
00000288 l       .debug_frame   00000000 
e000081a l       .text  00000000 
00000000 l    df *ABS*  00000000 log.c
e000081a l       .text  00000000 
e000081a l       .text  00000000 
e000081a l       .text  00000000 
e000081c l       .text  00000000 
e0000822 l       .text  00000000 
e0000824 l       .text  00000000 
e0000832 l       .text  00000000 
e000083c l       .text  00000000 
e0000842 l       .text  00000000 
e0000842 l       .text  00000000 
e0000844 l       .text  00000000 
e0000848 l       .text  00000000 
e0000848 l       .text  00000000 
e0000852 l       .text  00000000 
e0000852 l       .text  00000000 
e0000854 l       .text  00000000 
e0000858 l       .text  00000000 
e0000858 l       .text  00000000 
e000085a l       .text  00000000 
e000085a l       .text  00000000 
e000085c l       .text  00000000 
e000085c l       .text  00000000 
e0000860 l       .text  00000000 
e0000860 l       .text  00000000 
e0000866 l       .text  00000000 
e0000874 l       .text  00000000 
e0000874 l       .text  00000000 
e0001774 l     O .bss   00000002 base_log_internal_core.global_log_counter
e000087c l       .text  00000000 
e0000888 l       .text  00000000 
e000088a l       .text  00000000 
e0000894 l       .text  00000000 
e0000894 l       .text  00000000 
e00008a0 l       .text  00000000 
e00008a0 l       .text  00000000 
e00008a2 l       .text  00000000 
e00008a4 l       .text  00000000 
e00008a8 l       .text  00000000 
e00008a8 l       .text  00000000 
e00008b2 l       .text  00000000 
e00008b2 l       .text  00000000 
e00008bc l       .text  00000000 
e00008bc l       .text  00000000 
e00008bc l       .text  00000000 
e00008bc l       .text  00000000 
e00008bc l       .text  00000000 
e00008be l       .text  00000000 
e00008c4 l       .text  00000000 
e00008c4 l       .text  00000000 
e00008ce l       .text  00000000 
e00008ce l       .text  00000000 
e00008d4 l       .text  00000000 
e00008d4 l       .text  00000000 
e00008d8 l       .text  00000000 
e00008d8 l       .text  00000000 
e00008da l       .text  00000000 
e00008da l       .text  00000000 
e00008dc l       .text  00000000 
e00008dc l       .text  00000000 
e00008de l       .text  00000000 
e00008e2 l       .text  00000000 
e00008e6 l       .text  00000000 
e00008e8 l       .text  00000000 
e00008e8 l       .text  00000000 
e00008ea l       .text  00000000 
e00008ea l       .text  00000000 
e00008ec l       .text  00000000 
e00008ec l       .text  00000000 
e00008f0 l       .text  00000000 
e00008f0 l       .text  00000000 
000013f7 l       .debug_loc     00000000 
0000141f l       .debug_loc     00000000 
0000143a l       .debug_loc     00000000 
00001476 l       .debug_loc     00000000 
00001492 l       .debug_loc     00000000 
000014ad l       .debug_loc     00000000 
000014c8 l       .debug_loc     00000000 
000014e3 l       .debug_loc     00000000 
00001521 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000a64 l       .debug_str     00000000 
0000009a l       .debug_str     00000000 
000002b0 l       .debug_ranges  00000000 
0000034a l       .debug_str     00000000 
00000a80 l       .debug_str     00000000 
00000ad8 l       .debug_str     00000000 
00000adc l       .debug_str     00000000 
00000aea l       .debug_str     00000000 
0000012a l       .debug_str     00000000 
00000545 l       .debug_str     00000000 
000002b4 l       .debug_str     00000000 
000000fa l       .debug_str     00000000 
000000b4 l       .debug_str     00000000 
000000c5 l       .debug_str     00000000 
000000d6 l       .debug_str     00000000 
000000e8 l       .debug_str     00000000 
000009cc l       .debug_str     00000000 
00000729 l       .debug_str     00000000 
00000a93 l       .debug_str     00000000 
00000120 l       .debug_str     00000000 
00000a9d l       .debug_str     00000000 
000000fe l       .debug_str     00000000 
00000107 l       .debug_str     00000000 
00000ab0 l       .debug_str     00000000 
000009d5 l       .debug_str     00000000 
00000ab7 l       .debug_str     00000000 
00000abf l       .debug_str     00000000 
00000cc6 l       .debug_str     00000000 
00000acb l       .debug_str     00000000 
000005d8 l       .debug_str     00000000 
00000571 l       .debug_str     00000000 
000008e4 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000154 l       .debug_str     00000000 
000005ec l       .debug_str     00000000 
00000335 l       .debug_str     00000000 
00000129 l       .debug_str     00000000 
00000af4 l       .debug_str     00000000 
00000275 l       .debug_str     00000000 
00000141 l       .debug_str     00000000 
00000136 l       .debug_str     00000000 
00000116 l       .debug_str     00000000 
00000bcd l       .debug_str     00000000 
0000012f l       .debug_str     00000000 
000004a7 l       .debug_str     00000000 
0000049d l       .debug_str     00000000 
000002e8 l       .debug_frame   00000000 
e00008bc l       .text  00000000 
e00008f0 l       .text  00000000 
00000000 l    df *ABS*  00000000 print.c
e00008f0 l     F .text  00000004 base_dev_null
e0001778 l     O .bss   00000008 base_stdout
e00008f0 l       .text  00000000 
e00008f0 l       .text  00000000 
e00008f0 l       .text  00000000 
e00008f2 l       .text  00000000 
e00008f2 l       .text  00000000 
e00008f4 l       .text  00000000 
e00008f4 l       .text  00000000 
e00008f4 l       .text  00000000 
e00008f4 l       .text  00000000 
e00008f4 l       .text  00000000 
e00008f6 l       .text  00000000 
e00008f8 l       .text  00000000 
e0000906 l       .text  00000000 
e000090e l       .text  00000000 
e000090e l       .text  00000000 
e0000914 l       .text  00000000 
e0000914 l       .text  00000000 
e0000916 l       .text  00000000 
e0000916 l       .text  00000000 
e0000918 l       .text  00000000 
e0000918 l       .text  00000000 
e000091c l       .text  00000000 
e000091e l       .text  00000000 
e0000920 l       .text  00000000 
e0000920 l       .text  00000000 
e0000926 l       .text  00000000 
e0000926 l       .text  00000000 
e0000926 l       .text  00000000 
e0000926 l       .text  00000000 
e0000926 l       .text  00000000 
e000092e l       .text  00000000 
e0000934 l       .text  00000000 
e0000934 l       .text  00000000 
e0000936 l       .text  00000000 
e0000936 l       .text  00000000 
e000093c l       .text  00000000 
e000093e l       .text  00000000 
e0000940 l       .text  00000000 
e0000940 l       .text  00000000 
e0000940 l       .text  00000000 
e0000940 l       .text  00000000 
e0000940 l       .text  00000000 
e0000940 l       .text  00000000 
e0000942 l       .text  00000000 
e000095c l       .text  00000000 
e000095e l       .text  00000000 
e0000960 l       .text  00000000 
e0000962 l       .text  00000000 
e0000964 l       .text  00000000 
e0000966 l       .text  00000000 
e0000968 l       .text  00000000 
e0000970 l       .text  00000000 
e0000970 l       .text  00000000 
e0000972 l       .text  00000000 
e0000972 l       .text  00000000 
e0000976 l       .text  00000000 
e000097a l       .text  00000000 
e000098e l       .text  00000000 
e000098e l       .text  00000000 
e0000998 l       .text  00000000 
e000099c l       .text  00000000 
e00009a0 l       .text  00000000 
e00009a2 l       .text  00000000 
e00009a4 l       .text  00000000 
e00009a4 l       .text  00000000 
e00009a6 l       .text  00000000 
e00009a8 l       .text  00000000 
e00009ae l       .text  00000000 
e00009ae l       .text  00000000 
e00009b0 l       .text  00000000 
e00009b0 l       .text  00000000 
e00009b4 l       .text  00000000 
e00009b4 l       .text  00000000 
e00009c0 l       .text  00000000 
e00009c4 l       .text  00000000 
e00009c4 l       .text  00000000 
e00009d0 l       .text  00000000 
e00009d0 l       .text  00000000 
e00009d8 l       .text  00000000 
e00009d8 l       .text  00000000 
e00009dc l       .text  00000000 
e00009dc l       .text  00000000 
e00009ea l       .text  00000000 
e00009ea l       .text  00000000 
e00009ee l       .text  00000000 
e00009f6 l       .text  00000000 
e00009fa l       .text  00000000 
e00009fa l       .text  00000000 
e00009fe l       .text  00000000 
e0000a04 l       .text  00000000 
e0000a08 l       .text  00000000 
e0000a0a l       .text  00000000 
e0000a0e l       .text  00000000 
e0000a0e l       .text  00000000 
e0000a12 l       .text  00000000 
e0000a18 l       .text  00000000 
e0000a18 l       .text  00000000 
e0000a1c l       .text  00000000 
e0000a30 l       .text  00000000 
e0000a30 l       .text  00000000 
e0000a32 l       .text  00000000 
e0000a38 l       .text  00000000 
e0000a3c l       .text  00000000 
e0000a40 l       .text  00000000 
e0000a40 l       .text  00000000 
e0000a48 l       .text  00000000 
e0000a4a l       .text  00000000 
e0000a58 l       .text  00000000 
e0000a58 l       .text  00000000 
e0000a5c l       .text  00000000 
e0000a68 l       .text  00000000 
e0000a68 l       .text  00000000 
e0000a6c l       .text  00000000 
e0000a6c l       .text  00000000 
e0000a7a l       .text  00000000 
e0000a7a l       .text  00000000 
e0000a7c l       .text  00000000 
e0000a80 l       .text  00000000 
e0000a80 l       .text  00000000 
e0000a84 l       .text  00000000 
e00014f4 l     O .rodata        00000010 kDigitsLow
e0000a96 l       .text  00000000 
e0000a96 l       .text  00000000 
e0000a9e l       .text  00000000 
e0000aa6 l       .text  00000000 
e0000aa6 l       .text  00000000 
e0000ab0 l       .text  00000000 
e0000ab0 l       .text  00000000 
e0000ab4 l       .text  00000000 
e0000ab4 l       .text  00000000 
e0000abe l       .text  00000000 
e0000abe l       .text  00000000 
e0000ac6 l       .text  00000000 
e0000ac6 l       .text  00000000 
e0000aca l       .text  00000000 
e0001521 l     O .rodata        00000010 kDigitsHigh
e0000ad4 l       .text  00000000 
e0000ad4 l       .text  00000000 
e0000ade l       .text  00000000 
e0000ade l       .text  00000000 
e0000ae2 l       .text  00000000 
e0000aec l       .text  00000000 
e0000aec l       .text  00000000 
e0000af0 l       .text  00000000 
e0000afa l       .text  00000000 
e0000afa l       .text  00000000 
e0000b02 l       .text  00000000 
e0000b02 l       .text  00000000 
e0000b06 l       .text  00000000 
e0000b10 l       .text  00000000 
e0000b10 l       .text  00000000 
e0000b1a l       .text  00000000 
e0000b1e l       .text  00000000 
e0000b22 l       .text  00000000 
e0000b22 l       .text  00000000 
e0000b2e l       .text  00000000 
e0000b2e l       .text  00000000 
e0000b32 l       .text  00000000 
e0000b3c l       .text  00000000 
e0000b40 l       .text  00000000 
e0000b40 l       .text  00000000 
e0000b42 l       .text  00000000 
e0000b42 l       .text  00000000 
e0000b46 l       .text  00000000 
e0000b46 l       .text  00000000 
e0000b4a l       .text  00000000 
e0000b54 l       .text  00000000 
e0000b54 l       .text  00000000 
e0000b58 l       .text  00000000 
e0000b64 l       .text  00000000 
e0000b64 l       .text  00000000 
e0000b68 l       .text  00000000 
e0000b68 l       .text  00000000 
e0000b76 l       .text  00000000 
e0000b76 l       .text  00000000 
e0000b80 l       .text  00000000 
e0000b80 l       .text  00000000 
e0000b84 l       .text  00000000 
e0000b84 l       .text  00000000 
e0000eb2 l     F .text  0000007e write_digits
e0000b9a l       .text  00000000 
e0000b9a l       .text  00000000 
e0000ba0 l       .text  00000000 
e0000ba0 l       .text  00000000 
e0000baa l       .text  00000000 
e0000baa l       .text  00000000 
e0000bac l       .text  00000000 
e0000bb6 l       .text  00000000 
e0000bb6 l       .text  00000000 
e0000bc0 l       .text  00000000 
e0000bc0 l       .text  00000000 
e0000bc2 l       .text  00000000 
e0000bc2 l       .text  00000000 
e0000bc4 l       .text  00000000 
e0000bc4 l       .text  00000000 
e0000bc8 l       .text  00000000 
e0000bc8 l       .text  00000000 
e0000bcc l       .text  00000000 
e0000bce l       .text  00000000 
e0000bd2 l       .text  00000000 
e0000bd2 l       .text  00000000 
e0000bd6 l       .text  00000000 
e0000bd6 l       .text  00000000 
e0000be2 l       .text  00000000 
e0000be2 l       .text  00000000 
e0000be4 l       .text  00000000 
e0000be4 l       .text  00000000 
e0000be6 l       .text  00000000 
e0000be6 l       .text  00000000 
e0000bee l       .text  00000000 
e0000bee l       .text  00000000 
e0000bf2 l       .text  00000000 
e0000bf2 l       .text  00000000 
e0000c00 l       .text  00000000 
e0000c00 l       .text  00000000 
e0000c02 l       .text  00000000 
e0000c10 l       .text  00000000 
e0000c10 l       .text  00000000 
e0000c14 l       .text  00000000 
e0000c14 l       .text  00000000 
e0000c18 l       .text  00000000 
e0000c18 l       .text  00000000 
e0000c26 l       .text  00000000 
e0000c26 l       .text  00000000 
e0000c2a l       .text  00000000 
e0000c2a l       .text  00000000 
e0000c32 l       .text  00000000 
e0000c32 l       .text  00000000 
e0000c34 l       .text  00000000 
e0000c34 l       .text  00000000 
e0000c36 l       .text  00000000 
e0000c36 l       .text  00000000 
e0000c4a l       .text  00000000 
e0000c4a l       .text  00000000 
e0000c4c l       .text  00000000 
e0000c5a l       .text  00000000 
e0000c5a l       .text  00000000 
e0000c5c l       .text  00000000 
e0000c5c l       .text  00000000 
e0000c5e l       .text  00000000 
e0000c66 l       .text  00000000 
e0000c6a l       .text  00000000 
e0000c6c l       .text  00000000 
e0000c76 l       .text  00000000 
e0000c76 l       .text  00000000 
e0000c7a l       .text  00000000 
e0000c84 l       .text  00000000 
e0000c84 l       .text  00000000 
e0000c88 l       .text  00000000 
e0000c94 l       .text  00000000 
e0000c94 l       .text  00000000 
e0000c98 l       .text  00000000 
e0000c98 l       .text  00000000 
e0000ca2 l       .text  00000000 
e0000ca2 l       .text  00000000 
e0000caa l       .text  00000000 
e0000caa l       .text  00000000 
e0000cae l       .text  00000000 
e0000cb6 l       .text  00000000 
e0000cb6 l       .text  00000000 
e0000cc0 l       .text  00000000 
e0000cc0 l       .text  00000000 
e0000cca l       .text  00000000 
e0000cca l       .text  00000000 
e0000cce l       .text  00000000 
e0000cd6 l       .text  00000000 
e0000cd6 l       .text  00000000 
e0000ce0 l       .text  00000000 
e0000ce2 l       .text  00000000 
e0000ce2 l       .text  00000000 
e0000ce6 l       .text  00000000 
e0000cf0 l       .text  00000000 
e0000cf0 l       .text  00000000 
e0000cf8 l       .text  00000000 
e0000cf8 l       .text  00000000 
e0000cfc l       .text  00000000 
e0000d04 l       .text  00000000 
e0000d04 l       .text  00000000 
e0000dce l     F .text  000000e4 hex_dump
e0000d0e l       .text  00000000 
e0000d10 l       .text  00000000 
e0001531 l     O .rodata        0000000f kUnknownSpec
e0000d10 l       .text  00000000 
e0000d1a l       .text  00000000 
e0000d1a l       .text  00000000 
e0000d1e l       .text  00000000 
e0000d20 l       .text  00000000 
e0000d20 l       .text  00000000 
e0000d24 l       .text  00000000 
e0000d2a l       .text  00000000 
e0000d2a l       .text  00000000 
e0000d2e l       .text  00000000 
e0000d3a l       .text  00000000 
e0000d3a l       .text  00000000 
e0000d3c l       .text  00000000 
e0000d3c l       .text  00000000 
e0000d50 l       .text  00000000 
e0000d50 l       .text  00000000 
e0000d54 l       .text  00000000 
e0000d62 l       .text  00000000 
e0000d62 l       .text  00000000 
e0000d66 l       .text  00000000 
e0000d66 l       .text  00000000 
e0000d6c l       .text  00000000 
e0000d6c l       .text  00000000 
e0000d6e l       .text  00000000 
e0000d6e l       .text  00000000 
e0000d70 l       .text  00000000 
e0000d70 l       .text  00000000 
e0000d78 l       .text  00000000 
e0000d7a l       .text  00000000 
e0000d7c l       .text  00000000 
e0000d82 l       .text  00000000 
e0000d82 l       .text  00000000 
e0000d8e l       .text  00000000 
e0001504 l     O .rodata        00000011 kErrorNul
e0000d8e l       .text  00000000 
e0000d98 l       .text  00000000 
e0000d98 l       .text  00000000 
e0000d9c l       .text  00000000 
e0000da0 l       .text  00000000 
e0000da2 l       .text  00000000 
e0000da2 l       .text  00000000 
e0000db2 l       .text  00000000 
e0000db6 l       .text  00000000 
e0000dc2 l       .text  00000000 
e0001515 l     O .rodata        0000000c kErrorTooWide
e0000dc2 l       .text  00000000 
e0000dce l       .text  00000000 
e0000dce l       .text  00000000 
e0000dce l       .text  00000000 
e0000dce l       .text  00000000 
e0000dce l       .text  00000000 
e0000dce l       .text  00000000 
e0000dd0 l       .text  00000000 
e0000de8 l       .text  00000000 
e0000dea l       .text  00000000 
e0000dec l       .text  00000000 
e0000dee l       .text  00000000 
e0000df0 l       .text  00000000 
e0000df4 l       .text  00000000 
e0000df4 l       .text  00000000 
e0000df8 l       .text  00000000 
e0000dfc l       .text  00000000 
e0000dfc l       .text  00000000 
e0000e06 l       .text  00000000 
e0000e06 l       .text  00000000 
e0000e08 l       .text  00000000 
e0000e0a l       .text  00000000 
e0000e10 l       .text  00000000 
e0000e10 l       .text  00000000 
e0000e14 l       .text  00000000 
e0000e18 l       .text  00000000 
e0000e18 l       .text  00000000 
e0000e20 l       .text  00000000 
e0000e20 l       .text  00000000 
e0000e22 l       .text  00000000 
e0000e24 l       .text  00000000 
e0000e24 l       .text  00000000 
e0000e26 l       .text  00000000 
e0000e26 l       .text  00000000 
e0000e2c l       .text  00000000 
e0000e2c l       .text  00000000 
e0000e2e l       .text  00000000 
e0000e2e l       .text  00000000 
e0000e32 l       .text  00000000 
e0000e36 l       .text  00000000 
e0000e3c l       .text  00000000 
e0000e3c l       .text  00000000 
e0000e42 l       .text  00000000 
e0000e4a l       .text  00000000 
e0000e4a l       .text  00000000 
e0000e4c l       .text  00000000 
e0000e50 l       .text  00000000 
e0000e54 l       .text  00000000 
e0000e5a l       .text  00000000 
e0000e5e l       .text  00000000 
e0000e62 l       .text  00000000 
e0000e64 l       .text  00000000 
e0000e6a l       .text  00000000 
e0000e6c l       .text  00000000 
e0000e74 l       .text  00000000 
e0000e7a l       .text  00000000 
e0000e7e l       .text  00000000 
e0000e7e l       .text  00000000 
e0000e80 l       .text  00000000 
e0000e82 l       .text  00000000 
e0000e82 l       .text  00000000 
e0000e84 l       .text  00000000 
e0000e86 l       .text  00000000 
e0000e8a l       .text  00000000 
e0000e8a l       .text  00000000 
e0000e8c l       .text  00000000 
e0000e92 l       .text  00000000 
e0000e92 l       .text  00000000 
e0000e94 l       .text  00000000 
e0000e9c l       .text  00000000 
e0000e9e l       .text  00000000 
e0000ea2 l       .text  00000000 
e0000ea4 l       .text  00000000 
e0000ea6 l       .text  00000000 
e0000ea8 l       .text  00000000 
e0000eb2 l       .text  00000000 
e0000eb2 l       .text  00000000 
e0000eb2 l       .text  00000000 
e0000eb2 l       .text  00000000 
e0000eb2 l       .text  00000000 
e0000eb4 l       .text  00000000 
e0000eb6 l       .text  00000000 
e0000eb8 l       .text  00000000 
e0000eb8 l       .text  00000000 
e0000eba l       .text  00000000 
e0000ebc l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec0 l       .text  00000000 
e0000ec2 l       .text  00000000 
e0000ec2 l       .text  00000000 
e0000ece l       .text  00000000 
e0000ece l       .text  00000000 
e0000ed0 l       .text  00000000 
e0000ed4 l       .text  00000000 
e0000edc l       .text  00000000 
e0000edc l       .text  00000000 
e0000ede l       .text  00000000 
e0000ee2 l       .text  00000000 
e0000ee6 l       .text  00000000 
e0000ee6 l       .text  00000000 
e0000ee8 l       .text  00000000 
e0000ee8 l       .text  00000000 
e0000eec l       .text  00000000 
e0000ef2 l       .text  00000000 
e0000ef2 l       .text  00000000 
e0000ef4 l       .text  00000000 
e0000ef6 l       .text  00000000 
e0000ef8 l       .text  00000000 
e0000efc l       .text  00000000 
e0000f00 l       .text  00000000 
e0000f04 l       .text  00000000 
e0000f04 l       .text  00000000 
e0000f0e l       .text  00000000 
e0000f12 l       .text  00000000 
e0000f14 l       .text  00000000 
e0000f18 l       .text  00000000 
e0000f1c l       .text  00000000 
e0000f1e l       .text  00000000 
e0000f20 l       .text  00000000 
e0000f22 l       .text  00000000 
e0000f22 l       .text  00000000 
e0000f28 l       .text  00000000 
e0000f2a l       .text  00000000 
e0000f2a l       .text  00000000 
e0000f30 l       .text  00000000 
e0000f30 l       .text  00000000 
0000153e l       .debug_loc     00000000 
0000156a l       .debug_loc     00000000 
00001585 l       .debug_loc     00000000 
000015ab l       .debug_loc     00000000 
000015d7 l       .debug_loc     00000000 
00001608 l       .debug_loc     00000000 
00001639 l       .debug_loc     00000000 
00001675 l       .debug_loc     00000000 
000016a6 l       .debug_loc     00000000 
000016cd l       .debug_loc     00000000 
000016fe l       .debug_loc     00000000 
00001719 l       .debug_loc     00000000 
00001735 l       .debug_loc     00000000 
00001750 l       .debug_loc     00000000 
00001776 l       .debug_loc     00000000 
0000179c l       .debug_loc     00000000 
000017d8 l       .debug_loc     00000000 
000018e3 l       .debug_loc     00000000 
00001a3d l       .debug_loc     00000000 
00001b3d l       .debug_loc     00000000 
00001c48 l       .debug_loc     00000000 
00001c68 l       .debug_loc     00000000 
00001c8e l       .debug_loc     00000000 
00001cbe l       .debug_loc     00000000 
00001ef6 l       .debug_loc     00000000 
00001f12 l       .debug_loc     00000000 
00001f2d l       .debug_loc     00000000 
000020a2 l       .debug_loc     00000000 
000021f2 l       .debug_loc     00000000 
00002306 l       .debug_loc     00000000 
0000232c l       .debug_loc     00000000 
00002347 l       .debug_loc     00000000 
00002362 l       .debug_loc     00000000 
0000237d l       .debug_loc     00000000 
00002398 l       .debug_loc     00000000 
000023b3 l       .debug_loc     00000000 
000023cf l       .debug_loc     00000000 
000023ea l       .debug_loc     00000000 
00002405 l       .debug_loc     00000000 
00002420 l       .debug_loc     00000000 
0000243b l       .debug_loc     00000000 
0000246d l       .debug_loc     00000000 
000024a0 l       .debug_loc     00000000 
000024bb l       .debug_loc     00000000 
0000250e l       .debug_loc     00000000 
00002541 l       .debug_loc     00000000 
0000255c l       .debug_loc     00000000 
00002577 l       .debug_loc     00000000 
00002592 l       .debug_loc     00000000 
000025ad l       .debug_loc     00000000 
000025c8 l       .debug_loc     00000000 
000025e3 l       .debug_loc     00000000 
000025fe l       .debug_loc     00000000 
00002619 l       .debug_loc     00000000 
00002634 l       .debug_loc     00000000 
0000264f l       .debug_loc     00000000 
0000266a l       .debug_loc     00000000 
00002686 l       .debug_loc     00000000 
000026a5 l       .debug_loc     00000000 
000026c0 l       .debug_loc     00000000 
000026f1 l       .debug_loc     00000000 
00002717 l       .debug_loc     00000000 
00002748 l       .debug_loc     00000000 
00002779 l       .debug_loc     00000000 
00002794 l       .debug_loc     00000000 
000027af l       .debug_loc     00000000 
000027ca l       .debug_loc     00000000 
000027fb l       .debug_loc     00000000 
00002816 l       .debug_loc     00000000 
00002831 l       .debug_loc     00000000 
0000284d l       .debug_loc     00000000 
00002873 l       .debug_loc     00000000 
000028a4 l       .debug_loc     00000000 
000028bf l       .debug_loc     00000000 
000028da l       .debug_loc     00000000 
00002900 l       .debug_loc     00000000 
00002926 l       .debug_loc     00000000 
00002941 l       .debug_loc     00000000 
0000295c l       .debug_loc     00000000 
00002977 l       .debug_loc     00000000 
00002992 l       .debug_loc     00000000 
000029b1 l       .debug_loc     00000000 
000029cc l       .debug_loc     00000000 
000029e7 l       .debug_loc     00000000 
00002a03 l       .debug_loc     00000000 
00002a1e l       .debug_loc     00000000 
00002a39 l       .debug_loc     00000000 
00002a58 l       .debug_loc     00000000 
00002a7e l       .debug_loc     00000000 
00002aaf l       .debug_loc     00000000 
00002b07 l       .debug_loc     00000000 
00002b51 l       .debug_loc     00000000 
00002ba3 l       .debug_loc     00000000 
00002be0 l       .debug_loc     00000000 
00002c1c l       .debug_loc     00000000 
00002c86 l       .debug_loc     00000000 
00002ccf l       .debug_loc     00000000 
00002d39 l       .debug_loc     00000000 
00002d5f l       .debug_loc     00000000 
00002d7a l       .debug_loc     00000000 
00002d95 l       .debug_loc     00000000 
00002dbc l       .debug_loc     00000000 
00002e04 l       .debug_loc     00000000 
00002e2a l       .debug_loc     00000000 
00002e50 l       .debug_loc     00000000 
00002e76 l       .debug_loc     00000000 
00002e91 l       .debug_loc     00000000 
00002ec1 l       .debug_loc     00000000 
00002ee7 l       .debug_loc     00000000 
00002f19 l       .debug_loc     00000000 
00002f57 l       .debug_loc     00000000 
00002f86 l       .debug_loc     00000000 
00002fa1 l       .debug_loc     00000000 
00002fd4 l       .debug_loc     00000000 
00002fef l       .debug_loc     00000000 
0000302b l       .debug_loc     00000000 
00003051 l       .debug_loc     00000000 
0000306c l       .debug_loc     00000000 
00003087 l       .debug_loc     00000000 
000030a2 l       .debug_loc     00000000 
000030f8 l       .debug_loc     00000000 
00003127 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000aff l       .debug_str     00000000 
0000009a l       .debug_str     00000000 
00000400 l       .debug_ranges  00000000 
00000b1d l       .debug_str     00000000 
00000729 l       .debug_str     00000000 
0000047f l       .debug_str     00000000 
00000b3c l       .debug_str     00000000 
00000b54 l       .debug_str     00000000 
00000b48 l       .debug_str     00000000 
00000912 l       .debug_str     00000000 
00000e65 l       .debug_str     00000000 
00000cc6 l       .debug_str     00000000 
000009cc l       .debug_str     00000000 
00000b62 l       .debug_str     00000000 
00000b6c l       .debug_str     00000000 
00000ebd l       .debug_str     00000000 
00000b7a l       .debug_str     00000000 
00000b44 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
000004b6 l       .debug_str     00000000 
00000d62 l       .debug_str     00000000 
00000571 l       .debug_str     00000000 
00000f44 l       .debug_str     00000000 
00000eea l       .debug_str     00000000 
00000d8c l       .debug_str     00000000 
00000f54 l       .debug_str     00000000 
000009d5 l       .debug_str     00000000 
00000b84 l       .debug_str     00000000 
00000b90 l       .debug_str     00000000 
00000b9d l       .debug_str     00000000 
00000bec l       .debug_str     00000000 
00000bdb l       .debug_str     00000000 
00000bb4 l       .debug_str     00000000 
00000bc3 l       .debug_str     00000000 
00000bd2 l       .debug_str     00000000 
00000bff l       .debug_str     00000000 
000001eb l       .debug_str     00000000 
00000188 l       .debug_str     00000000 
0000018f l       .debug_str     00000000 
00000199 l       .debug_str     00000000 
000001a4 l       .debug_str     00000000 
000001af l       .debug_str     00000000 
000001bf l       .debug_str     00000000 
000001ce l       .debug_str     00000000 
000001dd l       .debug_str     00000000 
00000c0a l       .debug_str     00000000 
00000c13 l       .debug_str     00000000 
00000c1e l       .debug_str     00000000 
00000c26 l       .debug_str     00000000 
00000c32 l       .debug_str     00000000 
00000c3e l       .debug_str     00000000 
00000c4b l       .debug_str     00000000 
00000c5b l       .debug_str     00000000 
00000c6c l       .debug_str     00000000 
00000c79 l       .debug_str     00000000 
00000c82 l       .debug_str     00000000 
00000c8c l       .debug_str     00000000 
00000c96 l       .debug_str     00000000 
00000ca1 l       .debug_str     00000000 
00000cab l       .debug_str     00000000 
00000cb6 l       .debug_str     00000000 
00000cc4 l       .debug_str     00000000 
0000072e l       .debug_str     00000000 
00000720 l       .debug_str     00000000 
00000cd6 l       .debug_str     00000000 
00000ccd l       .debug_str     00000000 
000003cb l       .debug_str     00000000 
00000160 l       .debug_str     00000000 
00000154 l       .debug_str     00000000 
00000cec l       .debug_str     00000000 
00000567 l       .debug_str     00000000 
00000ce1 l       .debug_str     00000000 
00000121 l       .debug_str     00000000 
00000e13 l       .debug_str     00000000 
00000d00 l       .debug_str     00000000 
00000e21 l       .debug_str     00000000 
00000cd1 l       .debug_str     00000000 
00000e32 l       .debug_str     00000000 
00000275 l       .debug_str     00000000 
00000d10 l       .debug_str     00000000 
00000acb l       .debug_str     00000000 
0000012f l       .debug_str     00000000 
0000012a l       .debug_str     00000000 
000004a7 l       .debug_str     00000000 
0000049d l       .debug_str     00000000 
00000abf l       .debug_str     00000000 
000002c8 l       .debug_ranges  00000000 
00000e40 l       .debug_str     00000000 
00000eca l       .debug_str     00000000 
00000f05 l       .debug_str     00000000 
000003a8 l       .debug_ranges  00000000 
00000da6 l       .debug_str     00000000 
000002e0 l       .debug_ranges  00000000 
00000308 l       .debug_ranges  00000000 
00000328 l       .debug_ranges  00000000 
00000340 l       .debug_ranges  00000000 
00000378 l       .debug_ranges  00000000 
00000360 l       .debug_ranges  00000000 
00000390 l       .debug_ranges  00000000 
00000d2a l       .debug_str     00000000 
00000d40 l       .debug_str     00000000 
00000670 l       .debug_str     00000000 
00000428 l       .debug_str     00000000 
00000d49 l       .debug_str     00000000 
00000d87 l       .debug_str     00000000 
00000d74 l       .debug_str     00000000 
00000d51 l       .debug_str     00000000 
000012fa l       .debug_str     00000000 
00000d6a l       .debug_str     00000000 
00000d90 l       .debug_str     00000000 
00000da2 l       .debug_str     00000000 
00000120 l       .debug_str     00000000 
00000a93 l       .debug_str     00000000 
000010ca l       .debug_str     00000000 
00000db1 l       .debug_str     00000000 
00000dab l       .debug_str     00000000 
00000db8 l       .debug_str     00000000 
00000dc0 l       .debug_str     00000000 
00000a5e l       .debug_str     00000000 
00000dc4 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
000010e8 l       .debug_str     00000000 
00000dc8 l       .debug_str     00000000 
00000eb4 l       .debug_str     00000000 
0000116f l       .debug_str     00000000 
00000f39 l       .debug_str     00000000 
00000f30 l       .debug_str     00000000 
00000f4b l       .debug_str     00000000 
00000628 l       .debug_str     00000000 
00000e4e l       .debug_str     00000000 
00000e5c l       .debug_str     00000000 
00000ed4 l       .debug_str     00000000 
00000dd7 l       .debug_str     00000000 
00000e6a l       .debug_str     00000000 
00000dde l       .debug_str     00000000 
00000be8 l       .debug_str     00000000 
00000e77 l       .debug_str     00000000 
00000ea1 l       .debug_str     00000000 
00000ef1 l       .debug_str     00000000 
00000bcd l       .debug_str     00000000 
000003e8 l       .debug_ranges  00000000 
00000ee4 l       .debug_str     00000000 
00000f00 l       .debug_str     00000000 
00000f13 l       .debug_str     00000000 
00000bbe l       .debug_str     00000000 
000003c8 l       .debug_ranges  00000000 
00000edd l       .debug_str     00000000 
00000f22 l       .debug_str     00000000 
00000f2b l       .debug_str     00000000 
00000df0 l       .debug_str     00000000 
00000e04 l       .debug_str     00000000 
00000e84 l       .debug_str     00000000 
00000e93 l       .debug_str     00000000 
00000e0c l       .debug_str     00000000 
0000032c l       .debug_frame   00000000 
e00008f4 l       .text  00000000 
e0000926 l       .text  00000000 
e0000940 l       .text  00000000 
e0000dce l       .text  00000000 
e0000eb2 l       .text  00000000 
e0000f30 l       .text  00000000 
00000000 l    df *ABS*  00000000 status.c
e0000f30 l       .text  00000000 
e0000f30 l       .text  00000000 
e0000f30 l       .text  00000000 
e0000f30 l       .text  00000000 
e0000f34 l       .text  00000000 
e0000f3c l       .text  00000000 
e0000f3c l       .text  00000000 
e0000f40 l       .text  00000000 
e0000f40 l       .text  00000000 
e0000f4c l       .text  00000000 
e0000f4e l       .text  00000000 
e0000f4e l       .text  00000000 
e0000f52 l       .text  00000000 
e0000f5e l       .text  00000000 
e0000f60 l       .text  00000000 
e0000f64 l       .text  00000000 
e0000f66 l       .text  00000000 
e0000f66 l       .text  00000000 
e0000f6a l       .text  00000000 
e0000f6a l       .text  00000000 
e0000f6e l       .text  00000000 
e0000f6e l       .text  00000000 
e0000f70 l       .text  00000000 
e0000f70 l       .text  00000000 
e0000f74 l       .text  00000000 
e0000f74 l       .text  00000000 
e0000f76 l       .text  00000000 
e0000f7a l       .text  00000000 
e0000f7a l       .text  00000000 
e0000f7e l       .text  00000000 
e0000f82 l       .text  00000000 
e0000f88 l       .text  00000000 
e0000f88 l       .text  00000000 
e0000f8c l       .text  00000000 
e0000f8e l       .text  00000000 
e0000f8e l       .text  00000000 
e0000f94 l       .text  00000000 
e0000f94 l       .text  00000000 
e0000f9a l       .text  00000000 
e0000f9a l       .text  00000000 
e0000f9c l       .text  00000000 
e0000f9c l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000fa2 l       .text  00000000 
00003142 l       .debug_loc     00000000 
0000315d l       .debug_loc     00000000 
0000318e l       .debug_loc     00000000 
000031b4 l       .debug_loc     00000000 
000031da l       .debug_loc     00000000 
000031f5 l       .debug_loc     00000000 
00003217 l       .debug_loc     00000000 
0000323e l       .debug_loc     00000000 
00003265 l       .debug_loc     00000000 
00003289 l       .debug_loc     00000000 
000032ba l       .debug_loc     00000000 
000032d5 l       .debug_loc     00000000 
00003306 l       .debug_loc     00000000 
00003360 l       .debug_loc     00000000 
0000339c l       .debug_loc     00000000 
000033c0 l       .debug_loc     00000000 
000033e5 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00000f5a l       .debug_str     00000000 
0000009a l       .debug_str     00000000 
000004b0 l       .debug_ranges  00000000 
00000f76 l       .debug_str     00000000 
00000120 l       .debug_str     00000000 
000009cc l       .debug_str     00000000 
00000f86 l       .debug_str     00000000 
00000729 l       .debug_str     00000000 
0000047f l       .debug_str     00000000 
000010b4 l       .debug_str     00000000 
00000f93 l       .debug_str     00000000 
00000f97 l       .debug_str     00000000 
00000fa2 l       .debug_str     00000000 
00000fab l       .debug_str     00000000 
00000fbc l       .debug_str     00000000 
00000fce l       .debug_str     00000000 
00000fd8 l       .debug_str     00000000 
00000fe7 l       .debug_str     00000000 
00000ff9 l       .debug_str     00000000 
0000100c l       .debug_str     00000000 
00001020 l       .debug_str     00000000 
00001029 l       .debug_str     00000000 
00001035 l       .debug_str     00000000 
00001044 l       .debug_str     00000000 
0000104e l       .debug_str     00000000 
0000105b l       .debug_str     00000000 
00001065 l       .debug_str     00000000 
00001076 l       .debug_str     00000000 
00000121 l       .debug_str     00000000 
000009d5 l       .debug_str     00000000 
00000cc6 l       .debug_str     00000000 
00000cc4 l       .debug_str     00000000 
000010c5 l       .debug_str     00000000 
000010d3 l       .debug_str     00000000 
000010dc l       .debug_str     00000000 
0000120b l       .debug_str     00000000 
00000749 l       .debug_str     00000000 
00000760 l       .debug_str     00000000 
00000763 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
0000077f l       .debug_str     00000000 
0000076e l       .debug_str     00000000 
00000769 l       .debug_str     00000000 
0000071a l       .debug_str     00000000 
00001102 l       .debug_str     00000000 
000010c0 l       .debug_str     00000000 
00001110 l       .debug_str     00000000 
00000dc4 l       .debug_str     00000000 
00000498 l       .debug_ranges  00000000 
000010e1 l       .debug_str     00000000 
000000b2 l       .debug_str     00000000 
000010ca l       .debug_str     00000000 
00000db1 l       .debug_str     00000000 
000010ec l       .debug_str     00000000 
00000dc8 l       .debug_str     00000000 
0000111a l       .debug_str     00000000 
000010e8 l       .debug_str     00000000 
00000428 l       .debug_str     00000000 
00000520 l       .debug_frame   00000000 
e0000fa2 l       .text  00000000 
00000000 l    df *ABS*  00000000 memory.c
e0000fa2 l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000fa2 l       .text  00000000 
e0000faa l       .text  00000000 
e0000fae l       .text  00000000 
e0000fae l       .text  00000000 
e0000fb2 l       .text  00000000 
e0000fb2 l       .text  00000000 
e0000fb6 l       .text  00000000 
e0000fb6 l       .text  00000000 
e0000fc2 l       .text  00000000 
e0000fc4 l       .text  00000000 
e0000fc4 l       .text  00000000 
e0000fca l       .text  00000000 
e0000fca l       .text  00000000 
e0000fce l       .text  00000000 
e0000fd0 l       .text  00000000 
e0000fd4 l       .text  00000000 
e0000fd4 l       .text  00000000 
e0000fd6 l       .text  00000000 
e0000fd6 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fd8 l       .text  00000000 
e0000fe0 l       .text  00000000 
e0000fe4 l       .text  00000000 
e0000fe6 l       .text  00000000 
e0000fea l       .text  00000000 
e0000fee l       .text  00000000 
e0000fee l       .text  00000000 
e0000ff2 l       .text  00000000 
e0000ff2 l       .text  00000000 
e0000ff6 l       .text  00000000 
e0000ff8 l       .text  00000000 
e0000ff8 l       .text  00000000 
e0000ffc l       .text  00000000 
e0000ffc l       .text  00000000 
e0000ffe l       .text  00000000 
e0000ffe l       .text  00000000 
e0001000 l       .text  00000000 
e0001000 l       .text  00000000 
e0001004 l       .text  00000000 
e0001004 l       .text  00000000 
e0001008 l       .text  00000000 
e000100a l       .text  00000000 
e0001010 l       .text  00000000 
e0001010 l       .text  00000000 
e0001014 l       .text  00000000 
e0001018 l       .text  00000000 
e0001020 l       .text  00000000 
e0001020 l       .text  00000000 
e0001022 l       .text  00000000 
e0001022 l       .text  00000000 
e0001024 l       .text  00000000 
e0001024 l       .text  00000000 
e000102a l       .text  00000000 
e000102a l       .text  00000000 
e000102a l       .text  00000000 
e000102a l       .text  00000000 
e000102a l       .text  00000000 
e000102e l       .text  00000000 
e000102e l       .text  00000000 
e0001032 l       .text  00000000 
e0001032 l       .text  00000000 
e000103a l       .text  00000000 
e000103a l       .text  00000000 
e000103e l       .text  00000000 
e0001042 l       .text  00000000 
e0001042 l       .text  00000000 
e0001044 l       .text  00000000 
e0001044 l       .text  00000000 
e0001048 l       .text  00000000 
e0001048 l       .text  00000000 
e000104c l       .text  00000000 
e000104c l       .text  00000000 
e000104e l       .text  00000000 
e0001050 l       .text  00000000 
e0001052 l       .text  00000000 
e0001052 l       .text  00000000 
e0001056 l       .text  00000000 
e000105a l       .text  00000000 
e000106a l       .text  00000000 
e000106a l       .text  00000000 
e000106e l       .text  00000000 
e000106e l       .text  00000000 
e0001070 l       .text  00000000 
e0001070 l       .text  00000000 
e0001072 l       .text  00000000 
e0001072 l       .text  00000000 
e0001076 l       .text  00000000 
e0001076 l       .text  00000000 
e000107c l       .text  00000000 
e0001080 l       .text  00000000 
e0001080 l       .text  00000000 
e0001084 l       .text  00000000 
e0001088 l       .text  00000000 
e000108a l       .text  00000000 
e000108c l       .text  00000000 
e000108c l       .text  00000000 
e000108c l       .text  00000000 
e000108c l       .text  00000000 
e000108c l       .text  00000000 
e0001090 l       .text  00000000 
e0001090 l       .text  00000000 
e0001094 l       .text  00000000 
e0001094 l       .text  00000000 
e000109c l       .text  00000000 
e00010a0 l       .text  00000000 
e00010a4 l       .text  00000000 
e00010a6 l       .text  00000000 
e00010a8 l       .text  00000000 
e00010a8 l       .text  00000000 
e00010ac l       .text  00000000 
e00010b0 l       .text  00000000 
e00010b0 l       .text  00000000 
e00010b2 l       .text  00000000 
e00010b4 l       .text  00000000 
e00010b6 l       .text  00000000 
e00010bc l       .text  00000000 
e00010bc l       .text  00000000 
e00010be l       .text  00000000 
e00010c2 l       .text  00000000 
e00010ce l       .text  00000000 
e00010dc l       .text  00000000 
e00010dc l       .text  00000000 
e00010e0 l       .text  00000000 
e00010e2 l       .text  00000000 
e00010e2 l       .text  00000000 
e00010e6 l       .text  00000000 
e00010ea l       .text  00000000 
e00010ea l       .text  00000000 
e00010ee l       .text  00000000 
e00010f2 l       .text  00000000 
e00010f6 l       .text  00000000 
e00010fa l       .text  00000000 
e00010fe l       .text  00000000 
e00010fe l       .text  00000000 
e0001102 l       .text  00000000 
e0001106 l       .text  00000000 
e0001108 l       .text  00000000 
e0001108 l       .text  00000000 
e000110a l       .text  00000000 
e000110e l       .text  00000000 
e000110e l       .text  00000000 
e0001116 l       .text  00000000 
e000111a l       .text  00000000 
e000111a l       .text  00000000 
e000111e l       .text  00000000 
e0001122 l       .text  00000000 
e0001126 l       .text  00000000 
e0001128 l       .text  00000000 
e000112c l       .text  00000000 
e000112c l       .text  00000000 
e0001130 l       .text  00000000 
e0001130 l       .text  00000000 
e0001134 l       .text  00000000 
e0001136 l       .text  00000000 
e0001136 l       .text  00000000 
e000113a l       .text  00000000 
e000113a l       .text  00000000 
e000113a l       .text  00000000 
e000113a l       .text  00000000 
e000113a l       .text  00000000 
e000113e l       .text  00000000 
e000113e l       .text  00000000 
e0001142 l       .text  00000000 
e0001142 l       .text  00000000 
e000114a l       .text  00000000 
e000114a l       .text  00000000 
e000114e l       .text  00000000 
e0001150 l       .text  00000000 
e0001154 l       .text  00000000 
e0001154 l       .text  00000000 
e0001156 l       .text  00000000 
e0001156 l       .text  00000000 
e000115a l       .text  00000000 
e000115a l       .text  00000000 
e0001160 l       .text  00000000 
e0001160 l       .text  00000000 
e0001164 l       .text  00000000 
e0001164 l       .text  00000000 
e000116c l       .text  00000000 
e0001170 l       .text  00000000 
e0001170 l       .text  00000000 
e0001172 l       .text  00000000 
e0001176 l       .text  00000000 
e0001176 l       .text  00000000 
e0001178 l       .text  00000000 
e000117a l       .text  00000000 
e000117a l       .text  00000000 
e0001182 l       .text  00000000 
e0001182 l       .text  00000000 
e0001186 l       .text  00000000 
e0001186 l       .text  00000000 
e0001190 l       .text  00000000 
e0001194 l       .text  00000000 
e0001194 l       .text  00000000 
e0001198 l       .text  00000000 
e0001198 l       .text  00000000 
e000119c l       .text  00000000 
e00011a0 l       .text  00000000 
e00011a0 l       .text  00000000 
e00011a4 l       .text  00000000 
e00011a8 l       .text  00000000 
e00011a8 l       .text  00000000 
e00011aa l       .text  00000000 
e00011ae l       .text  00000000 
e00011ae l       .text  00000000 
e00011b2 l       .text  00000000 
e00011b6 l       .text  00000000 
e00011ba l       .text  00000000 
e00011be l       .text  00000000 
e00011c2 l       .text  00000000 
e00011c4 l       .text  00000000 
e00011c4 l       .text  00000000 
e00011c8 l       .text  00000000 
e00011c8 l       .text  00000000 
e00011ca l       .text  00000000 
e00011cc l       .text  00000000 
e00011cc l       .text  00000000 
e00011d4 l       .text  00000000 
e00011d8 l       .text  00000000 
e00011d8 l       .text  00000000 
e00011da l       .text  00000000 
e00011de l       .text  00000000 
e00011de l       .text  00000000 
e00011e0 l       .text  00000000 
e00011e2 l       .text  00000000 
e00011e2 l       .text  00000000 
e00011e4 l       .text  00000000 
e00011e4 l       .text  00000000 
e00011e8 l       .text  00000000 
e00011e8 l       .text  00000000 
e00011ea l       .text  00000000 
e00011ea l       .text  00000000 
e00011ee l       .text  00000000 
e00011ee l       .text  00000000 
e00011f0 l       .text  00000000 
e00011f0 l       .text  00000000 
e00011f4 l       .text  00000000 
e00011f4 l       .text  00000000 
e00011f6 l       .text  00000000 
e00011f6 l       .text  00000000 
e00011f8 l       .text  00000000 
e00011f8 l       .text  00000000 
e00011fa l       .text  00000000 
e00011fa l       .text  00000000 
00003407 l       .debug_loc     00000000 
0000342d l       .debug_loc     00000000 
00003453 l       .debug_loc     00000000 
00003479 l       .debug_loc     00000000 
0000349f l       .debug_loc     00000000 
000034be l       .debug_loc     00000000 
000034dd l       .debug_loc     00000000 
00003503 l       .debug_loc     00000000 
0000351e l       .debug_loc     00000000 
00003567 l       .debug_loc     00000000 
0000358d l       .debug_loc     00000000 
000035af l       .debug_loc     00000000 
000035ca l       .debug_loc     00000000 
000035e5 l       .debug_loc     00000000 
00003600 l       .debug_loc     00000000 
0000361b l       .debug_loc     00000000 
00003636 l       .debug_loc     00000000 
00003651 l       .debug_loc     00000000 
000036a1 l       .debug_loc     00000000 
000036bc l       .debug_loc     00000000 
000036d7 l       .debug_loc     00000000 
000036f9 l       .debug_loc     00000000 
00003714 l       .debug_loc     00000000 
0000372f l       .debug_loc     00000000 
0000374a l       .debug_loc     00000000 
00003765 l       .debug_loc     00000000 
00003780 l       .debug_loc     00000000 
0000379f l       .debug_loc     00000000 
000037be l       .debug_loc     00000000 
000037e4 l       .debug_loc     00000000 
000037ff l       .debug_loc     00000000 
00003848 l       .debug_loc     00000000 
0000386e l       .debug_loc     00000000 
00003889 l       .debug_loc     00000000 
000038a4 l       .debug_loc     00000000 
000038bf l       .debug_loc     00000000 
000038da l       .debug_loc     00000000 
000038f5 l       .debug_loc     00000000 
00003910 l       .debug_loc     00000000 
0000392b l       .debug_loc     00000000 
0000394a l       .debug_loc     00000000 
00003969 l       .debug_loc     00000000 
00003984 l       .debug_loc     00000000 
000039cb l       .debug_loc     00000000 
000039e6 l       .debug_loc     00000000 
00003a01 l       .debug_loc     00000000 
00003a27 l       .debug_loc     00000000 
00003a42 l       .debug_loc     00000000 
00003a5d l       .debug_loc     00000000 
00003a78 l       .debug_loc     00000000 
00003a93 l       .debug_loc     00000000 
00003aae l       .debug_loc     00000000 
00003ad4 l       .debug_loc     00000000 
00003aef l       .debug_loc     00000000 
00003b15 l       .debug_loc     00000000 
00003b3b l       .debug_loc     00000000 
00003b58 l       .debug_loc     00000000 
00003bb3 l       .debug_loc     00000000 
00003bce l       .debug_loc     00000000 
00003bf4 l       .debug_loc     00000000 
00003c1a l       .debug_loc     00000000 
00003c35 l       .debug_loc     00000000 
00003c5b l       .debug_loc     00000000 
00003cb8 l       .debug_loc     00000000 
00003cd3 l       .debug_loc     00000000 
00003cee l       .debug_loc     00000000 
00003d4b l       .debug_loc     00000000 
00003d68 l       .debug_loc     00000000 
00003d83 l       .debug_loc     00000000 
00003dca l       .debug_loc     00000000 
00003de5 l       .debug_loc     00000000 
00003e00 l       .debug_loc     00000000 
00003e1b l       .debug_loc     00000000 
00003e36 l       .debug_loc     00000000 
00003e51 l       .debug_loc     00000000 
00003e77 l       .debug_loc     00000000 
00003e92 l       .debug_loc     00000000 
00003ead l       .debug_loc     00000000 
00003ec8 l       .debug_loc     00000000 
00003ee3 l       .debug_loc     00000000 
00003f10 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001121 l       .debug_str     00000000 
0000009a l       .debug_str     00000000 
00000550 l       .debug_ranges  00000000 
0000113d l       .debug_str     00000000 
00001147 l       .debug_str     00000000 
00001151 l       .debug_str     00000000 
000009d5 l       .debug_str     00000000 
00000720 l       .debug_str     00000000 
0000072e l       .debug_str     00000000 
00000a93 l       .debug_str     00000000 
000009cc l       .debug_str     00000000 
0000115b l       .debug_str     00000000 
00001258 l       .debug_str     00000000 
00001262 l       .debug_str     00000000 
00000d8c l       .debug_str     00000000 
00001175 l       .debug_str     00000000 
00001180 l       .debug_str     00000000 
00000cc6 l       .debug_str     00000000 
00000cc4 l       .debug_str     00000000 
0000118c l       .debug_str     00000000 
0000119e l       .debug_str     00000000 
000011ae l       .debug_str     00000000 
00001163 l       .debug_str     00000000 
000011be l       .debug_str     00000000 
000011c8 l       .debug_str     00000000 
0000055d l       .debug_str     00000000 
000003c2 l       .debug_str     00000000 
00000120 l       .debug_str     00000000 
000011d0 l       .debug_str     00000000 
0000092c l       .debug_str     00000000 
00000dd7 l       .debug_str     00000000 
0000121e l       .debug_str     00000000 
00001223 l       .debug_str     00000000 
00001227 l       .debug_str     00000000 
0000122d l       .debug_str     00000000 
000011a2 l       .debug_str     00000000 
00000275 l       .debug_str     00000000 
000011b2 l       .debug_str     00000000 
000004e0 l       .debug_ranges  00000000 
00000bbe l       .debug_str     00000000 
000004c8 l       .debug_ranges  00000000 
00000e0c l       .debug_str     00000000 
00001232 l       .debug_str     00000000 
00001239 l       .debug_str     00000000 
000004f8 l       .debug_ranges  00000000 
000011ec l       .debug_str     00000000 
00001241 l       .debug_str     00000000 
00001245 l       .debug_str     00000000 
00001249 l       .debug_str     00000000 
0000124e l       .debug_str     00000000 
00001253 l       .debug_str     00000000 
0000125d l       .debug_str     00000000 
000011f3 l       .debug_str     00000000 
0000050c l       .debug_str     00000000 
00000ab0 l       .debug_str     00000000 
00001268 l       .debug_str     00000000 
00000510 l       .debug_ranges  00000000 
0000126d l       .debug_str     00000000 
000011d9 l       .debug_str     00000000 
00000f2b l       .debug_str     00000000 
00000ab7 l       .debug_str     00000000 
00000528 l       .debug_ranges  00000000 
000011fb l       .debug_str     00000000 
0000099a l       .debug_str     00000000 
0000120d l       .debug_str     00000000 
00001215 l       .debug_str     00000000 
000005ec l       .debug_str     00000000 
000009d9 l       .debug_str     00000000 
000009c2 l       .debug_str     00000000 
00000554 l       .debug_frame   00000000 
e000102a l       .text  00000000 
e000108c l       .text  00000000 
e000113a l       .text  00000000 
e00011fa l       .text  00000000 
00000000 l    df *ABS*  00000000 device_sim_verilator.c
00003f30 l       .debug_loc     00000000 
00000000 l       .debug_str     00000000 
00001275 l       .debug_str     00000000 
0000009a l       .debug_str     00000000 
000005b0 l       .debug_ranges  00000000 
0000129f l       .debug_str     00000000 
000012ff l       .debug_str     00000000 
000012f3 l       .debug_str     00000000 
000012ab l       .debug_str     00000000 
000012b8 l       .debug_str     00000000 
000012cc l       .debug_str     00000000 
000012dd l       .debug_str     00000000 
000009cc l       .debug_str     00000000 
0000130d l       .debug_str     00000000 
000009d9 l       .debug_str     00000000 
000009c2 l       .debug_str     00000000 
0000131d l       .debug_str     00000000 
0000133b l       .debug_str     00000000 
00001352 l       .debug_str     00000000 
00001362 l       .debug_str     00000000 
00001372 l       .debug_str     00000000 
00001380 l       .debug_str     00000000 
00000120 l       .debug_str     00000000 
0000138e l       .debug_str     00000000 
000013a3 l       .debug_str     00000000 
000013ba l       .debug_str     00000000 
00000a93 l       .debug_str     00000000 
000013d3 l       .debug_str     00000000 
000013ef l       .debug_str     00000000 
00000428 l       .debug_str     00000000 
00000a15 l       .debug_str     00000000 
00000a59 l       .debug_str     00000000 
000013fe l       .debug_str     00000000 
00000618 l       .debug_frame   00000000 
e00001ec g     F .text  000000e8 external_irq_handler
e00002d4 g     F .text  00000192 printf
e000113a g     F .text  000000c0 memrchr
00008000 g       *ABS*  00000000 _stack_len
e0000746 g     F .text  00000020 dif_rv_plic_irq_complete
e0000fa2 g     F .text  00000088 memcpy
e0001770 g       .bss   00000000 _bss_start
e00008bc g     F .text  00000034 base_log_internal_dv
e000a000 g       .stack 00000000 stack
e0000814 g     F .text  00000006 abort
e0000494 g     F .text  0000000e uart_wait_tx_done
e0000080 g       *ABS*  00000000 _entry_point
e0001780 g       .bss   00000000 _bss_end
e00016ec g     O .data  00000084 status_codes
e00006a0 g     F .text  0000000e dif_rv_plic_init
e0000466 g     F .text  0000002e uart_set_cfg
e000108c g     F .text  000000ae memchr
e00000cc g       .text  00000000 _start
e00006f8 g     F .text  00000026 dif_rv_plic_irq_set_priority
e0000940 g     F .text  0000048e base_vfprintf
e00016dc g     O .data  00000010 remu10_table
e0000926 g     F .text  0000001a base_vprintf
e000102a g     F .text  00000062 memset
e0000114 g     F .text  000000d8 main
e0000084 g       .vectors       00000000 _vectors_end
e0010000 g       .vectors       00000000 _stack_start
e00006ae g     F .text  0000004a dif_rv_plic_irq_set_enabled
00002000 g       *ABS*  00000000 _min_stack
e00016d4 g     O .rodata        00000004 kDeviceTestStatusAddress
e00008f4 g     F .text  00000032 base_printf
e000071e g     F .text  00000028 dif_rv_plic_irq_claim
e0010010 g       *ABS*  00000000 fromhost
e00016d8 g     O .rodata        00000004 kDeviceLogBypassUartAddress
00020008 g       *ABS*  00000000 tohost
e0000f30 g     F .text  00000072 status_extract
e000a000 g       .stack 00000000 _stack
e0000000 g       .vectors       00000000 _vectors_start
e0000766 g     F .text  000000ae test_status_set
e000081a g     F .text  000000a2 base_log_internal_core



Disassembly of section .vectors:

e0000000 <_vectors_start>:
e0000000:       0840006f                j       e0000084 <_vectors_end>
e0000004:       0800006f                j       e0000084 <_vectors_end>
e0000008:       07c0006f                j       e0000084 <_vectors_end>
e000000c:       0780006f                j       e0000084 <_vectors_end>
e0000010:       0740006f                j       e0000084 <_vectors_end>
e0000014:       0700006f                j       e0000084 <_vectors_end>
e0000018:       06c0006f                j       e0000084 <_vectors_end>
e000001c:       0680006f                j       e0000084 <_vectors_end>
e0000020:       0640006f                j       e0000084 <_vectors_end>
e0000024:       0600006f                j       e0000084 <_vectors_end>
e0000028:       05c0006f                j       e0000084 <_vectors_end>
e000002c:       1c00006f                j       e00001ec <external_irq_handler>
e0000030:       0540006f                j       e0000084 <_vectors_end>
e0000034:       0500006f                j       e0000084 <_vectors_end>
e0000038:       04c0006f                j       e0000084 <_vectors_end>
e000003c:       0480006f                j       e0000084 <_vectors_end>
e0000040:       0440006f                j       e0000084 <_vectors_end>
e0000044:       0400006f                j       e0000084 <_vectors_end>
e0000048:       03c0006f                j       e0000084 <_vectors_end>
e000004c:       0380006f                j       e0000084 <_vectors_end>
e0000050:       0340006f                j       e0000084 <_vectors_end>
e0000054:       0300006f                j       e0000084 <_vectors_end>
e0000058:       02c0006f                j       e0000084 <_vectors_end>
e000005c:       0280006f                j       e0000084 <_vectors_end>
e0000060:       0240006f                j       e0000084 <_vectors_end>
e0000064:       0200006f                j       e0000084 <_vectors_end>
e0000068:       01c0006f                j       e0000084 <_vectors_end>
e000006c:       0180006f                j       e0000084 <_vectors_end>
e0000070:       0140006f                j       e0000084 <_vectors_end>
e0000074:       0100006f                j       e0000084 <_vectors_end>
e0000078:       00c0006f                j       e0000084 <_vectors_end>
e000007c:       0080006f                j       e0000084 <_vectors_end>
e0000080:       0060006f                j       e0000086 <reset_handler>

Disassembly of section .text:

e0000084 <default_exc_handler>:
default_exc_handler():
e0000084:       a069                    j       e000010e <sleep_loop>

e0000086 <reset_handler>:
reset_handler():
e0000086:       4081                    li      ra,0
e0000088:       8106                    mv      sp,ra
e000008a:       8186                    mv      gp,ra
e000008c:       8206                    mv      tp,ra
e000008e:       8286                    mv      t0,ra
e0000090:       8306                    mv      t1,ra
e0000092:       8386                    mv      t2,ra
e0000094:       8406                    mv      s0,ra
e0000096:       8486                    mv      s1,ra
e0000098:       8506                    mv      a0,ra
e000009a:       8586                    mv      a1,ra
e000009c:       8606                    mv      a2,ra
e000009e:       8686                    mv      a3,ra
e00000a0:       8706                    mv      a4,ra
e00000a2:       8786                    mv      a5,ra
e00000a4:       8806                    mv      a6,ra
e00000a6:       8886                    mv      a7,ra
e00000a8:       8906                    mv      s2,ra
e00000aa:       8986                    mv      s3,ra
e00000ac:       8a06                    mv      s4,ra
e00000ae:       8a86                    mv      s5,ra
e00000b0:       8b06                    mv      s6,ra
e00000b2:       8b86                    mv      s7,ra
e00000b4:       8c06                    mv      s8,ra
e00000b6:       8c86                    mv      s9,ra
e00000b8:       8d06                    mv      s10,ra
e00000ba:       8d86                    mv      s11,ra
e00000bc:       8e06                    mv      t3,ra
e00000be:       8e86                    mv      t4,ra
e00000c0:       8f06                    mv      t5,ra
e00000c2:       8f86                    mv      t6,ra
e00000c4:       00010117                auipc   sp,0x10
e00000c8:       f3c10113                addi    sp,sp,-196 # e0010000 <_stack_start>

e00000cc <_start>:
e00000cc:       00001d17                auipc   s10,0x1
e00000d0:       6a4d0d13                addi    s10,s10,1700 # e0001770 <plic0>
e00000d4:       00001d97                auipc   s11,0x1
e00000d8:       6acd8d93                addi    s11,s11,1708 # e0001780 <external_irq_handler.kLogFields>
e00000dc:       01bd5763                bge     s10,s11,e00000ea <main_entry>

e00000e0 <zero_loop>:
zero_loop():
e00000e0:       /-> 000d2023            sw      zero,0(s10)
e00000e4:       |   0d11                        addi    s10,s10,4
e00000e6:       \-- ffaddde3            bge     s11,s10,e00000e0 <zero_loop>

e00000ea <main_entry>:
zero_loop_end():
e00000ea:       4501                    li      a0,0
e00000ec:       4581                    li      a1,0
e00000ee:       026000ef                jal     ra,e0000114 <main>
e00000f2:       c901                    beqz    a0,e0000102 <success>
e00000f4:       c11c0537                lui     a0,0xc11c0
e00000f8:       0561                    addi    a0,a0,24
e00000fa:       52fd                    li      t0,-1
e00000fc:       00552023                sw      t0,0(a0) # c11c0000 <fromhost+0xe11afff0>
e0000100:       a039                    j       e000010e <sleep_loop>

e0000102 <success>:
success():
e0000102:       c11c0537                lui     a0,0xc11c0
e0000106:       0561                    addi    a0,a0,24
e0000108:       4285                    li      t0,1
e000010a:       00552023                sw      t0,0(a0) # c11c0000 <fromhost+0xe11afff0>

e000010e <sleep_loop>:
sleep_loop():
e000010e:       /-> 10500073            wfi
e0000112:       \-- bff5                        j       e000010e <sleep_loop>

e0000114 <main>:
main():
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:25
#define MBOX_ID 159
#define PRIO 0x1

static dif_rv_plic_t plic0;

int main(int argc, char **argv) {
e0000114:              1141                     addi    sp,sp,-16
e0000116:              c606                     sw      ra,12(sp)
e0000118:              c422                     sw      s0,8(sp)
e000011a:              c226                     sw      s1,4(sp)
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:36
  #else
  //set_flls();
  int baud_rate = 115200;
  int test_freq = 100000000;
  #endif
  uart_set_cfg(0,(test_freq/baud_rate)>>4);
e000011c:              03600593                 li      a1,54
e0000120:              4501                     li      a0,0
e0000122:              2691                     jal     e0000466 <uart_set_cfg>
e0000124:              e0000537                 lui     a0,0xe0000
e0000128:              0505                     addi    a0,a0,1
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:45
  int volatile * p_reg, * p_reg1, * plic_check, * p_reg2, * p_reg3, * p_reg4, * p_reg5 ;
  int a, b, c, e, d;
  bool t;
  
  unsigned val = 0xe0000001;
  asm volatile("csrw mtvec, %0\n" : : "r"(val));
e000012a:              30551073                 csrw    mtvec,a0
e000012e:              6529                     lui     a0,0xa
e0000130:              99650513                 addi    a0,a0,-1642 # 9996 <_stack_len+0x1996>
e0000134:              c11705b7                 lui     a1,0xc1170
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:48

  edn_enable = (int *) 0xc1170014;
 *edn_enable = 0x9996;
e0000138:              c9c8                     sw      a0,20(a1)
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:65

 *plic_prio  = 1;                   // Set mbox interrupt priority to 1
 *plic_en    = 0x80000000;          // Enable interrupt
 */

  printf("FPGA test with two indipendent JTAG for Ibex and Ariane\r\n");
e000013a:              00001517                 auipc   a0,0x1
e000013e:              0c250513                 addi    a0,a0,194 # e00011fc <memrchr+0xc2>
e0000142:              2a49                     jal     e00002d4 <printf>
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:67
  mmio_region_t plic_base_addr = mmio_region_from_addr(TOP_EARLGREY_RV_PLIC_BASE_ADDR);
  t = dif_rv_plic_init(plic_base_addr, &plic0);
e0000144:              00001417                 auipc   s0,0x1
e0000148:              62c40413                 addi    s0,s0,1580 # e0001770 <plic0>
e000014c:              c8000537                 lui     a0,0xc8000
e0000150:              85a2                     mv      a1,s0
e0000152:              23b9                     jal     e00006a0 <dif_rv_plic_init>
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:68
  t = dif_rv_plic_irq_set_priority(&plic0, MBOX_ID, PRIO);
e0000154:              09f00593                 li      a1,159
e0000158:              4605                     li      a2,1
e000015a:              8522                     mv      a0,s0
e000015c:              2b71                     jal     e00006f8 <dif_rv_plic_irq_set_priority>
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:69
  t = dif_rv_plic_irq_set_enabled(&plic0, MBOX_ID, 0, kDifToggleEnabled);
e000015e:              09f00593                 li      a1,159
e0000162:              4685                     li      a3,1
e0000164:              8522                     mv      a0,s0
e0000166:              4601                     li      a2,0
e0000168:              2399                     jal     e00006ae <dif_rv_plic_irq_set_enabled>
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:71

  printf("Ibex: Writing and reading the mailbox\r\n");
e000016a:              00001517                 auipc   a0,0x1
e000016e:              0cc50513                 addi    a0,a0,204 # e0001236 <memrchr+0xfc>
e0000172:              228d                     jal     e00002d4 <printf>
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:72
  uart_wait_tx_done();
e0000174:              2605                     jal     e0000494 <uart_wait_tx_done>
e0000176:              baadc537                 lui     a0,0xbaadc
e000017a:              0de50413                 addi    s0,a0,222 # baadc0de <fromhost+0xdaacc0ce>
e000017e:              104044b7                 lui     s1,0x10404
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:74
  p_reg = (int *) 0x10404000;
 *p_reg = 0xbaadc0de;
e0000182:              c080                     sw      s0,0(s1)
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:76

  a = *p_reg;
e0000184:              4088                     lw      a0,0(s1)
e0000186:       /----- 00850763                 beq     a0,s0,e0000194 <main+0x80>
e000018a:       |      00001517                 auipc   a0,0x1
e000018e:       |      10050513                 addi    a0,a0,256 # e000128a <memrchr+0x150>
e0000192:       |  /-- a029                     j       e000019c <main+0x88>
e0000194:       \--|-> 00001517                 auipc   a0,0x1
e0000198:          |   0ca50513                 addi    a0,a0,202 # e000125e <memrchr+0x124>
e000019c:          \-> 2a25                     jal     e00002d4 <printf>
e000019e:              2cdd                     jal     e0000494 <uart_wait_tx_done>
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:87
  else{
     printf("Test failed, the mbox has not been accessed correctly\r\n");
     uart_wait_tx_done();
  }

  asm volatile ("wfi"); // Ready to receive a command from the Agent --> Jump to the External_Irq_Handler
e00001a0:              10500073                 wfi
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:96
  p_reg2 = (int *) 0x10404010;
  p_reg3 = (int *) 0x10404014;
  p_reg4 = (int *) 0x10404018;
  p_reg5 = (int *) 0x1040401C;

  a = *p_reg1;
e00001a4:              4488                     lw      a0,8(s1)
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:97
  b = *p_reg2;
e00001a6:              488c                     lw      a1,16(s1)
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:98
  c = *p_reg3;
e00001a8:              48d0                     lw      a2,20(s1)
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:99
  d = *p_reg4;
e00001aa:              4c94                     lw      a3,24(s1)
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:100
  e = *p_reg5;
e00001ac:              4cd8                     lw      a4,28(s1)
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:102

  if( a == 0xBAADC0DE &&  b == 0xBAADC0DE && c == 0xBAADC0DE && d == 0xBAADC0DE && e == 0xBAADC0DE){
e00001ae:              8d21                     xor     a0,a0,s0
e00001b0:              8da1                     xor     a1,a1,s0
e00001b2:              8d4d                     or      a0,a0,a1
e00001b4:              008645b3                 xor     a1,a2,s0
e00001b8:              8d4d                     or      a0,a0,a1
e00001ba:              0086c5b3                 xor     a1,a3,s0
e00001be:              8d4d                     or      a0,a0,a1
e00001c0:              008745b3                 xor     a1,a4,s0
e00001c4:              8d4d                     or      a0,a0,a1
e00001c6:       /----- e901                     bnez    a0,e00001d6 <main+0xc2>
e00001c8:       |      10404537                 lui     a0,0x10404
e00001cc:       |      02450513                 addi    a0,a0,36 # 10404024 <tohost+0x103e401c>
e00001d0:       |      4585                     li      a1,1
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:104
     p_reg = (int *) 0x10404024; // completion interrupt to ariane agent
    *p_reg = 0x00000001;
e00001d2:       |      c10c                     sw      a1,0(a0)
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:105
    while(1);
e00001d4:       |  /-- a001                     j       e00001d4 <main+0xc0>
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:108
  }
  else
    printf("Error\r\n");
e00001d6:       \----> 00001517                 auipc   a0,0x1
e00001da:              0ec50513                 addi    a0,a0,236 # e00012c2 <memrchr+0x188>
e00001de:              28dd                     jal     e00002d4 <printf>
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:109
  return 0;
e00001e0:              4501                     li      a0,0
e00001e2:              4492                     lw      s1,4(sp)
e00001e4:              4422                     lw      s0,8(sp)
e00001e6:              40b2                     lw      ra,12(sp)
e00001e8:              0141                     addi    sp,sp,16
e00001ea:              8082                     ret

e00001ec <external_irq_handler>:
external_irq_handler():
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:112
}

void external_irq_handler(void){
e00001ec:                 711d                  addi    sp,sp,-96
e00001ee:                 ce86                  sw      ra,92(sp)
e00001f0:                 cc96                  sw      t0,88(sp)
e00001f2:                 ca9a                  sw      t1,84(sp)
e00001f4:                 c89e                  sw      t2,80(sp)
e00001f6:                 c6a2                  sw      s0,76(sp)
e00001f8:                 c4a6                  sw      s1,72(sp)
e00001fa:                 c2aa                  sw      a0,68(sp)
e00001fc:                 c0ae                  sw      a1,64(sp)
e00001fe:                 de32                  sw      a2,60(sp)
e0000200:                 dc36                  sw      a3,56(sp)
e0000202:                 da3a                  sw      a4,52(sp)
e0000204:                 d83e                  sw      a5,48(sp)
e0000206:                 d642                  sw      a6,44(sp)
e0000208:                 d446                  sw      a7,40(sp)
e000020a:                 d272                  sw      t3,36(sp)
e000020c:                 d076                  sw      t4,32(sp)
e000020e:                 ce7a                  sw      t5,28(sp)
e0000210:                 cc7e                  sw      t6,24(sp)
e0000212:                 10404537              lui     a0,0x10404
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:116
  volatile int * p_reg;
  //clearing the pending interrupt signal
  p_reg = (int *) 0x10404020;
 *p_reg = 0x00000000;
e0000216:                 02052023              sw      zero,32(a0) # 10404020 <tohost+0x103e4018>
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:118
  dif_rv_plic_irq_id_t claim_irq;
  CHECK_DIF_OK(dif_rv_plic_irq_claim(&plic0, 0, &claim_irq));
e000021a:                 00001517              auipc   a0,0x1
e000021e:                 55650513              addi    a0,a0,1366 # e0001770 <plic0>
e0000222:                 0850                  addi    a2,sp,20
e0000224:                 4581                  li      a1,0
e0000226:                 29e5                  jal     e000071e <dif_rv_plic_irq_claim>
e0000228:                 00001497              auipc   s1,0x1
e000022c:                 4b048493              addi    s1,s1,1200 # e00016d8 <kDeviceLogBypassUartAddress>
e0000230:       /-------- c91d                  beqz    a0,e0000266 <external_irq_handler+0x7a>
e0000232:       |         842a                  mv      s0,a0
e0000234:       |         4088                  lw      a0,0(s1)
e0000236:       |     /-- c909                  beqz    a0,e0000248 <external_irq_handler+0x5c>
e0000238:       |     |   00001517              auipc   a0,0x1
e000023c:       |     |   54850513              addi    a0,a0,1352 # e0001780 <external_irq_handler.kLogFields>
e0000240:       |     |   4585                  li      a1,1
e0000242:       |     |   8622                  mv      a2,s0
e0000244:       |     |   2da5                  jal     e00008bc <base_log_internal_dv>
e0000246:       |  /--|-- a821                  j       e000025e <external_irq_handler+0x72>
e0000248:       |  |  \-> 00001597              auipc   a1,0x1
e000024c:       |  |      13058593              addi    a1,a1,304 # e0001378 <memrchr+0x23e>
e0000250:       |  |      850a                  mv      a0,sp
e0000252:       |  |      4651                  li      a2,20
e0000254:       |  |      54f000ef              jal     ra,e0000fa2 <memcpy>
e0000258:       |  |      850a                  mv      a0,sp
e000025a:       |  |      85a2                  mv      a1,s0
e000025c:       |  |      2b7d                  jal     e000081a <base_log_internal_core>
e000025e:       |  \----> 6531                  lui     a0,0xc
e0000260:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e0000264:       |         2309                  jal     e0000766 <test_status_set>
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:119
  CHECK_DIF_OK(dif_rv_plic_irq_complete(&plic0, 0, claim_irq));
e0000266:       \-------> 4652                  lw      a2,20(sp)
e0000268:                 00001517              auipc   a0,0x1
e000026c:                 50850513              addi    a0,a0,1288 # e0001770 <plic0>
e0000270:                 4581                  li      a1,0
e0000272:                 29d1                  jal     e0000746 <dif_rv_plic_irq_complete>
e0000274:       /-------- c91d                  beqz    a0,e00002aa <external_irq_handler+0xbe>
e0000276:       |         842a                  mv      s0,a0
e0000278:       |         4088                  lw      a0,0(s1)
e000027a:       |     /-- c909                  beqz    a0,e000028c <external_irq_handler+0xa0>
e000027c:       |     |   00001517              auipc   a0,0x1
e0000280:       |     |   51850513              addi    a0,a0,1304 # e0001794 <external_irq_handler.kLogFields.7>
e0000284:       |     |   4585                  li      a1,1
e0000286:       |     |   8622                  mv      a2,s0
e0000288:       |     |   2d15                  jal     e00008bc <base_log_internal_dv>
e000028a:       |  /--|-- a821                  j       e00002a2 <external_irq_handler+0xb6>
e000028c:       |  |  \-> 00001597              auipc   a1,0x1
e0000290:       |  |      10058593              addi    a1,a1,256 # e000138c <memrchr+0x252>
e0000294:       |  |      850a                  mv      a0,sp
e0000296:       |  |      4651                  li      a2,20
e0000298:       |  |      50b000ef              jal     ra,e0000fa2 <memcpy>
e000029c:       |  |      850a                  mv      a0,sp
e000029e:       |  |      85a2                  mv      a1,s0
e00002a0:       |  |      2bad                  jal     e000081a <base_log_internal_core>
e00002a2:       |  \----> 6531                  lui     a0,0xc
e00002a4:       |         aad50513              addi    a0,a0,-1363 # baad <_stack_len+0x3aad>
e00002a8:       |         297d                  jal     e0000766 <test_status_set>
/proc/self/cwd/sw/tests/alsaqr/mbox_test/mbox_test.c:121
  return;
}
e00002aa:       \-------> 4fe2                  lw      t6,24(sp)
e00002ac:                 4f72                  lw      t5,28(sp)
e00002ae:                 5e82                  lw      t4,32(sp)
e00002b0:                 5e12                  lw      t3,36(sp)
e00002b2:                 58a2                  lw      a7,40(sp)
e00002b4:                 5832                  lw      a6,44(sp)
e00002b6:                 57c2                  lw      a5,48(sp)
e00002b8:                 5752                  lw      a4,52(sp)
e00002ba:                 56e2                  lw      a3,56(sp)
e00002bc:                 5672                  lw      a2,60(sp)
e00002be:                 4586                  lw      a1,64(sp)
e00002c0:                 4516                  lw      a0,68(sp)
e00002c2:                 44a6                  lw      s1,72(sp)
e00002c4:                 4436                  lw      s0,76(sp)
e00002c6:                 43c6                  lw      t2,80(sp)
e00002c8:                 4356                  lw      t1,84(sp)
e00002ca:                 42e6                  lw      t0,88(sp)
e00002cc:                 40f6                  lw      ra,92(sp)
e00002ce:                 6125                  addi    sp,sp,96
e00002d0:                 30200073              mret

e00002d4 <printf>:
printf():
/proc/self/cwd/sw/tests/common/utils.c:312

  return pc;
}

int printf(const char *format, ...)
{
e00002d4:                                      711d                     addi    sp,sp,-96
e00002d6:                                      de06                     sw      ra,60(sp)
e00002d8:                                      dc22                     sw      s0,56(sp)
e00002da:                                      da26                     sw      s1,52(sp)
e00002dc:                                      d84a                     sw      s2,48(sp)
e00002de:                                      d64e                     sw      s3,44(sp)
e00002e0:                                      d452                     sw      s4,40(sp)
e00002e2:                                      d256                     sw      s5,36(sp)
e00002e4:                                      d05a                     sw      s6,32(sp)
e00002e6:                                      ce5e                     sw      s7,28(sp)
e00002e8:                                      cc62                     sw      s8,24(sp)
e00002ea:                                      ca66                     sw      s9,20(sp)
e00002ec:                                      c86a                     sw      s10,16(sp)
e00002ee:                                      c66e                     sw      s11,12(sp)
e00002f0:                                      84aa                     mv      s1,a0
e00002f2:                                      4a01                     li      s4,0
e00002f4:                                      cec6                     sw      a7,92(sp)
e00002f6:                                      ccc2                     sw      a6,88(sp)
e00002f8:                                      cabe                     sw      a5,84(sp)
e00002fa:                                      c8ba                     sw      a4,80(sp)
e00002fc:                                      c6b6                     sw      a3,76(sp)
e00002fe:                                      c4b2                     sw      a2,72(sp)
e0000300:                                      c2ae                     sw      a1,68(sp)
e0000302:                                      04410d13                 addi    s10,sp,68
/proc/self/cwd/sw/tests/common/utils.c:316
  int pc;
  va_list va;

  va_start(va, format);
e0000306:                                      c26a                     sw      s10,4(sp)
e0000308:                                      02500913                 li      s2,37
e000030c:                                      02d00993                 li      s3,45
e0000310:                                      03000b13                 li      s6,48
e0000314:                                      4aa5                     li      s5,9
e0000316:                                      4429                     li      s0,10
e0000318:                                      07200b93                 li      s7,114
e000031c:                                      05800c13                 li      s8,88
e0000320:                                      07800d93                 li      s11,120
e0000324:                                      40000cb7                 lui     s9,0x40000
qprint():
/proc/self/cwd/sw/tests/common/utils.c:249
  for (; *format != 0; ++format)
e0000328:       /----------------------------> 0004c583                 lbu     a1,0(s1)
e000032c:       |                          /-- 01258463                 beq     a1,s2,e0000334 <printf+0x60>
e0000330:       |                 /--------|-- ed99                     bnez    a1,e000034e <printf+0x7a>
e0000332:       |  /--------------|--------|-- aa11                     j       e0000446 <printf+0x172>
/proc/self/cwd/sw/tests/common/utils.c:255
      if (*format == '\0') break;
e0000334:       |  |              |        \-> 0014c603                 lbu     a2,1(s1)
/proc/self/cwd/sw/tests/common/utils.c:253
      ++format;
e0000338:       |  |              |            00148513                 addi    a0,s1,1
/proc/self/cwd/sw/tests/common/utils.c:255
      if (*format == '\0') break;
e000033c:       |  |              |        /-- 01260863                 beq     a2,s2,e000034c <printf+0x78>
e0000340:       |  |              |  /-----|-- 03360063                 beq     a2,s3,e0000360 <printf+0x8c>
e0000344:       |  +--------------|--|-----|-- 10060163                 beqz    a2,e0000446 <printf+0x172>
e0000348:       |  |              |  |     |   4581                     li      a1,0
e000034a:       |  |              |  |  /--|-- a831                     j       e0000366 <printf+0x92>
e000034c:       |  |              |  |  |  \-> 84aa                     mv      s1,a0
uart_sendchar():
/proc/self/cwd/sw/tests/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e000034e:       |  |              >--|--|----> 014ca503                 lw      a0,20(s9) # 40000014 <tohost+0x3ffe000c>
e0000352:       |  |              |  |  |      02057513                 andi    a0,a0,32
e0000356:       |  |              \--|--|----- dd65                     beqz    a0,e000034e <printf+0x7a>
/proc/self/cwd/sw/tests/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e0000358:       |  |                 |  |      00bca023                 sw      a1,0(s9)
qprint():
/proc/self/cwd/sw/tests/common/utils.c:303
      ++pc;
e000035c:       |  |                 |  |      0a05                     addi    s4,s4,1
e000035e:       |  |  /--------------|--|----- a0d5                     j       e0000442 <printf+0x16e>
/proc/self/cwd/sw/tests/common/utils.c:259
        ++format;
e0000360:       |  |  |              \--|----> 00248513                 addi    a0,s1,2
e0000364:       |  |  |                 |      4585                     li      a1,1
e0000366:       |  |  |                 \----> 0025e613                 ori     a2,a1,2
/proc/self/cwd/sw/tests/common/utils.c:262
      while (*format == '0')
e000036a:       |  |  |                        fff50493                 addi    s1,a0,-1
e000036e:       |  |  |                    /-> 0014c503                 lbu     a0,1(s1)
e0000372:       |  |  |                    |   872e                     mv      a4,a1
e0000374:       |  |  |                    |   0485                     addi    s1,s1,1
e0000376:       |  |  |                    |   85b2                     mv      a1,a2
e0000378:       |  |  |                    \-- ff650be3                 beq     a0,s6,e000036e <printf+0x9a>
/proc/self/cwd/sw/tests/common/utils.c:267
      for ( ; *format >= '0' && *format <= '9'; ++format) {
e000037c:       |  |  |                        fd050593                 addi    a1,a0,-48
e0000380:       |  |  |                        4681                     li      a3,0
e0000382:       |  |  |                        0ff5f593                 andi    a1,a1,255
e0000386:       |  |  |                 /----- 02bae563                 bltu    s5,a1,e00003b0 <printf+0xdc>
e000038a:       |  |  |                 |      85a6                     mv      a1,s1
e000038c:       |  |  |                 |  /-> 0ff57613                 andi    a2,a0,255
e0000390:       |  |  |                 |  |   0015c503                 lbu     a0,1(a1)
/proc/self/cwd/sw/tests/common/utils.c:268
        width *= 10;
e0000394:       |  |  |                 |  |   028686b3                 mul     a3,a3,s0
/proc/self/cwd/sw/tests/common/utils.c:269
        width += *format - '0';
e0000398:       |  |  |                 |  |   9636                     add     a2,a2,a3
/proc/self/cwd/sw/tests/common/utils.c:267
      for ( ; *format >= '0' && *format <= '9'; ++format) {
e000039a:       |  |  |                 |  |   00158493                 addi    s1,a1,1
e000039e:       |  |  |                 |  |   fd050593                 addi    a1,a0,-48
e00003a2:       |  |  |                 |  |   0ff5f793                 andi    a5,a1,255
/proc/self/cwd/sw/tests/common/utils.c:269
        width += *format - '0';
e00003a6:       |  |  |                 |  |   fd060693                 addi    a3,a2,-48
e00003aa:       |  |  |                 |  |   85a6                     mv      a1,s1
/proc/self/cwd/sw/tests/common/utils.c:267
      for ( ; *format >= '0' && *format <= '9'; ++format) {
e00003ac:       |  |  |                 |  \-- fe87e0e3                 bltu    a5,s0,e000038c <printf+0xb8>
/proc/self/cwd/sw/tests/common/utils.c:271
      if( *format == 's' ) {
e00003b0:       |  |  |                 \--/-X 02abc463                 blt     s7,a0,e00003d8 <printf+0x104>
e00003b4:       |  |  |                 /--|-- 05850563                 beq     a0,s8,e00003fe <printf+0x12a>
e00003b8:       |  |  |                 |  |   06300593                 li      a1,99
e00003bc:       |  |  |        /--------|--|-- 04b50863                 beq     a0,a1,e000040c <printf+0x138>
e00003c0:       |  |  |        |        |  |   06400593                 li      a1,100
e00003c4:       |  |  +--------|--------|--|-- 06b51f63                 bne     a0,a1,e0000442 <printf+0x16e>
/proc/self/cwd/sw/tests/common/utils.c:277
        pc += qprinti (out, va_arg(va, int), 10, 1, width, pad, 'a');
e00003c8:       |  |  |        |        |  |   000d2503                 lw      a0,0(s10)
e00003cc:       |  |  |        |        |  |   0d11                     addi    s10,s10,4
e00003ce:       |  |  |        |        |  |   45a9                     li      a1,10
e00003d0:       |  |  |        |        |  |   4605                     li      a2,1
e00003d2:       |  |  |        |        |  |   06100793                 li      a5,97
e00003d6:       |  |  |  /-----|--------|--|-- a0a5                     j       e000043e <printf+0x16a>
/proc/self/cwd/sw/tests/common/utils.c:271
      if( *format == 's' ) {
e00003d8:       |  |  |  |     |  /-----|--\-X 05b50763                 beq     a0,s11,e0000426 <printf+0x152>
e00003dc:       |  |  |  |     |  |     |      07500593                 li      a1,117
e00003e0:       |  |  |  |  /--|--|-----|----- 04b50863                 beq     a0,a1,e0000430 <printf+0x15c>
e00003e4:       |  |  |  |  |  |  |     |      07300593                 li      a1,115
e00003e8:       |  |  +--|--|--|--|-----|----- 04b51d63                 bne     a0,a1,e0000442 <printf+0x16e>
/proc/self/cwd/sw/tests/common/utils.c:272
        register char *s = va_arg(va, char*);
e00003ec:       |  |  |  |  |  |  |     |      000d2503                 lw      a0,0(s10)
/proc/self/cwd/sw/tests/common/utils.c:273
        pc += qprints (out, s?s:"(null)", width, pad);
e00003f0:       |  |  |  |  |  |  |     |  /-- e509                     bnez    a0,e00003fa <printf+0x126>
e00003f2:       |  |  |  |  |  |  |     |  |   00001517                 auipc   a0,0x1
e00003f6:       |  |  |  |  |  |  |     |  |   fbd50513                 addi    a0,a0,-67 # e00013af <memrchr+0x275>
e00003fa:       |  |  |  |  |  |  |     |  \-> 0d11                     addi    s10,s10,4
e00003fc:       |  |  |  |  |  |  |     |  /-- a00d                     j       e000041e <printf+0x14a>
/proc/self/cwd/sw/tests/common/utils.c:289
        pc += qprinti (out, va_arg(va, uint32_t), 16, 0, width, pad, 'A');
e00003fe:       |  |  |  |  |  |  |     \--|-> 000d2503                 lw      a0,0(s10)
e0000402:       |  |  |  |  |  |  |        |   0d11                     addi    s10,s10,4
e0000404:       |  |  |  |  |  |  |        |   45c1                     li      a1,16
e0000406:       |  |  |  |  |  |  |        |   04100793                 li      a5,65
e000040a:       |  |  |  |  |  |  |  /-----|-- a80d                     j       e000043c <printf+0x168>
/proc/self/cwd/sw/tests/common/utils.c:293
        scr[0] = va_arg(va, int);
e000040c:       |  |  |  |  |  \--|--|-----|-> 000d2503                 lw      a0,0(s10)
e0000410:       |  |  |  |  |     |  |     |   0d11                     addi    s10,s10,4
e0000412:       |  |  |  |  |     |  |     |   00a10523                 sb      a0,10(sp)
/proc/self/cwd/sw/tests/common/utils.c:294
        scr[1] = '\0';
e0000416:       |  |  |  |  |     |  |     |   000105a3                 sb      zero,11(sp)
/proc/self/cwd/sw/tests/common/utils.c:295
        pc += qprints (out, scr, width, pad);
e000041a:       |  |  |  |  |     |  |     |   00a10513                 addi    a0,sp,10
e000041e:       |  |  |  |  |     |  |     \-> 85b6                     mv      a1,a3
e0000420:       |  |  |  |  |     |  |         863a                     mv      a2,a4
e0000422:       |  |  |  |  |     |  |         2041                     jal     e00004a2 <qprints>
e0000424:       |  |  |  |  |     |  |  /----- a831                     j       e0000440 <printf+0x16c>
/proc/self/cwd/sw/tests/common/utils.c:285
        pc += qprinti (out, va_arg(va, uint32_t), 16, 0, width, pad, 'a');
e0000426:       |  |  |  |  |     \--|--|----> 000d2503                 lw      a0,0(s10)
e000042a:       |  |  |  |  |        |  |      0d11                     addi    s10,s10,4
e000042c:       |  |  |  |  |        |  |      45c1                     li      a1,16
e000042e:       |  |  |  |  |        |  |  /-- a029                     j       e0000438 <printf+0x164>
/proc/self/cwd/sw/tests/common/utils.c:281
        pc += qprinti (out, va_arg(va, unsigned int), 10, 0, width, pad, 'a');
e0000430:       |  |  |  |  \--------|--|--|-> 000d2503                 lw      a0,0(s10)
e0000434:       |  |  |  |           |  |  |   0d11                     addi    s10,s10,4
e0000436:       |  |  |  |           |  |  |   45a9                     li      a1,10
e0000438:       |  |  |  |           |  |  \-> 06100793                 li      a5,97
e000043c:       |  |  |  |           \--|----> 4601                     li      a2,0
e000043e:       |  |  |  \--------------|----> 2225                     jal     e0000566 <qprinti>
e0000440:       |  |  |                 \----> 9a2a                     add     s4,s4,a0
/proc/self/cwd/sw/tests/common/utils.c:249
  for (; *format != 0; ++format)
e0000442:       |  |  \----------------------> 0485                     addi    s1,s1,1
e0000444:       \--|-------------------------- b5d5                     j       e0000328 <printf+0x54>
printf():
/proc/self/cwd/sw/tests/common/utils.c:322

  pc = qprint(0, format, va);

  va_end(va);

  return pc;
e0000446:          \-------------------------> 8552                     mv      a0,s4
e0000448:                                      4db2                     lw      s11,12(sp)
e000044a:                                      4d42                     lw      s10,16(sp)
e000044c:                                      4cd2                     lw      s9,20(sp)
e000044e:                                      4c62                     lw      s8,24(sp)
e0000450:                                      4bf2                     lw      s7,28(sp)
e0000452:                                      5b02                     lw      s6,32(sp)
e0000454:                                      5a92                     lw      s5,36(sp)
e0000456:                                      5a22                     lw      s4,40(sp)
e0000458:                                      59b2                     lw      s3,44(sp)
e000045a:                                      5942                     lw      s2,48(sp)
e000045c:                                      54d2                     lw      s1,52(sp)
e000045e:                                      5462                     lw      s0,56(sp)
e0000460:                                      50f2                     lw      ra,60(sp)
e0000462:                                      6125                     addi    sp,sp,96
e0000464:                                      8082                     ret

e0000466 <uart_set_cfg>:
uart_set_cfg():
/proc/self/cwd/sw/tests/common/utils.c:42
void uart_set_cfg(int parity, uint16_t clk_counter) {
e0000466:       40000537                lui     a0,0x40000
e000046a:       08300613                li      a2,131
/proc/self/cwd/sw/tests/common/utils.c:44
  *(volatile unsigned int*)(UART_REG_LCR) = 0x83; //sets 8N1 and set DLAB to 1
e000046e:       c550                    sw      a2,12(a0)
/proc/self/cwd/sw/tests/common/utils.c:45
  *(volatile unsigned int*)(UART_REG_DLM) = (clk_counter >> 8) & 0xFF;
e0000470:       0085d613                srli    a2,a1,0x8
e0000474:       c150                    sw      a2,4(a0)
/proc/self/cwd/sw/tests/common/utils.c:46
  *(volatile unsigned int*)(UART_REG_DLL) =  clk_counter       & 0xFF;
e0000476:       0ff5f593                andi    a1,a1,255
e000047a:       c10c                    sw      a1,0(a0)
e000047c:       0a700593                li      a1,167
/proc/self/cwd/sw/tests/common/utils.c:47
  *(volatile unsigned int*)(UART_REG_FCR) = 0xA7; //enables 16byte FIFO and clear FIFOs
e0000480:       c50c                    sw      a1,8(a0)
e0000482:       458d                    li      a1,3
/proc/self/cwd/sw/tests/common/utils.c:48
  *(volatile unsigned int*)(UART_REG_LCR) = 0x03; //sets 8N1 and set DLAB to 0
e0000484:       c54c                    sw      a1,12(a0)
/proc/self/cwd/sw/tests/common/utils.c:50
  *(volatile unsigned int*)(UART_REG_IER) = ((*(volatile unsigned int*)(UART_REG_IER)) & 0xF0) | 0x02; // set IER (interrupt enable register) on UART
e0000486:       414c                    lw      a1,4(a0)
e0000488:       0f05f593                andi    a1,a1,240
e000048c:       0025e593                ori     a1,a1,2
e0000490:       c14c                    sw      a1,4(a0)
/proc/self/cwd/sw/tests/common/utils.c:51
}
e0000492:       8082                    ret

e0000494 <uart_wait_tx_done>:
uart_wait_tx_done():
/proc/self/cwd/sw/tests/common/utils.c:85
void uart_wait_tx_done(void) {
e0000494:           40000537            lui     a0,0x40000
/proc/self/cwd/sw/tests/common/utils.c:87
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x40) == 0);
e0000498:       /-> 494c                        lw      a1,20(a0)
e000049a:       |   0405f593            andi    a1,a1,64
e000049e:       \-- dded                        beqz    a1,e0000498 <uart_wait_tx_done+0x4>
/proc/self/cwd/sw/tests/common/utils.c:88
}
e00004a0:           8082                        ret

e00004a2 <qprints>:
qprints():
/proc/self/cwd/sw/tests/common/utils.c:159
  if (width > 0) {
e00004a2:             /----- 02b05163           blez    a1,e00004c4 <qprints+0x22>
/proc/self/cwd/sw/tests/common/utils.c:162
    for (ptr = string; *ptr; ++ptr) ++len;
e00004a6:             |      00054683           lbu     a3,0(a0)
e00004aa:          /--|----- c28d                       beqz    a3,e00004cc <qprints+0x2a>
e00004ac:          |  |      4781                       li      a5,0
e00004ae:          |  |      00150813           addi    a6,a0,1
e00004b2:          |  |  /-> 00f806b3           add     a3,a6,a5
e00004b6:          |  |  |   0006c703           lbu     a4,0(a3)
e00004ba:          |  |  |   00178693           addi    a3,a5,1
e00004be:          |  |  |   87b6                       mv      a5,a3
e00004c0:          |  |  \-- fb6d                       bnez    a4,e00004b2 <qprints+0x10>
e00004c2:          |  |  /-- a031                       j       e00004ce <qprints+0x2c>
e00004c4:          |  \--|-> 4601                       li      a2,0
e00004c6:          |     |   02000893           li      a7,32
e00004ca:       /--|-----|-- a899                       j       e0000520 <qprints+0x7e>
e00004cc:       |  \-----|-> 4681                       li      a3,0
/proc/self/cwd/sw/tests/common/utils.c:163
    if (len >= width) width = 0;
e00004ce:       |        \-> 40d587b3           sub     a5,a1,a3
e00004d2:       |            873e                       mv      a4,a5
e00004d4:       |        /-- 00b6c363           blt     a3,a1,e00004da <qprints+0x38>
e00004d8:       |        |   4701                       li      a4,0
/proc/self/cwd/sw/tests/common/utils.c:165
    if (pad & PAD_ZERO) padchar = '0';
e00004da:       |        \-> 00267593           andi    a1,a2,2
e00004de:       |            02000893           li      a7,32
e00004e2:       |        /-- c199                       beqz    a1,e00004e8 <qprints+0x46>
e00004e4:       |        |   03000893           li      a7,48
/proc/self/cwd/sw/tests/common/utils.c:167
  if (!(pad & PAD_RIGHT)) {
e00004e8:       |        \-> 00167593           andi    a1,a2,1
e00004ec:       |            0015b593           seqz    a1,a1
e00004f0:       |            00e02633           sgtz    a2,a4
e00004f4:       |            8df1                       and     a1,a1,a2
e00004f6:       |  /-------- c19d                       beqz    a1,e000051c <qprints+0x7a>
e00004f8:       |  |         4601                       li      a2,0
e00004fa:       |  |         400005b7           lui     a1,0x40000
e00004fe:       |  |         4805                       li      a6,1
e0000500:       |  |  /----> 873e                       mv      a4,a5
uart_sendchar():
/proc/self/cwd/sw/tests/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e0000502:       |  |  |  /-> 49dc                       lw      a5,20(a1)
e0000504:       |  |  |  |   0207f793           andi    a5,a5,32
e0000508:       |  |  |  \-- dfed                       beqz    a5,e0000502 <qprints+0x60>
/proc/self/cwd/sw/tests/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e000050a:       |  |  |      0115a023           sw      a7,0(a1) # 40000000 <tohost+0x3ffdfff8>
qprints():
/proc/self/cwd/sw/tests/common/utils.c:170
      ++pc;
e000050e:       |  |  |      0605                       addi    a2,a2,1
/proc/self/cwd/sw/tests/common/utils.c:168
    for ( ; width > 0; --width) {
e0000510:       |  |  |      fff70793           addi    a5,a4,-1 # 3fffffff <tohost+0x3ffdfff7>
e0000514:       |  |  \----- fee846e3           blt     a6,a4,e0000500 <qprints+0x5e>
e0000518:       |  |         85be                       mv      a1,a5
e000051a:       +--|-------- a019                       j       e0000520 <qprints+0x7e>
e000051c:       |  \-------> 4601                       li      a2,0
e000051e:       |            85ba                       mv      a1,a4
/proc/self/cwd/sw/tests/common/utils.c:173
  for ( ; *string ; ++string) {
e0000520:       \----------> 00054783           lbu     a5,0(a0)
e0000524:             /----- cf99                       beqz    a5,e0000542 <qprints+0xa0>
e0000526:             |      40000737           lui     a4,0x40000
uart_sendchar():
/proc/self/cwd/sw/tests/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e000052a:             |  /-> 4b54                       lw      a3,20(a4)
e000052c:             |  |   0206f693           andi    a3,a3,32
e0000530:             |  +-- deed                       beqz    a3,e000052a <qprints+0x88>
qprints():
/proc/self/cwd/sw/tests/common/utils.c:174
    qprintchar (out, *string);
e0000532:             |  |   0ff7f693           andi    a3,a5,255
uart_sendchar():
/proc/self/cwd/sw/tests/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e0000536:             |  |   c314                       sw      a3,0(a4)
qprints():
/proc/self/cwd/sw/tests/common/utils.c:173
  for ( ; *string ; ++string) {
e0000538:             |  |   00154783           lbu     a5,1(a0)
e000053c:             |  |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/tests/common/utils.c:175
    ++pc;
e000053e:             |  |   0605                       addi    a2,a2,1
/proc/self/cwd/sw/tests/common/utils.c:173
  for ( ; *string ; ++string) {
e0000540:             |  \-- f7ed                       bnez    a5,e000052a <qprints+0x88>
/proc/self/cwd/sw/tests/common/utils.c:177
  for ( ; width > 0; --width) {
e0000542:          /--\----X 02b05063           blez    a1,e0000562 <qprints+0xc0>
e0000546:          |         00c58533           add     a0,a1,a2
e000054a:          |         400005b7           lui     a1,0x40000
uart_sendchar():
/proc/self/cwd/sw/tests/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e000054e:          |     /-> 49d4                       lw      a3,20(a1)
e0000550:          |     |   0206f693           andi    a3,a3,32
e0000554:          |     +-- deed                       beqz    a3,e000054e <qprints+0xac>
qprints():
/proc/self/cwd/sw/tests/common/utils.c:179
    ++pc;
e0000556:          |     |   0605                       addi    a2,a2,1
uart_sendchar():
/proc/self/cwd/sw/tests/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e0000558:          |     |   0115a023           sw      a7,0(a1) # 40000000 <tohost+0x3ffdfff8>
qprints():
/proc/self/cwd/sw/tests/common/utils.c:177
  for ( ; width > 0; --width) {
e000055c:          |     \-- fea619e3           bne     a2,a0,e000054e <qprints+0xac>
e0000560:          |         862a                       mv      a2,a0
/proc/self/cwd/sw/tests/common/utils.c:182
  return pc;
e0000562:          \-------> 8532                       mv      a0,a2
e0000564:                    8082                       ret

e0000566 <qprinti>:
qprinti():
/proc/self/cwd/sw/tests/common/utils.c:186
{
e0000566:                          7179                 addi    sp,sp,-48
e0000568:                          d606                 sw      ra,44(sp)
e000056a:                          d422                 sw      s0,40(sp)
/proc/self/cwd/sw/tests/common/utils.c:192
  if (i == 0)
e000056c:             /----------- cd39                 beqz    a0,e00005ca <qprinti+0x64>
/proc/self/cwd/sw/tests/common/utils.c:199
  if (sg && b == 10 && i < 0)
e000056e:             |            00c03633             snez    a2,a2
e0000572:             |            ff658413             addi    s0,a1,-10
e0000576:             |            00143413             seqz    s0,s0
e000057a:             |            8e61                 and     a2,a2,s0
e000057c:             |            00052413             slti    s0,a0,0
e0000580:             |            00867833             and     a6,a2,s0
e0000584:             |        /-- 00080463             beqz    a6,e000058c <qprinti+0x26>
e0000588:             |        |   40a00533             neg     a0,a0
/proc/self/cwd/sw/tests/common/utils.c:205
  s = print_buf + PRINT_BUF_LEN-1;
e000058c:             |        \-> 02710613             addi    a2,sp,39
e0000590:             |            4441                 li      s0,16
/proc/self/cwd/sw/tests/common/utils.c:206
  *s = '\0';
e0000592:             |            020103a3             sb      zero,39(sp)
/proc/self/cwd/sw/tests/common/utils.c:209
  if(b == 16) {
e0000596:             |  /-------- 04859563             bne     a1,s0,e00005e0 <qprinti+0x7a>
/proc/self/cwd/sw/tests/common/utils.c:211
    while (u) {
e000059a:       /-----|--|-------- c961                 beqz    a0,e000066a <qprinti+0x104>
e000059c:       |     |  |         0c678793             addi    a5,a5,198
e00005a0:       |     |  |         48a5                 li      a7,9
e00005a2:       |     |  |         42c1                 li      t0,16
e00005a4:       |     |  |  /----> 842a                 mv      s0,a0
/proc/self/cwd/sw/tests/common/utils.c:212
      int t = u & 0xF;
e00005a6:       |     |  |  |      893d                 andi    a0,a0,15
e00005a8:       |     |  |  |      85be                 mv      a1,a5
/proc/self/cwd/sw/tests/common/utils.c:214
      if (t >= 10)
e00005aa:       |     |  |  |  /-- 00a8e363             bltu    a7,a0,e00005b0 <qprinti+0x4a>
e00005ae:       |     |  |  |  |   4581                 li      a1,0
e00005b0:       |     |  |  |  \-> 952e                 add     a0,a0,a1
/proc/self/cwd/sw/tests/common/utils.c:217
      *--s = t + '0';
e00005b2:       |     |  |  |      03050513             addi    a0,a0,48 # 40000030 <tohost+0x3ffe0028>
e00005b6:       |     |  |  |      fff60593             addi    a1,a2,-1
e00005ba:       |     |  |  |      fea60fa3             sb      a0,-1(a2)
/proc/self/cwd/sw/tests/common/utils.c:218
      u >>= 4;
e00005be:       |     |  |  |      00445513             srli    a0,s0,0x4
e00005c2:       |     |  |  |      862e                 mv      a2,a1
/proc/self/cwd/sw/tests/common/utils.c:211
    while (u) {
e00005c4:       |     |  |  \----- fe5470e3             bgeu    s0,t0,e00005a4 <qprinti+0x3e>
e00005c8:       |     |  |  /----- a8b5                 j       e0000644 <qprinti+0xde>
e00005ca:       |     \--|--|----> 03000513             li      a0,48
/proc/self/cwd/sw/tests/common/utils.c:194
    print_buf[0] = '0';
e00005ce:       |        |  |      00a10423             sb      a0,8(sp)
/proc/self/cwd/sw/tests/common/utils.c:195
    print_buf[1] = '\0';
e00005d2:       |        |  |      000104a3             sb      zero,9(sp)
/proc/self/cwd/sw/tests/common/utils.c:196
    return qprints (out, print_buf, width, pad);
e00005d6:       |        |  |      0028                 addi    a0,sp,8
e00005d8:       |        |  |      85b6                 mv      a1,a3
e00005da:       |        |  |      863a                 mv      a2,a4
e00005dc:       |        |  |      35d9                 jal     e00004a2 <qprints>
e00005de:       |  /-----|--|----- a86d                 j       e0000698 <qprinti+0x132>
/proc/self/cwd/sw/tests/common/utils.c:222
    while (u) {
e00005e0:       +--|-----\--|----X c549                 beqz    a0,e000066a <qprinti+0x104>
e00005e2:       |  |        |      1999a5b7             lui     a1,0x1999a
e00005e6:       |  |        |      99958893             addi    a7,a1,-1639 # 19999999 <tohost+0x19979991>
e00005ea:       |  |        |      00001317             auipc   t1,0x1
e00005ee:       |  |        |      0f230313             addi    t1,t1,242 # e00016dc <remu10_table>
e00005f2:       |  |        |      52d9                 li      t0,-10
remu10():
/proc/self/cwd/sw/tests/common/utils.c:134
  n = (0x19999999 * n + (n >> 1) + (n >> 3)) >> 28;
e00005f4:       |  |        |  /-> 031505b3             mul     a1,a0,a7
e00005f8:       |  |        |  |   00155413             srli    s0,a0,0x1
e00005fc:       |  |        |  |   95a2                 add     a1,a1,s0
e00005fe:       |  |        |  |   00355793             srli    a5,a0,0x3
e0000602:       |  |        |  |   95be                 add     a1,a1,a5
e0000604:       |  |        |  |   81f1                 srli    a1,a1,0x1c
/proc/self/cwd/sw/tests/common/utils.c:135
  return remu10_table[n];
e0000606:       |  |        |  |   959a                 add     a1,a1,t1
e0000608:       |  |        |  |   00058583             lb      a1,0(a1)
qprinti():
/proc/self/cwd/sw/tests/common/utils.c:223
      *--s = remu10(u) + '0';
e000060c:       |  |        |  |   03058793             addi    a5,a1,48
divu10():
/proc/self/cwd/sw/tests/common/utils.c:118
  q = (n >> 1) + (n >> 2);
e0000610:       |  |        |  |   00255593             srli    a1,a0,0x2
e0000614:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/common/utils.c:119
  q = q + (q >> 4);
e0000616:       |  |        |  |   0045d413             srli    s0,a1,0x4
e000061a:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/common/utils.c:120
  q = q + (q >> 8);
e000061c:       |  |        |  |   0085d413             srli    s0,a1,0x8
e0000620:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/common/utils.c:121
  q = q + (q >> 16);
e0000622:       |  |        |  |   0105d413             srli    s0,a1,0x10
e0000626:       |  |        |  |   95a2                 add     a1,a1,s0
/proc/self/cwd/sw/tests/common/utils.c:122
  q = q >> 3;
e0000628:       |  |        |  |   0035d413             srli    s0,a1,0x3
/proc/self/cwd/sw/tests/common/utils.c:123
  r = n - q * 10;
e000062c:       |  |        |  |   025405b3             mul     a1,s0,t0
e0000630:       |  |        |  |   952e                 add     a0,a0,a1
qprinti():
/proc/self/cwd/sw/tests/common/utils.c:223
      *--s = remu10(u) + '0';
e0000632:       |  |        |  |   fff60593             addi    a1,a2,-1
divu10():
/proc/self/cwd/sw/tests/common/utils.c:125
  return q + ((r + 6) >> 4);
e0000636:       |  |        |  |   0519                 addi    a0,a0,6
e0000638:       |  |        |  |   8111                 srli    a0,a0,0x4
e000063a:       |  |        |  |   9522                 add     a0,a0,s0
qprinti():
/proc/self/cwd/sw/tests/common/utils.c:223
      *--s = remu10(u) + '0';
e000063c:       |  |        |  |   fef60fa3             sb      a5,-1(a2)
e0000640:       |  |        |  |   862e                 mv      a2,a1
/proc/self/cwd/sw/tests/common/utils.c:222
    while (u) {
e0000642:       |  |        |  \-- f94d                 bnez    a0,e00005f4 <qprinti+0x8e>
/proc/self/cwd/sw/tests/common/utils.c:228
  if (neg) {
e0000644:       |  |  /-----\----X 02080663             beqz    a6,e0000670 <qprinti+0x10a>
/proc/self/cwd/sw/tests/common/utils.c:229
    if( width && (pad & PAD_ZERO) )
e0000648:       |  |  |     /----> 0016b513             seqz    a0,a3
e000064c:       |  |  |     |      00277613             andi    a2,a4,2
e0000650:       |  |  |     |      00163613             seqz    a2,a2
e0000654:       |  |  |     |      8d51                 or      a0,a0,a2
e0000656:       |  |  |     |  /-- cd19                 beqz    a0,e0000674 <qprinti+0x10e>
e0000658:       |  |  |     |  |   4401                 li      s0,0
/proc/self/cwd/sw/tests/common/utils.c:237
      *--s = '-';
e000065a:       |  |  |     |  |   fff58513             addi    a0,a1,-1
e000065e:       |  |  |     |  |   02d00613             li      a2,45
e0000662:       |  |  |     |  |   fec58fa3             sb      a2,-1(a1)
e0000666:       |  |  |     |  |   85aa                 mv      a1,a0
e0000668:       |  |  |  /--|--|-- a01d                 j       e000068e <qprinti+0x128>
e000066a:       \--|--|--|--|--|-> 85b2                 mv      a1,a2
/proc/self/cwd/sw/tests/common/utils.c:228
  if (neg) {
e000066c:          |  |  |  \--|-- fc081ee3             bnez    a6,e0000648 <qprinti+0xe2>
e0000670:          |  \--|-----|-> 4401                 li      s0,0
e0000672:          |     +-----|-- a831                 j       e000068e <qprinti+0x128>
e0000674:          |     |     \-> 40000537             lui     a0,0x40000
uart_sendchar():
/proc/self/cwd/sw/tests/common/utils.c:79
  while( (*(volatile unsigned int*)(UART_REG_LSR) & 0x20) == 0);
e0000678:          |     |     /-> 4950                 lw      a2,20(a0)
e000067a:          |     |     |   02067613             andi    a2,a2,32
e000067e:          |     |     \-- de6d                 beqz    a2,e0000678 <qprinti+0x112>
e0000680:          |     |         40000537             lui     a0,0x40000
e0000684:          |     |         02d00613             li      a2,45
/proc/self/cwd/sw/tests/common/utils.c:82
  *(volatile unsigned int*)(UART_REG_THR) = c;
e0000688:          |     |         c110                 sw      a2,0(a0)
qprinti():
/proc/self/cwd/sw/tests/common/utils.c:233
      --width;
e000068a:          |     |         16fd                 addi    a3,a3,-1
e000068c:          |     |         4405                 li      s0,1
/proc/self/cwd/sw/tests/common/utils.c:240
  return pc + qprints (out, s, width, pad);
e000068e:          |     \-------> 852e                 mv      a0,a1
e0000690:          |               85b6                 mv      a1,a3
e0000692:          |               863a                 mv      a2,a4
e0000694:          |               3539                 jal     e00004a2 <qprints>
e0000696:          |               9522                 add     a0,a0,s0
/proc/self/cwd/sw/tests/common/utils.c:241
}
e0000698:          \-------------> 5422                 lw      s0,40(sp)
e000069a:                          50b2                 lw      ra,44(sp)
e000069c:                          6145                 addi    sp,sp,48
e000069e:                          8082                 ret

e00006a0 <dif_rv_plic_init>:
dif_rv_plic_init():
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_plic_autogen.c:18

#include "rv_plic_regs.h"  // Generated.

OT_WARN_UNUSED_RESULT
dif_result_t dif_rv_plic_init(mmio_region_t base_addr, dif_rv_plic_t *rv_plic) {
  if (rv_plic == NULL) {
e00006a0:       /----- c581                     beqz    a1,e00006a8 <dif_rv_plic_init+0x8>
e00006a2:       |      4601                     li      a2,0
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_plic_autogen.c:22
    return kDifBadArg;
  }

  rv_plic->base_addr = base_addr;
e00006a4:       |      c188                     sw      a0,0(a1)
e00006a6:       |  /-- a011                     j       e00006aa <dif_rv_plic_init+0xa>
e00006a8:       \--|-> 460d                     li      a2,3
/proc/self/cwd/sw/device/lib/dif/autogen/dif_rv_plic_autogen.c:25

  return kDifOk;
}
e00006aa:          \-> 8532                     mv      a0,a2
e00006ac:              8082                     ret

e00006ae <dif_rv_plic_irq_set_enabled>:
dif_rv_plic_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:174

dif_result_t dif_rv_plic_irq_set_enabled(const dif_rv_plic_t *plic,
                                         dif_rv_plic_irq_id_t irq,
                                         dif_rv_plic_target_t target,
                                         dif_toggle_t state) {
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
e00006ae:              00153713                 seqz    a4,a0
e00006b2:              0b900793                 li      a5,185
e00006b6:              00b7b7b3                 sltu    a5,a5,a1
e00006ba:              8f5d                     or      a4,a4,a5
e00006bc:              00c03633                 snez    a2,a2
e00006c0:              8f51                     or      a4,a4,a2
e00006c2:              460d                     li      a2,3
e00006c4:       /----- eb05                     bnez    a4,e00006f4 <dif_rv_plic_irq_set_enabled+0x46>
e00006c6:       |      4705                     li      a4,1
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:180
      target >= RV_PLIC_PARAM_NUM_TARGET) {
    return kDifBadArg;
  }

  bool flag;
  switch (state) {
e00006c8:       |  /-- 00e68463                 beq     a3,a4,e00006d0 <dif_rv_plic_irq_set_enabled+0x22>
e00006cc:       +--|-- e685                     bnez    a3,e00006f4 <dif_rv_plic_irq_set_enabled+0x46>
e00006ce:       |  |   4681                     li      a3,0
plic_irq_enable_reg_info():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:92
      .offset = plic_irq_enable_base_for_target(target) + offset,
e00006d0:       |  \-> 0035d613                 srli    a2,a1,0x3
dif_rv_plic_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:193
      return kDifBadArg;
  }

  plic_reg_info_t reg_info = plic_irq_enable_reg_info(irq, target);

  uint32_t reg = mmio_region_read32(plic->base_addr, reg_info.offset);
e00006d4:       |      4108                     lw      a0,0(a0)
e00006d6:       |      6789                     lui     a5,0x2
plic_offset_from_reg0():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:39
  return register_index * sizeof(uint32_t);
e00006d8:       |      8e5d                     or      a2,a2,a5
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
 * @param offset the offset to read at, in bytes.
 * @return the read value.
 */
OT_WARN_UNUSED_RESULT
inline uint32_t mmio_region_read32(mmio_region_t base, ptrdiff_t offset) {
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e00006da:       |      9a71                     andi    a2,a2,-4
e00006dc:       |      9532                     add     a0,a0,a2
e00006de:       |      411c                     lw      a5,0(a0)
e00006e0:       |      4601                     li      a2,0
bitfield_field32_write():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:75
 */
OT_WARN_UNUSED_RESULT
inline uint32_t bitfield_field32_write(uint32_t bitfield,
                                       bitfield_field32_t field,
                                       uint32_t value) {
  bitfield &= ~(field.mask << field.index);
e00006e2:       |      00b71733                 sll     a4,a4,a1
e00006e6:       |      fff74713                 not     a4,a4
e00006ea:       |      8f7d                     and     a4,a4,a5
/proc/self/cwd/./sw/device/lib/base/bitfield.h:76
  bitfield |= (value & field.mask) << field.index;
e00006ec:       |      00b695b3                 sll     a1,a3,a1
e00006f0:       |      8dd9                     or      a1,a1,a4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
 * @param offset the offset to write at, in bytes.
 * @param value the value to write.
 */
inline void mmio_region_write32(mmio_region_t base, ptrdiff_t offset,
                                uint32_t value) {
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e00006f2:       |      c10c                     sw      a1,0(a0)
dif_rv_plic_irq_set_enabled():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:198
  reg = bitfield_bit32_write(reg, reg_info.bit_index, flag);
  mmio_region_write32(plic->base_addr, reg_info.offset, reg);

  return kDifOk;
}
e00006f4:       \----> 8532                     mv      a0,a2
e00006f6:              8082                     ret

e00006f8 <dif_rv_plic_irq_set_priority>:
dif_rv_plic_irq_set_priority():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:203

dif_result_t dif_rv_plic_irq_set_priority(const dif_rv_plic_t *plic,
                                          dif_rv_plic_irq_id_t irq,
                                          uint32_t priority) {
  if (plic == NULL || irq >= RV_PLIC_PARAM_NUM_SRC ||
e00006f8:           00153693            seqz    a3,a0
e00006fc:           0b900713            li      a4,185
e0000700:           00b73733            sltu    a4,a4,a1
e0000704:           8f55                        or      a4,a4,a3
e0000706:           468d                        li      a3,3
e0000708:           00c6b7b3            sltu    a5,a3,a2
e000070c:           8f5d                        or      a4,a4,a5
e000070e:       /-- e711                        bnez    a4,e000071a <dif_rv_plic_irq_set_priority+0x22>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:209
      priority > kDifRvPlicMaxPriority) {
    return kDifBadArg;
  }

  ptrdiff_t offset = plic_priority_reg_offset(irq);
  mmio_region_write32(plic->base_addr, offset, priority);
e0000710:       |   4108                        lw      a0,0(a0)
e0000712:       |   4681                        li      a3,0
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000714:       |   058a                        slli    a1,a1,0x2
e0000716:       |   952e                        add     a0,a0,a1
e0000718:       |   c110                        sw      a2,0(a0)
dif_rv_plic_irq_set_priority():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:212

  return kDifOk;
}
e000071a:       \-> 8536                        mv      a0,a3
e000071c:           8082                        ret

e000071e <dif_rv_plic_irq_claim>:
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:245
}

dif_result_t dif_rv_plic_irq_claim(const dif_rv_plic_t *plic,
                                   dif_rv_plic_target_t target,
                                   dif_rv_plic_irq_id_t *claim_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET ||
e000071e:           00153693            seqz    a3,a0
e0000722:           00b035b3            snez    a1,a1
e0000726:           8dd5                        or      a1,a1,a3
e0000728:           00163693            seqz    a3,a2
e000072c:           8ecd                        or      a3,a3,a1
e000072e:           458d                        li      a1,3
e0000730:       /-- ea89                        bnez    a3,e0000742 <dif_rv_plic_irq_claim+0x24>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
      claim_data == NULL) {
    return kDifBadArg;
  }

  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  *claim_data = mmio_region_read32(plic->base_addr, claim_complete_reg);
e0000732:       |   4108                        lw      a0,0(a0)
e0000734:       |   002005b7            lui     a1,0x200
e0000738:       |   0591                        addi    a1,a1,4
mmio_region_read32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:96
  return ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)];
e000073a:       |   952e                        add     a0,a0,a1
e000073c:       |   4108                        lw      a0,0(a0)
e000073e:       |   4581                        li      a1,0
dif_rv_plic_irq_claim():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:251
e0000740:       |   c208                        sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:254

  return kDifOk;
}
e0000742:       \-> 852e                        mv      a0,a1
e0000744:           8082                        ret

e0000746 <dif_rv_plic_irq_complete>:
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:259

dif_result_t dif_rv_plic_irq_complete(const dif_rv_plic_t *plic,
                                      dif_rv_plic_target_t target,
                                      dif_rv_plic_irq_id_t complete_data) {
  if (plic == NULL || target >= RV_PLIC_PARAM_NUM_TARGET) {
e0000746:           00153693            seqz    a3,a0
e000074a:           00b035b3            snez    a1,a1
e000074e:           8ecd                        or      a3,a3,a1
e0000750:           458d                        li      a1,3
e0000752:       /-- ea81                        bnez    a3,e0000762 <dif_rv_plic_irq_complete+0x1c>
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:266
  }

  // Write back the claimed IRQ ID to the target specific CC register,
  // to notify the PLIC of the IRQ completion.
  ptrdiff_t claim_complete_reg = plic_claim_complete_base_for_target(target);
  mmio_region_write32(plic->base_addr, claim_complete_reg, complete_data);
e0000754:       |   4108                        lw      a0,0(a0)
e0000756:       |   4581                        li      a1,0
e0000758:       |   002006b7            lui     a3,0x200
e000075c:       |   0691                        addi    a3,a3,4
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
  ((volatile uint32_t *)base.base)[offset / sizeof(uint32_t)] = value;
e000075e:       |   9536                        add     a0,a0,a3
e0000760:       |   c110                        sw      a2,0(a0)
dif_rv_plic_irq_complete():
/proc/self/cwd/sw/device/lib/dif/dif_rv_plic.c:269

  return kDifOk;
}
e0000762:       \-> 852e                        mv      a0,a1
e0000764:           8082                        ret

e0000766 <test_status_set>:
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:25
        mmio_region_from_addr(kDeviceTestStatusAddress);
    mmio_region_write32(test_status_device_addr, 0x0, (uint32_t)test_status);
  }
}

void test_status_set(test_status_t test_status) {
e0000766:                    1101                       addi    sp,sp,-32
e0000768:                    ce06                       sw      ra,28(sp)
e000076a:                    65b1                       lui     a1,0xc
e000076c:                    aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:26
  switch (test_status) {
e0000770:             /----- 02b50063           beq     a0,a1,e0000790 <test_status_set+0x2a>
e0000774:             |      65a5                       lui     a1,0x9
e0000776:             |      05b5                       addi    a1,a1,13
e0000778:          /--|----- 02b50d63           beq     a0,a1,e00007b2 <test_status_set+0x4c>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e000077c:          |  |      00001597           auipc   a1,0x1
e0000780:          |  |      f5858593           addi    a1,a1,-168 # e00016d4 <kDeviceTestStatusAddress>
e0000784:          |  |      418c                       lw      a1,0(a1)
e0000786:          |  |  /-- c191                       beqz    a1,e000078a <test_status_set+0x24>
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e0000788:          |  |  |   c188                       sw      a0,0(a1)
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:44
    default: {
      test_status_device_write(test_status);
      break;
    }
  }
}
e000078a:          |  |  \-> 40f2                       lw      ra,28(sp)
e000078c:          |  |      6105                       addi    sp,sp,32
e000078e:          |  |      8082                       ret
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e0000790:          |  \----> 00001517           auipc   a0,0x1
e0000794:          |         f4850513           addi    a0,a0,-184 # e00016d8 <kDeviceLogBypassUartAddress>
e0000798:          |         4108                       lw      a0,0(a0)
e000079a:          |  /----- ed0d                       bnez    a0,e00007d4 <test_status_set+0x6e>
e000079c:          |  |      00001597           auipc   a1,0x1
e00007a0:          |  |      c6858593           addi    a1,a1,-920 # e0001404 <memrchr+0x2ca>
e00007a4:          |  |      0028                       addi    a0,sp,8
e00007a6:          |  |      4651                       li      a2,20
e00007a8:          |  |      7fa000ef           jal     ra,e0000fa2 <memcpy>
e00007ac:          |  |      0028                       addi    a0,sp,8
e00007ae:          |  |      20b5                       jal     e000081a <base_log_internal_core>
e00007b0:          |  |  /-- a805                       j       e00007e0 <test_status_set+0x7a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e00007b2:          \--|--|-> 00001517           auipc   a0,0x1
e00007b6:             |  |   f2650513           addi    a0,a0,-218 # e00016d8 <kDeviceLogBypassUartAddress>
e00007ba:             |  |   4108                       lw      a0,0(a0)
e00007bc:       /-----|--|-- ed05                       bnez    a0,e00007f4 <test_status_set+0x8e>
e00007be:       |     |  |   00001597           auipc   a1,0x1
e00007c2:       |     |  |   c3258593           addi    a1,a1,-974 # e00013f0 <memrchr+0x2b6>
e00007c6:       |     |  |   0028                       addi    a0,sp,8
e00007c8:       |     |  |   4651                       li      a2,20
e00007ca:       |     |  |   7d8000ef           jal     ra,e0000fa2 <memcpy>
e00007ce:       |     |  |   0028                       addi    a0,sp,8
e00007d0:       |     |  |   20a9                       jal     e000081a <base_log_internal_core>
e00007d2:       |  /--|--|-- a03d                       j       e0000800 <test_status_set+0x9a>
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:34
      LOG_INFO("FAIL!");
e00007d4:       |  |  \--|-> 00001517           auipc   a0,0x1
e00007d8:       |  |     |   fe850513           addi    a0,a0,-24 # e00017bc <test_status_set.kLogFields.2>
e00007dc:       |  |     |   4581                       li      a1,0
e00007de:       |  |     |   28f9                       jal     e00008bc <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e00007e0:       |  |     \-> 00001517           auipc   a0,0x1
e00007e4:       |  |         ef450513           addi    a0,a0,-268 # e00016d4 <kDeviceTestStatusAddress>
e00007e8:       |  |         4108                       lw      a0,0(a0)
e00007ea:       |  |  /----- c505                       beqz    a0,e0000812 <test_status_set+0xac>
e00007ec:       |  |  |      65b1                       lui     a1,0xc
e00007ee:       |  |  |      aad58593           addi    a1,a1,-1363 # baad <_stack_len+0x3aad>
e00007f2:       |  |  |  /-- a839                       j       e0000810 <test_status_set+0xaa>
test_status_set():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:28
      LOG_INFO("PASS!");
e00007f4:       \--|--|--|-> 00001517           auipc   a0,0x1
e00007f8:          |  |  |   fb450513           addi    a0,a0,-76 # e00017a8 <test_status_set.kLogFields>
e00007fc:          |  |  |   4581                       li      a1,0
e00007fe:          |  |  |   287d                       jal     e00008bc <base_log_internal_dv>
test_status_device_write():
/proc/self/cwd/sw/device/lib/testing/test_framework/status.c:18
  if (kDeviceTestStatusAddress != 0) {
e0000800:          \--|--|-> 00001517           auipc   a0,0x1
e0000804:             |  |   ed450513           addi    a0,a0,-300 # e00016d4 <kDeviceTestStatusAddress>
e0000808:             |  |   4108                       lw      a0,0(a0)
e000080a:             +--|-- c501                       beqz    a0,e0000812 <test_status_set+0xac>
e000080c:             |  |   65a5                       lui     a1,0x9
e000080e:             |  |   05b5                       addi    a1,a1,13
e0000810:             |  \-> c10c                       sw      a1,0(a0)
e0000812:             \----> 2009                       jal     e0000814 <abort>

e0000814 <abort>:
wait_for_interrupt():
/proc/self/cwd/./sw/device/lib/runtime/hart.h:29
 *
 * This function may behave as if it is a no-op.
 */
inline void wait_for_interrupt(void) {
#ifdef OT_PLATFORM_RV32
  asm volatile("wfi");
e0000814:       /-> 10500073            wfi
abort():
/proc/self/cwd/sw/device/lib/runtime/hart.c:21
  while ((ibex_mcycle_read() - start) < cycles) {
  }
}

noreturn void abort(void) {
  while (true) {
e0000818:       \-- bff5                        j       e0000814 <abort>

e000081a <base_log_internal_core>:
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:47
 * Logs `log` and the values that follow to stdout.
 *
 * @param log the log data to log.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_core(log_fields_t log, ...) {
e000081a:              7179                     addi    sp,sp,-48
e000081c:              c606                     sw      ra,12(sp)
e000081e:              c422                     sw      s0,8(sp)
e0000820:              c226                     sw      s1,4(sp)
e0000822:              842a                     mv      s0,a0
e0000824:              d646                     sw      a7,44(sp)
e0000826:              d442                     sw      a6,40(sp)
e0000828:              d23e                     sw      a5,36(sp)
e000082a:              d03a                     sw      a4,32(sp)
e000082c:              ce36                     sw      a3,28(sp)
e000082e:              cc32                     sw      a2,24(sp)
e0000830:              ca2e                     sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:49
  size_t file_name_len =
      ((char *)memchr(log.file_name, '\0', PTRDIFF_MAX)) - log.file_name;
e0000832:              4148                     lw      a0,4(a0)
e0000834:              800005b7                 lui     a1,0x80000
e0000838:              fff58613                 addi    a2,a1,-1 # 7fffffff <fromhost+0x9ffeffef>
e000083c:              4581                     li      a1,0
e000083e:              04f000ef                 jal     ra,e000108c <memchr>
e0000842:              4054                     lw      a3,4(s0)
e0000844:              40d50633                 sub     a2,a0,a3
/proc/self/cwd/sw/device/lib/runtime/log.c:50
  const char *base_name = memrchr(log.file_name, '/', file_name_len);
e0000848:              02f00593                 li      a1,47
e000084c:              8536                     mv      a0,a3
e000084e:              0ed000ef                 jal     ra,e000113a <memrchr>
/proc/self/cwd/sw/device/lib/runtime/log.c:51
  if (base_name == NULL) {
e0000852:       /----- c501                     beqz    a0,e000085a <base_log_internal_core+0x40>
/proc/self/cwd/sw/device/lib/runtime/log.c:54
    base_name = log.file_name;
  } else {
    ++base_name;  // Remove the final '/'.
e0000854:       |      00150693                 addi    a3,a0,1
e0000858:       |  /-- a011                     j       e000085c <base_log_internal_core+0x42>
/proc/self/cwd/sw/device/lib/runtime/log.c:52
    base_name = log.file_name;
e000085a:       \--|-> 4054                     lw      a3,4(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  // A small global counter that increments with each log line. This can be
  // useful for seeing how many times this function has been called, even if
  // nothing was printed for some time.
  static uint16_t global_log_counter = 0;

  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e000085c:          \-> 4008                     lw      a0,0(s0)
e000085e:              458d                     li      a1,3
stringify_severity():
/proc/self/cwd/sw/device/lib/runtime/log.c:27
  switch (severity) {
e0000860:       /----- 00a5ea63                 bltu    a1,a0,e0000874 <base_log_internal_core+0x5a>
e0000864:       |      050a                     slli    a0,a0,0x2
e0000866:       |      00001597                 auipc   a1,0x1
e000086a:       |      bce58593                 addi    a1,a1,-1074 # e0001434 <memrchr+0x2fa>
e000086e:       |      952e                     add     a0,a0,a1
e0000870:       |      410c                     lw      a1,0(a0)
e0000872:       |  /-- a029                     j       e000087c <base_log_internal_core+0x62>
e0000874:       \--|-> 00001597                 auipc   a1,0x1
e0000878:          |   bbb58593                 addi    a1,a1,-1093 # e000142f <memrchr+0x2f5>
base_log_internal_core():
/proc/self/cwd/sw/device/lib/runtime/log.c:63
              global_log_counter, base_name, log.line);
e000087c:          \-> 00001497                 auipc   s1,0x1
e0000880:              ef848493                 addi    s1,s1,-264 # e0001774 <base_log_internal_core.global_log_counter>
e0000884:              0004d603                 lhu     a2,0(s1)
e0000888:              4418                     lw      a4,8(s0)
/proc/self/cwd/sw/device/lib/runtime/log.c:62
  base_printf("%s%05d %s:%d] ", stringify_severity(log.severity),
e000088a:              00001517                 auipc   a0,0x1
e000088e:              b8e50513                 addi    a0,a0,-1138 # e0001418 <memrchr+0x2de>
e0000892:              208d                     jal     e00008f4 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:64
  ++global_log_counter;
e0000894:              00049503                 lh      a0,0(s1)
e0000898:              0505                     addi    a0,a0,1
e000089a:              00a49023                 sh      a0,0(s1)
e000089e:              0848                     addi    a0,sp,20
/proc/self/cwd/sw/device/lib/runtime/log.c:67

  va_list args;
  va_start(args, log);
e00008a0:              c02a                     sw      a0,0(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:68
  base_vprintf(log.format, args);
e00008a2:              4808                     lw      a0,16(s0)
e00008a4:              084c                     addi    a1,sp,20
e00008a6:              2041                     jal     e0000926 <base_vprintf>
/proc/self/cwd/sw/device/lib/runtime/log.c:71
  va_end(args);

  base_printf("\r\n");
e00008a8:              00001517                 auipc   a0,0x1
e00008ac:              b0450513                 addi    a0,a0,-1276 # e00013ac <memrchr+0x272>
e00008b0:              2091                     jal     e00008f4 <base_printf>
/proc/self/cwd/sw/device/lib/runtime/log.c:72
}
e00008b2:              4492                     lw      s1,4(sp)
e00008b4:              4422                     lw      s0,8(sp)
e00008b6:              40b2                     lw      ra,12(sp)
e00008b8:              6145                     addi    sp,sp,48
e00008ba:              8082                     ret

e00008bc <base_log_internal_dv>:
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:84
 *        be invalid at runtime, since the pointed-to data will have been
 *        stripped from the binary.
 * @param nargs the number of arguments passed to the format string.
 * @param ... format parameters matching the format string.
 */
void base_log_internal_dv(const log_fields_t *log, uint32_t nargs, ...) {
e00008bc:              1101                     addi    sp,sp,-32
e00008be:              ce46                     sw      a7,28(sp)
e00008c0:              cc42                     sw      a6,24(sp)
e00008c2:              ca3e                     sw      a5,20(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:85
  mmio_region_t log_device = mmio_region_from_addr(kDeviceLogBypassUartAddress);
e00008c4:              00001797                 auipc   a5,0x1
e00008c8:              e1478793                 addi    a5,a5,-492 # e00016d8 <kDeviceLogBypassUartAddress>
e00008cc:              439c                     lw      a5,0(a5)
e00008ce:              c83a                     sw      a4,16(sp)
e00008d0:              c636                     sw      a3,12(sp)
e00008d2:              c432                     sw      a2,8(sp)
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e00008d4:              c388                     sw      a0,0(a5)
e00008d6:              0028                     addi    a0,sp,8
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:89
  mmio_region_write32(log_device, 0x0, (uintptr_t)log);

  va_list args;
  va_start(args, nargs);
e00008d8:              c22a                     sw      a0,4(sp)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e00008da:       /----- c989                     beqz    a1,e00008ec <base_log_internal_dv+0x30>
/proc/self/cwd/sw/device/lib/runtime/log.c:91
    mmio_region_write32(log_device, 0x0, va_arg(args, uint32_t));
e00008dc:       |  /-> 4512                     lw      a0,4(sp)
e00008de:       |  |   00450613                 addi    a2,a0,4
e00008e2:       |  |   c232                     sw      a2,4(sp)
e00008e4:       |  |   4108                     lw      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/log.c:90
  for (int i = 0; i < nargs; ++i) {
e00008e6:       |  |   15fd                     addi    a1,a1,-1
mmio_region_write32():
/proc/self/cwd/./sw/device/lib/base/mmio.h:145
e00008e8:       |  |   c388                     sw      a0,0(a5)
base_log_internal_dv():
/proc/self/cwd/sw/device/lib/runtime/log.c:90
e00008ea:       |  \-- f9ed                     bnez    a1,e00008dc <base_log_internal_dv+0x20>
/proc/self/cwd/sw/device/lib/runtime/log.c:94
  }
  va_end(args);
}
e00008ec:       \----> 6105                     addi    sp,sp,32
e00008ee:              8082                     ret

e00008f0 <base_dev_null>:
base_dev_null():
/proc/self/cwd/sw/device/lib/runtime/print.c:52

static const char kErrorNul[17] = "%<unexpected nul>";
static const char kUnknownSpec[15] = "%<unknown spec>";
static const char kErrorTooWide[12] = "%<bad width>";

static size_t base_dev_null(void *data, const char *buf, size_t len) {
e00008f0:       8532                    mv      a0,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:53
  return len;
e00008f2:       8082                    ret

e00008f4 <base_printf>:
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:84
void base_uart_stdout(const dif_uart_t *uart) {
  base_set_stdout(
      (buffer_sink_t){.data = (void *)uart, .sink = &base_dev_uart});
}

size_t base_printf(const char *format, ...) {
e00008f4:       7179                    addi    sp,sp,-48
e00008f6:       c606                    sw      ra,12(sp)
e00008f8:       d646                    sw      a7,44(sp)
e00008fa:       d442                    sw      a6,40(sp)
e00008fc:       d23e                    sw      a5,36(sp)
e00008fe:       d03a                    sw      a4,32(sp)
e0000900:       ce36                    sw      a3,28(sp)
e0000902:       cc32                    sw      a2,24(sp)
e0000904:       ca2e                    sw      a1,20(sp)
e0000906:       00001597                auipc   a1,0x1
e000090a:       e7258593                addi    a1,a1,-398 # e0001778 <base_stdout>
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  va_end(args);
  return bytes_left;
}

size_t base_vprintf(const char *format, va_list args) {
  return base_vfprintf(base_stdout, format, args);
e000090e:       4190                    lw      a2,0(a1)
e0000910:       41cc                    lw      a1,4(a1)
e0000912:       872a                    mv      a4,a0
e0000914:       0848                    addi    a0,sp,20
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:86
  va_start(args, format);
e0000916:       c42a                    sw      a0,8(sp)
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e0000918:       0854                    addi    a3,sp,20
e000091a:       8532                    mv      a0,a2
e000091c:       863a                    mv      a2,a4
e000091e:       200d                    jal     e0000940 <base_vfprintf>
base_printf():
/proc/self/cwd/sw/device/lib/runtime/print.c:89
  return bytes_left;
e0000920:       40b2                    lw      ra,12(sp)
e0000922:       6145                    addi    sp,sp,48
e0000924:       8082                    ret

e0000926 <base_vprintf>:
base_vprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:92
size_t base_vprintf(const char *format, va_list args) {
e0000926:       00001697                auipc   a3,0x1
e000092a:       e5268693                addi    a3,a3,-430 # e0001778 <base_stdout>
/proc/self/cwd/sw/device/lib/runtime/print.c:93
  return base_vfprintf(base_stdout, format, args);
e000092e:       4290                    lw      a2,0(a3)
e0000930:       42d4                    lw      a3,4(a3)
e0000932:       872e                    mv      a4,a1
e0000934:       87aa                    mv      a5,a0
e0000936:       8532                    mv      a0,a2
e0000938:       85b6                    mv      a1,a3
e000093a:       863e                    mv      a2,a5
e000093c:       86ba                    mv      a3,a4
e000093e:       a009                    j       e0000940 <base_vfprintf>

e0000940 <base_vfprintf>:
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:532
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
    }
  }
}

size_t base_vfprintf(buffer_sink_t out, const char *format, va_list args) {
e0000940:                                                                    715d                       addi    sp,sp,-80
e0000942:                                                                    c686                       sw      ra,76(sp)
e0000944:                                                                    c4a2                       sw      s0,72(sp)
e0000946:                                                                    c2a6                       sw      s1,68(sp)
e0000948:                                                                    c0ca                       sw      s2,64(sp)
e000094a:                                                                    de4e                       sw      s3,60(sp)
e000094c:                                                                    dc52                       sw      s4,56(sp)
e000094e:                                                                    da56                       sw      s5,52(sp)
e0000950:                                                                    d85a                       sw      s6,48(sp)
e0000952:                                                                    d65e                       sw      s7,44(sp)
e0000954:                                                                    d462                       sw      s8,40(sp)
e0000956:                                                                    d266                       sw      s9,36(sp)
e0000958:                                                                    d06a                       sw      s10,32(sp)
e000095a:                                                                    ce6e                       sw      s11,28(sp)
e000095c:                                                                    8cb2                       mv      s9,a2
e000095e:                                                                    892a                       mv      s2,a0
e0000960:                                                                    c436                       sw      a3,8(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:533
  if (out.sink == NULL) {
e0000962:                                                                /-- c199                       beqz    a1,e0000968 <base_vfprintf+0x28>
e0000964:                                                                |   89ae                       mv      s3,a1
e0000966:                                                             /--|-- a029                       j       e0000970 <base_vfprintf+0x30>
e0000968:                                                             |  \-> 00000997           auipc   s3,0x0
e000096c:                                                             |      f8898993           addi    s3,s3,-120 # e00008f0 <base_dev_null>
/proc/self/cwd/sw/device/lib/runtime/print.c:542
  // NOTE: This copy is necessary on amd64 and other platforms, where
  // `va_list` is a fixed array type (and, as such, decays to a pointer in
  // an argument list). On PSABI RV32IMC, however, `va_list` is a `void*`, so
  // this is a copy of the pointer, not the array.
  va_list args_copy;
  va_copy(args_copy, args);
e0000970:                                                             \----> c236                       sw      a3,4(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:545

  size_t bytes_written = 0;
  while (format[0] != '\0') {
e0000972:                                                                    000cc503           lbu     a0,0(s9)
e0000976:       /----------------------------------------------------------- 42050563           beqz    a0,e0000da0 <base_vfprintf+0x460>
e000097a:       |                                                            4a81                       li      s5,0
e000097c:       |                                                            02500c13           li      s8,37
e0000980:       |                                                            4d25                       li      s10,9
e0000982:       |                                                            4a29                       li      s4,10
e0000984:       |                                                            658d                       lui     a1,0x3
e0000986:       |                                                            c2258593           addi    a1,a1,-990 # 2c22 <_min_stack+0xc22>
e000098a:       |                                                            c02e                       sw      a1,0(sp)
e000098c:       |        /-------------------------------------------------> 4481                       li      s1,0
consume_until_percent():
/proc/self/cwd/sw/device/lib/runtime/print.c:155
    if (c == '\0' || c == kPercent) {
e000098e:       |        |                                               /-> 0ff57413           andi    s0,a0,255
e0000992:       |        |                                            /--|-- 01840963           beq     s0,s8,e00009a4 <base_vfprintf+0x64>
e0000996:       |        |                                            +--|-- c419                       beqz    s0,e00009a4 <base_vfprintf+0x64>
/proc/self/cwd/sw/device/lib/runtime/print.c:154
    char c = (*format)[text_len];
e0000998:       |        |                                            |  |   009c8533           add     a0,s9,s1
e000099c:       |        |                                            |  |   00154503           lbu     a0,1(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:162
    ++text_len;
e00009a0:       |        |                                            |  |   0485                       addi    s1,s1,1
e00009a2:       |        |                                            |  \-- b7f5                       j       e000098e <base_vfprintf+0x4e>
/proc/self/cwd/sw/device/lib/runtime/print.c:156
      if (text_len > 0) {
e00009a4:       |        |                                            \--/-X c491                       beqz    s1,e00009b0 <base_vfprintf+0x70>
/proc/self/cwd/sw/device/lib/runtime/print.c:157
        *bytes_written += out.sink(out.data, *format, text_len);
e00009a6:       |        |                                               |   854a                       mv      a0,s2
e00009a8:       |        |                                               |   85e6                       mv      a1,s9
e00009aa:       |        |                                               |   8626                       mv      a2,s1
e00009ac:       |        |                                               |   9982                       jalr    s3
e00009ae:       |        |                                               |   9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:546
    if (!consume_until_percent(out, &format, &bytes_written)) {
e00009b0:       |  /-----|-----------------------------------------------\-X 3e040963           beqz    s0,e0000da2 <base_vfprintf+0x462>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:195
  if ((*format)[0] == '!') {
e00009b4:       |  |     |                                                   009c8533           add     a0,s9,s1
e00009b8:       |  |     |                                                   00154603           lbu     a2,1(a0)
e00009bc:       |  |     |                                                   02100713           li      a4,33
e00009c0:       |  |     |                                            /----- 00e61863           bne     a2,a4,e00009d0 <base_vfprintf+0x90>
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e00009c4:       |  |     |                                            |      00254583           lbu     a1,2(a0)
e00009c8:       |  |     |                                            |      00250693           addi    a3,a0,2
e00009cc:       |  |     |                                            |      4b05                       li      s6,1
e00009ce:       |  |     |                                            |  /-- a029                       j       e00009d8 <base_vfprintf+0x98>
e00009d0:       |  |     |                                            \--|-> 4b01                       li      s6,0
e00009d2:       |  |     |                                               |   00150693           addi    a3,a0,1
e00009d6:       |  |     |                                               |   85b2                       mv      a1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e00009d8:       |  |  /--|-----------------------------------------------\-X 3a058b63           beqz    a1,e0000d8e <base_vfprintf+0x44e>
e00009dc:       |  |  |  |                                                   4481                       li      s1,0
e00009de:       |  |  |  |                                                   4b81                       li      s7,0
e00009e0:       |  |  |  |                                                   4501                       li      a0,0
e00009e2:       |  |  |  |                                                   fdf60613           addi    a2,a2,-33
e00009e6:       |  |  |  |                                                   00163d93           seqz    s11,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:213
    if (c < '0' || c > '9') {
e00009ea:       |  |  |  |                                                   00168c93           addi    s9,a3,1
e00009ee:       |  |  |  |                                      /----------> fd058613           addi    a2,a1,-48
e00009f2:       |  |  |  |                                      |            0ff67613           andi    a2,a2,255
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e00009f6:       |  |  |  |                                      |            0ff5f593           andi    a1,a1,255
e00009fa:       |  |  |  |                                   /--|----------- 02cd6b63           bltu    s10,a2,e0000a30 <base_vfprintf+0xf0>
/proc/self/cwd/sw/device/lib/runtime/print.c:216
    if (spec->padding == 0) {
e00009fe:       |  |  |  |                                   |  |            0ff57613           andi    a2,a0,255
e0000a02:       |  |  |  |                                   |  |        /-- ca19                       beqz    a2,e0000a18 <base_vfprintf+0xd8>
/proc/self/cwd/sw/device/lib/runtime/print.c:224
    spec->width *= 10;
e0000a04:       |  |  |  |                                   |  |     /--|-> 03448633           mul     a2,s1,s4
/proc/self/cwd/sw/device/lib/runtime/print.c:225
    spec->width += (c - '0');
e0000a08:       |  |  |  |                                   |  |     |  |   95b2                       add     a1,a1,a2
e0000a0a:       |  |  |  |                                   |  |     |  |   fd058493           addi    s1,a1,-48
/proc/self/cwd/sw/device/lib/runtime/print.c:208
    char c = (*format)[spec_len];
e0000a0e:       |  |  |  |                                   |  |  /--|--|-> 000cc583           lbu     a1,0(s9)
/proc/self/cwd/sw/device/lib/runtime/print.c:209
    if (c == '\0') {
e0000a12:       |  |  |  |                                   |  |  |  |  |   0c85                       addi    s9,s9,1
e0000a14:       |  |  |  |                                   |  \--|--|--|-- fde9                       bnez    a1,e00009ee <base_vfprintf+0xae>
e0000a16:       |  |  +--|-----------------------------------|-----|--|--|-- aea5                       j       e0000d8e <base_vfprintf+0x44e>
e0000a18:       |  |  |  |                                   |     |  |  \-> 02000b93           li      s7,32
e0000a1c:       |  |  |  |                                   |     |  |      03000613           li      a2,48
e0000a20:       |  |  |  |                                   |     |  |      02000513           li      a0,32
e0000a24:       |  |  |  |                                   |     |  \----- fec590e3           bne     a1,a2,e0000a04 <base_vfprintf+0xc4>
e0000a28:       |  |  |  |                                   |     |         03000513           li      a0,48
e0000a2c:       |  |  |  |                                   |     |         8bb2                       mv      s7,a2
e0000a2e:       |  |  |  |                                   |     \-------- b7c5                       j       e0000a0e <base_vfprintf+0xce>
/proc/self/cwd/sw/device/lib/runtime/print.c:229
  if ((spec->width == 0 && spec->padding != 0) || spec->width > 32) {
e0000a30:       |  |  |  |                                   \-----------/-X c481                       beqz    s1,e0000a38 <base_vfprintf+0xf8>
e0000a32:       |  |  |  |                                            /--|-- 00e4e763           bltu    s1,a4,e0000a40 <base_vfprintf+0x100>
e0000a36:       |  |  |  |  /-----------------------------------------|--|-- a671                       j       e0000dc2 <base_vfprintf+0x482>
e0000a38:       |  |  |  |  |                                         |  \-> 0ff57513           andi    a0,a0,255
e0000a3c:       |  |  |  |  +-----------------------------------------|----- 38051363           bnez    a0,e0000dc2 <base_vfprintf+0x482>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0000a40:       |  |  |  |  |                                         \----> fa858513           addi    a0,a1,-88
e0000a44:       |  |  |  |  |                                         /----- 04a76963           bltu    a4,a0,e0000a96 <base_vfprintf+0x156>
e0000a48:       |  |  |  |  |                                         |      050a                       slli    a0,a0,0x2
e0000a4a:       |  |  |  |  |                                         |      00001597           auipc   a1,0x1
e0000a4e:       |  |  |  |  |                                         |      9fa58593           addi    a1,a1,-1542 # e0001444 <memrchr+0x30a>
e0000a52:       |  |  |  |  |                                         |      952e                       add     a0,a0,a1
e0000a54:       |  |  |  |  |                                         |      4108                       lw      a0,0(a0)
e0000a56:       |  |  |  |  |                                         |      8502                       jr      a0
/proc/self/cwd/sw/device/lib/runtime/print.c:408
      if (spec.is_nonstd) {
e0000a58:       |  |  |  |  |  /--------------------------------------|----- 2a0d9c63           bnez    s11,e0000d10 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:411
      uint32_t value = va_arg(*args, uint32_t);
e0000a5c:       |  |  |  |  |  |                                      |      4512                       lw      a0,4(sp)
e0000a5e:       |  |  |  |  |  |                                      |      00450593           addi    a1,a0,4
e0000a62:       |  |  |  |  |  |                                      |      c22e                       sw      a1,4(sp)
e0000a64:       |  |  |  |  |  |                                      |      00052b03           lw      s6,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:412
      if (((int32_t)value) < 0) {
e0000a68:       |  |  |  |  |  |                                      |  /-- 000b5c63           bgez    s6,e0000a80 <base_vfprintf+0x140>
/proc/self/cwd/sw/device/lib/runtime/print.c:413
        *bytes_written += out.sink(out.data, "-", 1);
e0000a6c:       |  |  |  |  |  |                                      |  |   00001597           auipc   a1,0x1
e0000a70:       |  |  |  |  |  |                                      |  |   a6f58593           addi    a1,a1,-1425 # e00014db <memrchr+0x3a1>
e0000a74:       |  |  |  |  |  |                                      |  |   4605                       li      a2,1
e0000a76:       |  |  |  |  |  |                                      |  |   854a                       mv      a0,s2
e0000a78:       |  |  |  |  |  |                                      |  |   9982                       jalr    s3
e0000a7a:       |  |  |  |  |  |                                      |  |   9aaa                       add     s5,s5,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:414
        value = -value;
e0000a7c:       |  |  |  |  |  |                                      |  |   41600b33           neg     s6,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:417
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0000a80:       |  |  |  |  |  |                                      |  \-> 0ffbf713           andi    a4,s7,255
e0000a84:       |  |  |  |  |  |                                      |      00001817           auipc   a6,0x1
e0000a88:       |  |  |  |  |  |                                      |      a7080813           addi    a6,a6,-1424 # e00014f4 <kDigitsLow>
e0000a8c:       |  |  |  |  |  |                                      |      47a9                       li      a5,10
e0000a8e:       |  |  |  |  |  |                                      |      854a                       mv      a0,s2
e0000a90:       |  |  |  |  |  |                                      |      85ce                       mv      a1,s3
e0000a92:       |  |  |  |  |  |                                      |      865a                       mv      a2,s6
e0000a94:       |  |  |  |  |  |        /-----------------------------|----- a4a1                       j       e0000cdc <base_vfprintf+0x39c>
/proc/self/cwd/sw/device/lib/runtime/print.c:374
  switch (spec.type) {
e0000a96:       |  |  |  |  |  |        |                             \----> 04800513           li      a0,72
e0000a9a:       |  |  |  |  |  |        |                                /-- 02a58d63           beq     a1,a0,e0000ad4 <base_vfprintf+0x194>
e0000a9e:       |  |  |  |  |  +--------|--------------------------------|-- 27859963           bne     a1,s8,e0000d10 <base_vfprintf+0x3d0>
e0000aa2:       |  |  |  |  |  +--------|--------------------------------|-- 260d9763           bnez    s11,e0000d10 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:379
      *bytes_written += out.sink(out.data, "%", 1);
e0000aa6:       |  |  |  |  |  |        |                                |   00001597           auipc   a1,0x1
e0000aaa:       |  |  |  |  |  |        |                                |   a3358593           addi    a1,a1,-1485 # e00014d9 <memrchr+0x39f>
e0000aae:       |  |  |  |  |  |        |                             /--|-- a851                       j       e0000b42 <base_vfprintf+0x202>
/proc/self/cwd/sw/device/lib/runtime/print.c:461
      if (spec.is_nonstd) {
e0000ab0:       |  |  |  |  |  |        |                             |  +-- 020d8263           beqz    s11,e0000ad4 <base_vfprintf+0x194>
/proc/self/cwd/sw/device/lib/runtime/print.c:462
        size_t len = va_arg(*args, size_t);
e0000ab4:       |  |  |  |  |  |        |                             |  |   4512                       lw      a0,4(sp)
e0000ab6:       |  |  |  |  |  |        |                             |  |   00450593           addi    a1,a0,4
e0000aba:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e0000abc:       |  |  |  |  |  |        |                             |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:463
        char *value = va_arg(*args, char *);
e0000abe:       |  |  |  |  |  |        |                             |  |   00850593           addi    a1,a0,8
e0000ac2:       |  |  |  |  |  |        |                             |  |   c22e                       sw      a1,4(sp)
e0000ac4:       |  |  |  |  |  |        |                             |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:464
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000ac6:       |  |  |  |  |  |        |                             |  |   0ffbf793           andi    a5,s7,255
e0000aca:       |  |  |  |  |  |        |                             |  |   00001897           auipc   a7,0x1
e0000ace:       |  |  |  |  |  |        |                             |  |   a5788893           addi    a7,a7,-1449 # e0001521 <kDigitsHigh>
e0000ad2:       |  |  |  |  |  |        |           /-----------------|--|-- a2d5                       j       e0000cb6 <base_vfprintf+0x376>
/proc/self/cwd/sw/device/lib/runtime/print.c:470
      uint32_t value = va_arg(*args, uint32_t);
e0000ad4:       |  |  |  |  |  |        |           |                 |  \-> 4512                       lw      a0,4(sp)
e0000ad6:       |  |  |  |  |  |        |           |                 |      00450593           addi    a1,a0,4
e0000ada:       |  |  |  |  |  |        |           |                 |      c22e                       sw      a1,4(sp)
e0000adc:       |  |  |  |  |  |        |           |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:472
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsHigh);
e0000ade:       |  |  |  |  |  |        |           |                 |      0ffbf713           andi    a4,s7,255
e0000ae2:       |  |  |  |  |  |        |           |                 |      00001817           auipc   a6,0x1
e0000ae6:       |  |  |  |  |  |        |           |                 |      a3f80813           addi    a6,a6,-1473 # e0001521 <kDigitsHigh>
e0000aea:       |  |  |  |  |  |        |        /--|-----------------|----- a2f5                       j       e0000cd6 <base_vfprintf+0x396>
/proc/self/cwd/sw/device/lib/runtime/print.c:486
      if (!spec.is_nonstd) {
e0000aec:       |  |  |  |  |  +--------|--------|--|-----------------|----- 220d8263           beqz    s11,e0000d10 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:489
      size_t len = va_arg(*args, size_t);
e0000af0:       |  |  |  |  |  |        |        |  |                 |      4512                       lw      a0,4(sp)
e0000af2:       |  |  |  |  |  |        |        |  |                 |      00450593           addi    a1,a0,4
e0000af6:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e0000af8:       |  |  |  |  |  |        |        |  |                 |      4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:490
      char *value = va_arg(*args, char *);
e0000afa:       |  |  |  |  |  |        |        |  |                 |      00850593           addi    a1,a0,8
e0000afe:       |  |  |  |  |  |        |        |  |                 |      c22e                       sw      a1,4(sp)
e0000b00:       |  |  |  |  |  |        |        |  |                 |      4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:491
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000b02:       |  |  |  |  |  |        |        |  |                 |      0ffbf793           andi    a5,s7,255
e0000b06:       |  |  |  |  |  |        |        |  |                 |      00001897           auipc   a7,0x1
e0000b0a:       |  |  |  |  |  |        |        |  |                 |      a1b88893           addi    a7,a7,-1509 # e0001521 <kDigitsHigh>
e0000b0e:       |  |  |  |  |  |        |     /--|--|-----------------|----- aadd                       j       e0000d04 <base_vfprintf+0x3c4>
e0000b10:       |  |  |  |  |  |        |     |  |  |                 |      4512                       lw      a0,4(sp)
e0000b12:       |  |  |  |  |  |        |     |  |  |                 |      00450593           addi    a1,a0,4
e0000b16:       |  |  |  |  |  |        |     |  |  |                 |      c22e                       sw      a1,4(sp)
e0000b18:       |  |  |  |  |  |        |     |  |  |                 |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:505
      if (spec.is_nonstd) {
e0000b1a:       |  |  |  |  |  |        |  /--|--|--|-----------------|----- 200d8863           beqz    s11,e0000d2a <base_vfprintf+0x3ea>
/proc/self/cwd/sw/device/lib/runtime/print.c:508
        if (va_arg(*args, int) != 0) {
e0000b1e:       |  |  |  |  |  |  /-----|--|--|--|--|-----------------|----- 26060263           beqz    a2,e0000d82 <base_vfprintf+0x442>
/proc/self/cwd/sw/device/lib/runtime/print.c:509
          *bytes_written += out.sink(out.data, "true", 4);
e0000b22:       |  |  |  |  |  |  |     |  |  |  |  |                 |      00001597           auipc   a1,0x1
e0000b26:       |  |  |  |  |  |  |     |  |  |  |  |                 |      9be58593           addi    a1,a1,-1602 # e00014e0 <memrchr+0x3a6>
e0000b2a:       |  |  |  |  |  |  |     |  |  |  |  |                 |      4611                       li      a2,4
e0000b2c:       |  |  |  |  |  |  |  /--|--|--|--|--|-----------------|----- a2fd                       j       e0000d1a <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:383
      if (spec.is_nonstd) {
e0000b2e:       |  |  |  |  |  +--|--|--|--|--|--|--|-----------------|----- 1e0d9163           bnez    s11,e0000d10 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:386
      char value = (char)va_arg(*args, uint32_t);
e0000b32:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4512                       lw      a0,4(sp)
e0000b34:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00450593           addi    a1,a0,4
e0000b38:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      c22e                       sw      a1,4(sp)
e0000b3a:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      4108                       lw      a0,0(a0)
e0000b3c:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      00a10a23           sb      a0,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:387
      *bytes_written += out.sink(out.data, &value, 1);
e0000b40:       |  |  |  |  |  |  |  |  |  |  |  |  |                 |      084c                       addi    a1,sp,20
e0000b42:       |  |  |  |  |  |  |  |  |  |  |  |  |                 \----> 4605                       li      a2,1
e0000b44:       |  |  |  |  |  |  |  +--|--|--|--|--|----------------------- aad9                       j       e0000d1a <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:421
      if (spec.is_nonstd) {
e0000b46:       |  |  |  |  |  +--|--|--|--|--|--|--|----------------------- 1c0d9563           bnez    s11,e0000d10 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:424
      uint32_t value = va_arg(*args, uint32_t);
e0000b4a:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4512                       lw      a0,4(sp)
e0000b4c:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00450593           addi    a1,a0,4
e0000b50:       |  |  |  |  |  |  |  |  |  |  |  |  |                        c22e                       sw      a1,4(sp)
e0000b52:       |  |  |  |  |  |  |  |  |  |  |  |  |                        4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:426
          write_digits(out, value, spec.width, spec.padding, 8, kDigitsLow);
e0000b54:       |  |  |  |  |  |  |  |  |  |  |  |  |                        0ffbf713           andi    a4,s7,255
e0000b58:       |  |  |  |  |  |  |  |  |  |  |  |  |                        00001817           auipc   a6,0x1
e0000b5c:       |  |  |  |  |  |  |  |  |  |  |  |  |                        99c80813           addi    a6,a6,-1636 # e00014f4 <kDigitsLow>
e0000b60:       |  |  |  |  |  |  |  |  |  |  |  |  |                        47a1                       li      a5,8
e0000b62:       |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- aa9d                       j       e0000cd8 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:430
      if (spec.is_nonstd) {
e0000b64:       |  |  |  |  |  +--|--|--|--|--|--|--|--|-------------------- 1a0d9663           bnez    s11,e0000d10 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0000b68:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001597           auipc   a1,0x1
e0000b6c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     97558593           addi    a1,a1,-1675 # e00014dd <memrchr+0x3a3>
e0000b70:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4609                       li      a2,2
e0000b72:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0000b74:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:440
      uintptr_t value = va_arg(*args, uintptr_t);
e0000b76:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4592                       lw      a1,4(sp)
e0000b78:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00458613           addi    a2,a1,4
e0000b7c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     c232                       sw      a2,4(sp)
e0000b7e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     4190                       lw      a2,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:439
      *bytes_written += out.sink(out.data, "0x", 2);
e0000b80:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     01550433           add     s0,a0,s5
/proc/self/cwd/sw/device/lib/runtime/print.c:442
          write_digits(out, value, sizeof(uintptr_t) * 2, '0', 16, kDigitsLow);
e0000b84:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00001817           auipc   a6,0x1
e0000b88:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     97080813           addi    a6,a6,-1680 # e00014f4 <kDigitsLow>
e0000b8c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     46a1                       li      a3,8
e0000b8e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     03000713           li      a4,48
e0000b92:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     47c1                       li      a5,16
e0000b94:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     854a                       mv      a0,s2
e0000b96:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     85ce                       mv      a1,s3
e0000b98:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     2e29                       jal     e0000eb2 <write_digits>
/proc/self/cwd/sw/device/lib/runtime/print.c:441
      *bytes_written +=
e0000b9a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |                     00a40ab3           add     s5,s0,a0
e0000b9e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- a249                       j       e0000d20 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:521
      status_t value = va_arg(*args, status_t);
e0000ba0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4512                       lw      a0,4(sp)
e0000ba2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00450593           addi    a1,a0,4
e0000ba6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  c22e                       sw      a1,4(sp)
e0000ba8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4108                       lw      a0,0(a0)
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:280
  char mod[] = {'"', 0, 0, 0, '"', ','};
e0000baa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4582                       lw      a1,0(sp)
e0000bac:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00b11c23           sh      a1,24(sp)
e0000bb0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  02200593           li      a1,34
e0000bb4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  ca2e                       sw      a1,20(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e0000bb6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  006c                       addi    a1,sp,12
e0000bb8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  0810                       addi    a2,sp,16
e0000bba:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  01510693           addi    a3,sp,21
e0000bbe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  2e8d                       jal     e0000f30 <status_extract>
/proc/self/cwd/sw/device/lib/runtime/print.c:286
  const char *end = start;
e0000bc0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:283
  bool err = status_extract(value, &start, &arg, &mod[1]);
e0000bc2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8baa                       mv      s7,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e0000bc4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  fff58413           addi    s0,a1,-1
e0000bc8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              /-> 0005c503           lbu     a0,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:288
    end++;
e0000bcc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0585                       addi    a1,a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:287
  while (*end)
e0000bce:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              |   0405                       addi    s0,s0,1
e0000bd0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              \-- fd65                       bnez    a0,e0000bc8 <base_vfprintf+0x288>
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e0000bd2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  001d9613           slli    a2,s11,0x1
e0000bd6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e0000bda:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  91558593           addi    a1,a1,-1771 # e00014eb <memrchr+0x3b1>
e0000bde:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0000be0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e0000be2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  45b2                       lw      a1,12(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:291
  len += out.sink(out.data, "{\"", as_json ? 2 : 0);
e0000be4:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  84aa                       mv      s1,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:292
  len += out.sink(out.data, start, end - start);
e0000be6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  40b40633           sub     a2,s0,a1
e0000bea:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0000bec:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e0000bee:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:293
  len += out.sink(out.data, "\"", as_json ? 1 : 0);
e0000bf2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e0000bf6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8fa58593           addi    a1,a1,-1798 # e00014ec <memrchr+0x3b2>
e0000bfa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0000bfc:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  865a                       mv      a2,s6
e0000bfe:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e0000c00:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:295
  len += out.sink(out.data, ":", 1);
e0000c02:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00001597           auipc   a1,0x1
e0000c06:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  8ce58593           addi    a1,a1,-1842 # e00014d0 <memrchr+0x396>
e0000c0a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  4605                       li      a2,1
e0000c0c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  854a                       mv      a0,s2
e0000c0e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  9982                       jalr    s3
e0000c10:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  00a404b3           add     s1,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:296
  if (err) {
e0000c14:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /-------------- 120b8363           beqz    s7,e0000d3a <base_vfprintf+0x3fa>
/proc/self/cwd/sw/device/lib/runtime/print.c:298
    len += out.sink(out.data, "[", 1);
e0000c18:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e0000c1c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               8d658593           addi    a1,a1,-1834 # e00014ee <memrchr+0x3b4>
e0000c20:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e0000c22:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0000c24:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e0000c26:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e0000c2a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               084c                       addi    a1,sp,20
e0000c2c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4619                       li      a2,6
e0000c2e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0000c30:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e0000c32:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4642                       lw      a2,16(sp)
/proc/self/cwd/sw/device/lib/runtime/print.c:299
    len += out.sink(out.data, mod, sizeof(mod));
e0000c34:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:300
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e0000c36:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001817           auipc   a6,0x1
e0000c3a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               8be80813           addi    a6,a6,-1858 # e00014f4 <kDigitsLow>
e0000c3e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               47a9                       li      a5,10
e0000c40:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0000c42:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               85ce                       mv      a1,s3
e0000c44:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4681                       li      a3,0
e0000c46:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4701                       li      a4,0
e0000c48:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               24ad                       jal     e0000eb2 <write_digits>
e0000c4a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:301
    len += out.sink(out.data, "]", 1);
e0000c4c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               00001597           auipc   a1,0x1
e0000c50:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               8a458593           addi    a1,a1,-1884 # e00014f0 <memrchr+0x3b6>
e0000c54:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               4605                       li      a2,1
e0000c56:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               854a                       mv      a0,s2
e0000c58:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               9982                       jalr    s3
e0000c5a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               942a                       add     s0,s0,a0
e0000c5c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-------- a8e5                       j       e0000d54 <base_vfprintf+0x414>
e0000c5e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         4512                       lw      a0,4(sp)
e0000c60:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         00450593           addi    a1,a0,4
e0000c64:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |         c22e                       sw      a1,4(sp)
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:392
      if (spec.is_nonstd) {
e0000c66:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|-------- 100d8363           beqz    s11,e0000d6c <base_vfprintf+0x42c>
/proc/self/cwd/sw/device/lib/runtime/print.c:394
        len = va_arg(*args, size_t);
e0000c6a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e0000c6c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00850593           addi    a1,a0,8
e0000c70:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0000c72:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         414c                       lw      a1,4(a0)
e0000c74:       |  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|-------- a05d                       j       e0000d1a <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:496
      if (spec.is_nonstd) {
e0000c76:       |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|-------- 080d9d63           bnez    s11,e0000d10 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:499
      uint32_t value = va_arg(*args, uint32_t);
e0000c7a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4512                       lw      a0,4(sp)
e0000c7c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00450593           addi    a1,a0,4
e0000c80:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         c22e                       sw      a1,4(sp)
e0000c82:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:501
          write_digits(out, value, spec.width, spec.padding, 10, kDigitsLow);
e0000c84:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         0ffbf713           andi    a4,s7,255
e0000c88:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         00001817           auipc   a6,0x1
e0000c8c:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         86c80813           addi    a6,a6,-1940 # e00014f4 <kDigitsLow>
e0000c90:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         47a9                       li      a5,10
e0000c92:       |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|--|--|-------- a099                       j       e0000cd8 <base_vfprintf+0x398>
/proc/self/cwd/sw/device/lib/runtime/print.c:446
      if (spec.is_nonstd) {
e0000c94:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /-- 020d8663           beqz    s11,e0000cc0 <base_vfprintf+0x380>
/proc/self/cwd/sw/device/lib/runtime/print.c:447
        size_t len = va_arg(*args, size_t);
e0000c98:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4512                       lw      a0,4(sp)
e0000c9a:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00450593           addi    a1,a0,4
e0000c9e:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0000ca0:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:448
        char *value = va_arg(*args, char *);
e0000ca2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00850593           addi    a1,a0,8
e0000ca6:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   c22e                       sw      a1,4(sp)
e0000ca8:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:449
        *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000caa:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   0ffbf793           andi    a5,s7,255
e0000cae:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   00001897           auipc   a7,0x1
e0000cb2:       |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   84688893           addi    a7,a7,-1978 # e00014f4 <kDigitsLow>
e0000cb6:       |  |  |  |  |  |  |  |  |  |  |  |  \--|--|--|--|--|-----|-> 4805                       li      a6,1
e0000cb8:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   854a                       mv      a0,s2
e0000cba:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   85ce                       mv      a1,s3
e0000cbc:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |     |   8726                       mv      a4,s1
e0000cbe:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  /--|-- a0b9                       j       e0000d0c <base_vfprintf+0x3cc>
/proc/self/cwd/sw/device/lib/runtime/print.c:455
      uint32_t value = va_arg(*args, uint32_t);
e0000cc0:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  \-> 4512                       lw      a0,4(sp)
e0000cc2:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00450593           addi    a1,a0,4
e0000cc6:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      c22e                       sw      a1,4(sp)
e0000cc8:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      4110                       lw      a2,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:457
          write_digits(out, value, spec.width, spec.padding, 16, kDigitsLow);
e0000cca:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      0ffbf713           andi    a4,s7,255
e0000cce:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      00001817           auipc   a6,0x1
e0000cd2:       |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |      82680813           addi    a6,a6,-2010 # e00014f4 <kDigitsLow>
e0000cd6:       |  |  |  |  |  |  |  |  |  |  |  \-----|--|--|--|--|--|----> 47c1                       li      a5,16
e0000cd8:       |  |  |  |  |  |  |  |  |  |  |        >--|--|--|--|--|----> 854a                       mv      a0,s2
e0000cda:       |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |      85ce                       mv      a1,s3
e0000cdc:       |  |  |  |  |  |  |  |  \--|--|--------|--|--|--|--|--|----> 86a6                       mv      a3,s1
e0000cde:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |      2ad1                       jal     e0000eb2 <write_digits>
e0000ce0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  /-- a83d                       j       e0000d1e <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:476
      if (!spec.is_nonstd) {
e0000ce2:       |  |  |  |  |  +--|--|-----|--|--------|--|--|--|--|--|--|-- 020d8763           beqz    s11,e0000d10 <base_vfprintf+0x3d0>
/proc/self/cwd/sw/device/lib/runtime/print.c:479
      size_t len = va_arg(*args, size_t);
e0000ce6:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4512                       lw      a0,4(sp)
e0000ce8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00450593           addi    a1,a0,4
e0000cec:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e0000cee:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4114                       lw      a3,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:480
      char *value = va_arg(*args, char *);
e0000cf0:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00850593           addi    a1,a0,8
e0000cf4:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   c22e                       sw      a1,4(sp)
e0000cf6:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   4150                       lw      a2,4(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:481
      *bytes_written += hex_dump(out, value, len, spec.width, spec.padding,
e0000cf8:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   0ffbf793           andi    a5,s7,255
e0000cfc:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   00000897           auipc   a7,0x0
e0000d00:       |  |  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |   7f888893           addi    a7,a7,2040 # e00014f4 <kDigitsLow>
e0000d04:       |  |  |  |  |  |  |  |     |  \--------|--|--|--|--|--|--|-> 854a                       mv      a0,s2
e0000d06:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   85ce                       mv      a1,s3
e0000d08:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   8726                       mv      a4,s1
e0000d0a:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  |  |   4801                       li      a6,0
e0000d0c:       |  |  |  |  |  |  |  |     |           |  |  |  |  |  \--|-> 20c9                       jal     e0000dce <hex_dump>
e0000d0e:       |  |  |  |  |  |  |  |     |           |  |  |  |  |     +-- a801                       j       e0000d1e <base_vfprintf+0x3de>
/proc/self/cwd/sw/device/lib/runtime/print.c:527
      *bytes_written += out.sink(out.data, kUnknownSpec, sizeof(kUnknownSpec));
e0000d10:       |  |  |  |  |  \--|--|-----|-----------|--|--|--|--|-----|-> 00001597           auipc   a1,0x1
e0000d14:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   82158593           addi    a1,a1,-2015 # e0001531 <kUnknownSpec>
e0000d18:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   463d                       li      a2,15
e0000d1a:       |  |  |  |  |     |  >-----|-----------|--|--|--|--|-----|-> 854a                       mv      a0,s2
e0000d1c:       |  |  |  |  |     |  |     |           |  |  |  |  |     |   9982                       jalr    s3
e0000d1e:       |  |  |  |  |     |  |     |           |  |  |  |  |     \-> 9aaa                       add     s5,s5,a0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:545
  while (format[0] != '\0') {
e0000d20:       |  |  |  |  |     |  |     |           |  >--|--|--|-------> 000cc503           lbu     a0,0(s9)
e0000d24:       |  |  |  \--|-----|--|-----|-----------|--|--|--|--|-------- c60514e3           bnez    a0,e000098c <base_vfprintf+0x4c>
e0000d28:       |  +--|-----|-----|--|-----|-----------|--|--|--|--|-------- a8ad                       j       e0000da2 <base_vfprintf+0x462>
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:517
          write_digits(out, value, spec.width, spec.padding, 2, kDigitsLow);
e0000d2a:       |  |  |     |     |  |     \-----------|--|--|--|--|-------> 0ffbf713           andi    a4,s7,255
e0000d2e:       |  |  |     |     |  |                 |  |  |  |  |         00000817           auipc   a6,0x0
e0000d32:       |  |  |     |     |  |                 |  |  |  |  |         7c680813           addi    a6,a6,1990 # e00014f4 <kDigitsLow>
e0000d36:       |  |  |     |     |  |                 |  |  |  |  |         4789                       li      a5,2
e0000d38:       |  |  |     |     |  |                 \--|--|--|--|-------- b745                       j       e0000cd8 <base_vfprintf+0x398>
write_status():
/proc/self/cwd/sw/device/lib/runtime/print.c:304
    len += write_digits(out, arg, 0, 0, 10, kDigitsLow);
e0000d3a:       |  |  |     |     |  |                    |  \--|--|-------> 4642                       lw      a2,16(sp)
e0000d3c:       |  |  |     |     |  |                    |     |  |         00000817           auipc   a6,0x0
e0000d40:       |  |  |     |     |  |                    |     |  |         7b880813           addi    a6,a6,1976 # e00014f4 <kDigitsLow>
e0000d44:       |  |  |     |     |  |                    |     |  |         47a9                       li      a5,10
e0000d46:       |  |  |     |     |  |                    |     |  |         854a                       mv      a0,s2
e0000d48:       |  |  |     |     |  |                    |     |  |         85ce                       mv      a1,s3
e0000d4a:       |  |  |     |     |  |                    |     |  |         4681                       li      a3,0
e0000d4c:       |  |  |     |     |  |                    |     |  |         4701                       li      a4,0
e0000d4e:       |  |  |     |     |  |                    |     |  |         2295                       jal     e0000eb2 <write_digits>
e0000d50:       |  |  |     |     |  |                    |     |  |         00950433           add     s0,a0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:306
  len += out.sink(out.data, "}", as_json ? 1 : 0);
e0000d54:       |  |  |     |     |  |                    |     |  \-------> 00000597           auipc   a1,0x0
e0000d58:       |  |  |     |     |  |                    |     |            79e58593           addi    a1,a1,1950 # e00014f2 <memrchr+0x3b8>
e0000d5c:       |  |  |     |     |  |                    |     |            854a                       mv      a0,s2
e0000d5e:       |  |  |     |     |  |                    |     |            865a                       mv      a2,s6
e0000d60:       |  |  |     |     |  |                    |     |            9982                       jalr    s3
e0000d62:       |  |  |     |     |  |                    |     |            015405b3           add     a1,s0,s5
process_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:522
      *bytes_written += write_status(out, value, spec.is_nonstd);
e0000d66:       |  |  |     |     |  |                    |     |            00a58ab3           add     s5,a1,a0
e0000d6a:       |  |  |     |     |  |                    \-----|----------- bf5d                       j       e0000d20 <base_vfprintf+0x3e0>
/proc/self/cwd/sw/device/lib/runtime/print.c:397
      char *value = va_arg(*args, char *);
e0000d6c:       |  |  |     |     |  |                          \----------> 410c                       lw      a1,0(a0)
e0000d6e:       |  |  |     |     |  |                                       4501                       li      a0,0
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e0000d70:       |  |  |     |     |  |                                   /-> 00a58633           add     a2,a1,a0
e0000d74:       |  |  |     |     |  |                                   |   00064603           lbu     a2,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:400
        ++len;
e0000d78:       |  |  |     |     |  |                                   |   0505                       addi    a0,a0,1
/proc/self/cwd/sw/device/lib/runtime/print.c:398
      while (!spec.is_nonstd && value[len] != '\0') {
e0000d7a:       |  |  |     |     |  |                                   \-- fa7d                       bnez    a2,e0000d70 <base_vfprintf+0x430>
/proc/self/cwd/sw/device/lib/runtime/print.c:403
      *bytes_written += out.sink(out.data, value, len);
e0000d7c:       |  |  |     |     |  |                                       fff50613           addi    a2,a0,-1
e0000d80:       |  |  |     |     |  +-------------------------------------- bf69                       j       e0000d1a <base_vfprintf+0x3da>
/proc/self/cwd/sw/device/lib/runtime/print.c:511
          *bytes_written += out.sink(out.data, "false", 5);
e0000d82:       |  |  |     |     \--|-------------------------------------> 00000597           auipc   a1,0x0
e0000d86:       |  |  |     |        |                                       76358593           addi    a1,a1,1891 # e00014e5 <memrchr+0x3ab>
e0000d8a:       |  |  |     |        |                                       4615                       li      a2,5
e0000d8c:       |  |  |     |        \-------------------------------------- b779                       j       e0000d1a <base_vfprintf+0x3da>
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:210
      *bytes_written += out.sink(out.data, kErrorNul, sizeof(kErrorNul));
e0000d8e:       |  |  \-----|----------------------------------------------> 00000597           auipc   a1,0x0
e0000d92:       |  |        |                                                77658593           addi    a1,a1,1910 # e0001504 <kErrorNul>
e0000d96:       |  |        |                                                4645                       li      a2,17
e0000d98:       |  |        |                                            /-> 854a                       mv      a0,s2
e0000d9a:       |  |        |                                            |   9982                       jalr    s3
e0000d9c:       |  |        |                                            |   9aaa                       add     s5,s5,a0
e0000d9e:       |  +--------|--------------------------------------------|-- a011                       j       e0000da2 <base_vfprintf+0x462>
e0000da0:       \--|--------|--------------------------------------------|-> 4a81                       li      s5,0
base_vfprintf():
/proc/self/cwd/sw/device/lib/runtime/print.c:558

    process_specifier(out, spec, &bytes_written, &args_copy);
  }

  va_end(args_copy);
  return bytes_written;
e0000da2:          \--------|--------------------------------------------|-> 8556                       mv      a0,s5
e0000da4:                   |                                            |   4df2                       lw      s11,28(sp)
e0000da6:                   |                                            |   5d02                       lw      s10,32(sp)
e0000da8:                   |                                            |   5c92                       lw      s9,36(sp)
e0000daa:                   |                                            |   5c22                       lw      s8,40(sp)
e0000dac:                   |                                            |   5bb2                       lw      s7,44(sp)
e0000dae:                   |                                            |   5b42                       lw      s6,48(sp)
e0000db0:                   |                                            |   5ad2                       lw      s5,52(sp)
e0000db2:                   |                                            |   5a62                       lw      s4,56(sp)
e0000db4:                   |                                            |   59f2                       lw      s3,60(sp)
e0000db6:                   |                                            |   4906                       lw      s2,64(sp)
e0000db8:                   |                                            |   4496                       lw      s1,68(sp)
e0000dba:                   |                                            |   4426                       lw      s0,72(sp)
e0000dbc:                   |                                            |   40b6                       lw      ra,76(sp)
e0000dbe:                   |                                            |   6161                       addi    sp,sp,80
e0000dc0:                   |                                            |   8082                       ret
consume_format_specifier():
/proc/self/cwd/sw/device/lib/runtime/print.c:230
    *bytes_written += out.sink(out.data, kErrorTooWide, sizeof(kErrorTooWide));
e0000dc2:                   \--------------------------------------------|-> 00000597           auipc   a1,0x0
e0000dc6:                                                                |   75358593           addi    a1,a1,1875 # e0001515 <kErrorTooWide>
e0000dca:                                                                |   4631                       li      a2,12
e0000dcc:                                                                \-- b7f1                       j       e0000d98 <base_vfprintf+0x458>

e0000dce <hex_dump>:
hex_dump():
/proc/self/cwd/sw/device/lib/runtime/print.c:326
                       const char *glyphs) {
e0000dce:                    715d                       addi    sp,sp,-80
e0000dd0:                    c686                       sw      ra,76(sp)
e0000dd2:                    c4a2                       sw      s0,72(sp)
e0000dd4:                    c2a6                       sw      s1,68(sp)
e0000dd6:                    c0ca                       sw      s2,64(sp)
e0000dd8:                    de4e                       sw      s3,60(sp)
e0000dda:                    dc52                       sw      s4,56(sp)
e0000ddc:                    da56                       sw      s5,52(sp)
e0000dde:                    d85a                       sw      s6,48(sp)
e0000de0:                    d65e                       sw      s7,44(sp)
e0000de2:                    d462                       sw      s8,40(sp)
e0000de4:                    d266                       sw      s9,36(sp)
e0000de6:                    d06a                       sw      s10,32(sp)
e0000de8:                    8bc6                       mv      s7,a7
e0000dea:                    8a42                       mv      s4,a6
e0000dec:                    8b36                       mv      s6,a3
e0000dee:                    8ab2                       mv      s5,a2
e0000df0:                    892e                       mv      s2,a1
e0000df2:                    89aa                       mv      s3,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:330
  if (len < width) {
e0000df4:          /-------- 02e6fc63           bgeu    a3,a4,e0000e2c <hex_dump+0x5e>
/proc/self/cwd/sw/device/lib/runtime/print.c:331
    width -= len;
e0000df8:          |         416704b3           sub     s1,a4,s6
/proc/self/cwd/sw/device/lib/runtime/print.c:332
    memset(buf, padding, sizeof(buf));
e0000dfc:          |         850a                       mv      a0,sp
e0000dfe:          |         02000613           li      a2,32
e0000e02:          |         85be                       mv      a1,a5
e0000e04:          |         241d                       jal     e000102a <memset>
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e0000e06:          +-------- c09d                       beqz    s1,e0000e2c <hex_dump+0x5e>
e0000e08:          |         4c01                       li      s8,0
e0000e0a:          |  /----> 02000513           li      a0,32
e0000e0e:          |  |      8426                       mv      s0,s1
/proc/self/cwd/sw/device/lib/runtime/print.c:334
      size_t to_write = width > ARRAYSIZE(buf) ? 32 : width;
e0000e10:          |  |  /-- 00a4e463           bltu    s1,a0,e0000e18 <hex_dump+0x4a>
e0000e14:          |  |  |   02000413           li      s0,32
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e0000e18:          |  |  \-> 858a                       mv      a1,sp
e0000e1a:          |  |      854e                       mv      a0,s3
e0000e1c:          |  |      8622                       mv      a2,s0
e0000e1e:          |  |      9902                       jalr    s2
/proc/self/cwd/sw/device/lib/runtime/print.c:336
      width -= to_write;
e0000e20:          |  |      8c81                       sub     s1,s1,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:335
      bytes_written += out.sink(out.data, buf, to_write);
e0000e22:          |  |      9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:333
    while (width > 0) {
e0000e24:          |  \----- f0fd                       bnez    s1,e0000e0a <hex_dump+0x3c>
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e0000e26:          |     /-- 000b1663           bnez    s6,e0000e32 <hex_dump+0x64>
e0000e2a:       /--|-----|-- a0ad                       j       e0000e94 <hex_dump+0xc6>
e0000e2c:       |  \-----|-> 4c01                       li      s8,0
e0000e2e:       +--------|-- 060b0363           beqz    s6,e0000e94 <hex_dump+0xc6>
e0000e32:       |        \-> 4401                       li      s0,0
e0000e34:       |            4601                       li      a2,0
e0000e36:       |            fffb0493           addi    s1,s6,-1
e0000e3a:       |            8b0a                       mv      s6,sp
e0000e3c:       |            02000c93           li      s9,32
e0000e40:       |            5d7d                       li      s10,-1
e0000e42:       |     /----> 8526                       mv      a0,s1
e0000e44:       |     |  /-- 000a1363           bnez    s4,e0000e4a <hex_dump+0x7c>
e0000e48:       |     |  |   8522                       mv      a0,s0
/proc/self/cwd/sw/device/lib/runtime/print.c:342
    buf[buffered] = glyphs[(bytes[idx] >> 4) & 0xf];
e0000e4a:       |     |  \-> 9556                       add     a0,a0,s5
e0000e4c:       |     |      00054503           lbu     a0,0(a0)
e0000e50:       |     |      00455593           srli    a1,a0,0x4
e0000e54:       |     |      95de                       add     a1,a1,s7
e0000e56:       |     |      00058583           lb      a1,0(a1)
e0000e5a:       |     |      00cb06b3           add     a3,s6,a2
e0000e5e:       |     |      00b68023           sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e0000e62:       |     |      893d                       andi    a0,a0,15
e0000e64:       |     |      955e                       add     a0,a0,s7
e0000e66:       |     |      00050503           lb      a0,0(a0)
/proc/self/cwd/sw/device/lib/runtime/print.c:344
    buffered += 2;
e0000e6a:       |     |      0609                       addi    a2,a2,2
/proc/self/cwd/sw/device/lib/runtime/print.c:343
    buf[buffered + 1] = glyphs[bytes[idx] & 0xf];
e0000e6c:       |     |      00a680a3           sb      a0,1(a3)
e0000e70:       |     |  /-- 01961963           bne     a2,s9,e0000e82 <hex_dump+0xb4>
/proc/self/cwd/sw/device/lib/runtime/print.c:347
      bytes_written += out.sink(out.data, buf, buffered);
e0000e74:       |     |  |   858a                       mv      a1,sp
e0000e76:       |     |  |   02000613           li      a2,32
e0000e7a:       |     |  |   854e                       mv      a0,s3
e0000e7c:       |     |  |   9902                       jalr    s2
e0000e7e:       |     |  |   4601                       li      a2,0
e0000e80:       |     |  |   9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:340
  for (size_t i = 0; i < len; ++i) {
e0000e82:       |     |  \-> 14fd                       addi    s1,s1,-1
e0000e84:       |     |      0405                       addi    s0,s0,1
e0000e86:       |     \----- fba49ee3           bne     s1,s10,e0000e42 <hex_dump+0x74>
/proc/self/cwd/sw/device/lib/runtime/print.c:352
  if (buffered != 0) {
e0000e8a:       +----------- c609                       beqz    a2,e0000e94 <hex_dump+0xc6>
/proc/self/cwd/sw/device/lib/runtime/print.c:353
    bytes_written += out.sink(out.data, buf, buffered);
e0000e8c:       |            858a                       mv      a1,sp
e0000e8e:       |            854e                       mv      a0,s3
e0000e90:       |            9902                       jalr    s2
e0000e92:       |            9c2a                       add     s8,s8,a0
/proc/self/cwd/sw/device/lib/runtime/print.c:355
  return bytes_written;
e0000e94:       \----------> 8562                       mv      a0,s8
e0000e96:                    5d02                       lw      s10,32(sp)
e0000e98:                    5c92                       lw      s9,36(sp)
e0000e9a:                    5c22                       lw      s8,40(sp)
e0000e9c:                    5bb2                       lw      s7,44(sp)
e0000e9e:                    5b42                       lw      s6,48(sp)
e0000ea0:                    5ad2                       lw      s5,52(sp)
e0000ea2:                    5a62                       lw      s4,56(sp)
e0000ea4:                    59f2                       lw      s3,60(sp)
e0000ea6:                    4906                       lw      s2,64(sp)
e0000ea8:                    4496                       lw      s1,68(sp)
e0000eaa:                    4426                       lw      s0,72(sp)
e0000eac:                    40b6                       lw      ra,76(sp)
e0000eae:                    6161                       addi    sp,sp,80
e0000eb0:                    8082                       ret

e0000eb2 <write_digits>:
write_digits():
/proc/self/cwd/sw/device/lib/runtime/print.c:252
                           char padding, uint32_t base, const char *glyphs) {
e0000eb2:              7179                     addi    sp,sp,-48
e0000eb4:              d606                     sw      ra,44(sp)
e0000eb6:              88ae                     mv      a7,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:259
  if (value == 0) {
e0000eb8:       /----- ca05                     beqz    a2,e0000ee8 <write_digits+0x36>
e0000eba:       |      4381                     li      t2,0
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e0000ebc:       |      02b10293                 addi    t0,sp,43
e0000ec0:       |  /-> 8332                     mv      t1,a2
/proc/self/cwd/sw/device/lib/runtime/print.c:265
    value /= base;
e0000ec2:       |  |   02f65633                 divu    a2,a2,a5
e0000ec6:       |  |   02f605b3                 mul     a1,a2,a5
e0000eca:       |  |   40b305b3                 sub     a1,t1,a1
/proc/self/cwd/sw/device/lib/runtime/print.c:266
    buffer[kWordBits - 1 - len] = glyphs[digit];
e0000ece:       |  |   95c2                     add     a1,a1,a6
e0000ed0:       |  |   00058e03                 lb      t3,0(a1)
e0000ed4:       |  |   007285b3                 add     a1,t0,t2
e0000ed8:       |  |   01c58023                 sb      t3,0(a1)
/proc/self/cwd/sw/device/lib/runtime/print.c:263
  while (value > 0) {
e0000edc:       |  |   13fd                     addi    t2,t2,-1
e0000ede:       |  \-- fef371e3                 bgeu    t1,a5,e0000ec0 <write_digits+0xe>
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e0000ee2:       |      40700633                 neg     a2,t2
e0000ee6:       |  /-- a031                     j       e0000ef2 <write_digits+0x40>
/proc/self/cwd/sw/device/lib/runtime/print.c:260
    buffer[kWordBits - 1] = glyphs[0];
e0000ee8:       \--|-> 00080583                 lb      a1,0(a6)
e0000eec:          |   02b105a3                 sb      a1,43(sp)
e0000ef0:          |   4605                     li      a2,1
e0000ef2:          \-> 4585                     li      a1,1
/proc/self/cwd/sw/device/lib/runtime/print.c:269
  width = width == 0 ? 1 : width;
e0000ef4:          /-- c291                     beqz    a3,e0000ef8 <write_digits+0x46>
e0000ef6:          |   85b6                     mv      a1,a3
e0000ef8:          \-> 02000693                 li      a3,32
/proc/self/cwd/sw/device/lib/runtime/print.c:270
  width = width > kWordBits ? kWordBits : width;
e0000efc:          /-- 00d5e463                 bltu    a1,a3,e0000f04 <write_digits+0x52>
e0000f00:          |   02000593                 li      a1,32
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e0000f04:       /--\-X 00b67e63                 bgeu    a2,a1,e0000f20 <write_digits+0x6e>
e0000f08:       |      40c586b3                 sub     a3,a1,a2
e0000f0c:       |      007c                     addi    a5,sp,12
e0000f0e:       |      40c78633                 sub     a2,a5,a2
e0000f12:       |      067d                     addi    a2,a2,31
/proc/self/cwd/sw/device/lib/runtime/print.c:272
    buffer[kWordBits - len - 1] = padding;
e0000f14:       |  /-> 00e60023                 sb      a4,0(a2)
/proc/self/cwd/sw/device/lib/runtime/print.c:271
  while (len < width) {
e0000f18:       |  |   16fd                     addi    a3,a3,-1
e0000f1a:       |  |   167d                     addi    a2,a2,-1
e0000f1c:       |  \-- fee5                     bnez    a3,e0000f14 <write_digits+0x62>
e0000f1e:       |      862e                     mv      a2,a1
e0000f20:       \----> 006c                     addi    a1,sp,12
/proc/self/cwd/sw/device/lib/runtime/print.c:275
  return out.sink(out.data, buffer + (kWordBits - len), len);
e0000f22:              8d91                     sub     a1,a1,a2
e0000f24:              02058593                 addi    a1,a1,32
e0000f28:              9882                     jalr    a7
/proc/self/cwd/sw/device/lib/runtime/print.c:276
}
e0000f2a:              50b2                     lw      ra,44(sp)
e0000f2c:              6145                     addi    sp,sp,48
e0000f2e:              8082                     ret

e0000f30 <status_extract>:
status_err():
/proc/self/cwd/./sw/device/lib/base/status.h:150
 *
 * @param s The status code.
 * @return `absl_status_t` contained within the status_t.
 */
OT_ALWAYS_INLINE absl_status_t status_err(status_t s) {
  return s.value < 0
e0000f30:              00052813                 slti    a6,a0,0
e0000f34:              41f55793                 srai    a5,a0,0x1f
e0000f38:              8fe9                     and     a5,a5,a0
e0000f3a:              8bfd                     andi    a5,a5,31
e0000f3c:              0017b713                 seqz    a4,a5
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:103
    "ErrorError",
};

bool status_extract(status_t s, const char **code, int32_t *arg, char *mod_id) {
  size_t err = (size_t)status_err(s);
  if (s.value < 0 && err == 0) {
e0000f40:              00e87833                 and     a6,a6,a4
e0000f44:              02000713                 li      a4,32
e0000f48:          /-- 00081363                 bnez    a6,e0000f4e <status_extract+0x1e>
e0000f4c:          |   873e                     mv      a4,a5
/proc/self/cwd/sw/device/lib/base/status.c:106
    err = sizeof(status_codes) / sizeof(status_codes[0]) - 1;
  }
  *code = status_codes[err];
e0000f4e:          \-> 00271813                 slli    a6,a4,0x2
e0000f52:              00000797                 auipc   a5,0x0
e0000f56:              79a78793                 addi    a5,a5,1946 # e00016ec <status_codes>
e0000f5a:              97c2                     add     a5,a5,a6
e0000f5c:              439c                     lw      a5,0(a5)
e0000f5e:              c19c                     sw      a5,0(a1)
/proc/self/cwd/sw/device/lib/base/status.c:107
  if (err) {
e0000f60:              00173593                 seqz    a1,a4
e0000f64:       /----- cb1d                     beqz    a4,e0000f9a <status_extract+0x6a>
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
  return (bitfield >> field.index) & field.mask;
e0000f66:       |      00555713                 srli    a4,a0,0x5
e0000f6a:       |      7ff77713                 andi    a4,a4,2047
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:108
    *arg = (int32_t)bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_ARG);
e0000f6e:       |      c218                     sw      a4,0(a2)
bitfield_field32_read():
/proc/self/cwd/./sw/device/lib/base/bitfield.h:56
e0000f70:       |      01055613                 srli    a2,a0,0x10
status_extract():
/proc/self/cwd/sw/device/lib/base/status.c:111
    uint32_t module_id =
        bitfield_field32_read((uint32_t)s.value, STATUS_FIELD_MODULE_ID);
    *mod_id++ = '@' + ((module_id >> 0) & 0x1F);
e0000f74:       |      8a7d                     andi    a2,a2,31
e0000f76:       |      04066613                 ori     a2,a2,64
e0000f7a:       |      00c68023                 sb      a2,0(a3)
/proc/self/cwd/sw/device/lib/base/status.c:112
    *mod_id++ = '@' + ((module_id >> 5) & 0x1F);
e0000f7e:       |      01555613                 srli    a2,a0,0x15
e0000f82:       |      8a7d                     andi    a2,a2,31
e0000f84:       |      04066613                 ori     a2,a2,64
e0000f88:       |      00c680a3                 sb      a2,1(a3)
/proc/self/cwd/sw/device/lib/base/status.c:113
    *mod_id++ = '@' + ((module_id >> 10) & 0x1F);
e0000f8c:       |      8169                     srli    a0,a0,0x1a
e0000f8e:       |      897d                     andi    a0,a0,31
e0000f90:       |      04056513                 ori     a0,a0,64
e0000f94:       |      00a68123                 sb      a0,2(a3)
e0000f98:       |  /-- a011                     j       e0000f9c <status_extract+0x6c>
/proc/self/cwd/sw/device/lib/base/status.c:116
    return true;
  } else {
    *arg = s.value;
e0000f9a:       \--|-> c208                     sw      a0,0(a2)
/proc/self/cwd/sw/device/lib/base/status.c:119
    return false;
  }
}
e0000f9c:          \-> 0015c513                 xori    a0,a1,1
e0000fa0:              8082                     ret

e0000fa2 <memcpy>:
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:61
  return byte << 24 | byte << 16 | byte << 8 | byte;
}

void *OT_PREFIX_IF_NOT_RV32(memcpy)(void *restrict dest,
                                    const void *restrict src, size_t len) {
  if (dest == NULL || src == NULL) {
e0000fa2:                       00153693                seqz    a3,a0
e0000fa6:                       0015b713                seqz    a4,a1
e0000faa:                       8ed9                    or      a3,a3,a4
e0000fac:       /-------------- eab5                    bnez    a3,e0001020 <memcpy+0x7e>
e0000fae:       |               4711                    li      a4,4
e0000fb0:       |               86b2                    mv      a3,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0000fb2:       |        /----- 00e66c63                bltu    a2,a4,e0000fca <memcpy+0x28>
e0000fb6:       |        |      00a5c6b3                xor     a3,a1,a0
e0000fba:       |        |      0036f793                andi    a5,a3,3
e0000fbe:       |        |      8832                    mv      a6,a2
e0000fc0:       |        |      86b2                    mv      a3,a2
/proc/self/cwd/sw/device/lib/base/memory.c:24
  if (right == NULL || left_ahead == right_ahead) {
e0000fc2:       |        |  /-- eb91                    bnez    a5,e0000fd6 <memcpy+0x34>
e0000fc4:       |        |  |   40a006b3                neg     a3,a0
e0000fc8:       |        |  |   8a8d                    andi    a3,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e0000fca:       |        \--|-> 40d60733                sub     a4,a2,a3
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e0000fce:       |           |   9b71                    andi    a4,a4,-4
e0000fd0:       |           |   00d70833                add     a6,a4,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:69
  unsigned char *dest8 = (unsigned char *)dest;
  const unsigned char *src8 = (const unsigned char *)src;
  size_t body_offset, tail_offset;
  compute_alignment(dest, src, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0000fd4:       |  /--------|-- c6b9                    beqz    a3,e0001022 <memcpy+0x80>
e0000fd6:       |  |        \-> 4781                    li      a5,0
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e0000fd8:       |  |        /-> 00f58733                add     a4,a1,a5
e0000fdc:       |  |        |   00070883                lb      a7,0(a4)
e0000fe0:       |  |        |   00f50733                add     a4,a0,a5
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e0000fe4:       |  |        |   0785                    addi    a5,a5,1
/proc/self/cwd/sw/device/lib/base/memory.c:70
    dest8[i] = src8[i];
e0000fe6:       |  |        |   01170023                sb      a7,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:69
  for (; i < body_offset; ++i) {
e0000fea:       |  |        \-- fef697e3                bne     a3,a5,e0000fd8 <memcpy+0x36>
/proc/self/cwd/sw/device/lib/base/memory.c:72
  }
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0000fee:       |  |  /-------- 0106fb63                bgeu    a3,a6,e0001004 <memcpy+0x62>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  // the pointer points to four bytes of four-byte-aligned memory.
  //
  // Failing to get that particular codegen in either GCC or Clang with -O2 or
  // -Os set shall be considered a bug in this function. The same applies to
  // `write32()`.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0000ff2:       |  |  |  /----> 00d58733                add     a4,a1,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  uint32_t val;
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e0000ff6:       |  |  |  |      4318                    lw      a4,0(a4)
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
 */
inline void write_32(uint32_t value, void *ptr) {
  // Both GCC and Clang optimize the code below into a single word-store on most
  // platforms. See the comment in `read_32()` for more implementation-private
  // information.
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0000ff8:       |  |  |  |      00d507b3                add     a5,a0,a3
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e0000ffc:       |  |  |  |      0691                    addi    a3,a3,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0000ffe:       |  |  |  |      c398                    sw      a4,0(a5)
memcpy():
/proc/self/cwd/sw/device/lib/base/memory.c:72
e0001000:       |  |  |  +----- ff06e9e3                bltu    a3,a6,e0000ff2 <memcpy+0x50>
e0001004:       +--|-->--|----X 00c6fe63                bgeu    a3,a2,e0001020 <memcpy+0x7e>
/proc/self/cwd/sw/device/lib/base/memory.c:76
    uint32_t word = read_32(&src8[i]);
    write_32(word, &dest8[i]);
  }
  for (; i < len; ++i) {
e0001008:       |  |  |  |      8e15                    sub     a2,a2,a3
e000100a:       |  |  |  |      00d50733                add     a4,a0,a3
e000100e:       |  |  |  |      95b6                    add     a1,a1,a3
/proc/self/cwd/sw/device/lib/base/memory.c:77
    dest8[i] = src8[i];
e0001010:       |  |  |  |  /-> 00058683                lb      a3,0(a1)
e0001014:       |  |  |  |  |   00d70023                sb      a3,0(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:76
  for (; i < len; ++i) {
e0001018:       |  |  |  |  |   167d                    addi    a2,a2,-1
e000101a:       |  |  |  |  |   0705                    addi    a4,a4,1
e000101c:       |  |  |  |  |   0585                    addi    a1,a1,1
e000101e:       |  |  |  |  \-- fa6d                    bnez    a2,e0001010 <memcpy+0x6e>
/proc/self/cwd/sw/device/lib/base/memory.c:80
  }
  return dest;
}
e0001020:       \--|--|--|----> 8082                    ret
e0001022:          \--|--|----> 4681                    li      a3,0
/proc/self/cwd/sw/device/lib/base/memory.c:72
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001024:             |  \----- fd06e7e3                bltu    a3,a6,e0000ff2 <memcpy+0x50>
e0001028:             \-------- bff1                    j       e0001004 <memcpy+0x62>

e000102a <memset>:
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:82

void *OT_PREFIX_IF_NOT_RV32(memset)(void *dest, int value, size_t len) {
e000102a:                 4691                  li      a3,4
e000102c:                 8732                  mv      a4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e000102e:             /-- 00d66663              bltu    a2,a3,e000103a <memset+0x10>
e0001032:             |   40a006b3              neg     a3,a0
e0001036:             |   0036f713              andi    a4,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e000103a:             \-> 40e606b3              sub     a3,a2,a4
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e000103e:                 ffc6f813              andi    a6,a3,-4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:89
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(dest, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e0001042:          /----- cb01                  beqz    a4,e0001052 <memset+0x28>
e0001044:          |      87aa                  mv      a5,a0
e0001046:          |      86ba                  mv      a3,a4
/proc/self/cwd/sw/device/lib/base/memory.c:90
    dest8[i] = value8;
e0001048:          |  /-> 00b78023              sb      a1,0(a5)
/proc/self/cwd/sw/device/lib/base/memory.c:89
  for (; i < body_offset; ++i) {
e000104c:          |  |   16fd                  addi    a3,a3,-1
e000104e:          |  |   0785                  addi    a5,a5,1
e0001050:          |  \-- fee5                  bnez    a3,e0001048 <memset+0x1e>
/proc/self/cwd/sw/device/lib/base/memory.c:93
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001052:       /--\----X 02080263              beqz    a6,e0001076 <memset+0x4c>
e0001056:       |         00e808b3              add     a7,a6,a4
e000105a:       |         0ff5f813              andi    a6,a1,255
e000105e:       |         010107b7              lui     a5,0x1010
e0001062:       |         10178793              addi    a5,a5,257 # 1010101 <tohost+0xff00f9>
e0001066:       |         02f807b3              mul     a5,a6,a5
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:145
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e000106a:       |     /-> 00e506b3              add     a3,a0,a4
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e000106e:       |     |   0711                  addi    a4,a4,4
write_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:146
  __builtin_memcpy(ptr, &value, sizeof(uint32_t));
e0001070:       |     |   c29c                  sw      a5,0(a3)
memset():
/proc/self/cwd/sw/device/lib/base/memory.c:93
e0001072:       |     \-- ff176ce3              bltu    a4,a7,e000106a <memset+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:96
    write_32(value32, &dest8[i]);
  }
  for (; i < len; ++i) {
e0001076:       \--/----X 00c77a63              bgeu    a4,a2,e000108a <memset+0x60>
e000107a:          |      8e19                  sub     a2,a2,a4
e000107c:          |      00e506b3              add     a3,a0,a4
/proc/self/cwd/sw/device/lib/base/memory.c:97
    dest8[i] = value8;
e0001080:          |  /-> 00b68023              sb      a1,0(a3)
/proc/self/cwd/sw/device/lib/base/memory.c:96
  for (; i < len; ++i) {
e0001084:          |  |   167d                  addi    a2,a2,-1
e0001086:          |  |   0685                  addi    a3,a3,1
e0001088:          |  \-- fe65                  bnez    a2,e0001080 <memset+0x56>
/proc/self/cwd/sw/device/lib/base/memory.c:99
  }
  return dest;
e000108a:          \----> 8082                  ret

e000108c <memchr>:
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:180
    }
  }
  return kMemCmpEq;
}

void *OT_PREFIX_IF_NOT_RV32(memchr)(const void *ptr, int value, size_t len) {
e000108c:                             4691                      li      a3,4
e000108e:                             8eb2                      mv      t4,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e0001090:                         /-- 00d66663                  bltu    a2,a3,e000109c <memchr+0x10>
e0001094:                         |   40a006b3                  neg     a3,a0
e0001098:                         |   0036fe93                  andi    t4,a3,3
e000109c:                         \-> 0ff5fe13                  andi    t3,a1,255
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:187
  const uint8_t value8 = (uint8_t)value;

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);
  size_t i = 0;
  for (; i < body_offset; ++i) {
e00010a0:                      /----- 000e8b63                  beqz    t4,e00010b6 <memchr+0x2a>
e00010a4:                      |      85aa                      mv      a1,a0
e00010a6:                      |      87f6                      mv      a5,t4
/proc/self/cwd/sw/device/lib/base/memory.c:188
    if (ptr8[i] == value8) {
e00010a8:                      |  /-> 0005c683                  lbu     a3,0(a1)
e00010ac:       /--------------|--|-- 09c68563                  beq     a3,t3,e0001136 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:187
  for (; i < body_offset; ++i) {
e00010b0:       |              |  |   17fd                      addi    a5,a5,-1
e00010b2:       |              |  |   0585                      addi    a1,a1,1
e00010b4:       |              |  \-- fbf5                      bnez    a5,e00010a8 <memchr+0x1c>
e00010b6:       |              \----> 41d605b3                  sub     a1,a2,t4
e00010ba:       |                     99f1                      andi    a1,a1,-4
/proc/self/cwd/sw/device/lib/base/memory.c:193
      return (void *)&ptr8[i];
    }
  }
  const uint32_t value32 = repeat_byte_to_u32(value8);
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e00010bc:       |  /----------------- c9a9                      beqz    a1,e000110e <memchr+0x82>
e00010be:       |  |                  01d58833                  add     a6,a1,t4
e00010c2:       |  |                  010105b7                  lui     a1,0x1010
e00010c6:       |  |                  10158593                  addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
e00010ca:       |  |                  02be02b3                  mul     t0,t3,a1
e00010ce:       |  |                  0ff00893                  li      a7,255
e00010d2:       |  |                  65c1                      lui     a1,0x10
e00010d4:       |  |                  f0058393                  addi    t2,a1,-256 # ff00 <_stack_len+0x7f00>
e00010d8:       |  |                  00ff0337                  lui     t1,0xff0
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e00010dc:       |  |              /-> 01d505b3                  add     a1,a0,t4
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e00010e0:       |  |              |   4194                      lw      a3,0(a1)
memchr():
/proc/self/cwd/sw/device/lib/base/memory.c:195
    uint32_t word = read_32(&ptr8[i]);
    uint32_t bits_eq = ~(word ^ value32);
e00010e2:       |  |              |   0056c7b3                  xor     a5,a3,t0
e00010e6:       |  |              |   fff7c693                  not     a3,a5
/proc/self/cwd/sw/device/lib/base/memory.c:198
    static_assert(__BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__,
                  "memchr assumes that the system is little endian.");
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e00010ea:       |  |              |   0ff6f713                  andi    a4,a3,255
e00010ee:       +--|--------------|-- 05170463                  beq     a4,a7,e0001136 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:201
      return (void *)&ptr8[i];
    }
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e00010f2:       |  |              |   0076f733                  and     a4,a3,t2
e00010f6:       |  |  /-----------|-- 02770b63                  beq     a4,t2,e000112c <memchr+0xa0>
/proc/self/cwd/sw/device/lib/base/memory.c:204
      return (void *)&ptr8[i + 1];
    }
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e00010fa:       |  |  |           |   0066f6b3                  and     a3,a3,t1
e00010fe:       |  |  |  /--------|-- 02668963                  beq     a3,t1,e0001130 <memchr+0xa4>
/proc/self/cwd/sw/device/lib/base/memory.c:207
      return (void *)&ptr8[i + 2];
    }
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e0001102:       |  |  |  |        |   0187d693                  srli    a3,a5,0x18
e0001106:       |  |  |  |  /-----|-- c69d                      beqz    a3,e0001134 <memchr+0xa8>
/proc/self/cwd/sw/device/lib/base/memory.c:193
  for (; i < tail_offset; i += sizeof(uint32_t)) {
e0001108:       |  |  |  |  |     |   0e91                      addi    t4,t4,4
e000110a:       |  |  |  |  |     \-- fd0ee9e3                  bltu    t4,a6,e00010dc <memchr+0x50>
/proc/self/cwd/sw/device/lib/base/memory.c:211
      return (void *)&ptr8[i + 3];
    }
  }
  for (; i < len; ++i) {
e000110e:       |  \--|--|--|--/----X 00cefd63                  bgeu    t4,a2,e0001128 <memchr+0x9c>
e0001112:       |     |  |  |  |      41d60633                  sub     a2,a2,t4
e0001116:       |     |  |  |  |      01d505b3                  add     a1,a0,t4
/proc/self/cwd/sw/device/lib/base/memory.c:212
    if (ptr8[i] == value8) {
e000111a:       |     |  |  |  |  /-> 0005c503                  lbu     a0,0(a1)
e000111e:       +-----|--|--|--|--|-- 01c50c63                  beq     a0,t3,e0001136 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:211
  for (; i < len; ++i) {
e0001122:       |     |  |  |  |  |   167d                      addi    a2,a2,-1
e0001124:       |     |  |  |  |  |   0585                      addi    a1,a1,1
e0001126:       |     |  |  |  |  \-- fa75                      bnez    a2,e000111a <memchr+0x8e>
e0001128:       |     |  |  |  \----> 4581                      li      a1,0
e000112a:       +-----|--|--|-------- a031                      j       e0001136 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:202
      return (void *)&ptr8[i + 1];
e000112c:       |     \--|--|-------> 0585                      addi    a1,a1,1
e000112e:       +--------|--|-------- a021                      j       e0001136 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:205
      return (void *)&ptr8[i + 2];
e0001130:       |        \--|-------> 0589                      addi    a1,a1,2
e0001132:       +-----------|-------- a011                      j       e0001136 <memchr+0xaa>
/proc/self/cwd/sw/device/lib/base/memory.c:208
      return (void *)&ptr8[i + 3];
e0001134:       |           \-------> 058d                      addi    a1,a1,3
/proc/self/cwd/sw/device/lib/base/memory.c:217
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e0001136:       \-------------------> 852e                      mv      a0,a1
e0001138:                             8082                      ret

e000113a <memrchr>:
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:219

void *OT_PREFIX_IF_NOT_RV32(memrchr)(const void *ptr, int value, size_t len) {
e000113a:                          4691                 li      a3,4
e000113c:                          8332                 mv      t1,a2
compute_num_leading_bytes():
/proc/self/cwd/sw/device/lib/base/memory.c:19
  if (len < alignof(uint32_t)) {
e000113e:                      /-- 00d66663             bltu    a2,a3,e000114a <memrchr+0x10>
e0001142:                      |   40a006b3             neg     a3,a0
e0001146:                      |   0036f313             andi    t1,a3,3
compute_alignment():
/proc/self/cwd/sw/device/lib/base/memory.c:51
  const size_t num_words = (len - num_leading_bytes) / sizeof(uint32_t);
e000114a:                      \-> 406606b3             sub     a3,a2,t1
/proc/self/cwd/sw/device/lib/base/memory.c:52
  *out_tail_offset = num_leading_bytes + num_words * sizeof(uint32_t);
e000114e:                          9af1                 andi    a3,a3,-4
e0001150:                          006687b3             add     a5,a3,t1
e0001154:                          86b2                 mv      a3,a2
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:227

  size_t body_offset, tail_offset;
  compute_alignment(ptr, NULL, len, &body_offset, &tail_offset);

  size_t end = len;
  for (; end > tail_offset; --end) {
e0001156:                      /-- 00f66363             bltu    a2,a5,e000115c <memrchr+0x22>
e000115a:                      |   86be                 mv      a3,a5
e000115c:                      \-> 0ff5f393             andi    t2,a1,255
e0001160:                   /--/-X 00c7fd63             bgeu    a5,a2,e000117a <memrchr+0x40>
/proc/self/cwd/sw/device/lib/base/memory.c:229
    const size_t i = end - 1;
    if (ptr8[i] == value8) {
e0001164:                   |  |   00c50733             add     a4,a0,a2
e0001168:                   |  |   fff74583             lbu     a1,-1(a4)
/proc/self/cwd/sw/device/lib/base/memory.c:228
    const size_t i = end - 1;
e000116c:                   |  |   fff60713             addi    a4,a2,-1
e0001170:                   |  |   863a                 mv      a2,a4
e0001172:                   |  \-- fe7597e3             bne     a1,t2,e0001160 <memrchr+0x26>
/proc/self/cwd/sw/device/lib/base/memory.c:260
    if (ptr8[i] == value8) {
      return (void *)&ptr8[i];
    }
  }
  return NULL;
}
e0001176:                   |      953a                 add     a0,a0,a4
e0001178:                   |      8082                 ret
e000117a:                   \----> 010105b7             lui     a1,0x1010
e000117e:                          10158593             addi    a1,a1,257 # 1010101 <tohost+0xff00f9>
repeat_byte_to_u32():
/proc/self/cwd/sw/device/lib/base/memory.c:56
  return byte << 24 | byte << 16 | byte << 8 | byte;
e0001182:                          02b382b3             mul     t0,t2,a1
e0001186:                          00ff0837             lui     a6,0xff0
e000118a:                          65c1                 lui     a1,0x10
e000118c:                          f0058793             addi    a5,a1,-256 # ff00 <_stack_len+0x7f00>
e0001190:                          0ff00893             li      a7,255
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:234
  for (; end > body_offset; end -= sizeof(uint32_t)) {
e0001194:       /--------------/-X 04d37563             bgeu    t1,a3,e00011de <memrchr+0xa4>
read_32():
/proc/self/cwd/./sw/device/lib/base/memory.h:86
  ptr = __builtin_assume_aligned(ptr, alignof(uint32_t));
e0001198:       |              |   00d50633             add     a2,a0,a3
/proc/self/cwd/./sw/device/lib/base/memory.h:88
  __builtin_memcpy(&val, ptr, sizeof(uint32_t));
e000119c:       |              |   ffc62583             lw      a1,-4(a2)
memrchr():
/proc/self/cwd/sw/device/lib/base/memory.c:237
    uint32_t bits_eq = ~(word ^ value32);
e00011a0:       |              |   0055c733             xor     a4,a1,t0
/proc/self/cwd/sw/device/lib/base/memory.c:240
    if (((bits_eq >> 24) & UINT8_MAX) == UINT8_MAX) {
e00011a4:       |              |   01875593             srli    a1,a4,0x18
e00011a8:       |  /-----------|-- cd95                 beqz    a1,e00011e4 <memrchr+0xaa>
e00011aa:       |  |           |   fff74713             not     a4,a4
/proc/self/cwd/sw/device/lib/base/memory.c:243
    if (((bits_eq >> 16) & UINT8_MAX) == UINT8_MAX) {
e00011ae:       |  |           |   010775b3             and     a1,a4,a6
e00011b2:       |  |  /--------|-- 03058c63             beq     a1,a6,e00011ea <memrchr+0xb0>
/proc/self/cwd/sw/device/lib/base/memory.c:246
    if (((bits_eq >> 8) & UINT8_MAX) == UINT8_MAX) {
e00011b6:       |  |  |        |   00f775b3             and     a1,a4,a5
e00011ba:       |  |  |  /-----|-- 02f58b63             beq     a1,a5,e00011f0 <memrchr+0xb6>
/proc/self/cwd/sw/device/lib/base/memory.c:249
    if ((bits_eq & UINT8_MAX) == UINT8_MAX) {
e00011be:       |  |  |  |     |   0ff77593             andi    a1,a4,255
/proc/self/cwd/sw/device/lib/base/memory.c:235
    const size_t i = end - sizeof(uint32_t);
e00011c2:       |  |  |  |     |   16f1                 addi    a3,a3,-4
e00011c4:       |  |  |  |     \-- fd1598e3             bne     a1,a7,e0001194 <memrchr+0x5a>
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e00011c8:       |  |  |  |         9536                 add     a0,a0,a3
e00011ca:       |  |  |  |         8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:255
    if (ptr8[i] == value8) {
e00011cc:       |  |  |  |     /-> 00d505b3             add     a1,a0,a3
e00011d0:       |  |  |  |     |   fff5c583             lbu     a1,-1(a1)
/proc/self/cwd/sw/device/lib/base/memory.c:254
    const size_t i = end - 1;
e00011d4:       |  |  |  |     |   fff68613             addi    a2,a3,-1
e00011d8:       |  |  |  |     |   86b2                 mv      a3,a2
e00011da:       |  |  |  |  /--|-- 00758e63             beq     a1,t2,e00011f6 <memrchr+0xbc>
/proc/self/cwd/sw/device/lib/base/memory.c:253
  for (; end > 0; --end) {
e00011de:       \--|--|--|--|--\-X f6fd                 bnez    a3,e00011cc <memrchr+0x92>
e00011e0:          |  |  |  |      4501                 li      a0,0
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e00011e2:          |  |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:241
      return (void *)&ptr8[i + 3];
e00011e4:          \--|--|--|----> fff60513             addi    a0,a2,-1
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e00011e8:             |  |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:244
      return (void *)&ptr8[i + 2];
e00011ea:             \--|--|----> ffe60513             addi    a0,a2,-2
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e00011ee:                |  |      8082                 ret
/proc/self/cwd/sw/device/lib/base/memory.c:247
      return (void *)&ptr8[i + 1];
e00011f0:                \--|----> ffd60513             addi    a0,a2,-3
/proc/self/cwd/sw/device/lib/base/memory.c:260
}
e00011f4:                   |      8082                 ret
e00011f6:                   \----> 9532                 add     a0,a0,a2
e00011f8:                          8082                 ret
